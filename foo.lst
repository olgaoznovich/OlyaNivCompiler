     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RDP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "caar"
   441 0000056E 0400000000000000        	dq 4
   442 00000576 63616172                	db 0x63, 0x61, 0x61, 0x72
   443                                  	; L_constants + 1402:
   444 0000057A 03                      	db T_string	; "cadr"
   445 0000057B 0400000000000000        	dq 4
   446 00000583 63616472                	db 0x63, 0x61, 0x64, 0x72
   447                                  	; L_constants + 1415:
   448 00000587 03                      	db T_string	; "cdar"
   449 00000588 0400000000000000        	dq 4
   450 00000590 63646172                	db 0x63, 0x64, 0x61, 0x72
   451                                  	; L_constants + 1428:
   452 00000594 03                      	db T_string	; "cddr"
   453 00000595 0400000000000000        	dq 4
   454 0000059D 63646472                	db 0x63, 0x64, 0x64, 0x72
   455                                  	; L_constants + 1441:
   456 000005A1 03                      	db T_string	; "caaar"
   457 000005A2 0500000000000000        	dq 5
   458 000005AA 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   459                                  	; L_constants + 1455:
   460 000005AF 03                      	db T_string	; "caadr"
   461 000005B0 0500000000000000        	dq 5
   462 000005B8 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   463                                  	; L_constants + 1469:
   464 000005BD 03                      	db T_string	; "cadar"
   465 000005BE 0500000000000000        	dq 5
   466 000005C6 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   467                                  	; L_constants + 1483:
   468 000005CB 03                      	db T_string	; "caddr"
   469 000005CC 0500000000000000        	dq 5
   470 000005D4 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   471                                  	; L_constants + 1497:
   472 000005D9 03                      	db T_string	; "cdaar"
   473 000005DA 0500000000000000        	dq 5
   474 000005E2 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   475                                  	; L_constants + 1511:
   476 000005E7 03                      	db T_string	; "cdadr"
   477 000005E8 0500000000000000        	dq 5
   478 000005F0 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   479                                  	; L_constants + 1525:
   480 000005F5 03                      	db T_string	; "cddar"
   481 000005F6 0500000000000000        	dq 5
   482 000005FE 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   483                                  	; L_constants + 1539:
   484 00000603 03                      	db T_string	; "cdddr"
   485 00000604 0500000000000000        	dq 5
   486 0000060C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   487                                  	; L_constants + 1553:
   488 00000611 03                      	db T_string	; "caaaar"
   489 00000612 0600000000000000        	dq 6
   490 0000061A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   491                                  	; L_constants + 1568:
   492 00000620 03                      	db T_string	; "caaadr"
   493 00000621 0600000000000000        	dq 6
   494 00000629 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   495                                  	; L_constants + 1583:
   496 0000062F 03                      	db T_string	; "caadar"
   497 00000630 0600000000000000        	dq 6
   498 00000638 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   499                                  	; L_constants + 1598:
   500 0000063E 03                      	db T_string	; "caaddr"
   501 0000063F 0600000000000000        	dq 6
   502 00000647 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   503                                  	; L_constants + 1613:
   504 0000064D 03                      	db T_string	; "cadaar"
   505 0000064E 0600000000000000        	dq 6
   506 00000656 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   507                                  	; L_constants + 1628:
   508 0000065C 03                      	db T_string	; "cadadr"
   509 0000065D 0600000000000000        	dq 6
   510 00000665 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   511                                  	; L_constants + 1643:
   512 0000066B 03                      	db T_string	; "caddar"
   513 0000066C 0600000000000000        	dq 6
   514 00000674 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   515                                  	; L_constants + 1658:
   516 0000067A 03                      	db T_string	; "cadddr"
   517 0000067B 0600000000000000        	dq 6
   518 00000683 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   519                                  	; L_constants + 1673:
   520 00000689 03                      	db T_string	; "cdaaar"
   521 0000068A 0600000000000000        	dq 6
   522 00000692 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   523                                  	; L_constants + 1688:
   524 00000698 03                      	db T_string	; "cdaadr"
   525 00000699 0600000000000000        	dq 6
   526 000006A1 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   527                                  	; L_constants + 1703:
   528 000006A7 03                      	db T_string	; "cdadar"
   529 000006A8 0600000000000000        	dq 6
   530 000006B0 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   531                                  	; L_constants + 1718:
   532 000006B6 03                      	db T_string	; "cdaddr"
   533 000006B7 0600000000000000        	dq 6
   534 000006BF 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   535                                  	; L_constants + 1733:
   536 000006C5 03                      	db T_string	; "cddaar"
   537 000006C6 0600000000000000        	dq 6
   538 000006CE 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   539                                  	; L_constants + 1748:
   540 000006D4 03                      	db T_string	; "cddadr"
   541 000006D5 0600000000000000        	dq 6
   542 000006DD 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   543                                  	; L_constants + 1763:
   544 000006E3 03                      	db T_string	; "cdddar"
   545 000006E4 0600000000000000        	dq 6
   546 000006EC 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   547                                  	; L_constants + 1778:
   548 000006F2 03                      	db T_string	; "cddddr"
   549 000006F3 0600000000000000        	dq 6
   550 000006FB 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   551                                  	; L_constants + 1793:
   552 00000701 03                      	db T_string	; "list?"
   553 00000702 0500000000000000        	dq 5
   554 0000070A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   555                                  	; L_constants + 1807:
   556 0000070F 03                      	db T_string	; "list"
   557 00000710 0400000000000000        	dq 4
   558 00000718 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   559                                  	; L_constants + 1820:
   560 0000071C 03                      	db T_string	; "not"
   561 0000071D 0300000000000000        	dq 3
   562 00000725 6E6F74                  	db 0x6E, 0x6F, 0x74
   563                                  	; L_constants + 1832:
   564 00000728 03                      	db T_string	; "rational?"
   565 00000729 0900000000000000        	dq 9
   566 00000731 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   567 00000739 3F                      	db 0x3F
   568                                  	; L_constants + 1850:
   569 0000073A 03                      	db T_string	; "list*"
   570 0000073B 0500000000000000        	dq 5
   571 00000743 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   572                                  	; L_constants + 1864:
   573 00000748 03                      	db T_string	; "whatever"
   574 00000749 0800000000000000        	dq 8
   575 00000751 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   576                                  	; L_constants + 1881:
   577 00000759 41                      	db T_interned_symbol	; whatever
   578 0000075A [4807000000000000]      	dq L_constants + 1864
   579                                  	; L_constants + 1890:
   580 00000762 03                      	db T_string	; "apply"
   581 00000763 0500000000000000        	dq 5
   582 0000076B 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   583                                  	; L_constants + 1904:
   584 00000770 03                      	db T_string	; "ormap"
   585 00000771 0500000000000000        	dq 5
   586 00000779 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   587                                  	; L_constants + 1918:
   588 0000077E 03                      	db T_string	; "map"
   589 0000077F 0300000000000000        	dq 3
   590 00000787 6D6170                  	db 0x6D, 0x61, 0x70
   591                                  	; L_constants + 1930:
   592 0000078A 03                      	db T_string	; "andmap"
   593 0000078B 0600000000000000        	dq 6
   594 00000793 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   595                                  	; L_constants + 1945:
   596 00000799 03                      	db T_string	; "reverse"
   597 0000079A 0700000000000000        	dq 7
   598 000007A2 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   599                                  	; L_constants + 1961:
   600 000007A9 03                      	db T_string	; "fold-left"
   601 000007AA 0900000000000000        	dq 9
   602 000007B2 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   603 000007BA 74                      	db 0x74
   604                                  	; L_constants + 1979:
   605 000007BB 03                      	db T_string	; "append"
   606 000007BC 0600000000000000        	dq 6
   607 000007C4 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   608                                  	; L_constants + 1994:
   609 000007CA 03                      	db T_string	; "fold-right"
   610 000007CB 0A00000000000000        	dq 10
   611 000007D3 666F6C642D726967        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x72, 0x69, 0x67
   612 000007DB 6874                    	db 0x68, 0x74
   613                                  	; L_constants + 2013:
   614 000007DD 03                      	db T_string	; "+"
   615 000007DE 0100000000000000        	dq 1
   616 000007E6 2B                      	db 0x2B
   617                                  	; L_constants + 2023:
   618 000007E7 11                      	db T_integer	; 0
   619 000007E8 0000000000000000        	dq 0
   620                                  	; L_constants + 2032:
   621 000007F0 03                      	db T_string	; "__bin_integer_to_fr...
   622 000007F1 1900000000000000        	dq 25
   623 000007F9 5F5F62696E5F696E        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x5F, 0x69, 0x6E
   624 00000801 74656765725F746F        	db 0x74, 0x65, 0x67, 0x65, 0x72, 0x5F, 0x74, 0x6F
   625 00000809 5F6672616374696F        	db 0x5F, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F
   626 00000811 6E                      	db 0x6E
   627                                  	; L_constants + 2066:
   628 00000812 41                      	db T_interned_symbol	; +
   629 00000813 [DD07000000000000]      	dq L_constants + 2013
   630                                  	; L_constants + 2075:
   631 0000081B 03                      	db T_string	; "all arguments need ...
   632 0000081C 2000000000000000        	dq 32
   633 00000824 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   634 0000082C 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   635 00000834 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   636 0000083C 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   637                                  	; L_constants + 2116:
   638 00000844 03                      	db T_string	; "-"
   639 00000845 0100000000000000        	dq 1
   640 0000084D 2D                      	db 0x2D
   641                                  	; L_constants + 2126:
   642 0000084E 03                      	db T_string	; "real"
   643 0000084F 0400000000000000        	dq 4
   644 00000857 7265616C                	db 0x72, 0x65, 0x61, 0x6C
   645                                  	; L_constants + 2139:
   646 0000085B 41                      	db T_interned_symbol	; -
   647 0000085C [4408000000000000]      	dq L_constants + 2116
   648                                  	; L_constants + 2148:
   649 00000864 03                      	db T_string	; "*"
   650 00000865 0100000000000000        	dq 1
   651 0000086D 2A                      	db 0x2A
   652                                  	; L_constants + 2158:
   653 0000086E 11                      	db T_integer	; 1
   654 0000086F 0100000000000000        	dq 1
   655                                  	; L_constants + 2167:
   656 00000877 41                      	db T_interned_symbol	; *
   657 00000878 [6408000000000000]      	dq L_constants + 2148
   658                                  	; L_constants + 2176:
   659 00000880 03                      	db T_string	; "/"
   660 00000881 0100000000000000        	dq 1
   661 00000889 2F                      	db 0x2F
   662                                  	; L_constants + 2186:
   663 0000088A 41                      	db T_interned_symbol	; /
   664 0000088B [8008000000000000]      	dq L_constants + 2176
   665                                  	; L_constants + 2195:
   666 00000893 03                      	db T_string	; "fact"
   667 00000894 0400000000000000        	dq 4
   668 0000089C 66616374                	db 0x66, 0x61, 0x63, 0x74
   669                                  	; L_constants + 2208:
   670 000008A0 03                      	db T_string	; "<"
   671 000008A1 0100000000000000        	dq 1
   672 000008A9 3C                      	db 0x3C
   673                                  	; L_constants + 2218:
   674 000008AA 03                      	db T_string	; "<="
   675 000008AB 0200000000000000        	dq 2
   676 000008B3 3C3D                    	db 0x3C, 0x3D
   677                                  	; L_constants + 2229:
   678 000008B5 03                      	db T_string	; ">"
   679 000008B6 0100000000000000        	dq 1
   680 000008BE 3E                      	db 0x3E
   681                                  	; L_constants + 2239:
   682 000008BF 03                      	db T_string	; ">="
   683 000008C0 0200000000000000        	dq 2
   684 000008C8 3E3D                    	db 0x3E, 0x3D
   685                                  	; L_constants + 2250:
   686 000008CA 03                      	db T_string	; "="
   687 000008CB 0100000000000000        	dq 1
   688 000008D3 3D                      	db 0x3D
   689                                  	; L_constants + 2260:
   690 000008D4 03                      	db T_string	; "generic-comparator"
   691 000008D5 1200000000000000        	dq 18
   692 000008DD 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   693 000008E5 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   694 000008ED 6F72                    	db 0x6F, 0x72
   695                                  	; L_constants + 2287:
   696 000008EF 41                      	db T_interned_symbol	; generic-comparator
   697 000008F0 [D408000000000000]      	dq L_constants + 2260
   698                                  	; L_constants + 2296:
   699 000008F8 03                      	db T_string	; "all the arguments m...
   700 000008F9 2100000000000000        	dq 33
   701 00000901 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   702 00000909 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   703 00000911 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   704 00000919 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   705 00000921 73                      	db 0x73
   706                                  	; L_constants + 2338:
   707 00000922 03                      	db T_string	; "make-list"
   708 00000923 0900000000000000        	dq 9
   709 0000092B 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   710 00000933 74                      	db 0x74
   711                                  	; L_constants + 2356:
   712 00000934 41                      	db T_interned_symbol	; make-list
   713 00000935 [2209000000000000]      	dq L_constants + 2338
   714                                  	; L_constants + 2365:
   715 0000093D 03                      	db T_string	; "Usage: (make-list l...
   716 0000093E 2D00000000000000        	dq 45
   717 00000946 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   718 0000094E 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   719 00000956 74206C656E677468        	db 0x74, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   720 0000095E 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   721 00000966 616C2D696E69742D        	db 0x61, 0x6C, 0x2D, 0x69, 0x6E, 0x69, 0x74, 0x2D
   722 0000096E 6368617229              	db 0x63, 0x68, 0x61, 0x72, 0x29
   723                                  	; L_constants + 2419:
   724 00000973 03                      	db T_string	; "char<?"
   725 00000974 0600000000000000        	dq 6
   726 0000097C 636861723C3F            	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3F
   727                                  	; L_constants + 2434:
   728 00000982 03                      	db T_string	; "char<=?"
   729 00000983 0700000000000000        	dq 7
   730 0000098B 636861723C3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3D, 0x3F
   731                                  	; L_constants + 2450:
   732 00000992 03                      	db T_string	; "char=?"
   733 00000993 0600000000000000        	dq 6
   734 0000099B 636861723D3F            	db 0x63, 0x68, 0x61, 0x72, 0x3D, 0x3F
   735                                  	; L_constants + 2465:
   736 000009A1 03                      	db T_string	; "char>?"
   737 000009A2 0600000000000000        	dq 6
   738 000009AA 636861723E3F            	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3F
   739                                  	; L_constants + 2480:
   740 000009B0 03                      	db T_string	; "char>=?"
   741 000009B1 0700000000000000        	dq 7
   742 000009B9 636861723E3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3D, 0x3F
   743                                  	; L_constants + 2496:
   744 000009C0 03                      	db T_string	; "char-downcase"
   745 000009C1 0D00000000000000        	dq 13
   746 000009C9 636861722D646F77        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x64, 0x6F, 0x77
   747 000009D1 6E63617365              	db 0x6E, 0x63, 0x61, 0x73, 0x65
   748                                  	; L_constants + 2518:
   749 000009D6 03                      	db T_string	; "char-upcase"
   750 000009D7 0B00000000000000        	dq 11
   751 000009DF 636861722D757063        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x75, 0x70, 0x63
   752 000009E7 617365                  	db 0x61, 0x73, 0x65
   753                                  	; L_constants + 2538:
   754 000009EA 0241                    	db T_char, 0x41	; #\A
   755                                  	; L_constants + 2540:
   756 000009EC 025A                    	db T_char, 0x5A	; #\Z
   757                                  	; L_constants + 2542:
   758 000009EE 0261                    	db T_char, 0x61	; #\a
   759                                  	; L_constants + 2544:
   760 000009F0 027A                    	db T_char, 0x7A	; #\z
   761                                  	; L_constants + 2546:
   762 000009F2 03                      	db T_string	; "char-ci<?"
   763 000009F3 0900000000000000        	dq 9
   764 000009FB 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   765 00000A03 3F                      	db 0x3F
   766                                  	; L_constants + 2564:
   767 00000A04 03                      	db T_string	; "char-ci<=?"
   768 00000A05 0A00000000000000        	dq 10
   769 00000A0D 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   770 00000A15 3D3F                    	db 0x3D, 0x3F
   771                                  	; L_constants + 2583:
   772 00000A17 03                      	db T_string	; "char-ci=?"
   773 00000A18 0900000000000000        	dq 9
   774 00000A20 636861722D63693D        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3D
   775 00000A28 3F                      	db 0x3F
   776                                  	; L_constants + 2601:
   777 00000A29 03                      	db T_string	; "char-ci>?"
   778 00000A2A 0900000000000000        	dq 9
   779 00000A32 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   780 00000A3A 3F                      	db 0x3F
   781                                  	; L_constants + 2619:
   782 00000A3B 03                      	db T_string	; "char-ci>=?"
   783 00000A3C 0A00000000000000        	dq 10
   784 00000A44 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   785 00000A4C 3D3F                    	db 0x3D, 0x3F
   786                                  	; L_constants + 2638:
   787 00000A4E 03                      	db T_string	; "string-downcase"
   788 00000A4F 0F00000000000000        	dq 15
   789 00000A57 737472696E672D64        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x64
   790 00000A5F 6F776E63617365          	db 0x6F, 0x77, 0x6E, 0x63, 0x61, 0x73, 0x65
   791                                  	; L_constants + 2662:
   792 00000A66 03                      	db T_string	; "string-upcase"
   793 00000A67 0D00000000000000        	dq 13
   794 00000A6F 737472696E672D75        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x75
   795 00000A77 7063617365              	db 0x70, 0x63, 0x61, 0x73, 0x65
   796                                  	; L_constants + 2684:
   797 00000A7C 03                      	db T_string	; "list->string"
   798 00000A7D 0C00000000000000        	dq 12
   799 00000A85 6C6973742D3E7374        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x73, 0x74
   800 00000A8D 72696E67                	db 0x72, 0x69, 0x6E, 0x67
   801                                  	; L_constants + 2705:
   802 00000A91 03                      	db T_string	; "string->list"
   803 00000A92 0C00000000000000        	dq 12
   804 00000A9A 737472696E672D3E        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x3E
   805 00000AA2 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   806                                  	; L_constants + 2726:
   807 00000AA6 03                      	db T_string	; "string<?"
   808 00000AA7 0800000000000000        	dq 8
   809 00000AAF 737472696E673C3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3F
   810                                  	; L_constants + 2743:
   811 00000AB7 03                      	db T_string	; "string<=?"
   812 00000AB8 0900000000000000        	dq 9
   813 00000AC0 737472696E673C3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3D
   814 00000AC8 3F                      	db 0x3F
   815                                  	; L_constants + 2761:
   816 00000AC9 03                      	db T_string	; "string=?"
   817 00000ACA 0800000000000000        	dq 8
   818 00000AD2 737472696E673D3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3D, 0x3F
   819                                  	; L_constants + 2778:
   820 00000ADA 03                      	db T_string	; "string>=?"
   821 00000ADB 0900000000000000        	dq 9
   822 00000AE3 737472696E673E3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3D
   823 00000AEB 3F                      	db 0x3F
   824                                  	; L_constants + 2796:
   825 00000AEC 03                      	db T_string	; "string>?"
   826 00000AED 0800000000000000        	dq 8
   827 00000AF5 737472696E673E3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3F
   828                                  	; L_constants + 2813:
   829 00000AFD 03                      	db T_string	; "string-ci<?"
   830 00000AFE 0B00000000000000        	dq 11
   831 00000B06 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   832 00000B0E 693C3F                  	db 0x69, 0x3C, 0x3F
   833                                  	; L_constants + 2833:
   834 00000B11 03                      	db T_string	; "string-ci<=?"
   835 00000B12 0C00000000000000        	dq 12
   836 00000B1A 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   837 00000B22 693C3D3F                	db 0x69, 0x3C, 0x3D, 0x3F
   838                                  	; L_constants + 2854:
   839 00000B26 03                      	db T_string	; "string-ci=?"
   840 00000B27 0B00000000000000        	dq 11
   841 00000B2F 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   842 00000B37 693D3F                  	db 0x69, 0x3D, 0x3F
   843                                  	; L_constants + 2874:
   844 00000B3A 03                      	db T_string	; "string-ci>=?"
   845 00000B3B 0C00000000000000        	dq 12
   846 00000B43 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   847 00000B4B 693E3D3F                	db 0x69, 0x3E, 0x3D, 0x3F
   848                                  	; L_constants + 2895:
   849 00000B4F 03                      	db T_string	; "string-ci>?"
   850 00000B50 0B00000000000000        	dq 11
   851 00000B58 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   852 00000B60 693E3F                  	db 0x69, 0x3E, 0x3F
   853                                  	; L_constants + 2915:
   854 00000B63 03                      	db T_string	; "length"
   855 00000B64 0600000000000000        	dq 6
   856 00000B6C 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   857                                  	; L_constants + 2930:
   858 00000B72 41                      	db T_interned_symbol	; make-vector
   859 00000B73 [4804000000000000]      	dq L_constants + 1096
   860                                  	; L_constants + 2939:
   861 00000B7B 03                      	db T_string	; "Usage: (make-vector...
   862 00000B7C 2B00000000000000        	dq 43
   863 00000B84 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   864 00000B8C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   865 00000B94 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   866 00000B9C 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   867 00000BA4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   868 00000BAC 6C7429                  	db 0x6C, 0x74, 0x29
   869                                  	; L_constants + 2991:
   870 00000BAF 41                      	db T_interned_symbol	; make-string
   871 00000BB0 [5C04000000000000]      	dq L_constants + 1116
   872                                  	; L_constants + 3000:
   873 00000BB8 03                      	db T_string	; "Usage: (make-string...
   874 00000BB9 2B00000000000000        	dq 43
   875 00000BC1 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   876 00000BC9 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   877 00000BD1 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   878 00000BD9 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   879 00000BE1 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   880 00000BE9 6C7429                  	db 0x6C, 0x74, 0x29
   881                                  	; L_constants + 3052:
   882 00000BEC 03                      	db T_string	; "list->vector"
   883 00000BED 0C00000000000000        	dq 12
   884 00000BF5 6C6973742D3E7665        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x76, 0x65
   885 00000BFD 63746F72                	db 0x63, 0x74, 0x6F, 0x72
   886                                  	; L_constants + 3073:
   887 00000C01 03                      	db T_string	; "vector"
   888 00000C02 0600000000000000        	dq 6
   889 00000C0A 766563746F72            	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72
   890                                  	; L_constants + 3088:
   891 00000C10 03                      	db T_string	; "vector->list"
   892 00000C11 0C00000000000000        	dq 12
   893 00000C19 766563746F722D3E        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x3E
   894 00000C21 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   895                                  	; L_constants + 3109:
   896 00000C25 03                      	db T_string	; "random"
   897 00000C26 0600000000000000        	dq 6
   898 00000C2E 72616E646F6D            	db 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D
   899                                  	; L_constants + 3124:
   900 00000C34 03                      	db T_string	; "positive?"
   901 00000C35 0900000000000000        	dq 9
   902 00000C3D 706F736974697665        	db 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65
   903 00000C45 3F                      	db 0x3F
   904                                  	; L_constants + 3142:
   905 00000C46 03                      	db T_string	; "negative?"
   906 00000C47 0900000000000000        	dq 9
   907 00000C4F 6E65676174697665        	db 0x6E, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65
   908 00000C57 3F                      	db 0x3F
   909                                  	; L_constants + 3160:
   910 00000C58 03                      	db T_string	; "even?"
   911 00000C59 0500000000000000        	dq 5
   912 00000C61 6576656E3F              	db 0x65, 0x76, 0x65, 0x6E, 0x3F
   913                                  	; L_constants + 3174:
   914 00000C66 11                      	db T_integer	; 2
   915 00000C67 0200000000000000        	dq 2
   916                                  	; L_constants + 3183:
   917 00000C6F 03                      	db T_string	; "odd?"
   918 00000C70 0400000000000000        	dq 4
   919 00000C78 6F64643F                	db 0x6F, 0x64, 0x64, 0x3F
   920                                  	; L_constants + 3196:
   921 00000C7C 03                      	db T_string	; "abs"
   922 00000C7D 0300000000000000        	dq 3
   923 00000C85 616273                  	db 0x61, 0x62, 0x73
   924                                  	; L_constants + 3208:
   925 00000C88 03                      	db T_string	; "equal?"
   926 00000C89 0600000000000000        	dq 6
   927 00000C91 657175616C3F            	db 0x65, 0x71, 0x75, 0x61, 0x6C, 0x3F
   928                                  	; L_constants + 3223:
   929 00000C97 03                      	db T_string	; "assoc"
   930 00000C98 0500000000000000        	dq 5
   931 00000CA0 6173736F63              	db 0x61, 0x73, 0x73, 0x6F, 0x63
   932                                  	; L_constants + 3237:
   933 00000CA5 03                      	db T_string	; "string-append"
   934 00000CA6 0D00000000000000        	dq 13
   935 00000CAE 737472696E672D61        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x61
   936 00000CB6 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   937                                  	; L_constants + 3259:
   938 00000CBB 03                      	db T_string	; "vector-append"
   939 00000CBC 0D00000000000000        	dq 13
   940 00000CC4 766563746F722D61        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x61
   941 00000CCC 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   942                                  	; L_constants + 3281:
   943 00000CD1 03                      	db T_string	; "string-reverse"
   944 00000CD2 0E00000000000000        	dq 14
   945 00000CDA 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   946 00000CE2 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   947                                  	; L_constants + 3304:
   948 00000CE8 03                      	db T_string	; "vector-reverse"
   949 00000CE9 0E00000000000000        	dq 14
   950 00000CF1 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   951 00000CF9 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   952                                  	; L_constants + 3327:
   953 00000CFF 03                      	db T_string	; "string-reverse!"
   954 00000D00 0F00000000000000        	dq 15
   955 00000D08 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   956 00000D10 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   957                                  	; L_constants + 3351:
   958 00000D17 03                      	db T_string	; "vector-reverse!"
   959 00000D18 0F00000000000000        	dq 15
   960 00000D20 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   961 00000D28 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   962                                  	; L_constants + 3375:
   963 00000D2F 03                      	db T_string	; "make-list-thunk"
   964 00000D30 0F00000000000000        	dq 15
   965 00000D38 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   966 00000D40 742D7468756E6B          	db 0x74, 0x2D, 0x74, 0x68, 0x75, 0x6E, 0x6B
   967                                  	; L_constants + 3399:
   968 00000D47 03                      	db T_string	; "make-string-thunk"
   969 00000D48 1100000000000000        	dq 17
   970 00000D50 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   971 00000D58 696E672D7468756E        	db 0x69, 0x6E, 0x67, 0x2D, 0x74, 0x68, 0x75, 0x6E
   972 00000D60 6B                      	db 0x6B
   973                                  	; L_constants + 3425:
   974 00000D61 03                      	db T_string	; "make-vector-thunk"
   975 00000D62 1100000000000000        	dq 17
   976 00000D6A 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   977 00000D72 746F722D7468756E        	db 0x74, 0x6F, 0x72, 0x2D, 0x74, 0x68, 0x75, 0x6E
   978 00000D7A 6B                      	db 0x6B
   979                                  	; L_constants + 3451:
   980 00000D7B 03                      	db T_string	; "logarithm"
   981 00000D7C 0900000000000000        	dq 9
   982 00000D84 6C6F676172697468        	db 0x6C, 0x6F, 0x67, 0x61, 0x72, 0x69, 0x74, 0x68
   983 00000D8C 6D                      	db 0x6D
   984                                  	; L_constants + 3469:
   985 00000D8D 13                      	db T_real	; 1.000000
   986 00000D8E 000000000000F03F        	dq 1.000000
   987                                  	; L_constants + 3478:
   988 00000D96 03                      	db T_string	; "newline"
   989 00000D97 0700000000000000        	dq 7
   990 00000D9F 6E65776C696E65          	db 0x6E, 0x65, 0x77, 0x6C, 0x69, 0x6E, 0x65
   991                                  	; L_constants + 3494:
   992 00000DA6 020A                    	db T_char, 0x0A	; #\newline
   993                                  free_var_0:	; location of null?
   994 00000DA8 [B00D000000000000]      	dq .undefined_object
   995                                  .undefined_object:
   996 00000DB0 05                      	db T_undefined
   997 00000DB1 [0600000000000000]      	dq L_constants + 6
   998                                  
   999                                  free_var_1:	; location of pair?
  1000 00000DB9 [C10D000000000000]      	dq .undefined_object
  1001                                  .undefined_object:
  1002 00000DC1 05                      	db T_undefined
  1003 00000DC2 [1400000000000000]      	dq L_constants + 20
  1004                                  
  1005                                  free_var_2:	; location of void?
  1006 00000DCA [D20D000000000000]      	dq .undefined_object
  1007                                  .undefined_object:
  1008 00000DD2 05                      	db T_undefined
  1009 00000DD3 [2200000000000000]      	dq L_constants + 34
  1010                                  
  1011                                  free_var_3:	; location of char?
  1012 00000DDB [E30D000000000000]      	dq .undefined_object
  1013                                  .undefined_object:
  1014 00000DE3 05                      	db T_undefined
  1015 00000DE4 [3000000000000000]      	dq L_constants + 48
  1016                                  
  1017                                  free_var_4:	; location of string?
  1018 00000DEC [F40D000000000000]      	dq .undefined_object
  1019                                  .undefined_object:
  1020 00000DF4 05                      	db T_undefined
  1021 00000DF5 [3E00000000000000]      	dq L_constants + 62
  1022                                  
  1023                                  free_var_5:	; location of interned-symbol?
  1024 00000DFD [050E000000000000]      	dq .undefined_object
  1025                                  .undefined_object:
  1026 00000E05 05                      	db T_undefined
  1027 00000E06 [4E00000000000000]      	dq L_constants + 78
  1028                                  
  1029                                  free_var_6:	; location of vector?
  1030 00000E0E [160E000000000000]      	dq .undefined_object
  1031                                  .undefined_object:
  1032 00000E16 05                      	db T_undefined
  1033 00000E17 [6700000000000000]      	dq L_constants + 103
  1034                                  
  1035                                  free_var_7:	; location of procedure?
  1036 00000E1F [270E000000000000]      	dq .undefined_object
  1037                                  .undefined_object:
  1038 00000E27 05                      	db T_undefined
  1039 00000E28 [7700000000000000]      	dq L_constants + 119
  1040                                  
  1041                                  free_var_8:	; location of real?
  1042 00000E30 [380E000000000000]      	dq .undefined_object
  1043                                  .undefined_object:
  1044 00000E38 05                      	db T_undefined
  1045 00000E39 [8A00000000000000]      	dq L_constants + 138
  1046                                  
  1047                                  free_var_9:	; location of fraction?
  1048 00000E41 [490E000000000000]      	dq .undefined_object
  1049                                  .undefined_object:
  1050 00000E49 05                      	db T_undefined
  1051 00000E4A [9800000000000000]      	dq L_constants + 152
  1052                                  
  1053                                  free_var_10:	; location of boolean?
  1054 00000E52 [5A0E000000000000]      	dq .undefined_object
  1055                                  .undefined_object:
  1056 00000E5A 05                      	db T_undefined
  1057 00000E5B [AA00000000000000]      	dq L_constants + 170
  1058                                  
  1059                                  free_var_11:	; location of number?
  1060 00000E63 [6B0E000000000000]      	dq .undefined_object
  1061                                  .undefined_object:
  1062 00000E6B 05                      	db T_undefined
  1063 00000E6C [BB00000000000000]      	dq L_constants + 187
  1064                                  
  1065                                  free_var_12:	; location of collection?
  1066 00000E74 [7C0E000000000000]      	dq .undefined_object
  1067                                  .undefined_object:
  1068 00000E7C 05                      	db T_undefined
  1069 00000E7D [CB00000000000000]      	dq L_constants + 203
  1070                                  
  1071                                  free_var_13:	; location of cons
  1072 00000E85 [8D0E000000000000]      	dq .undefined_object
  1073                                  .undefined_object:
  1074 00000E8D 05                      	db T_undefined
  1075 00000E8E [DF00000000000000]      	dq L_constants + 223
  1076                                  
  1077                                  free_var_14:	; location of display-sexpr
  1078 00000E96 [9E0E000000000000]      	dq .undefined_object
  1079                                  .undefined_object:
  1080 00000E9E 05                      	db T_undefined
  1081 00000E9F [EC00000000000000]      	dq L_constants + 236
  1082                                  
  1083                                  free_var_15:	; location of write-char
  1084 00000EA7 [AF0E000000000000]      	dq .undefined_object
  1085                                  .undefined_object:
  1086 00000EAF 05                      	db T_undefined
  1087 00000EB0 [0201000000000000]      	dq L_constants + 258
  1088                                  
  1089                                  free_var_16:	; location of car
  1090 00000EB8 [C00E000000000000]      	dq .undefined_object
  1091                                  .undefined_object:
  1092 00000EC0 05                      	db T_undefined
  1093 00000EC1 [1501000000000000]      	dq L_constants + 277
  1094                                  
  1095                                  free_var_17:	; location of cdr
  1096 00000EC9 [D10E000000000000]      	dq .undefined_object
  1097                                  .undefined_object:
  1098 00000ED1 05                      	db T_undefined
  1099 00000ED2 [2101000000000000]      	dq L_constants + 289
  1100                                  
  1101                                  free_var_18:	; location of string-length
  1102 00000EDA [E20E000000000000]      	dq .undefined_object
  1103                                  .undefined_object:
  1104 00000EE2 05                      	db T_undefined
  1105 00000EE3 [2D01000000000000]      	dq L_constants + 301
  1106                                  
  1107                                  free_var_19:	; location of vector-length
  1108 00000EEB [F30E000000000000]      	dq .undefined_object
  1109                                  .undefined_object:
  1110 00000EF3 05                      	db T_undefined
  1111 00000EF4 [4301000000000000]      	dq L_constants + 323
  1112                                  
  1113                                  free_var_20:	; location of real->integer
  1114 00000EFC [040F000000000000]      	dq .undefined_object
  1115                                  .undefined_object:
  1116 00000F04 05                      	db T_undefined
  1117 00000F05 [5901000000000000]      	dq L_constants + 345
  1118                                  
  1119                                  free_var_21:	; location of exit
  1120 00000F0D [150F000000000000]      	dq .undefined_object
  1121                                  .undefined_object:
  1122 00000F15 05                      	db T_undefined
  1123 00000F16 [6F01000000000000]      	dq L_constants + 367
  1124                                  
  1125                                  free_var_22:	; location of integer->real
  1126 00000F1E [260F000000000000]      	dq .undefined_object
  1127                                  .undefined_object:
  1128 00000F26 05                      	db T_undefined
  1129 00000F27 [7C01000000000000]      	dq L_constants + 380
  1130                                  
  1131                                  free_var_23:	; location of fraction->real
  1132 00000F2F [370F000000000000]      	dq .undefined_object
  1133                                  .undefined_object:
  1134 00000F37 05                      	db T_undefined
  1135 00000F38 [9201000000000000]      	dq L_constants + 402
  1136                                  
  1137                                  free_var_24:	; location of char->integer
  1138 00000F40 [480F000000000000]      	dq .undefined_object
  1139                                  .undefined_object:
  1140 00000F48 05                      	db T_undefined
  1141 00000F49 [A901000000000000]      	dq L_constants + 425
  1142                                  
  1143                                  free_var_25:	; location of integer->char
  1144 00000F51 [590F000000000000]      	dq .undefined_object
  1145                                  .undefined_object:
  1146 00000F59 05                      	db T_undefined
  1147 00000F5A [BF01000000000000]      	dq L_constants + 447
  1148                                  
  1149                                  free_var_26:	; location of trng
  1150 00000F62 [6A0F000000000000]      	dq .undefined_object
  1151                                  .undefined_object:
  1152 00000F6A 05                      	db T_undefined
  1153 00000F6B [D501000000000000]      	dq L_constants + 469
  1154                                  
  1155                                  free_var_27:	; location of zero?
  1156 00000F73 [7B0F000000000000]      	dq .undefined_object
  1157                                  .undefined_object:
  1158 00000F7B 05                      	db T_undefined
  1159 00000F7C [E201000000000000]      	dq L_constants + 482
  1160                                  
  1161                                  free_var_28:	; location of integer?
  1162 00000F84 [8C0F000000000000]      	dq .undefined_object
  1163                                  .undefined_object:
  1164 00000F8C 05                      	db T_undefined
  1165 00000F8D [F001000000000000]      	dq L_constants + 496
  1166                                  
  1167                                  free_var_29:	; location of __bin-apply
  1168 00000F95 [9D0F000000000000]      	dq .undefined_object
  1169                                  .undefined_object:
  1170 00000F9D 05                      	db T_undefined
  1171 00000F9E [0102000000000000]      	dq L_constants + 513
  1172                                  
  1173                                  free_var_30:	; location of __bin-add-rr
  1174 00000FA6 [AE0F000000000000]      	dq .undefined_object
  1175                                  .undefined_object:
  1176 00000FAE 05                      	db T_undefined
  1177 00000FAF [1502000000000000]      	dq L_constants + 533
  1178                                  
  1179                                  free_var_31:	; location of __bin-sub-rr
  1180 00000FB7 [BF0F000000000000]      	dq .undefined_object
  1181                                  .undefined_object:
  1182 00000FBF 05                      	db T_undefined
  1183 00000FC0 [2A02000000000000]      	dq L_constants + 554
  1184                                  
  1185                                  free_var_32:	; location of __bin-mul-rr
  1186 00000FC8 [D00F000000000000]      	dq .undefined_object
  1187                                  .undefined_object:
  1188 00000FD0 05                      	db T_undefined
  1189 00000FD1 [3F02000000000000]      	dq L_constants + 575
  1190                                  
  1191                                  free_var_33:	; location of __bin-div-rr
  1192 00000FD9 [E10F000000000000]      	dq .undefined_object
  1193                                  .undefined_object:
  1194 00000FE1 05                      	db T_undefined
  1195 00000FE2 [5402000000000000]      	dq L_constants + 596
  1196                                  
  1197                                  free_var_34:	; location of __bin-add-qq
  1198 00000FEA [F20F000000000000]      	dq .undefined_object
  1199                                  .undefined_object:
  1200 00000FF2 05                      	db T_undefined
  1201 00000FF3 [6902000000000000]      	dq L_constants + 617
  1202                                  
  1203                                  free_var_35:	; location of __bin-sub-qq
  1204 00000FFB [0310000000000000]      	dq .undefined_object
  1205                                  .undefined_object:
  1206 00001003 05                      	db T_undefined
  1207 00001004 [7E02000000000000]      	dq L_constants + 638
  1208                                  
  1209                                  free_var_36:	; location of __bin-mul-qq
  1210 0000100C [1410000000000000]      	dq .undefined_object
  1211                                  .undefined_object:
  1212 00001014 05                      	db T_undefined
  1213 00001015 [9302000000000000]      	dq L_constants + 659
  1214                                  
  1215                                  free_var_37:	; location of __bin-div-qq
  1216 0000101D [2510000000000000]      	dq .undefined_object
  1217                                  .undefined_object:
  1218 00001025 05                      	db T_undefined
  1219 00001026 [A802000000000000]      	dq L_constants + 680
  1220                                  
  1221                                  free_var_38:	; location of __bin-add-zz
  1222 0000102E [3610000000000000]      	dq .undefined_object
  1223                                  .undefined_object:
  1224 00001036 05                      	db T_undefined
  1225 00001037 [BD02000000000000]      	dq L_constants + 701
  1226                                  
  1227                                  free_var_39:	; location of __bin-sub-zz
  1228 0000103F [4710000000000000]      	dq .undefined_object
  1229                                  .undefined_object:
  1230 00001047 05                      	db T_undefined
  1231 00001048 [D202000000000000]      	dq L_constants + 722
  1232                                  
  1233                                  free_var_40:	; location of __bin-mul-zz
  1234 00001050 [5810000000000000]      	dq .undefined_object
  1235                                  .undefined_object:
  1236 00001058 05                      	db T_undefined
  1237 00001059 [E702000000000000]      	dq L_constants + 743
  1238                                  
  1239                                  free_var_41:	; location of __bin-div-zz
  1240 00001061 [6910000000000000]      	dq .undefined_object
  1241                                  .undefined_object:
  1242 00001069 05                      	db T_undefined
  1243 0000106A [FC02000000000000]      	dq L_constants + 764
  1244                                  
  1245                                  free_var_42:	; location of error
  1246 00001072 [7A10000000000000]      	dq .undefined_object
  1247                                  .undefined_object:
  1248 0000107A 05                      	db T_undefined
  1249 0000107B [1103000000000000]      	dq L_constants + 785
  1250                                  
  1251                                  free_var_43:	; location of __bin-less-than-rr
  1252 00001083 [8B10000000000000]      	dq .undefined_object
  1253                                  .undefined_object:
  1254 0000108B 05                      	db T_undefined
  1255 0000108C [1F03000000000000]      	dq L_constants + 799
  1256                                  
  1257                                  free_var_44:	; location of __bin-less-than-qq
  1258 00001094 [9C10000000000000]      	dq .undefined_object
  1259                                  .undefined_object:
  1260 0000109C 05                      	db T_undefined
  1261 0000109D [3A03000000000000]      	dq L_constants + 826
  1262                                  
  1263                                  free_var_45:	; location of __bin-less-than-zz
  1264 000010A5 [AD10000000000000]      	dq .undefined_object
  1265                                  .undefined_object:
  1266 000010AD 05                      	db T_undefined
  1267 000010AE [5503000000000000]      	dq L_constants + 853
  1268                                  
  1269                                  free_var_46:	; location of __bin-equal-rr
  1270 000010B6 [BE10000000000000]      	dq .undefined_object
  1271                                  .undefined_object:
  1272 000010BE 05                      	db T_undefined
  1273 000010BF [7003000000000000]      	dq L_constants + 880
  1274                                  
  1275                                  free_var_47:	; location of __bin-equal-qq
  1276 000010C7 [CF10000000000000]      	dq .undefined_object
  1277                                  .undefined_object:
  1278 000010CF 05                      	db T_undefined
  1279 000010D0 [8703000000000000]      	dq L_constants + 903
  1280                                  
  1281                                  free_var_48:	; location of __bin-equal-zz
  1282 000010D8 [E010000000000000]      	dq .undefined_object
  1283                                  .undefined_object:
  1284 000010E0 05                      	db T_undefined
  1285 000010E1 [9E03000000000000]      	dq L_constants + 926
  1286                                  
  1287                                  free_var_49:	; location of quotient
  1288 000010E9 [F110000000000000]      	dq .undefined_object
  1289                                  .undefined_object:
  1290 000010F1 05                      	db T_undefined
  1291 000010F2 [B503000000000000]      	dq L_constants + 949
  1292                                  
  1293                                  free_var_50:	; location of remainder
  1294 000010FA [0211000000000000]      	dq .undefined_object
  1295                                  .undefined_object:
  1296 00001102 05                      	db T_undefined
  1297 00001103 [C603000000000000]      	dq L_constants + 966
  1298                                  
  1299                                  free_var_51:	; location of set-car!
  1300 0000110B [1311000000000000]      	dq .undefined_object
  1301                                  .undefined_object:
  1302 00001113 05                      	db T_undefined
  1303 00001114 [D803000000000000]      	dq L_constants + 984
  1304                                  
  1305                                  free_var_52:	; location of set-cdr!
  1306 0000111C [2411000000000000]      	dq .undefined_object
  1307                                  .undefined_object:
  1308 00001124 05                      	db T_undefined
  1309 00001125 [E903000000000000]      	dq L_constants + 1001
  1310                                  
  1311                                  free_var_53:	; location of string-ref
  1312 0000112D [3511000000000000]      	dq .undefined_object
  1313                                  .undefined_object:
  1314 00001135 05                      	db T_undefined
  1315 00001136 [FA03000000000000]      	dq L_constants + 1018
  1316                                  
  1317                                  free_var_54:	; location of vector-ref
  1318 0000113E [4611000000000000]      	dq .undefined_object
  1319                                  .undefined_object:
  1320 00001146 05                      	db T_undefined
  1321 00001147 [0D04000000000000]      	dq L_constants + 1037
  1322                                  
  1323                                  free_var_55:	; location of vector-set!
  1324 0000114F [5711000000000000]      	dq .undefined_object
  1325                                  .undefined_object:
  1326 00001157 05                      	db T_undefined
  1327 00001158 [2004000000000000]      	dq L_constants + 1056
  1328                                  
  1329                                  free_var_56:	; location of string-set!
  1330 00001160 [6811000000000000]      	dq .undefined_object
  1331                                  .undefined_object:
  1332 00001168 05                      	db T_undefined
  1333 00001169 [3404000000000000]      	dq L_constants + 1076
  1334                                  
  1335                                  free_var_57:	; location of make-vector
  1336 00001171 [7911000000000000]      	dq .undefined_object
  1337                                  .undefined_object:
  1338 00001179 05                      	db T_undefined
  1339 0000117A [4804000000000000]      	dq L_constants + 1096
  1340                                  
  1341                                  free_var_58:	; location of make-string
  1342 00001182 [8A11000000000000]      	dq .undefined_object
  1343                                  .undefined_object:
  1344 0000118A 05                      	db T_undefined
  1345 0000118B [5C04000000000000]      	dq L_constants + 1116
  1346                                  
  1347                                  free_var_59:	; location of numerator
  1348 00001193 [9B11000000000000]      	dq .undefined_object
  1349                                  .undefined_object:
  1350 0000119B 05                      	db T_undefined
  1351 0000119C [7004000000000000]      	dq L_constants + 1136
  1352                                  
  1353                                  free_var_60:	; location of denominator
  1354 000011A4 [AC11000000000000]      	dq .undefined_object
  1355                                  .undefined_object:
  1356 000011AC 05                      	db T_undefined
  1357 000011AD [8204000000000000]      	dq L_constants + 1154
  1358                                  
  1359                                  free_var_61:	; location of eq?
  1360 000011B5 [BD11000000000000]      	dq .undefined_object
  1361                                  .undefined_object:
  1362 000011BD 05                      	db T_undefined
  1363 000011BE [9604000000000000]      	dq L_constants + 1174
  1364                                  
  1365                                  free_var_62:	; location of __integer-to-fraction
  1366 000011C6 [CE11000000000000]      	dq .undefined_object
  1367                                  .undefined_object:
  1368 000011CE 05                      	db T_undefined
  1369 000011CF [A204000000000000]      	dq L_constants + 1186
  1370                                  
  1371                                  free_var_63:	; location of logand
  1372 000011D7 [DF11000000000000]      	dq .undefined_object
  1373                                  .undefined_object:
  1374 000011DF 05                      	db T_undefined
  1375 000011E0 [C004000000000000]      	dq L_constants + 1216
  1376                                  
  1377                                  free_var_64:	; location of logor
  1378 000011E8 [F011000000000000]      	dq .undefined_object
  1379                                  .undefined_object:
  1380 000011F0 05                      	db T_undefined
  1381 000011F1 [CF04000000000000]      	dq L_constants + 1231
  1382                                  
  1383                                  free_var_65:	; location of logxor
  1384 000011F9 [0112000000000000]      	dq .undefined_object
  1385                                  .undefined_object:
  1386 00001201 05                      	db T_undefined
  1387 00001202 [DD04000000000000]      	dq L_constants + 1245
  1388                                  
  1389                                  free_var_66:	; location of lognot
  1390 0000120A [1212000000000000]      	dq .undefined_object
  1391                                  .undefined_object:
  1392 00001212 05                      	db T_undefined
  1393 00001213 [EC04000000000000]      	dq L_constants + 1260
  1394                                  
  1395                                  free_var_67:	; location of ash
  1396 0000121B [2312000000000000]      	dq .undefined_object
  1397                                  .undefined_object:
  1398 00001223 05                      	db T_undefined
  1399 00001224 [FB04000000000000]      	dq L_constants + 1275
  1400                                  
  1401                                  free_var_68:	; location of symbol?
  1402 0000122C [3412000000000000]      	dq .undefined_object
  1403                                  .undefined_object:
  1404 00001234 05                      	db T_undefined
  1405 00001235 [0705000000000000]      	dq L_constants + 1287
  1406                                  
  1407                                  free_var_69:	; location of uninterned-symbol?
  1408 0000123D [4512000000000000]      	dq .undefined_object
  1409                                  .undefined_object:
  1410 00001245 05                      	db T_undefined
  1411 00001246 [1705000000000000]      	dq L_constants + 1303
  1412                                  
  1413                                  free_var_70:	; location of gensym?
  1414 0000124E [5612000000000000]      	dq .undefined_object
  1415                                  .undefined_object:
  1416 00001256 05                      	db T_undefined
  1417 00001257 [3205000000000000]      	dq L_constants + 1330
  1418                                  
  1419                                  free_var_71:	; location of gensym
  1420 0000125F [6712000000000000]      	dq .undefined_object
  1421                                  .undefined_object:
  1422 00001267 05                      	db T_undefined
  1423 00001268 [4205000000000000]      	dq L_constants + 1346
  1424                                  
  1425                                  free_var_72:	; location of frame
  1426 00001270 [7812000000000000]      	dq .undefined_object
  1427                                  .undefined_object:
  1428 00001278 05                      	db T_undefined
  1429 00001279 [5105000000000000]      	dq L_constants + 1361
  1430                                  
  1431                                  free_var_73:	; location of break
  1432 00001281 [8912000000000000]      	dq .undefined_object
  1433                                  .undefined_object:
  1434 00001289 05                      	db T_undefined
  1435 0000128A [5F05000000000000]      	dq L_constants + 1375
  1436                                  
  1437                                  free_var_74:	; location of caar
  1438 00001292 [9A12000000000000]      	dq .undefined_object
  1439                                  .undefined_object:
  1440 0000129A 05                      	db T_undefined
  1441 0000129B [6D05000000000000]      	dq L_constants + 1389
  1442                                  
  1443                                  free_var_75:	; location of cadr
  1444 000012A3 [AB12000000000000]      	dq .undefined_object
  1445                                  .undefined_object:
  1446 000012AB 05                      	db T_undefined
  1447 000012AC [7A05000000000000]      	dq L_constants + 1402
  1448                                  
  1449                                  free_var_76:	; location of cdar
  1450 000012B4 [BC12000000000000]      	dq .undefined_object
  1451                                  .undefined_object:
  1452 000012BC 05                      	db T_undefined
  1453 000012BD [8705000000000000]      	dq L_constants + 1415
  1454                                  
  1455                                  free_var_77:	; location of cddr
  1456 000012C5 [CD12000000000000]      	dq .undefined_object
  1457                                  .undefined_object:
  1458 000012CD 05                      	db T_undefined
  1459 000012CE [9405000000000000]      	dq L_constants + 1428
  1460                                  
  1461                                  free_var_78:	; location of caaar
  1462 000012D6 [DE12000000000000]      	dq .undefined_object
  1463                                  .undefined_object:
  1464 000012DE 05                      	db T_undefined
  1465 000012DF [A105000000000000]      	dq L_constants + 1441
  1466                                  
  1467                                  free_var_79:	; location of caadr
  1468 000012E7 [EF12000000000000]      	dq .undefined_object
  1469                                  .undefined_object:
  1470 000012EF 05                      	db T_undefined
  1471 000012F0 [AF05000000000000]      	dq L_constants + 1455
  1472                                  
  1473                                  free_var_80:	; location of cadar
  1474 000012F8 [0013000000000000]      	dq .undefined_object
  1475                                  .undefined_object:
  1476 00001300 05                      	db T_undefined
  1477 00001301 [BD05000000000000]      	dq L_constants + 1469
  1478                                  
  1479                                  free_var_81:	; location of caddr
  1480 00001309 [1113000000000000]      	dq .undefined_object
  1481                                  .undefined_object:
  1482 00001311 05                      	db T_undefined
  1483 00001312 [CB05000000000000]      	dq L_constants + 1483
  1484                                  
  1485                                  free_var_82:	; location of cdaar
  1486 0000131A [2213000000000000]      	dq .undefined_object
  1487                                  .undefined_object:
  1488 00001322 05                      	db T_undefined
  1489 00001323 [D905000000000000]      	dq L_constants + 1497
  1490                                  
  1491                                  free_var_83:	; location of cdadr
  1492 0000132B [3313000000000000]      	dq .undefined_object
  1493                                  .undefined_object:
  1494 00001333 05                      	db T_undefined
  1495 00001334 [E705000000000000]      	dq L_constants + 1511
  1496                                  
  1497                                  free_var_84:	; location of cddar
  1498 0000133C [4413000000000000]      	dq .undefined_object
  1499                                  .undefined_object:
  1500 00001344 05                      	db T_undefined
  1501 00001345 [F505000000000000]      	dq L_constants + 1525
  1502                                  
  1503                                  free_var_85:	; location of cdddr
  1504 0000134D [5513000000000000]      	dq .undefined_object
  1505                                  .undefined_object:
  1506 00001355 05                      	db T_undefined
  1507 00001356 [0306000000000000]      	dq L_constants + 1539
  1508                                  
  1509                                  free_var_86:	; location of caaaar
  1510 0000135E [6613000000000000]      	dq .undefined_object
  1511                                  .undefined_object:
  1512 00001366 05                      	db T_undefined
  1513 00001367 [1106000000000000]      	dq L_constants + 1553
  1514                                  
  1515                                  free_var_87:	; location of caaadr
  1516 0000136F [7713000000000000]      	dq .undefined_object
  1517                                  .undefined_object:
  1518 00001377 05                      	db T_undefined
  1519 00001378 [2006000000000000]      	dq L_constants + 1568
  1520                                  
  1521                                  free_var_88:	; location of caadar
  1522 00001380 [8813000000000000]      	dq .undefined_object
  1523                                  .undefined_object:
  1524 00001388 05                      	db T_undefined
  1525 00001389 [2F06000000000000]      	dq L_constants + 1583
  1526                                  
  1527                                  free_var_89:	; location of caaddr
  1528 00001391 [9913000000000000]      	dq .undefined_object
  1529                                  .undefined_object:
  1530 00001399 05                      	db T_undefined
  1531 0000139A [3E06000000000000]      	dq L_constants + 1598
  1532                                  
  1533                                  free_var_90:	; location of cadaar
  1534 000013A2 [AA13000000000000]      	dq .undefined_object
  1535                                  .undefined_object:
  1536 000013AA 05                      	db T_undefined
  1537 000013AB [4D06000000000000]      	dq L_constants + 1613
  1538                                  
  1539                                  free_var_91:	; location of cadadr
  1540 000013B3 [BB13000000000000]      	dq .undefined_object
  1541                                  .undefined_object:
  1542 000013BB 05                      	db T_undefined
  1543 000013BC [5C06000000000000]      	dq L_constants + 1628
  1544                                  
  1545                                  free_var_92:	; location of caddar
  1546 000013C4 [CC13000000000000]      	dq .undefined_object
  1547                                  .undefined_object:
  1548 000013CC 05                      	db T_undefined
  1549 000013CD [6B06000000000000]      	dq L_constants + 1643
  1550                                  
  1551                                  free_var_93:	; location of cadddr
  1552 000013D5 [DD13000000000000]      	dq .undefined_object
  1553                                  .undefined_object:
  1554 000013DD 05                      	db T_undefined
  1555 000013DE [7A06000000000000]      	dq L_constants + 1658
  1556                                  
  1557                                  free_var_94:	; location of cdaaar
  1558 000013E6 [EE13000000000000]      	dq .undefined_object
  1559                                  .undefined_object:
  1560 000013EE 05                      	db T_undefined
  1561 000013EF [8906000000000000]      	dq L_constants + 1673
  1562                                  
  1563                                  free_var_95:	; location of cdaadr
  1564 000013F7 [FF13000000000000]      	dq .undefined_object
  1565                                  .undefined_object:
  1566 000013FF 05                      	db T_undefined
  1567 00001400 [9806000000000000]      	dq L_constants + 1688
  1568                                  
  1569                                  free_var_96:	; location of cdadar
  1570 00001408 [1014000000000000]      	dq .undefined_object
  1571                                  .undefined_object:
  1572 00001410 05                      	db T_undefined
  1573 00001411 [A706000000000000]      	dq L_constants + 1703
  1574                                  
  1575                                  free_var_97:	; location of cdaddr
  1576 00001419 [2114000000000000]      	dq .undefined_object
  1577                                  .undefined_object:
  1578 00001421 05                      	db T_undefined
  1579 00001422 [B606000000000000]      	dq L_constants + 1718
  1580                                  
  1581                                  free_var_98:	; location of cddaar
  1582 0000142A [3214000000000000]      	dq .undefined_object
  1583                                  .undefined_object:
  1584 00001432 05                      	db T_undefined
  1585 00001433 [C506000000000000]      	dq L_constants + 1733
  1586                                  
  1587                                  free_var_99:	; location of cddadr
  1588 0000143B [4314000000000000]      	dq .undefined_object
  1589                                  .undefined_object:
  1590 00001443 05                      	db T_undefined
  1591 00001444 [D406000000000000]      	dq L_constants + 1748
  1592                                  
  1593                                  free_var_100:	; location of cdddar
  1594 0000144C [5414000000000000]      	dq .undefined_object
  1595                                  .undefined_object:
  1596 00001454 05                      	db T_undefined
  1597 00001455 [E306000000000000]      	dq L_constants + 1763
  1598                                  
  1599                                  free_var_101:	; location of cddddr
  1600 0000145D [6514000000000000]      	dq .undefined_object
  1601                                  .undefined_object:
  1602 00001465 05                      	db T_undefined
  1603 00001466 [F206000000000000]      	dq L_constants + 1778
  1604                                  
  1605                                  free_var_102:	; location of list?
  1606 0000146E [7614000000000000]      	dq .undefined_object
  1607                                  .undefined_object:
  1608 00001476 05                      	db T_undefined
  1609 00001477 [0107000000000000]      	dq L_constants + 1793
  1610                                  
  1611                                  free_var_103:	; location of list
  1612 0000147F [8714000000000000]      	dq .undefined_object
  1613                                  .undefined_object:
  1614 00001487 05                      	db T_undefined
  1615 00001488 [0F07000000000000]      	dq L_constants + 1807
  1616                                  
  1617                                  free_var_104:	; location of not
  1618 00001490 [9814000000000000]      	dq .undefined_object
  1619                                  .undefined_object:
  1620 00001498 05                      	db T_undefined
  1621 00001499 [1C07000000000000]      	dq L_constants + 1820
  1622                                  
  1623                                  free_var_105:	; location of rational?
  1624 000014A1 [A914000000000000]      	dq .undefined_object
  1625                                  .undefined_object:
  1626 000014A9 05                      	db T_undefined
  1627 000014AA [2807000000000000]      	dq L_constants + 1832
  1628                                  
  1629                                  free_var_106:	; location of list*
  1630 000014B2 [BA14000000000000]      	dq .undefined_object
  1631                                  .undefined_object:
  1632 000014BA 05                      	db T_undefined
  1633 000014BB [3A07000000000000]      	dq L_constants + 1850
  1634                                  
  1635                                  free_var_107:	; location of apply
  1636 000014C3 [CB14000000000000]      	dq .undefined_object
  1637                                  .undefined_object:
  1638 000014CB 05                      	db T_undefined
  1639 000014CC [6207000000000000]      	dq L_constants + 1890
  1640                                  
  1641                                  free_var_108:	; location of ormap
  1642 000014D4 [DC14000000000000]      	dq .undefined_object
  1643                                  .undefined_object:
  1644 000014DC 05                      	db T_undefined
  1645 000014DD [7007000000000000]      	dq L_constants + 1904
  1646                                  
  1647                                  free_var_109:	; location of map
  1648 000014E5 [ED14000000000000]      	dq .undefined_object
  1649                                  .undefined_object:
  1650 000014ED 05                      	db T_undefined
  1651 000014EE [7E07000000000000]      	dq L_constants + 1918
  1652                                  
  1653                                  free_var_110:	; location of andmap
  1654 000014F6 [FE14000000000000]      	dq .undefined_object
  1655                                  .undefined_object:
  1656 000014FE 05                      	db T_undefined
  1657 000014FF [8A07000000000000]      	dq L_constants + 1930
  1658                                  
  1659                                  free_var_111:	; location of reverse
  1660 00001507 [0F15000000000000]      	dq .undefined_object
  1661                                  .undefined_object:
  1662 0000150F 05                      	db T_undefined
  1663 00001510 [9907000000000000]      	dq L_constants + 1945
  1664                                  
  1665                                  free_var_112:	; location of fold-left
  1666 00001518 [2015000000000000]      	dq .undefined_object
  1667                                  .undefined_object:
  1668 00001520 05                      	db T_undefined
  1669 00001521 [A907000000000000]      	dq L_constants + 1961
  1670                                  
  1671                                  free_var_113:	; location of append
  1672 00001529 [3115000000000000]      	dq .undefined_object
  1673                                  .undefined_object:
  1674 00001531 05                      	db T_undefined
  1675 00001532 [BB07000000000000]      	dq L_constants + 1979
  1676                                  
  1677                                  free_var_114:	; location of fold-right
  1678 0000153A [4215000000000000]      	dq .undefined_object
  1679                                  .undefined_object:
  1680 00001542 05                      	db T_undefined
  1681 00001543 [CA07000000000000]      	dq L_constants + 1994
  1682                                  
  1683                                  free_var_115:	; location of +
  1684 0000154B [5315000000000000]      	dq .undefined_object
  1685                                  .undefined_object:
  1686 00001553 05                      	db T_undefined
  1687 00001554 [DD07000000000000]      	dq L_constants + 2013
  1688                                  
  1689                                  free_var_116:	; location of __bin_integer_to_fraction
  1690 0000155C [6415000000000000]      	dq .undefined_object
  1691                                  .undefined_object:
  1692 00001564 05                      	db T_undefined
  1693 00001565 [F007000000000000]      	dq L_constants + 2032
  1694                                  
  1695                                  free_var_117:	; location of -
  1696 0000156D [7515000000000000]      	dq .undefined_object
  1697                                  .undefined_object:
  1698 00001575 05                      	db T_undefined
  1699 00001576 [4408000000000000]      	dq L_constants + 2116
  1700                                  
  1701                                  free_var_118:	; location of real
  1702 0000157E [8615000000000000]      	dq .undefined_object
  1703                                  .undefined_object:
  1704 00001586 05                      	db T_undefined
  1705 00001587 [4E08000000000000]      	dq L_constants + 2126
  1706                                  
  1707                                  free_var_119:	; location of *
  1708 0000158F [9715000000000000]      	dq .undefined_object
  1709                                  .undefined_object:
  1710 00001597 05                      	db T_undefined
  1711 00001598 [6408000000000000]      	dq L_constants + 2148
  1712                                  
  1713                                  free_var_120:	; location of /
  1714 000015A0 [A815000000000000]      	dq .undefined_object
  1715                                  .undefined_object:
  1716 000015A8 05                      	db T_undefined
  1717 000015A9 [8008000000000000]      	dq L_constants + 2176
  1718                                  
  1719                                  free_var_121:	; location of fact
  1720 000015B1 [B915000000000000]      	dq .undefined_object
  1721                                  .undefined_object:
  1722 000015B9 05                      	db T_undefined
  1723 000015BA [9308000000000000]      	dq L_constants + 2195
  1724                                  
  1725                                  free_var_122:	; location of <
  1726 000015C2 [CA15000000000000]      	dq .undefined_object
  1727                                  .undefined_object:
  1728 000015CA 05                      	db T_undefined
  1729 000015CB [A008000000000000]      	dq L_constants + 2208
  1730                                  
  1731                                  free_var_123:	; location of <=
  1732 000015D3 [DB15000000000000]      	dq .undefined_object
  1733                                  .undefined_object:
  1734 000015DB 05                      	db T_undefined
  1735 000015DC [AA08000000000000]      	dq L_constants + 2218
  1736                                  
  1737                                  free_var_124:	; location of >
  1738 000015E4 [EC15000000000000]      	dq .undefined_object
  1739                                  .undefined_object:
  1740 000015EC 05                      	db T_undefined
  1741 000015ED [B508000000000000]      	dq L_constants + 2229
  1742                                  
  1743                                  free_var_125:	; location of >=
  1744 000015F5 [FD15000000000000]      	dq .undefined_object
  1745                                  .undefined_object:
  1746 000015FD 05                      	db T_undefined
  1747 000015FE [BF08000000000000]      	dq L_constants + 2239
  1748                                  
  1749                                  free_var_126:	; location of =
  1750 00001606 [0E16000000000000]      	dq .undefined_object
  1751                                  .undefined_object:
  1752 0000160E 05                      	db T_undefined
  1753 0000160F [CA08000000000000]      	dq L_constants + 2250
  1754                                  
  1755                                  free_var_127:	; location of make-list
  1756 00001617 [1F16000000000000]      	dq .undefined_object
  1757                                  .undefined_object:
  1758 0000161F 05                      	db T_undefined
  1759 00001620 [2209000000000000]      	dq L_constants + 2338
  1760                                  
  1761                                  free_var_128:	; location of char<?
  1762 00001628 [3016000000000000]      	dq .undefined_object
  1763                                  .undefined_object:
  1764 00001630 05                      	db T_undefined
  1765 00001631 [7309000000000000]      	dq L_constants + 2419
  1766                                  
  1767                                  free_var_129:	; location of char<=?
  1768 00001639 [4116000000000000]      	dq .undefined_object
  1769                                  .undefined_object:
  1770 00001641 05                      	db T_undefined
  1771 00001642 [8209000000000000]      	dq L_constants + 2434
  1772                                  
  1773                                  free_var_130:	; location of char=?
  1774 0000164A [5216000000000000]      	dq .undefined_object
  1775                                  .undefined_object:
  1776 00001652 05                      	db T_undefined
  1777 00001653 [9209000000000000]      	dq L_constants + 2450
  1778                                  
  1779                                  free_var_131:	; location of char>?
  1780 0000165B [6316000000000000]      	dq .undefined_object
  1781                                  .undefined_object:
  1782 00001663 05                      	db T_undefined
  1783 00001664 [A109000000000000]      	dq L_constants + 2465
  1784                                  
  1785                                  free_var_132:	; location of char>=?
  1786 0000166C [7416000000000000]      	dq .undefined_object
  1787                                  .undefined_object:
  1788 00001674 05                      	db T_undefined
  1789 00001675 [B009000000000000]      	dq L_constants + 2480
  1790                                  
  1791                                  free_var_133:	; location of char-downcase
  1792 0000167D [8516000000000000]      	dq .undefined_object
  1793                                  .undefined_object:
  1794 00001685 05                      	db T_undefined
  1795 00001686 [C009000000000000]      	dq L_constants + 2496
  1796                                  
  1797                                  free_var_134:	; location of char-upcase
  1798 0000168E [9616000000000000]      	dq .undefined_object
  1799                                  .undefined_object:
  1800 00001696 05                      	db T_undefined
  1801 00001697 [D609000000000000]      	dq L_constants + 2518
  1802                                  
  1803                                  free_var_135:	; location of char-ci<?
  1804 0000169F [A716000000000000]      	dq .undefined_object
  1805                                  .undefined_object:
  1806 000016A7 05                      	db T_undefined
  1807 000016A8 [F209000000000000]      	dq L_constants + 2546
  1808                                  
  1809                                  free_var_136:	; location of char-ci<=?
  1810 000016B0 [B816000000000000]      	dq .undefined_object
  1811                                  .undefined_object:
  1812 000016B8 05                      	db T_undefined
  1813 000016B9 [040A000000000000]      	dq L_constants + 2564
  1814                                  
  1815                                  free_var_137:	; location of char-ci=?
  1816 000016C1 [C916000000000000]      	dq .undefined_object
  1817                                  .undefined_object:
  1818 000016C9 05                      	db T_undefined
  1819 000016CA [170A000000000000]      	dq L_constants + 2583
  1820                                  
  1821                                  free_var_138:	; location of char-ci>?
  1822 000016D2 [DA16000000000000]      	dq .undefined_object
  1823                                  .undefined_object:
  1824 000016DA 05                      	db T_undefined
  1825 000016DB [290A000000000000]      	dq L_constants + 2601
  1826                                  
  1827                                  free_var_139:	; location of char-ci>=?
  1828 000016E3 [EB16000000000000]      	dq .undefined_object
  1829                                  .undefined_object:
  1830 000016EB 05                      	db T_undefined
  1831 000016EC [3B0A000000000000]      	dq L_constants + 2619
  1832                                  
  1833                                  free_var_140:	; location of string-downcase
  1834 000016F4 [FC16000000000000]      	dq .undefined_object
  1835                                  .undefined_object:
  1836 000016FC 05                      	db T_undefined
  1837 000016FD [4E0A000000000000]      	dq L_constants + 2638
  1838                                  
  1839                                  free_var_141:	; location of string-upcase
  1840 00001705 [0D17000000000000]      	dq .undefined_object
  1841                                  .undefined_object:
  1842 0000170D 05                      	db T_undefined
  1843 0000170E [660A000000000000]      	dq L_constants + 2662
  1844                                  
  1845                                  free_var_142:	; location of list->string
  1846 00001716 [1E17000000000000]      	dq .undefined_object
  1847                                  .undefined_object:
  1848 0000171E 05                      	db T_undefined
  1849 0000171F [7C0A000000000000]      	dq L_constants + 2684
  1850                                  
  1851                                  free_var_143:	; location of string->list
  1852 00001727 [2F17000000000000]      	dq .undefined_object
  1853                                  .undefined_object:
  1854 0000172F 05                      	db T_undefined
  1855 00001730 [910A000000000000]      	dq L_constants + 2705
  1856                                  
  1857                                  free_var_144:	; location of string<?
  1858 00001738 [4017000000000000]      	dq .undefined_object
  1859                                  .undefined_object:
  1860 00001740 05                      	db T_undefined
  1861 00001741 [A60A000000000000]      	dq L_constants + 2726
  1862                                  
  1863                                  free_var_145:	; location of string<=?
  1864 00001749 [5117000000000000]      	dq .undefined_object
  1865                                  .undefined_object:
  1866 00001751 05                      	db T_undefined
  1867 00001752 [B70A000000000000]      	dq L_constants + 2743
  1868                                  
  1869                                  free_var_146:	; location of string=?
  1870 0000175A [6217000000000000]      	dq .undefined_object
  1871                                  .undefined_object:
  1872 00001762 05                      	db T_undefined
  1873 00001763 [C90A000000000000]      	dq L_constants + 2761
  1874                                  
  1875                                  free_var_147:	; location of string>=?
  1876 0000176B [7317000000000000]      	dq .undefined_object
  1877                                  .undefined_object:
  1878 00001773 05                      	db T_undefined
  1879 00001774 [DA0A000000000000]      	dq L_constants + 2778
  1880                                  
  1881                                  free_var_148:	; location of string>?
  1882 0000177C [8417000000000000]      	dq .undefined_object
  1883                                  .undefined_object:
  1884 00001784 05                      	db T_undefined
  1885 00001785 [EC0A000000000000]      	dq L_constants + 2796
  1886                                  
  1887                                  free_var_149:	; location of string-ci<?
  1888 0000178D [9517000000000000]      	dq .undefined_object
  1889                                  .undefined_object:
  1890 00001795 05                      	db T_undefined
  1891 00001796 [FD0A000000000000]      	dq L_constants + 2813
  1892                                  
  1893                                  free_var_150:	; location of string-ci<=?
  1894 0000179E [A617000000000000]      	dq .undefined_object
  1895                                  .undefined_object:
  1896 000017A6 05                      	db T_undefined
  1897 000017A7 [110B000000000000]      	dq L_constants + 2833
  1898                                  
  1899                                  free_var_151:	; location of string-ci=?
  1900 000017AF [B717000000000000]      	dq .undefined_object
  1901                                  .undefined_object:
  1902 000017B7 05                      	db T_undefined
  1903 000017B8 [260B000000000000]      	dq L_constants + 2854
  1904                                  
  1905                                  free_var_152:	; location of string-ci>=?
  1906 000017C0 [C817000000000000]      	dq .undefined_object
  1907                                  .undefined_object:
  1908 000017C8 05                      	db T_undefined
  1909 000017C9 [3A0B000000000000]      	dq L_constants + 2874
  1910                                  
  1911                                  free_var_153:	; location of string-ci>?
  1912 000017D1 [D917000000000000]      	dq .undefined_object
  1913                                  .undefined_object:
  1914 000017D9 05                      	db T_undefined
  1915 000017DA [4F0B000000000000]      	dq L_constants + 2895
  1916                                  
  1917                                  free_var_154:	; location of length
  1918 000017E2 [EA17000000000000]      	dq .undefined_object
  1919                                  .undefined_object:
  1920 000017EA 05                      	db T_undefined
  1921 000017EB [630B000000000000]      	dq L_constants + 2915
  1922                                  
  1923                                  free_var_155:	; location of list->vector
  1924 000017F3 [FB17000000000000]      	dq .undefined_object
  1925                                  .undefined_object:
  1926 000017FB 05                      	db T_undefined
  1927 000017FC [EC0B000000000000]      	dq L_constants + 3052
  1928                                  
  1929                                  free_var_156:	; location of vector
  1930 00001804 [0C18000000000000]      	dq .undefined_object
  1931                                  .undefined_object:
  1932 0000180C 05                      	db T_undefined
  1933 0000180D [010C000000000000]      	dq L_constants + 3073
  1934                                  
  1935                                  free_var_157:	; location of vector->list
  1936 00001815 [1D18000000000000]      	dq .undefined_object
  1937                                  .undefined_object:
  1938 0000181D 05                      	db T_undefined
  1939 0000181E [100C000000000000]      	dq L_constants + 3088
  1940                                  
  1941                                  free_var_158:	; location of random
  1942 00001826 [2E18000000000000]      	dq .undefined_object
  1943                                  .undefined_object:
  1944 0000182E 05                      	db T_undefined
  1945 0000182F [250C000000000000]      	dq L_constants + 3109
  1946                                  
  1947                                  free_var_159:	; location of positive?
  1948 00001837 [3F18000000000000]      	dq .undefined_object
  1949                                  .undefined_object:
  1950 0000183F 05                      	db T_undefined
  1951 00001840 [340C000000000000]      	dq L_constants + 3124
  1952                                  
  1953                                  free_var_160:	; location of negative?
  1954 00001848 [5018000000000000]      	dq .undefined_object
  1955                                  .undefined_object:
  1956 00001850 05                      	db T_undefined
  1957 00001851 [460C000000000000]      	dq L_constants + 3142
  1958                                  
  1959                                  free_var_161:	; location of even?
  1960 00001859 [6118000000000000]      	dq .undefined_object
  1961                                  .undefined_object:
  1962 00001861 05                      	db T_undefined
  1963 00001862 [580C000000000000]      	dq L_constants + 3160
  1964                                  
  1965                                  free_var_162:	; location of odd?
  1966 0000186A [7218000000000000]      	dq .undefined_object
  1967                                  .undefined_object:
  1968 00001872 05                      	db T_undefined
  1969 00001873 [6F0C000000000000]      	dq L_constants + 3183
  1970                                  
  1971                                  free_var_163:	; location of abs
  1972 0000187B [8318000000000000]      	dq .undefined_object
  1973                                  .undefined_object:
  1974 00001883 05                      	db T_undefined
  1975 00001884 [7C0C000000000000]      	dq L_constants + 3196
  1976                                  
  1977                                  free_var_164:	; location of equal?
  1978 0000188C [9418000000000000]      	dq .undefined_object
  1979                                  .undefined_object:
  1980 00001894 05                      	db T_undefined
  1981 00001895 [880C000000000000]      	dq L_constants + 3208
  1982                                  
  1983                                  free_var_165:	; location of assoc
  1984 0000189D [A518000000000000]      	dq .undefined_object
  1985                                  .undefined_object:
  1986 000018A5 05                      	db T_undefined
  1987 000018A6 [970C000000000000]      	dq L_constants + 3223
  1988                                  
  1989                                  free_var_166:	; location of string-append
  1990 000018AE [B618000000000000]      	dq .undefined_object
  1991                                  .undefined_object:
  1992 000018B6 05                      	db T_undefined
  1993 000018B7 [A50C000000000000]      	dq L_constants + 3237
  1994                                  
  1995                                  free_var_167:	; location of vector-append
  1996 000018BF [C718000000000000]      	dq .undefined_object
  1997                                  .undefined_object:
  1998 000018C7 05                      	db T_undefined
  1999 000018C8 [BB0C000000000000]      	dq L_constants + 3259
  2000                                  
  2001                                  free_var_168:	; location of string-reverse
  2002 000018D0 [D818000000000000]      	dq .undefined_object
  2003                                  .undefined_object:
  2004 000018D8 05                      	db T_undefined
  2005 000018D9 [D10C000000000000]      	dq L_constants + 3281
  2006                                  
  2007                                  free_var_169:	; location of vector-reverse
  2008 000018E1 [E918000000000000]      	dq .undefined_object
  2009                                  .undefined_object:
  2010 000018E9 05                      	db T_undefined
  2011 000018EA [E80C000000000000]      	dq L_constants + 3304
  2012                                  
  2013                                  free_var_170:	; location of string-reverse!
  2014 000018F2 [FA18000000000000]      	dq .undefined_object
  2015                                  .undefined_object:
  2016 000018FA 05                      	db T_undefined
  2017 000018FB [FF0C000000000000]      	dq L_constants + 3327
  2018                                  
  2019                                  free_var_171:	; location of vector-reverse!
  2020 00001903 [0B19000000000000]      	dq .undefined_object
  2021                                  .undefined_object:
  2022 0000190B 05                      	db T_undefined
  2023 0000190C [170D000000000000]      	dq L_constants + 3351
  2024                                  
  2025                                  free_var_172:	; location of make-list-thunk
  2026 00001914 [1C19000000000000]      	dq .undefined_object
  2027                                  .undefined_object:
  2028 0000191C 05                      	db T_undefined
  2029 0000191D [2F0D000000000000]      	dq L_constants + 3375
  2030                                  
  2031                                  free_var_173:	; location of make-string-thunk
  2032 00001925 [2D19000000000000]      	dq .undefined_object
  2033                                  .undefined_object:
  2034 0000192D 05                      	db T_undefined
  2035 0000192E [470D000000000000]      	dq L_constants + 3399
  2036                                  
  2037                                  free_var_174:	; location of make-vector-thunk
  2038 00001936 [3E19000000000000]      	dq .undefined_object
  2039                                  .undefined_object:
  2040 0000193E 05                      	db T_undefined
  2041 0000193F [610D000000000000]      	dq L_constants + 3425
  2042                                  
  2043                                  free_var_175:	; location of logarithm
  2044 00001947 [4F19000000000000]      	dq .undefined_object
  2045                                  .undefined_object:
  2046 0000194F 05                      	db T_undefined
  2047 00001950 [7B0D000000000000]      	dq L_constants + 3451
  2048                                  
  2049                                  free_var_176:	; location of newline
  2050 00001958 [6019000000000000]      	dq .undefined_object
  2051                                  .undefined_object:
  2052 00001960 05                      	db T_undefined
  2053 00001961 [960D000000000000]      	dq L_constants + 3478
  2054                                  
  2055                                  
  2056                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
  2057                                  global main
  2058                                  section .text
  2059                                  main:
  2060 00000000 C8000000                        enter 0, 0
  2061                                          
  2062                                  	; building closure for null?
  2063 00000004 48BF-                   	mov rdi, free_var_0
  2063 00000006 [A80D000000000000] 
  2064 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
  2064 00000010 [F55F010000000000] 
  2065 00000018 E8D95D0100              	call bind_primitive
  2066                                  
  2067                                  	; building closure for pair?
  2068 0000001D 48BF-                   	mov rdi, free_var_1
  2068 0000001F [B90D000000000000] 
  2069 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
  2069 00000029 [2760010000000000] 
  2070 00000031 E8C05D0100              	call bind_primitive
  2071                                  
  2072                                  	; building closure for void?
  2073 00000036 48BF-                   	mov rdi, free_var_2
  2073 00000038 [CA0D000000000000] 
  2074 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
  2074 00000042 [5960010000000000] 
  2075 0000004A E8A75D0100              	call bind_primitive
  2076                                  
  2077                                  	; building closure for char?
  2078 0000004F 48BF-                   	mov rdi, free_var_3
  2078 00000051 [DB0D000000000000] 
  2079 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
  2079 0000005B [8B60010000000000] 
  2080 00000063 E88E5D0100              	call bind_primitive
  2081                                  
  2082                                  	; building closure for string?
  2083 00000068 48BF-                   	mov rdi, free_var_4
  2083 0000006A [EC0D000000000000] 
  2084 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
  2084 00000074 [BD60010000000000] 
  2085 0000007C E8755D0100              	call bind_primitive
  2086                                  
  2087                                  	; building closure for interned-symbol?
  2088 00000081 48BF-                   	mov rdi, free_var_5
  2088 00000083 [FD0D000000000000] 
  2089 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
  2089 0000008D [EF60010000000000] 
  2090 00000095 E85C5D0100              	call bind_primitive
  2091                                  
  2092                                  	; building closure for vector?
  2093 0000009A 48BF-                   	mov rdi, free_var_6
  2093 0000009C [0E0E000000000000] 
  2094 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
  2094 000000A6 [BB61010000000000] 
  2095 000000AE E8435D0100              	call bind_primitive
  2096                                  
  2097                                  	; building closure for procedure?
  2098 000000B3 48BF-                   	mov rdi, free_var_7
  2098 000000B5 [1F0E000000000000] 
  2099 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
  2099 000000BF [ED61010000000000] 
  2100 000000C7 E82A5D0100              	call bind_primitive
  2101                                  
  2102                                  	; building closure for real?
  2103 000000CC 48BF-                   	mov rdi, free_var_8
  2103 000000CE [300E000000000000] 
  2104 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
  2104 000000D8 [1F62010000000000] 
  2105 000000E0 E8115D0100              	call bind_primitive
  2106                                  
  2107                                  	; building closure for fraction?
  2108 000000E5 48BF-                   	mov rdi, free_var_9
  2108 000000E7 [410E000000000000] 
  2109 000000EF 48BE-                   	mov rsi, L_code_ptr_is_fraction
  2109 000000F1 [5162010000000000] 
  2110 000000F9 E8F85C0100              	call bind_primitive
  2111                                  
  2112                                  	; building closure for boolean?
  2113 000000FE 48BF-                   	mov rdi, free_var_10
  2113 00000100 [520E000000000000] 
  2114 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
  2114 0000010A [8362010000000000] 
  2115 00000112 E8DF5C0100              	call bind_primitive
  2116                                  
  2117                                  	; building closure for number?
  2118 00000117 48BF-                   	mov rdi, free_var_11
  2118 00000119 [630E000000000000] 
  2119 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
  2119 00000123 [1F63010000000000] 
  2120 0000012B E8C65C0100              	call bind_primitive
  2121                                  
  2122                                  	; building closure for collection?
  2123 00000130 48BF-                   	mov rdi, free_var_12
  2123 00000132 [740E000000000000] 
  2124 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
  2124 0000013C [5363010000000000] 
  2125 00000144 E8AD5C0100              	call bind_primitive
  2126                                  
  2127                                  	; building closure for cons
  2128 00000149 48BF-                   	mov rdi, free_var_13
  2128 0000014B [850E000000000000] 
  2129 00000153 48BE-                   	mov rsi, L_code_ptr_cons
  2129 00000155 [8763010000000000] 
  2130 0000015D E8945C0100              	call bind_primitive
  2131                                  
  2132                                  	; building closure for display-sexpr
  2133 00000162 48BF-                   	mov rdi, free_var_14
  2133 00000164 [960E000000000000] 
  2134 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
  2134 0000016E [B763010000000000] 
  2135 00000176 E87B5C0100              	call bind_primitive
  2136                                  
  2137                                  	; building closure for write-char
  2138 0000017B 48BF-                   	mov rdi, free_var_15
  2138 0000017D [A70E000000000000] 
  2139 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
  2139 00000187 [DD63010000000000] 
  2140 0000018F E8625C0100              	call bind_primitive
  2141                                  
  2142                                  	; building closure for car
  2143 00000194 48BF-                   	mov rdi, free_var_16
  2143 00000196 [B80E000000000000] 
  2144 0000019E 48BE-                   	mov rsi, L_code_ptr_car
  2144 000001A0 [3064010000000000] 
  2145 000001A8 E8495C0100              	call bind_primitive
  2146                                  
  2147                                  	; building closure for cdr
  2148 000001AD 48BF-                   	mov rdi, free_var_17
  2148 000001AF [C90E000000000000] 
  2149 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
  2149 000001B9 [5464010000000000] 
  2150 000001C1 E8305C0100              	call bind_primitive
  2151                                  
  2152                                  	; building closure for string-length
  2153 000001C6 48BF-                   	mov rdi, free_var_18
  2153 000001C8 [DA0E000000000000] 
  2154 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
  2154 000001D2 [7864010000000000] 
  2155 000001DA E8175C0100              	call bind_primitive
  2156                                  
  2157                                  	; building closure for vector-length
  2158 000001DF 48BF-                   	mov rdi, free_var_19
  2158 000001E1 [EB0E000000000000] 
  2159 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
  2159 000001EB [A164010000000000] 
  2160 000001F3 E8FE5B0100              	call bind_primitive
  2161                                  
  2162                                  	; building closure for real->integer
  2163 000001F8 48BF-                   	mov rdi, free_var_20
  2163 000001FA [FC0E000000000000] 
  2164 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
  2164 00000204 [CA64010000000000] 
  2165 0000020C E8E55B0100              	call bind_primitive
  2166                                  
  2167                                  	; building closure for exit
  2168 00000211 48BF-                   	mov rdi, free_var_21
  2168 00000213 [0D0F000000000000] 
  2169 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
  2169 0000021D [F964010000000000] 
  2170 00000225 E8CC5B0100              	call bind_primitive
  2171                                  
  2172                                  	; building closure for integer->real
  2173 0000022A 48BF-                   	mov rdi, free_var_22
  2173 0000022C [1E0F000000000000] 
  2174 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  2174 00000236 [1265010000000000] 
  2175 0000023E E8B35B0100              	call bind_primitive
  2176                                  
  2177                                  	; building closure for fraction->real
  2178 00000243 48BF-                   	mov rdi, free_var_23
  2178 00000245 [2F0F000000000000] 
  2179 0000024D 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  2179 0000024F [4065010000000000] 
  2180 00000257 E89A5B0100              	call bind_primitive
  2181                                  
  2182                                  	; building closure for char->integer
  2183 0000025C 48BF-                   	mov rdi, free_var_24
  2183 0000025E [400F000000000000] 
  2184 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
  2184 00000268 [7B65010000000000] 
  2185 00000270 E8815B0100              	call bind_primitive
  2186                                  
  2187                                  	; building closure for integer->char
  2188 00000275 48BF-                   	mov rdi, free_var_25
  2188 00000277 [510F000000000000] 
  2189 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
  2189 00000281 [EA65010000000000] 
  2190 00000289 E8685B0100              	call bind_primitive
  2191                                  
  2192                                  	; building closure for trng
  2193 0000028E 48BF-                   	mov rdi, free_var_26
  2193 00000290 [620F000000000000] 
  2194 00000298 48BE-                   	mov rsi, L_code_ptr_trng
  2194 0000029A [3566010000000000] 
  2195 000002A2 E84F5B0100              	call bind_primitive
  2196                                  
  2197                                  	; building closure for zero?
  2198 000002A7 48BF-                   	mov rdi, free_var_27
  2198 000002A9 [730F000000000000] 
  2199 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
  2199 000002B3 [5466010000000000] 
  2200 000002BB E8365B0100              	call bind_primitive
  2201                                  
  2202                                  	; building closure for integer?
  2203 000002C0 48BF-                   	mov rdi, free_var_28
  2203 000002C2 [840F000000000000] 
  2204 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
  2204 000002CC [B966010000000000] 
  2205 000002D4 E81D5B0100              	call bind_primitive
  2206                                  
  2207                                  	; building closure for __bin-apply
  2208 000002D9 48BF-                   	mov rdi, free_var_29
  2208 000002DB [950F000000000000] 
  2209 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
  2209 000002E5 [665F010000000000] 
  2210 000002ED E8045B0100              	call bind_primitive
  2211                                  
  2212                                  	; building closure for __bin-add-rr
  2213 000002F2 48BF-                   	mov rdi, free_var_30
  2213 000002F4 [A60F000000000000] 
  2214 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  2214 000002FE [EB66010000000000] 
  2215 00000306 E8EB5A0100              	call bind_primitive
  2216                                  
  2217                                  	; building closure for __bin-sub-rr
  2218 0000030B 48BF-                   	mov rdi, free_var_31
  2218 0000030D [B70F000000000000] 
  2219 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
  2219 00000317 [2B67010000000000] 
  2220 0000031F E8D25A0100              	call bind_primitive
  2221                                  
  2222                                  	; building closure for __bin-mul-rr
  2223 00000324 48BF-                   	mov rdi, free_var_32
  2223 00000326 [C80F000000000000] 
  2224 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
  2224 00000330 [6B67010000000000] 
  2225 00000338 E8B95A0100              	call bind_primitive
  2226                                  
  2227                                  	; building closure for __bin-div-rr
  2228 0000033D 48BF-                   	mov rdi, free_var_33
  2228 0000033F [D90F000000000000] 
  2229 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
  2229 00000349 [AB67010000000000] 
  2230 00000351 E8A05A0100              	call bind_primitive
  2231                                  
  2232                                  	; building closure for __bin-add-qq
  2233 00000356 48BF-                   	mov rdi, free_var_34
  2233 00000358 [EA0F000000000000] 
  2234 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  2234 00000362 [3568010000000000] 
  2235 0000036A E8875A0100              	call bind_primitive
  2236                                  
  2237                                  	; building closure for __bin-sub-qq
  2238 0000036F 48BF-                   	mov rdi, free_var_35
  2238 00000371 [FB0F000000000000] 
  2239 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
  2239 0000037B [D568010000000000] 
  2240 00000383 E86E5A0100              	call bind_primitive
  2241                                  
  2242                                  	; building closure for __bin-mul-qq
  2243 00000388 48BF-                   	mov rdi, free_var_36
  2243 0000038A [0C10000000000000] 
  2244 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
  2244 00000394 [7A69010000000000] 
  2245 0000039C E8555A0100              	call bind_primitive
  2246                                  
  2247                                  	; building closure for __bin-div-qq
  2248 000003A1 48BF-                   	mov rdi, free_var_37
  2248 000003A3 [1D10000000000000] 
  2249 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
  2249 000003AD [146A010000000000] 
  2250 000003B5 E83C5A0100              	call bind_primitive
  2251                                  
  2252                                  	; building closure for __bin-add-zz
  2253 000003BA 48BF-                   	mov rdi, free_var_38
  2253 000003BC [2E10000000000000] 
  2254 000003C4 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  2254 000003C6 [F967010000000000] 
  2255 000003CE E8235A0100              	call bind_primitive
  2256                                  
  2257                                  	; building closure for __bin-sub-zz
  2258 000003D3 48BF-                   	mov rdi, free_var_39
  2258 000003D5 [3F10000000000000] 
  2259 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_zz
  2259 000003DF [9968010000000000] 
  2260 000003E7 E80A5A0100              	call bind_primitive
  2261                                  
  2262                                  	; building closure for __bin-mul-zz
  2263 000003EC 48BF-                   	mov rdi, free_var_40
  2263 000003EE [5010000000000000] 
  2264 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_zz
  2264 000003F8 [3969010000000000] 
  2265 00000400 E8F1590100              	call bind_primitive
  2266                                  
  2267                                  	; building closure for __bin-div-zz
  2268 00000405 48BF-                   	mov rdi, free_var_41
  2268 00000407 [6110000000000000] 
  2269 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_zz
  2269 00000411 [CE69010000000000] 
  2270 00000419 E8D8590100              	call bind_primitive
  2271                                  
  2272                                  	; building closure for error
  2273 0000041E 48BF-                   	mov rdi, free_var_42
  2273 00000420 [7210000000000000] 
  2274 00000428 48BE-                   	mov rsi, L_code_ptr_error
  2274 0000042A [FE6A010000000000] 
  2275 00000432 E8BF590100              	call bind_primitive
  2276                                  
  2277                                  	; building closure for __bin-less-than-rr
  2278 00000437 48BF-                   	mov rdi, free_var_43
  2278 00000439 [8310000000000000] 
  2279 00000441 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
  2279 00000443 [BA6B010000000000] 
  2280 0000044B E8A6590100              	call bind_primitive
  2281                                  
  2282                                  	; building closure for __bin-less-than-qq
  2283 00000450 48BF-                   	mov rdi, free_var_44
  2283 00000452 [9410000000000000] 
  2284 0000045A 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
  2284 0000045C [5C6C010000000000] 
  2285 00000464 E88D590100              	call bind_primitive
  2286                                  
  2287                                  	; building closure for __bin-less-than-zz
  2288 00000469 48BF-                   	mov rdi, free_var_45
  2288 0000046B [A510000000000000] 
  2289 00000473 48BE-                   	mov rsi, L_code_ptr_raw_less_than_zz
  2289 00000475 [0D6C010000000000] 
  2290 0000047D E874590100              	call bind_primitive
  2291                                  
  2292                                  	; building closure for __bin-equal-rr
  2293 00000482 48BF-                   	mov rdi, free_var_46
  2293 00000484 [B610000000000000] 
  2294 0000048C 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
  2294 0000048E [BB6C010000000000] 
  2295 00000496 E85B590100              	call bind_primitive
  2296                                  
  2297                                  	; building closure for __bin-equal-qq
  2298 0000049B 48BF-                   	mov rdi, free_var_47
  2298 0000049D [C710000000000000] 
  2299 000004A5 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
  2299 000004A7 [5D6D010000000000] 
  2300 000004AF E842590100              	call bind_primitive
  2301                                  
  2302                                  	; building closure for __bin-equal-zz
  2303 000004B4 48BF-                   	mov rdi, free_var_48
  2303 000004B6 [D810000000000000] 
  2304 000004BE 48BE-                   	mov rsi, L_code_ptr_raw_equal_zz
  2304 000004C0 [0E6D010000000000] 
  2305 000004C8 E829590100              	call bind_primitive
  2306                                  
  2307                                  	; building closure for quotient
  2308 000004CD 48BF-                   	mov rdi, free_var_49
  2308 000004CF [E910000000000000] 
  2309 000004D7 48BE-                   	mov rsi, L_code_ptr_quotient
  2309 000004D9 [BC6D010000000000] 
  2310 000004E1 E810590100              	call bind_primitive
  2311                                  
  2312                                  	; building closure for remainder
  2313 000004E6 48BF-                   	mov rdi, free_var_50
  2313 000004E8 [FA10000000000000] 
  2314 000004F0 48BE-                   	mov rsi, L_code_ptr_remainder
  2314 000004F2 [086E010000000000] 
  2315 000004FA E8F7580100              	call bind_primitive
  2316                                  
  2317                                  	; building closure for set-car!
  2318 000004FF 48BF-                   	mov rdi, free_var_51
  2318 00000501 [0B11000000000000] 
  2319 00000509 48BE-                   	mov rsi, L_code_ptr_set_car
  2319 0000050B [546E010000000000] 
  2320 00000513 E8DE580100              	call bind_primitive
  2321                                  
  2322                                  	; building closure for set-cdr!
  2323 00000518 48BF-                   	mov rdi, free_var_52
  2323 0000051A [1C11000000000000] 
  2324 00000522 48BE-                   	mov rsi, L_code_ptr_set_cdr
  2324 00000524 [866E010000000000] 
  2325 0000052C E8C5580100              	call bind_primitive
  2326                                  
  2327                                  	; building closure for string-ref
  2328 00000531 48BF-                   	mov rdi, free_var_53
  2328 00000533 [2D11000000000000] 
  2329 0000053B 48BE-                   	mov rsi, L_code_ptr_string_ref
  2329 0000053D [B86E010000000000] 
  2330 00000545 E8AC580100              	call bind_primitive
  2331                                  
  2332                                  	; building closure for vector-ref
  2333 0000054A 48BF-                   	mov rdi, free_var_54
  2333 0000054C [3E11000000000000] 
  2334 00000554 48BE-                   	mov rsi, L_code_ptr_vector_ref
  2334 00000556 [146F010000000000] 
  2335 0000055E E893580100              	call bind_primitive
  2336                                  
  2337                                  	; building closure for vector-set!
  2338 00000563 48BF-                   	mov rdi, free_var_55
  2338 00000565 [4F11000000000000] 
  2339 0000056D 48BE-                   	mov rsi, L_code_ptr_vector_set
  2339 0000056F [616F010000000000] 
  2340 00000577 E87A580100              	call bind_primitive
  2341                                  
  2342                                  	; building closure for string-set!
  2343 0000057C 48BF-                   	mov rdi, free_var_56
  2343 0000057E [6011000000000000] 
  2344 00000586 48BE-                   	mov rsi, L_code_ptr_string_set
  2344 00000588 [BC6F010000000000] 
  2345 00000590 E861580100              	call bind_primitive
  2346                                  
  2347                                  	; building closure for make-vector
  2348 00000595 48BF-                   	mov rdi, free_var_57
  2348 00000597 [7111000000000000] 
  2349 0000059F 48BE-                   	mov rsi, L_code_ptr_make_vector
  2349 000005A1 [2270010000000000] 
  2350 000005A9 E848580100              	call bind_primitive
  2351                                  
  2352                                  	; building closure for make-string
  2353 000005AE 48BF-                   	mov rdi, free_var_58
  2353 000005B0 [8211000000000000] 
  2354 000005B8 48BE-                   	mov rsi, L_code_ptr_make_string
  2354 000005BA [7D70010000000000] 
  2355 000005C2 E82F580100              	call bind_primitive
  2356                                  
  2357                                  	; building closure for numerator
  2358 000005C7 48BF-                   	mov rdi, free_var_59
  2358 000005C9 [9311000000000000] 
  2359 000005D1 48BE-                   	mov rsi, L_code_ptr_numerator
  2359 000005D3 [E070010000000000] 
  2360 000005DB E816580100              	call bind_primitive
  2361                                  
  2362                                  	; building closure for denominator
  2363 000005E0 48BF-                   	mov rdi, free_var_60
  2363 000005E2 [A411000000000000] 
  2364 000005EA 48BE-                   	mov rsi, L_code_ptr_denominator
  2364 000005EC [0971010000000000] 
  2365 000005F4 E8FD570100              	call bind_primitive
  2366                                  
  2367                                  	; building closure for eq?
  2368 000005F9 48BF-                   	mov rdi, free_var_61
  2368 000005FB [B511000000000000] 
  2369 00000603 48BE-                   	mov rsi, L_code_ptr_is_eq
  2369 00000605 [3271010000000000] 
  2370 0000060D E8E4570100              	call bind_primitive
  2371                                  
  2372                                  	; building closure for __integer-to-fraction
  2373 00000612 48BF-                   	mov rdi, free_var_62
  2373 00000614 [C611000000000000] 
  2374 0000061C 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  2374 0000061E [AC65010000000000] 
  2375 00000626 E8CB570100              	call bind_primitive
  2376                                  
  2377                                  	; building closure for logand
  2378 0000062B 48BF-                   	mov rdi, free_var_63
  2378 0000062D [D711000000000000] 
  2379 00000635 48BE-                   	mov rsi, L_code_ptr_logand
  2379 00000637 [855E010000000000] 
  2380 0000063F E8B2570100              	call bind_primitive
  2381                                  
  2382                                  	; building closure for logor
  2383 00000644 48BF-                   	mov rdi, free_var_64
  2383 00000646 [E811000000000000] 
  2384 0000064E 48BE-                   	mov rsi, L_code_ptr_logor
  2384 00000650 [C15E010000000000] 
  2385 00000658 E899570100              	call bind_primitive
  2386                                  
  2387                                  	; building closure for logxor
  2388 0000065D 48BF-                   	mov rdi, free_var_65
  2388 0000065F [F911000000000000] 
  2389 00000667 48BE-                   	mov rsi, L_code_ptr_logxor
  2389 00000669 [FD5E010000000000] 
  2390 00000671 E880570100              	call bind_primitive
  2391                                  
  2392                                  	; building closure for lognot
  2393 00000676 48BF-                   	mov rdi, free_var_66
  2393 00000678 [0A12000000000000] 
  2394 00000680 48BE-                   	mov rsi, L_code_ptr_lognot
  2394 00000682 [395F010000000000] 
  2395 0000068A E867570100              	call bind_primitive
  2396                                  
  2397                                  	; building closure for ash
  2398 0000068F 48BF-                   	mov rdi, free_var_67
  2398 00000691 [1B12000000000000] 
  2399 00000699 48BE-                   	mov rsi, L_code_ptr_ash
  2399 0000069B [245E010000000000] 
  2400 000006A3 E84E570100              	call bind_primitive
  2401                                  
  2402                                  	; building closure for symbol?
  2403 000006A8 48BF-                   	mov rdi, free_var_68
  2403 000006AA [2C12000000000000] 
  2404 000006B2 48BE-                   	mov rsi, L_code_ptr_is_symbol
  2404 000006B4 [EF60010000000000] 
  2405 000006BC E835570100              	call bind_primitive
  2406                                  
  2407                                  	; building closure for uninterned-symbol?
  2408 000006C1 48BF-                   	mov rdi, free_var_69
  2408 000006C3 [3D12000000000000] 
  2409 000006CB 48BE-                   	mov rsi, L_code_ptr_is_uninterned_symbol
  2409 000006CD [2261010000000000] 
  2410 000006D5 E81C570100              	call bind_primitive
  2411                                  
  2412                                  	; building closure for gensym?
  2413 000006DA 48BF-                   	mov rdi, free_var_70
  2413 000006DC [4E12000000000000] 
  2414 000006E4 48BE-                   	mov rsi, L_code_ptr_is_uninterned_symbol
  2414 000006E6 [2261010000000000] 
  2415 000006EE E803570100              	call bind_primitive
  2416                                  
  2417                                  	; building closure for interned-symbol?
  2418 000006F3 48BF-                   	mov rdi, free_var_5
  2418 000006F5 [FD0D000000000000] 
  2419 000006FD 48BE-                   	mov rsi, L_code_ptr_is_interned_symbol
  2419 000006FF [5561010000000000] 
  2420 00000707 E8EA560100              	call bind_primitive
  2421                                  
  2422                                  	; building closure for gensym
  2423 0000070C 48BF-                   	mov rdi, free_var_71
  2423 0000070E [5F12000000000000] 
  2424 00000716 48BE-                   	mov rsi, L_code_ptr_gensym
  2424 00000718 [8761010000000000] 
  2425 00000720 E8D1560100              	call bind_primitive
  2426                                  
  2427                                  	; building closure for frame
  2428 00000725 48BF-                   	mov rdi, free_var_72
  2428 00000727 [7012000000000000] 
  2429 0000072F 48BE-                   	mov rsi, L_code_ptr_frame
  2429 00000731 [3457010000000000] 
  2430 00000739 E8B8560100              	call bind_primitive
  2431                                  
  2432                                  	; building closure for break
  2433 0000073E 48BF-                   	mov rdi, free_var_73
  2433 00000740 [8112000000000000] 
  2434 00000748 48BE-                   	mov rsi, L_code_ptr_break
  2434 0000074A [1A57010000000000] 
  2435 00000752 E89F560100              	call bind_primitive
  2436                                  
  2437 00000757 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2438 0000075C E8A84F0100              	call malloc
  2439 00000761 50                      	push rax
  2440 00000762 BF00000000              	mov rdi, 8 * 0	; new rib
  2441 00000767 E89D4F0100              	call malloc
  2442 0000076C 50                      	push rax
  2443 0000076D BF08000000              	mov rdi, 8 * 1	; extended env
  2444 00000772 E8924F0100              	call malloc
  2445 00000777 488B7D10                	mov rdi, ENV
  2446 0000077B BE00000000              	mov rsi, 0
  2447 00000780 BA01000000              	mov rdx, 1
  2448                                  .L_lambda_simple_env_loop_6cec:	; ext_env[i + 1] <-- env[i]
  2449 00000785 4883FE00                	cmp rsi, 0
  2450 00000789 7410                    	je .L_lambda_simple_env_end_6cec
  2451 0000078B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2452 0000078F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2453 00000793 48FFC6                  	inc rsi
  2454 00000796 48FFC2                  	inc rdx
  2455 00000799 EBEA                    	jmp .L_lambda_simple_env_loop_6cec
  2456                                  .L_lambda_simple_env_end_6cec:
  2457 0000079B 5B                      	pop rbx
  2458 0000079C BE00000000              	mov rsi, 0
  2459                                  .L_lambda_simple_params_loop_6cec:	; copy params
  2460 000007A1 4883FE00                	cmp rsi, 0
  2461 000007A5 740E                    	je .L_lambda_simple_params_end_6cec
  2462 000007A7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2463 000007AC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2464 000007B0 48FFC6                  	inc rsi
  2465 000007B3 EBEC                    	jmp .L_lambda_simple_params_loop_6cec
  2466                                  .L_lambda_simple_params_end_6cec:
  2467 000007B5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2468 000007B8 4889C3                  	mov rbx, rax
  2469 000007BB 58                      	pop rax
  2470 000007BC C60004                  	mov byte [rax], T_closure
  2471 000007BF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2472 000007C3 48C74009[D0070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cec
  2473 000007CB E99B000000              	jmp .L_lambda_simple_end_6cec
  2474                                  .L_lambda_simple_code_6cec:	; lambda-simple body
  2475 000007D0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2476 000007D6 740B                    	je .L_lambda_simple_arity_check_ok_6cec
  2477 000007D8 FF742410                	push qword [rsp + 8 * 2]
  2478 000007DC 6A01                    	push 1
  2479 000007DE E9DF4E0100              	jmp L_error_incorrect_arity_simple
  2480                                  .L_lambda_simple_arity_check_ok_6cec:
  2481 000007E3 C8000000                	enter 0, 0
  2482                                  	; preparing a tail-call
  2483 000007E7 488B4520                	mov rax, PARAM(0)	; param x
  2484 000007EB 50                      	push rax
  2485 000007EC 6A01                    	push 1	; arg count
  2486 000007EE 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  2487 000007F6 803805                  	cmp byte [rax], T_undefined
  2488 000007F9 0F84DD4D0100            	je L_error_fvar_undefined
  2489 000007FF 803804                  	cmp byte [rax], T_closure
  2490 00000802 0F85584E0100            	jne L_error_non_closure
  2491 00000808 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2492 0000080B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2493 0000080E 50                      	push rax
  2494 0000080F 6A01                    	push 1	; arg count
  2495 00000811 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  2496 00000819 803805                  	cmp byte [rax], T_undefined
  2497 0000081C 0F84BA4D0100            	je L_error_fvar_undefined
  2498 00000822 803804                  	cmp byte [rax], T_closure
  2499 00000825 0F85354E0100            	jne L_error_non_closure
  2500 0000082B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2501                                  
  2502                                  	; recycling the current frame
  2503 0000082E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2504 00000831 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2505 00000834 B905000000              	mov rcx, 1 + 4
  2506 00000839 488B5D18                	mov rbx, COUNT
  2507 0000083D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2508 00000842 488D55F8                	lea rdx, [rbp - 8 * 1]
  2509                                  .L_tc_recycle_frame_loop_8eaa:
  2510 00000846 4883F900                	cmp rcx, 0
  2511 0000084A 7413                    	je .L_tc_recycle_frame_done_8eaa
  2512 0000084C 488B32                  	mov rsi, qword [rdx]
  2513 0000084F 488933                  	mov qword [rbx], rsi
  2514 00000852 48FFC9                  	dec rcx
  2515 00000855 4883EB08                	sub rbx, 8 * 1
  2516 00000859 4883EA08                	sub rdx, 8 * 1
  2517 0000085D EBE7                    	jmp .L_tc_recycle_frame_loop_8eaa
  2518                                  .L_tc_recycle_frame_done_8eaa:
  2519 0000085F 488D6308                	lea rsp, [rbx + 8 * 1]
  2520 00000863 5D                      	pop rbp	; the proc will restore it!
  2521 00000864 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2522 00000867 C9                      	leave
  2523 00000868 C21800                  	ret AND_KILL_FRAME(1)
  2524                                  .L_lambda_simple_end_6cec:	; new closure is in rax
  2525 0000086B 48890425[92120000]      	mov qword [free_var_74], rax
  2526 00000873 48B8-                   	mov rax, sob_void
  2526 00000875 [0000000000000000] 
  2527                                  
  2528 0000087D 4889C7                  	mov rdi, rax
  2529 00000880 E8964F0100              	call print_sexpr_if_not_void
  2530                                  
  2531 00000885 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2532 0000088A E87A4E0100              	call malloc
  2533 0000088F 50                      	push rax
  2534 00000890 BF00000000              	mov rdi, 8 * 0	; new rib
  2535 00000895 E86F4E0100              	call malloc
  2536 0000089A 50                      	push rax
  2537 0000089B BF08000000              	mov rdi, 8 * 1	; extended env
  2538 000008A0 E8644E0100              	call malloc
  2539 000008A5 488B7D10                	mov rdi, ENV
  2540 000008A9 BE00000000              	mov rsi, 0
  2541 000008AE BA01000000              	mov rdx, 1
  2542                                  .L_lambda_simple_env_loop_6ced:	; ext_env[i + 1] <-- env[i]
  2543 000008B3 4883FE00                	cmp rsi, 0
  2544 000008B7 7410                    	je .L_lambda_simple_env_end_6ced
  2545 000008B9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2546 000008BD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2547 000008C1 48FFC6                  	inc rsi
  2548 000008C4 48FFC2                  	inc rdx
  2549 000008C7 EBEA                    	jmp .L_lambda_simple_env_loop_6ced
  2550                                  .L_lambda_simple_env_end_6ced:
  2551 000008C9 5B                      	pop rbx
  2552 000008CA BE00000000              	mov rsi, 0
  2553                                  .L_lambda_simple_params_loop_6ced:	; copy params
  2554 000008CF 4883FE00                	cmp rsi, 0
  2555 000008D3 740E                    	je .L_lambda_simple_params_end_6ced
  2556 000008D5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2557 000008DA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2558 000008DE 48FFC6                  	inc rsi
  2559 000008E1 EBEC                    	jmp .L_lambda_simple_params_loop_6ced
  2560                                  .L_lambda_simple_params_end_6ced:
  2561 000008E3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2562 000008E6 4889C3                  	mov rbx, rax
  2563 000008E9 58                      	pop rax
  2564 000008EA C60004                  	mov byte [rax], T_closure
  2565 000008ED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2566 000008F1 48C74009[FE080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6ced
  2567 000008F9 E99B000000              	jmp .L_lambda_simple_end_6ced
  2568                                  .L_lambda_simple_code_6ced:	; lambda-simple body
  2569 000008FE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2570 00000904 740B                    	je .L_lambda_simple_arity_check_ok_6ced
  2571 00000906 FF742410                	push qword [rsp + 8 * 2]
  2572 0000090A 6A01                    	push 1
  2573 0000090C E9B14D0100              	jmp L_error_incorrect_arity_simple
  2574                                  .L_lambda_simple_arity_check_ok_6ced:
  2575 00000911 C8000000                	enter 0, 0
  2576                                  	; preparing a tail-call
  2577 00000915 488B4520                	mov rax, PARAM(0)	; param x
  2578 00000919 50                      	push rax
  2579 0000091A 6A01                    	push 1	; arg count
  2580 0000091C 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2581 00000924 803805                  	cmp byte [rax], T_undefined
  2582 00000927 0F84AF4C0100            	je L_error_fvar_undefined
  2583 0000092D 803804                  	cmp byte [rax], T_closure
  2584 00000930 0F852A4D0100            	jne L_error_non_closure
  2585 00000936 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2586 00000939 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2587 0000093C 50                      	push rax
  2588 0000093D 6A01                    	push 1	; arg count
  2589 0000093F 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  2590 00000947 803805                  	cmp byte [rax], T_undefined
  2591 0000094A 0F848C4C0100            	je L_error_fvar_undefined
  2592 00000950 803804                  	cmp byte [rax], T_closure
  2593 00000953 0F85074D0100            	jne L_error_non_closure
  2594 00000959 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2595                                  
  2596                                  	; recycling the current frame
  2597 0000095C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2598 0000095F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2599 00000962 B905000000              	mov rcx, 1 + 4
  2600 00000967 488B5D18                	mov rbx, COUNT
  2601 0000096B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2602 00000970 488D55F8                	lea rdx, [rbp - 8 * 1]
  2603                                  .L_tc_recycle_frame_loop_8eab:
  2604 00000974 4883F900                	cmp rcx, 0
  2605 00000978 7413                    	je .L_tc_recycle_frame_done_8eab
  2606 0000097A 488B32                  	mov rsi, qword [rdx]
  2607 0000097D 488933                  	mov qword [rbx], rsi
  2608 00000980 48FFC9                  	dec rcx
  2609 00000983 4883EB08                	sub rbx, 8 * 1
  2610 00000987 4883EA08                	sub rdx, 8 * 1
  2611 0000098B EBE7                    	jmp .L_tc_recycle_frame_loop_8eab
  2612                                  .L_tc_recycle_frame_done_8eab:
  2613 0000098D 488D6308                	lea rsp, [rbx + 8 * 1]
  2614 00000991 5D                      	pop rbp	; the proc will restore it!
  2615 00000992 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2616 00000995 C9                      	leave
  2617 00000996 C21800                  	ret AND_KILL_FRAME(1)
  2618                                  .L_lambda_simple_end_6ced:	; new closure is in rax
  2619 00000999 48890425[A3120000]      	mov qword [free_var_75], rax
  2620 000009A1 48B8-                   	mov rax, sob_void
  2620 000009A3 [0000000000000000] 
  2621                                  
  2622 000009AB 4889C7                  	mov rdi, rax
  2623 000009AE E8684E0100              	call print_sexpr_if_not_void
  2624                                  
  2625 000009B3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2626 000009B8 E84C4D0100              	call malloc
  2627 000009BD 50                      	push rax
  2628 000009BE BF00000000              	mov rdi, 8 * 0	; new rib
  2629 000009C3 E8414D0100              	call malloc
  2630 000009C8 50                      	push rax
  2631 000009C9 BF08000000              	mov rdi, 8 * 1	; extended env
  2632 000009CE E8364D0100              	call malloc
  2633 000009D3 488B7D10                	mov rdi, ENV
  2634 000009D7 BE00000000              	mov rsi, 0
  2635 000009DC BA01000000              	mov rdx, 1
  2636                                  .L_lambda_simple_env_loop_6cee:	; ext_env[i + 1] <-- env[i]
  2637 000009E1 4883FE00                	cmp rsi, 0
  2638 000009E5 7410                    	je .L_lambda_simple_env_end_6cee
  2639 000009E7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2640 000009EB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2641 000009EF 48FFC6                  	inc rsi
  2642 000009F2 48FFC2                  	inc rdx
  2643 000009F5 EBEA                    	jmp .L_lambda_simple_env_loop_6cee
  2644                                  .L_lambda_simple_env_end_6cee:
  2645 000009F7 5B                      	pop rbx
  2646 000009F8 BE00000000              	mov rsi, 0
  2647                                  .L_lambda_simple_params_loop_6cee:	; copy params
  2648 000009FD 4883FE00                	cmp rsi, 0
  2649 00000A01 740E                    	je .L_lambda_simple_params_end_6cee
  2650 00000A03 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2651 00000A08 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2652 00000A0C 48FFC6                  	inc rsi
  2653 00000A0F EBEC                    	jmp .L_lambda_simple_params_loop_6cee
  2654                                  .L_lambda_simple_params_end_6cee:
  2655 00000A11 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2656 00000A14 4889C3                  	mov rbx, rax
  2657 00000A17 58                      	pop rax
  2658 00000A18 C60004                  	mov byte [rax], T_closure
  2659 00000A1B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2660 00000A1F 48C74009[2C0A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cee
  2661 00000A27 E99B000000              	jmp .L_lambda_simple_end_6cee
  2662                                  .L_lambda_simple_code_6cee:	; lambda-simple body
  2663 00000A2C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2664 00000A32 740B                    	je .L_lambda_simple_arity_check_ok_6cee
  2665 00000A34 FF742410                	push qword [rsp + 8 * 2]
  2666 00000A38 6A01                    	push 1
  2667 00000A3A E9834C0100              	jmp L_error_incorrect_arity_simple
  2668                                  .L_lambda_simple_arity_check_ok_6cee:
  2669 00000A3F C8000000                	enter 0, 0
  2670                                  	; preparing a tail-call
  2671 00000A43 488B4520                	mov rax, PARAM(0)	; param x
  2672 00000A47 50                      	push rax
  2673 00000A48 6A01                    	push 1	; arg count
  2674 00000A4A 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  2675 00000A52 803805                  	cmp byte [rax], T_undefined
  2676 00000A55 0F84814B0100            	je L_error_fvar_undefined
  2677 00000A5B 803804                  	cmp byte [rax], T_closure
  2678 00000A5E 0F85FC4B0100            	jne L_error_non_closure
  2679 00000A64 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2680 00000A67 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2681 00000A6A 50                      	push rax
  2682 00000A6B 6A01                    	push 1	; arg count
  2683 00000A6D 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2684 00000A75 803805                  	cmp byte [rax], T_undefined
  2685 00000A78 0F845E4B0100            	je L_error_fvar_undefined
  2686 00000A7E 803804                  	cmp byte [rax], T_closure
  2687 00000A81 0F85D94B0100            	jne L_error_non_closure
  2688 00000A87 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2689                                  
  2690                                  	; recycling the current frame
  2691 00000A8A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2692 00000A8D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2693 00000A90 B905000000              	mov rcx, 1 + 4
  2694 00000A95 488B5D18                	mov rbx, COUNT
  2695 00000A99 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2696 00000A9E 488D55F8                	lea rdx, [rbp - 8 * 1]
  2697                                  .L_tc_recycle_frame_loop_8eac:
  2698 00000AA2 4883F900                	cmp rcx, 0
  2699 00000AA6 7413                    	je .L_tc_recycle_frame_done_8eac
  2700 00000AA8 488B32                  	mov rsi, qword [rdx]
  2701 00000AAB 488933                  	mov qword [rbx], rsi
  2702 00000AAE 48FFC9                  	dec rcx
  2703 00000AB1 4883EB08                	sub rbx, 8 * 1
  2704 00000AB5 4883EA08                	sub rdx, 8 * 1
  2705 00000AB9 EBE7                    	jmp .L_tc_recycle_frame_loop_8eac
  2706                                  .L_tc_recycle_frame_done_8eac:
  2707 00000ABB 488D6308                	lea rsp, [rbx + 8 * 1]
  2708 00000ABF 5D                      	pop rbp	; the proc will restore it!
  2709 00000AC0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2710 00000AC3 C9                      	leave
  2711 00000AC4 C21800                  	ret AND_KILL_FRAME(1)
  2712                                  .L_lambda_simple_end_6cee:	; new closure is in rax
  2713 00000AC7 48890425[B4120000]      	mov qword [free_var_76], rax
  2714 00000ACF 48B8-                   	mov rax, sob_void
  2714 00000AD1 [0000000000000000] 
  2715                                  
  2716 00000AD9 4889C7                  	mov rdi, rax
  2717 00000ADC E83A4D0100              	call print_sexpr_if_not_void
  2718                                  
  2719 00000AE1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2720 00000AE6 E81E4C0100              	call malloc
  2721 00000AEB 50                      	push rax
  2722 00000AEC BF00000000              	mov rdi, 8 * 0	; new rib
  2723 00000AF1 E8134C0100              	call malloc
  2724 00000AF6 50                      	push rax
  2725 00000AF7 BF08000000              	mov rdi, 8 * 1	; extended env
  2726 00000AFC E8084C0100              	call malloc
  2727 00000B01 488B7D10                	mov rdi, ENV
  2728 00000B05 BE00000000              	mov rsi, 0
  2729 00000B0A BA01000000              	mov rdx, 1
  2730                                  .L_lambda_simple_env_loop_6cef:	; ext_env[i + 1] <-- env[i]
  2731 00000B0F 4883FE00                	cmp rsi, 0
  2732 00000B13 7410                    	je .L_lambda_simple_env_end_6cef
  2733 00000B15 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2734 00000B19 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2735 00000B1D 48FFC6                  	inc rsi
  2736 00000B20 48FFC2                  	inc rdx
  2737 00000B23 EBEA                    	jmp .L_lambda_simple_env_loop_6cef
  2738                                  .L_lambda_simple_env_end_6cef:
  2739 00000B25 5B                      	pop rbx
  2740 00000B26 BE00000000              	mov rsi, 0
  2741                                  .L_lambda_simple_params_loop_6cef:	; copy params
  2742 00000B2B 4883FE00                	cmp rsi, 0
  2743 00000B2F 740E                    	je .L_lambda_simple_params_end_6cef
  2744 00000B31 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2745 00000B36 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2746 00000B3A 48FFC6                  	inc rsi
  2747 00000B3D EBEC                    	jmp .L_lambda_simple_params_loop_6cef
  2748                                  .L_lambda_simple_params_end_6cef:
  2749 00000B3F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2750 00000B42 4889C3                  	mov rbx, rax
  2751 00000B45 58                      	pop rax
  2752 00000B46 C60004                  	mov byte [rax], T_closure
  2753 00000B49 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2754 00000B4D 48C74009[5A0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cef
  2755 00000B55 E99B000000              	jmp .L_lambda_simple_end_6cef
  2756                                  .L_lambda_simple_code_6cef:	; lambda-simple body
  2757 00000B5A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2758 00000B60 740B                    	je .L_lambda_simple_arity_check_ok_6cef
  2759 00000B62 FF742410                	push qword [rsp + 8 * 2]
  2760 00000B66 6A01                    	push 1
  2761 00000B68 E9554B0100              	jmp L_error_incorrect_arity_simple
  2762                                  .L_lambda_simple_arity_check_ok_6cef:
  2763 00000B6D C8000000                	enter 0, 0
  2764                                  	; preparing a tail-call
  2765 00000B71 488B4520                	mov rax, PARAM(0)	; param x
  2766 00000B75 50                      	push rax
  2767 00000B76 6A01                    	push 1	; arg count
  2768 00000B78 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2769 00000B80 803805                  	cmp byte [rax], T_undefined
  2770 00000B83 0F84534A0100            	je L_error_fvar_undefined
  2771 00000B89 803804                  	cmp byte [rax], T_closure
  2772 00000B8C 0F85CE4A0100            	jne L_error_non_closure
  2773 00000B92 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2774 00000B95 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2775 00000B98 50                      	push rax
  2776 00000B99 6A01                    	push 1	; arg count
  2777 00000B9B 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2778 00000BA3 803805                  	cmp byte [rax], T_undefined
  2779 00000BA6 0F84304A0100            	je L_error_fvar_undefined
  2780 00000BAC 803804                  	cmp byte [rax], T_closure
  2781 00000BAF 0F85AB4A0100            	jne L_error_non_closure
  2782 00000BB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2783                                  
  2784                                  	; recycling the current frame
  2785 00000BB8 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2786 00000BBB FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2787 00000BBE B905000000              	mov rcx, 1 + 4
  2788 00000BC3 488B5D18                	mov rbx, COUNT
  2789 00000BC7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2790 00000BCC 488D55F8                	lea rdx, [rbp - 8 * 1]
  2791                                  .L_tc_recycle_frame_loop_8ead:
  2792 00000BD0 4883F900                	cmp rcx, 0
  2793 00000BD4 7413                    	je .L_tc_recycle_frame_done_8ead
  2794 00000BD6 488B32                  	mov rsi, qword [rdx]
  2795 00000BD9 488933                  	mov qword [rbx], rsi
  2796 00000BDC 48FFC9                  	dec rcx
  2797 00000BDF 4883EB08                	sub rbx, 8 * 1
  2798 00000BE3 4883EA08                	sub rdx, 8 * 1
  2799 00000BE7 EBE7                    	jmp .L_tc_recycle_frame_loop_8ead
  2800                                  .L_tc_recycle_frame_done_8ead:
  2801 00000BE9 488D6308                	lea rsp, [rbx + 8 * 1]
  2802 00000BED 5D                      	pop rbp	; the proc will restore it!
  2803 00000BEE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2804 00000BF1 C9                      	leave
  2805 00000BF2 C21800                  	ret AND_KILL_FRAME(1)
  2806                                  .L_lambda_simple_end_6cef:	; new closure is in rax
  2807 00000BF5 48890425[C5120000]      	mov qword [free_var_77], rax
  2808 00000BFD 48B8-                   	mov rax, sob_void
  2808 00000BFF [0000000000000000] 
  2809                                  
  2810 00000C07 4889C7                  	mov rdi, rax
  2811 00000C0A E80C4C0100              	call print_sexpr_if_not_void
  2812                                  
  2813 00000C0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2814 00000C14 E8F04A0100              	call malloc
  2815 00000C19 50                      	push rax
  2816 00000C1A BF00000000              	mov rdi, 8 * 0	; new rib
  2817 00000C1F E8E54A0100              	call malloc
  2818 00000C24 50                      	push rax
  2819 00000C25 BF08000000              	mov rdi, 8 * 1	; extended env
  2820 00000C2A E8DA4A0100              	call malloc
  2821 00000C2F 488B7D10                	mov rdi, ENV
  2822 00000C33 BE00000000              	mov rsi, 0
  2823 00000C38 BA01000000              	mov rdx, 1
  2824                                  .L_lambda_simple_env_loop_6cf0:	; ext_env[i + 1] <-- env[i]
  2825 00000C3D 4883FE00                	cmp rsi, 0
  2826 00000C41 7410                    	je .L_lambda_simple_env_end_6cf0
  2827 00000C43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2828 00000C47 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2829 00000C4B 48FFC6                  	inc rsi
  2830 00000C4E 48FFC2                  	inc rdx
  2831 00000C51 EBEA                    	jmp .L_lambda_simple_env_loop_6cf0
  2832                                  .L_lambda_simple_env_end_6cf0:
  2833 00000C53 5B                      	pop rbx
  2834 00000C54 BE00000000              	mov rsi, 0
  2835                                  .L_lambda_simple_params_loop_6cf0:	; copy params
  2836 00000C59 4883FE00                	cmp rsi, 0
  2837 00000C5D 740E                    	je .L_lambda_simple_params_end_6cf0
  2838 00000C5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2839 00000C64 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2840 00000C68 48FFC6                  	inc rsi
  2841 00000C6B EBEC                    	jmp .L_lambda_simple_params_loop_6cf0
  2842                                  .L_lambda_simple_params_end_6cf0:
  2843 00000C6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2844 00000C70 4889C3                  	mov rbx, rax
  2845 00000C73 58                      	pop rax
  2846 00000C74 C60004                  	mov byte [rax], T_closure
  2847 00000C77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2848 00000C7B 48C74009[880C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cf0
  2849 00000C83 E99B000000              	jmp .L_lambda_simple_end_6cf0
  2850                                  .L_lambda_simple_code_6cf0:	; lambda-simple body
  2851 00000C88 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2852 00000C8E 740B                    	je .L_lambda_simple_arity_check_ok_6cf0
  2853 00000C90 FF742410                	push qword [rsp + 8 * 2]
  2854 00000C94 6A01                    	push 1
  2855 00000C96 E9274A0100              	jmp L_error_incorrect_arity_simple
  2856                                  .L_lambda_simple_arity_check_ok_6cf0:
  2857 00000C9B C8000000                	enter 0, 0
  2858                                  	; preparing a tail-call
  2859 00000C9F 488B4520                	mov rax, PARAM(0)	; param x
  2860 00000CA3 50                      	push rax
  2861 00000CA4 6A01                    	push 1	; arg count
  2862 00000CA6 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  2863 00000CAE 803805                  	cmp byte [rax], T_undefined
  2864 00000CB1 0F8425490100            	je L_error_fvar_undefined
  2865 00000CB7 803804                  	cmp byte [rax], T_closure
  2866 00000CBA 0F85A0490100            	jne L_error_non_closure
  2867 00000CC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2868 00000CC3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2869 00000CC6 50                      	push rax
  2870 00000CC7 6A01                    	push 1	; arg count
  2871 00000CC9 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  2872 00000CD1 803805                  	cmp byte [rax], T_undefined
  2873 00000CD4 0F8402490100            	je L_error_fvar_undefined
  2874 00000CDA 803804                  	cmp byte [rax], T_closure
  2875 00000CDD 0F857D490100            	jne L_error_non_closure
  2876 00000CE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2877                                  
  2878                                  	; recycling the current frame
  2879 00000CE6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2880 00000CE9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2881 00000CEC B905000000              	mov rcx, 1 + 4
  2882 00000CF1 488B5D18                	mov rbx, COUNT
  2883 00000CF5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2884 00000CFA 488D55F8                	lea rdx, [rbp - 8 * 1]
  2885                                  .L_tc_recycle_frame_loop_8eae:
  2886 00000CFE 4883F900                	cmp rcx, 0
  2887 00000D02 7413                    	je .L_tc_recycle_frame_done_8eae
  2888 00000D04 488B32                  	mov rsi, qword [rdx]
  2889 00000D07 488933                  	mov qword [rbx], rsi
  2890 00000D0A 48FFC9                  	dec rcx
  2891 00000D0D 4883EB08                	sub rbx, 8 * 1
  2892 00000D11 4883EA08                	sub rdx, 8 * 1
  2893 00000D15 EBE7                    	jmp .L_tc_recycle_frame_loop_8eae
  2894                                  .L_tc_recycle_frame_done_8eae:
  2895 00000D17 488D6308                	lea rsp, [rbx + 8 * 1]
  2896 00000D1B 5D                      	pop rbp	; the proc will restore it!
  2897 00000D1C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2898 00000D1F C9                      	leave
  2899 00000D20 C21800                  	ret AND_KILL_FRAME(1)
  2900                                  .L_lambda_simple_end_6cf0:	; new closure is in rax
  2901 00000D23 48890425[D6120000]      	mov qword [free_var_78], rax
  2902 00000D2B 48B8-                   	mov rax, sob_void
  2902 00000D2D [0000000000000000] 
  2903                                  
  2904 00000D35 4889C7                  	mov rdi, rax
  2905 00000D38 E8DE4A0100              	call print_sexpr_if_not_void
  2906                                  
  2907 00000D3D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2908 00000D42 E8C2490100              	call malloc
  2909 00000D47 50                      	push rax
  2910 00000D48 BF00000000              	mov rdi, 8 * 0	; new rib
  2911 00000D4D E8B7490100              	call malloc
  2912 00000D52 50                      	push rax
  2913 00000D53 BF08000000              	mov rdi, 8 * 1	; extended env
  2914 00000D58 E8AC490100              	call malloc
  2915 00000D5D 488B7D10                	mov rdi, ENV
  2916 00000D61 BE00000000              	mov rsi, 0
  2917 00000D66 BA01000000              	mov rdx, 1
  2918                                  .L_lambda_simple_env_loop_6cf1:	; ext_env[i + 1] <-- env[i]
  2919 00000D6B 4883FE00                	cmp rsi, 0
  2920 00000D6F 7410                    	je .L_lambda_simple_env_end_6cf1
  2921 00000D71 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2922 00000D75 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2923 00000D79 48FFC6                  	inc rsi
  2924 00000D7C 48FFC2                  	inc rdx
  2925 00000D7F EBEA                    	jmp .L_lambda_simple_env_loop_6cf1
  2926                                  .L_lambda_simple_env_end_6cf1:
  2927 00000D81 5B                      	pop rbx
  2928 00000D82 BE00000000              	mov rsi, 0
  2929                                  .L_lambda_simple_params_loop_6cf1:	; copy params
  2930 00000D87 4883FE00                	cmp rsi, 0
  2931 00000D8B 740E                    	je .L_lambda_simple_params_end_6cf1
  2932 00000D8D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2933 00000D92 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2934 00000D96 48FFC6                  	inc rsi
  2935 00000D99 EBEC                    	jmp .L_lambda_simple_params_loop_6cf1
  2936                                  .L_lambda_simple_params_end_6cf1:
  2937 00000D9B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2938 00000D9E 4889C3                  	mov rbx, rax
  2939 00000DA1 58                      	pop rax
  2940 00000DA2 C60004                  	mov byte [rax], T_closure
  2941 00000DA5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2942 00000DA9 48C74009[B60D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cf1
  2943 00000DB1 E99B000000              	jmp .L_lambda_simple_end_6cf1
  2944                                  .L_lambda_simple_code_6cf1:	; lambda-simple body
  2945 00000DB6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2946 00000DBC 740B                    	je .L_lambda_simple_arity_check_ok_6cf1
  2947 00000DBE FF742410                	push qword [rsp + 8 * 2]
  2948 00000DC2 6A01                    	push 1
  2949 00000DC4 E9F9480100              	jmp L_error_incorrect_arity_simple
  2950                                  .L_lambda_simple_arity_check_ok_6cf1:
  2951 00000DC9 C8000000                	enter 0, 0
  2952                                  	; preparing a tail-call
  2953 00000DCD 488B4520                	mov rax, PARAM(0)	; param x
  2954 00000DD1 50                      	push rax
  2955 00000DD2 6A01                    	push 1	; arg count
  2956 00000DD4 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  2957 00000DDC 803805                  	cmp byte [rax], T_undefined
  2958 00000DDF 0F84F7470100            	je L_error_fvar_undefined
  2959 00000DE5 803804                  	cmp byte [rax], T_closure
  2960 00000DE8 0F8572480100            	jne L_error_non_closure
  2961 00000DEE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2962 00000DF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2963 00000DF4 50                      	push rax
  2964 00000DF5 6A01                    	push 1	; arg count
  2965 00000DF7 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  2966 00000DFF 803805                  	cmp byte [rax], T_undefined
  2967 00000E02 0F84D4470100            	je L_error_fvar_undefined
  2968 00000E08 803804                  	cmp byte [rax], T_closure
  2969 00000E0B 0F854F480100            	jne L_error_non_closure
  2970 00000E11 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2971                                  
  2972                                  	; recycling the current frame
  2973 00000E14 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2974 00000E17 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2975 00000E1A B905000000              	mov rcx, 1 + 4
  2976 00000E1F 488B5D18                	mov rbx, COUNT
  2977 00000E23 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2978 00000E28 488D55F8                	lea rdx, [rbp - 8 * 1]
  2979                                  .L_tc_recycle_frame_loop_8eaf:
  2980 00000E2C 4883F900                	cmp rcx, 0
  2981 00000E30 7413                    	je .L_tc_recycle_frame_done_8eaf
  2982 00000E32 488B32                  	mov rsi, qword [rdx]
  2983 00000E35 488933                  	mov qword [rbx], rsi
  2984 00000E38 48FFC9                  	dec rcx
  2985 00000E3B 4883EB08                	sub rbx, 8 * 1
  2986 00000E3F 4883EA08                	sub rdx, 8 * 1
  2987 00000E43 EBE7                    	jmp .L_tc_recycle_frame_loop_8eaf
  2988                                  .L_tc_recycle_frame_done_8eaf:
  2989 00000E45 488D6308                	lea rsp, [rbx + 8 * 1]
  2990 00000E49 5D                      	pop rbp	; the proc will restore it!
  2991 00000E4A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2992 00000E4D C9                      	leave
  2993 00000E4E C21800                  	ret AND_KILL_FRAME(1)
  2994                                  .L_lambda_simple_end_6cf1:	; new closure is in rax
  2995 00000E51 48890425[E7120000]      	mov qword [free_var_79], rax
  2996 00000E59 48B8-                   	mov rax, sob_void
  2996 00000E5B [0000000000000000] 
  2997                                  
  2998 00000E63 4889C7                  	mov rdi, rax
  2999 00000E66 E8B0490100              	call print_sexpr_if_not_void
  3000                                  
  3001 00000E6B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3002 00000E70 E894480100              	call malloc
  3003 00000E75 50                      	push rax
  3004 00000E76 BF00000000              	mov rdi, 8 * 0	; new rib
  3005 00000E7B E889480100              	call malloc
  3006 00000E80 50                      	push rax
  3007 00000E81 BF08000000              	mov rdi, 8 * 1	; extended env
  3008 00000E86 E87E480100              	call malloc
  3009 00000E8B 488B7D10                	mov rdi, ENV
  3010 00000E8F BE00000000              	mov rsi, 0
  3011 00000E94 BA01000000              	mov rdx, 1
  3012                                  .L_lambda_simple_env_loop_6cf2:	; ext_env[i + 1] <-- env[i]
  3013 00000E99 4883FE00                	cmp rsi, 0
  3014 00000E9D 7410                    	je .L_lambda_simple_env_end_6cf2
  3015 00000E9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3016 00000EA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3017 00000EA7 48FFC6                  	inc rsi
  3018 00000EAA 48FFC2                  	inc rdx
  3019 00000EAD EBEA                    	jmp .L_lambda_simple_env_loop_6cf2
  3020                                  .L_lambda_simple_env_end_6cf2:
  3021 00000EAF 5B                      	pop rbx
  3022 00000EB0 BE00000000              	mov rsi, 0
  3023                                  .L_lambda_simple_params_loop_6cf2:	; copy params
  3024 00000EB5 4883FE00                	cmp rsi, 0
  3025 00000EB9 740E                    	je .L_lambda_simple_params_end_6cf2
  3026 00000EBB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3027 00000EC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3028 00000EC4 48FFC6                  	inc rsi
  3029 00000EC7 EBEC                    	jmp .L_lambda_simple_params_loop_6cf2
  3030                                  .L_lambda_simple_params_end_6cf2:
  3031 00000EC9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3032 00000ECC 4889C3                  	mov rbx, rax
  3033 00000ECF 58                      	pop rax
  3034 00000ED0 C60004                  	mov byte [rax], T_closure
  3035 00000ED3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3036 00000ED7 48C74009[E40E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cf2
  3037 00000EDF E99B000000              	jmp .L_lambda_simple_end_6cf2
  3038                                  .L_lambda_simple_code_6cf2:	; lambda-simple body
  3039 00000EE4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3040 00000EEA 740B                    	je .L_lambda_simple_arity_check_ok_6cf2
  3041 00000EEC FF742410                	push qword [rsp + 8 * 2]
  3042 00000EF0 6A01                    	push 1
  3043 00000EF2 E9CB470100              	jmp L_error_incorrect_arity_simple
  3044                                  .L_lambda_simple_arity_check_ok_6cf2:
  3045 00000EF7 C8000000                	enter 0, 0
  3046                                  	; preparing a tail-call
  3047 00000EFB 488B4520                	mov rax, PARAM(0)	; param x
  3048 00000EFF 50                      	push rax
  3049 00000F00 6A01                    	push 1	; arg count
  3050 00000F02 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  3051 00000F0A 803805                  	cmp byte [rax], T_undefined
  3052 00000F0D 0F84C9460100            	je L_error_fvar_undefined
  3053 00000F13 803804                  	cmp byte [rax], T_closure
  3054 00000F16 0F8544470100            	jne L_error_non_closure
  3055 00000F1C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3056 00000F1F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3057 00000F22 50                      	push rax
  3058 00000F23 6A01                    	push 1	; arg count
  3059 00000F25 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  3060 00000F2D 803805                  	cmp byte [rax], T_undefined
  3061 00000F30 0F84A6460100            	je L_error_fvar_undefined
  3062 00000F36 803804                  	cmp byte [rax], T_closure
  3063 00000F39 0F8521470100            	jne L_error_non_closure
  3064 00000F3F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3065                                  
  3066                                  	; recycling the current frame
  3067 00000F42 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3068 00000F45 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3069 00000F48 B905000000              	mov rcx, 1 + 4
  3070 00000F4D 488B5D18                	mov rbx, COUNT
  3071 00000F51 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3072 00000F56 488D55F8                	lea rdx, [rbp - 8 * 1]
  3073                                  .L_tc_recycle_frame_loop_8eb0:
  3074 00000F5A 4883F900                	cmp rcx, 0
  3075 00000F5E 7413                    	je .L_tc_recycle_frame_done_8eb0
  3076 00000F60 488B32                  	mov rsi, qword [rdx]
  3077 00000F63 488933                  	mov qword [rbx], rsi
  3078 00000F66 48FFC9                  	dec rcx
  3079 00000F69 4883EB08                	sub rbx, 8 * 1
  3080 00000F6D 4883EA08                	sub rdx, 8 * 1
  3081 00000F71 EBE7                    	jmp .L_tc_recycle_frame_loop_8eb0
  3082                                  .L_tc_recycle_frame_done_8eb0:
  3083 00000F73 488D6308                	lea rsp, [rbx + 8 * 1]
  3084 00000F77 5D                      	pop rbp	; the proc will restore it!
  3085 00000F78 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3086 00000F7B C9                      	leave
  3087 00000F7C C21800                  	ret AND_KILL_FRAME(1)
  3088                                  .L_lambda_simple_end_6cf2:	; new closure is in rax
  3089 00000F7F 48890425[F8120000]      	mov qword [free_var_80], rax
  3090 00000F87 48B8-                   	mov rax, sob_void
  3090 00000F89 [0000000000000000] 
  3091                                  
  3092 00000F91 4889C7                  	mov rdi, rax
  3093 00000F94 E882480100              	call print_sexpr_if_not_void
  3094                                  
  3095 00000F99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3096 00000F9E E866470100              	call malloc
  3097 00000FA3 50                      	push rax
  3098 00000FA4 BF00000000              	mov rdi, 8 * 0	; new rib
  3099 00000FA9 E85B470100              	call malloc
  3100 00000FAE 50                      	push rax
  3101 00000FAF BF08000000              	mov rdi, 8 * 1	; extended env
  3102 00000FB4 E850470100              	call malloc
  3103 00000FB9 488B7D10                	mov rdi, ENV
  3104 00000FBD BE00000000              	mov rsi, 0
  3105 00000FC2 BA01000000              	mov rdx, 1
  3106                                  .L_lambda_simple_env_loop_6cf3:	; ext_env[i + 1] <-- env[i]
  3107 00000FC7 4883FE00                	cmp rsi, 0
  3108 00000FCB 7410                    	je .L_lambda_simple_env_end_6cf3
  3109 00000FCD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3110 00000FD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3111 00000FD5 48FFC6                  	inc rsi
  3112 00000FD8 48FFC2                  	inc rdx
  3113 00000FDB EBEA                    	jmp .L_lambda_simple_env_loop_6cf3
  3114                                  .L_lambda_simple_env_end_6cf3:
  3115 00000FDD 5B                      	pop rbx
  3116 00000FDE BE00000000              	mov rsi, 0
  3117                                  .L_lambda_simple_params_loop_6cf3:	; copy params
  3118 00000FE3 4883FE00                	cmp rsi, 0
  3119 00000FE7 740E                    	je .L_lambda_simple_params_end_6cf3
  3120 00000FE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3121 00000FEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3122 00000FF2 48FFC6                  	inc rsi
  3123 00000FF5 EBEC                    	jmp .L_lambda_simple_params_loop_6cf3
  3124                                  .L_lambda_simple_params_end_6cf3:
  3125 00000FF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3126 00000FFA 4889C3                  	mov rbx, rax
  3127 00000FFD 58                      	pop rax
  3128 00000FFE C60004                  	mov byte [rax], T_closure
  3129 00001001 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3130 00001005 48C74009[12100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cf3
  3131 0000100D E99B000000              	jmp .L_lambda_simple_end_6cf3
  3132                                  .L_lambda_simple_code_6cf3:	; lambda-simple body
  3133 00001012 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3134 00001018 740B                    	je .L_lambda_simple_arity_check_ok_6cf3
  3135 0000101A FF742410                	push qword [rsp + 8 * 2]
  3136 0000101E 6A01                    	push 1
  3137 00001020 E99D460100              	jmp L_error_incorrect_arity_simple
  3138                                  .L_lambda_simple_arity_check_ok_6cf3:
  3139 00001025 C8000000                	enter 0, 0
  3140                                  	; preparing a tail-call
  3141 00001029 488B4520                	mov rax, PARAM(0)	; param x
  3142 0000102D 50                      	push rax
  3143 0000102E 6A01                    	push 1	; arg count
  3144 00001030 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  3145 00001038 803805                  	cmp byte [rax], T_undefined
  3146 0000103B 0F849B450100            	je L_error_fvar_undefined
  3147 00001041 803804                  	cmp byte [rax], T_closure
  3148 00001044 0F8516460100            	jne L_error_non_closure
  3149 0000104A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3150 0000104D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3151 00001050 50                      	push rax
  3152 00001051 6A01                    	push 1	; arg count
  3153 00001053 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  3154 0000105B 803805                  	cmp byte [rax], T_undefined
  3155 0000105E 0F8478450100            	je L_error_fvar_undefined
  3156 00001064 803804                  	cmp byte [rax], T_closure
  3157 00001067 0F85F3450100            	jne L_error_non_closure
  3158 0000106D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3159                                  
  3160                                  	; recycling the current frame
  3161 00001070 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3162 00001073 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3163 00001076 B905000000              	mov rcx, 1 + 4
  3164 0000107B 488B5D18                	mov rbx, COUNT
  3165 0000107F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3166 00001084 488D55F8                	lea rdx, [rbp - 8 * 1]
  3167                                  .L_tc_recycle_frame_loop_8eb1:
  3168 00001088 4883F900                	cmp rcx, 0
  3169 0000108C 7413                    	je .L_tc_recycle_frame_done_8eb1
  3170 0000108E 488B32                  	mov rsi, qword [rdx]
  3171 00001091 488933                  	mov qword [rbx], rsi
  3172 00001094 48FFC9                  	dec rcx
  3173 00001097 4883EB08                	sub rbx, 8 * 1
  3174 0000109B 4883EA08                	sub rdx, 8 * 1
  3175 0000109F EBE7                    	jmp .L_tc_recycle_frame_loop_8eb1
  3176                                  .L_tc_recycle_frame_done_8eb1:
  3177 000010A1 488D6308                	lea rsp, [rbx + 8 * 1]
  3178 000010A5 5D                      	pop rbp	; the proc will restore it!
  3179 000010A6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3180 000010A9 C9                      	leave
  3181 000010AA C21800                  	ret AND_KILL_FRAME(1)
  3182                                  .L_lambda_simple_end_6cf3:	; new closure is in rax
  3183 000010AD 48890425[09130000]      	mov qword [free_var_81], rax
  3184 000010B5 48B8-                   	mov rax, sob_void
  3184 000010B7 [0000000000000000] 
  3185                                  
  3186 000010BF 4889C7                  	mov rdi, rax
  3187 000010C2 E854470100              	call print_sexpr_if_not_void
  3188                                  
  3189 000010C7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3190 000010CC E838460100              	call malloc
  3191 000010D1 50                      	push rax
  3192 000010D2 BF00000000              	mov rdi, 8 * 0	; new rib
  3193 000010D7 E82D460100              	call malloc
  3194 000010DC 50                      	push rax
  3195 000010DD BF08000000              	mov rdi, 8 * 1	; extended env
  3196 000010E2 E822460100              	call malloc
  3197 000010E7 488B7D10                	mov rdi, ENV
  3198 000010EB BE00000000              	mov rsi, 0
  3199 000010F0 BA01000000              	mov rdx, 1
  3200                                  .L_lambda_simple_env_loop_6cf4:	; ext_env[i + 1] <-- env[i]
  3201 000010F5 4883FE00                	cmp rsi, 0
  3202 000010F9 7410                    	je .L_lambda_simple_env_end_6cf4
  3203 000010FB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3204 000010FF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3205 00001103 48FFC6                  	inc rsi
  3206 00001106 48FFC2                  	inc rdx
  3207 00001109 EBEA                    	jmp .L_lambda_simple_env_loop_6cf4
  3208                                  .L_lambda_simple_env_end_6cf4:
  3209 0000110B 5B                      	pop rbx
  3210 0000110C BE00000000              	mov rsi, 0
  3211                                  .L_lambda_simple_params_loop_6cf4:	; copy params
  3212 00001111 4883FE00                	cmp rsi, 0
  3213 00001115 740E                    	je .L_lambda_simple_params_end_6cf4
  3214 00001117 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3215 0000111C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3216 00001120 48FFC6                  	inc rsi
  3217 00001123 EBEC                    	jmp .L_lambda_simple_params_loop_6cf4
  3218                                  .L_lambda_simple_params_end_6cf4:
  3219 00001125 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3220 00001128 4889C3                  	mov rbx, rax
  3221 0000112B 58                      	pop rax
  3222 0000112C C60004                  	mov byte [rax], T_closure
  3223 0000112F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3224 00001133 48C74009[40110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cf4
  3225 0000113B E99B000000              	jmp .L_lambda_simple_end_6cf4
  3226                                  .L_lambda_simple_code_6cf4:	; lambda-simple body
  3227 00001140 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3228 00001146 740B                    	je .L_lambda_simple_arity_check_ok_6cf4
  3229 00001148 FF742410                	push qword [rsp + 8 * 2]
  3230 0000114C 6A01                    	push 1
  3231 0000114E E96F450100              	jmp L_error_incorrect_arity_simple
  3232                                  .L_lambda_simple_arity_check_ok_6cf4:
  3233 00001153 C8000000                	enter 0, 0
  3234                                  	; preparing a tail-call
  3235 00001157 488B4520                	mov rax, PARAM(0)	; param x
  3236 0000115B 50                      	push rax
  3237 0000115C 6A01                    	push 1	; arg count
  3238 0000115E 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  3239 00001166 803805                  	cmp byte [rax], T_undefined
  3240 00001169 0F846D440100            	je L_error_fvar_undefined
  3241 0000116F 803804                  	cmp byte [rax], T_closure
  3242 00001172 0F85E8440100            	jne L_error_non_closure
  3243 00001178 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3244 0000117B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3245 0000117E 50                      	push rax
  3246 0000117F 6A01                    	push 1	; arg count
  3247 00001181 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3248 00001189 803805                  	cmp byte [rax], T_undefined
  3249 0000118C 0F844A440100            	je L_error_fvar_undefined
  3250 00001192 803804                  	cmp byte [rax], T_closure
  3251 00001195 0F85C5440100            	jne L_error_non_closure
  3252 0000119B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3253                                  
  3254                                  	; recycling the current frame
  3255 0000119E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3256 000011A1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3257 000011A4 B905000000              	mov rcx, 1 + 4
  3258 000011A9 488B5D18                	mov rbx, COUNT
  3259 000011AD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3260 000011B2 488D55F8                	lea rdx, [rbp - 8 * 1]
  3261                                  .L_tc_recycle_frame_loop_8eb2:
  3262 000011B6 4883F900                	cmp rcx, 0
  3263 000011BA 7413                    	je .L_tc_recycle_frame_done_8eb2
  3264 000011BC 488B32                  	mov rsi, qword [rdx]
  3265 000011BF 488933                  	mov qword [rbx], rsi
  3266 000011C2 48FFC9                  	dec rcx
  3267 000011C5 4883EB08                	sub rbx, 8 * 1
  3268 000011C9 4883EA08                	sub rdx, 8 * 1
  3269 000011CD EBE7                    	jmp .L_tc_recycle_frame_loop_8eb2
  3270                                  .L_tc_recycle_frame_done_8eb2:
  3271 000011CF 488D6308                	lea rsp, [rbx + 8 * 1]
  3272 000011D3 5D                      	pop rbp	; the proc will restore it!
  3273 000011D4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3274 000011D7 C9                      	leave
  3275 000011D8 C21800                  	ret AND_KILL_FRAME(1)
  3276                                  .L_lambda_simple_end_6cf4:	; new closure is in rax
  3277 000011DB 48890425[1A130000]      	mov qword [free_var_82], rax
  3278 000011E3 48B8-                   	mov rax, sob_void
  3278 000011E5 [0000000000000000] 
  3279                                  
  3280 000011ED 4889C7                  	mov rdi, rax
  3281 000011F0 E826460100              	call print_sexpr_if_not_void
  3282                                  
  3283 000011F5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3284 000011FA E80A450100              	call malloc
  3285 000011FF 50                      	push rax
  3286 00001200 BF00000000              	mov rdi, 8 * 0	; new rib
  3287 00001205 E8FF440100              	call malloc
  3288 0000120A 50                      	push rax
  3289 0000120B BF08000000              	mov rdi, 8 * 1	; extended env
  3290 00001210 E8F4440100              	call malloc
  3291 00001215 488B7D10                	mov rdi, ENV
  3292 00001219 BE00000000              	mov rsi, 0
  3293 0000121E BA01000000              	mov rdx, 1
  3294                                  .L_lambda_simple_env_loop_6cf5:	; ext_env[i + 1] <-- env[i]
  3295 00001223 4883FE00                	cmp rsi, 0
  3296 00001227 7410                    	je .L_lambda_simple_env_end_6cf5
  3297 00001229 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3298 0000122D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3299 00001231 48FFC6                  	inc rsi
  3300 00001234 48FFC2                  	inc rdx
  3301 00001237 EBEA                    	jmp .L_lambda_simple_env_loop_6cf5
  3302                                  .L_lambda_simple_env_end_6cf5:
  3303 00001239 5B                      	pop rbx
  3304 0000123A BE00000000              	mov rsi, 0
  3305                                  .L_lambda_simple_params_loop_6cf5:	; copy params
  3306 0000123F 4883FE00                	cmp rsi, 0
  3307 00001243 740E                    	je .L_lambda_simple_params_end_6cf5
  3308 00001245 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3309 0000124A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3310 0000124E 48FFC6                  	inc rsi
  3311 00001251 EBEC                    	jmp .L_lambda_simple_params_loop_6cf5
  3312                                  .L_lambda_simple_params_end_6cf5:
  3313 00001253 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3314 00001256 4889C3                  	mov rbx, rax
  3315 00001259 58                      	pop rax
  3316 0000125A C60004                  	mov byte [rax], T_closure
  3317 0000125D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3318 00001261 48C74009[6E120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cf5
  3319 00001269 E99B000000              	jmp .L_lambda_simple_end_6cf5
  3320                                  .L_lambda_simple_code_6cf5:	; lambda-simple body
  3321 0000126E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3322 00001274 740B                    	je .L_lambda_simple_arity_check_ok_6cf5
  3323 00001276 FF742410                	push qword [rsp + 8 * 2]
  3324 0000127A 6A01                    	push 1
  3325 0000127C E941440100              	jmp L_error_incorrect_arity_simple
  3326                                  .L_lambda_simple_arity_check_ok_6cf5:
  3327 00001281 C8000000                	enter 0, 0
  3328                                  	; preparing a tail-call
  3329 00001285 488B4520                	mov rax, PARAM(0)	; param x
  3330 00001289 50                      	push rax
  3331 0000128A 6A01                    	push 1	; arg count
  3332 0000128C 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  3333 00001294 803805                  	cmp byte [rax], T_undefined
  3334 00001297 0F843F430100            	je L_error_fvar_undefined
  3335 0000129D 803804                  	cmp byte [rax], T_closure
  3336 000012A0 0F85BA430100            	jne L_error_non_closure
  3337 000012A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3338 000012A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3339 000012AC 50                      	push rax
  3340 000012AD 6A01                    	push 1	; arg count
  3341 000012AF 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3342 000012B7 803805                  	cmp byte [rax], T_undefined
  3343 000012BA 0F841C430100            	je L_error_fvar_undefined
  3344 000012C0 803804                  	cmp byte [rax], T_closure
  3345 000012C3 0F8597430100            	jne L_error_non_closure
  3346 000012C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3347                                  
  3348                                  	; recycling the current frame
  3349 000012CC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3350 000012CF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3351 000012D2 B905000000              	mov rcx, 1 + 4
  3352 000012D7 488B5D18                	mov rbx, COUNT
  3353 000012DB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3354 000012E0 488D55F8                	lea rdx, [rbp - 8 * 1]
  3355                                  .L_tc_recycle_frame_loop_8eb3:
  3356 000012E4 4883F900                	cmp rcx, 0
  3357 000012E8 7413                    	je .L_tc_recycle_frame_done_8eb3
  3358 000012EA 488B32                  	mov rsi, qword [rdx]
  3359 000012ED 488933                  	mov qword [rbx], rsi
  3360 000012F0 48FFC9                  	dec rcx
  3361 000012F3 4883EB08                	sub rbx, 8 * 1
  3362 000012F7 4883EA08                	sub rdx, 8 * 1
  3363 000012FB EBE7                    	jmp .L_tc_recycle_frame_loop_8eb3
  3364                                  .L_tc_recycle_frame_done_8eb3:
  3365 000012FD 488D6308                	lea rsp, [rbx + 8 * 1]
  3366 00001301 5D                      	pop rbp	; the proc will restore it!
  3367 00001302 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3368 00001305 C9                      	leave
  3369 00001306 C21800                  	ret AND_KILL_FRAME(1)
  3370                                  .L_lambda_simple_end_6cf5:	; new closure is in rax
  3371 00001309 48890425[2B130000]      	mov qword [free_var_83], rax
  3372 00001311 48B8-                   	mov rax, sob_void
  3372 00001313 [0000000000000000] 
  3373                                  
  3374 0000131B 4889C7                  	mov rdi, rax
  3375 0000131E E8F8440100              	call print_sexpr_if_not_void
  3376                                  
  3377 00001323 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3378 00001328 E8DC430100              	call malloc
  3379 0000132D 50                      	push rax
  3380 0000132E BF00000000              	mov rdi, 8 * 0	; new rib
  3381 00001333 E8D1430100              	call malloc
  3382 00001338 50                      	push rax
  3383 00001339 BF08000000              	mov rdi, 8 * 1	; extended env
  3384 0000133E E8C6430100              	call malloc
  3385 00001343 488B7D10                	mov rdi, ENV
  3386 00001347 BE00000000              	mov rsi, 0
  3387 0000134C BA01000000              	mov rdx, 1
  3388                                  .L_lambda_simple_env_loop_6cf6:	; ext_env[i + 1] <-- env[i]
  3389 00001351 4883FE00                	cmp rsi, 0
  3390 00001355 7410                    	je .L_lambda_simple_env_end_6cf6
  3391 00001357 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3392 0000135B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3393 0000135F 48FFC6                  	inc rsi
  3394 00001362 48FFC2                  	inc rdx
  3395 00001365 EBEA                    	jmp .L_lambda_simple_env_loop_6cf6
  3396                                  .L_lambda_simple_env_end_6cf6:
  3397 00001367 5B                      	pop rbx
  3398 00001368 BE00000000              	mov rsi, 0
  3399                                  .L_lambda_simple_params_loop_6cf6:	; copy params
  3400 0000136D 4883FE00                	cmp rsi, 0
  3401 00001371 740E                    	je .L_lambda_simple_params_end_6cf6
  3402 00001373 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3403 00001378 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3404 0000137C 48FFC6                  	inc rsi
  3405 0000137F EBEC                    	jmp .L_lambda_simple_params_loop_6cf6
  3406                                  .L_lambda_simple_params_end_6cf6:
  3407 00001381 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3408 00001384 4889C3                  	mov rbx, rax
  3409 00001387 58                      	pop rax
  3410 00001388 C60004                  	mov byte [rax], T_closure
  3411 0000138B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3412 0000138F 48C74009[9C130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cf6
  3413 00001397 E99B000000              	jmp .L_lambda_simple_end_6cf6
  3414                                  .L_lambda_simple_code_6cf6:	; lambda-simple body
  3415 0000139C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3416 000013A2 740B                    	je .L_lambda_simple_arity_check_ok_6cf6
  3417 000013A4 FF742410                	push qword [rsp + 8 * 2]
  3418 000013A8 6A01                    	push 1
  3419 000013AA E913430100              	jmp L_error_incorrect_arity_simple
  3420                                  .L_lambda_simple_arity_check_ok_6cf6:
  3421 000013AF C8000000                	enter 0, 0
  3422                                  	; preparing a tail-call
  3423 000013B3 488B4520                	mov rax, PARAM(0)	; param x
  3424 000013B7 50                      	push rax
  3425 000013B8 6A01                    	push 1	; arg count
  3426 000013BA 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  3427 000013C2 803805                  	cmp byte [rax], T_undefined
  3428 000013C5 0F8411420100            	je L_error_fvar_undefined
  3429 000013CB 803804                  	cmp byte [rax], T_closure
  3430 000013CE 0F858C420100            	jne L_error_non_closure
  3431 000013D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3432 000013D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3433 000013DA 50                      	push rax
  3434 000013DB 6A01                    	push 1	; arg count
  3435 000013DD 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3436 000013E5 803805                  	cmp byte [rax], T_undefined
  3437 000013E8 0F84EE410100            	je L_error_fvar_undefined
  3438 000013EE 803804                  	cmp byte [rax], T_closure
  3439 000013F1 0F8569420100            	jne L_error_non_closure
  3440 000013F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3441                                  
  3442                                  	; recycling the current frame
  3443 000013FA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3444 000013FD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3445 00001400 B905000000              	mov rcx, 1 + 4
  3446 00001405 488B5D18                	mov rbx, COUNT
  3447 00001409 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3448 0000140E 488D55F8                	lea rdx, [rbp - 8 * 1]
  3449                                  .L_tc_recycle_frame_loop_8eb4:
  3450 00001412 4883F900                	cmp rcx, 0
  3451 00001416 7413                    	je .L_tc_recycle_frame_done_8eb4
  3452 00001418 488B32                  	mov rsi, qword [rdx]
  3453 0000141B 488933                  	mov qword [rbx], rsi
  3454 0000141E 48FFC9                  	dec rcx
  3455 00001421 4883EB08                	sub rbx, 8 * 1
  3456 00001425 4883EA08                	sub rdx, 8 * 1
  3457 00001429 EBE7                    	jmp .L_tc_recycle_frame_loop_8eb4
  3458                                  .L_tc_recycle_frame_done_8eb4:
  3459 0000142B 488D6308                	lea rsp, [rbx + 8 * 1]
  3460 0000142F 5D                      	pop rbp	; the proc will restore it!
  3461 00001430 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3462 00001433 C9                      	leave
  3463 00001434 C21800                  	ret AND_KILL_FRAME(1)
  3464                                  .L_lambda_simple_end_6cf6:	; new closure is in rax
  3465 00001437 48890425[3C130000]      	mov qword [free_var_84], rax
  3466 0000143F 48B8-                   	mov rax, sob_void
  3466 00001441 [0000000000000000] 
  3467                                  
  3468 00001449 4889C7                  	mov rdi, rax
  3469 0000144C E8CA430100              	call print_sexpr_if_not_void
  3470                                  
  3471 00001451 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3472 00001456 E8AE420100              	call malloc
  3473 0000145B 50                      	push rax
  3474 0000145C BF00000000              	mov rdi, 8 * 0	; new rib
  3475 00001461 E8A3420100              	call malloc
  3476 00001466 50                      	push rax
  3477 00001467 BF08000000              	mov rdi, 8 * 1	; extended env
  3478 0000146C E898420100              	call malloc
  3479 00001471 488B7D10                	mov rdi, ENV
  3480 00001475 BE00000000              	mov rsi, 0
  3481 0000147A BA01000000              	mov rdx, 1
  3482                                  .L_lambda_simple_env_loop_6cf7:	; ext_env[i + 1] <-- env[i]
  3483 0000147F 4883FE00                	cmp rsi, 0
  3484 00001483 7410                    	je .L_lambda_simple_env_end_6cf7
  3485 00001485 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3486 00001489 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3487 0000148D 48FFC6                  	inc rsi
  3488 00001490 48FFC2                  	inc rdx
  3489 00001493 EBEA                    	jmp .L_lambda_simple_env_loop_6cf7
  3490                                  .L_lambda_simple_env_end_6cf7:
  3491 00001495 5B                      	pop rbx
  3492 00001496 BE00000000              	mov rsi, 0
  3493                                  .L_lambda_simple_params_loop_6cf7:	; copy params
  3494 0000149B 4883FE00                	cmp rsi, 0
  3495 0000149F 740E                    	je .L_lambda_simple_params_end_6cf7
  3496 000014A1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3497 000014A6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3498 000014AA 48FFC6                  	inc rsi
  3499 000014AD EBEC                    	jmp .L_lambda_simple_params_loop_6cf7
  3500                                  .L_lambda_simple_params_end_6cf7:
  3501 000014AF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3502 000014B2 4889C3                  	mov rbx, rax
  3503 000014B5 58                      	pop rax
  3504 000014B6 C60004                  	mov byte [rax], T_closure
  3505 000014B9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3506 000014BD 48C74009[CA140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cf7
  3507 000014C5 E99B000000              	jmp .L_lambda_simple_end_6cf7
  3508                                  .L_lambda_simple_code_6cf7:	; lambda-simple body
  3509 000014CA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3510 000014D0 740B                    	je .L_lambda_simple_arity_check_ok_6cf7
  3511 000014D2 FF742410                	push qword [rsp + 8 * 2]
  3512 000014D6 6A01                    	push 1
  3513 000014D8 E9E5410100              	jmp L_error_incorrect_arity_simple
  3514                                  .L_lambda_simple_arity_check_ok_6cf7:
  3515 000014DD C8000000                	enter 0, 0
  3516                                  	; preparing a tail-call
  3517 000014E1 488B4520                	mov rax, PARAM(0)	; param x
  3518 000014E5 50                      	push rax
  3519 000014E6 6A01                    	push 1	; arg count
  3520 000014E8 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  3521 000014F0 803805                  	cmp byte [rax], T_undefined
  3522 000014F3 0F84E3400100            	je L_error_fvar_undefined
  3523 000014F9 803804                  	cmp byte [rax], T_closure
  3524 000014FC 0F855E410100            	jne L_error_non_closure
  3525 00001502 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3526 00001505 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3527 00001508 50                      	push rax
  3528 00001509 6A01                    	push 1	; arg count
  3529 0000150B 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3530 00001513 803805                  	cmp byte [rax], T_undefined
  3531 00001516 0F84C0400100            	je L_error_fvar_undefined
  3532 0000151C 803804                  	cmp byte [rax], T_closure
  3533 0000151F 0F853B410100            	jne L_error_non_closure
  3534 00001525 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3535                                  
  3536                                  	; recycling the current frame
  3537 00001528 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3538 0000152B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3539 0000152E B905000000              	mov rcx, 1 + 4
  3540 00001533 488B5D18                	mov rbx, COUNT
  3541 00001537 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3542 0000153C 488D55F8                	lea rdx, [rbp - 8 * 1]
  3543                                  .L_tc_recycle_frame_loop_8eb5:
  3544 00001540 4883F900                	cmp rcx, 0
  3545 00001544 7413                    	je .L_tc_recycle_frame_done_8eb5
  3546 00001546 488B32                  	mov rsi, qword [rdx]
  3547 00001549 488933                  	mov qword [rbx], rsi
  3548 0000154C 48FFC9                  	dec rcx
  3549 0000154F 4883EB08                	sub rbx, 8 * 1
  3550 00001553 4883EA08                	sub rdx, 8 * 1
  3551 00001557 EBE7                    	jmp .L_tc_recycle_frame_loop_8eb5
  3552                                  .L_tc_recycle_frame_done_8eb5:
  3553 00001559 488D6308                	lea rsp, [rbx + 8 * 1]
  3554 0000155D 5D                      	pop rbp	; the proc will restore it!
  3555 0000155E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3556 00001561 C9                      	leave
  3557 00001562 C21800                  	ret AND_KILL_FRAME(1)
  3558                                  .L_lambda_simple_end_6cf7:	; new closure is in rax
  3559 00001565 48890425[4D130000]      	mov qword [free_var_85], rax
  3560 0000156D 48B8-                   	mov rax, sob_void
  3560 0000156F [0000000000000000] 
  3561                                  
  3562 00001577 4889C7                  	mov rdi, rax
  3563 0000157A E89C420100              	call print_sexpr_if_not_void
  3564                                  
  3565 0000157F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3566 00001584 E880410100              	call malloc
  3567 00001589 50                      	push rax
  3568 0000158A BF00000000              	mov rdi, 8 * 0	; new rib
  3569 0000158F E875410100              	call malloc
  3570 00001594 50                      	push rax
  3571 00001595 BF08000000              	mov rdi, 8 * 1	; extended env
  3572 0000159A E86A410100              	call malloc
  3573 0000159F 488B7D10                	mov rdi, ENV
  3574 000015A3 BE00000000              	mov rsi, 0
  3575 000015A8 BA01000000              	mov rdx, 1
  3576                                  .L_lambda_simple_env_loop_6cf8:	; ext_env[i + 1] <-- env[i]
  3577 000015AD 4883FE00                	cmp rsi, 0
  3578 000015B1 7410                    	je .L_lambda_simple_env_end_6cf8
  3579 000015B3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3580 000015B7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3581 000015BB 48FFC6                  	inc rsi
  3582 000015BE 48FFC2                  	inc rdx
  3583 000015C1 EBEA                    	jmp .L_lambda_simple_env_loop_6cf8
  3584                                  .L_lambda_simple_env_end_6cf8:
  3585 000015C3 5B                      	pop rbx
  3586 000015C4 BE00000000              	mov rsi, 0
  3587                                  .L_lambda_simple_params_loop_6cf8:	; copy params
  3588 000015C9 4883FE00                	cmp rsi, 0
  3589 000015CD 740E                    	je .L_lambda_simple_params_end_6cf8
  3590 000015CF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3591 000015D4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3592 000015D8 48FFC6                  	inc rsi
  3593 000015DB EBEC                    	jmp .L_lambda_simple_params_loop_6cf8
  3594                                  .L_lambda_simple_params_end_6cf8:
  3595 000015DD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3596 000015E0 4889C3                  	mov rbx, rax
  3597 000015E3 58                      	pop rax
  3598 000015E4 C60004                  	mov byte [rax], T_closure
  3599 000015E7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3600 000015EB 48C74009[F8150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cf8
  3601 000015F3 E99B000000              	jmp .L_lambda_simple_end_6cf8
  3602                                  .L_lambda_simple_code_6cf8:	; lambda-simple body
  3603 000015F8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3604 000015FE 740B                    	je .L_lambda_simple_arity_check_ok_6cf8
  3605 00001600 FF742410                	push qword [rsp + 8 * 2]
  3606 00001604 6A01                    	push 1
  3607 00001606 E9B7400100              	jmp L_error_incorrect_arity_simple
  3608                                  .L_lambda_simple_arity_check_ok_6cf8:
  3609 0000160B C8000000                	enter 0, 0
  3610                                  	; preparing a tail-call
  3611 0000160F 488B4520                	mov rax, PARAM(0)	; param x
  3612 00001613 50                      	push rax
  3613 00001614 6A01                    	push 1	; arg count
  3614 00001616 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  3615 0000161E 803805                  	cmp byte [rax], T_undefined
  3616 00001621 0F84B53F0100            	je L_error_fvar_undefined
  3617 00001627 803804                  	cmp byte [rax], T_closure
  3618 0000162A 0F8530400100            	jne L_error_non_closure
  3619 00001630 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3620 00001633 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3621 00001636 50                      	push rax
  3622 00001637 6A01                    	push 1	; arg count
  3623 00001639 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  3624 00001641 803805                  	cmp byte [rax], T_undefined
  3625 00001644 0F84923F0100            	je L_error_fvar_undefined
  3626 0000164A 803804                  	cmp byte [rax], T_closure
  3627 0000164D 0F850D400100            	jne L_error_non_closure
  3628 00001653 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3629                                  
  3630                                  	; recycling the current frame
  3631 00001656 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3632 00001659 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3633 0000165C B905000000              	mov rcx, 1 + 4
  3634 00001661 488B5D18                	mov rbx, COUNT
  3635 00001665 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3636 0000166A 488D55F8                	lea rdx, [rbp - 8 * 1]
  3637                                  .L_tc_recycle_frame_loop_8eb6:
  3638 0000166E 4883F900                	cmp rcx, 0
  3639 00001672 7413                    	je .L_tc_recycle_frame_done_8eb6
  3640 00001674 488B32                  	mov rsi, qword [rdx]
  3641 00001677 488933                  	mov qword [rbx], rsi
  3642 0000167A 48FFC9                  	dec rcx
  3643 0000167D 4883EB08                	sub rbx, 8 * 1
  3644 00001681 4883EA08                	sub rdx, 8 * 1
  3645 00001685 EBE7                    	jmp .L_tc_recycle_frame_loop_8eb6
  3646                                  .L_tc_recycle_frame_done_8eb6:
  3647 00001687 488D6308                	lea rsp, [rbx + 8 * 1]
  3648 0000168B 5D                      	pop rbp	; the proc will restore it!
  3649 0000168C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3650 0000168F C9                      	leave
  3651 00001690 C21800                  	ret AND_KILL_FRAME(1)
  3652                                  .L_lambda_simple_end_6cf8:	; new closure is in rax
  3653 00001693 48890425[5E130000]      	mov qword [free_var_86], rax
  3654 0000169B 48B8-                   	mov rax, sob_void
  3654 0000169D [0000000000000000] 
  3655                                  
  3656 000016A5 4889C7                  	mov rdi, rax
  3657 000016A8 E86E410100              	call print_sexpr_if_not_void
  3658                                  
  3659 000016AD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3660 000016B2 E852400100              	call malloc
  3661 000016B7 50                      	push rax
  3662 000016B8 BF00000000              	mov rdi, 8 * 0	; new rib
  3663 000016BD E847400100              	call malloc
  3664 000016C2 50                      	push rax
  3665 000016C3 BF08000000              	mov rdi, 8 * 1	; extended env
  3666 000016C8 E83C400100              	call malloc
  3667 000016CD 488B7D10                	mov rdi, ENV
  3668 000016D1 BE00000000              	mov rsi, 0
  3669 000016D6 BA01000000              	mov rdx, 1
  3670                                  .L_lambda_simple_env_loop_6cf9:	; ext_env[i + 1] <-- env[i]
  3671 000016DB 4883FE00                	cmp rsi, 0
  3672 000016DF 7410                    	je .L_lambda_simple_env_end_6cf9
  3673 000016E1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3674 000016E5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3675 000016E9 48FFC6                  	inc rsi
  3676 000016EC 48FFC2                  	inc rdx
  3677 000016EF EBEA                    	jmp .L_lambda_simple_env_loop_6cf9
  3678                                  .L_lambda_simple_env_end_6cf9:
  3679 000016F1 5B                      	pop rbx
  3680 000016F2 BE00000000              	mov rsi, 0
  3681                                  .L_lambda_simple_params_loop_6cf9:	; copy params
  3682 000016F7 4883FE00                	cmp rsi, 0
  3683 000016FB 740E                    	je .L_lambda_simple_params_end_6cf9
  3684 000016FD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3685 00001702 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3686 00001706 48FFC6                  	inc rsi
  3687 00001709 EBEC                    	jmp .L_lambda_simple_params_loop_6cf9
  3688                                  .L_lambda_simple_params_end_6cf9:
  3689 0000170B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3690 0000170E 4889C3                  	mov rbx, rax
  3691 00001711 58                      	pop rax
  3692 00001712 C60004                  	mov byte [rax], T_closure
  3693 00001715 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3694 00001719 48C74009[26170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cf9
  3695 00001721 E99B000000              	jmp .L_lambda_simple_end_6cf9
  3696                                  .L_lambda_simple_code_6cf9:	; lambda-simple body
  3697 00001726 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3698 0000172C 740B                    	je .L_lambda_simple_arity_check_ok_6cf9
  3699 0000172E FF742410                	push qword [rsp + 8 * 2]
  3700 00001732 6A01                    	push 1
  3701 00001734 E9893F0100              	jmp L_error_incorrect_arity_simple
  3702                                  .L_lambda_simple_arity_check_ok_6cf9:
  3703 00001739 C8000000                	enter 0, 0
  3704                                  	; preparing a tail-call
  3705 0000173D 488B4520                	mov rax, PARAM(0)	; param x
  3706 00001741 50                      	push rax
  3707 00001742 6A01                    	push 1	; arg count
  3708 00001744 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  3709 0000174C 803805                  	cmp byte [rax], T_undefined
  3710 0000174F 0F84873E0100            	je L_error_fvar_undefined
  3711 00001755 803804                  	cmp byte [rax], T_closure
  3712 00001758 0F85023F0100            	jne L_error_non_closure
  3713 0000175E FF7001                  	push SOB_CLOSURE_ENV(rax)
  3714 00001761 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3715 00001764 50                      	push rax
  3716 00001765 6A01                    	push 1	; arg count
  3717 00001767 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  3718 0000176F 803805                  	cmp byte [rax], T_undefined
  3719 00001772 0F84643E0100            	je L_error_fvar_undefined
  3720 00001778 803804                  	cmp byte [rax], T_closure
  3721 0000177B 0F85DF3E0100            	jne L_error_non_closure
  3722 00001781 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3723                                  
  3724                                  	; recycling the current frame
  3725 00001784 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3726 00001787 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3727 0000178A B905000000              	mov rcx, 1 + 4
  3728 0000178F 488B5D18                	mov rbx, COUNT
  3729 00001793 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3730 00001798 488D55F8                	lea rdx, [rbp - 8 * 1]
  3731                                  .L_tc_recycle_frame_loop_8eb7:
  3732 0000179C 4883F900                	cmp rcx, 0
  3733 000017A0 7413                    	je .L_tc_recycle_frame_done_8eb7
  3734 000017A2 488B32                  	mov rsi, qword [rdx]
  3735 000017A5 488933                  	mov qword [rbx], rsi
  3736 000017A8 48FFC9                  	dec rcx
  3737 000017AB 4883EB08                	sub rbx, 8 * 1
  3738 000017AF 4883EA08                	sub rdx, 8 * 1
  3739 000017B3 EBE7                    	jmp .L_tc_recycle_frame_loop_8eb7
  3740                                  .L_tc_recycle_frame_done_8eb7:
  3741 000017B5 488D6308                	lea rsp, [rbx + 8 * 1]
  3742 000017B9 5D                      	pop rbp	; the proc will restore it!
  3743 000017BA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3744 000017BD C9                      	leave
  3745 000017BE C21800                  	ret AND_KILL_FRAME(1)
  3746                                  .L_lambda_simple_end_6cf9:	; new closure is in rax
  3747 000017C1 48890425[6F130000]      	mov qword [free_var_87], rax
  3748 000017C9 48B8-                   	mov rax, sob_void
  3748 000017CB [0000000000000000] 
  3749                                  
  3750 000017D3 4889C7                  	mov rdi, rax
  3751 000017D6 E840400100              	call print_sexpr_if_not_void
  3752                                  
  3753 000017DB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3754 000017E0 E8243F0100              	call malloc
  3755 000017E5 50                      	push rax
  3756 000017E6 BF00000000              	mov rdi, 8 * 0	; new rib
  3757 000017EB E8193F0100              	call malloc
  3758 000017F0 50                      	push rax
  3759 000017F1 BF08000000              	mov rdi, 8 * 1	; extended env
  3760 000017F6 E80E3F0100              	call malloc
  3761 000017FB 488B7D10                	mov rdi, ENV
  3762 000017FF BE00000000              	mov rsi, 0
  3763 00001804 BA01000000              	mov rdx, 1
  3764                                  .L_lambda_simple_env_loop_6cfa:	; ext_env[i + 1] <-- env[i]
  3765 00001809 4883FE00                	cmp rsi, 0
  3766 0000180D 7410                    	je .L_lambda_simple_env_end_6cfa
  3767 0000180F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3768 00001813 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3769 00001817 48FFC6                  	inc rsi
  3770 0000181A 48FFC2                  	inc rdx
  3771 0000181D EBEA                    	jmp .L_lambda_simple_env_loop_6cfa
  3772                                  .L_lambda_simple_env_end_6cfa:
  3773 0000181F 5B                      	pop rbx
  3774 00001820 BE00000000              	mov rsi, 0
  3775                                  .L_lambda_simple_params_loop_6cfa:	; copy params
  3776 00001825 4883FE00                	cmp rsi, 0
  3777 00001829 740E                    	je .L_lambda_simple_params_end_6cfa
  3778 0000182B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3779 00001830 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3780 00001834 48FFC6                  	inc rsi
  3781 00001837 EBEC                    	jmp .L_lambda_simple_params_loop_6cfa
  3782                                  .L_lambda_simple_params_end_6cfa:
  3783 00001839 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3784 0000183C 4889C3                  	mov rbx, rax
  3785 0000183F 58                      	pop rax
  3786 00001840 C60004                  	mov byte [rax], T_closure
  3787 00001843 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3788 00001847 48C74009[54180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cfa
  3789 0000184F E99B000000              	jmp .L_lambda_simple_end_6cfa
  3790                                  .L_lambda_simple_code_6cfa:	; lambda-simple body
  3791 00001854 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3792 0000185A 740B                    	je .L_lambda_simple_arity_check_ok_6cfa
  3793 0000185C FF742410                	push qword [rsp + 8 * 2]
  3794 00001860 6A01                    	push 1
  3795 00001862 E95B3E0100              	jmp L_error_incorrect_arity_simple
  3796                                  .L_lambda_simple_arity_check_ok_6cfa:
  3797 00001867 C8000000                	enter 0, 0
  3798                                  	; preparing a tail-call
  3799 0000186B 488B4520                	mov rax, PARAM(0)	; param x
  3800 0000186F 50                      	push rax
  3801 00001870 6A01                    	push 1	; arg count
  3802 00001872 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  3803 0000187A 803805                  	cmp byte [rax], T_undefined
  3804 0000187D 0F84593D0100            	je L_error_fvar_undefined
  3805 00001883 803804                  	cmp byte [rax], T_closure
  3806 00001886 0F85D43D0100            	jne L_error_non_closure
  3807 0000188C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3808 0000188F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3809 00001892 50                      	push rax
  3810 00001893 6A01                    	push 1	; arg count
  3811 00001895 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  3812 0000189D 803805                  	cmp byte [rax], T_undefined
  3813 000018A0 0F84363D0100            	je L_error_fvar_undefined
  3814 000018A6 803804                  	cmp byte [rax], T_closure
  3815 000018A9 0F85B13D0100            	jne L_error_non_closure
  3816 000018AF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3817                                  
  3818                                  	; recycling the current frame
  3819 000018B2 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3820 000018B5 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3821 000018B8 B905000000              	mov rcx, 1 + 4
  3822 000018BD 488B5D18                	mov rbx, COUNT
  3823 000018C1 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3824 000018C6 488D55F8                	lea rdx, [rbp - 8 * 1]
  3825                                  .L_tc_recycle_frame_loop_8eb8:
  3826 000018CA 4883F900                	cmp rcx, 0
  3827 000018CE 7413                    	je .L_tc_recycle_frame_done_8eb8
  3828 000018D0 488B32                  	mov rsi, qword [rdx]
  3829 000018D3 488933                  	mov qword [rbx], rsi
  3830 000018D6 48FFC9                  	dec rcx
  3831 000018D9 4883EB08                	sub rbx, 8 * 1
  3832 000018DD 4883EA08                	sub rdx, 8 * 1
  3833 000018E1 EBE7                    	jmp .L_tc_recycle_frame_loop_8eb8
  3834                                  .L_tc_recycle_frame_done_8eb8:
  3835 000018E3 488D6308                	lea rsp, [rbx + 8 * 1]
  3836 000018E7 5D                      	pop rbp	; the proc will restore it!
  3837 000018E8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3838 000018EB C9                      	leave
  3839 000018EC C21800                  	ret AND_KILL_FRAME(1)
  3840                                  .L_lambda_simple_end_6cfa:	; new closure is in rax
  3841 000018EF 48890425[80130000]      	mov qword [free_var_88], rax
  3842 000018F7 48B8-                   	mov rax, sob_void
  3842 000018F9 [0000000000000000] 
  3843                                  
  3844 00001901 4889C7                  	mov rdi, rax
  3845 00001904 E8123F0100              	call print_sexpr_if_not_void
  3846                                  
  3847 00001909 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3848 0000190E E8F63D0100              	call malloc
  3849 00001913 50                      	push rax
  3850 00001914 BF00000000              	mov rdi, 8 * 0	; new rib
  3851 00001919 E8EB3D0100              	call malloc
  3852 0000191E 50                      	push rax
  3853 0000191F BF08000000              	mov rdi, 8 * 1	; extended env
  3854 00001924 E8E03D0100              	call malloc
  3855 00001929 488B7D10                	mov rdi, ENV
  3856 0000192D BE00000000              	mov rsi, 0
  3857 00001932 BA01000000              	mov rdx, 1
  3858                                  .L_lambda_simple_env_loop_6cfb:	; ext_env[i + 1] <-- env[i]
  3859 00001937 4883FE00                	cmp rsi, 0
  3860 0000193B 7410                    	je .L_lambda_simple_env_end_6cfb
  3861 0000193D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3862 00001941 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3863 00001945 48FFC6                  	inc rsi
  3864 00001948 48FFC2                  	inc rdx
  3865 0000194B EBEA                    	jmp .L_lambda_simple_env_loop_6cfb
  3866                                  .L_lambda_simple_env_end_6cfb:
  3867 0000194D 5B                      	pop rbx
  3868 0000194E BE00000000              	mov rsi, 0
  3869                                  .L_lambda_simple_params_loop_6cfb:	; copy params
  3870 00001953 4883FE00                	cmp rsi, 0
  3871 00001957 740E                    	je .L_lambda_simple_params_end_6cfb
  3872 00001959 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3873 0000195E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3874 00001962 48FFC6                  	inc rsi
  3875 00001965 EBEC                    	jmp .L_lambda_simple_params_loop_6cfb
  3876                                  .L_lambda_simple_params_end_6cfb:
  3877 00001967 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3878 0000196A 4889C3                  	mov rbx, rax
  3879 0000196D 58                      	pop rax
  3880 0000196E C60004                  	mov byte [rax], T_closure
  3881 00001971 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3882 00001975 48C74009[82190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cfb
  3883 0000197D E99B000000              	jmp .L_lambda_simple_end_6cfb
  3884                                  .L_lambda_simple_code_6cfb:	; lambda-simple body
  3885 00001982 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3886 00001988 740B                    	je .L_lambda_simple_arity_check_ok_6cfb
  3887 0000198A FF742410                	push qword [rsp + 8 * 2]
  3888 0000198E 6A01                    	push 1
  3889 00001990 E92D3D0100              	jmp L_error_incorrect_arity_simple
  3890                                  .L_lambda_simple_arity_check_ok_6cfb:
  3891 00001995 C8000000                	enter 0, 0
  3892                                  	; preparing a tail-call
  3893 00001999 488B4520                	mov rax, PARAM(0)	; param x
  3894 0000199D 50                      	push rax
  3895 0000199E 6A01                    	push 1	; arg count
  3896 000019A0 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  3897 000019A8 803805                  	cmp byte [rax], T_undefined
  3898 000019AB 0F842B3C0100            	je L_error_fvar_undefined
  3899 000019B1 803804                  	cmp byte [rax], T_closure
  3900 000019B4 0F85A63C0100            	jne L_error_non_closure
  3901 000019BA FF7001                  	push SOB_CLOSURE_ENV(rax)
  3902 000019BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  3903 000019C0 50                      	push rax
  3904 000019C1 6A01                    	push 1	; arg count
  3905 000019C3 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  3906 000019CB 803805                  	cmp byte [rax], T_undefined
  3907 000019CE 0F84083C0100            	je L_error_fvar_undefined
  3908 000019D4 803804                  	cmp byte [rax], T_closure
  3909 000019D7 0F85833C0100            	jne L_error_non_closure
  3910 000019DD FF7001                  	push SOB_CLOSURE_ENV(rax)
  3911                                  
  3912                                  	; recycling the current frame
  3913 000019E0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3914 000019E3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3915 000019E6 B905000000              	mov rcx, 1 + 4
  3916 000019EB 488B5D18                	mov rbx, COUNT
  3917 000019EF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3918 000019F4 488D55F8                	lea rdx, [rbp - 8 * 1]
  3919                                  .L_tc_recycle_frame_loop_8eb9:
  3920 000019F8 4883F900                	cmp rcx, 0
  3921 000019FC 7413                    	je .L_tc_recycle_frame_done_8eb9
  3922 000019FE 488B32                  	mov rsi, qword [rdx]
  3923 00001A01 488933                  	mov qword [rbx], rsi
  3924 00001A04 48FFC9                  	dec rcx
  3925 00001A07 4883EB08                	sub rbx, 8 * 1
  3926 00001A0B 4883EA08                	sub rdx, 8 * 1
  3927 00001A0F EBE7                    	jmp .L_tc_recycle_frame_loop_8eb9
  3928                                  .L_tc_recycle_frame_done_8eb9:
  3929 00001A11 488D6308                	lea rsp, [rbx + 8 * 1]
  3930 00001A15 5D                      	pop rbp	; the proc will restore it!
  3931 00001A16 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3932 00001A19 C9                      	leave
  3933 00001A1A C21800                  	ret AND_KILL_FRAME(1)
  3934                                  .L_lambda_simple_end_6cfb:	; new closure is in rax
  3935 00001A1D 48890425[91130000]      	mov qword [free_var_89], rax
  3936 00001A25 48B8-                   	mov rax, sob_void
  3936 00001A27 [0000000000000000] 
  3937                                  
  3938 00001A2F 4889C7                  	mov rdi, rax
  3939 00001A32 E8E43D0100              	call print_sexpr_if_not_void
  3940                                  
  3941 00001A37 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3942 00001A3C E8C83C0100              	call malloc
  3943 00001A41 50                      	push rax
  3944 00001A42 BF00000000              	mov rdi, 8 * 0	; new rib
  3945 00001A47 E8BD3C0100              	call malloc
  3946 00001A4C 50                      	push rax
  3947 00001A4D BF08000000              	mov rdi, 8 * 1	; extended env
  3948 00001A52 E8B23C0100              	call malloc
  3949 00001A57 488B7D10                	mov rdi, ENV
  3950 00001A5B BE00000000              	mov rsi, 0
  3951 00001A60 BA01000000              	mov rdx, 1
  3952                                  .L_lambda_simple_env_loop_6cfc:	; ext_env[i + 1] <-- env[i]
  3953 00001A65 4883FE00                	cmp rsi, 0
  3954 00001A69 7410                    	je .L_lambda_simple_env_end_6cfc
  3955 00001A6B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3956 00001A6F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3957 00001A73 48FFC6                  	inc rsi
  3958 00001A76 48FFC2                  	inc rdx
  3959 00001A79 EBEA                    	jmp .L_lambda_simple_env_loop_6cfc
  3960                                  .L_lambda_simple_env_end_6cfc:
  3961 00001A7B 5B                      	pop rbx
  3962 00001A7C BE00000000              	mov rsi, 0
  3963                                  .L_lambda_simple_params_loop_6cfc:	; copy params
  3964 00001A81 4883FE00                	cmp rsi, 0
  3965 00001A85 740E                    	je .L_lambda_simple_params_end_6cfc
  3966 00001A87 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3967 00001A8C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3968 00001A90 48FFC6                  	inc rsi
  3969 00001A93 EBEC                    	jmp .L_lambda_simple_params_loop_6cfc
  3970                                  .L_lambda_simple_params_end_6cfc:
  3971 00001A95 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3972 00001A98 4889C3                  	mov rbx, rax
  3973 00001A9B 58                      	pop rax
  3974 00001A9C C60004                  	mov byte [rax], T_closure
  3975 00001A9F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3976 00001AA3 48C74009[B01A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cfc
  3977 00001AAB E99B000000              	jmp .L_lambda_simple_end_6cfc
  3978                                  .L_lambda_simple_code_6cfc:	; lambda-simple body
  3979 00001AB0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3980 00001AB6 740B                    	je .L_lambda_simple_arity_check_ok_6cfc
  3981 00001AB8 FF742410                	push qword [rsp + 8 * 2]
  3982 00001ABC 6A01                    	push 1
  3983 00001ABE E9FF3B0100              	jmp L_error_incorrect_arity_simple
  3984                                  .L_lambda_simple_arity_check_ok_6cfc:
  3985 00001AC3 C8000000                	enter 0, 0
  3986                                  	; preparing a tail-call
  3987 00001AC7 488B4520                	mov rax, PARAM(0)	; param x
  3988 00001ACB 50                      	push rax
  3989 00001ACC 6A01                    	push 1	; arg count
  3990 00001ACE 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  3991 00001AD6 803805                  	cmp byte [rax], T_undefined
  3992 00001AD9 0F84FD3A0100            	je L_error_fvar_undefined
  3993 00001ADF 803804                  	cmp byte [rax], T_closure
  3994 00001AE2 0F85783B0100            	jne L_error_non_closure
  3995 00001AE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3996 00001AEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  3997 00001AEE 50                      	push rax
  3998 00001AEF 6A01                    	push 1	; arg count
  3999 00001AF1 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4000 00001AF9 803805                  	cmp byte [rax], T_undefined
  4001 00001AFC 0F84DA3A0100            	je L_error_fvar_undefined
  4002 00001B02 803804                  	cmp byte [rax], T_closure
  4003 00001B05 0F85553B0100            	jne L_error_non_closure
  4004 00001B0B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4005                                  
  4006                                  	; recycling the current frame
  4007 00001B0E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4008 00001B11 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4009 00001B14 B905000000              	mov rcx, 1 + 4
  4010 00001B19 488B5D18                	mov rbx, COUNT
  4011 00001B1D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4012 00001B22 488D55F8                	lea rdx, [rbp - 8 * 1]
  4013                                  .L_tc_recycle_frame_loop_8eba:
  4014 00001B26 4883F900                	cmp rcx, 0
  4015 00001B2A 7413                    	je .L_tc_recycle_frame_done_8eba
  4016 00001B2C 488B32                  	mov rsi, qword [rdx]
  4017 00001B2F 488933                  	mov qword [rbx], rsi
  4018 00001B32 48FFC9                  	dec rcx
  4019 00001B35 4883EB08                	sub rbx, 8 * 1
  4020 00001B39 4883EA08                	sub rdx, 8 * 1
  4021 00001B3D EBE7                    	jmp .L_tc_recycle_frame_loop_8eba
  4022                                  .L_tc_recycle_frame_done_8eba:
  4023 00001B3F 488D6308                	lea rsp, [rbx + 8 * 1]
  4024 00001B43 5D                      	pop rbp	; the proc will restore it!
  4025 00001B44 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4026 00001B47 C9                      	leave
  4027 00001B48 C21800                  	ret AND_KILL_FRAME(1)
  4028                                  .L_lambda_simple_end_6cfc:	; new closure is in rax
  4029 00001B4B 48890425[A2130000]      	mov qword [free_var_90], rax
  4030 00001B53 48B8-                   	mov rax, sob_void
  4030 00001B55 [0000000000000000] 
  4031                                  
  4032 00001B5D 4889C7                  	mov rdi, rax
  4033 00001B60 E8B63C0100              	call print_sexpr_if_not_void
  4034                                  
  4035 00001B65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4036 00001B6A E89A3B0100              	call malloc
  4037 00001B6F 50                      	push rax
  4038 00001B70 BF00000000              	mov rdi, 8 * 0	; new rib
  4039 00001B75 E88F3B0100              	call malloc
  4040 00001B7A 50                      	push rax
  4041 00001B7B BF08000000              	mov rdi, 8 * 1	; extended env
  4042 00001B80 E8843B0100              	call malloc
  4043 00001B85 488B7D10                	mov rdi, ENV
  4044 00001B89 BE00000000              	mov rsi, 0
  4045 00001B8E BA01000000              	mov rdx, 1
  4046                                  .L_lambda_simple_env_loop_6cfd:	; ext_env[i + 1] <-- env[i]
  4047 00001B93 4883FE00                	cmp rsi, 0
  4048 00001B97 7410                    	je .L_lambda_simple_env_end_6cfd
  4049 00001B99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4050 00001B9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4051 00001BA1 48FFC6                  	inc rsi
  4052 00001BA4 48FFC2                  	inc rdx
  4053 00001BA7 EBEA                    	jmp .L_lambda_simple_env_loop_6cfd
  4054                                  .L_lambda_simple_env_end_6cfd:
  4055 00001BA9 5B                      	pop rbx
  4056 00001BAA BE00000000              	mov rsi, 0
  4057                                  .L_lambda_simple_params_loop_6cfd:	; copy params
  4058 00001BAF 4883FE00                	cmp rsi, 0
  4059 00001BB3 740E                    	je .L_lambda_simple_params_end_6cfd
  4060 00001BB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4061 00001BBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4062 00001BBE 48FFC6                  	inc rsi
  4063 00001BC1 EBEC                    	jmp .L_lambda_simple_params_loop_6cfd
  4064                                  .L_lambda_simple_params_end_6cfd:
  4065 00001BC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4066 00001BC6 4889C3                  	mov rbx, rax
  4067 00001BC9 58                      	pop rax
  4068 00001BCA C60004                  	mov byte [rax], T_closure
  4069 00001BCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4070 00001BD1 48C74009[DE1B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cfd
  4071 00001BD9 E99B000000              	jmp .L_lambda_simple_end_6cfd
  4072                                  .L_lambda_simple_code_6cfd:	; lambda-simple body
  4073 00001BDE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4074 00001BE4 740B                    	je .L_lambda_simple_arity_check_ok_6cfd
  4075 00001BE6 FF742410                	push qword [rsp + 8 * 2]
  4076 00001BEA 6A01                    	push 1
  4077 00001BEC E9D13A0100              	jmp L_error_incorrect_arity_simple
  4078                                  .L_lambda_simple_arity_check_ok_6cfd:
  4079 00001BF1 C8000000                	enter 0, 0
  4080                                  	; preparing a tail-call
  4081 00001BF5 488B4520                	mov rax, PARAM(0)	; param x
  4082 00001BF9 50                      	push rax
  4083 00001BFA 6A01                    	push 1	; arg count
  4084 00001BFC 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4085 00001C04 803805                  	cmp byte [rax], T_undefined
  4086 00001C07 0F84CF390100            	je L_error_fvar_undefined
  4087 00001C0D 803804                  	cmp byte [rax], T_closure
  4088 00001C10 0F854A3A0100            	jne L_error_non_closure
  4089 00001C16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4090 00001C19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4091 00001C1C 50                      	push rax
  4092 00001C1D 6A01                    	push 1	; arg count
  4093 00001C1F 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4094 00001C27 803805                  	cmp byte [rax], T_undefined
  4095 00001C2A 0F84AC390100            	je L_error_fvar_undefined
  4096 00001C30 803804                  	cmp byte [rax], T_closure
  4097 00001C33 0F85273A0100            	jne L_error_non_closure
  4098 00001C39 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4099                                  
  4100                                  	; recycling the current frame
  4101 00001C3C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4102 00001C3F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4103 00001C42 B905000000              	mov rcx, 1 + 4
  4104 00001C47 488B5D18                	mov rbx, COUNT
  4105 00001C4B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4106 00001C50 488D55F8                	lea rdx, [rbp - 8 * 1]
  4107                                  .L_tc_recycle_frame_loop_8ebb:
  4108 00001C54 4883F900                	cmp rcx, 0
  4109 00001C58 7413                    	je .L_tc_recycle_frame_done_8ebb
  4110 00001C5A 488B32                  	mov rsi, qword [rdx]
  4111 00001C5D 488933                  	mov qword [rbx], rsi
  4112 00001C60 48FFC9                  	dec rcx
  4113 00001C63 4883EB08                	sub rbx, 8 * 1
  4114 00001C67 4883EA08                	sub rdx, 8 * 1
  4115 00001C6B EBE7                    	jmp .L_tc_recycle_frame_loop_8ebb
  4116                                  .L_tc_recycle_frame_done_8ebb:
  4117 00001C6D 488D6308                	lea rsp, [rbx + 8 * 1]
  4118 00001C71 5D                      	pop rbp	; the proc will restore it!
  4119 00001C72 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4120 00001C75 C9                      	leave
  4121 00001C76 C21800                  	ret AND_KILL_FRAME(1)
  4122                                  .L_lambda_simple_end_6cfd:	; new closure is in rax
  4123 00001C79 48890425[B3130000]      	mov qword [free_var_91], rax
  4124 00001C81 48B8-                   	mov rax, sob_void
  4124 00001C83 [0000000000000000] 
  4125                                  
  4126 00001C8B 4889C7                  	mov rdi, rax
  4127 00001C8E E8883B0100              	call print_sexpr_if_not_void
  4128                                  
  4129 00001C93 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4130 00001C98 E86C3A0100              	call malloc
  4131 00001C9D 50                      	push rax
  4132 00001C9E BF00000000              	mov rdi, 8 * 0	; new rib
  4133 00001CA3 E8613A0100              	call malloc
  4134 00001CA8 50                      	push rax
  4135 00001CA9 BF08000000              	mov rdi, 8 * 1	; extended env
  4136 00001CAE E8563A0100              	call malloc
  4137 00001CB3 488B7D10                	mov rdi, ENV
  4138 00001CB7 BE00000000              	mov rsi, 0
  4139 00001CBC BA01000000              	mov rdx, 1
  4140                                  .L_lambda_simple_env_loop_6cfe:	; ext_env[i + 1] <-- env[i]
  4141 00001CC1 4883FE00                	cmp rsi, 0
  4142 00001CC5 7410                    	je .L_lambda_simple_env_end_6cfe
  4143 00001CC7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4144 00001CCB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4145 00001CCF 48FFC6                  	inc rsi
  4146 00001CD2 48FFC2                  	inc rdx
  4147 00001CD5 EBEA                    	jmp .L_lambda_simple_env_loop_6cfe
  4148                                  .L_lambda_simple_env_end_6cfe:
  4149 00001CD7 5B                      	pop rbx
  4150 00001CD8 BE00000000              	mov rsi, 0
  4151                                  .L_lambda_simple_params_loop_6cfe:	; copy params
  4152 00001CDD 4883FE00                	cmp rsi, 0
  4153 00001CE1 740E                    	je .L_lambda_simple_params_end_6cfe
  4154 00001CE3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4155 00001CE8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4156 00001CEC 48FFC6                  	inc rsi
  4157 00001CEF EBEC                    	jmp .L_lambda_simple_params_loop_6cfe
  4158                                  .L_lambda_simple_params_end_6cfe:
  4159 00001CF1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4160 00001CF4 4889C3                  	mov rbx, rax
  4161 00001CF7 58                      	pop rax
  4162 00001CF8 C60004                  	mov byte [rax], T_closure
  4163 00001CFB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4164 00001CFF 48C74009[0C1D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cfe
  4165 00001D07 E99B000000              	jmp .L_lambda_simple_end_6cfe
  4166                                  .L_lambda_simple_code_6cfe:	; lambda-simple body
  4167 00001D0C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4168 00001D12 740B                    	je .L_lambda_simple_arity_check_ok_6cfe
  4169 00001D14 FF742410                	push qword [rsp + 8 * 2]
  4170 00001D18 6A01                    	push 1
  4171 00001D1A E9A3390100              	jmp L_error_incorrect_arity_simple
  4172                                  .L_lambda_simple_arity_check_ok_6cfe:
  4173 00001D1F C8000000                	enter 0, 0
  4174                                  	; preparing a tail-call
  4175 00001D23 488B4520                	mov rax, PARAM(0)	; param x
  4176 00001D27 50                      	push rax
  4177 00001D28 6A01                    	push 1	; arg count
  4178 00001D2A 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4179 00001D32 803805                  	cmp byte [rax], T_undefined
  4180 00001D35 0F84A1380100            	je L_error_fvar_undefined
  4181 00001D3B 803804                  	cmp byte [rax], T_closure
  4182 00001D3E 0F851C390100            	jne L_error_non_closure
  4183 00001D44 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4184 00001D47 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4185 00001D4A 50                      	push rax
  4186 00001D4B 6A01                    	push 1	; arg count
  4187 00001D4D 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4188 00001D55 803805                  	cmp byte [rax], T_undefined
  4189 00001D58 0F847E380100            	je L_error_fvar_undefined
  4190 00001D5E 803804                  	cmp byte [rax], T_closure
  4191 00001D61 0F85F9380100            	jne L_error_non_closure
  4192 00001D67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4193                                  
  4194                                  	; recycling the current frame
  4195 00001D6A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4196 00001D6D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4197 00001D70 B905000000              	mov rcx, 1 + 4
  4198 00001D75 488B5D18                	mov rbx, COUNT
  4199 00001D79 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4200 00001D7E 488D55F8                	lea rdx, [rbp - 8 * 1]
  4201                                  .L_tc_recycle_frame_loop_8ebc:
  4202 00001D82 4883F900                	cmp rcx, 0
  4203 00001D86 7413                    	je .L_tc_recycle_frame_done_8ebc
  4204 00001D88 488B32                  	mov rsi, qword [rdx]
  4205 00001D8B 488933                  	mov qword [rbx], rsi
  4206 00001D8E 48FFC9                  	dec rcx
  4207 00001D91 4883EB08                	sub rbx, 8 * 1
  4208 00001D95 4883EA08                	sub rdx, 8 * 1
  4209 00001D99 EBE7                    	jmp .L_tc_recycle_frame_loop_8ebc
  4210                                  .L_tc_recycle_frame_done_8ebc:
  4211 00001D9B 488D6308                	lea rsp, [rbx + 8 * 1]
  4212 00001D9F 5D                      	pop rbp	; the proc will restore it!
  4213 00001DA0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4214 00001DA3 C9                      	leave
  4215 00001DA4 C21800                  	ret AND_KILL_FRAME(1)
  4216                                  .L_lambda_simple_end_6cfe:	; new closure is in rax
  4217 00001DA7 48890425[C4130000]      	mov qword [free_var_92], rax
  4218 00001DAF 48B8-                   	mov rax, sob_void
  4218 00001DB1 [0000000000000000] 
  4219                                  
  4220 00001DB9 4889C7                  	mov rdi, rax
  4221 00001DBC E85A3A0100              	call print_sexpr_if_not_void
  4222                                  
  4223 00001DC1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4224 00001DC6 E83E390100              	call malloc
  4225 00001DCB 50                      	push rax
  4226 00001DCC BF00000000              	mov rdi, 8 * 0	; new rib
  4227 00001DD1 E833390100              	call malloc
  4228 00001DD6 50                      	push rax
  4229 00001DD7 BF08000000              	mov rdi, 8 * 1	; extended env
  4230 00001DDC E828390100              	call malloc
  4231 00001DE1 488B7D10                	mov rdi, ENV
  4232 00001DE5 BE00000000              	mov rsi, 0
  4233 00001DEA BA01000000              	mov rdx, 1
  4234                                  .L_lambda_simple_env_loop_6cff:	; ext_env[i + 1] <-- env[i]
  4235 00001DEF 4883FE00                	cmp rsi, 0
  4236 00001DF3 7410                    	je .L_lambda_simple_env_end_6cff
  4237 00001DF5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4238 00001DF9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4239 00001DFD 48FFC6                  	inc rsi
  4240 00001E00 48FFC2                  	inc rdx
  4241 00001E03 EBEA                    	jmp .L_lambda_simple_env_loop_6cff
  4242                                  .L_lambda_simple_env_end_6cff:
  4243 00001E05 5B                      	pop rbx
  4244 00001E06 BE00000000              	mov rsi, 0
  4245                                  .L_lambda_simple_params_loop_6cff:	; copy params
  4246 00001E0B 4883FE00                	cmp rsi, 0
  4247 00001E0F 740E                    	je .L_lambda_simple_params_end_6cff
  4248 00001E11 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4249 00001E16 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4250 00001E1A 48FFC6                  	inc rsi
  4251 00001E1D EBEC                    	jmp .L_lambda_simple_params_loop_6cff
  4252                                  .L_lambda_simple_params_end_6cff:
  4253 00001E1F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4254 00001E22 4889C3                  	mov rbx, rax
  4255 00001E25 58                      	pop rax
  4256 00001E26 C60004                  	mov byte [rax], T_closure
  4257 00001E29 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4258 00001E2D 48C74009[3A1E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6cff
  4259 00001E35 E99B000000              	jmp .L_lambda_simple_end_6cff
  4260                                  .L_lambda_simple_code_6cff:	; lambda-simple body
  4261 00001E3A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4262 00001E40 740B                    	je .L_lambda_simple_arity_check_ok_6cff
  4263 00001E42 FF742410                	push qword [rsp + 8 * 2]
  4264 00001E46 6A01                    	push 1
  4265 00001E48 E975380100              	jmp L_error_incorrect_arity_simple
  4266                                  .L_lambda_simple_arity_check_ok_6cff:
  4267 00001E4D C8000000                	enter 0, 0
  4268                                  	; preparing a tail-call
  4269 00001E51 488B4520                	mov rax, PARAM(0)	; param x
  4270 00001E55 50                      	push rax
  4271 00001E56 6A01                    	push 1	; arg count
  4272 00001E58 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  4273 00001E60 803805                  	cmp byte [rax], T_undefined
  4274 00001E63 0F8473370100            	je L_error_fvar_undefined
  4275 00001E69 803804                  	cmp byte [rax], T_closure
  4276 00001E6C 0F85EE370100            	jne L_error_non_closure
  4277 00001E72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4278 00001E75 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4279 00001E78 50                      	push rax
  4280 00001E79 6A01                    	push 1	; arg count
  4281 00001E7B 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4282 00001E83 803805                  	cmp byte [rax], T_undefined
  4283 00001E86 0F8450370100            	je L_error_fvar_undefined
  4284 00001E8C 803804                  	cmp byte [rax], T_closure
  4285 00001E8F 0F85CB370100            	jne L_error_non_closure
  4286 00001E95 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4287                                  
  4288                                  	; recycling the current frame
  4289 00001E98 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4290 00001E9B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4291 00001E9E B905000000              	mov rcx, 1 + 4
  4292 00001EA3 488B5D18                	mov rbx, COUNT
  4293 00001EA7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4294 00001EAC 488D55F8                	lea rdx, [rbp - 8 * 1]
  4295                                  .L_tc_recycle_frame_loop_8ebd:
  4296 00001EB0 4883F900                	cmp rcx, 0
  4297 00001EB4 7413                    	je .L_tc_recycle_frame_done_8ebd
  4298 00001EB6 488B32                  	mov rsi, qword [rdx]
  4299 00001EB9 488933                  	mov qword [rbx], rsi
  4300 00001EBC 48FFC9                  	dec rcx
  4301 00001EBF 4883EB08                	sub rbx, 8 * 1
  4302 00001EC3 4883EA08                	sub rdx, 8 * 1
  4303 00001EC7 EBE7                    	jmp .L_tc_recycle_frame_loop_8ebd
  4304                                  .L_tc_recycle_frame_done_8ebd:
  4305 00001EC9 488D6308                	lea rsp, [rbx + 8 * 1]
  4306 00001ECD 5D                      	pop rbp	; the proc will restore it!
  4307 00001ECE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4308 00001ED1 C9                      	leave
  4309 00001ED2 C21800                  	ret AND_KILL_FRAME(1)
  4310                                  .L_lambda_simple_end_6cff:	; new closure is in rax
  4311 00001ED5 48890425[D5130000]      	mov qword [free_var_93], rax
  4312 00001EDD 48B8-                   	mov rax, sob_void
  4312 00001EDF [0000000000000000] 
  4313                                  
  4314 00001EE7 4889C7                  	mov rdi, rax
  4315 00001EEA E82C390100              	call print_sexpr_if_not_void
  4316                                  
  4317 00001EEF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4318 00001EF4 E810380100              	call malloc
  4319 00001EF9 50                      	push rax
  4320 00001EFA BF00000000              	mov rdi, 8 * 0	; new rib
  4321 00001EFF E805380100              	call malloc
  4322 00001F04 50                      	push rax
  4323 00001F05 BF08000000              	mov rdi, 8 * 1	; extended env
  4324 00001F0A E8FA370100              	call malloc
  4325 00001F0F 488B7D10                	mov rdi, ENV
  4326 00001F13 BE00000000              	mov rsi, 0
  4327 00001F18 BA01000000              	mov rdx, 1
  4328                                  .L_lambda_simple_env_loop_6d00:	; ext_env[i + 1] <-- env[i]
  4329 00001F1D 4883FE00                	cmp rsi, 0
  4330 00001F21 7410                    	je .L_lambda_simple_env_end_6d00
  4331 00001F23 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4332 00001F27 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4333 00001F2B 48FFC6                  	inc rsi
  4334 00001F2E 48FFC2                  	inc rdx
  4335 00001F31 EBEA                    	jmp .L_lambda_simple_env_loop_6d00
  4336                                  .L_lambda_simple_env_end_6d00:
  4337 00001F33 5B                      	pop rbx
  4338 00001F34 BE00000000              	mov rsi, 0
  4339                                  .L_lambda_simple_params_loop_6d00:	; copy params
  4340 00001F39 4883FE00                	cmp rsi, 0
  4341 00001F3D 740E                    	je .L_lambda_simple_params_end_6d00
  4342 00001F3F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4343 00001F44 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4344 00001F48 48FFC6                  	inc rsi
  4345 00001F4B EBEC                    	jmp .L_lambda_simple_params_loop_6d00
  4346                                  .L_lambda_simple_params_end_6d00:
  4347 00001F4D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4348 00001F50 4889C3                  	mov rbx, rax
  4349 00001F53 58                      	pop rax
  4350 00001F54 C60004                  	mov byte [rax], T_closure
  4351 00001F57 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4352 00001F5B 48C74009[681F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d00
  4353 00001F63 E99B000000              	jmp .L_lambda_simple_end_6d00
  4354                                  .L_lambda_simple_code_6d00:	; lambda-simple body
  4355 00001F68 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4356 00001F6E 740B                    	je .L_lambda_simple_arity_check_ok_6d00
  4357 00001F70 FF742410                	push qword [rsp + 8 * 2]
  4358 00001F74 6A01                    	push 1
  4359 00001F76 E947370100              	jmp L_error_incorrect_arity_simple
  4360                                  .L_lambda_simple_arity_check_ok_6d00:
  4361 00001F7B C8000000                	enter 0, 0
  4362                                  	; preparing a tail-call
  4363 00001F7F 488B4520                	mov rax, PARAM(0)	; param x
  4364 00001F83 50                      	push rax
  4365 00001F84 6A01                    	push 1	; arg count
  4366 00001F86 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  4367 00001F8E 803805                  	cmp byte [rax], T_undefined
  4368 00001F91 0F8445360100            	je L_error_fvar_undefined
  4369 00001F97 803804                  	cmp byte [rax], T_closure
  4370 00001F9A 0F85C0360100            	jne L_error_non_closure
  4371 00001FA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4372 00001FA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4373 00001FA6 50                      	push rax
  4374 00001FA7 6A01                    	push 1	; arg count
  4375 00001FA9 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4376 00001FB1 803805                  	cmp byte [rax], T_undefined
  4377 00001FB4 0F8422360100            	je L_error_fvar_undefined
  4378 00001FBA 803804                  	cmp byte [rax], T_closure
  4379 00001FBD 0F859D360100            	jne L_error_non_closure
  4380 00001FC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4381                                  
  4382                                  	; recycling the current frame
  4383 00001FC6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4384 00001FC9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4385 00001FCC B905000000              	mov rcx, 1 + 4
  4386 00001FD1 488B5D18                	mov rbx, COUNT
  4387 00001FD5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4388 00001FDA 488D55F8                	lea rdx, [rbp - 8 * 1]
  4389                                  .L_tc_recycle_frame_loop_8ebe:
  4390 00001FDE 4883F900                	cmp rcx, 0
  4391 00001FE2 7413                    	je .L_tc_recycle_frame_done_8ebe
  4392 00001FE4 488B32                  	mov rsi, qword [rdx]
  4393 00001FE7 488933                  	mov qword [rbx], rsi
  4394 00001FEA 48FFC9                  	dec rcx
  4395 00001FED 4883EB08                	sub rbx, 8 * 1
  4396 00001FF1 4883EA08                	sub rdx, 8 * 1
  4397 00001FF5 EBE7                    	jmp .L_tc_recycle_frame_loop_8ebe
  4398                                  .L_tc_recycle_frame_done_8ebe:
  4399 00001FF7 488D6308                	lea rsp, [rbx + 8 * 1]
  4400 00001FFB 5D                      	pop rbp	; the proc will restore it!
  4401 00001FFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4402 00001FFF C9                      	leave
  4403 00002000 C21800                  	ret AND_KILL_FRAME(1)
  4404                                  .L_lambda_simple_end_6d00:	; new closure is in rax
  4405 00002003 48890425[E6130000]      	mov qword [free_var_94], rax
  4406 0000200B 48B8-                   	mov rax, sob_void
  4406 0000200D [0000000000000000] 
  4407                                  
  4408 00002015 4889C7                  	mov rdi, rax
  4409 00002018 E8FE370100              	call print_sexpr_if_not_void
  4410                                  
  4411 0000201D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4412 00002022 E8E2360100              	call malloc
  4413 00002027 50                      	push rax
  4414 00002028 BF00000000              	mov rdi, 8 * 0	; new rib
  4415 0000202D E8D7360100              	call malloc
  4416 00002032 50                      	push rax
  4417 00002033 BF08000000              	mov rdi, 8 * 1	; extended env
  4418 00002038 E8CC360100              	call malloc
  4419 0000203D 488B7D10                	mov rdi, ENV
  4420 00002041 BE00000000              	mov rsi, 0
  4421 00002046 BA01000000              	mov rdx, 1
  4422                                  .L_lambda_simple_env_loop_6d01:	; ext_env[i + 1] <-- env[i]
  4423 0000204B 4883FE00                	cmp rsi, 0
  4424 0000204F 7410                    	je .L_lambda_simple_env_end_6d01
  4425 00002051 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4426 00002055 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4427 00002059 48FFC6                  	inc rsi
  4428 0000205C 48FFC2                  	inc rdx
  4429 0000205F EBEA                    	jmp .L_lambda_simple_env_loop_6d01
  4430                                  .L_lambda_simple_env_end_6d01:
  4431 00002061 5B                      	pop rbx
  4432 00002062 BE00000000              	mov rsi, 0
  4433                                  .L_lambda_simple_params_loop_6d01:	; copy params
  4434 00002067 4883FE00                	cmp rsi, 0
  4435 0000206B 740E                    	je .L_lambda_simple_params_end_6d01
  4436 0000206D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4437 00002072 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4438 00002076 48FFC6                  	inc rsi
  4439 00002079 EBEC                    	jmp .L_lambda_simple_params_loop_6d01
  4440                                  .L_lambda_simple_params_end_6d01:
  4441 0000207B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4442 0000207E 4889C3                  	mov rbx, rax
  4443 00002081 58                      	pop rax
  4444 00002082 C60004                  	mov byte [rax], T_closure
  4445 00002085 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4446 00002089 48C74009[96200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d01
  4447 00002091 E99B000000              	jmp .L_lambda_simple_end_6d01
  4448                                  .L_lambda_simple_code_6d01:	; lambda-simple body
  4449 00002096 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4450 0000209C 740B                    	je .L_lambda_simple_arity_check_ok_6d01
  4451 0000209E FF742410                	push qword [rsp + 8 * 2]
  4452 000020A2 6A01                    	push 1
  4453 000020A4 E919360100              	jmp L_error_incorrect_arity_simple
  4454                                  .L_lambda_simple_arity_check_ok_6d01:
  4455 000020A9 C8000000                	enter 0, 0
  4456                                  	; preparing a tail-call
  4457 000020AD 488B4520                	mov rax, PARAM(0)	; param x
  4458 000020B1 50                      	push rax
  4459 000020B2 6A01                    	push 1	; arg count
  4460 000020B4 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4461 000020BC 803805                  	cmp byte [rax], T_undefined
  4462 000020BF 0F8417350100            	je L_error_fvar_undefined
  4463 000020C5 803804                  	cmp byte [rax], T_closure
  4464 000020C8 0F8592350100            	jne L_error_non_closure
  4465 000020CE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4466 000020D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4467 000020D4 50                      	push rax
  4468 000020D5 6A01                    	push 1	; arg count
  4469 000020D7 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4470 000020DF 803805                  	cmp byte [rax], T_undefined
  4471 000020E2 0F84F4340100            	je L_error_fvar_undefined
  4472 000020E8 803804                  	cmp byte [rax], T_closure
  4473 000020EB 0F856F350100            	jne L_error_non_closure
  4474 000020F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4475                                  
  4476                                  	; recycling the current frame
  4477 000020F4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4478 000020F7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4479 000020FA B905000000              	mov rcx, 1 + 4
  4480 000020FF 488B5D18                	mov rbx, COUNT
  4481 00002103 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4482 00002108 488D55F8                	lea rdx, [rbp - 8 * 1]
  4483                                  .L_tc_recycle_frame_loop_8ebf:
  4484 0000210C 4883F900                	cmp rcx, 0
  4485 00002110 7413                    	je .L_tc_recycle_frame_done_8ebf
  4486 00002112 488B32                  	mov rsi, qword [rdx]
  4487 00002115 488933                  	mov qword [rbx], rsi
  4488 00002118 48FFC9                  	dec rcx
  4489 0000211B 4883EB08                	sub rbx, 8 * 1
  4490 0000211F 4883EA08                	sub rdx, 8 * 1
  4491 00002123 EBE7                    	jmp .L_tc_recycle_frame_loop_8ebf
  4492                                  .L_tc_recycle_frame_done_8ebf:
  4493 00002125 488D6308                	lea rsp, [rbx + 8 * 1]
  4494 00002129 5D                      	pop rbp	; the proc will restore it!
  4495 0000212A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4496 0000212D C9                      	leave
  4497 0000212E C21800                  	ret AND_KILL_FRAME(1)
  4498                                  .L_lambda_simple_end_6d01:	; new closure is in rax
  4499 00002131 48890425[F7130000]      	mov qword [free_var_95], rax
  4500 00002139 48B8-                   	mov rax, sob_void
  4500 0000213B [0000000000000000] 
  4501                                  
  4502 00002143 4889C7                  	mov rdi, rax
  4503 00002146 E8D0360100              	call print_sexpr_if_not_void
  4504                                  
  4505 0000214B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4506 00002150 E8B4350100              	call malloc
  4507 00002155 50                      	push rax
  4508 00002156 BF00000000              	mov rdi, 8 * 0	; new rib
  4509 0000215B E8A9350100              	call malloc
  4510 00002160 50                      	push rax
  4511 00002161 BF08000000              	mov rdi, 8 * 1	; extended env
  4512 00002166 E89E350100              	call malloc
  4513 0000216B 488B7D10                	mov rdi, ENV
  4514 0000216F BE00000000              	mov rsi, 0
  4515 00002174 BA01000000              	mov rdx, 1
  4516                                  .L_lambda_simple_env_loop_6d02:	; ext_env[i + 1] <-- env[i]
  4517 00002179 4883FE00                	cmp rsi, 0
  4518 0000217D 7410                    	je .L_lambda_simple_env_end_6d02
  4519 0000217F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4520 00002183 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4521 00002187 48FFC6                  	inc rsi
  4522 0000218A 48FFC2                  	inc rdx
  4523 0000218D EBEA                    	jmp .L_lambda_simple_env_loop_6d02
  4524                                  .L_lambda_simple_env_end_6d02:
  4525 0000218F 5B                      	pop rbx
  4526 00002190 BE00000000              	mov rsi, 0
  4527                                  .L_lambda_simple_params_loop_6d02:	; copy params
  4528 00002195 4883FE00                	cmp rsi, 0
  4529 00002199 740E                    	je .L_lambda_simple_params_end_6d02
  4530 0000219B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4531 000021A0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4532 000021A4 48FFC6                  	inc rsi
  4533 000021A7 EBEC                    	jmp .L_lambda_simple_params_loop_6d02
  4534                                  .L_lambda_simple_params_end_6d02:
  4535 000021A9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4536 000021AC 4889C3                  	mov rbx, rax
  4537 000021AF 58                      	pop rax
  4538 000021B0 C60004                  	mov byte [rax], T_closure
  4539 000021B3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4540 000021B7 48C74009[C4210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d02
  4541 000021BF E99B000000              	jmp .L_lambda_simple_end_6d02
  4542                                  .L_lambda_simple_code_6d02:	; lambda-simple body
  4543 000021C4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4544 000021CA 740B                    	je .L_lambda_simple_arity_check_ok_6d02
  4545 000021CC FF742410                	push qword [rsp + 8 * 2]
  4546 000021D0 6A01                    	push 1
  4547 000021D2 E9EB340100              	jmp L_error_incorrect_arity_simple
  4548                                  .L_lambda_simple_arity_check_ok_6d02:
  4549 000021D7 C8000000                	enter 0, 0
  4550                                  	; preparing a tail-call
  4551 000021DB 488B4520                	mov rax, PARAM(0)	; param x
  4552 000021DF 50                      	push rax
  4553 000021E0 6A01                    	push 1	; arg count
  4554 000021E2 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4555 000021EA 803805                  	cmp byte [rax], T_undefined
  4556 000021ED 0F84E9330100            	je L_error_fvar_undefined
  4557 000021F3 803804                  	cmp byte [rax], T_closure
  4558 000021F6 0F8564340100            	jne L_error_non_closure
  4559 000021FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  4560 000021FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  4561 00002202 50                      	push rax
  4562 00002203 6A01                    	push 1	; arg count
  4563 00002205 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4564 0000220D 803805                  	cmp byte [rax], T_undefined
  4565 00002210 0F84C6330100            	je L_error_fvar_undefined
  4566 00002216 803804                  	cmp byte [rax], T_closure
  4567 00002219 0F8541340100            	jne L_error_non_closure
  4568 0000221F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4569                                  
  4570                                  	; recycling the current frame
  4571 00002222 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4572 00002225 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4573 00002228 B905000000              	mov rcx, 1 + 4
  4574 0000222D 488B5D18                	mov rbx, COUNT
  4575 00002231 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4576 00002236 488D55F8                	lea rdx, [rbp - 8 * 1]
  4577                                  .L_tc_recycle_frame_loop_8ec0:
  4578 0000223A 4883F900                	cmp rcx, 0
  4579 0000223E 7413                    	je .L_tc_recycle_frame_done_8ec0
  4580 00002240 488B32                  	mov rsi, qword [rdx]
  4581 00002243 488933                  	mov qword [rbx], rsi
  4582 00002246 48FFC9                  	dec rcx
  4583 00002249 4883EB08                	sub rbx, 8 * 1
  4584 0000224D 4883EA08                	sub rdx, 8 * 1
  4585 00002251 EBE7                    	jmp .L_tc_recycle_frame_loop_8ec0
  4586                                  .L_tc_recycle_frame_done_8ec0:
  4587 00002253 488D6308                	lea rsp, [rbx + 8 * 1]
  4588 00002257 5D                      	pop rbp	; the proc will restore it!
  4589 00002258 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4590 0000225B C9                      	leave
  4591 0000225C C21800                  	ret AND_KILL_FRAME(1)
  4592                                  .L_lambda_simple_end_6d02:	; new closure is in rax
  4593 0000225F 48890425[08140000]      	mov qword [free_var_96], rax
  4594 00002267 48B8-                   	mov rax, sob_void
  4594 00002269 [0000000000000000] 
  4595                                  
  4596 00002271 4889C7                  	mov rdi, rax
  4597 00002274 E8A2350100              	call print_sexpr_if_not_void
  4598                                  
  4599 00002279 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4600 0000227E E886340100              	call malloc
  4601 00002283 50                      	push rax
  4602 00002284 BF00000000              	mov rdi, 8 * 0	; new rib
  4603 00002289 E87B340100              	call malloc
  4604 0000228E 50                      	push rax
  4605 0000228F BF08000000              	mov rdi, 8 * 1	; extended env
  4606 00002294 E870340100              	call malloc
  4607 00002299 488B7D10                	mov rdi, ENV
  4608 0000229D BE00000000              	mov rsi, 0
  4609 000022A2 BA01000000              	mov rdx, 1
  4610                                  .L_lambda_simple_env_loop_6d03:	; ext_env[i + 1] <-- env[i]
  4611 000022A7 4883FE00                	cmp rsi, 0
  4612 000022AB 7410                    	je .L_lambda_simple_env_end_6d03
  4613 000022AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4614 000022B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4615 000022B5 48FFC6                  	inc rsi
  4616 000022B8 48FFC2                  	inc rdx
  4617 000022BB EBEA                    	jmp .L_lambda_simple_env_loop_6d03
  4618                                  .L_lambda_simple_env_end_6d03:
  4619 000022BD 5B                      	pop rbx
  4620 000022BE BE00000000              	mov rsi, 0
  4621                                  .L_lambda_simple_params_loop_6d03:	; copy params
  4622 000022C3 4883FE00                	cmp rsi, 0
  4623 000022C7 740E                    	je .L_lambda_simple_params_end_6d03
  4624 000022C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4625 000022CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4626 000022D2 48FFC6                  	inc rsi
  4627 000022D5 EBEC                    	jmp .L_lambda_simple_params_loop_6d03
  4628                                  .L_lambda_simple_params_end_6d03:
  4629 000022D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4630 000022DA 4889C3                  	mov rbx, rax
  4631 000022DD 58                      	pop rax
  4632 000022DE C60004                  	mov byte [rax], T_closure
  4633 000022E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4634 000022E5 48C74009[F2220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d03
  4635 000022ED E99B000000              	jmp .L_lambda_simple_end_6d03
  4636                                  .L_lambda_simple_code_6d03:	; lambda-simple body
  4637 000022F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4638 000022F8 740B                    	je .L_lambda_simple_arity_check_ok_6d03
  4639 000022FA FF742410                	push qword [rsp + 8 * 2]
  4640 000022FE 6A01                    	push 1
  4641 00002300 E9BD330100              	jmp L_error_incorrect_arity_simple
  4642                                  .L_lambda_simple_arity_check_ok_6d03:
  4643 00002305 C8000000                	enter 0, 0
  4644                                  	; preparing a tail-call
  4645 00002309 488B4520                	mov rax, PARAM(0)	; param x
  4646 0000230D 50                      	push rax
  4647 0000230E 6A01                    	push 1	; arg count
  4648 00002310 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  4649 00002318 803805                  	cmp byte [rax], T_undefined
  4650 0000231B 0F84BB320100            	je L_error_fvar_undefined
  4651 00002321 803804                  	cmp byte [rax], T_closure
  4652 00002324 0F8536330100            	jne L_error_non_closure
  4653 0000232A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4654 0000232D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4655 00002330 50                      	push rax
  4656 00002331 6A01                    	push 1	; arg count
  4657 00002333 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4658 0000233B 803805                  	cmp byte [rax], T_undefined
  4659 0000233E 0F8498320100            	je L_error_fvar_undefined
  4660 00002344 803804                  	cmp byte [rax], T_closure
  4661 00002347 0F8513330100            	jne L_error_non_closure
  4662 0000234D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4663                                  
  4664                                  	; recycling the current frame
  4665 00002350 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4666 00002353 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4667 00002356 B905000000              	mov rcx, 1 + 4
  4668 0000235B 488B5D18                	mov rbx, COUNT
  4669 0000235F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4670 00002364 488D55F8                	lea rdx, [rbp - 8 * 1]
  4671                                  .L_tc_recycle_frame_loop_8ec1:
  4672 00002368 4883F900                	cmp rcx, 0
  4673 0000236C 7413                    	je .L_tc_recycle_frame_done_8ec1
  4674 0000236E 488B32                  	mov rsi, qword [rdx]
  4675 00002371 488933                  	mov qword [rbx], rsi
  4676 00002374 48FFC9                  	dec rcx
  4677 00002377 4883EB08                	sub rbx, 8 * 1
  4678 0000237B 4883EA08                	sub rdx, 8 * 1
  4679 0000237F EBE7                    	jmp .L_tc_recycle_frame_loop_8ec1
  4680                                  .L_tc_recycle_frame_done_8ec1:
  4681 00002381 488D6308                	lea rsp, [rbx + 8 * 1]
  4682 00002385 5D                      	pop rbp	; the proc will restore it!
  4683 00002386 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4684 00002389 C9                      	leave
  4685 0000238A C21800                  	ret AND_KILL_FRAME(1)
  4686                                  .L_lambda_simple_end_6d03:	; new closure is in rax
  4687 0000238D 48890425[19140000]      	mov qword [free_var_97], rax
  4688 00002395 48B8-                   	mov rax, sob_void
  4688 00002397 [0000000000000000] 
  4689                                  
  4690 0000239F 4889C7                  	mov rdi, rax
  4691 000023A2 E874340100              	call print_sexpr_if_not_void
  4692                                  
  4693 000023A7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4694 000023AC E858330100              	call malloc
  4695 000023B1 50                      	push rax
  4696 000023B2 BF00000000              	mov rdi, 8 * 0	; new rib
  4697 000023B7 E84D330100              	call malloc
  4698 000023BC 50                      	push rax
  4699 000023BD BF08000000              	mov rdi, 8 * 1	; extended env
  4700 000023C2 E842330100              	call malloc
  4701 000023C7 488B7D10                	mov rdi, ENV
  4702 000023CB BE00000000              	mov rsi, 0
  4703 000023D0 BA01000000              	mov rdx, 1
  4704                                  .L_lambda_simple_env_loop_6d04:	; ext_env[i + 1] <-- env[i]
  4705 000023D5 4883FE00                	cmp rsi, 0
  4706 000023D9 7410                    	je .L_lambda_simple_env_end_6d04
  4707 000023DB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4708 000023DF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4709 000023E3 48FFC6                  	inc rsi
  4710 000023E6 48FFC2                  	inc rdx
  4711 000023E9 EBEA                    	jmp .L_lambda_simple_env_loop_6d04
  4712                                  .L_lambda_simple_env_end_6d04:
  4713 000023EB 5B                      	pop rbx
  4714 000023EC BE00000000              	mov rsi, 0
  4715                                  .L_lambda_simple_params_loop_6d04:	; copy params
  4716 000023F1 4883FE00                	cmp rsi, 0
  4717 000023F5 740E                    	je .L_lambda_simple_params_end_6d04
  4718 000023F7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4719 000023FC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4720 00002400 48FFC6                  	inc rsi
  4721 00002403 EBEC                    	jmp .L_lambda_simple_params_loop_6d04
  4722                                  .L_lambda_simple_params_end_6d04:
  4723 00002405 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4724 00002408 4889C3                  	mov rbx, rax
  4725 0000240B 58                      	pop rax
  4726 0000240C C60004                  	mov byte [rax], T_closure
  4727 0000240F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4728 00002413 48C74009[20240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d04
  4729 0000241B E99B000000              	jmp .L_lambda_simple_end_6d04
  4730                                  .L_lambda_simple_code_6d04:	; lambda-simple body
  4731 00002420 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4732 00002426 740B                    	je .L_lambda_simple_arity_check_ok_6d04
  4733 00002428 FF742410                	push qword [rsp + 8 * 2]
  4734 0000242C 6A01                    	push 1
  4735 0000242E E98F320100              	jmp L_error_incorrect_arity_simple
  4736                                  .L_lambda_simple_arity_check_ok_6d04:
  4737 00002433 C8000000                	enter 0, 0
  4738                                  	; preparing a tail-call
  4739 00002437 488B4520                	mov rax, PARAM(0)	; param x
  4740 0000243B 50                      	push rax
  4741 0000243C 6A01                    	push 1	; arg count
  4742 0000243E 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
  4743 00002446 803805                  	cmp byte [rax], T_undefined
  4744 00002449 0F848D310100            	je L_error_fvar_undefined
  4745 0000244F 803804                  	cmp byte [rax], T_closure
  4746 00002452 0F8508320100            	jne L_error_non_closure
  4747 00002458 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4748 0000245B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4749 0000245E 50                      	push rax
  4750 0000245F 6A01                    	push 1	; arg count
  4751 00002461 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  4752 00002469 803805                  	cmp byte [rax], T_undefined
  4753 0000246C 0F846A310100            	je L_error_fvar_undefined
  4754 00002472 803804                  	cmp byte [rax], T_closure
  4755 00002475 0F85E5310100            	jne L_error_non_closure
  4756 0000247B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4757                                  
  4758                                  	; recycling the current frame
  4759 0000247E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4760 00002481 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4761 00002484 B905000000              	mov rcx, 1 + 4
  4762 00002489 488B5D18                	mov rbx, COUNT
  4763 0000248D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4764 00002492 488D55F8                	lea rdx, [rbp - 8 * 1]
  4765                                  .L_tc_recycle_frame_loop_8ec2:
  4766 00002496 4883F900                	cmp rcx, 0
  4767 0000249A 7413                    	je .L_tc_recycle_frame_done_8ec2
  4768 0000249C 488B32                  	mov rsi, qword [rdx]
  4769 0000249F 488933                  	mov qword [rbx], rsi
  4770 000024A2 48FFC9                  	dec rcx
  4771 000024A5 4883EB08                	sub rbx, 8 * 1
  4772 000024A9 4883EA08                	sub rdx, 8 * 1
  4773 000024AD EBE7                    	jmp .L_tc_recycle_frame_loop_8ec2
  4774                                  .L_tc_recycle_frame_done_8ec2:
  4775 000024AF 488D6308                	lea rsp, [rbx + 8 * 1]
  4776 000024B3 5D                      	pop rbp	; the proc will restore it!
  4777 000024B4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4778 000024B7 C9                      	leave
  4779 000024B8 C21800                  	ret AND_KILL_FRAME(1)
  4780                                  .L_lambda_simple_end_6d04:	; new closure is in rax
  4781 000024BB 48890425[2A140000]      	mov qword [free_var_98], rax
  4782 000024C3 48B8-                   	mov rax, sob_void
  4782 000024C5 [0000000000000000] 
  4783                                  
  4784 000024CD 4889C7                  	mov rdi, rax
  4785 000024D0 E846330100              	call print_sexpr_if_not_void
  4786                                  
  4787 000024D5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4788 000024DA E82A320100              	call malloc
  4789 000024DF 50                      	push rax
  4790 000024E0 BF00000000              	mov rdi, 8 * 0	; new rib
  4791 000024E5 E81F320100              	call malloc
  4792 000024EA 50                      	push rax
  4793 000024EB BF08000000              	mov rdi, 8 * 1	; extended env
  4794 000024F0 E814320100              	call malloc
  4795 000024F5 488B7D10                	mov rdi, ENV
  4796 000024F9 BE00000000              	mov rsi, 0
  4797 000024FE BA01000000              	mov rdx, 1
  4798                                  .L_lambda_simple_env_loop_6d05:	; ext_env[i + 1] <-- env[i]
  4799 00002503 4883FE00                	cmp rsi, 0
  4800 00002507 7410                    	je .L_lambda_simple_env_end_6d05
  4801 00002509 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4802 0000250D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4803 00002511 48FFC6                  	inc rsi
  4804 00002514 48FFC2                  	inc rdx
  4805 00002517 EBEA                    	jmp .L_lambda_simple_env_loop_6d05
  4806                                  .L_lambda_simple_env_end_6d05:
  4807 00002519 5B                      	pop rbx
  4808 0000251A BE00000000              	mov rsi, 0
  4809                                  .L_lambda_simple_params_loop_6d05:	; copy params
  4810 0000251F 4883FE00                	cmp rsi, 0
  4811 00002523 740E                    	je .L_lambda_simple_params_end_6d05
  4812 00002525 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4813 0000252A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4814 0000252E 48FFC6                  	inc rsi
  4815 00002531 EBEC                    	jmp .L_lambda_simple_params_loop_6d05
  4816                                  .L_lambda_simple_params_end_6d05:
  4817 00002533 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4818 00002536 4889C3                  	mov rbx, rax
  4819 00002539 58                      	pop rax
  4820 0000253A C60004                  	mov byte [rax], T_closure
  4821 0000253D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4822 00002541 48C74009[4E250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d05
  4823 00002549 E99B000000              	jmp .L_lambda_simple_end_6d05
  4824                                  .L_lambda_simple_code_6d05:	; lambda-simple body
  4825 0000254E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4826 00002554 740B                    	je .L_lambda_simple_arity_check_ok_6d05
  4827 00002556 FF742410                	push qword [rsp + 8 * 2]
  4828 0000255A 6A01                    	push 1
  4829 0000255C E961310100              	jmp L_error_incorrect_arity_simple
  4830                                  .L_lambda_simple_arity_check_ok_6d05:
  4831 00002561 C8000000                	enter 0, 0
  4832                                  	; preparing a tail-call
  4833 00002565 488B4520                	mov rax, PARAM(0)	; param x
  4834 00002569 50                      	push rax
  4835 0000256A 6A01                    	push 1	; arg count
  4836 0000256C 488B0425[A3120000]      	mov rax, qword [free_var_75]	; free var cadr
  4837 00002574 803805                  	cmp byte [rax], T_undefined
  4838 00002577 0F845F300100            	je L_error_fvar_undefined
  4839 0000257D 803804                  	cmp byte [rax], T_closure
  4840 00002580 0F85DA300100            	jne L_error_non_closure
  4841 00002586 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4842 00002589 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4843 0000258C 50                      	push rax
  4844 0000258D 6A01                    	push 1	; arg count
  4845 0000258F 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  4846 00002597 803805                  	cmp byte [rax], T_undefined
  4847 0000259A 0F843C300100            	je L_error_fvar_undefined
  4848 000025A0 803804                  	cmp byte [rax], T_closure
  4849 000025A3 0F85B7300100            	jne L_error_non_closure
  4850 000025A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4851                                  
  4852                                  	; recycling the current frame
  4853 000025AC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4854 000025AF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4855 000025B2 B905000000              	mov rcx, 1 + 4
  4856 000025B7 488B5D18                	mov rbx, COUNT
  4857 000025BB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4858 000025C0 488D55F8                	lea rdx, [rbp - 8 * 1]
  4859                                  .L_tc_recycle_frame_loop_8ec3:
  4860 000025C4 4883F900                	cmp rcx, 0
  4861 000025C8 7413                    	je .L_tc_recycle_frame_done_8ec3
  4862 000025CA 488B32                  	mov rsi, qword [rdx]
  4863 000025CD 488933                  	mov qword [rbx], rsi
  4864 000025D0 48FFC9                  	dec rcx
  4865 000025D3 4883EB08                	sub rbx, 8 * 1
  4866 000025D7 4883EA08                	sub rdx, 8 * 1
  4867 000025DB EBE7                    	jmp .L_tc_recycle_frame_loop_8ec3
  4868                                  .L_tc_recycle_frame_done_8ec3:
  4869 000025DD 488D6308                	lea rsp, [rbx + 8 * 1]
  4870 000025E1 5D                      	pop rbp	; the proc will restore it!
  4871 000025E2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4872 000025E5 C9                      	leave
  4873 000025E6 C21800                  	ret AND_KILL_FRAME(1)
  4874                                  .L_lambda_simple_end_6d05:	; new closure is in rax
  4875 000025E9 48890425[3B140000]      	mov qword [free_var_99], rax
  4876 000025F1 48B8-                   	mov rax, sob_void
  4876 000025F3 [0000000000000000] 
  4877                                  
  4878 000025FB 4889C7                  	mov rdi, rax
  4879 000025FE E818320100              	call print_sexpr_if_not_void
  4880                                  
  4881 00002603 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4882 00002608 E8FC300100              	call malloc
  4883 0000260D 50                      	push rax
  4884 0000260E BF00000000              	mov rdi, 8 * 0	; new rib
  4885 00002613 E8F1300100              	call malloc
  4886 00002618 50                      	push rax
  4887 00002619 BF08000000              	mov rdi, 8 * 1	; extended env
  4888 0000261E E8E6300100              	call malloc
  4889 00002623 488B7D10                	mov rdi, ENV
  4890 00002627 BE00000000              	mov rsi, 0
  4891 0000262C BA01000000              	mov rdx, 1
  4892                                  .L_lambda_simple_env_loop_6d06:	; ext_env[i + 1] <-- env[i]
  4893 00002631 4883FE00                	cmp rsi, 0
  4894 00002635 7410                    	je .L_lambda_simple_env_end_6d06
  4895 00002637 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4896 0000263B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4897 0000263F 48FFC6                  	inc rsi
  4898 00002642 48FFC2                  	inc rdx
  4899 00002645 EBEA                    	jmp .L_lambda_simple_env_loop_6d06
  4900                                  .L_lambda_simple_env_end_6d06:
  4901 00002647 5B                      	pop rbx
  4902 00002648 BE00000000              	mov rsi, 0
  4903                                  .L_lambda_simple_params_loop_6d06:	; copy params
  4904 0000264D 4883FE00                	cmp rsi, 0
  4905 00002651 740E                    	je .L_lambda_simple_params_end_6d06
  4906 00002653 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4907 00002658 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4908 0000265C 48FFC6                  	inc rsi
  4909 0000265F EBEC                    	jmp .L_lambda_simple_params_loop_6d06
  4910                                  .L_lambda_simple_params_end_6d06:
  4911 00002661 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4912 00002664 4889C3                  	mov rbx, rax
  4913 00002667 58                      	pop rax
  4914 00002668 C60004                  	mov byte [rax], T_closure
  4915 0000266B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4916 0000266F 48C74009[7C260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d06
  4917 00002677 E99B000000              	jmp .L_lambda_simple_end_6d06
  4918                                  .L_lambda_simple_code_6d06:	; lambda-simple body
  4919 0000267C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4920 00002682 740B                    	je .L_lambda_simple_arity_check_ok_6d06
  4921 00002684 FF742410                	push qword [rsp + 8 * 2]
  4922 00002688 6A01                    	push 1
  4923 0000268A E933300100              	jmp L_error_incorrect_arity_simple
  4924                                  .L_lambda_simple_arity_check_ok_6d06:
  4925 0000268F C8000000                	enter 0, 0
  4926                                  	; preparing a tail-call
  4927 00002693 488B4520                	mov rax, PARAM(0)	; param x
  4928 00002697 50                      	push rax
  4929 00002698 6A01                    	push 1	; arg count
  4930 0000269A 488B0425[B4120000]      	mov rax, qword [free_var_76]	; free var cdar
  4931 000026A2 803805                  	cmp byte [rax], T_undefined
  4932 000026A5 0F84312F0100            	je L_error_fvar_undefined
  4933 000026AB 803804                  	cmp byte [rax], T_closure
  4934 000026AE 0F85AC2F0100            	jne L_error_non_closure
  4935 000026B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4936 000026B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4937 000026BA 50                      	push rax
  4938 000026BB 6A01                    	push 1	; arg count
  4939 000026BD 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  4940 000026C5 803805                  	cmp byte [rax], T_undefined
  4941 000026C8 0F840E2F0100            	je L_error_fvar_undefined
  4942 000026CE 803804                  	cmp byte [rax], T_closure
  4943 000026D1 0F85892F0100            	jne L_error_non_closure
  4944 000026D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4945                                  
  4946                                  	; recycling the current frame
  4947 000026DA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4948 000026DD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4949 000026E0 B905000000              	mov rcx, 1 + 4
  4950 000026E5 488B5D18                	mov rbx, COUNT
  4951 000026E9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4952 000026EE 488D55F8                	lea rdx, [rbp - 8 * 1]
  4953                                  .L_tc_recycle_frame_loop_8ec4:
  4954 000026F2 4883F900                	cmp rcx, 0
  4955 000026F6 7413                    	je .L_tc_recycle_frame_done_8ec4
  4956 000026F8 488B32                  	mov rsi, qword [rdx]
  4957 000026FB 488933                  	mov qword [rbx], rsi
  4958 000026FE 48FFC9                  	dec rcx
  4959 00002701 4883EB08                	sub rbx, 8 * 1
  4960 00002705 4883EA08                	sub rdx, 8 * 1
  4961 00002709 EBE7                    	jmp .L_tc_recycle_frame_loop_8ec4
  4962                                  .L_tc_recycle_frame_done_8ec4:
  4963 0000270B 488D6308                	lea rsp, [rbx + 8 * 1]
  4964 0000270F 5D                      	pop rbp	; the proc will restore it!
  4965 00002710 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4966 00002713 C9                      	leave
  4967 00002714 C21800                  	ret AND_KILL_FRAME(1)
  4968                                  .L_lambda_simple_end_6d06:	; new closure is in rax
  4969 00002717 48890425[4C140000]      	mov qword [free_var_100], rax
  4970 0000271F 48B8-                   	mov rax, sob_void
  4970 00002721 [0000000000000000] 
  4971                                  
  4972 00002729 4889C7                  	mov rdi, rax
  4973 0000272C E8EA300100              	call print_sexpr_if_not_void
  4974                                  
  4975 00002731 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4976 00002736 E8CE2F0100              	call malloc
  4977 0000273B 50                      	push rax
  4978 0000273C BF00000000              	mov rdi, 8 * 0	; new rib
  4979 00002741 E8C32F0100              	call malloc
  4980 00002746 50                      	push rax
  4981 00002747 BF08000000              	mov rdi, 8 * 1	; extended env
  4982 0000274C E8B82F0100              	call malloc
  4983 00002751 488B7D10                	mov rdi, ENV
  4984 00002755 BE00000000              	mov rsi, 0
  4985 0000275A BA01000000              	mov rdx, 1
  4986                                  .L_lambda_simple_env_loop_6d07:	; ext_env[i + 1] <-- env[i]
  4987 0000275F 4883FE00                	cmp rsi, 0
  4988 00002763 7410                    	je .L_lambda_simple_env_end_6d07
  4989 00002765 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4990 00002769 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4991 0000276D 48FFC6                  	inc rsi
  4992 00002770 48FFC2                  	inc rdx
  4993 00002773 EBEA                    	jmp .L_lambda_simple_env_loop_6d07
  4994                                  .L_lambda_simple_env_end_6d07:
  4995 00002775 5B                      	pop rbx
  4996 00002776 BE00000000              	mov rsi, 0
  4997                                  .L_lambda_simple_params_loop_6d07:	; copy params
  4998 0000277B 4883FE00                	cmp rsi, 0
  4999 0000277F 740E                    	je .L_lambda_simple_params_end_6d07
  5000 00002781 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5001 00002786 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5002 0000278A 48FFC6                  	inc rsi
  5003 0000278D EBEC                    	jmp .L_lambda_simple_params_loop_6d07
  5004                                  .L_lambda_simple_params_end_6d07:
  5005 0000278F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5006 00002792 4889C3                  	mov rbx, rax
  5007 00002795 58                      	pop rax
  5008 00002796 C60004                  	mov byte [rax], T_closure
  5009 00002799 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5010 0000279D 48C74009[AA270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d07
  5011 000027A5 E99B000000              	jmp .L_lambda_simple_end_6d07
  5012                                  .L_lambda_simple_code_6d07:	; lambda-simple body
  5013 000027AA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5014 000027B0 740B                    	je .L_lambda_simple_arity_check_ok_6d07
  5015 000027B2 FF742410                	push qword [rsp + 8 * 2]
  5016 000027B6 6A01                    	push 1
  5017 000027B8 E9052F0100              	jmp L_error_incorrect_arity_simple
  5018                                  .L_lambda_simple_arity_check_ok_6d07:
  5019 000027BD C8000000                	enter 0, 0
  5020                                  	; preparing a tail-call
  5021 000027C1 488B4520                	mov rax, PARAM(0)	; param x
  5022 000027C5 50                      	push rax
  5023 000027C6 6A01                    	push 1	; arg count
  5024 000027C8 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  5025 000027D0 803805                  	cmp byte [rax], T_undefined
  5026 000027D3 0F84032E0100            	je L_error_fvar_undefined
  5027 000027D9 803804                  	cmp byte [rax], T_closure
  5028 000027DC 0F857E2E0100            	jne L_error_non_closure
  5029 000027E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5030 000027E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5031 000027E8 50                      	push rax
  5032 000027E9 6A01                    	push 1	; arg count
  5033 000027EB 488B0425[C5120000]      	mov rax, qword [free_var_77]	; free var cddr
  5034 000027F3 803805                  	cmp byte [rax], T_undefined
  5035 000027F6 0F84E02D0100            	je L_error_fvar_undefined
  5036 000027FC 803804                  	cmp byte [rax], T_closure
  5037 000027FF 0F855B2E0100            	jne L_error_non_closure
  5038 00002805 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5039                                  
  5040                                  	; recycling the current frame
  5041 00002808 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5042 0000280B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5043 0000280E B905000000              	mov rcx, 1 + 4
  5044 00002813 488B5D18                	mov rbx, COUNT
  5045 00002817 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5046 0000281C 488D55F8                	lea rdx, [rbp - 8 * 1]
  5047                                  .L_tc_recycle_frame_loop_8ec5:
  5048 00002820 4883F900                	cmp rcx, 0
  5049 00002824 7413                    	je .L_tc_recycle_frame_done_8ec5
  5050 00002826 488B32                  	mov rsi, qword [rdx]
  5051 00002829 488933                  	mov qword [rbx], rsi
  5052 0000282C 48FFC9                  	dec rcx
  5053 0000282F 4883EB08                	sub rbx, 8 * 1
  5054 00002833 4883EA08                	sub rdx, 8 * 1
  5055 00002837 EBE7                    	jmp .L_tc_recycle_frame_loop_8ec5
  5056                                  .L_tc_recycle_frame_done_8ec5:
  5057 00002839 488D6308                	lea rsp, [rbx + 8 * 1]
  5058 0000283D 5D                      	pop rbp	; the proc will restore it!
  5059 0000283E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5060 00002841 C9                      	leave
  5061 00002842 C21800                  	ret AND_KILL_FRAME(1)
  5062                                  .L_lambda_simple_end_6d07:	; new closure is in rax
  5063 00002845 48890425[5D140000]      	mov qword [free_var_101], rax
  5064 0000284D 48B8-                   	mov rax, sob_void
  5064 0000284F [0000000000000000] 
  5065                                  
  5066 00002857 4889C7                  	mov rdi, rax
  5067 0000285A E8BC2F0100              	call print_sexpr_if_not_void
  5068                                  
  5069 0000285F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5070 00002864 E8A02E0100              	call malloc
  5071 00002869 50                      	push rax
  5072 0000286A BF00000000              	mov rdi, 8 * 0	; new rib
  5073 0000286F E8952E0100              	call malloc
  5074 00002874 50                      	push rax
  5075 00002875 BF08000000              	mov rdi, 8 * 1	; extended env
  5076 0000287A E88A2E0100              	call malloc
  5077 0000287F 488B7D10                	mov rdi, ENV
  5078 00002883 BE00000000              	mov rsi, 0
  5079 00002888 BA01000000              	mov rdx, 1
  5080                                  .L_lambda_simple_env_loop_6d08:	; ext_env[i + 1] <-- env[i]
  5081 0000288D 4883FE00                	cmp rsi, 0
  5082 00002891 7410                    	je .L_lambda_simple_env_end_6d08
  5083 00002893 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5084 00002897 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5085 0000289B 48FFC6                  	inc rsi
  5086 0000289E 48FFC2                  	inc rdx
  5087 000028A1 EBEA                    	jmp .L_lambda_simple_env_loop_6d08
  5088                                  .L_lambda_simple_env_end_6d08:
  5089 000028A3 5B                      	pop rbx
  5090 000028A4 BE00000000              	mov rsi, 0
  5091                                  .L_lambda_simple_params_loop_6d08:	; copy params
  5092 000028A9 4883FE00                	cmp rsi, 0
  5093 000028AD 740E                    	je .L_lambda_simple_params_end_6d08
  5094 000028AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5095 000028B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5096 000028B8 48FFC6                  	inc rsi
  5097 000028BB EBEC                    	jmp .L_lambda_simple_params_loop_6d08
  5098                                  .L_lambda_simple_params_end_6d08:
  5099 000028BD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5100 000028C0 4889C3                  	mov rbx, rax
  5101 000028C3 58                      	pop rax
  5102 000028C4 C60004                  	mov byte [rax], T_closure
  5103 000028C7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5104 000028CB 48C74009[D8280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d08
  5105 000028D3 E90D010000              	jmp .L_lambda_simple_end_6d08
  5106                                  .L_lambda_simple_code_6d08:	; lambda-simple body
  5107 000028D8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5108 000028DE 740B                    	je .L_lambda_simple_arity_check_ok_6d08
  5109 000028E0 FF742410                	push qword [rsp + 8 * 2]
  5110 000028E4 6A01                    	push 1
  5111 000028E6 E9D72D0100              	jmp L_error_incorrect_arity_simple
  5112                                  .L_lambda_simple_arity_check_ok_6d08:
  5113 000028EB C8000000                	enter 0, 0
  5114 000028EF 488B4520                	mov rax, PARAM(0)	; param e
  5115 000028F3 50                      	push rax
  5116 000028F4 6A01                    	push 1	; arg count
  5117 000028F6 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  5118 000028FE 803805                  	cmp byte [rax], T_undefined
  5119 00002901 0F84D52C0100            	je L_error_fvar_undefined
  5120 00002907 803804                  	cmp byte [rax], T_closure
  5121 0000290A 0F85502D0100            	jne L_error_non_closure
  5122 00002910 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5123 00002913 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5124 00002916 483D[02000000]          	cmp rax, sob_boolean_false
  5125 0000291C 0F85BF000000            	jne .L_or_end_0770
  5126 00002922 488B4520                	mov rax, PARAM(0)	; param e
  5127 00002926 50                      	push rax
  5128 00002927 6A01                    	push 1	; arg count
  5129 00002929 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
  5130 00002931 803805                  	cmp byte [rax], T_undefined
  5131 00002934 0F84A22C0100            	je L_error_fvar_undefined
  5132 0000293A 803804                  	cmp byte [rax], T_closure
  5133 0000293D 0F851D2D0100            	jne L_error_non_closure
  5134 00002943 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5135 00002946 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5136                                  
  5137 00002949 483D[02000000]          	cmp rax, sob_boolean_false
  5138 0000294F 0F8482000000            	je .L_if_else_76c0
  5139                                  	; preparing a tail-call
  5140 00002955 488B4520                	mov rax, PARAM(0)	; param e
  5141 00002959 50                      	push rax
  5142 0000295A 6A01                    	push 1	; arg count
  5143 0000295C 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  5144 00002964 803805                  	cmp byte [rax], T_undefined
  5145 00002967 0F846F2C0100            	je L_error_fvar_undefined
  5146 0000296D 803804                  	cmp byte [rax], T_closure
  5147 00002970 0F85EA2C0100            	jne L_error_non_closure
  5148 00002976 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5149 00002979 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5150 0000297C 50                      	push rax
  5151 0000297D 6A01                    	push 1	; arg count
  5152 0000297F 488B0425[6E140000]      	mov rax, qword [free_var_102]	; free var list?
  5153 00002987 803805                  	cmp byte [rax], T_undefined
  5154 0000298A 0F844C2C0100            	je L_error_fvar_undefined
  5155 00002990 803804                  	cmp byte [rax], T_closure
  5156 00002993 0F85C72C0100            	jne L_error_non_closure
  5157 00002999 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5158                                  
  5159                                  	; recycling the current frame
  5160 0000299C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5161 0000299F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5162 000029A2 B905000000              	mov rcx, 1 + 4
  5163 000029A7 488B5D18                	mov rbx, COUNT
  5164 000029AB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5165 000029B0 488D55F8                	lea rdx, [rbp - 8 * 1]
  5166                                  .L_tc_recycle_frame_loop_8ec6:
  5167 000029B4 4883F900                	cmp rcx, 0
  5168 000029B8 7413                    	je .L_tc_recycle_frame_done_8ec6
  5169 000029BA 488B32                  	mov rsi, qword [rdx]
  5170 000029BD 488933                  	mov qword [rbx], rsi
  5171 000029C0 48FFC9                  	dec rcx
  5172 000029C3 4883EB08                	sub rbx, 8 * 1
  5173 000029C7 4883EA08                	sub rdx, 8 * 1
  5174 000029CB EBE7                    	jmp .L_tc_recycle_frame_loop_8ec6
  5175                                  .L_tc_recycle_frame_done_8ec6:
  5176 000029CD 488D6308                	lea rsp, [rbx + 8 * 1]
  5177 000029D1 5D                      	pop rbp	; the proc will restore it!
  5178 000029D2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5179                                  
  5180 000029D5 EB0A                    	jmp .L_if_end_76c0
  5181                                  
  5182                                  	.L_if_else_76c0:
  5183 000029D7 48B8-                   	mov rax, L_constants + 2
  5183 000029D9 [0200000000000000] 
  5184                                  
  5185                                  	.L_if_end_76c0:
  5186                                  .L_or_end_0770:
  5187 000029E1 C9                      	leave
  5188 000029E2 C21800                  	ret AND_KILL_FRAME(1)
  5189                                  .L_lambda_simple_end_6d08:	; new closure is in rax
  5190 000029E5 48890425[6E140000]      	mov qword [free_var_102], rax
  5191 000029ED 48B8-                   	mov rax, sob_void
  5191 000029EF [0000000000000000] 
  5192                                  
  5193 000029F7 4889C7                  	mov rdi, rax
  5194 000029FA E81C2E0100              	call print_sexpr_if_not_void
  5195                                  
  5196 000029FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5197 00002A04 E8002D0100              	call malloc
  5198 00002A09 50                      	push rax
  5199 00002A0A BF00000000              	mov rdi, 8 * 0	; new rib
  5200 00002A0F E8F52C0100              	call malloc
  5201 00002A14 50                      	push rax
  5202 00002A15 BF08000000              	mov rdi, 8 * 1	; extended env
  5203 00002A1A E8EA2C0100              	call malloc
  5204 00002A1F 488B7D10                	mov rdi, ENV
  5205 00002A23 BE00000000              	mov rsi, 0
  5206 00002A28 BA01000000              	mov rdx, 1
  5207                                  .L_lambda_opt_env_loop_0f51:	; ext_env[i + 1] <-- env[i]
  5208 00002A2D 4883FE00                	cmp rsi, 0
  5209 00002A31 7410                    	je .L_lambda_opt_env_end_0f51
  5210 00002A33 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5211 00002A37 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5212 00002A3B 48FFC6                  	inc rsi
  5213 00002A3E 48FFC2                  	inc rdx
  5214 00002A41 EBEA                    	jmp .L_lambda_opt_env_loop_0f51
  5215                                  .L_lambda_opt_env_end_0f51:
  5216 00002A43 5B                      	pop rbx
  5217 00002A44 BE00000000              	mov rsi, 0
  5218                                  .L_lambda_opt_params_loop_0f51:	; copy params
  5219 00002A49 4883FE00                	cmp rsi, 0
  5220 00002A4D 740E                    	je .L_lambda_opt_params_end_0f51
  5221 00002A4F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5222 00002A54 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5223 00002A58 48FFC6                  	inc rsi
  5224 00002A5B EBEC                    	jmp .L_lambda_opt_params_loop_0f51
  5225                                  .L_lambda_opt_params_end_0f51:
  5226 00002A5D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5227 00002A60 4889C3                  	mov rbx, rax
  5228 00002A63 58                      	pop rax
  5229 00002A64 C60004                  	mov byte [rax], T_closure
  5230 00002A67 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5231 00002A6B 48C74009[782A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f51
  5232 00002A73 E9DF000000              	jmp .L_lambda_opt_end_0f51
  5233                                  .L_lambda_opt_code_0f51:	; lambda-simple body
  5234 00002A78 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
  5235 00002A7E 740D                    	je .L_lambda_opt_arity_check_exact_0f51 ;	 if equal, go to exact arity
  5236 00002A80 7F42                    	jg .L_lambda_opt_arity_check_more_0f51 ;	 if greater than, go to arity more
  5237 00002A82 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  5238 00002A86 6A00                     	push 0
  5239 00002A88 E9492C0100              	jmp L_error_incorrect_arity_opt
  5240                                  	.L_lambda_opt_arity_check_exact_0f51:
  5241 00002A8D 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  5242 00002A92 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  5243 00002A97 4883EC08                	sub rsp, 8
  5244 00002A9B 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  5245                                  	.L_lambda_opt_exact_shifting_loop_0f51:
  5246 00002A9F 488B5108                	mov rdx, [rcx + 8]
  5247 00002AA3 488911                  	mov [rcx], rdx
  5248 00002AA6 4883C108                	add rcx, 8
  5249 00002AAA 4839CB                  	cmp rbx, rcx
  5250 00002AAD 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f51
  5251                                  	.L_lambda_opt_exact_shifting_loop_end_0f51:
  5252 00002AAF 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  5253 00002AB6 4883C001                	add rax, 1 ; 	arg count += 1
  5254 00002ABA 4889442410              	mov qword [rsp + 8 * 2], rax
  5255 00002ABF E987000000              	jmp .L_lambda_opt_stack_adjusted_0f51
  5256                                  	.L_lambda_opt_arity_check_more_0f51:
  5257 00002AC4 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  5257 00002AC6 [0100000000000000] 
  5258 00002ACE 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
  5259 00002AD4 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f51
  5260                                  	.L_lambda_opt_stack_shrink_loop_0f51:
  5261 00002AD6 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  5262 00002ADB E8292C0100              	call malloc ;	 allocated memory for the optional scheme list
  5263 00002AE0 C60021                  	mov byte[rax], T_pair ;	 set type pair
  5264 00002AE3 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  5265 00002AE7 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  5266 00002AEA 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  5267 00002AEF 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  5268 00002AF4 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  5269 00002AF8 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  5270                                  	.L_lambda_opt_more_shifting_loop_0f51:
  5271 00002AFD 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  5272 00002B00 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  5273 00002B04 4883EB08                	sub rbx, 8 
  5274 00002B08 4839DC                  	cmp rsp, rbx
  5275 00002B0B 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f51
  5276                                  	.L_lambda_opt_more_shifting_loop_end_0f51:
  5277 00002B0D 4883C408                	add rsp, 8 ;	 update rsp
  5278 00002B11 488B5C2410              	mov rbx, [rsp + 8 * 2]
  5279 00002B16 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  5280 00002B1A 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  5281 00002B1F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5282 00002B25 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f51
  5283                                  	.L_lambda_opt_stack_shrink_loop_exit_0f51:
  5284 00002B27 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  5285 00002B2C 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  5286 00002B31 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  5287 00002B36 E8CE2B0100              	call malloc ;	 allocated memory for the optional scheme list
  5288 00002B3B C60021                  	mov byte[rax], T_pair ;	 set type pair
  5289 00002B3E 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  5290 00002B42 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  5291 00002B46 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  5292                                  	.L_lambda_opt_stack_adjusted_0f51:
  5293 00002B4B C8000000                	enter 0, 0
  5294 00002B4F 488B4520                	mov rax, PARAM(0)	; param args
  5295 00002B53 C9                      	leave
  5296 00002B54 C21800                  	ret AND_KILL_FRAME(1)
  5297                                  .L_lambda_opt_end_0f51:	; new closure is in rax
  5298 00002B57 48890425[7F140000]      	mov qword [free_var_103], rax
  5299 00002B5F 48B8-                   	mov rax, sob_void
  5299 00002B61 [0000000000000000] 
  5300                                  
  5301 00002B69 4889C7                  	mov rdi, rax
  5302 00002B6C E8AA2C0100              	call print_sexpr_if_not_void
  5303                                  
  5304 00002B71 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5305 00002B76 E88E2B0100              	call malloc
  5306 00002B7B 50                      	push rax
  5307 00002B7C BF00000000              	mov rdi, 8 * 0	; new rib
  5308 00002B81 E8832B0100              	call malloc
  5309 00002B86 50                      	push rax
  5310 00002B87 BF08000000              	mov rdi, 8 * 1	; extended env
  5311 00002B8C E8782B0100              	call malloc
  5312 00002B91 488B7D10                	mov rdi, ENV
  5313 00002B95 BE00000000              	mov rsi, 0
  5314 00002B9A BA01000000              	mov rdx, 1
  5315                                  .L_lambda_simple_env_loop_6d09:	; ext_env[i + 1] <-- env[i]
  5316 00002B9F 4883FE00                	cmp rsi, 0
  5317 00002BA3 7410                    	je .L_lambda_simple_env_end_6d09
  5318 00002BA5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5319 00002BA9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5320 00002BAD 48FFC6                  	inc rsi
  5321 00002BB0 48FFC2                  	inc rdx
  5322 00002BB3 EBEA                    	jmp .L_lambda_simple_env_loop_6d09
  5323                                  .L_lambda_simple_env_end_6d09:
  5324 00002BB5 5B                      	pop rbx
  5325 00002BB6 BE00000000              	mov rsi, 0
  5326                                  .L_lambda_simple_params_loop_6d09:	; copy params
  5327 00002BBB 4883FE00                	cmp rsi, 0
  5328 00002BBF 740E                    	je .L_lambda_simple_params_end_6d09
  5329 00002BC1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5330 00002BC6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5331 00002BCA 48FFC6                  	inc rsi
  5332 00002BCD EBEC                    	jmp .L_lambda_simple_params_loop_6d09
  5333                                  .L_lambda_simple_params_end_6d09:
  5334 00002BCF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5335 00002BD2 4889C3                  	mov rbx, rax
  5336 00002BD5 58                      	pop rax
  5337 00002BD6 C60004                  	mov byte [rax], T_closure
  5338 00002BD9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5339 00002BDD 48C74009[E72B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d09
  5340 00002BE5 EB3D                    	jmp .L_lambda_simple_end_6d09
  5341                                  .L_lambda_simple_code_6d09:	; lambda-simple body
  5342 00002BE7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5343 00002BED 740B                    	je .L_lambda_simple_arity_check_ok_6d09
  5344 00002BEF FF742410                	push qword [rsp + 8 * 2]
  5345 00002BF3 6A01                    	push 1
  5346 00002BF5 E9C82A0100              	jmp L_error_incorrect_arity_simple
  5347                                  .L_lambda_simple_arity_check_ok_6d09:
  5348 00002BFA C8000000                	enter 0, 0
  5349 00002BFE 488B4520                	mov rax, PARAM(0)	; param x
  5350                                  
  5351 00002C02 483D[02000000]          	cmp rax, sob_boolean_false
  5352 00002C08 740C                    	je .L_if_else_76c1
  5353 00002C0A 48B8-                   	mov rax, L_constants + 2
  5353 00002C0C [0200000000000000] 
  5354                                  
  5355 00002C14 EB0A                    	jmp .L_if_end_76c1
  5356                                  
  5357                                  	.L_if_else_76c1:
  5358 00002C16 48B8-                   	mov rax, L_constants + 3
  5358 00002C18 [0300000000000000] 
  5359                                  
  5360                                  	.L_if_end_76c1:
  5361 00002C20 C9                      	leave
  5362 00002C21 C21800                  	ret AND_KILL_FRAME(1)
  5363                                  .L_lambda_simple_end_6d09:	; new closure is in rax
  5364 00002C24 48890425[90140000]      	mov qword [free_var_104], rax
  5365 00002C2C 48B8-                   	mov rax, sob_void
  5365 00002C2E [0000000000000000] 
  5366                                  
  5367 00002C36 4889C7                  	mov rdi, rax
  5368 00002C39 E8DD2B0100              	call print_sexpr_if_not_void
  5369                                  
  5370 00002C3E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5371 00002C43 E8C12A0100              	call malloc
  5372 00002C48 50                      	push rax
  5373 00002C49 BF00000000              	mov rdi, 8 * 0	; new rib
  5374 00002C4E E8B62A0100              	call malloc
  5375 00002C53 50                      	push rax
  5376 00002C54 BF08000000              	mov rdi, 8 * 1	; extended env
  5377 00002C59 E8AB2A0100              	call malloc
  5378 00002C5E 488B7D10                	mov rdi, ENV
  5379 00002C62 BE00000000              	mov rsi, 0
  5380 00002C67 BA01000000              	mov rdx, 1
  5381                                  .L_lambda_simple_env_loop_6d0a:	; ext_env[i + 1] <-- env[i]
  5382 00002C6C 4883FE00                	cmp rsi, 0
  5383 00002C70 7410                    	je .L_lambda_simple_env_end_6d0a
  5384 00002C72 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5385 00002C76 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5386 00002C7A 48FFC6                  	inc rsi
  5387 00002C7D 48FFC2                  	inc rdx
  5388 00002C80 EBEA                    	jmp .L_lambda_simple_env_loop_6d0a
  5389                                  .L_lambda_simple_env_end_6d0a:
  5390 00002C82 5B                      	pop rbx
  5391 00002C83 BE00000000              	mov rsi, 0
  5392                                  .L_lambda_simple_params_loop_6d0a:	; copy params
  5393 00002C88 4883FE00                	cmp rsi, 0
  5394 00002C8C 740E                    	je .L_lambda_simple_params_end_6d0a
  5395 00002C8E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5396 00002C93 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5397 00002C97 48FFC6                  	inc rsi
  5398 00002C9A EBEC                    	jmp .L_lambda_simple_params_loop_6d0a
  5399                                  .L_lambda_simple_params_end_6d0a:
  5400 00002C9C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5401 00002C9F 4889C3                  	mov rbx, rax
  5402 00002CA2 58                      	pop rax
  5403 00002CA3 C60004                  	mov byte [rax], T_closure
  5404 00002CA6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5405 00002CAA 48C74009[B72C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d0a
  5406 00002CB2 E9A7000000              	jmp .L_lambda_simple_end_6d0a
  5407                                  .L_lambda_simple_code_6d0a:	; lambda-simple body
  5408 00002CB7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5409 00002CBD 740B                    	je .L_lambda_simple_arity_check_ok_6d0a
  5410 00002CBF FF742410                	push qword [rsp + 8 * 2]
  5411 00002CC3 6A01                    	push 1
  5412 00002CC5 E9F8290100              	jmp L_error_incorrect_arity_simple
  5413                                  .L_lambda_simple_arity_check_ok_6d0a:
  5414 00002CCA C8000000                	enter 0, 0
  5415 00002CCE 488B4520                	mov rax, PARAM(0)	; param q
  5416 00002CD2 50                      	push rax
  5417 00002CD3 6A01                    	push 1	; arg count
  5418 00002CD5 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
  5419 00002CDD 803805                  	cmp byte [rax], T_undefined
  5420 00002CE0 0F84F6280100            	je L_error_fvar_undefined
  5421 00002CE6 803804                  	cmp byte [rax], T_closure
  5422 00002CE9 0F8571290100            	jne L_error_non_closure
  5423 00002CEF FF7001                  	push SOB_CLOSURE_ENV(rax)
  5424 00002CF2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5425 00002CF5 483D[02000000]          	cmp rax, sob_boolean_false
  5426 00002CFB 755D                    	jne .L_or_end_0771
  5427                                  	; preparing a tail-call
  5428 00002CFD 488B4520                	mov rax, PARAM(0)	; param q
  5429 00002D01 50                      	push rax
  5430 00002D02 6A01                    	push 1	; arg count
  5431 00002D04 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  5432 00002D0C 803805                  	cmp byte [rax], T_undefined
  5433 00002D0F 0F84C7280100            	je L_error_fvar_undefined
  5434 00002D15 803804                  	cmp byte [rax], T_closure
  5435 00002D18 0F8542290100            	jne L_error_non_closure
  5436 00002D1E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5437                                  
  5438                                  	; recycling the current frame
  5439 00002D21 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5440 00002D24 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5441 00002D27 B905000000              	mov rcx, 1 + 4
  5442 00002D2C 488B5D18                	mov rbx, COUNT
  5443 00002D30 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5444 00002D35 488D55F8                	lea rdx, [rbp - 8 * 1]
  5445                                  .L_tc_recycle_frame_loop_8ec7:
  5446 00002D39 4883F900                	cmp rcx, 0
  5447 00002D3D 7413                    	je .L_tc_recycle_frame_done_8ec7
  5448 00002D3F 488B32                  	mov rsi, qword [rdx]
  5449 00002D42 488933                  	mov qword [rbx], rsi
  5450 00002D45 48FFC9                  	dec rcx
  5451 00002D48 4883EB08                	sub rbx, 8 * 1
  5452 00002D4C 4883EA08                	sub rdx, 8 * 1
  5453 00002D50 EBE7                    	jmp .L_tc_recycle_frame_loop_8ec7
  5454                                  .L_tc_recycle_frame_done_8ec7:
  5455 00002D52 488D6308                	lea rsp, [rbx + 8 * 1]
  5456 00002D56 5D                      	pop rbp	; the proc will restore it!
  5457 00002D57 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5458                                  .L_or_end_0771:
  5459 00002D5A C9                      	leave
  5460 00002D5B C21800                  	ret AND_KILL_FRAME(1)
  5461                                  .L_lambda_simple_end_6d0a:	; new closure is in rax
  5462 00002D5E 48890425[A1140000]      	mov qword [free_var_105], rax
  5463 00002D66 48B8-                   	mov rax, sob_void
  5463 00002D68 [0000000000000000] 
  5464                                  
  5465 00002D70 4889C7                  	mov rdi, rax
  5466 00002D73 E8A32A0100              	call print_sexpr_if_not_void
  5467                                  
  5468 00002D78 48B8-                   	mov rax, L_constants + 1881
  5468 00002D7A [5907000000000000] 
  5469 00002D82 50                      	push rax
  5470 00002D83 6A01                    	push 1	; arg count
  5471 00002D85 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5472 00002D8A E87A290100              	call malloc
  5473 00002D8F 50                      	push rax
  5474 00002D90 BF00000000              	mov rdi, 8 * 0	; new rib
  5475 00002D95 E86F290100              	call malloc
  5476 00002D9A 50                      	push rax
  5477 00002D9B BF08000000              	mov rdi, 8 * 1	; extended env
  5478 00002DA0 E864290100              	call malloc
  5479 00002DA5 488B7D10                	mov rdi, ENV
  5480 00002DA9 BE00000000              	mov rsi, 0
  5481 00002DAE BA01000000              	mov rdx, 1
  5482                                  .L_lambda_simple_env_loop_6d0b:	; ext_env[i + 1] <-- env[i]
  5483 00002DB3 4883FE00                	cmp rsi, 0
  5484 00002DB7 7410                    	je .L_lambda_simple_env_end_6d0b
  5485 00002DB9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5486 00002DBD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5487 00002DC1 48FFC6                  	inc rsi
  5488 00002DC4 48FFC2                  	inc rdx
  5489 00002DC7 EBEA                    	jmp .L_lambda_simple_env_loop_6d0b
  5490                                  .L_lambda_simple_env_end_6d0b:
  5491 00002DC9 5B                      	pop rbx
  5492 00002DCA BE00000000              	mov rsi, 0
  5493                                  .L_lambda_simple_params_loop_6d0b:	; copy params
  5494 00002DCF 4883FE00                	cmp rsi, 0
  5495 00002DD3 740E                    	je .L_lambda_simple_params_end_6d0b
  5496 00002DD5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5497 00002DDA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5498 00002DDE 48FFC6                  	inc rsi
  5499 00002DE1 EBEC                    	jmp .L_lambda_simple_params_loop_6d0b
  5500                                  .L_lambda_simple_params_end_6d0b:
  5501 00002DE3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5502 00002DE6 4889C3                  	mov rbx, rax
  5503 00002DE9 58                      	pop rax
  5504 00002DEA C60004                  	mov byte [rax], T_closure
  5505 00002DED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5506 00002DF1 48C74009[FE2D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d0b
  5507 00002DF9 E995030000              	jmp .L_lambda_simple_end_6d0b
  5508                                  .L_lambda_simple_code_6d0b:	; lambda-simple body
  5509 00002DFE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5510 00002E04 740B                    	je .L_lambda_simple_arity_check_ok_6d0b
  5511 00002E06 FF742410                	push qword [rsp + 8 * 2]
  5512 00002E0A 6A01                    	push 1
  5513 00002E0C E9B1280100              	jmp L_error_incorrect_arity_simple
  5514                                  .L_lambda_simple_arity_check_ok_6d0b:
  5515 00002E11 C8000000                	enter 0, 0
  5516                                  
  5517 00002E15 BF08000000              	mov rdi, 8
  5518 00002E1A E8EA280100              	call malloc
  5519 00002E1F 488B5D20                	mov rbx, PARAM(0)	; param run
  5520 00002E23 488918                  	mov [rax], rbx	; box run
  5521 00002E26 48894520                	mov PARAM(0), rax	;replace param run with box
  5522 00002E2A 48B8-                   	mov rax, sob_void
  5522 00002E2C [0000000000000000] 
  5523                                  
  5524 00002E34 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5525 00002E39 E8CB280100              	call malloc
  5526 00002E3E 50                      	push rax
  5527 00002E3F BF08000000              	mov rdi, 8 * 1	; new rib
  5528 00002E44 E8C0280100              	call malloc
  5529 00002E49 50                      	push rax
  5530 00002E4A BF10000000              	mov rdi, 8 * 2	; extended env
  5531 00002E4F E8B5280100              	call malloc
  5532 00002E54 488B7D10                	mov rdi, ENV
  5533 00002E58 BE00000000              	mov rsi, 0
  5534 00002E5D BA01000000              	mov rdx, 1
  5535                                  .L_lambda_simple_env_loop_6d0c:	; ext_env[i + 1] <-- env[i]
  5536 00002E62 4883FE01                	cmp rsi, 1
  5537 00002E66 7410                    	je .L_lambda_simple_env_end_6d0c
  5538 00002E68 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5539 00002E6C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5540 00002E70 48FFC6                  	inc rsi
  5541 00002E73 48FFC2                  	inc rdx
  5542 00002E76 EBEA                    	jmp .L_lambda_simple_env_loop_6d0c
  5543                                  .L_lambda_simple_env_end_6d0c:
  5544 00002E78 5B                      	pop rbx
  5545 00002E79 BE00000000              	mov rsi, 0
  5546                                  .L_lambda_simple_params_loop_6d0c:	; copy params
  5547 00002E7E 4883FE01                	cmp rsi, 1
  5548 00002E82 740E                    	je .L_lambda_simple_params_end_6d0c
  5549 00002E84 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5550 00002E89 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5551 00002E8D 48FFC6                  	inc rsi
  5552 00002E90 EBEC                    	jmp .L_lambda_simple_params_loop_6d0c
  5553                                  .L_lambda_simple_params_end_6d0c:
  5554 00002E92 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5555 00002E95 4889C3                  	mov rbx, rax
  5556 00002E98 58                      	pop rax
  5557 00002E99 C60004                  	mov byte [rax], T_closure
  5558 00002E9C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5559 00002EA0 48C74009[AD2E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d0c
  5560 00002EA8 E91F010000              	jmp .L_lambda_simple_end_6d0c
  5561                                  .L_lambda_simple_code_6d0c:	; lambda-simple body
  5562 00002EAD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5563 00002EB3 740B                    	je .L_lambda_simple_arity_check_ok_6d0c
  5564 00002EB5 FF742410                	push qword [rsp + 8 * 2]
  5565 00002EB9 6A02                    	push 2
  5566 00002EBB E902280100              	jmp L_error_incorrect_arity_simple
  5567                                  .L_lambda_simple_arity_check_ok_6d0c:
  5568 00002EC0 C8000000                	enter 0, 0
  5569 00002EC4 488B4528                	mov rax, PARAM(1)	; param s
  5570 00002EC8 50                      	push rax
  5571 00002EC9 6A01                    	push 1	; arg count
  5572 00002ECB 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  5573 00002ED3 803805                  	cmp byte [rax], T_undefined
  5574 00002ED6 0F8400270100            	je L_error_fvar_undefined
  5575 00002EDC 803804                  	cmp byte [rax], T_closure
  5576 00002EDF 0F857B270100            	jne L_error_non_closure
  5577 00002EE5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5578 00002EE8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5579                                  
  5580 00002EEB 483D[02000000]          	cmp rax, sob_boolean_false
  5581 00002EF1 7409                    	je .L_if_else_76c2
  5582 00002EF3 488B4520                	mov rax, PARAM(0)	; param a
  5583                                  
  5584 00002EF7 E9CC000000              	jmp .L_if_end_76c2
  5585                                  
  5586                                  	.L_if_else_76c2:
  5587                                  	; preparing a tail-call
  5588 00002EFC 488B4528                	mov rax, PARAM(1)	; param s
  5589 00002F00 50                      	push rax
  5590 00002F01 6A01                    	push 1	; arg count
  5591 00002F03 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  5592 00002F0B 803805                  	cmp byte [rax], T_undefined
  5593 00002F0E 0F84C8260100            	je L_error_fvar_undefined
  5594 00002F14 803804                  	cmp byte [rax], T_closure
  5595 00002F17 0F8543270100            	jne L_error_non_closure
  5596 00002F1D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5597 00002F20 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5598 00002F23 50                      	push rax
  5599 00002F24 488B4528                	mov rax, PARAM(1)	; param s
  5600 00002F28 50                      	push rax
  5601 00002F29 6A01                    	push 1	; arg count
  5602 00002F2B 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  5603 00002F33 803805                  	cmp byte [rax], T_undefined
  5604 00002F36 0F84A0260100            	je L_error_fvar_undefined
  5605 00002F3C 803804                  	cmp byte [rax], T_closure
  5606 00002F3F 0F851B270100            	jne L_error_non_closure
  5607 00002F45 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5608 00002F48 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5609 00002F4B 50                      	push rax
  5610 00002F4C 6A02                    	push 2	; arg count
  5611 00002F4E 488B4510                	mov rax, ENV
  5612 00002F52 488B00                  	mov rax, qword [rax + 8 * 0]
  5613 00002F55 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5614 00002F58 488B00                  	mov rax, qword [rax]
  5615 00002F5B 803804                  	cmp byte [rax], T_closure
  5616 00002F5E 0F85FC260100            	jne L_error_non_closure
  5617 00002F64 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5618 00002F67 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5619 00002F6A 50                      	push rax
  5620 00002F6B 488B4520                	mov rax, PARAM(0)	; param a
  5621 00002F6F 50                      	push rax
  5622 00002F70 6A02                    	push 2	; arg count
  5623 00002F72 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  5624 00002F7A 803805                  	cmp byte [rax], T_undefined
  5625 00002F7D 0F8459260100            	je L_error_fvar_undefined
  5626 00002F83 803804                  	cmp byte [rax], T_closure
  5627 00002F86 0F85D4260100            	jne L_error_non_closure
  5628 00002F8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5629                                  
  5630                                  	; recycling the current frame
  5631 00002F8F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5632 00002F92 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5633 00002F95 B906000000              	mov rcx, 2 + 4
  5634 00002F9A 488B5D18                	mov rbx, COUNT
  5635 00002F9E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5636 00002FA3 488D55F8                	lea rdx, [rbp - 8 * 1]
  5637                                  .L_tc_recycle_frame_loop_8ec8:
  5638 00002FA7 4883F900                	cmp rcx, 0
  5639 00002FAB 7413                    	je .L_tc_recycle_frame_done_8ec8
  5640 00002FAD 488B32                  	mov rsi, qword [rdx]
  5641 00002FB0 488933                  	mov qword [rbx], rsi
  5642 00002FB3 48FFC9                  	dec rcx
  5643 00002FB6 4883EB08                	sub rbx, 8 * 1
  5644 00002FBA 4883EA08                	sub rdx, 8 * 1
  5645 00002FBE EBE7                    	jmp .L_tc_recycle_frame_loop_8ec8
  5646                                  .L_tc_recycle_frame_done_8ec8:
  5647 00002FC0 488D6308                	lea rsp, [rbx + 8 * 1]
  5648 00002FC4 5D                      	pop rbp	; the proc will restore it!
  5649 00002FC5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5650                                  
  5651                                  	.L_if_end_76c2:
  5652 00002FC8 C9                      	leave
  5653 00002FC9 C22000                  	ret AND_KILL_FRAME(2)
  5654                                  .L_lambda_simple_end_6d0c:	; new closure is in rax
  5655                                  
  5656 00002FCC 50                      	push rax
  5657 00002FCD 488B4520                	mov rax, PARAM(0)	; param run
  5658                                  
  5659 00002FD1 8F00                    	pop qword[rax]
  5660 00002FD3 48B8-                   	mov rax, sob_void
  5660 00002FD5 [0000000000000000] 
  5661                                  
  5662 00002FDD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5663 00002FE2 E822270100              	call malloc
  5664 00002FE7 50                      	push rax
  5665 00002FE8 BF08000000              	mov rdi, 8 * 1	; new rib
  5666 00002FED E817270100              	call malloc
  5667 00002FF2 50                      	push rax
  5668 00002FF3 BF10000000              	mov rdi, 8 * 2	; extended env
  5669 00002FF8 E80C270100              	call malloc
  5670 00002FFD 488B7D10                	mov rdi, ENV
  5671 00003001 BE00000000              	mov rsi, 0
  5672 00003006 BA01000000              	mov rdx, 1
  5673                                  .L_lambda_opt_env_loop_0f52:	; ext_env[i + 1] <-- env[i]
  5674 0000300B 4883FE01                	cmp rsi, 1
  5675 0000300F 7410                    	je .L_lambda_opt_env_end_0f52
  5676 00003011 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5677 00003015 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5678 00003019 48FFC6                  	inc rsi
  5679 0000301C 48FFC2                  	inc rdx
  5680 0000301F EBEA                    	jmp .L_lambda_opt_env_loop_0f52
  5681                                  .L_lambda_opt_env_end_0f52:
  5682 00003021 5B                      	pop rbx
  5683 00003022 BE00000000              	mov rsi, 0
  5684                                  .L_lambda_opt_params_loop_0f52:	; copy params
  5685 00003027 4883FE01                	cmp rsi, 1
  5686 0000302B 740E                    	je .L_lambda_opt_params_end_0f52
  5687 0000302D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5688 00003032 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5689 00003036 48FFC6                  	inc rsi
  5690 00003039 EBEC                    	jmp .L_lambda_opt_params_loop_0f52
  5691                                  .L_lambda_opt_params_end_0f52:
  5692 0000303B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5693 0000303E 4889C3                  	mov rbx, rax
  5694 00003041 58                      	pop rax
  5695 00003042 C60004                  	mov byte [rax], T_closure
  5696 00003045 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5697 00003049 48C74009[56300000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f52
  5698 00003051 E939010000              	jmp .L_lambda_opt_end_0f52
  5699                                  .L_lambda_opt_code_0f52:	; lambda-simple body
  5700 00003056 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  5701 0000305C 740D                    	je .L_lambda_opt_arity_check_exact_0f52 ;	 if equal, go to exact arity
  5702 0000305E 7F42                    	jg .L_lambda_opt_arity_check_more_0f52 ;	 if greater than, go to arity more
  5703 00003060 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  5704 00003064 6A01                     	push 1
  5705 00003066 E96B260100              	jmp L_error_incorrect_arity_opt
  5706                                  	.L_lambda_opt_arity_check_exact_0f52:
  5707 0000306B 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  5708 00003070 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  5709 00003075 4883EC08                	sub rsp, 8
  5710 00003079 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  5711                                  	.L_lambda_opt_exact_shifting_loop_0f52:
  5712 0000307D 488B5108                	mov rdx, [rcx + 8]
  5713 00003081 488911                  	mov [rcx], rdx
  5714 00003084 4883C108                	add rcx, 8
  5715 00003088 4839CB                  	cmp rbx, rcx
  5716 0000308B 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f52
  5717                                  	.L_lambda_opt_exact_shifting_loop_end_0f52:
  5718 0000308D 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  5719 00003094 4883C001                	add rax, 1 ; 	arg count += 1
  5720 00003098 4889442410              	mov qword [rsp + 8 * 2], rax
  5721 0000309D E987000000              	jmp .L_lambda_opt_stack_adjusted_0f52
  5722                                  	.L_lambda_opt_arity_check_more_0f52:
  5723 000030A2 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  5723 000030A4 [0100000000000000] 
  5724 000030AC 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  5725 000030B2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f52
  5726                                  	.L_lambda_opt_stack_shrink_loop_0f52:
  5727 000030B4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  5728 000030B9 E84B260100              	call malloc ;	 allocated memory for the optional scheme list
  5729 000030BE C60021                  	mov byte[rax], T_pair ;	 set type pair
  5730 000030C1 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  5731 000030C5 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  5732 000030C8 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  5733 000030CD 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  5734 000030D2 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  5735 000030D6 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  5736                                  	.L_lambda_opt_more_shifting_loop_0f52:
  5737 000030DB 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  5738 000030DE 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  5739 000030E2 4883EB08                	sub rbx, 8 
  5740 000030E6 4839DC                  	cmp rsp, rbx
  5741 000030E9 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f52
  5742                                  	.L_lambda_opt_more_shifting_loop_end_0f52:
  5743 000030EB 4883C408                	add rsp, 8 ;	 update rsp
  5744 000030EF 488B5C2410              	mov rbx, [rsp + 8 * 2]
  5745 000030F4 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  5746 000030F8 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  5747 000030FD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5748 00003103 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f52
  5749                                  	.L_lambda_opt_stack_shrink_loop_exit_0f52:
  5750 00003105 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  5751 0000310A 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  5752 0000310F BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  5753 00003114 E8F0250100              	call malloc ;	 allocated memory for the optional scheme list
  5754 00003119 C60021                  	mov byte[rax], T_pair ;	 set type pair
  5755 0000311C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  5756 00003120 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  5757 00003124 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  5758                                  	.L_lambda_opt_stack_adjusted_0f52:
  5759 00003129 C8000000                	enter 0, 0
  5760                                  	; preparing a tail-call
  5761 0000312D 488B4528                	mov rax, PARAM(1)	; param s
  5762 00003131 50                      	push rax
  5763 00003132 488B4520                	mov rax, PARAM(0)	; param a
  5764 00003136 50                      	push rax
  5765 00003137 6A02                    	push 2	; arg count
  5766 00003139 488B4510                	mov rax, ENV
  5767 0000313D 488B00                  	mov rax, qword [rax + 8 * 0]
  5768 00003140 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5769 00003143 488B00                  	mov rax, qword [rax]
  5770 00003146 803804                  	cmp byte [rax], T_closure
  5771 00003149 0F8511250100            	jne L_error_non_closure
  5772 0000314F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5773                                  
  5774                                  	; recycling the current frame
  5775 00003152 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5776 00003155 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5777 00003158 B906000000              	mov rcx, 2 + 4
  5778 0000315D 488B5D18                	mov rbx, COUNT
  5779 00003161 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5780 00003166 488D55F8                	lea rdx, [rbp - 8 * 1]
  5781                                  .L_tc_recycle_frame_loop_8ec9:
  5782 0000316A 4883F900                	cmp rcx, 0
  5783 0000316E 7413                    	je .L_tc_recycle_frame_done_8ec9
  5784 00003170 488B32                  	mov rsi, qword [rdx]
  5785 00003173 488933                  	mov qword [rbx], rsi
  5786 00003176 48FFC9                  	dec rcx
  5787 00003179 4883EB08                	sub rbx, 8 * 1
  5788 0000317D 4883EA08                	sub rdx, 8 * 1
  5789 00003181 EBE7                    	jmp .L_tc_recycle_frame_loop_8ec9
  5790                                  .L_tc_recycle_frame_done_8ec9:
  5791 00003183 488D6308                	lea rsp, [rbx + 8 * 1]
  5792 00003187 5D                      	pop rbp	; the proc will restore it!
  5793 00003188 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5794 0000318B C9                      	leave
  5795 0000318C C22000                  	ret AND_KILL_FRAME(2)
  5796                                  .L_lambda_opt_end_0f52:	; new closure is in rax
  5797 0000318F C9                      	leave
  5798 00003190 C21800                  	ret AND_KILL_FRAME(1)
  5799                                  .L_lambda_simple_end_6d0b:	; new closure is in rax
  5800 00003193 803804                  	cmp byte [rax], T_closure
  5801 00003196 0F85C4240100            	jne L_error_non_closure
  5802 0000319C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5803 0000319F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5804 000031A2 48890425[B2140000]      	mov qword [free_var_106], rax
  5805 000031AA 48B8-                   	mov rax, sob_void
  5805 000031AC [0000000000000000] 
  5806                                  
  5807 000031B4 4889C7                  	mov rdi, rax
  5808 000031B7 E85F260100              	call print_sexpr_if_not_void
  5809                                  
  5810 000031BC 48B8-                   	mov rax, L_constants + 1881
  5810 000031BE [5907000000000000] 
  5811 000031C6 50                      	push rax
  5812 000031C7 6A01                    	push 1	; arg count
  5813 000031C9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5814 000031CE E836250100              	call malloc
  5815 000031D3 50                      	push rax
  5816 000031D4 BF00000000              	mov rdi, 8 * 0	; new rib
  5817 000031D9 E82B250100              	call malloc
  5818 000031DE 50                      	push rax
  5819 000031DF BF08000000              	mov rdi, 8 * 1	; extended env
  5820 000031E4 E820250100              	call malloc
  5821 000031E9 488B7D10                	mov rdi, ENV
  5822 000031ED BE00000000              	mov rsi, 0
  5823 000031F2 BA01000000              	mov rdx, 1
  5824                                  .L_lambda_simple_env_loop_6d0d:	; ext_env[i + 1] <-- env[i]
  5825 000031F7 4883FE00                	cmp rsi, 0
  5826 000031FB 7410                    	je .L_lambda_simple_env_end_6d0d
  5827 000031FD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5828 00003201 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5829 00003205 48FFC6                  	inc rsi
  5830 00003208 48FFC2                  	inc rdx
  5831 0000320B EBEA                    	jmp .L_lambda_simple_env_loop_6d0d
  5832                                  .L_lambda_simple_env_end_6d0d:
  5833 0000320D 5B                      	pop rbx
  5834 0000320E BE00000000              	mov rsi, 0
  5835                                  .L_lambda_simple_params_loop_6d0d:	; copy params
  5836 00003213 4883FE00                	cmp rsi, 0
  5837 00003217 740E                    	je .L_lambda_simple_params_end_6d0d
  5838 00003219 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5839 0000321E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5840 00003222 48FFC6                  	inc rsi
  5841 00003225 EBEC                    	jmp .L_lambda_simple_params_loop_6d0d
  5842                                  .L_lambda_simple_params_end_6d0d:
  5843 00003227 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5844 0000322A 4889C3                  	mov rbx, rax
  5845 0000322D 58                      	pop rax
  5846 0000322E C60004                  	mov byte [rax], T_closure
  5847 00003231 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5848 00003235 48C74009[42320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d0d
  5849 0000323D E904040000              	jmp .L_lambda_simple_end_6d0d
  5850                                  .L_lambda_simple_code_6d0d:	; lambda-simple body
  5851 00003242 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5852 00003248 740B                    	je .L_lambda_simple_arity_check_ok_6d0d
  5853 0000324A FF742410                	push qword [rsp + 8 * 2]
  5854 0000324E 6A01                    	push 1
  5855 00003250 E96D240100              	jmp L_error_incorrect_arity_simple
  5856                                  .L_lambda_simple_arity_check_ok_6d0d:
  5857 00003255 C8000000                	enter 0, 0
  5858                                  
  5859 00003259 BF08000000              	mov rdi, 8
  5860 0000325E E8A6240100              	call malloc
  5861 00003263 488B5D20                	mov rbx, PARAM(0)	; param run
  5862 00003267 488918                  	mov [rax], rbx	; box run
  5863 0000326A 48894520                	mov PARAM(0), rax	;replace param run with box
  5864 0000326E 48B8-                   	mov rax, sob_void
  5864 00003270 [0000000000000000] 
  5865                                  
  5866 00003278 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5867 0000327D E887240100              	call malloc
  5868 00003282 50                      	push rax
  5869 00003283 BF08000000              	mov rdi, 8 * 1	; new rib
  5870 00003288 E87C240100              	call malloc
  5871 0000328D 50                      	push rax
  5872 0000328E BF10000000              	mov rdi, 8 * 2	; extended env
  5873 00003293 E871240100              	call malloc
  5874 00003298 488B7D10                	mov rdi, ENV
  5875 0000329C BE00000000              	mov rsi, 0
  5876 000032A1 BA01000000              	mov rdx, 1
  5877                                  .L_lambda_simple_env_loop_6d0e:	; ext_env[i + 1] <-- env[i]
  5878 000032A6 4883FE01                	cmp rsi, 1
  5879 000032AA 7410                    	je .L_lambda_simple_env_end_6d0e
  5880 000032AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5881 000032B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5882 000032B4 48FFC6                  	inc rsi
  5883 000032B7 48FFC2                  	inc rdx
  5884 000032BA EBEA                    	jmp .L_lambda_simple_env_loop_6d0e
  5885                                  .L_lambda_simple_env_end_6d0e:
  5886 000032BC 5B                      	pop rbx
  5887 000032BD BE00000000              	mov rsi, 0
  5888                                  .L_lambda_simple_params_loop_6d0e:	; copy params
  5889 000032C2 4883FE01                	cmp rsi, 1
  5890 000032C6 740E                    	je .L_lambda_simple_params_end_6d0e
  5891 000032C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5892 000032CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5893 000032D1 48FFC6                  	inc rsi
  5894 000032D4 EBEC                    	jmp .L_lambda_simple_params_loop_6d0e
  5895                                  .L_lambda_simple_params_end_6d0e:
  5896 000032D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5897 000032D9 4889C3                  	mov rbx, rax
  5898 000032DC 58                      	pop rax
  5899 000032DD C60004                  	mov byte [rax], T_closure
  5900 000032E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5901 000032E4 48C74009[F1320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d0e
  5902 000032EC E920010000              	jmp .L_lambda_simple_end_6d0e
  5903                                  .L_lambda_simple_code_6d0e:	; lambda-simple body
  5904 000032F1 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5905 000032F7 740B                    	je .L_lambda_simple_arity_check_ok_6d0e
  5906 000032F9 FF742410                	push qword [rsp + 8 * 2]
  5907 000032FD 6A02                    	push 2
  5908 000032FF E9BE230100              	jmp L_error_incorrect_arity_simple
  5909                                  .L_lambda_simple_arity_check_ok_6d0e:
  5910 00003304 C8000000                	enter 0, 0
  5911 00003308 488B4528                	mov rax, PARAM(1)	; param s
  5912 0000330C 50                      	push rax
  5913 0000330D 6A01                    	push 1	; arg count
  5914 0000330F 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
  5915 00003317 803805                  	cmp byte [rax], T_undefined
  5916 0000331A 0F84BC220100            	je L_error_fvar_undefined
  5917 00003320 803804                  	cmp byte [rax], T_closure
  5918 00003323 0F8537230100            	jne L_error_non_closure
  5919 00003329 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5920 0000332C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5921                                  
  5922 0000332F 483D[02000000]          	cmp rax, sob_boolean_false
  5923 00003335 0F84CE000000            	je .L_if_else_76c3
  5924                                  	; preparing a tail-call
  5925 0000333B 488B4528                	mov rax, PARAM(1)	; param s
  5926 0000333F 50                      	push rax
  5927 00003340 6A01                    	push 1	; arg count
  5928 00003342 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  5929 0000334A 803805                  	cmp byte [rax], T_undefined
  5930 0000334D 0F8489220100            	je L_error_fvar_undefined
  5931 00003353 803804                  	cmp byte [rax], T_closure
  5932 00003356 0F8504230100            	jne L_error_non_closure
  5933 0000335C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5934 0000335F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5935 00003362 50                      	push rax
  5936 00003363 488B4528                	mov rax, PARAM(1)	; param s
  5937 00003367 50                      	push rax
  5938 00003368 6A01                    	push 1	; arg count
  5939 0000336A 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  5940 00003372 803805                  	cmp byte [rax], T_undefined
  5941 00003375 0F8461220100            	je L_error_fvar_undefined
  5942 0000337B 803804                  	cmp byte [rax], T_closure
  5943 0000337E 0F85DC220100            	jne L_error_non_closure
  5944 00003384 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5945 00003387 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5946 0000338A 50                      	push rax
  5947 0000338B 6A02                    	push 2	; arg count
  5948 0000338D 488B4510                	mov rax, ENV
  5949 00003391 488B00                  	mov rax, qword [rax + 8 * 0]
  5950 00003394 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5951 00003397 488B00                  	mov rax, qword [rax]
  5952 0000339A 803804                  	cmp byte [rax], T_closure
  5953 0000339D 0F85BD220100            	jne L_error_non_closure
  5954 000033A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5955 000033A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5956 000033A9 50                      	push rax
  5957 000033AA 488B4520                	mov rax, PARAM(0)	; param a
  5958 000033AE 50                      	push rax
  5959 000033AF 6A02                    	push 2	; arg count
  5960 000033B1 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  5961 000033B9 803805                  	cmp byte [rax], T_undefined
  5962 000033BC 0F841A220100            	je L_error_fvar_undefined
  5963 000033C2 803804                  	cmp byte [rax], T_closure
  5964 000033C5 0F8595220100            	jne L_error_non_closure
  5965 000033CB FF7001                  	push SOB_CLOSURE_ENV(rax)
  5966                                  
  5967                                  	; recycling the current frame
  5968 000033CE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5969 000033D1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5970 000033D4 B906000000              	mov rcx, 2 + 4
  5971 000033D9 488B5D18                	mov rbx, COUNT
  5972 000033DD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5973 000033E2 488D55F8                	lea rdx, [rbp - 8 * 1]
  5974                                  .L_tc_recycle_frame_loop_8eca:
  5975 000033E6 4883F900                	cmp rcx, 0
  5976 000033EA 7413                    	je .L_tc_recycle_frame_done_8eca
  5977 000033EC 488B32                  	mov rsi, qword [rdx]
  5978 000033EF 488933                  	mov qword [rbx], rsi
  5979 000033F2 48FFC9                  	dec rcx
  5980 000033F5 4883EB08                	sub rbx, 8 * 1
  5981 000033F9 4883EA08                	sub rdx, 8 * 1
  5982 000033FD EBE7                    	jmp .L_tc_recycle_frame_loop_8eca
  5983                                  .L_tc_recycle_frame_done_8eca:
  5984 000033FF 488D6308                	lea rsp, [rbx + 8 * 1]
  5985 00003403 5D                      	pop rbp	; the proc will restore it!
  5986 00003404 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5987                                  
  5988 00003407 EB04                    	jmp .L_if_end_76c3
  5989                                  
  5990                                  	.L_if_else_76c3:
  5991 00003409 488B4520                	mov rax, PARAM(0)	; param a
  5992                                  
  5993                                  	.L_if_end_76c3:
  5994 0000340D C9                      	leave
  5995 0000340E C22000                  	ret AND_KILL_FRAME(2)
  5996                                  .L_lambda_simple_end_6d0e:	; new closure is in rax
  5997                                  
  5998 00003411 50                      	push rax
  5999 00003412 488B4520                	mov rax, PARAM(0)	; param run
  6000                                  
  6001 00003416 8F00                    	pop qword[rax]
  6002 00003418 48B8-                   	mov rax, sob_void
  6002 0000341A [0000000000000000] 
  6003                                  
  6004 00003422 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6005 00003427 E8DD220100              	call malloc
  6006 0000342C 50                      	push rax
  6007 0000342D BF08000000              	mov rdi, 8 * 1	; new rib
  6008 00003432 E8D2220100              	call malloc
  6009 00003437 50                      	push rax
  6010 00003438 BF10000000              	mov rdi, 8 * 2	; extended env
  6011 0000343D E8C7220100              	call malloc
  6012 00003442 488B7D10                	mov rdi, ENV
  6013 00003446 BE00000000              	mov rsi, 0
  6014 0000344B BA01000000              	mov rdx, 1
  6015                                  .L_lambda_opt_env_loop_0f53:	; ext_env[i + 1] <-- env[i]
  6016 00003450 4883FE01                	cmp rsi, 1
  6017 00003454 7410                    	je .L_lambda_opt_env_end_0f53
  6018 00003456 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6019 0000345A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6020 0000345E 48FFC6                  	inc rsi
  6021 00003461 48FFC2                  	inc rdx
  6022 00003464 EBEA                    	jmp .L_lambda_opt_env_loop_0f53
  6023                                  .L_lambda_opt_env_end_0f53:
  6024 00003466 5B                      	pop rbx
  6025 00003467 BE00000000              	mov rsi, 0
  6026                                  .L_lambda_opt_params_loop_0f53:	; copy params
  6027 0000346C 4883FE01                	cmp rsi, 1
  6028 00003470 740E                    	je .L_lambda_opt_params_end_0f53
  6029 00003472 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6030 00003477 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6031 0000347B 48FFC6                  	inc rsi
  6032 0000347E EBEC                    	jmp .L_lambda_opt_params_loop_0f53
  6033                                  .L_lambda_opt_params_end_0f53:
  6034 00003480 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6035 00003483 4889C3                  	mov rbx, rax
  6036 00003486 58                      	pop rax
  6037 00003487 C60004                  	mov byte [rax], T_closure
  6038 0000348A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6039 0000348E 48C74009[9B340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f53
  6040 00003496 E9A7010000              	jmp .L_lambda_opt_end_0f53
  6041                                  .L_lambda_opt_code_0f53:	; lambda-simple body
  6042 0000349B 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  6043 000034A1 740D                    	je .L_lambda_opt_arity_check_exact_0f53 ;	 if equal, go to exact arity
  6044 000034A3 7F42                    	jg .L_lambda_opt_arity_check_more_0f53 ;	 if greater than, go to arity more
  6045 000034A5 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  6046 000034A9 6A01                     	push 1
  6047 000034AB E926220100              	jmp L_error_incorrect_arity_opt
  6048                                  	.L_lambda_opt_arity_check_exact_0f53:
  6049 000034B0 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  6050 000034B5 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  6051 000034BA 4883EC08                	sub rsp, 8
  6052 000034BE 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  6053                                  	.L_lambda_opt_exact_shifting_loop_0f53:
  6054 000034C2 488B5108                	mov rdx, [rcx + 8]
  6055 000034C6 488911                  	mov [rcx], rdx
  6056 000034C9 4883C108                	add rcx, 8
  6057 000034CD 4839CB                  	cmp rbx, rcx
  6058 000034D0 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f53
  6059                                  	.L_lambda_opt_exact_shifting_loop_end_0f53:
  6060 000034D2 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  6061 000034D9 4883C001                	add rax, 1 ; 	arg count += 1
  6062 000034DD 4889442410              	mov qword [rsp + 8 * 2], rax
  6063 000034E2 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f53
  6064                                  	.L_lambda_opt_arity_check_more_0f53:
  6065 000034E7 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  6065 000034E9 [0100000000000000] 
  6066 000034F1 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  6067 000034F7 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f53
  6068                                  	.L_lambda_opt_stack_shrink_loop_0f53:
  6069 000034F9 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6070 000034FE E806220100              	call malloc ;	 allocated memory for the optional scheme list
  6071 00003503 C60021                  	mov byte[rax], T_pair ;	 set type pair
  6072 00003506 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6073 0000350A 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  6074 0000350D 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  6075 00003512 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  6076 00003517 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  6077 0000351B 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  6078                                  	.L_lambda_opt_more_shifting_loop_0f53:
  6079 00003520 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  6080 00003523 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  6081 00003527 4883EB08                	sub rbx, 8 
  6082 0000352B 4839DC                  	cmp rsp, rbx
  6083 0000352E 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f53
  6084                                  	.L_lambda_opt_more_shifting_loop_end_0f53:
  6085 00003530 4883C408                	add rsp, 8 ;	 update rsp
  6086 00003534 488B5C2410              	mov rbx, [rsp + 8 * 2]
  6087 00003539 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  6088 0000353D 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  6089 00003542 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6090 00003548 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f53
  6091                                  	.L_lambda_opt_stack_shrink_loop_exit_0f53:
  6092 0000354A 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  6093 0000354F 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  6094 00003554 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6095 00003559 E8AB210100              	call malloc ;	 allocated memory for the optional scheme list
  6096 0000355E C60021                  	mov byte[rax], T_pair ;	 set type pair
  6097 00003561 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6098 00003565 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  6099 00003569 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  6100                                  	.L_lambda_opt_stack_adjusted_0f53:
  6101 0000356E C8000000                	enter 0, 0
  6102                                  	; preparing a tail-call
  6103 00003572 488B4528                	mov rax, PARAM(1)	; param s
  6104 00003576 50                      	push rax
  6105 00003577 6A01                    	push 1	; arg count
  6106 00003579 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  6107 00003581 803805                  	cmp byte [rax], T_undefined
  6108 00003584 0F8452200100            	je L_error_fvar_undefined
  6109 0000358A 803804                  	cmp byte [rax], T_closure
  6110 0000358D 0F85CD200100            	jne L_error_non_closure
  6111 00003593 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6112 00003596 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6113 00003599 50                      	push rax
  6114 0000359A 488B4528                	mov rax, PARAM(1)	; param s
  6115 0000359E 50                      	push rax
  6116 0000359F 6A01                    	push 1	; arg count
  6117 000035A1 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  6118 000035A9 803805                  	cmp byte [rax], T_undefined
  6119 000035AC 0F842A200100            	je L_error_fvar_undefined
  6120 000035B2 803804                  	cmp byte [rax], T_closure
  6121 000035B5 0F85A5200100            	jne L_error_non_closure
  6122 000035BB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6123 000035BE FF5009                  	call SOB_CLOSURE_CODE(rax)
  6124 000035C1 50                      	push rax
  6125 000035C2 6A02                    	push 2	; arg count
  6126 000035C4 488B4510                	mov rax, ENV
  6127 000035C8 488B00                  	mov rax, qword [rax + 8 * 0]
  6128 000035CB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6129 000035CE 488B00                  	mov rax, qword [rax]
  6130 000035D1 803804                  	cmp byte [rax], T_closure
  6131 000035D4 0F8586200100            	jne L_error_non_closure
  6132 000035DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  6133 000035DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6134 000035E0 50                      	push rax
  6135 000035E1 488B4520                	mov rax, PARAM(0)	; param f
  6136 000035E5 50                      	push rax
  6137 000035E6 6A02                    	push 2	; arg count
  6138 000035E8 488B0425[950F0000]      	mov rax, qword [free_var_29]	; free var __bin-apply
  6139 000035F0 803805                  	cmp byte [rax], T_undefined
  6140 000035F3 0F84E31F0100            	je L_error_fvar_undefined
  6141 000035F9 803804                  	cmp byte [rax], T_closure
  6142 000035FC 0F855E200100            	jne L_error_non_closure
  6143 00003602 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6144                                  
  6145                                  	; recycling the current frame
  6146 00003605 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6147 00003608 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6148 0000360B B906000000              	mov rcx, 2 + 4
  6149 00003610 488B5D18                	mov rbx, COUNT
  6150 00003614 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6151 00003619 488D55F8                	lea rdx, [rbp - 8 * 1]
  6152                                  .L_tc_recycle_frame_loop_8ecb:
  6153 0000361D 4883F900                	cmp rcx, 0
  6154 00003621 7413                    	je .L_tc_recycle_frame_done_8ecb
  6155 00003623 488B32                  	mov rsi, qword [rdx]
  6156 00003626 488933                  	mov qword [rbx], rsi
  6157 00003629 48FFC9                  	dec rcx
  6158 0000362C 4883EB08                	sub rbx, 8 * 1
  6159 00003630 4883EA08                	sub rdx, 8 * 1
  6160 00003634 EBE7                    	jmp .L_tc_recycle_frame_loop_8ecb
  6161                                  .L_tc_recycle_frame_done_8ecb:
  6162 00003636 488D6308                	lea rsp, [rbx + 8 * 1]
  6163 0000363A 5D                      	pop rbp	; the proc will restore it!
  6164 0000363B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6165 0000363E C9                      	leave
  6166 0000363F C22000                  	ret AND_KILL_FRAME(2)
  6167                                  .L_lambda_opt_end_0f53:	; new closure is in rax
  6168 00003642 C9                      	leave
  6169 00003643 C21800                  	ret AND_KILL_FRAME(1)
  6170                                  .L_lambda_simple_end_6d0d:	; new closure is in rax
  6171 00003646 803804                  	cmp byte [rax], T_closure
  6172 00003649 0F8511200100            	jne L_error_non_closure
  6173 0000364F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6174 00003652 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6175 00003655 48890425[C3140000]      	mov qword [free_var_107], rax
  6176 0000365D 48B8-                   	mov rax, sob_void
  6176 0000365F [0000000000000000] 
  6177                                  
  6178 00003667 4889C7                  	mov rdi, rax
  6179 0000366A E8AC210100              	call print_sexpr_if_not_void
  6180                                  
  6181 0000366F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6182 00003674 E890200100              	call malloc
  6183 00003679 50                      	push rax
  6184 0000367A BF00000000              	mov rdi, 8 * 0	; new rib
  6185 0000367F E885200100              	call malloc
  6186 00003684 50                      	push rax
  6187 00003685 BF08000000              	mov rdi, 8 * 1	; extended env
  6188 0000368A E87A200100              	call malloc
  6189 0000368F 488B7D10                	mov rdi, ENV
  6190 00003693 BE00000000              	mov rsi, 0
  6191 00003698 BA01000000              	mov rdx, 1
  6192                                  .L_lambda_opt_env_loop_0f54:	; ext_env[i + 1] <-- env[i]
  6193 0000369D 4883FE00                	cmp rsi, 0
  6194 000036A1 7410                    	je .L_lambda_opt_env_end_0f54
  6195 000036A3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6196 000036A7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6197 000036AB 48FFC6                  	inc rsi
  6198 000036AE 48FFC2                  	inc rdx
  6199 000036B1 EBEA                    	jmp .L_lambda_opt_env_loop_0f54
  6200                                  .L_lambda_opt_env_end_0f54:
  6201 000036B3 5B                      	pop rbx
  6202 000036B4 BE00000000              	mov rsi, 0
  6203                                  .L_lambda_opt_params_loop_0f54:	; copy params
  6204 000036B9 4883FE00                	cmp rsi, 0
  6205 000036BD 740E                    	je .L_lambda_opt_params_end_0f54
  6206 000036BF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6207 000036C4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6208 000036C8 48FFC6                  	inc rsi
  6209 000036CB EBEC                    	jmp .L_lambda_opt_params_loop_0f54
  6210                                  .L_lambda_opt_params_end_0f54:
  6211 000036CD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6212 000036D0 4889C3                  	mov rbx, rax
  6213 000036D3 58                      	pop rax
  6214 000036D4 C60004                  	mov byte [rax], T_closure
  6215 000036D7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6216 000036DB 48C74009[E8360000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f54
  6217 000036E3 E943040000              	jmp .L_lambda_opt_end_0f54
  6218                                  .L_lambda_opt_code_0f54:	; lambda-simple body
  6219 000036E8 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  6220 000036EE 740D                    	je .L_lambda_opt_arity_check_exact_0f54 ;	 if equal, go to exact arity
  6221 000036F0 7F42                    	jg .L_lambda_opt_arity_check_more_0f54 ;	 if greater than, go to arity more
  6222 000036F2 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  6223 000036F6 6A01                     	push 1
  6224 000036F8 E9D91F0100              	jmp L_error_incorrect_arity_opt
  6225                                  	.L_lambda_opt_arity_check_exact_0f54:
  6226 000036FD 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  6227 00003702 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  6228 00003707 4883EC08                	sub rsp, 8
  6229 0000370B 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  6230                                  	.L_lambda_opt_exact_shifting_loop_0f54:
  6231 0000370F 488B5108                	mov rdx, [rcx + 8]
  6232 00003713 488911                  	mov [rcx], rdx
  6233 00003716 4883C108                	add rcx, 8
  6234 0000371A 4839CB                  	cmp rbx, rcx
  6235 0000371D 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f54
  6236                                  	.L_lambda_opt_exact_shifting_loop_end_0f54:
  6237 0000371F 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  6238 00003726 4883C001                	add rax, 1 ; 	arg count += 1
  6239 0000372A 4889442410              	mov qword [rsp + 8 * 2], rax
  6240 0000372F E987000000              	jmp .L_lambda_opt_stack_adjusted_0f54
  6241                                  	.L_lambda_opt_arity_check_more_0f54:
  6242 00003734 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  6242 00003736 [0100000000000000] 
  6243 0000373E 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  6244 00003744 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f54
  6245                                  	.L_lambda_opt_stack_shrink_loop_0f54:
  6246 00003746 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6247 0000374B E8B91F0100              	call malloc ;	 allocated memory for the optional scheme list
  6248 00003750 C60021                  	mov byte[rax], T_pair ;	 set type pair
  6249 00003753 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6250 00003757 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  6251 0000375A 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  6252 0000375F 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  6253 00003764 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  6254 00003768 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  6255                                  	.L_lambda_opt_more_shifting_loop_0f54:
  6256 0000376D 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  6257 00003770 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  6258 00003774 4883EB08                	sub rbx, 8 
  6259 00003778 4839DC                  	cmp rsp, rbx
  6260 0000377B 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f54
  6261                                  	.L_lambda_opt_more_shifting_loop_end_0f54:
  6262 0000377D 4883C408                	add rsp, 8 ;	 update rsp
  6263 00003781 488B5C2410              	mov rbx, [rsp + 8 * 2]
  6264 00003786 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  6265 0000378A 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  6266 0000378F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6267 00003795 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f54
  6268                                  	.L_lambda_opt_stack_shrink_loop_exit_0f54:
  6269 00003797 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  6270 0000379C 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  6271 000037A1 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6272 000037A6 E85E1F0100              	call malloc ;	 allocated memory for the optional scheme list
  6273 000037AB C60021                  	mov byte[rax], T_pair ;	 set type pair
  6274 000037AE 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6275 000037B2 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  6276 000037B6 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  6277                                  	.L_lambda_opt_stack_adjusted_0f54:
  6278 000037BB C8000000                	enter 0, 0
  6279                                  	; preparing a tail-call
  6280 000037BF 48B8-                   	mov rax, L_constants + 1881
  6280 000037C1 [5907000000000000] 
  6281 000037C9 50                      	push rax
  6282 000037CA 6A01                    	push 1	; arg count
  6283 000037CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6284 000037D1 E8331F0100              	call malloc
  6285 000037D6 50                      	push rax
  6286 000037D7 BF10000000              	mov rdi, 8 * 2	; new rib
  6287 000037DC E8281F0100              	call malloc
  6288 000037E1 50                      	push rax
  6289 000037E2 BF10000000              	mov rdi, 8 * 2	; extended env
  6290 000037E7 E81D1F0100              	call malloc
  6291 000037EC 488B7D10                	mov rdi, ENV
  6292 000037F0 BE00000000              	mov rsi, 0
  6293 000037F5 BA01000000              	mov rdx, 1
  6294                                  .L_lambda_simple_env_loop_6d0f:	; ext_env[i + 1] <-- env[i]
  6295 000037FA 4883FE01                	cmp rsi, 1
  6296 000037FE 7410                    	je .L_lambda_simple_env_end_6d0f
  6297 00003800 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6298 00003804 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6299 00003808 48FFC6                  	inc rsi
  6300 0000380B 48FFC2                  	inc rdx
  6301 0000380E EBEA                    	jmp .L_lambda_simple_env_loop_6d0f
  6302                                  .L_lambda_simple_env_end_6d0f:
  6303 00003810 5B                      	pop rbx
  6304 00003811 BE00000000              	mov rsi, 0
  6305                                  .L_lambda_simple_params_loop_6d0f:	; copy params
  6306 00003816 4883FE02                	cmp rsi, 2
  6307 0000381A 740E                    	je .L_lambda_simple_params_end_6d0f
  6308 0000381C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6309 00003821 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6310 00003825 48FFC6                  	inc rsi
  6311 00003828 EBEC                    	jmp .L_lambda_simple_params_loop_6d0f
  6312                                  .L_lambda_simple_params_end_6d0f:
  6313 0000382A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6314 0000382D 4889C3                  	mov rbx, rax
  6315 00003830 58                      	pop rax
  6316 00003831 C60004                  	mov byte [rax], T_closure
  6317 00003834 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6318 00003838 48C74009[45380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d0f
  6319 00003840 E99D020000              	jmp .L_lambda_simple_end_6d0f
  6320                                  .L_lambda_simple_code_6d0f:	; lambda-simple body
  6321 00003845 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6322 0000384B 740B                    	je .L_lambda_simple_arity_check_ok_6d0f
  6323 0000384D FF742410                	push qword [rsp + 8 * 2]
  6324 00003851 6A01                    	push 1
  6325 00003853 E96A1E0100              	jmp L_error_incorrect_arity_simple
  6326                                  .L_lambda_simple_arity_check_ok_6d0f:
  6327 00003858 C8000000                	enter 0, 0
  6328                                  
  6329 0000385C BF08000000              	mov rdi, 8
  6330 00003861 E8A31E0100              	call malloc
  6331 00003866 488B5D20                	mov rbx, PARAM(0)	; param loop
  6332 0000386A 488918                  	mov [rax], rbx	; box loop
  6333 0000386D 48894520                	mov PARAM(0), rax	;replace param loop with box
  6334 00003871 48B8-                   	mov rax, sob_void
  6334 00003873 [0000000000000000] 
  6335                                  
  6336 0000387B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6337 00003880 E8841E0100              	call malloc
  6338 00003885 50                      	push rax
  6339 00003886 BF08000000              	mov rdi, 8 * 1	; new rib
  6340 0000388B E8791E0100              	call malloc
  6341 00003890 50                      	push rax
  6342 00003891 BF18000000              	mov rdi, 8 * 3	; extended env
  6343 00003896 E86E1E0100              	call malloc
  6344 0000389B 488B7D10                	mov rdi, ENV
  6345 0000389F BE00000000              	mov rsi, 0
  6346 000038A4 BA01000000              	mov rdx, 1
  6347                                  .L_lambda_simple_env_loop_6d10:	; ext_env[i + 1] <-- env[i]
  6348 000038A9 4883FE02                	cmp rsi, 2
  6349 000038AD 7410                    	je .L_lambda_simple_env_end_6d10
  6350 000038AF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6351 000038B3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6352 000038B7 48FFC6                  	inc rsi
  6353 000038BA 48FFC2                  	inc rdx
  6354 000038BD EBEA                    	jmp .L_lambda_simple_env_loop_6d10
  6355                                  .L_lambda_simple_env_end_6d10:
  6356 000038BF 5B                      	pop rbx
  6357 000038C0 BE00000000              	mov rsi, 0
  6358                                  .L_lambda_simple_params_loop_6d10:	; copy params
  6359 000038C5 4883FE01                	cmp rsi, 1
  6360 000038C9 740E                    	je .L_lambda_simple_params_end_6d10
  6361 000038CB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6362 000038D0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6363 000038D4 48FFC6                  	inc rsi
  6364 000038D7 EBEC                    	jmp .L_lambda_simple_params_loop_6d10
  6365                                  .L_lambda_simple_params_end_6d10:
  6366 000038D9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6367 000038DC 4889C3                  	mov rbx, rax
  6368 000038DF 58                      	pop rax
  6369 000038E0 C60004                  	mov byte [rax], T_closure
  6370 000038E3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6371 000038E7 48C74009[F4380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d10
  6372 000038EF E97F010000              	jmp .L_lambda_simple_end_6d10
  6373                                  .L_lambda_simple_code_6d10:	; lambda-simple body
  6374 000038F4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6375 000038FA 740B                    	je .L_lambda_simple_arity_check_ok_6d10
  6376 000038FC FF742410                	push qword [rsp + 8 * 2]
  6377 00003900 6A01                    	push 1
  6378 00003902 E9BB1D0100              	jmp L_error_incorrect_arity_simple
  6379                                  .L_lambda_simple_arity_check_ok_6d10:
  6380 00003907 C8000000                	enter 0, 0
  6381 0000390B 488B4520                	mov rax, PARAM(0)	; param s
  6382 0000390F 50                      	push rax
  6383 00003910 6A01                    	push 1	; arg count
  6384 00003912 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  6385 0000391A 803805                  	cmp byte [rax], T_undefined
  6386 0000391D 0F84B91C0100            	je L_error_fvar_undefined
  6387 00003923 803804                  	cmp byte [rax], T_closure
  6388 00003926 0F85341D0100            	jne L_error_non_closure
  6389 0000392C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6390 0000392F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6391 00003932 50                      	push rax
  6392 00003933 6A01                    	push 1	; arg count
  6393 00003935 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
  6394 0000393D 803805                  	cmp byte [rax], T_undefined
  6395 00003940 0F84961C0100            	je L_error_fvar_undefined
  6396 00003946 803804                  	cmp byte [rax], T_closure
  6397 00003949 0F85111D0100            	jne L_error_non_closure
  6398 0000394F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6399 00003952 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6400                                  
  6401 00003955 483D[02000000]          	cmp rax, sob_boolean_false
  6402 0000395B 0F8404010000            	je .L_if_else_76c4
  6403 00003961 488B4520                	mov rax, PARAM(0)	; param s
  6404 00003965 50                      	push rax
  6405 00003966 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  6406 0000396E 803805                  	cmp byte [rax], T_undefined
  6407 00003971 0F84651C0100            	je L_error_fvar_undefined
  6408 00003977 50                      	push rax
  6409 00003978 6A02                    	push 2	; arg count
  6410 0000397A 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  6411 00003982 803805                  	cmp byte [rax], T_undefined
  6412 00003985 0F84511C0100            	je L_error_fvar_undefined
  6413 0000398B 803804                  	cmp byte [rax], T_closure
  6414 0000398E 0F85CC1C0100            	jne L_error_non_closure
  6415 00003994 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6416 00003997 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6417 0000399A 50                      	push rax
  6418 0000399B 488B4510                	mov rax, ENV
  6419 0000399F 488B4008                	mov rax, qword [rax + 8 * 1]
  6420 000039A3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6421 000039A6 50                      	push rax
  6422 000039A7 6A02                    	push 2	; arg count
  6423 000039A9 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
  6424 000039B1 803805                  	cmp byte [rax], T_undefined
  6425 000039B4 0F84221C0100            	je L_error_fvar_undefined
  6426 000039BA 803804                  	cmp byte [rax], T_closure
  6427 000039BD 0F859D1C0100            	jne L_error_non_closure
  6428 000039C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6429 000039C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6430 000039C9 483D[02000000]          	cmp rax, sob_boolean_false
  6431 000039CF 0F858E000000            	jne .L_or_end_0772
  6432                                  	; preparing a tail-call
  6433 000039D5 488B4520                	mov rax, PARAM(0)	; param s
  6434 000039D9 50                      	push rax
  6435 000039DA 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  6436 000039E2 803805                  	cmp byte [rax], T_undefined
  6437 000039E5 0F84F11B0100            	je L_error_fvar_undefined
  6438 000039EB 50                      	push rax
  6439 000039EC 6A02                    	push 2	; arg count
  6440 000039EE 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  6441 000039F6 803805                  	cmp byte [rax], T_undefined
  6442 000039F9 0F84DD1B0100            	je L_error_fvar_undefined
  6443 000039FF 803804                  	cmp byte [rax], T_closure
  6444 00003A02 0F85581C0100            	jne L_error_non_closure
  6445 00003A08 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6446 00003A0B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6447 00003A0E 50                      	push rax
  6448 00003A0F 6A01                    	push 1	; arg count
  6449 00003A11 488B4510                	mov rax, ENV
  6450 00003A15 488B00                  	mov rax, qword [rax + 8 * 0]
  6451 00003A18 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6452 00003A1B 488B00                  	mov rax, qword [rax]
  6453 00003A1E 803804                  	cmp byte [rax], T_closure
  6454 00003A21 0F85391C0100            	jne L_error_non_closure
  6455 00003A27 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6456                                  
  6457                                  	; recycling the current frame
  6458 00003A2A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6459 00003A2D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6460 00003A30 B905000000              	mov rcx, 1 + 4
  6461 00003A35 488B5D18                	mov rbx, COUNT
  6462 00003A39 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6463 00003A3E 488D55F8                	lea rdx, [rbp - 8 * 1]
  6464                                  .L_tc_recycle_frame_loop_8ecc:
  6465 00003A42 4883F900                	cmp rcx, 0
  6466 00003A46 7413                    	je .L_tc_recycle_frame_done_8ecc
  6467 00003A48 488B32                  	mov rsi, qword [rdx]
  6468 00003A4B 488933                  	mov qword [rbx], rsi
  6469 00003A4E 48FFC9                  	dec rcx
  6470 00003A51 4883EB08                	sub rbx, 8 * 1
  6471 00003A55 4883EA08                	sub rdx, 8 * 1
  6472 00003A59 EBE7                    	jmp .L_tc_recycle_frame_loop_8ecc
  6473                                  .L_tc_recycle_frame_done_8ecc:
  6474 00003A5B 488D6308                	lea rsp, [rbx + 8 * 1]
  6475 00003A5F 5D                      	pop rbp	; the proc will restore it!
  6476 00003A60 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6477                                  .L_or_end_0772:
  6478                                  
  6479 00003A63 EB0A                    	jmp .L_if_end_76c4
  6480                                  
  6481                                  	.L_if_else_76c4:
  6482 00003A65 48B8-                   	mov rax, L_constants + 2
  6482 00003A67 [0200000000000000] 
  6483                                  
  6484                                  	.L_if_end_76c4:
  6485 00003A6F C9                      	leave
  6486 00003A70 C21800                  	ret AND_KILL_FRAME(1)
  6487                                  .L_lambda_simple_end_6d10:	; new closure is in rax
  6488                                  
  6489 00003A73 50                      	push rax
  6490 00003A74 488B4520                	mov rax, PARAM(0)	; param loop
  6491                                  
  6492 00003A78 8F00                    	pop qword[rax]
  6493 00003A7A 48B8-                   	mov rax, sob_void
  6493 00003A7C [0000000000000000] 
  6494                                  
  6495                                  	; preparing a tail-call
  6496 00003A84 488B4510                	mov rax, ENV
  6497 00003A88 488B00                  	mov rax, qword [rax + 8 * 0]
  6498 00003A8B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6499 00003A8F 50                      	push rax
  6500 00003A90 6A01                    	push 1	; arg count
  6501 00003A92 488B4520                	mov rax, PARAM(0)	; param loop
  6502 00003A96 488B00                  	mov rax, qword [rax]
  6503 00003A99 803804                  	cmp byte [rax], T_closure
  6504 00003A9C 0F85BE1B0100            	jne L_error_non_closure
  6505 00003AA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6506                                  
  6507                                  	; recycling the current frame
  6508 00003AA5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6509 00003AA8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6510 00003AAB B905000000              	mov rcx, 1 + 4
  6511 00003AB0 488B5D18                	mov rbx, COUNT
  6512 00003AB4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6513 00003AB9 488D55F8                	lea rdx, [rbp - 8 * 1]
  6514                                  .L_tc_recycle_frame_loop_8ecd:
  6515 00003ABD 4883F900                	cmp rcx, 0
  6516 00003AC1 7413                    	je .L_tc_recycle_frame_done_8ecd
  6517 00003AC3 488B32                  	mov rsi, qword [rdx]
  6518 00003AC6 488933                  	mov qword [rbx], rsi
  6519 00003AC9 48FFC9                  	dec rcx
  6520 00003ACC 4883EB08                	sub rbx, 8 * 1
  6521 00003AD0 4883EA08                	sub rdx, 8 * 1
  6522 00003AD4 EBE7                    	jmp .L_tc_recycle_frame_loop_8ecd
  6523                                  .L_tc_recycle_frame_done_8ecd:
  6524 00003AD6 488D6308                	lea rsp, [rbx + 8 * 1]
  6525 00003ADA 5D                      	pop rbp	; the proc will restore it!
  6526 00003ADB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6527 00003ADE C9                      	leave
  6528 00003ADF C21800                  	ret AND_KILL_FRAME(1)
  6529                                  .L_lambda_simple_end_6d0f:	; new closure is in rax
  6530 00003AE2 803804                  	cmp byte [rax], T_closure
  6531 00003AE5 0F85751B0100            	jne L_error_non_closure
  6532 00003AEB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6533                                  
  6534                                  	; recycling the current frame
  6535 00003AEE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6536 00003AF1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6537 00003AF4 B905000000              	mov rcx, 1 + 4
  6538 00003AF9 488B5D18                	mov rbx, COUNT
  6539 00003AFD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6540 00003B02 488D55F8                	lea rdx, [rbp - 8 * 1]
  6541                                  .L_tc_recycle_frame_loop_8ece:
  6542 00003B06 4883F900                	cmp rcx, 0
  6543 00003B0A 7413                    	je .L_tc_recycle_frame_done_8ece
  6544 00003B0C 488B32                  	mov rsi, qword [rdx]
  6545 00003B0F 488933                  	mov qword [rbx], rsi
  6546 00003B12 48FFC9                  	dec rcx
  6547 00003B15 4883EB08                	sub rbx, 8 * 1
  6548 00003B19 4883EA08                	sub rdx, 8 * 1
  6549 00003B1D EBE7                    	jmp .L_tc_recycle_frame_loop_8ece
  6550                                  .L_tc_recycle_frame_done_8ece:
  6551 00003B1F 488D6308                	lea rsp, [rbx + 8 * 1]
  6552 00003B23 5D                      	pop rbp	; the proc will restore it!
  6553 00003B24 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6554 00003B27 C9                      	leave
  6555 00003B28 C22000                  	ret AND_KILL_FRAME(2)
  6556                                  .L_lambda_opt_end_0f54:	; new closure is in rax
  6557 00003B2B 48890425[D4140000]      	mov qword [free_var_108], rax
  6558 00003B33 48B8-                   	mov rax, sob_void
  6558 00003B35 [0000000000000000] 
  6559                                  
  6560 00003B3D 4889C7                  	mov rdi, rax
  6561 00003B40 E8D61C0100              	call print_sexpr_if_not_void
  6562                                  
  6563 00003B45 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6564 00003B4A E8BA1B0100              	call malloc
  6565 00003B4F 50                      	push rax
  6566 00003B50 BF00000000              	mov rdi, 8 * 0	; new rib
  6567 00003B55 E8AF1B0100              	call malloc
  6568 00003B5A 50                      	push rax
  6569 00003B5B BF08000000              	mov rdi, 8 * 1	; extended env
  6570 00003B60 E8A41B0100              	call malloc
  6571 00003B65 488B7D10                	mov rdi, ENV
  6572 00003B69 BE00000000              	mov rsi, 0
  6573 00003B6E BA01000000              	mov rdx, 1
  6574                                  .L_lambda_opt_env_loop_0f55:	; ext_env[i + 1] <-- env[i]
  6575 00003B73 4883FE00                	cmp rsi, 0
  6576 00003B77 7410                    	je .L_lambda_opt_env_end_0f55
  6577 00003B79 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6578 00003B7D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6579 00003B81 48FFC6                  	inc rsi
  6580 00003B84 48FFC2                  	inc rdx
  6581 00003B87 EBEA                    	jmp .L_lambda_opt_env_loop_0f55
  6582                                  .L_lambda_opt_env_end_0f55:
  6583 00003B89 5B                      	pop rbx
  6584 00003B8A BE00000000              	mov rsi, 0
  6585                                  .L_lambda_opt_params_loop_0f55:	; copy params
  6586 00003B8F 4883FE00                	cmp rsi, 0
  6587 00003B93 740E                    	je .L_lambda_opt_params_end_0f55
  6588 00003B95 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6589 00003B9A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6590 00003B9E 48FFC6                  	inc rsi
  6591 00003BA1 EBEC                    	jmp .L_lambda_opt_params_loop_0f55
  6592                                  .L_lambda_opt_params_end_0f55:
  6593 00003BA3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6594 00003BA6 4889C3                  	mov rbx, rax
  6595 00003BA9 58                      	pop rax
  6596 00003BAA C60004                  	mov byte [rax], T_closure
  6597 00003BAD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6598 00003BB1 48C74009[BE3B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f55
  6599 00003BB9 E943040000              	jmp .L_lambda_opt_end_0f55
  6600                                  .L_lambda_opt_code_0f55:	; lambda-simple body
  6601 00003BBE 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  6602 00003BC4 740D                    	je .L_lambda_opt_arity_check_exact_0f55 ;	 if equal, go to exact arity
  6603 00003BC6 7F42                    	jg .L_lambda_opt_arity_check_more_0f55 ;	 if greater than, go to arity more
  6604 00003BC8 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  6605 00003BCC 6A01                     	push 1
  6606 00003BCE E9031B0100              	jmp L_error_incorrect_arity_opt
  6607                                  	.L_lambda_opt_arity_check_exact_0f55:
  6608 00003BD3 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  6609 00003BD8 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  6610 00003BDD 4883EC08                	sub rsp, 8
  6611 00003BE1 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  6612                                  	.L_lambda_opt_exact_shifting_loop_0f55:
  6613 00003BE5 488B5108                	mov rdx, [rcx + 8]
  6614 00003BE9 488911                  	mov [rcx], rdx
  6615 00003BEC 4883C108                	add rcx, 8
  6616 00003BF0 4839CB                  	cmp rbx, rcx
  6617 00003BF3 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f55
  6618                                  	.L_lambda_opt_exact_shifting_loop_end_0f55:
  6619 00003BF5 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  6620 00003BFC 4883C001                	add rax, 1 ; 	arg count += 1
  6621 00003C00 4889442410              	mov qword [rsp + 8 * 2], rax
  6622 00003C05 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f55
  6623                                  	.L_lambda_opt_arity_check_more_0f55:
  6624 00003C0A 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  6624 00003C0C [0100000000000000] 
  6625 00003C14 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  6626 00003C1A 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f55
  6627                                  	.L_lambda_opt_stack_shrink_loop_0f55:
  6628 00003C1C BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6629 00003C21 E8E31A0100              	call malloc ;	 allocated memory for the optional scheme list
  6630 00003C26 C60021                  	mov byte[rax], T_pair ;	 set type pair
  6631 00003C29 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6632 00003C2D 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  6633 00003C30 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  6634 00003C35 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  6635 00003C3A 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  6636 00003C3E 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  6637                                  	.L_lambda_opt_more_shifting_loop_0f55:
  6638 00003C43 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  6639 00003C46 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  6640 00003C4A 4883EB08                	sub rbx, 8 
  6641 00003C4E 4839DC                  	cmp rsp, rbx
  6642 00003C51 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f55
  6643                                  	.L_lambda_opt_more_shifting_loop_end_0f55:
  6644 00003C53 4883C408                	add rsp, 8 ;	 update rsp
  6645 00003C57 488B5C2410              	mov rbx, [rsp + 8 * 2]
  6646 00003C5C 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  6647 00003C60 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  6648 00003C65 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6649 00003C6B 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f55
  6650                                  	.L_lambda_opt_stack_shrink_loop_exit_0f55:
  6651 00003C6D 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  6652 00003C72 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  6653 00003C77 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6654 00003C7C E8881A0100              	call malloc ;	 allocated memory for the optional scheme list
  6655 00003C81 C60021                  	mov byte[rax], T_pair ;	 set type pair
  6656 00003C84 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6657 00003C88 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  6658 00003C8C 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  6659                                  	.L_lambda_opt_stack_adjusted_0f55:
  6660 00003C91 C8000000                	enter 0, 0
  6661                                  	; preparing a tail-call
  6662 00003C95 48B8-                   	mov rax, L_constants + 1881
  6662 00003C97 [5907000000000000] 
  6663 00003C9F 50                      	push rax
  6664 00003CA0 6A01                    	push 1	; arg count
  6665 00003CA2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6666 00003CA7 E85D1A0100              	call malloc
  6667 00003CAC 50                      	push rax
  6668 00003CAD BF10000000              	mov rdi, 8 * 2	; new rib
  6669 00003CB2 E8521A0100              	call malloc
  6670 00003CB7 50                      	push rax
  6671 00003CB8 BF10000000              	mov rdi, 8 * 2	; extended env
  6672 00003CBD E8471A0100              	call malloc
  6673 00003CC2 488B7D10                	mov rdi, ENV
  6674 00003CC6 BE00000000              	mov rsi, 0
  6675 00003CCB BA01000000              	mov rdx, 1
  6676                                  .L_lambda_simple_env_loop_6d11:	; ext_env[i + 1] <-- env[i]
  6677 00003CD0 4883FE01                	cmp rsi, 1
  6678 00003CD4 7410                    	je .L_lambda_simple_env_end_6d11
  6679 00003CD6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6680 00003CDA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6681 00003CDE 48FFC6                  	inc rsi
  6682 00003CE1 48FFC2                  	inc rdx
  6683 00003CE4 EBEA                    	jmp .L_lambda_simple_env_loop_6d11
  6684                                  .L_lambda_simple_env_end_6d11:
  6685 00003CE6 5B                      	pop rbx
  6686 00003CE7 BE00000000              	mov rsi, 0
  6687                                  .L_lambda_simple_params_loop_6d11:	; copy params
  6688 00003CEC 4883FE02                	cmp rsi, 2
  6689 00003CF0 740E                    	je .L_lambda_simple_params_end_6d11
  6690 00003CF2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6691 00003CF7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6692 00003CFB 48FFC6                  	inc rsi
  6693 00003CFE EBEC                    	jmp .L_lambda_simple_params_loop_6d11
  6694                                  .L_lambda_simple_params_end_6d11:
  6695 00003D00 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6696 00003D03 4889C3                  	mov rbx, rax
  6697 00003D06 58                      	pop rax
  6698 00003D07 C60004                  	mov byte [rax], T_closure
  6699 00003D0A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6700 00003D0E 48C74009[1B3D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d11
  6701 00003D16 E99D020000              	jmp .L_lambda_simple_end_6d11
  6702                                  .L_lambda_simple_code_6d11:	; lambda-simple body
  6703 00003D1B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6704 00003D21 740B                    	je .L_lambda_simple_arity_check_ok_6d11
  6705 00003D23 FF742410                	push qword [rsp + 8 * 2]
  6706 00003D27 6A01                    	push 1
  6707 00003D29 E994190100              	jmp L_error_incorrect_arity_simple
  6708                                  .L_lambda_simple_arity_check_ok_6d11:
  6709 00003D2E C8000000                	enter 0, 0
  6710                                  
  6711 00003D32 BF08000000              	mov rdi, 8
  6712 00003D37 E8CD190100              	call malloc
  6713 00003D3C 488B5D20                	mov rbx, PARAM(0)	; param loop
  6714 00003D40 488918                  	mov [rax], rbx	; box loop
  6715 00003D43 48894520                	mov PARAM(0), rax	;replace param loop with box
  6716 00003D47 48B8-                   	mov rax, sob_void
  6716 00003D49 [0000000000000000] 
  6717                                  
  6718 00003D51 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6719 00003D56 E8AE190100              	call malloc
  6720 00003D5B 50                      	push rax
  6721 00003D5C BF08000000              	mov rdi, 8 * 1	; new rib
  6722 00003D61 E8A3190100              	call malloc
  6723 00003D66 50                      	push rax
  6724 00003D67 BF18000000              	mov rdi, 8 * 3	; extended env
  6725 00003D6C E898190100              	call malloc
  6726 00003D71 488B7D10                	mov rdi, ENV
  6727 00003D75 BE00000000              	mov rsi, 0
  6728 00003D7A BA01000000              	mov rdx, 1
  6729                                  .L_lambda_simple_env_loop_6d12:	; ext_env[i + 1] <-- env[i]
  6730 00003D7F 4883FE02                	cmp rsi, 2
  6731 00003D83 7410                    	je .L_lambda_simple_env_end_6d12
  6732 00003D85 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6733 00003D89 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6734 00003D8D 48FFC6                  	inc rsi
  6735 00003D90 48FFC2                  	inc rdx
  6736 00003D93 EBEA                    	jmp .L_lambda_simple_env_loop_6d12
  6737                                  .L_lambda_simple_env_end_6d12:
  6738 00003D95 5B                      	pop rbx
  6739 00003D96 BE00000000              	mov rsi, 0
  6740                                  .L_lambda_simple_params_loop_6d12:	; copy params
  6741 00003D9B 4883FE01                	cmp rsi, 1
  6742 00003D9F 740E                    	je .L_lambda_simple_params_end_6d12
  6743 00003DA1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6744 00003DA6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6745 00003DAA 48FFC6                  	inc rsi
  6746 00003DAD EBEC                    	jmp .L_lambda_simple_params_loop_6d12
  6747                                  .L_lambda_simple_params_end_6d12:
  6748 00003DAF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6749 00003DB2 4889C3                  	mov rbx, rax
  6750 00003DB5 58                      	pop rax
  6751 00003DB6 C60004                  	mov byte [rax], T_closure
  6752 00003DB9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6753 00003DBD 48C74009[CA3D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d12
  6754 00003DC5 E97F010000              	jmp .L_lambda_simple_end_6d12
  6755                                  .L_lambda_simple_code_6d12:	; lambda-simple body
  6756 00003DCA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6757 00003DD0 740B                    	je .L_lambda_simple_arity_check_ok_6d12
  6758 00003DD2 FF742410                	push qword [rsp + 8 * 2]
  6759 00003DD6 6A01                    	push 1
  6760 00003DD8 E9E5180100              	jmp L_error_incorrect_arity_simple
  6761                                  .L_lambda_simple_arity_check_ok_6d12:
  6762 00003DDD C8000000                	enter 0, 0
  6763 00003DE1 488B4520                	mov rax, PARAM(0)	; param s
  6764 00003DE5 50                      	push rax
  6765 00003DE6 6A01                    	push 1	; arg count
  6766 00003DE8 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  6767 00003DF0 803805                  	cmp byte [rax], T_undefined
  6768 00003DF3 0F84E3170100            	je L_error_fvar_undefined
  6769 00003DF9 803804                  	cmp byte [rax], T_closure
  6770 00003DFC 0F855E180100            	jne L_error_non_closure
  6771 00003E02 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6772 00003E05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6773 00003E08 50                      	push rax
  6774 00003E09 6A01                    	push 1	; arg count
  6775 00003E0B 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  6776 00003E13 803805                  	cmp byte [rax], T_undefined
  6777 00003E16 0F84C0170100            	je L_error_fvar_undefined
  6778 00003E1C 803804                  	cmp byte [rax], T_closure
  6779 00003E1F 0F853B180100            	jne L_error_non_closure
  6780 00003E25 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6781 00003E28 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6782 00003E2B 483D[02000000]          	cmp rax, sob_boolean_false
  6783 00003E31 0F850E010000            	jne .L_or_end_0773
  6784 00003E37 488B4520                	mov rax, PARAM(0)	; param s
  6785 00003E3B 50                      	push rax
  6786 00003E3C 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  6787 00003E44 803805                  	cmp byte [rax], T_undefined
  6788 00003E47 0F848F170100            	je L_error_fvar_undefined
  6789 00003E4D 50                      	push rax
  6790 00003E4E 6A02                    	push 2	; arg count
  6791 00003E50 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  6792 00003E58 803805                  	cmp byte [rax], T_undefined
  6793 00003E5B 0F847B170100            	je L_error_fvar_undefined
  6794 00003E61 803804                  	cmp byte [rax], T_closure
  6795 00003E64 0F85F6170100            	jne L_error_non_closure
  6796 00003E6A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6797 00003E6D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6798 00003E70 50                      	push rax
  6799 00003E71 488B4510                	mov rax, ENV
  6800 00003E75 488B4008                	mov rax, qword [rax + 8 * 1]
  6801 00003E79 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6802 00003E7C 50                      	push rax
  6803 00003E7D 6A02                    	push 2	; arg count
  6804 00003E7F 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
  6805 00003E87 803805                  	cmp byte [rax], T_undefined
  6806 00003E8A 0F844C170100            	je L_error_fvar_undefined
  6807 00003E90 803804                  	cmp byte [rax], T_closure
  6808 00003E93 0F85C7170100            	jne L_error_non_closure
  6809 00003E99 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6810 00003E9C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6811                                  
  6812 00003E9F 483D[02000000]          	cmp rax, sob_boolean_false
  6813 00003EA5 0F8490000000            	je .L_if_else_76c5
  6814                                  	; preparing a tail-call
  6815 00003EAB 488B4520                	mov rax, PARAM(0)	; param s
  6816 00003EAF 50                      	push rax
  6817 00003EB0 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  6818 00003EB8 803805                  	cmp byte [rax], T_undefined
  6819 00003EBB 0F841B170100            	je L_error_fvar_undefined
  6820 00003EC1 50                      	push rax
  6821 00003EC2 6A02                    	push 2	; arg count
  6822 00003EC4 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  6823 00003ECC 803805                  	cmp byte [rax], T_undefined
  6824 00003ECF 0F8407170100            	je L_error_fvar_undefined
  6825 00003ED5 803804                  	cmp byte [rax], T_closure
  6826 00003ED8 0F8582170100            	jne L_error_non_closure
  6827 00003EDE FF7001                  	push SOB_CLOSURE_ENV(rax)
  6828 00003EE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6829 00003EE4 50                      	push rax
  6830 00003EE5 6A01                    	push 1	; arg count
  6831 00003EE7 488B4510                	mov rax, ENV
  6832 00003EEB 488B00                  	mov rax, qword [rax + 8 * 0]
  6833 00003EEE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6834 00003EF1 488B00                  	mov rax, qword [rax]
  6835 00003EF4 803804                  	cmp byte [rax], T_closure
  6836 00003EF7 0F8563170100            	jne L_error_non_closure
  6837 00003EFD FF7001                  	push SOB_CLOSURE_ENV(rax)
  6838                                  
  6839                                  	; recycling the current frame
  6840 00003F00 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6841 00003F03 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6842 00003F06 B905000000              	mov rcx, 1 + 4
  6843 00003F0B 488B5D18                	mov rbx, COUNT
  6844 00003F0F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6845 00003F14 488D55F8                	lea rdx, [rbp - 8 * 1]
  6846                                  .L_tc_recycle_frame_loop_8ecf:
  6847 00003F18 4883F900                	cmp rcx, 0
  6848 00003F1C 7413                    	je .L_tc_recycle_frame_done_8ecf
  6849 00003F1E 488B32                  	mov rsi, qword [rdx]
  6850 00003F21 488933                  	mov qword [rbx], rsi
  6851 00003F24 48FFC9                  	dec rcx
  6852 00003F27 4883EB08                	sub rbx, 8 * 1
  6853 00003F2B 4883EA08                	sub rdx, 8 * 1
  6854 00003F2F EBE7                    	jmp .L_tc_recycle_frame_loop_8ecf
  6855                                  .L_tc_recycle_frame_done_8ecf:
  6856 00003F31 488D6308                	lea rsp, [rbx + 8 * 1]
  6857 00003F35 5D                      	pop rbp	; the proc will restore it!
  6858 00003F36 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6859                                  
  6860 00003F39 EB0A                    	jmp .L_if_end_76c5
  6861                                  
  6862                                  	.L_if_else_76c5:
  6863 00003F3B 48B8-                   	mov rax, L_constants + 2
  6863 00003F3D [0200000000000000] 
  6864                                  
  6865                                  	.L_if_end_76c5:
  6866                                  .L_or_end_0773:
  6867 00003F45 C9                      	leave
  6868 00003F46 C21800                  	ret AND_KILL_FRAME(1)
  6869                                  .L_lambda_simple_end_6d12:	; new closure is in rax
  6870                                  
  6871 00003F49 50                      	push rax
  6872 00003F4A 488B4520                	mov rax, PARAM(0)	; param loop
  6873                                  
  6874 00003F4E 8F00                    	pop qword[rax]
  6875 00003F50 48B8-                   	mov rax, sob_void
  6875 00003F52 [0000000000000000] 
  6876                                  
  6877                                  	; preparing a tail-call
  6878 00003F5A 488B4510                	mov rax, ENV
  6879 00003F5E 488B00                  	mov rax, qword [rax + 8 * 0]
  6880 00003F61 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6881 00003F65 50                      	push rax
  6882 00003F66 6A01                    	push 1	; arg count
  6883 00003F68 488B4520                	mov rax, PARAM(0)	; param loop
  6884 00003F6C 488B00                  	mov rax, qword [rax]
  6885 00003F6F 803804                  	cmp byte [rax], T_closure
  6886 00003F72 0F85E8160100            	jne L_error_non_closure
  6887 00003F78 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6888                                  
  6889                                  	; recycling the current frame
  6890 00003F7B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6891 00003F7E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6892 00003F81 B905000000              	mov rcx, 1 + 4
  6893 00003F86 488B5D18                	mov rbx, COUNT
  6894 00003F8A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6895 00003F8F 488D55F8                	lea rdx, [rbp - 8 * 1]
  6896                                  .L_tc_recycle_frame_loop_8ed0:
  6897 00003F93 4883F900                	cmp rcx, 0
  6898 00003F97 7413                    	je .L_tc_recycle_frame_done_8ed0
  6899 00003F99 488B32                  	mov rsi, qword [rdx]
  6900 00003F9C 488933                  	mov qword [rbx], rsi
  6901 00003F9F 48FFC9                  	dec rcx
  6902 00003FA2 4883EB08                	sub rbx, 8 * 1
  6903 00003FA6 4883EA08                	sub rdx, 8 * 1
  6904 00003FAA EBE7                    	jmp .L_tc_recycle_frame_loop_8ed0
  6905                                  .L_tc_recycle_frame_done_8ed0:
  6906 00003FAC 488D6308                	lea rsp, [rbx + 8 * 1]
  6907 00003FB0 5D                      	pop rbp	; the proc will restore it!
  6908 00003FB1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6909 00003FB4 C9                      	leave
  6910 00003FB5 C21800                  	ret AND_KILL_FRAME(1)
  6911                                  .L_lambda_simple_end_6d11:	; new closure is in rax
  6912 00003FB8 803804                  	cmp byte [rax], T_closure
  6913 00003FBB 0F859F160100            	jne L_error_non_closure
  6914 00003FC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6915                                  
  6916                                  	; recycling the current frame
  6917 00003FC4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6918 00003FC7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6919 00003FCA B905000000              	mov rcx, 1 + 4
  6920 00003FCF 488B5D18                	mov rbx, COUNT
  6921 00003FD3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6922 00003FD8 488D55F8                	lea rdx, [rbp - 8 * 1]
  6923                                  .L_tc_recycle_frame_loop_8ed1:
  6924 00003FDC 4883F900                	cmp rcx, 0
  6925 00003FE0 7413                    	je .L_tc_recycle_frame_done_8ed1
  6926 00003FE2 488B32                  	mov rsi, qword [rdx]
  6927 00003FE5 488933                  	mov qword [rbx], rsi
  6928 00003FE8 48FFC9                  	dec rcx
  6929 00003FEB 4883EB08                	sub rbx, 8 * 1
  6930 00003FEF 4883EA08                	sub rdx, 8 * 1
  6931 00003FF3 EBE7                    	jmp .L_tc_recycle_frame_loop_8ed1
  6932                                  .L_tc_recycle_frame_done_8ed1:
  6933 00003FF5 488D6308                	lea rsp, [rbx + 8 * 1]
  6934 00003FF9 5D                      	pop rbp	; the proc will restore it!
  6935 00003FFA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6936 00003FFD C9                      	leave
  6937 00003FFE C22000                  	ret AND_KILL_FRAME(2)
  6938                                  .L_lambda_opt_end_0f55:	; new closure is in rax
  6939 00004001 48890425[F6140000]      	mov qword [free_var_110], rax
  6940 00004009 48B8-                   	mov rax, sob_void
  6940 0000400B [0000000000000000] 
  6941                                  
  6942 00004013 4889C7                  	mov rdi, rax
  6943 00004016 E800180100              	call print_sexpr_if_not_void
  6944                                  
  6945 0000401B 48B8-                   	mov rax, L_constants + 1881
  6945 0000401D [5907000000000000] 
  6946 00004025 50                      	push rax
  6947 00004026 48B8-                   	mov rax, L_constants + 1881
  6947 00004028 [5907000000000000] 
  6948 00004030 50                      	push rax
  6949 00004031 6A02                    	push 2	; arg count
  6950 00004033 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6951 00004038 E8CC160100              	call malloc
  6952 0000403D 50                      	push rax
  6953 0000403E BF00000000              	mov rdi, 8 * 0	; new rib
  6954 00004043 E8C1160100              	call malloc
  6955 00004048 50                      	push rax
  6956 00004049 BF08000000              	mov rdi, 8 * 1	; extended env
  6957 0000404E E8B6160100              	call malloc
  6958 00004053 488B7D10                	mov rdi, ENV
  6959 00004057 BE00000000              	mov rsi, 0
  6960 0000405C BA01000000              	mov rdx, 1
  6961                                  .L_lambda_simple_env_loop_6d13:	; ext_env[i + 1] <-- env[i]
  6962 00004061 4883FE00                	cmp rsi, 0
  6963 00004065 7410                    	je .L_lambda_simple_env_end_6d13
  6964 00004067 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6965 0000406B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6966 0000406F 48FFC6                  	inc rsi
  6967 00004072 48FFC2                  	inc rdx
  6968 00004075 EBEA                    	jmp .L_lambda_simple_env_loop_6d13
  6969                                  .L_lambda_simple_env_end_6d13:
  6970 00004077 5B                      	pop rbx
  6971 00004078 BE00000000              	mov rsi, 0
  6972                                  .L_lambda_simple_params_loop_6d13:	; copy params
  6973 0000407D 4883FE00                	cmp rsi, 0
  6974 00004081 740E                    	je .L_lambda_simple_params_end_6d13
  6975 00004083 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6976 00004088 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6977 0000408C 48FFC6                  	inc rsi
  6978 0000408F EBEC                    	jmp .L_lambda_simple_params_loop_6d13
  6979                                  .L_lambda_simple_params_end_6d13:
  6980 00004091 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6981 00004094 4889C3                  	mov rbx, rax
  6982 00004097 58                      	pop rax
  6983 00004098 C60004                  	mov byte [rax], T_closure
  6984 0000409B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6985 0000409F 48C74009[AC400000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d13
  6986 000040A7 E923060000              	jmp .L_lambda_simple_end_6d13
  6987                                  .L_lambda_simple_code_6d13:	; lambda-simple body
  6988 000040AC 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6989 000040B2 740B                    	je .L_lambda_simple_arity_check_ok_6d13
  6990 000040B4 FF742410                	push qword [rsp + 8 * 2]
  6991 000040B8 6A02                    	push 2
  6992 000040BA E903160100              	jmp L_error_incorrect_arity_simple
  6993                                  .L_lambda_simple_arity_check_ok_6d13:
  6994 000040BF C8000000                	enter 0, 0
  6995                                  
  6996 000040C3 BF08000000              	mov rdi, 8
  6997 000040C8 E83C160100              	call malloc
  6998 000040CD 488B5D20                	mov rbx, PARAM(0)	; param map1
  6999 000040D1 488918                  	mov [rax], rbx	; box map1
  7000 000040D4 48894520                	mov PARAM(0), rax	;replace param map1 with box
  7001 000040D8 48B8-                   	mov rax, sob_void
  7001 000040DA [0000000000000000] 
  7002                                  
  7003                                  
  7004 000040E2 BF08000000              	mov rdi, 8
  7005 000040E7 E81D160100              	call malloc
  7006 000040EC 488B5D28                	mov rbx, PARAM(1)	; param map-list
  7007 000040F0 488918                  	mov [rax], rbx	; box map-list
  7008 000040F3 48894528                	mov PARAM(1), rax	;replace param map-list with box
  7009 000040F7 48B8-                   	mov rax, sob_void
  7009 000040F9 [0000000000000000] 
  7010                                  
  7011 00004101 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7012 00004106 E8FE150100              	call malloc
  7013 0000410B 50                      	push rax
  7014 0000410C BF10000000              	mov rdi, 8 * 2	; new rib
  7015 00004111 E8F3150100              	call malloc
  7016 00004116 50                      	push rax
  7017 00004117 BF10000000              	mov rdi, 8 * 2	; extended env
  7018 0000411C E8E8150100              	call malloc
  7019 00004121 488B7D10                	mov rdi, ENV
  7020 00004125 BE00000000              	mov rsi, 0
  7021 0000412A BA01000000              	mov rdx, 1
  7022                                  .L_lambda_simple_env_loop_6d14:	; ext_env[i + 1] <-- env[i]
  7023 0000412F 4883FE01                	cmp rsi, 1
  7024 00004133 7410                    	je .L_lambda_simple_env_end_6d14
  7025 00004135 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7026 00004139 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7027 0000413D 48FFC6                  	inc rsi
  7028 00004140 48FFC2                  	inc rdx
  7029 00004143 EBEA                    	jmp .L_lambda_simple_env_loop_6d14
  7030                                  .L_lambda_simple_env_end_6d14:
  7031 00004145 5B                      	pop rbx
  7032 00004146 BE00000000              	mov rsi, 0
  7033                                  .L_lambda_simple_params_loop_6d14:	; copy params
  7034 0000414B 4883FE02                	cmp rsi, 2
  7035 0000414F 740E                    	je .L_lambda_simple_params_end_6d14
  7036 00004151 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7037 00004156 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7038 0000415A 48FFC6                  	inc rsi
  7039 0000415D EBEC                    	jmp .L_lambda_simple_params_loop_6d14
  7040                                  .L_lambda_simple_params_end_6d14:
  7041 0000415F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7042 00004162 4889C3                  	mov rbx, rax
  7043 00004165 58                      	pop rax
  7044 00004166 C60004                  	mov byte [rax], T_closure
  7045 00004169 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7046 0000416D 48C74009[7A410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d14
  7047 00004175 E93B010000              	jmp .L_lambda_simple_end_6d14
  7048                                  .L_lambda_simple_code_6d14:	; lambda-simple body
  7049 0000417A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7050 00004180 740B                    	je .L_lambda_simple_arity_check_ok_6d14
  7051 00004182 FF742410                	push qword [rsp + 8 * 2]
  7052 00004186 6A02                    	push 2
  7053 00004188 E935150100              	jmp L_error_incorrect_arity_simple
  7054                                  .L_lambda_simple_arity_check_ok_6d14:
  7055 0000418D C8000000                	enter 0, 0
  7056 00004191 488B4528                	mov rax, PARAM(1)	; param s
  7057 00004195 50                      	push rax
  7058 00004196 6A01                    	push 1	; arg count
  7059 00004198 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  7060 000041A0 803805                  	cmp byte [rax], T_undefined
  7061 000041A3 0F8433140100            	je L_error_fvar_undefined
  7062 000041A9 803804                  	cmp byte [rax], T_closure
  7063 000041AC 0F85AE140100            	jne L_error_non_closure
  7064 000041B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7065 000041B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7066                                  
  7067 000041B8 483D[02000000]          	cmp rax, sob_boolean_false
  7068 000041BE 740F                    	je .L_if_else_76c6
  7069 000041C0 48B8-                   	mov rax, L_constants + 1
  7069 000041C2 [0100000000000000] 
  7070                                  
  7071 000041CA E9E2000000              	jmp .L_if_end_76c6
  7072                                  
  7073                                  	.L_if_else_76c6:
  7074                                  	; preparing a tail-call
  7075 000041CF 488B4528                	mov rax, PARAM(1)	; param s
  7076 000041D3 50                      	push rax
  7077 000041D4 6A01                    	push 1	; arg count
  7078 000041D6 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7079 000041DE 803805                  	cmp byte [rax], T_undefined
  7080 000041E1 0F84F5130100            	je L_error_fvar_undefined
  7081 000041E7 803804                  	cmp byte [rax], T_closure
  7082 000041EA 0F8570140100            	jne L_error_non_closure
  7083 000041F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7084 000041F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7085 000041F6 50                      	push rax
  7086 000041F7 488B4520                	mov rax, PARAM(0)	; param f
  7087 000041FB 50                      	push rax
  7088 000041FC 6A02                    	push 2	; arg count
  7089 000041FE 488B4510                	mov rax, ENV
  7090 00004202 488B00                  	mov rax, qword [rax + 8 * 0]
  7091 00004205 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7092 00004208 488B00                  	mov rax, qword [rax]
  7093 0000420B 803804                  	cmp byte [rax], T_closure
  7094 0000420E 0F854C140100            	jne L_error_non_closure
  7095 00004214 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7096 00004217 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7097 0000421A 50                      	push rax
  7098 0000421B 488B4528                	mov rax, PARAM(1)	; param s
  7099 0000421F 50                      	push rax
  7100 00004220 6A01                    	push 1	; arg count
  7101 00004222 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  7102 0000422A 803805                  	cmp byte [rax], T_undefined
  7103 0000422D 0F84A9130100            	je L_error_fvar_undefined
  7104 00004233 803804                  	cmp byte [rax], T_closure
  7105 00004236 0F8524140100            	jne L_error_non_closure
  7106 0000423C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7107 0000423F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7108 00004242 50                      	push rax
  7109 00004243 6A01                    	push 1	; arg count
  7110 00004245 488B4520                	mov rax, PARAM(0)	; param f
  7111 00004249 803804                  	cmp byte [rax], T_closure
  7112 0000424C 0F850E140100            	jne L_error_non_closure
  7113 00004252 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7114 00004255 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7115 00004258 50                      	push rax
  7116 00004259 6A02                    	push 2	; arg count
  7117 0000425B 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  7118 00004263 803805                  	cmp byte [rax], T_undefined
  7119 00004266 0F8470130100            	je L_error_fvar_undefined
  7120 0000426C 803804                  	cmp byte [rax], T_closure
  7121 0000426F 0F85EB130100            	jne L_error_non_closure
  7122 00004275 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7123                                  
  7124                                  	; recycling the current frame
  7125 00004278 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7126 0000427B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7127 0000427E B906000000              	mov rcx, 2 + 4
  7128 00004283 488B5D18                	mov rbx, COUNT
  7129 00004287 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7130 0000428C 488D55F8                	lea rdx, [rbp - 8 * 1]
  7131                                  .L_tc_recycle_frame_loop_8ed2:
  7132 00004290 4883F900                	cmp rcx, 0
  7133 00004294 7413                    	je .L_tc_recycle_frame_done_8ed2
  7134 00004296 488B32                  	mov rsi, qword [rdx]
  7135 00004299 488933                  	mov qword [rbx], rsi
  7136 0000429C 48FFC9                  	dec rcx
  7137 0000429F 4883EB08                	sub rbx, 8 * 1
  7138 000042A3 4883EA08                	sub rdx, 8 * 1
  7139 000042A7 EBE7                    	jmp .L_tc_recycle_frame_loop_8ed2
  7140                                  .L_tc_recycle_frame_done_8ed2:
  7141 000042A9 488D6308                	lea rsp, [rbx + 8 * 1]
  7142 000042AD 5D                      	pop rbp	; the proc will restore it!
  7143 000042AE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7144                                  
  7145                                  	.L_if_end_76c6:
  7146 000042B1 C9                      	leave
  7147 000042B2 C22000                  	ret AND_KILL_FRAME(2)
  7148                                  .L_lambda_simple_end_6d14:	; new closure is in rax
  7149                                  
  7150 000042B5 50                      	push rax
  7151 000042B6 488B4520                	mov rax, PARAM(0)	; param map1
  7152                                  
  7153 000042BA 8F00                    	pop qword[rax]
  7154 000042BC 48B8-                   	mov rax, sob_void
  7154 000042BE [0000000000000000] 
  7155                                  
  7156 000042C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7157 000042CB E839140100              	call malloc
  7158 000042D0 50                      	push rax
  7159 000042D1 BF10000000              	mov rdi, 8 * 2	; new rib
  7160 000042D6 E82E140100              	call malloc
  7161 000042DB 50                      	push rax
  7162 000042DC BF10000000              	mov rdi, 8 * 2	; extended env
  7163 000042E1 E823140100              	call malloc
  7164 000042E6 488B7D10                	mov rdi, ENV
  7165 000042EA BE00000000              	mov rsi, 0
  7166 000042EF BA01000000              	mov rdx, 1
  7167                                  .L_lambda_simple_env_loop_6d15:	; ext_env[i + 1] <-- env[i]
  7168 000042F4 4883FE01                	cmp rsi, 1
  7169 000042F8 7410                    	je .L_lambda_simple_env_end_6d15
  7170 000042FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7171 000042FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7172 00004302 48FFC6                  	inc rsi
  7173 00004305 48FFC2                  	inc rdx
  7174 00004308 EBEA                    	jmp .L_lambda_simple_env_loop_6d15
  7175                                  .L_lambda_simple_env_end_6d15:
  7176 0000430A 5B                      	pop rbx
  7177 0000430B BE00000000              	mov rsi, 0
  7178                                  .L_lambda_simple_params_loop_6d15:	; copy params
  7179 00004310 4883FE02                	cmp rsi, 2
  7180 00004314 740E                    	je .L_lambda_simple_params_end_6d15
  7181 00004316 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7182 0000431B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7183 0000431F 48FFC6                  	inc rsi
  7184 00004322 EBEC                    	jmp .L_lambda_simple_params_loop_6d15
  7185                                  .L_lambda_simple_params_end_6d15:
  7186 00004324 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7187 00004327 4889C3                  	mov rbx, rax
  7188 0000432A 58                      	pop rax
  7189 0000432B C60004                  	mov byte [rax], T_closure
  7190 0000432E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7191 00004332 48C74009[3F430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d15
  7192 0000433A E98D010000              	jmp .L_lambda_simple_end_6d15
  7193                                  .L_lambda_simple_code_6d15:	; lambda-simple body
  7194 0000433F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7195 00004345 740B                    	je .L_lambda_simple_arity_check_ok_6d15
  7196 00004347 FF742410                	push qword [rsp + 8 * 2]
  7197 0000434B 6A02                    	push 2
  7198 0000434D E970130100              	jmp L_error_incorrect_arity_simple
  7199                                  .L_lambda_simple_arity_check_ok_6d15:
  7200 00004352 C8000000                	enter 0, 0
  7201 00004356 488B4528                	mov rax, PARAM(1)	; param s
  7202 0000435A 50                      	push rax
  7203 0000435B 6A01                    	push 1	; arg count
  7204 0000435D 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  7205 00004365 803805                  	cmp byte [rax], T_undefined
  7206 00004368 0F846E120100            	je L_error_fvar_undefined
  7207 0000436E 803804                  	cmp byte [rax], T_closure
  7208 00004371 0F85E9120100            	jne L_error_non_closure
  7209 00004377 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7210 0000437A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7211 0000437D 50                      	push rax
  7212 0000437E 6A01                    	push 1	; arg count
  7213 00004380 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  7214 00004388 803805                  	cmp byte [rax], T_undefined
  7215 0000438B 0F844B120100            	je L_error_fvar_undefined
  7216 00004391 803804                  	cmp byte [rax], T_closure
  7217 00004394 0F85C6120100            	jne L_error_non_closure
  7218 0000439A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7219 0000439D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7220                                  
  7221 000043A0 483D[02000000]          	cmp rax, sob_boolean_false
  7222 000043A6 740F                    	je .L_if_else_76c7
  7223 000043A8 48B8-                   	mov rax, L_constants + 1
  7223 000043AA [0100000000000000] 
  7224                                  
  7225 000043B2 E911010000              	jmp .L_if_end_76c7
  7226                                  
  7227                                  	.L_if_else_76c7:
  7228                                  	; preparing a tail-call
  7229 000043B7 488B4528                	mov rax, PARAM(1)	; param s
  7230 000043BB 50                      	push rax
  7231 000043BC 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7232 000043C4 803805                  	cmp byte [rax], T_undefined
  7233 000043C7 0F840F120100            	je L_error_fvar_undefined
  7234 000043CD 50                      	push rax
  7235 000043CE 6A02                    	push 2	; arg count
  7236 000043D0 488B4510                	mov rax, ENV
  7237 000043D4 488B00                  	mov rax, qword [rax + 8 * 0]
  7238 000043D7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7239 000043DA 488B00                  	mov rax, qword [rax]
  7240 000043DD 803804                  	cmp byte [rax], T_closure
  7241 000043E0 0F857A120100            	jne L_error_non_closure
  7242 000043E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7243 000043E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7244 000043EC 50                      	push rax
  7245 000043ED 488B4520                	mov rax, PARAM(0)	; param f
  7246 000043F1 50                      	push rax
  7247 000043F2 6A02                    	push 2	; arg count
  7248 000043F4 488B4510                	mov rax, ENV
  7249 000043F8 488B00                  	mov rax, qword [rax + 8 * 0]
  7250 000043FB 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7251 000043FF 488B00                  	mov rax, qword [rax]
  7252 00004402 803804                  	cmp byte [rax], T_closure
  7253 00004405 0F8555120100            	jne L_error_non_closure
  7254 0000440B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7255 0000440E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7256 00004411 50                      	push rax
  7257 00004412 488B4528                	mov rax, PARAM(1)	; param s
  7258 00004416 50                      	push rax
  7259 00004417 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  7260 0000441F 803805                  	cmp byte [rax], T_undefined
  7261 00004422 0F84B4110100            	je L_error_fvar_undefined
  7262 00004428 50                      	push rax
  7263 00004429 6A02                    	push 2	; arg count
  7264 0000442B 488B4510                	mov rax, ENV
  7265 0000442F 488B00                  	mov rax, qword [rax + 8 * 0]
  7266 00004432 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7267 00004435 488B00                  	mov rax, qword [rax]
  7268 00004438 803804                  	cmp byte [rax], T_closure
  7269 0000443B 0F851F120100            	jne L_error_non_closure
  7270 00004441 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7271 00004444 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7272 00004447 50                      	push rax
  7273 00004448 488B4520                	mov rax, PARAM(0)	; param f
  7274 0000444C 50                      	push rax
  7275 0000444D 6A02                    	push 2	; arg count
  7276 0000444F 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
  7277 00004457 803805                  	cmp byte [rax], T_undefined
  7278 0000445A 0F847C110100            	je L_error_fvar_undefined
  7279 00004460 803804                  	cmp byte [rax], T_closure
  7280 00004463 0F85F7110100            	jne L_error_non_closure
  7281 00004469 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7282 0000446C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7283 0000446F 50                      	push rax
  7284 00004470 6A02                    	push 2	; arg count
  7285 00004472 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  7286 0000447A 803805                  	cmp byte [rax], T_undefined
  7287 0000447D 0F8459110100            	je L_error_fvar_undefined
  7288 00004483 803804                  	cmp byte [rax], T_closure
  7289 00004486 0F85D4110100            	jne L_error_non_closure
  7290 0000448C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7291                                  
  7292                                  	; recycling the current frame
  7293 0000448F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7294 00004492 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7295 00004495 B906000000              	mov rcx, 2 + 4
  7296 0000449A 488B5D18                	mov rbx, COUNT
  7297 0000449E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7298 000044A3 488D55F8                	lea rdx, [rbp - 8 * 1]
  7299                                  .L_tc_recycle_frame_loop_8ed3:
  7300 000044A7 4883F900                	cmp rcx, 0
  7301 000044AB 7413                    	je .L_tc_recycle_frame_done_8ed3
  7302 000044AD 488B32                  	mov rsi, qword [rdx]
  7303 000044B0 488933                  	mov qword [rbx], rsi
  7304 000044B3 48FFC9                  	dec rcx
  7305 000044B6 4883EB08                	sub rbx, 8 * 1
  7306 000044BA 4883EA08                	sub rdx, 8 * 1
  7307 000044BE EBE7                    	jmp .L_tc_recycle_frame_loop_8ed3
  7308                                  .L_tc_recycle_frame_done_8ed3:
  7309 000044C0 488D6308                	lea rsp, [rbx + 8 * 1]
  7310 000044C4 5D                      	pop rbp	; the proc will restore it!
  7311 000044C5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7312                                  
  7313                                  	.L_if_end_76c7:
  7314 000044C8 C9                      	leave
  7315 000044C9 C22000                  	ret AND_KILL_FRAME(2)
  7316                                  .L_lambda_simple_end_6d15:	; new closure is in rax
  7317                                  
  7318 000044CC 50                      	push rax
  7319 000044CD 488B4528                	mov rax, PARAM(1)	; param map-list
  7320                                  
  7321 000044D1 8F00                    	pop qword[rax]
  7322 000044D3 48B8-                   	mov rax, sob_void
  7322 000044D5 [0000000000000000] 
  7323                                  
  7324 000044DD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7325 000044E2 E822120100              	call malloc
  7326 000044E7 50                      	push rax
  7327 000044E8 BF10000000              	mov rdi, 8 * 2	; new rib
  7328 000044ED E817120100              	call malloc
  7329 000044F2 50                      	push rax
  7330 000044F3 BF10000000              	mov rdi, 8 * 2	; extended env
  7331 000044F8 E80C120100              	call malloc
  7332 000044FD 488B7D10                	mov rdi, ENV
  7333 00004501 BE00000000              	mov rsi, 0
  7334 00004506 BA01000000              	mov rdx, 1
  7335                                  .L_lambda_opt_env_loop_0f56:	; ext_env[i + 1] <-- env[i]
  7336 0000450B 4883FE01                	cmp rsi, 1
  7337 0000450F 7410                    	je .L_lambda_opt_env_end_0f56
  7338 00004511 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7339 00004515 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7340 00004519 48FFC6                  	inc rsi
  7341 0000451C 48FFC2                  	inc rdx
  7342 0000451F EBEA                    	jmp .L_lambda_opt_env_loop_0f56
  7343                                  .L_lambda_opt_env_end_0f56:
  7344 00004521 5B                      	pop rbx
  7345 00004522 BE00000000              	mov rsi, 0
  7346                                  .L_lambda_opt_params_loop_0f56:	; copy params
  7347 00004527 4883FE02                	cmp rsi, 2
  7348 0000452B 740E                    	je .L_lambda_opt_params_end_0f56
  7349 0000452D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7350 00004532 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7351 00004536 48FFC6                  	inc rsi
  7352 00004539 EBEC                    	jmp .L_lambda_opt_params_loop_0f56
  7353                                  .L_lambda_opt_params_end_0f56:
  7354 0000453B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7355 0000453E 4889C3                  	mov rbx, rax
  7356 00004541 58                      	pop rax
  7357 00004542 C60004                  	mov byte [rax], T_closure
  7358 00004545 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7359 00004549 48C74009[56450000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f56
  7360 00004551 E975010000              	jmp .L_lambda_opt_end_0f56
  7361                                  .L_lambda_opt_code_0f56:	; lambda-simple body
  7362 00004556 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  7363 0000455C 740D                    	je .L_lambda_opt_arity_check_exact_0f56 ;	 if equal, go to exact arity
  7364 0000455E 7F42                    	jg .L_lambda_opt_arity_check_more_0f56 ;	 if greater than, go to arity more
  7365 00004560 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  7366 00004564 6A01                     	push 1
  7367 00004566 E96B110100              	jmp L_error_incorrect_arity_opt
  7368                                  	.L_lambda_opt_arity_check_exact_0f56:
  7369 0000456B 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  7370 00004570 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  7371 00004575 4883EC08                	sub rsp, 8
  7372 00004579 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  7373                                  	.L_lambda_opt_exact_shifting_loop_0f56:
  7374 0000457D 488B5108                	mov rdx, [rcx + 8]
  7375 00004581 488911                  	mov [rcx], rdx
  7376 00004584 4883C108                	add rcx, 8
  7377 00004588 4839CB                  	cmp rbx, rcx
  7378 0000458B 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f56
  7379                                  	.L_lambda_opt_exact_shifting_loop_end_0f56:
  7380 0000458D 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  7381 00004594 4883C001                	add rax, 1 ; 	arg count += 1
  7382 00004598 4889442410              	mov qword [rsp + 8 * 2], rax
  7383 0000459D E987000000              	jmp .L_lambda_opt_stack_adjusted_0f56
  7384                                  	.L_lambda_opt_arity_check_more_0f56:
  7385 000045A2 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  7385 000045A4 [0100000000000000] 
  7386 000045AC 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  7387 000045B2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f56
  7388                                  	.L_lambda_opt_stack_shrink_loop_0f56:
  7389 000045B4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  7390 000045B9 E84B110100              	call malloc ;	 allocated memory for the optional scheme list
  7391 000045BE C60021                  	mov byte[rax], T_pair ;	 set type pair
  7392 000045C1 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  7393 000045C5 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  7394 000045C8 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  7395 000045CD 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  7396 000045D2 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  7397 000045D6 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  7398                                  	.L_lambda_opt_more_shifting_loop_0f56:
  7399 000045DB 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  7400 000045DE 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  7401 000045E2 4883EB08                	sub rbx, 8 
  7402 000045E6 4839DC                  	cmp rsp, rbx
  7403 000045E9 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f56
  7404                                  	.L_lambda_opt_more_shifting_loop_end_0f56:
  7405 000045EB 4883C408                	add rsp, 8 ;	 update rsp
  7406 000045EF 488B5C2410              	mov rbx, [rsp + 8 * 2]
  7407 000045F4 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  7408 000045F8 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  7409 000045FD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7410 00004603 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f56
  7411                                  	.L_lambda_opt_stack_shrink_loop_exit_0f56:
  7412 00004605 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  7413 0000460A 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  7414 0000460F BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  7415 00004614 E8F0100100              	call malloc ;	 allocated memory for the optional scheme list
  7416 00004619 C60021                  	mov byte[rax], T_pair ;	 set type pair
  7417 0000461C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  7418 00004620 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  7419 00004624 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  7420                                  	.L_lambda_opt_stack_adjusted_0f56:
  7421 00004629 C8000000                	enter 0, 0
  7422 0000462D 488B4528                	mov rax, PARAM(1)	; param s
  7423 00004631 50                      	push rax
  7424 00004632 6A01                    	push 1	; arg count
  7425 00004634 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  7426 0000463C 803805                  	cmp byte [rax], T_undefined
  7427 0000463F 0F84970F0100            	je L_error_fvar_undefined
  7428 00004645 803804                  	cmp byte [rax], T_closure
  7429 00004648 0F8512100100            	jne L_error_non_closure
  7430 0000464E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7431 00004651 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7432                                  
  7433 00004654 483D[02000000]          	cmp rax, sob_boolean_false
  7434 0000465A 740C                    	je .L_if_else_76c8
  7435 0000465C 48B8-                   	mov rax, L_constants + 1
  7435 0000465E [0100000000000000] 
  7436                                  
  7437 00004666 EB5F                    	jmp .L_if_end_76c8
  7438                                  
  7439                                  	.L_if_else_76c8:
  7440                                  	; preparing a tail-call
  7441 00004668 488B4528                	mov rax, PARAM(1)	; param s
  7442 0000466C 50                      	push rax
  7443 0000466D 488B4520                	mov rax, PARAM(0)	; param f
  7444 00004671 50                      	push rax
  7445 00004672 6A02                    	push 2	; arg count
  7446 00004674 488B4510                	mov rax, ENV
  7447 00004678 488B00                  	mov rax, qword [rax + 8 * 0]
  7448 0000467B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7449 0000467F 488B00                  	mov rax, qword [rax]
  7450 00004682 803804                  	cmp byte [rax], T_closure
  7451 00004685 0F85D50F0100            	jne L_error_non_closure
  7452 0000468B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7453                                  
  7454                                  	; recycling the current frame
  7455 0000468E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7456 00004691 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7457 00004694 B906000000              	mov rcx, 2 + 4
  7458 00004699 488B5D18                	mov rbx, COUNT
  7459 0000469D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7460 000046A2 488D55F8                	lea rdx, [rbp - 8 * 1]
  7461                                  .L_tc_recycle_frame_loop_8ed4:
  7462 000046A6 4883F900                	cmp rcx, 0
  7463 000046AA 7413                    	je .L_tc_recycle_frame_done_8ed4
  7464 000046AC 488B32                  	mov rsi, qword [rdx]
  7465 000046AF 488933                  	mov qword [rbx], rsi
  7466 000046B2 48FFC9                  	dec rcx
  7467 000046B5 4883EB08                	sub rbx, 8 * 1
  7468 000046B9 4883EA08                	sub rdx, 8 * 1
  7469 000046BD EBE7                    	jmp .L_tc_recycle_frame_loop_8ed4
  7470                                  .L_tc_recycle_frame_done_8ed4:
  7471 000046BF 488D6308                	lea rsp, [rbx + 8 * 1]
  7472 000046C3 5D                      	pop rbp	; the proc will restore it!
  7473 000046C4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7474                                  
  7475                                  	.L_if_end_76c8:
  7476 000046C7 C9                      	leave
  7477 000046C8 C22000                  	ret AND_KILL_FRAME(2)
  7478                                  .L_lambda_opt_end_0f56:	; new closure is in rax
  7479 000046CB C9                      	leave
  7480 000046CC C22000                  	ret AND_KILL_FRAME(2)
  7481                                  .L_lambda_simple_end_6d13:	; new closure is in rax
  7482 000046CF 803804                  	cmp byte [rax], T_closure
  7483 000046D2 0F85880F0100            	jne L_error_non_closure
  7484 000046D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7485 000046DB FF5009                  	call SOB_CLOSURE_CODE(rax)
  7486 000046DE 48890425[E5140000]      	mov qword [free_var_109], rax
  7487 000046E6 48B8-                   	mov rax, sob_void
  7487 000046E8 [0000000000000000] 
  7488                                  
  7489 000046F0 4889C7                  	mov rdi, rax
  7490 000046F3 E823110100              	call print_sexpr_if_not_void
  7491                                  
  7492 000046F8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7493 000046FD E807100100              	call malloc
  7494 00004702 50                      	push rax
  7495 00004703 BF00000000              	mov rdi, 8 * 0	; new rib
  7496 00004708 E8FC0F0100              	call malloc
  7497 0000470D 50                      	push rax
  7498 0000470E BF08000000              	mov rdi, 8 * 1	; extended env
  7499 00004713 E8F10F0100              	call malloc
  7500 00004718 488B7D10                	mov rdi, ENV
  7501 0000471C BE00000000              	mov rsi, 0
  7502 00004721 BA01000000              	mov rdx, 1
  7503                                  .L_lambda_simple_env_loop_6d16:	; ext_env[i + 1] <-- env[i]
  7504 00004726 4883FE00                	cmp rsi, 0
  7505 0000472A 7410                    	je .L_lambda_simple_env_end_6d16
  7506 0000472C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7507 00004730 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7508 00004734 48FFC6                  	inc rsi
  7509 00004737 48FFC2                  	inc rdx
  7510 0000473A EBEA                    	jmp .L_lambda_simple_env_loop_6d16
  7511                                  .L_lambda_simple_env_end_6d16:
  7512 0000473C 5B                      	pop rbx
  7513 0000473D BE00000000              	mov rsi, 0
  7514                                  .L_lambda_simple_params_loop_6d16:	; copy params
  7515 00004742 4883FE00                	cmp rsi, 0
  7516 00004746 740E                    	je .L_lambda_simple_params_end_6d16
  7517 00004748 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7518 0000474D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7519 00004751 48FFC6                  	inc rsi
  7520 00004754 EBEC                    	jmp .L_lambda_simple_params_loop_6d16
  7521                                  .L_lambda_simple_params_end_6d16:
  7522 00004756 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7523 00004759 4889C3                  	mov rbx, rax
  7524 0000475C 58                      	pop rax
  7525 0000475D C60004                  	mov byte [rax], T_closure
  7526 00004760 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7527 00004764 48C74009[71470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d16
  7528 0000476C E97A010000              	jmp .L_lambda_simple_end_6d16
  7529                                  .L_lambda_simple_code_6d16:	; lambda-simple body
  7530 00004771 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7531 00004777 740B                    	je .L_lambda_simple_arity_check_ok_6d16
  7532 00004779 FF742410                	push qword [rsp + 8 * 2]
  7533 0000477D 6A01                    	push 1
  7534 0000477F E93E0F0100              	jmp L_error_incorrect_arity_simple
  7535                                  .L_lambda_simple_arity_check_ok_6d16:
  7536 00004784 C8000000                	enter 0, 0
  7537                                  	; preparing a tail-call
  7538 00004788 488B4520                	mov rax, PARAM(0)	; param s
  7539 0000478C 50                      	push rax
  7540 0000478D 48B8-                   	mov rax, L_constants + 1
  7540 0000478F [0100000000000000] 
  7541 00004797 50                      	push rax
  7542 00004798 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7543 0000479D E8670F0100              	call malloc
  7544 000047A2 50                      	push rax
  7545 000047A3 BF08000000              	mov rdi, 8 * 1	; new rib
  7546 000047A8 E85C0F0100              	call malloc
  7547 000047AD 50                      	push rax
  7548 000047AE BF10000000              	mov rdi, 8 * 2	; extended env
  7549 000047B3 E8510F0100              	call malloc
  7550 000047B8 488B7D10                	mov rdi, ENV
  7551 000047BC BE00000000              	mov rsi, 0
  7552 000047C1 BA01000000              	mov rdx, 1
  7553                                  .L_lambda_simple_env_loop_6d17:	; ext_env[i + 1] <-- env[i]
  7554 000047C6 4883FE01                	cmp rsi, 1
  7555 000047CA 7410                    	je .L_lambda_simple_env_end_6d17
  7556 000047CC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7557 000047D0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7558 000047D4 48FFC6                  	inc rsi
  7559 000047D7 48FFC2                  	inc rdx
  7560 000047DA EBEA                    	jmp .L_lambda_simple_env_loop_6d17
  7561                                  .L_lambda_simple_env_end_6d17:
  7562 000047DC 5B                      	pop rbx
  7563 000047DD BE00000000              	mov rsi, 0
  7564                                  .L_lambda_simple_params_loop_6d17:	; copy params
  7565 000047E2 4883FE01                	cmp rsi, 1
  7566 000047E6 740E                    	je .L_lambda_simple_params_end_6d17
  7567 000047E8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7568 000047ED 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7569 000047F1 48FFC6                  	inc rsi
  7570 000047F4 EBEC                    	jmp .L_lambda_simple_params_loop_6d17
  7571                                  .L_lambda_simple_params_end_6d17:
  7572 000047F6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7573 000047F9 4889C3                  	mov rbx, rax
  7574 000047FC 58                      	pop rax
  7575 000047FD C60004                  	mov byte [rax], T_closure
  7576 00004800 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7577 00004804 48C74009[11480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d17
  7578 0000480C E97D000000              	jmp .L_lambda_simple_end_6d17
  7579                                  .L_lambda_simple_code_6d17:	; lambda-simple body
  7580 00004811 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7581 00004817 740B                    	je .L_lambda_simple_arity_check_ok_6d17
  7582 00004819 FF742410                	push qword [rsp + 8 * 2]
  7583 0000481D 6A02                    	push 2
  7584 0000481F E99E0E0100              	jmp L_error_incorrect_arity_simple
  7585                                  .L_lambda_simple_arity_check_ok_6d17:
  7586 00004824 C8000000                	enter 0, 0
  7587                                  	; preparing a tail-call
  7588 00004828 488B4520                	mov rax, PARAM(0)	; param r
  7589 0000482C 50                      	push rax
  7590 0000482D 488B4528                	mov rax, PARAM(1)	; param a
  7591 00004831 50                      	push rax
  7592 00004832 6A02                    	push 2	; arg count
  7593 00004834 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  7594 0000483C 803805                  	cmp byte [rax], T_undefined
  7595 0000483F 0F84970D0100            	je L_error_fvar_undefined
  7596 00004845 803804                  	cmp byte [rax], T_closure
  7597 00004848 0F85120E0100            	jne L_error_non_closure
  7598 0000484E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7599                                  
  7600                                  	; recycling the current frame
  7601 00004851 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7602 00004854 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7603 00004857 B906000000              	mov rcx, 2 + 4
  7604 0000485C 488B5D18                	mov rbx, COUNT
  7605 00004860 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7606 00004865 488D55F8                	lea rdx, [rbp - 8 * 1]
  7607                                  .L_tc_recycle_frame_loop_8ed5:
  7608 00004869 4883F900                	cmp rcx, 0
  7609 0000486D 7413                    	je .L_tc_recycle_frame_done_8ed5
  7610 0000486F 488B32                  	mov rsi, qword [rdx]
  7611 00004872 488933                  	mov qword [rbx], rsi
  7612 00004875 48FFC9                  	dec rcx
  7613 00004878 4883EB08                	sub rbx, 8 * 1
  7614 0000487C 4883EA08                	sub rdx, 8 * 1
  7615 00004880 EBE7                    	jmp .L_tc_recycle_frame_loop_8ed5
  7616                                  .L_tc_recycle_frame_done_8ed5:
  7617 00004882 488D6308                	lea rsp, [rbx + 8 * 1]
  7618 00004886 5D                      	pop rbp	; the proc will restore it!
  7619 00004887 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7620 0000488A C9                      	leave
  7621 0000488B C22000                  	ret AND_KILL_FRAME(2)
  7622                                  .L_lambda_simple_end_6d17:	; new closure is in rax
  7623 0000488E 50                      	push rax
  7624 0000488F 6A03                    	push 3	; arg count
  7625 00004891 488B0425[18150000]      	mov rax, qword [free_var_112]	; free var fold-left
  7626 00004899 803805                  	cmp byte [rax], T_undefined
  7627 0000489C 0F843A0D0100            	je L_error_fvar_undefined
  7628 000048A2 803804                  	cmp byte [rax], T_closure
  7629 000048A5 0F85B50D0100            	jne L_error_non_closure
  7630 000048AB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7631                                  
  7632                                  	; recycling the current frame
  7633 000048AE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7634 000048B1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7635 000048B4 B907000000              	mov rcx, 3 + 4
  7636 000048B9 488B5D18                	mov rbx, COUNT
  7637 000048BD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7638 000048C2 488D55F8                	lea rdx, [rbp - 8 * 1]
  7639                                  .L_tc_recycle_frame_loop_8ed6:
  7640 000048C6 4883F900                	cmp rcx, 0
  7641 000048CA 7413                    	je .L_tc_recycle_frame_done_8ed6
  7642 000048CC 488B32                  	mov rsi, qword [rdx]
  7643 000048CF 488933                  	mov qword [rbx], rsi
  7644 000048D2 48FFC9                  	dec rcx
  7645 000048D5 4883EB08                	sub rbx, 8 * 1
  7646 000048D9 4883EA08                	sub rdx, 8 * 1
  7647 000048DD EBE7                    	jmp .L_tc_recycle_frame_loop_8ed6
  7648                                  .L_tc_recycle_frame_done_8ed6:
  7649 000048DF 488D6308                	lea rsp, [rbx + 8 * 1]
  7650 000048E3 5D                      	pop rbp	; the proc will restore it!
  7651 000048E4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7652 000048E7 C9                      	leave
  7653 000048E8 C21800                  	ret AND_KILL_FRAME(1)
  7654                                  .L_lambda_simple_end_6d16:	; new closure is in rax
  7655 000048EB 48890425[07150000]      	mov qword [free_var_111], rax
  7656 000048F3 48B8-                   	mov rax, sob_void
  7656 000048F5 [0000000000000000] 
  7657                                  
  7658 000048FD 4889C7                  	mov rdi, rax
  7659 00004900 E8160F0100              	call print_sexpr_if_not_void
  7660                                  
  7661 00004905 48B8-                   	mov rax, L_constants + 1881
  7661 00004907 [5907000000000000] 
  7662 0000490F 50                      	push rax
  7663 00004910 48B8-                   	mov rax, L_constants + 1881
  7663 00004912 [5907000000000000] 
  7664 0000491A 50                      	push rax
  7665 0000491B 6A02                    	push 2	; arg count
  7666 0000491D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7667 00004922 E8E20D0100              	call malloc
  7668 00004927 50                      	push rax
  7669 00004928 BF00000000              	mov rdi, 8 * 0	; new rib
  7670 0000492D E8D70D0100              	call malloc
  7671 00004932 50                      	push rax
  7672 00004933 BF08000000              	mov rdi, 8 * 1	; extended env
  7673 00004938 E8CC0D0100              	call malloc
  7674 0000493D 488B7D10                	mov rdi, ENV
  7675 00004941 BE00000000              	mov rsi, 0
  7676 00004946 BA01000000              	mov rdx, 1
  7677                                  .L_lambda_simple_env_loop_6d18:	; ext_env[i + 1] <-- env[i]
  7678 0000494B 4883FE00                	cmp rsi, 0
  7679 0000494F 7410                    	je .L_lambda_simple_env_end_6d18
  7680 00004951 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7681 00004955 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7682 00004959 48FFC6                  	inc rsi
  7683 0000495C 48FFC2                  	inc rdx
  7684 0000495F EBEA                    	jmp .L_lambda_simple_env_loop_6d18
  7685                                  .L_lambda_simple_env_end_6d18:
  7686 00004961 5B                      	pop rbx
  7687 00004962 BE00000000              	mov rsi, 0
  7688                                  .L_lambda_simple_params_loop_6d18:	; copy params
  7689 00004967 4883FE00                	cmp rsi, 0
  7690 0000496B 740E                    	je .L_lambda_simple_params_end_6d18
  7691 0000496D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7692 00004972 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7693 00004976 48FFC6                  	inc rsi
  7694 00004979 EBEC                    	jmp .L_lambda_simple_params_loop_6d18
  7695                                  .L_lambda_simple_params_end_6d18:
  7696 0000497B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7697 0000497E 4889C3                  	mov rbx, rax
  7698 00004981 58                      	pop rax
  7699 00004982 C60004                  	mov byte [rax], T_closure
  7700 00004985 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7701 00004989 48C74009[96490000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d18
  7702 00004991 E9DF050000              	jmp .L_lambda_simple_end_6d18
  7703                                  .L_lambda_simple_code_6d18:	; lambda-simple body
  7704 00004996 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7705 0000499C 740B                    	je .L_lambda_simple_arity_check_ok_6d18
  7706 0000499E FF742410                	push qword [rsp + 8 * 2]
  7707 000049A2 6A02                    	push 2
  7708 000049A4 E9190D0100              	jmp L_error_incorrect_arity_simple
  7709                                  .L_lambda_simple_arity_check_ok_6d18:
  7710 000049A9 C8000000                	enter 0, 0
  7711                                  
  7712 000049AD BF08000000              	mov rdi, 8
  7713 000049B2 E8520D0100              	call malloc
  7714 000049B7 488B5D20                	mov rbx, PARAM(0)	; param run-1
  7715 000049BB 488918                  	mov [rax], rbx	; box run-1
  7716 000049BE 48894520                	mov PARAM(0), rax	;replace param run-1 with box
  7717 000049C2 48B8-                   	mov rax, sob_void
  7717 000049C4 [0000000000000000] 
  7718                                  
  7719                                  
  7720 000049CC BF08000000              	mov rdi, 8
  7721 000049D1 E8330D0100              	call malloc
  7722 000049D6 488B5D28                	mov rbx, PARAM(1)	; param run-2
  7723 000049DA 488918                  	mov [rax], rbx	; box run-2
  7724 000049DD 48894528                	mov PARAM(1), rax	;replace param run-2 with box
  7725 000049E1 48B8-                   	mov rax, sob_void
  7725 000049E3 [0000000000000000] 
  7726                                  
  7727 000049EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7728 000049F0 E8140D0100              	call malloc
  7729 000049F5 50                      	push rax
  7730 000049F6 BF10000000              	mov rdi, 8 * 2	; new rib
  7731 000049FB E8090D0100              	call malloc
  7732 00004A00 50                      	push rax
  7733 00004A01 BF10000000              	mov rdi, 8 * 2	; extended env
  7734 00004A06 E8FE0C0100              	call malloc
  7735 00004A0B 488B7D10                	mov rdi, ENV
  7736 00004A0F BE00000000              	mov rsi, 0
  7737 00004A14 BA01000000              	mov rdx, 1
  7738                                  .L_lambda_simple_env_loop_6d19:	; ext_env[i + 1] <-- env[i]
  7739 00004A19 4883FE01                	cmp rsi, 1
  7740 00004A1D 7410                    	je .L_lambda_simple_env_end_6d19
  7741 00004A1F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7742 00004A23 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7743 00004A27 48FFC6                  	inc rsi
  7744 00004A2A 48FFC2                  	inc rdx
  7745 00004A2D EBEA                    	jmp .L_lambda_simple_env_loop_6d19
  7746                                  .L_lambda_simple_env_end_6d19:
  7747 00004A2F 5B                      	pop rbx
  7748 00004A30 BE00000000              	mov rsi, 0
  7749                                  .L_lambda_simple_params_loop_6d19:	; copy params
  7750 00004A35 4883FE02                	cmp rsi, 2
  7751 00004A39 740E                    	je .L_lambda_simple_params_end_6d19
  7752 00004A3B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7753 00004A40 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7754 00004A44 48FFC6                  	inc rsi
  7755 00004A47 EBEC                    	jmp .L_lambda_simple_params_loop_6d19
  7756                                  .L_lambda_simple_params_end_6d19:
  7757 00004A49 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7758 00004A4C 4889C3                  	mov rbx, rax
  7759 00004A4F 58                      	pop rax
  7760 00004A50 C60004                  	mov byte [rax], T_closure
  7761 00004A53 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7762 00004A57 48C74009[644A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d19
  7763 00004A5F E91C010000              	jmp .L_lambda_simple_end_6d19
  7764                                  .L_lambda_simple_code_6d19:	; lambda-simple body
  7765 00004A64 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7766 00004A6A 740B                    	je .L_lambda_simple_arity_check_ok_6d19
  7767 00004A6C FF742410                	push qword [rsp + 8 * 2]
  7768 00004A70 6A02                    	push 2
  7769 00004A72 E94B0C0100              	jmp L_error_incorrect_arity_simple
  7770                                  .L_lambda_simple_arity_check_ok_6d19:
  7771 00004A77 C8000000                	enter 0, 0
  7772 00004A7B 488B4528                	mov rax, PARAM(1)	; param sr
  7773 00004A7F 50                      	push rax
  7774 00004A80 6A01                    	push 1	; arg count
  7775 00004A82 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  7776 00004A8A 803805                  	cmp byte [rax], T_undefined
  7777 00004A8D 0F84490B0100            	je L_error_fvar_undefined
  7778 00004A93 803804                  	cmp byte [rax], T_closure
  7779 00004A96 0F85C40B0100            	jne L_error_non_closure
  7780 00004A9C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7781 00004A9F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7782                                  
  7783 00004AA2 483D[02000000]          	cmp rax, sob_boolean_false
  7784 00004AA8 7409                    	je .L_if_else_76c9
  7785 00004AAA 488B4520                	mov rax, PARAM(0)	; param s1
  7786                                  
  7787 00004AAE E9C9000000              	jmp .L_if_end_76c9
  7788                                  
  7789                                  	.L_if_else_76c9:
  7790                                  	; preparing a tail-call
  7791 00004AB3 488B4528                	mov rax, PARAM(1)	; param sr
  7792 00004AB7 50                      	push rax
  7793 00004AB8 6A01                    	push 1	; arg count
  7794 00004ABA 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7795 00004AC2 803805                  	cmp byte [rax], T_undefined
  7796 00004AC5 0F84110B0100            	je L_error_fvar_undefined
  7797 00004ACB 803804                  	cmp byte [rax], T_closure
  7798 00004ACE 0F858C0B0100            	jne L_error_non_closure
  7799 00004AD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7800 00004AD7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7801 00004ADA 50                      	push rax
  7802 00004ADB 488B4528                	mov rax, PARAM(1)	; param sr
  7803 00004ADF 50                      	push rax
  7804 00004AE0 6A01                    	push 1	; arg count
  7805 00004AE2 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  7806 00004AEA 803805                  	cmp byte [rax], T_undefined
  7807 00004AED 0F84E90A0100            	je L_error_fvar_undefined
  7808 00004AF3 803804                  	cmp byte [rax], T_closure
  7809 00004AF6 0F85640B0100            	jne L_error_non_closure
  7810 00004AFC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7811 00004AFF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7812 00004B02 50                      	push rax
  7813 00004B03 6A02                    	push 2	; arg count
  7814 00004B05 488B4510                	mov rax, ENV
  7815 00004B09 488B00                  	mov rax, qword [rax + 8 * 0]
  7816 00004B0C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  7817 00004B0F 488B00                  	mov rax, qword [rax]
  7818 00004B12 803804                  	cmp byte [rax], T_closure
  7819 00004B15 0F85450B0100            	jne L_error_non_closure
  7820 00004B1B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7821 00004B1E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7822 00004B21 50                      	push rax
  7823 00004B22 488B4520                	mov rax, PARAM(0)	; param s1
  7824 00004B26 50                      	push rax
  7825 00004B27 6A02                    	push 2	; arg count
  7826 00004B29 488B4510                	mov rax, ENV
  7827 00004B2D 488B00                  	mov rax, qword [rax + 8 * 0]
  7828 00004B30 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  7829 00004B34 488B00                  	mov rax, qword [rax]
  7830 00004B37 803804                  	cmp byte [rax], T_closure
  7831 00004B3A 0F85200B0100            	jne L_error_non_closure
  7832 00004B40 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7833                                  
  7834                                  	; recycling the current frame
  7835 00004B43 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7836 00004B46 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7837 00004B49 B906000000              	mov rcx, 2 + 4
  7838 00004B4E 488B5D18                	mov rbx, COUNT
  7839 00004B52 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7840 00004B57 488D55F8                	lea rdx, [rbp - 8 * 1]
  7841                                  .L_tc_recycle_frame_loop_8ed7:
  7842 00004B5B 4883F900                	cmp rcx, 0
  7843 00004B5F 7413                    	je .L_tc_recycle_frame_done_8ed7
  7844 00004B61 488B32                  	mov rsi, qword [rdx]
  7845 00004B64 488933                  	mov qword [rbx], rsi
  7846 00004B67 48FFC9                  	dec rcx
  7847 00004B6A 4883EB08                	sub rbx, 8 * 1
  7848 00004B6E 4883EA08                	sub rdx, 8 * 1
  7849 00004B72 EBE7                    	jmp .L_tc_recycle_frame_loop_8ed7
  7850                                  .L_tc_recycle_frame_done_8ed7:
  7851 00004B74 488D6308                	lea rsp, [rbx + 8 * 1]
  7852 00004B78 5D                      	pop rbp	; the proc will restore it!
  7853 00004B79 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7854                                  
  7855                                  	.L_if_end_76c9:
  7856 00004B7C C9                      	leave
  7857 00004B7D C22000                  	ret AND_KILL_FRAME(2)
  7858                                  .L_lambda_simple_end_6d19:	; new closure is in rax
  7859                                  
  7860 00004B80 50                      	push rax
  7861 00004B81 488B4520                	mov rax, PARAM(0)	; param run-1
  7862                                  
  7863 00004B85 8F00                    	pop qword[rax]
  7864 00004B87 48B8-                   	mov rax, sob_void
  7864 00004B89 [0000000000000000] 
  7865                                  
  7866 00004B91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7867 00004B96 E86E0B0100              	call malloc
  7868 00004B9B 50                      	push rax
  7869 00004B9C BF10000000              	mov rdi, 8 * 2	; new rib
  7870 00004BA1 E8630B0100              	call malloc
  7871 00004BA6 50                      	push rax
  7872 00004BA7 BF10000000              	mov rdi, 8 * 2	; extended env
  7873 00004BAC E8580B0100              	call malloc
  7874 00004BB1 488B7D10                	mov rdi, ENV
  7875 00004BB5 BE00000000              	mov rsi, 0
  7876 00004BBA BA01000000              	mov rdx, 1
  7877                                  .L_lambda_simple_env_loop_6d1a:	; ext_env[i + 1] <-- env[i]
  7878 00004BBF 4883FE01                	cmp rsi, 1
  7879 00004BC3 7410                    	je .L_lambda_simple_env_end_6d1a
  7880 00004BC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7881 00004BC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7882 00004BCD 48FFC6                  	inc rsi
  7883 00004BD0 48FFC2                  	inc rdx
  7884 00004BD3 EBEA                    	jmp .L_lambda_simple_env_loop_6d1a
  7885                                  .L_lambda_simple_env_end_6d1a:
  7886 00004BD5 5B                      	pop rbx
  7887 00004BD6 BE00000000              	mov rsi, 0
  7888                                  .L_lambda_simple_params_loop_6d1a:	; copy params
  7889 00004BDB 4883FE02                	cmp rsi, 2
  7890 00004BDF 740E                    	je .L_lambda_simple_params_end_6d1a
  7891 00004BE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7892 00004BE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7893 00004BEA 48FFC6                  	inc rsi
  7894 00004BED EBEC                    	jmp .L_lambda_simple_params_loop_6d1a
  7895                                  .L_lambda_simple_params_end_6d1a:
  7896 00004BEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7897 00004BF2 4889C3                  	mov rbx, rax
  7898 00004BF5 58                      	pop rax
  7899 00004BF6 C60004                  	mov byte [rax], T_closure
  7900 00004BF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7901 00004BFD 48C74009[0A4C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d1a
  7902 00004C05 E920010000              	jmp .L_lambda_simple_end_6d1a
  7903                                  .L_lambda_simple_code_6d1a:	; lambda-simple body
  7904 00004C0A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7905 00004C10 740B                    	je .L_lambda_simple_arity_check_ok_6d1a
  7906 00004C12 FF742410                	push qword [rsp + 8 * 2]
  7907 00004C16 6A02                    	push 2
  7908 00004C18 E9A50A0100              	jmp L_error_incorrect_arity_simple
  7909                                  .L_lambda_simple_arity_check_ok_6d1a:
  7910 00004C1D C8000000                	enter 0, 0
  7911 00004C21 488B4520                	mov rax, PARAM(0)	; param s1
  7912 00004C25 50                      	push rax
  7913 00004C26 6A01                    	push 1	; arg count
  7914 00004C28 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  7915 00004C30 803805                  	cmp byte [rax], T_undefined
  7916 00004C33 0F84A3090100            	je L_error_fvar_undefined
  7917 00004C39 803804                  	cmp byte [rax], T_closure
  7918 00004C3C 0F851E0A0100            	jne L_error_non_closure
  7919 00004C42 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7920 00004C45 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7921                                  
  7922 00004C48 483D[02000000]          	cmp rax, sob_boolean_false
  7923 00004C4E 7409                    	je .L_if_else_76ca
  7924 00004C50 488B4528                	mov rax, PARAM(1)	; param s2
  7925                                  
  7926 00004C54 E9CD000000              	jmp .L_if_end_76ca
  7927                                  
  7928                                  	.L_if_else_76ca:
  7929                                  	; preparing a tail-call
  7930 00004C59 488B4528                	mov rax, PARAM(1)	; param s2
  7931 00004C5D 50                      	push rax
  7932 00004C5E 488B4520                	mov rax, PARAM(0)	; param s1
  7933 00004C62 50                      	push rax
  7934 00004C63 6A01                    	push 1	; arg count
  7935 00004C65 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7936 00004C6D 803805                  	cmp byte [rax], T_undefined
  7937 00004C70 0F8466090100            	je L_error_fvar_undefined
  7938 00004C76 803804                  	cmp byte [rax], T_closure
  7939 00004C79 0F85E1090100            	jne L_error_non_closure
  7940 00004C7F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7941 00004C82 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7942 00004C85 50                      	push rax
  7943 00004C86 6A02                    	push 2	; arg count
  7944 00004C88 488B4510                	mov rax, ENV
  7945 00004C8C 488B00                  	mov rax, qword [rax + 8 * 0]
  7946 00004C8F 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  7947 00004C93 488B00                  	mov rax, qword [rax]
  7948 00004C96 803804                  	cmp byte [rax], T_closure
  7949 00004C99 0F85C1090100            	jne L_error_non_closure
  7950 00004C9F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7951 00004CA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7952 00004CA5 50                      	push rax
  7953 00004CA6 488B4520                	mov rax, PARAM(0)	; param s1
  7954 00004CAA 50                      	push rax
  7955 00004CAB 6A01                    	push 1	; arg count
  7956 00004CAD 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  7957 00004CB5 803805                  	cmp byte [rax], T_undefined
  7958 00004CB8 0F841E090100            	je L_error_fvar_undefined
  7959 00004CBE 803804                  	cmp byte [rax], T_closure
  7960 00004CC1 0F8599090100            	jne L_error_non_closure
  7961 00004CC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7962 00004CCA FF5009                  	call SOB_CLOSURE_CODE(rax)
  7963 00004CCD 50                      	push rax
  7964 00004CCE 6A02                    	push 2	; arg count
  7965 00004CD0 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  7966 00004CD8 803805                  	cmp byte [rax], T_undefined
  7967 00004CDB 0F84FB080100            	je L_error_fvar_undefined
  7968 00004CE1 803804                  	cmp byte [rax], T_closure
  7969 00004CE4 0F8576090100            	jne L_error_non_closure
  7970 00004CEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7971                                  
  7972                                  	; recycling the current frame
  7973 00004CED FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7974 00004CF0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7975 00004CF3 B906000000              	mov rcx, 2 + 4
  7976 00004CF8 488B5D18                	mov rbx, COUNT
  7977 00004CFC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7978 00004D01 488D55F8                	lea rdx, [rbp - 8 * 1]
  7979                                  .L_tc_recycle_frame_loop_8ed8:
  7980 00004D05 4883F900                	cmp rcx, 0
  7981 00004D09 7413                    	je .L_tc_recycle_frame_done_8ed8
  7982 00004D0B 488B32                  	mov rsi, qword [rdx]
  7983 00004D0E 488933                  	mov qword [rbx], rsi
  7984 00004D11 48FFC9                  	dec rcx
  7985 00004D14 4883EB08                	sub rbx, 8 * 1
  7986 00004D18 4883EA08                	sub rdx, 8 * 1
  7987 00004D1C EBE7                    	jmp .L_tc_recycle_frame_loop_8ed8
  7988                                  .L_tc_recycle_frame_done_8ed8:
  7989 00004D1E 488D6308                	lea rsp, [rbx + 8 * 1]
  7990 00004D22 5D                      	pop rbp	; the proc will restore it!
  7991 00004D23 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7992                                  
  7993                                  	.L_if_end_76ca:
  7994 00004D26 C9                      	leave
  7995 00004D27 C22000                  	ret AND_KILL_FRAME(2)
  7996                                  .L_lambda_simple_end_6d1a:	; new closure is in rax
  7997                                  
  7998 00004D2A 50                      	push rax
  7999 00004D2B 488B4528                	mov rax, PARAM(1)	; param run-2
  8000                                  
  8001 00004D2F 8F00                    	pop qword[rax]
  8002 00004D31 48B8-                   	mov rax, sob_void
  8002 00004D33 [0000000000000000] 
  8003                                  
  8004 00004D3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8005 00004D40 E8C4090100              	call malloc
  8006 00004D45 50                      	push rax
  8007 00004D46 BF10000000              	mov rdi, 8 * 2	; new rib
  8008 00004D4B E8B9090100              	call malloc
  8009 00004D50 50                      	push rax
  8010 00004D51 BF10000000              	mov rdi, 8 * 2	; extended env
  8011 00004D56 E8AE090100              	call malloc
  8012 00004D5B 488B7D10                	mov rdi, ENV
  8013 00004D5F BE00000000              	mov rsi, 0
  8014 00004D64 BA01000000              	mov rdx, 1
  8015                                  .L_lambda_opt_env_loop_0f57:	; ext_env[i + 1] <-- env[i]
  8016 00004D69 4883FE01                	cmp rsi, 1
  8017 00004D6D 7410                    	je .L_lambda_opt_env_end_0f57
  8018 00004D6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8019 00004D73 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8020 00004D77 48FFC6                  	inc rsi
  8021 00004D7A 48FFC2                  	inc rdx
  8022 00004D7D EBEA                    	jmp .L_lambda_opt_env_loop_0f57
  8023                                  .L_lambda_opt_env_end_0f57:
  8024 00004D7F 5B                      	pop rbx
  8025 00004D80 BE00000000              	mov rsi, 0
  8026                                  .L_lambda_opt_params_loop_0f57:	; copy params
  8027 00004D85 4883FE02                	cmp rsi, 2
  8028 00004D89 740E                    	je .L_lambda_opt_params_end_0f57
  8029 00004D8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8030 00004D90 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8031 00004D94 48FFC6                  	inc rsi
  8032 00004D97 EBEC                    	jmp .L_lambda_opt_params_loop_0f57
  8033                                  .L_lambda_opt_params_end_0f57:
  8034 00004D99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8035 00004D9C 4889C3                  	mov rbx, rax
  8036 00004D9F 58                      	pop rax
  8037 00004DA0 C60004                  	mov byte [rax], T_closure
  8038 00004DA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8039 00004DA7 48C74009[B44D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f57
  8040 00004DAF E9BD010000              	jmp .L_lambda_opt_end_0f57
  8041                                  .L_lambda_opt_code_0f57:	; lambda-simple body
  8042 00004DB4 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
  8043 00004DBA 740D                    	je .L_lambda_opt_arity_check_exact_0f57 ;	 if equal, go to exact arity
  8044 00004DBC 7F42                    	jg .L_lambda_opt_arity_check_more_0f57 ;	 if greater than, go to arity more
  8045 00004DBE FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  8046 00004DC2 6A00                     	push 0
  8047 00004DC4 E90D090100              	jmp L_error_incorrect_arity_opt
  8048                                  	.L_lambda_opt_arity_check_exact_0f57:
  8049 00004DC9 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  8050 00004DCE 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  8051 00004DD3 4883EC08                	sub rsp, 8
  8052 00004DD7 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  8053                                  	.L_lambda_opt_exact_shifting_loop_0f57:
  8054 00004DDB 488B5108                	mov rdx, [rcx + 8]
  8055 00004DDF 488911                  	mov [rcx], rdx
  8056 00004DE2 4883C108                	add rcx, 8
  8057 00004DE6 4839CB                  	cmp rbx, rcx
  8058 00004DE9 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f57
  8059                                  	.L_lambda_opt_exact_shifting_loop_end_0f57:
  8060 00004DEB 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  8061 00004DF2 4883C001                	add rax, 1 ; 	arg count += 1
  8062 00004DF6 4889442410              	mov qword [rsp + 8 * 2], rax
  8063 00004DFB E987000000              	jmp .L_lambda_opt_stack_adjusted_0f57
  8064                                  	.L_lambda_opt_arity_check_more_0f57:
  8065 00004E00 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  8065 00004E02 [0100000000000000] 
  8066 00004E0A 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
  8067 00004E10 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f57
  8068                                  	.L_lambda_opt_stack_shrink_loop_0f57:
  8069 00004E12 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8070 00004E17 E8ED080100              	call malloc ;	 allocated memory for the optional scheme list
  8071 00004E1C C60021                  	mov byte[rax], T_pair ;	 set type pair
  8072 00004E1F 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8073 00004E23 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  8074 00004E26 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  8075 00004E2B 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  8076 00004E30 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  8077 00004E34 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  8078                                  	.L_lambda_opt_more_shifting_loop_0f57:
  8079 00004E39 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  8080 00004E3C 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  8081 00004E40 4883EB08                	sub rbx, 8 
  8082 00004E44 4839DC                  	cmp rsp, rbx
  8083 00004E47 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f57
  8084                                  	.L_lambda_opt_more_shifting_loop_end_0f57:
  8085 00004E49 4883C408                	add rsp, 8 ;	 update rsp
  8086 00004E4D 488B5C2410              	mov rbx, [rsp + 8 * 2]
  8087 00004E52 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  8088 00004E56 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  8089 00004E5B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8090 00004E61 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f57
  8091                                  	.L_lambda_opt_stack_shrink_loop_exit_0f57:
  8092 00004E63 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  8093 00004E68 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  8094 00004E6D BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8095 00004E72 E892080100              	call malloc ;	 allocated memory for the optional scheme list
  8096 00004E77 C60021                  	mov byte[rax], T_pair ;	 set type pair
  8097 00004E7A 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8098 00004E7E 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  8099 00004E82 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  8100                                  	.L_lambda_opt_stack_adjusted_0f57:
  8101 00004E87 C8000000                	enter 0, 0
  8102 00004E8B 488B4520                	mov rax, PARAM(0)	; param s
  8103 00004E8F 50                      	push rax
  8104 00004E90 6A01                    	push 1	; arg count
  8105 00004E92 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  8106 00004E9A 803805                  	cmp byte [rax], T_undefined
  8107 00004E9D 0F8439070100            	je L_error_fvar_undefined
  8108 00004EA3 803804                  	cmp byte [rax], T_closure
  8109 00004EA6 0F85B4070100            	jne L_error_non_closure
  8110 00004EAC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8111 00004EAF FF5009                  	call SOB_CLOSURE_CODE(rax)
  8112                                  
  8113 00004EB2 483D[02000000]          	cmp rax, sob_boolean_false
  8114 00004EB8 740F                    	je .L_if_else_76cb
  8115 00004EBA 48B8-                   	mov rax, L_constants + 1
  8115 00004EBC [0100000000000000] 
  8116                                  
  8117 00004EC4 E9A4000000              	jmp .L_if_end_76cb
  8118                                  
  8119                                  	.L_if_else_76cb:
  8120                                  	; preparing a tail-call
  8121 00004EC9 488B4520                	mov rax, PARAM(0)	; param s
  8122 00004ECD 50                      	push rax
  8123 00004ECE 6A01                    	push 1	; arg count
  8124 00004ED0 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  8125 00004ED8 803805                  	cmp byte [rax], T_undefined
  8126 00004EDB 0F84FB060100            	je L_error_fvar_undefined
  8127 00004EE1 803804                  	cmp byte [rax], T_closure
  8128 00004EE4 0F8576070100            	jne L_error_non_closure
  8129 00004EEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8130 00004EED FF5009                  	call SOB_CLOSURE_CODE(rax)
  8131 00004EF0 50                      	push rax
  8132 00004EF1 488B4520                	mov rax, PARAM(0)	; param s
  8133 00004EF5 50                      	push rax
  8134 00004EF6 6A01                    	push 1	; arg count
  8135 00004EF8 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  8136 00004F00 803805                  	cmp byte [rax], T_undefined
  8137 00004F03 0F84D3060100            	je L_error_fvar_undefined
  8138 00004F09 803804                  	cmp byte [rax], T_closure
  8139 00004F0C 0F854E070100            	jne L_error_non_closure
  8140 00004F12 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8141 00004F15 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8142 00004F18 50                      	push rax
  8143 00004F19 6A02                    	push 2	; arg count
  8144 00004F1B 488B4510                	mov rax, ENV
  8145 00004F1F 488B00                  	mov rax, qword [rax + 8 * 0]
  8146 00004F22 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8147 00004F25 488B00                  	mov rax, qword [rax]
  8148 00004F28 803804                  	cmp byte [rax], T_closure
  8149 00004F2B 0F852F070100            	jne L_error_non_closure
  8150 00004F31 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8151                                  
  8152                                  	; recycling the current frame
  8153 00004F34 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8154 00004F37 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8155 00004F3A B906000000              	mov rcx, 2 + 4
  8156 00004F3F 488B5D18                	mov rbx, COUNT
  8157 00004F43 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8158 00004F48 488D55F8                	lea rdx, [rbp - 8 * 1]
  8159                                  .L_tc_recycle_frame_loop_8ed9:
  8160 00004F4C 4883F900                	cmp rcx, 0
  8161 00004F50 7413                    	je .L_tc_recycle_frame_done_8ed9
  8162 00004F52 488B32                  	mov rsi, qword [rdx]
  8163 00004F55 488933                  	mov qword [rbx], rsi
  8164 00004F58 48FFC9                  	dec rcx
  8165 00004F5B 4883EB08                	sub rbx, 8 * 1
  8166 00004F5F 4883EA08                	sub rdx, 8 * 1
  8167 00004F63 EBE7                    	jmp .L_tc_recycle_frame_loop_8ed9
  8168                                  .L_tc_recycle_frame_done_8ed9:
  8169 00004F65 488D6308                	lea rsp, [rbx + 8 * 1]
  8170 00004F69 5D                      	pop rbp	; the proc will restore it!
  8171 00004F6A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8172                                  
  8173                                  	.L_if_end_76cb:
  8174 00004F6D C9                      	leave
  8175 00004F6E C21800                  	ret AND_KILL_FRAME(1)
  8176                                  .L_lambda_opt_end_0f57:	; new closure is in rax
  8177 00004F71 C9                      	leave
  8178 00004F72 C22000                  	ret AND_KILL_FRAME(2)
  8179                                  .L_lambda_simple_end_6d18:	; new closure is in rax
  8180 00004F75 803804                  	cmp byte [rax], T_closure
  8181 00004F78 0F85E2060100            	jne L_error_non_closure
  8182 00004F7E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8183 00004F81 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8184 00004F84 48890425[29150000]      	mov qword [free_var_113], rax
  8185 00004F8C 48B8-                   	mov rax, sob_void
  8185 00004F8E [0000000000000000] 
  8186                                  
  8187 00004F96 4889C7                  	mov rdi, rax
  8188 00004F99 E87D080100              	call print_sexpr_if_not_void
  8189                                  
  8190 00004F9E 48B8-                   	mov rax, L_constants + 1881
  8190 00004FA0 [5907000000000000] 
  8191 00004FA8 50                      	push rax
  8192 00004FA9 6A01                    	push 1	; arg count
  8193 00004FAB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8194 00004FB0 E854070100              	call malloc
  8195 00004FB5 50                      	push rax
  8196 00004FB6 BF00000000              	mov rdi, 8 * 0	; new rib
  8197 00004FBB E849070100              	call malloc
  8198 00004FC0 50                      	push rax
  8199 00004FC1 BF08000000              	mov rdi, 8 * 1	; extended env
  8200 00004FC6 E83E070100              	call malloc
  8201 00004FCB 488B7D10                	mov rdi, ENV
  8202 00004FCF BE00000000              	mov rsi, 0
  8203 00004FD4 BA01000000              	mov rdx, 1
  8204                                  .L_lambda_simple_env_loop_6d1b:	; ext_env[i + 1] <-- env[i]
  8205 00004FD9 4883FE00                	cmp rsi, 0
  8206 00004FDD 7410                    	je .L_lambda_simple_env_end_6d1b
  8207 00004FDF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8208 00004FE3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8209 00004FE7 48FFC6                  	inc rsi
  8210 00004FEA 48FFC2                  	inc rdx
  8211 00004FED EBEA                    	jmp .L_lambda_simple_env_loop_6d1b
  8212                                  .L_lambda_simple_env_end_6d1b:
  8213 00004FEF 5B                      	pop rbx
  8214 00004FF0 BE00000000              	mov rsi, 0
  8215                                  .L_lambda_simple_params_loop_6d1b:	; copy params
  8216 00004FF5 4883FE00                	cmp rsi, 0
  8217 00004FF9 740E                    	je .L_lambda_simple_params_end_6d1b
  8218 00004FFB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8219 00005000 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8220 00005004 48FFC6                  	inc rsi
  8221 00005007 EBEC                    	jmp .L_lambda_simple_params_loop_6d1b
  8222                                  .L_lambda_simple_params_end_6d1b:
  8223 00005009 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8224 0000500C 4889C3                  	mov rbx, rax
  8225 0000500F 58                      	pop rax
  8226 00005010 C60004                  	mov byte [rax], T_closure
  8227 00005013 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8228 00005017 48C74009[24500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d1b
  8229 0000501F E9DA030000              	jmp .L_lambda_simple_end_6d1b
  8230                                  .L_lambda_simple_code_6d1b:	; lambda-simple body
  8231 00005024 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8232 0000502A 740B                    	je .L_lambda_simple_arity_check_ok_6d1b
  8233 0000502C FF742410                	push qword [rsp + 8 * 2]
  8234 00005030 6A01                    	push 1
  8235 00005032 E98B060100              	jmp L_error_incorrect_arity_simple
  8236                                  .L_lambda_simple_arity_check_ok_6d1b:
  8237 00005037 C8000000                	enter 0, 0
  8238                                  
  8239 0000503B BF08000000              	mov rdi, 8
  8240 00005040 E8C4060100              	call malloc
  8241 00005045 488B5D20                	mov rbx, PARAM(0)	; param run
  8242 00005049 488918                  	mov [rax], rbx	; box run
  8243 0000504C 48894520                	mov PARAM(0), rax	;replace param run with box
  8244 00005050 48B8-                   	mov rax, sob_void
  8244 00005052 [0000000000000000] 
  8245                                  
  8246 0000505A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8247 0000505F E8A5060100              	call malloc
  8248 00005064 50                      	push rax
  8249 00005065 BF08000000              	mov rdi, 8 * 1	; new rib
  8250 0000506A E89A060100              	call malloc
  8251 0000506F 50                      	push rax
  8252 00005070 BF10000000              	mov rdi, 8 * 2	; extended env
  8253 00005075 E88F060100              	call malloc
  8254 0000507A 488B7D10                	mov rdi, ENV
  8255 0000507E BE00000000              	mov rsi, 0
  8256 00005083 BA01000000              	mov rdx, 1
  8257                                  .L_lambda_simple_env_loop_6d1c:	; ext_env[i + 1] <-- env[i]
  8258 00005088 4883FE01                	cmp rsi, 1
  8259 0000508C 7410                    	je .L_lambda_simple_env_end_6d1c
  8260 0000508E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8261 00005092 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8262 00005096 48FFC6                  	inc rsi
  8263 00005099 48FFC2                  	inc rdx
  8264 0000509C EBEA                    	jmp .L_lambda_simple_env_loop_6d1c
  8265                                  .L_lambda_simple_env_end_6d1c:
  8266 0000509E 5B                      	pop rbx
  8267 0000509F BE00000000              	mov rsi, 0
  8268                                  .L_lambda_simple_params_loop_6d1c:	; copy params
  8269 000050A4 4883FE01                	cmp rsi, 1
  8270 000050A8 740E                    	je .L_lambda_simple_params_end_6d1c
  8271 000050AA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8272 000050AF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8273 000050B3 48FFC6                  	inc rsi
  8274 000050B6 EBEC                    	jmp .L_lambda_simple_params_loop_6d1c
  8275                                  .L_lambda_simple_params_end_6d1c:
  8276 000050B8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8277 000050BB 4889C3                  	mov rbx, rax
  8278 000050BE 58                      	pop rax
  8279 000050BF C60004                  	mov byte [rax], T_closure
  8280 000050C2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8281 000050C6 48C74009[D3500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d1c
  8282 000050CE E95F010000              	jmp .L_lambda_simple_end_6d1c
  8283                                  .L_lambda_simple_code_6d1c:	; lambda-simple body
  8284 000050D3 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8285 000050D9 740B                    	je .L_lambda_simple_arity_check_ok_6d1c
  8286 000050DB FF742410                	push qword [rsp + 8 * 2]
  8287 000050DF 6A03                    	push 3
  8288 000050E1 E9DC050100              	jmp L_error_incorrect_arity_simple
  8289                                  .L_lambda_simple_arity_check_ok_6d1c:
  8290 000050E6 C8000000                	enter 0, 0
  8291 000050EA 488B4530                	mov rax, PARAM(2)	; param ss
  8292 000050EE 50                      	push rax
  8293 000050EF 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  8294 000050F7 803805                  	cmp byte [rax], T_undefined
  8295 000050FA 0F84DC040100            	je L_error_fvar_undefined
  8296 00005100 50                      	push rax
  8297 00005101 6A02                    	push 2	; arg count
  8298 00005103 488B0425[D4140000]      	mov rax, qword [free_var_108]	; free var ormap
  8299 0000510B 803805                  	cmp byte [rax], T_undefined
  8300 0000510E 0F84C8040100            	je L_error_fvar_undefined
  8301 00005114 803804                  	cmp byte [rax], T_closure
  8302 00005117 0F8543050100            	jne L_error_non_closure
  8303 0000511D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8304 00005120 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8305                                  
  8306 00005123 483D[02000000]          	cmp rax, sob_boolean_false
  8307 00005129 7409                    	je .L_if_else_76cc
  8308 0000512B 488B4528                	mov rax, PARAM(1)	; param unit
  8309                                  
  8310 0000512F E9FA000000              	jmp .L_if_end_76cc
  8311                                  
  8312                                  	.L_if_else_76cc:
  8313                                  	; preparing a tail-call
  8314 00005134 488B4530                	mov rax, PARAM(2)	; param ss
  8315 00005138 50                      	push rax
  8316 00005139 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  8317 00005141 803805                  	cmp byte [rax], T_undefined
  8318 00005144 0F8492040100            	je L_error_fvar_undefined
  8319 0000514A 50                      	push rax
  8320 0000514B 6A02                    	push 2	; arg count
  8321 0000514D 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  8322 00005155 803805                  	cmp byte [rax], T_undefined
  8323 00005158 0F847E040100            	je L_error_fvar_undefined
  8324 0000515E 803804                  	cmp byte [rax], T_closure
  8325 00005161 0F85F9040100            	jne L_error_non_closure
  8326 00005167 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8327 0000516A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8328 0000516D 50                      	push rax
  8329 0000516E 488B4530                	mov rax, PARAM(2)	; param ss
  8330 00005172 50                      	push rax
  8331 00005173 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  8332 0000517B 803805                  	cmp byte [rax], T_undefined
  8333 0000517E 0F8458040100            	je L_error_fvar_undefined
  8334 00005184 50                      	push rax
  8335 00005185 6A02                    	push 2	; arg count
  8336 00005187 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  8337 0000518F 803805                  	cmp byte [rax], T_undefined
  8338 00005192 0F8444040100            	je L_error_fvar_undefined
  8339 00005198 803804                  	cmp byte [rax], T_closure
  8340 0000519B 0F85BF040100            	jne L_error_non_closure
  8341 000051A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8342 000051A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8343 000051A7 50                      	push rax
  8344 000051A8 488B4528                	mov rax, PARAM(1)	; param unit
  8345 000051AC 50                      	push rax
  8346 000051AD 488B4520                	mov rax, PARAM(0)	; param f
  8347 000051B1 50                      	push rax
  8348 000051B2 6A03                    	push 3	; arg count
  8349 000051B4 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
  8350 000051BC 803805                  	cmp byte [rax], T_undefined
  8351 000051BF 0F8417040100            	je L_error_fvar_undefined
  8352 000051C5 803804                  	cmp byte [rax], T_closure
  8353 000051C8 0F8592040100            	jne L_error_non_closure
  8354 000051CE FF7001                  	push SOB_CLOSURE_ENV(rax)
  8355 000051D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8356 000051D4 50                      	push rax
  8357 000051D5 488B4520                	mov rax, PARAM(0)	; param f
  8358 000051D9 50                      	push rax
  8359 000051DA 6A03                    	push 3	; arg count
  8360 000051DC 488B4510                	mov rax, ENV
  8361 000051E0 488B00                  	mov rax, qword [rax + 8 * 0]
  8362 000051E3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8363 000051E6 488B00                  	mov rax, qword [rax]
  8364 000051E9 803804                  	cmp byte [rax], T_closure
  8365 000051EC 0F856E040100            	jne L_error_non_closure
  8366 000051F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8367                                  
  8368                                  	; recycling the current frame
  8369 000051F5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8370 000051F8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8371 000051FB B907000000              	mov rcx, 3 + 4
  8372 00005200 488B5D18                	mov rbx, COUNT
  8373 00005204 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8374 00005209 488D55F8                	lea rdx, [rbp - 8 * 1]
  8375                                  .L_tc_recycle_frame_loop_8eda:
  8376 0000520D 4883F900                	cmp rcx, 0
  8377 00005211 7413                    	je .L_tc_recycle_frame_done_8eda
  8378 00005213 488B32                  	mov rsi, qword [rdx]
  8379 00005216 488933                  	mov qword [rbx], rsi
  8380 00005219 48FFC9                  	dec rcx
  8381 0000521C 4883EB08                	sub rbx, 8 * 1
  8382 00005220 4883EA08                	sub rdx, 8 * 1
  8383 00005224 EBE7                    	jmp .L_tc_recycle_frame_loop_8eda
  8384                                  .L_tc_recycle_frame_done_8eda:
  8385 00005226 488D6308                	lea rsp, [rbx + 8 * 1]
  8386 0000522A 5D                      	pop rbp	; the proc will restore it!
  8387 0000522B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8388                                  
  8389                                  	.L_if_end_76cc:
  8390 0000522E C9                      	leave
  8391 0000522F C22800                  	ret AND_KILL_FRAME(3)
  8392                                  .L_lambda_simple_end_6d1c:	; new closure is in rax
  8393                                  
  8394 00005232 50                      	push rax
  8395 00005233 488B4520                	mov rax, PARAM(0)	; param run
  8396                                  
  8397 00005237 8F00                    	pop qword[rax]
  8398 00005239 48B8-                   	mov rax, sob_void
  8398 0000523B [0000000000000000] 
  8399                                  
  8400 00005243 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8401 00005248 E8BC040100              	call malloc
  8402 0000524D 50                      	push rax
  8403 0000524E BF08000000              	mov rdi, 8 * 1	; new rib
  8404 00005253 E8B1040100              	call malloc
  8405 00005258 50                      	push rax
  8406 00005259 BF10000000              	mov rdi, 8 * 2	; extended env
  8407 0000525E E8A6040100              	call malloc
  8408 00005263 488B7D10                	mov rdi, ENV
  8409 00005267 BE00000000              	mov rsi, 0
  8410 0000526C BA01000000              	mov rdx, 1
  8411                                  .L_lambda_opt_env_loop_0f58:	; ext_env[i + 1] <-- env[i]
  8412 00005271 4883FE01                	cmp rsi, 1
  8413 00005275 7410                    	je .L_lambda_opt_env_end_0f58
  8414 00005277 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8415 0000527B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8416 0000527F 48FFC6                  	inc rsi
  8417 00005282 48FFC2                  	inc rdx
  8418 00005285 EBEA                    	jmp .L_lambda_opt_env_loop_0f58
  8419                                  .L_lambda_opt_env_end_0f58:
  8420 00005287 5B                      	pop rbx
  8421 00005288 BE00000000              	mov rsi, 0
  8422                                  .L_lambda_opt_params_loop_0f58:	; copy params
  8423 0000528D 4883FE01                	cmp rsi, 1
  8424 00005291 740E                    	je .L_lambda_opt_params_end_0f58
  8425 00005293 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8426 00005298 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8427 0000529C 48FFC6                  	inc rsi
  8428 0000529F EBEC                    	jmp .L_lambda_opt_params_loop_0f58
  8429                                  .L_lambda_opt_params_end_0f58:
  8430 000052A1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8431 000052A4 4889C3                  	mov rbx, rax
  8432 000052A7 58                      	pop rax
  8433 000052A8 C60004                  	mov byte [rax], T_closure
  8434 000052AB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8435 000052AF 48C74009[BC520000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f58
  8436 000052B7 E93E010000              	jmp .L_lambda_opt_end_0f58
  8437                                  .L_lambda_opt_code_0f58:	; lambda-simple body
  8438 000052BC 48837C241002            	cmp qword [rsp + 8 * 2], 2 ;	 check num of args
  8439 000052C2 740D                    	je .L_lambda_opt_arity_check_exact_0f58 ;	 if equal, go to exact arity
  8440 000052C4 7F42                    	jg .L_lambda_opt_arity_check_more_0f58 ;	 if greater than, go to arity more
  8441 000052C6 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  8442 000052CA 6A02                     	push 2
  8443 000052CC E905040100              	jmp L_error_incorrect_arity_opt
  8444                                  	.L_lambda_opt_arity_check_exact_0f58:
  8445 000052D1 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  8446 000052D6 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  8447 000052DB 4883EC08                	sub rsp, 8
  8448 000052DF 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  8449                                  	.L_lambda_opt_exact_shifting_loop_0f58:
  8450 000052E3 488B5108                	mov rdx, [rcx + 8]
  8451 000052E7 488911                  	mov [rcx], rdx
  8452 000052EA 4883C108                	add rcx, 8
  8453 000052EE 4839CB                  	cmp rbx, rcx
  8454 000052F1 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f58
  8455                                  	.L_lambda_opt_exact_shifting_loop_end_0f58:
  8456 000052F3 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  8457 000052FA 4883C001                	add rax, 1 ; 	arg count += 1
  8458 000052FE 4889442410              	mov qword [rsp + 8 * 2], rax
  8459 00005303 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f58
  8460                                  	.L_lambda_opt_arity_check_more_0f58:
  8461 00005308 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  8461 0000530A [0100000000000000] 
  8462 00005312 48837C241003            	cmp qword [rsp + 8 * 2], 3;	 compare count to params
  8463 00005318 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f58
  8464                                  	.L_lambda_opt_stack_shrink_loop_0f58:
  8465 0000531A BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8466 0000531F E8E5030100              	call malloc ;	 allocated memory for the optional scheme list
  8467 00005324 C60021                  	mov byte[rax], T_pair ;	 set type pair
  8468 00005327 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8469 0000532B 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  8470 0000532E 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  8471 00005333 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  8472 00005338 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  8473 0000533C 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  8474                                  	.L_lambda_opt_more_shifting_loop_0f58:
  8475 00005341 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  8476 00005344 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  8477 00005348 4883EB08                	sub rbx, 8 
  8478 0000534C 4839DC                  	cmp rsp, rbx
  8479 0000534F 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f58
  8480                                  	.L_lambda_opt_more_shifting_loop_end_0f58:
  8481 00005351 4883C408                	add rsp, 8 ;	 update rsp
  8482 00005355 488B5C2410              	mov rbx, [rsp + 8 * 2]
  8483 0000535A 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  8484 0000535E 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  8485 00005363 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8486 00005369 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f58
  8487                                  	.L_lambda_opt_stack_shrink_loop_exit_0f58:
  8488 0000536B 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  8489 00005370 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  8490 00005375 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8491 0000537A E88A030100              	call malloc ;	 allocated memory for the optional scheme list
  8492 0000537F C60021                  	mov byte[rax], T_pair ;	 set type pair
  8493 00005382 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8494 00005386 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  8495 0000538A 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  8496                                  	.L_lambda_opt_stack_adjusted_0f58:
  8497 0000538F C8000000                	enter 0, 0
  8498                                  	; preparing a tail-call
  8499 00005393 488B4530                	mov rax, PARAM(2)	; param ss
  8500 00005397 50                      	push rax
  8501 00005398 488B4528                	mov rax, PARAM(1)	; param unit
  8502 0000539C 50                      	push rax
  8503 0000539D 488B4520                	mov rax, PARAM(0)	; param f
  8504 000053A1 50                      	push rax
  8505 000053A2 6A03                    	push 3	; arg count
  8506 000053A4 488B4510                	mov rax, ENV
  8507 000053A8 488B00                  	mov rax, qword [rax + 8 * 0]
  8508 000053AB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8509 000053AE 488B00                  	mov rax, qword [rax]
  8510 000053B1 803804                  	cmp byte [rax], T_closure
  8511 000053B4 0F85A6020100            	jne L_error_non_closure
  8512 000053BA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8513                                  
  8514                                  	; recycling the current frame
  8515 000053BD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8516 000053C0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8517 000053C3 B907000000              	mov rcx, 3 + 4
  8518 000053C8 488B5D18                	mov rbx, COUNT
  8519 000053CC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8520 000053D1 488D55F8                	lea rdx, [rbp - 8 * 1]
  8521                                  .L_tc_recycle_frame_loop_8edb:
  8522 000053D5 4883F900                	cmp rcx, 0
  8523 000053D9 7413                    	je .L_tc_recycle_frame_done_8edb
  8524 000053DB 488B32                  	mov rsi, qword [rdx]
  8525 000053DE 488933                  	mov qword [rbx], rsi
  8526 000053E1 48FFC9                  	dec rcx
  8527 000053E4 4883EB08                	sub rbx, 8 * 1
  8528 000053E8 4883EA08                	sub rdx, 8 * 1
  8529 000053EC EBE7                    	jmp .L_tc_recycle_frame_loop_8edb
  8530                                  .L_tc_recycle_frame_done_8edb:
  8531 000053EE 488D6308                	lea rsp, [rbx + 8 * 1]
  8532 000053F2 5D                      	pop rbp	; the proc will restore it!
  8533 000053F3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8534 000053F6 C9                      	leave
  8535 000053F7 C22800                  	ret AND_KILL_FRAME(3)
  8536                                  .L_lambda_opt_end_0f58:	; new closure is in rax
  8537 000053FA C9                      	leave
  8538 000053FB C21800                  	ret AND_KILL_FRAME(1)
  8539                                  .L_lambda_simple_end_6d1b:	; new closure is in rax
  8540 000053FE 803804                  	cmp byte [rax], T_closure
  8541 00005401 0F8559020100            	jne L_error_non_closure
  8542 00005407 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8543 0000540A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8544 0000540D 48890425[18150000]      	mov qword [free_var_112], rax
  8545 00005415 48B8-                   	mov rax, sob_void
  8545 00005417 [0000000000000000] 
  8546                                  
  8547 0000541F 4889C7                  	mov rdi, rax
  8548 00005422 E8F4030100              	call print_sexpr_if_not_void
  8549                                  
  8550 00005427 48B8-                   	mov rax, L_constants + 1881
  8550 00005429 [5907000000000000] 
  8551 00005431 50                      	push rax
  8552 00005432 6A01                    	push 1	; arg count
  8553 00005434 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8554 00005439 E8CB020100              	call malloc
  8555 0000543E 50                      	push rax
  8556 0000543F BF00000000              	mov rdi, 8 * 0	; new rib
  8557 00005444 E8C0020100              	call malloc
  8558 00005449 50                      	push rax
  8559 0000544A BF08000000              	mov rdi, 8 * 1	; extended env
  8560 0000544F E8B5020100              	call malloc
  8561 00005454 488B7D10                	mov rdi, ENV
  8562 00005458 BE00000000              	mov rsi, 0
  8563 0000545D BA01000000              	mov rdx, 1
  8564                                  .L_lambda_simple_env_loop_6d1d:	; ext_env[i + 1] <-- env[i]
  8565 00005462 4883FE00                	cmp rsi, 0
  8566 00005466 7410                    	je .L_lambda_simple_env_end_6d1d
  8567 00005468 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8568 0000546C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8569 00005470 48FFC6                  	inc rsi
  8570 00005473 48FFC2                  	inc rdx
  8571 00005476 EBEA                    	jmp .L_lambda_simple_env_loop_6d1d
  8572                                  .L_lambda_simple_env_end_6d1d:
  8573 00005478 5B                      	pop rbx
  8574 00005479 BE00000000              	mov rsi, 0
  8575                                  .L_lambda_simple_params_loop_6d1d:	; copy params
  8576 0000547E 4883FE00                	cmp rsi, 0
  8577 00005482 740E                    	je .L_lambda_simple_params_end_6d1d
  8578 00005484 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8579 00005489 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8580 0000548D 48FFC6                  	inc rsi
  8581 00005490 EBEC                    	jmp .L_lambda_simple_params_loop_6d1d
  8582                                  .L_lambda_simple_params_end_6d1d:
  8583 00005492 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8584 00005495 4889C3                  	mov rbx, rax
  8585 00005498 58                      	pop rax
  8586 00005499 C60004                  	mov byte [rax], T_closure
  8587 0000549C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8588 000054A0 48C74009[AD540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d1d
  8589 000054A8 E92B040000              	jmp .L_lambda_simple_end_6d1d
  8590                                  .L_lambda_simple_code_6d1d:	; lambda-simple body
  8591 000054AD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8592 000054B3 740B                    	je .L_lambda_simple_arity_check_ok_6d1d
  8593 000054B5 FF742410                	push qword [rsp + 8 * 2]
  8594 000054B9 6A01                    	push 1
  8595 000054BB E902020100              	jmp L_error_incorrect_arity_simple
  8596                                  .L_lambda_simple_arity_check_ok_6d1d:
  8597 000054C0 C8000000                	enter 0, 0
  8598                                  
  8599 000054C4 BF08000000              	mov rdi, 8
  8600 000054C9 E83B020100              	call malloc
  8601 000054CE 488B5D20                	mov rbx, PARAM(0)	; param run
  8602 000054D2 488918                  	mov [rax], rbx	; box run
  8603 000054D5 48894520                	mov PARAM(0), rax	;replace param run with box
  8604 000054D9 48B8-                   	mov rax, sob_void
  8604 000054DB [0000000000000000] 
  8605                                  
  8606 000054E3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8607 000054E8 E81C020100              	call malloc
  8608 000054ED 50                      	push rax
  8609 000054EE BF08000000              	mov rdi, 8 * 1	; new rib
  8610 000054F3 E811020100              	call malloc
  8611 000054F8 50                      	push rax
  8612 000054F9 BF10000000              	mov rdi, 8 * 2	; extended env
  8613 000054FE E806020100              	call malloc
  8614 00005503 488B7D10                	mov rdi, ENV
  8615 00005507 BE00000000              	mov rsi, 0
  8616 0000550C BA01000000              	mov rdx, 1
  8617                                  .L_lambda_simple_env_loop_6d1e:	; ext_env[i + 1] <-- env[i]
  8618 00005511 4883FE01                	cmp rsi, 1
  8619 00005515 7410                    	je .L_lambda_simple_env_end_6d1e
  8620 00005517 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8621 0000551B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8622 0000551F 48FFC6                  	inc rsi
  8623 00005522 48FFC2                  	inc rdx
  8624 00005525 EBEA                    	jmp .L_lambda_simple_env_loop_6d1e
  8625                                  .L_lambda_simple_env_end_6d1e:
  8626 00005527 5B                      	pop rbx
  8627 00005528 BE00000000              	mov rsi, 0
  8628                                  .L_lambda_simple_params_loop_6d1e:	; copy params
  8629 0000552D 4883FE01                	cmp rsi, 1
  8630 00005531 740E                    	je .L_lambda_simple_params_end_6d1e
  8631 00005533 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8632 00005538 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8633 0000553C 48FFC6                  	inc rsi
  8634 0000553F EBEC                    	jmp .L_lambda_simple_params_loop_6d1e
  8635                                  .L_lambda_simple_params_end_6d1e:
  8636 00005541 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8637 00005544 4889C3                  	mov rbx, rax
  8638 00005547 58                      	pop rax
  8639 00005548 C60004                  	mov byte [rax], T_closure
  8640 0000554B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8641 0000554F 48C74009[5C550000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d1e
  8642 00005557 E9B0010000              	jmp .L_lambda_simple_end_6d1e
  8643                                  .L_lambda_simple_code_6d1e:	; lambda-simple body
  8644 0000555C 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8645 00005562 740B                    	je .L_lambda_simple_arity_check_ok_6d1e
  8646 00005564 FF742410                	push qword [rsp + 8 * 2]
  8647 00005568 6A03                    	push 3
  8648 0000556A E953010100              	jmp L_error_incorrect_arity_simple
  8649                                  .L_lambda_simple_arity_check_ok_6d1e:
  8650 0000556F C8000000                	enter 0, 0
  8651 00005573 488B4530                	mov rax, PARAM(2)	; param ss
  8652 00005577 50                      	push rax
  8653 00005578 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
  8654 00005580 803805                  	cmp byte [rax], T_undefined
  8655 00005583 0F8453000100            	je L_error_fvar_undefined
  8656 00005589 50                      	push rax
  8657 0000558A 6A02                    	push 2	; arg count
  8658 0000558C 488B0425[D4140000]      	mov rax, qword [free_var_108]	; free var ormap
  8659 00005594 803805                  	cmp byte [rax], T_undefined
  8660 00005597 0F843F000100            	je L_error_fvar_undefined
  8661 0000559D 803804                  	cmp byte [rax], T_closure
  8662 000055A0 0F85BA000100            	jne L_error_non_closure
  8663 000055A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8664 000055A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8665                                  
  8666 000055AC 483D[02000000]          	cmp rax, sob_boolean_false
  8667 000055B2 7409                    	je .L_if_else_76cd
  8668 000055B4 488B4528                	mov rax, PARAM(1)	; param unit
  8669                                  
  8670 000055B8 E94B010000              	jmp .L_if_end_76cd
  8671                                  
  8672                                  	.L_if_else_76cd:
  8673                                  	; preparing a tail-call
  8674 000055BD 48B8-                   	mov rax, L_constants + 1
  8674 000055BF [0100000000000000] 
  8675 000055C7 50                      	push rax
  8676 000055C8 488B4530                	mov rax, PARAM(2)	; param ss
  8677 000055CC 50                      	push rax
  8678 000055CD 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
  8679 000055D5 803805                  	cmp byte [rax], T_undefined
  8680 000055D8 0F84FEFF0000            	je L_error_fvar_undefined
  8681 000055DE 50                      	push rax
  8682 000055DF 6A02                    	push 2	; arg count
  8683 000055E1 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  8684 000055E9 803805                  	cmp byte [rax], T_undefined
  8685 000055EC 0F84EAFF0000            	je L_error_fvar_undefined
  8686 000055F2 803804                  	cmp byte [rax], T_closure
  8687 000055F5 0F8565000100            	jne L_error_non_closure
  8688 000055FB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8689 000055FE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8690 00005601 50                      	push rax
  8691 00005602 488B4528                	mov rax, PARAM(1)	; param unit
  8692 00005606 50                      	push rax
  8693 00005607 488B4520                	mov rax, PARAM(0)	; param f
  8694 0000560B 50                      	push rax
  8695 0000560C 6A03                    	push 3	; arg count
  8696 0000560E 488B4510                	mov rax, ENV
  8697 00005612 488B00                  	mov rax, qword [rax + 8 * 0]
  8698 00005615 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8699 00005618 488B00                  	mov rax, qword [rax]
  8700 0000561B 803804                  	cmp byte [rax], T_closure
  8701 0000561E 0F853C000100            	jne L_error_non_closure
  8702 00005624 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8703 00005627 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8704 0000562A 50                      	push rax
  8705 0000562B 6A02                    	push 2	; arg count
  8706 0000562D 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
  8707 00005635 803805                  	cmp byte [rax], T_undefined
  8708 00005638 0F849EFF0000            	je L_error_fvar_undefined
  8709 0000563E 803804                  	cmp byte [rax], T_closure
  8710 00005641 0F8519000100            	jne L_error_non_closure
  8711 00005647 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8712 0000564A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8713 0000564D 50                      	push rax
  8714 0000564E 488B4530                	mov rax, PARAM(2)	; param ss
  8715 00005652 50                      	push rax
  8716 00005653 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
  8717 0000565B 803805                  	cmp byte [rax], T_undefined
  8718 0000565E 0F8478FF0000            	je L_error_fvar_undefined
  8719 00005664 50                      	push rax
  8720 00005665 6A02                    	push 2	; arg count
  8721 00005667 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
  8722 0000566F 803805                  	cmp byte [rax], T_undefined
  8723 00005672 0F8464FF0000            	je L_error_fvar_undefined
  8724 00005678 803804                  	cmp byte [rax], T_closure
  8725 0000567B 0F85DFFF0000            	jne L_error_non_closure
  8726 00005681 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8727 00005684 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8728 00005687 50                      	push rax
  8729 00005688 6A02                    	push 2	; arg count
  8730 0000568A 488B0425[29150000]      	mov rax, qword [free_var_113]	; free var append
  8731 00005692 803805                  	cmp byte [rax], T_undefined
  8732 00005695 0F8441FF0000            	je L_error_fvar_undefined
  8733 0000569B 803804                  	cmp byte [rax], T_closure
  8734 0000569E 0F85BCFF0000            	jne L_error_non_closure
  8735 000056A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8736 000056A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8737 000056AA 50                      	push rax
  8738 000056AB 488B4520                	mov rax, PARAM(0)	; param f
  8739 000056AF 50                      	push rax
  8740 000056B0 6A02                    	push 2	; arg count
  8741 000056B2 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
  8742 000056BA 803805                  	cmp byte [rax], T_undefined
  8743 000056BD 0F8419FF0000            	je L_error_fvar_undefined
  8744 000056C3 803804                  	cmp byte [rax], T_closure
  8745 000056C6 0F8594FF0000            	jne L_error_non_closure
  8746 000056CC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8747                                  
  8748                                  	; recycling the current frame
  8749 000056CF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8750 000056D2 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8751 000056D5 B906000000              	mov rcx, 2 + 4
  8752 000056DA 488B5D18                	mov rbx, COUNT
  8753 000056DE 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8754 000056E3 488D55F8                	lea rdx, [rbp - 8 * 1]
  8755                                  .L_tc_recycle_frame_loop_8edc:
  8756 000056E7 4883F900                	cmp rcx, 0
  8757 000056EB 7413                    	je .L_tc_recycle_frame_done_8edc
  8758 000056ED 488B32                  	mov rsi, qword [rdx]
  8759 000056F0 488933                  	mov qword [rbx], rsi
  8760 000056F3 48FFC9                  	dec rcx
  8761 000056F6 4883EB08                	sub rbx, 8 * 1
  8762 000056FA 4883EA08                	sub rdx, 8 * 1
  8763 000056FE EBE7                    	jmp .L_tc_recycle_frame_loop_8edc
  8764                                  .L_tc_recycle_frame_done_8edc:
  8765 00005700 488D6308                	lea rsp, [rbx + 8 * 1]
  8766 00005704 5D                      	pop rbp	; the proc will restore it!
  8767 00005705 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8768                                  
  8769                                  	.L_if_end_76cd:
  8770 00005708 C9                      	leave
  8771 00005709 C22800                  	ret AND_KILL_FRAME(3)
  8772                                  .L_lambda_simple_end_6d1e:	; new closure is in rax
  8773                                  
  8774 0000570C 50                      	push rax
  8775 0000570D 488B4520                	mov rax, PARAM(0)	; param run
  8776                                  
  8777 00005711 8F00                    	pop qword[rax]
  8778 00005713 48B8-                   	mov rax, sob_void
  8778 00005715 [0000000000000000] 
  8779                                  
  8780 0000571D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8781 00005722 E8E2FF0000              	call malloc
  8782 00005727 50                      	push rax
  8783 00005728 BF08000000              	mov rdi, 8 * 1	; new rib
  8784 0000572D E8D7FF0000              	call malloc
  8785 00005732 50                      	push rax
  8786 00005733 BF10000000              	mov rdi, 8 * 2	; extended env
  8787 00005738 E8CCFF0000              	call malloc
  8788 0000573D 488B7D10                	mov rdi, ENV
  8789 00005741 BE00000000              	mov rsi, 0
  8790 00005746 BA01000000              	mov rdx, 1
  8791                                  .L_lambda_opt_env_loop_0f59:	; ext_env[i + 1] <-- env[i]
  8792 0000574B 4883FE01                	cmp rsi, 1
  8793 0000574F 7410                    	je .L_lambda_opt_env_end_0f59
  8794 00005751 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8795 00005755 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8796 00005759 48FFC6                  	inc rsi
  8797 0000575C 48FFC2                  	inc rdx
  8798 0000575F EBEA                    	jmp .L_lambda_opt_env_loop_0f59
  8799                                  .L_lambda_opt_env_end_0f59:
  8800 00005761 5B                      	pop rbx
  8801 00005762 BE00000000              	mov rsi, 0
  8802                                  .L_lambda_opt_params_loop_0f59:	; copy params
  8803 00005767 4883FE01                	cmp rsi, 1
  8804 0000576B 740E                    	je .L_lambda_opt_params_end_0f59
  8805 0000576D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8806 00005772 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8807 00005776 48FFC6                  	inc rsi
  8808 00005779 EBEC                    	jmp .L_lambda_opt_params_loop_0f59
  8809                                  .L_lambda_opt_params_end_0f59:
  8810 0000577B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8811 0000577E 4889C3                  	mov rbx, rax
  8812 00005781 58                      	pop rax
  8813 00005782 C60004                  	mov byte [rax], T_closure
  8814 00005785 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8815 00005789 48C74009[96570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f59
  8816 00005791 E93E010000              	jmp .L_lambda_opt_end_0f59
  8817                                  .L_lambda_opt_code_0f59:	; lambda-simple body
  8818 00005796 48837C241002            	cmp qword [rsp + 8 * 2], 2 ;	 check num of args
  8819 0000579C 740D                    	je .L_lambda_opt_arity_check_exact_0f59 ;	 if equal, go to exact arity
  8820 0000579E 7F42                    	jg .L_lambda_opt_arity_check_more_0f59 ;	 if greater than, go to arity more
  8821 000057A0 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  8822 000057A4 6A02                     	push 2
  8823 000057A6 E92BFF0000              	jmp L_error_incorrect_arity_opt
  8824                                  	.L_lambda_opt_arity_check_exact_0f59:
  8825 000057AB 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  8826 000057B0 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  8827 000057B5 4883EC08                	sub rsp, 8
  8828 000057B9 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  8829                                  	.L_lambda_opt_exact_shifting_loop_0f59:
  8830 000057BD 488B5108                	mov rdx, [rcx + 8]
  8831 000057C1 488911                  	mov [rcx], rdx
  8832 000057C4 4883C108                	add rcx, 8
  8833 000057C8 4839CB                  	cmp rbx, rcx
  8834 000057CB 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f59
  8835                                  	.L_lambda_opt_exact_shifting_loop_end_0f59:
  8836 000057CD 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  8837 000057D4 4883C001                	add rax, 1 ; 	arg count += 1
  8838 000057D8 4889442410              	mov qword [rsp + 8 * 2], rax
  8839 000057DD E987000000              	jmp .L_lambda_opt_stack_adjusted_0f59
  8840                                  	.L_lambda_opt_arity_check_more_0f59:
  8841 000057E2 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  8841 000057E4 [0100000000000000] 
  8842 000057EC 48837C241003            	cmp qword [rsp + 8 * 2], 3;	 compare count to params
  8843 000057F2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f59
  8844                                  	.L_lambda_opt_stack_shrink_loop_0f59:
  8845 000057F4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8846 000057F9 E80BFF0000              	call malloc ;	 allocated memory for the optional scheme list
  8847 000057FE C60021                  	mov byte[rax], T_pair ;	 set type pair
  8848 00005801 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8849 00005805 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  8850 00005808 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  8851 0000580D 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  8852 00005812 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  8853 00005816 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  8854                                  	.L_lambda_opt_more_shifting_loop_0f59:
  8855 0000581B 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  8856 0000581E 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  8857 00005822 4883EB08                	sub rbx, 8 
  8858 00005826 4839DC                  	cmp rsp, rbx
  8859 00005829 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f59
  8860                                  	.L_lambda_opt_more_shifting_loop_end_0f59:
  8861 0000582B 4883C408                	add rsp, 8 ;	 update rsp
  8862 0000582F 488B5C2410              	mov rbx, [rsp + 8 * 2]
  8863 00005834 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  8864 00005838 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  8865 0000583D 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8866 00005843 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f59
  8867                                  	.L_lambda_opt_stack_shrink_loop_exit_0f59:
  8868 00005845 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  8869 0000584A 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  8870 0000584F BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8871 00005854 E8B0FE0000              	call malloc ;	 allocated memory for the optional scheme list
  8872 00005859 C60021                  	mov byte[rax], T_pair ;	 set type pair
  8873 0000585C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8874 00005860 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  8875 00005864 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  8876                                  	.L_lambda_opt_stack_adjusted_0f59:
  8877 00005869 C8000000                	enter 0, 0
  8878                                  	; preparing a tail-call
  8879 0000586D 488B4530                	mov rax, PARAM(2)	; param ss
  8880 00005871 50                      	push rax
  8881 00005872 488B4528                	mov rax, PARAM(1)	; param unit
  8882 00005876 50                      	push rax
  8883 00005877 488B4520                	mov rax, PARAM(0)	; param f
  8884 0000587B 50                      	push rax
  8885 0000587C 6A03                    	push 3	; arg count
  8886 0000587E 488B4510                	mov rax, ENV
  8887 00005882 488B00                  	mov rax, qword [rax + 8 * 0]
  8888 00005885 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8889 00005888 488B00                  	mov rax, qword [rax]
  8890 0000588B 803804                  	cmp byte [rax], T_closure
  8891 0000588E 0F85CCFD0000            	jne L_error_non_closure
  8892 00005894 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8893                                  
  8894                                  	; recycling the current frame
  8895 00005897 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8896 0000589A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8897 0000589D B907000000              	mov rcx, 3 + 4
  8898 000058A2 488B5D18                	mov rbx, COUNT
  8899 000058A6 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8900 000058AB 488D55F8                	lea rdx, [rbp - 8 * 1]
  8901                                  .L_tc_recycle_frame_loop_8edd:
  8902 000058AF 4883F900                	cmp rcx, 0
  8903 000058B3 7413                    	je .L_tc_recycle_frame_done_8edd
  8904 000058B5 488B32                  	mov rsi, qword [rdx]
  8905 000058B8 488933                  	mov qword [rbx], rsi
  8906 000058BB 48FFC9                  	dec rcx
  8907 000058BE 4883EB08                	sub rbx, 8 * 1
  8908 000058C2 4883EA08                	sub rdx, 8 * 1
  8909 000058C6 EBE7                    	jmp .L_tc_recycle_frame_loop_8edd
  8910                                  .L_tc_recycle_frame_done_8edd:
  8911 000058C8 488D6308                	lea rsp, [rbx + 8 * 1]
  8912 000058CC 5D                      	pop rbp	; the proc will restore it!
  8913 000058CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8914 000058D0 C9                      	leave
  8915 000058D1 C22800                  	ret AND_KILL_FRAME(3)
  8916                                  .L_lambda_opt_end_0f59:	; new closure is in rax
  8917 000058D4 C9                      	leave
  8918 000058D5 C21800                  	ret AND_KILL_FRAME(1)
  8919                                  .L_lambda_simple_end_6d1d:	; new closure is in rax
  8920 000058D8 803804                  	cmp byte [rax], T_closure
  8921 000058DB 0F857FFD0000            	jne L_error_non_closure
  8922 000058E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8923 000058E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8924 000058E7 48890425[3A150000]      	mov qword [free_var_114], rax
  8925 000058EF 48B8-                   	mov rax, sob_void
  8925 000058F1 [0000000000000000] 
  8926                                  
  8927 000058F9 4889C7                  	mov rdi, rax
  8928 000058FC E81AFF0000              	call print_sexpr_if_not_void
  8929                                  
  8930 00005901 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8931 00005906 E8FEFD0000              	call malloc
  8932 0000590B 50                      	push rax
  8933 0000590C BF00000000              	mov rdi, 8 * 0	; new rib
  8934 00005911 E8F3FD0000              	call malloc
  8935 00005916 50                      	push rax
  8936 00005917 BF08000000              	mov rdi, 8 * 1	; extended env
  8937 0000591C E8E8FD0000              	call malloc
  8938 00005921 488B7D10                	mov rdi, ENV
  8939 00005925 BE00000000              	mov rsi, 0
  8940 0000592A BA01000000              	mov rdx, 1
  8941                                  .L_lambda_simple_env_loop_6d1f:	; ext_env[i + 1] <-- env[i]
  8942 0000592F 4883FE00                	cmp rsi, 0
  8943 00005933 7410                    	je .L_lambda_simple_env_end_6d1f
  8944 00005935 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8945 00005939 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8946 0000593D 48FFC6                  	inc rsi
  8947 00005940 48FFC2                  	inc rdx
  8948 00005943 EBEA                    	jmp .L_lambda_simple_env_loop_6d1f
  8949                                  .L_lambda_simple_env_end_6d1f:
  8950 00005945 5B                      	pop rbx
  8951 00005946 BE00000000              	mov rsi, 0
  8952                                  .L_lambda_simple_params_loop_6d1f:	; copy params
  8953 0000594B 4883FE00                	cmp rsi, 0
  8954 0000594F 740E                    	je .L_lambda_simple_params_end_6d1f
  8955 00005951 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8956 00005956 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8957 0000595A 48FFC6                  	inc rsi
  8958 0000595D EBEC                    	jmp .L_lambda_simple_params_loop_6d1f
  8959                                  .L_lambda_simple_params_end_6d1f:
  8960 0000595F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8961 00005962 4889C3                  	mov rbx, rax
  8962 00005965 58                      	pop rax
  8963 00005966 C60004                  	mov byte [rax], T_closure
  8964 00005969 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8965 0000596D 48C74009[7A590000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d1f
  8966 00005975 E989000000              	jmp .L_lambda_simple_end_6d1f
  8967                                  .L_lambda_simple_code_6d1f:	; lambda-simple body
  8968 0000597A 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8969 00005980 740B                    	je .L_lambda_simple_arity_check_ok_6d1f
  8970 00005982 FF742410                	push qword [rsp + 8 * 2]
  8971 00005986 6A00                    	push 0
  8972 00005988 E935FD0000              	jmp L_error_incorrect_arity_simple
  8973                                  .L_lambda_simple_arity_check_ok_6d1f:
  8974 0000598D C8000000                	enter 0, 0
  8975                                  	; preparing a tail-call
  8976 00005991 48B8-                   	mov rax, L_constants + 2075
  8976 00005993 [1B08000000000000] 
  8977 0000599B 50                      	push rax
  8978 0000599C 48B8-                   	mov rax, L_constants + 2066
  8978 0000599E [1208000000000000] 
  8979 000059A6 50                      	push rax
  8980 000059A7 6A02                    	push 2	; arg count
  8981 000059A9 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
  8982 000059B1 803805                  	cmp byte [rax], T_undefined
  8983 000059B4 0F8422FC0000            	je L_error_fvar_undefined
  8984 000059BA 803804                  	cmp byte [rax], T_closure
  8985 000059BD 0F859DFC0000            	jne L_error_non_closure
  8986 000059C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8987                                  
  8988                                  	; recycling the current frame
  8989 000059C6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8990 000059C9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8991 000059CC B906000000              	mov rcx, 2 + 4
  8992 000059D1 488B5D18                	mov rbx, COUNT
  8993 000059D5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8994 000059DA 488D55F8                	lea rdx, [rbp - 8 * 1]
  8995                                  .L_tc_recycle_frame_loop_8ede:
  8996 000059DE 4883F900                	cmp rcx, 0
  8997 000059E2 7413                    	je .L_tc_recycle_frame_done_8ede
  8998 000059E4 488B32                  	mov rsi, qword [rdx]
  8999 000059E7 488933                  	mov qword [rbx], rsi
  9000 000059EA 48FFC9                  	dec rcx
  9001 000059ED 4883EB08                	sub rbx, 8 * 1
  9002 000059F1 4883EA08                	sub rdx, 8 * 1
  9003 000059F5 EBE7                    	jmp .L_tc_recycle_frame_loop_8ede
  9004                                  .L_tc_recycle_frame_done_8ede:
  9005 000059F7 488D6308                	lea rsp, [rbx + 8 * 1]
  9006 000059FB 5D                      	pop rbp	; the proc will restore it!
  9007 000059FC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9008 000059FF C9                      	leave
  9009 00005A00 C21000                  	ret AND_KILL_FRAME(0)
  9010                                  .L_lambda_simple_end_6d1f:	; new closure is in rax
  9011 00005A03 50                      	push rax
  9012 00005A04 6A01                    	push 1	; arg count
  9013 00005A06 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9014 00005A0B E8F9FC0000              	call malloc
  9015 00005A10 50                      	push rax
  9016 00005A11 BF00000000              	mov rdi, 8 * 0	; new rib
  9017 00005A16 E8EEFC0000              	call malloc
  9018 00005A1B 50                      	push rax
  9019 00005A1C BF08000000              	mov rdi, 8 * 1	; extended env
  9020 00005A21 E8E3FC0000              	call malloc
  9021 00005A26 488B7D10                	mov rdi, ENV
  9022 00005A2A BE00000000              	mov rsi, 0
  9023 00005A2F BA01000000              	mov rdx, 1
  9024                                  .L_lambda_simple_env_loop_6d20:	; ext_env[i + 1] <-- env[i]
  9025 00005A34 4883FE00                	cmp rsi, 0
  9026 00005A38 7410                    	je .L_lambda_simple_env_end_6d20
  9027 00005A3A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9028 00005A3E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9029 00005A42 48FFC6                  	inc rsi
  9030 00005A45 48FFC2                  	inc rdx
  9031 00005A48 EBEA                    	jmp .L_lambda_simple_env_loop_6d20
  9032                                  .L_lambda_simple_env_end_6d20:
  9033 00005A4A 5B                      	pop rbx
  9034 00005A4B BE00000000              	mov rsi, 0
  9035                                  .L_lambda_simple_params_loop_6d20:	; copy params
  9036 00005A50 4883FE00                	cmp rsi, 0
  9037 00005A54 740E                    	je .L_lambda_simple_params_end_6d20
  9038 00005A56 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9039 00005A5B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9040 00005A5F 48FFC6                  	inc rsi
  9041 00005A62 EBEC                    	jmp .L_lambda_simple_params_loop_6d20
  9042                                  .L_lambda_simple_params_end_6d20:
  9043 00005A64 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9044 00005A67 4889C3                  	mov rbx, rax
  9045 00005A6A 58                      	pop rax
  9046 00005A6B C60004                  	mov byte [rax], T_closure
  9047 00005A6E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9048 00005A72 48C74009[7F5A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d20
  9049 00005A7A E9620B0000              	jmp .L_lambda_simple_end_6d20
  9050                                  .L_lambda_simple_code_6d20:	; lambda-simple body
  9051 00005A7F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9052 00005A85 740B                    	je .L_lambda_simple_arity_check_ok_6d20
  9053 00005A87 FF742410                	push qword [rsp + 8 * 2]
  9054 00005A8B 6A01                    	push 1
  9055 00005A8D E930FC0000              	jmp L_error_incorrect_arity_simple
  9056                                  .L_lambda_simple_arity_check_ok_6d20:
  9057 00005A92 C8000000                	enter 0, 0
  9058                                  	; preparing a tail-call
  9059 00005A96 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9060 00005A9B E869FC0000              	call malloc
  9061 00005AA0 50                      	push rax
  9062 00005AA1 BF08000000              	mov rdi, 8 * 1	; new rib
  9063 00005AA6 E85EFC0000              	call malloc
  9064 00005AAB 50                      	push rax
  9065 00005AAC BF10000000              	mov rdi, 8 * 2	; extended env
  9066 00005AB1 E853FC0000              	call malloc
  9067 00005AB6 488B7D10                	mov rdi, ENV
  9068 00005ABA BE00000000              	mov rsi, 0
  9069 00005ABF BA01000000              	mov rdx, 1
  9070                                  .L_lambda_simple_env_loop_6d21:	; ext_env[i + 1] <-- env[i]
  9071 00005AC4 4883FE01                	cmp rsi, 1
  9072 00005AC8 7410                    	je .L_lambda_simple_env_end_6d21
  9073 00005ACA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9074 00005ACE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9075 00005AD2 48FFC6                  	inc rsi
  9076 00005AD5 48FFC2                  	inc rdx
  9077 00005AD8 EBEA                    	jmp .L_lambda_simple_env_loop_6d21
  9078                                  .L_lambda_simple_env_end_6d21:
  9079 00005ADA 5B                      	pop rbx
  9080 00005ADB BE00000000              	mov rsi, 0
  9081                                  .L_lambda_simple_params_loop_6d21:	; copy params
  9082 00005AE0 4883FE01                	cmp rsi, 1
  9083 00005AE4 740E                    	je .L_lambda_simple_params_end_6d21
  9084 00005AE6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9085 00005AEB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9086 00005AEF 48FFC6                  	inc rsi
  9087 00005AF2 EBEC                    	jmp .L_lambda_simple_params_loop_6d21
  9088                                  .L_lambda_simple_params_end_6d21:
  9089 00005AF4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9090 00005AF7 4889C3                  	mov rbx, rax
  9091 00005AFA 58                      	pop rax
  9092 00005AFB C60004                  	mov byte [rax], T_closure
  9093 00005AFE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9094 00005B02 48C74009[0F5B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d21
  9095 00005B0A E92B080000              	jmp .L_lambda_simple_end_6d21
  9096                                  .L_lambda_simple_code_6d21:	; lambda-simple body
  9097 00005B0F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9098 00005B15 740B                    	je .L_lambda_simple_arity_check_ok_6d21
  9099 00005B17 FF742410                	push qword [rsp + 8 * 2]
  9100 00005B1B 6A02                    	push 2
  9101 00005B1D E9A0FB0000              	jmp L_error_incorrect_arity_simple
  9102                                  .L_lambda_simple_arity_check_ok_6d21:
  9103 00005B22 C8000000                	enter 0, 0
  9104 00005B26 488B4520                	mov rax, PARAM(0)	; param a
  9105 00005B2A 50                      	push rax
  9106 00005B2B 6A01                    	push 1	; arg count
  9107 00005B2D 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9108 00005B35 803805                  	cmp byte [rax], T_undefined
  9109 00005B38 0F849EFA0000            	je L_error_fvar_undefined
  9110 00005B3E 803804                  	cmp byte [rax], T_closure
  9111 00005B41 0F8519FB0000            	jne L_error_non_closure
  9112 00005B47 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9113 00005B4A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9114                                  
  9115 00005B4D 483D[02000000]          	cmp rax, sob_boolean_false
  9116 00005B53 0F8463020000            	je .L_if_else_76ce
  9117 00005B59 488B4528                	mov rax, PARAM(1)	; param b
  9118 00005B5D 50                      	push rax
  9119 00005B5E 6A01                    	push 1	; arg count
  9120 00005B60 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9121 00005B68 803805                  	cmp byte [rax], T_undefined
  9122 00005B6B 0F846BFA0000            	je L_error_fvar_undefined
  9123 00005B71 803804                  	cmp byte [rax], T_closure
  9124 00005B74 0F85E6FA0000            	jne L_error_non_closure
  9125 00005B7A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9126 00005B7D FF5009                  	call SOB_CLOSURE_CODE(rax)
  9127                                  
  9128 00005B80 483D[02000000]          	cmp rax, sob_boolean_false
  9129 00005B86 7467                    	je .L_if_else_76cf
  9130                                  	; preparing a tail-call
  9131 00005B88 488B4528                	mov rax, PARAM(1)	; param b
  9132 00005B8C 50                      	push rax
  9133 00005B8D 488B4520                	mov rax, PARAM(0)	; param a
  9134 00005B91 50                      	push rax
  9135 00005B92 6A02                    	push 2	; arg count
  9136 00005B94 488B0425[2E100000]      	mov rax, qword [free_var_38]	; free var __bin-add-zz
  9137 00005B9C 803805                  	cmp byte [rax], T_undefined
  9138 00005B9F 0F8437FA0000            	je L_error_fvar_undefined
  9139 00005BA5 803804                  	cmp byte [rax], T_closure
  9140 00005BA8 0F85B2FA0000            	jne L_error_non_closure
  9141 00005BAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9142                                  
  9143                                  	; recycling the current frame
  9144 00005BB1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9145 00005BB4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9146 00005BB7 B906000000              	mov rcx, 2 + 4
  9147 00005BBC 488B5D18                	mov rbx, COUNT
  9148 00005BC0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9149 00005BC5 488D55F8                	lea rdx, [rbp - 8 * 1]
  9150                                  .L_tc_recycle_frame_loop_8edf:
  9151 00005BC9 4883F900                	cmp rcx, 0
  9152 00005BCD 7413                    	je .L_tc_recycle_frame_done_8edf
  9153 00005BCF 488B32                  	mov rsi, qword [rdx]
  9154 00005BD2 488933                  	mov qword [rbx], rsi
  9155 00005BD5 48FFC9                  	dec rcx
  9156 00005BD8 4883EB08                	sub rbx, 8 * 1
  9157 00005BDC 4883EA08                	sub rdx, 8 * 1
  9158 00005BE0 EBE7                    	jmp .L_tc_recycle_frame_loop_8edf
  9159                                  .L_tc_recycle_frame_done_8edf:
  9160 00005BE2 488D6308                	lea rsp, [rbx + 8 * 1]
  9161 00005BE6 5D                      	pop rbp	; the proc will restore it!
  9162 00005BE7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9163                                  
  9164 00005BEA E9C8010000              	jmp .L_if_end_76cf
  9165                                  
  9166                                  	.L_if_else_76cf:
  9167 00005BEF 488B4528                	mov rax, PARAM(1)	; param b
  9168 00005BF3 50                      	push rax
  9169 00005BF4 6A01                    	push 1	; arg count
  9170 00005BF6 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9171 00005BFE 803805                  	cmp byte [rax], T_undefined
  9172 00005C01 0F84D5F90000            	je L_error_fvar_undefined
  9173 00005C07 803804                  	cmp byte [rax], T_closure
  9174 00005C0A 0F8550FA0000            	jne L_error_non_closure
  9175 00005C10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9176 00005C13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9177                                  
  9178 00005C16 483D[02000000]          	cmp rax, sob_boolean_false
  9179 00005C1C 0F848A000000            	je .L_if_else_76d0
  9180                                  	; preparing a tail-call
  9181 00005C22 488B4528                	mov rax, PARAM(1)	; param b
  9182 00005C26 50                      	push rax
  9183 00005C27 488B4520                	mov rax, PARAM(0)	; param a
  9184 00005C2B 50                      	push rax
  9185 00005C2C 6A01                    	push 1	; arg count
  9186 00005C2E 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
  9187 00005C36 803805                  	cmp byte [rax], T_undefined
  9188 00005C39 0F849DF90000            	je L_error_fvar_undefined
  9189 00005C3F 803804                  	cmp byte [rax], T_closure
  9190 00005C42 0F8518FA0000            	jne L_error_non_closure
  9191 00005C48 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9192 00005C4B FF5009                  	call SOB_CLOSURE_CODE(rax)
  9193 00005C4E 50                      	push rax
  9194 00005C4F 6A02                    	push 2	; arg count
  9195 00005C51 488B0425[EA0F0000]      	mov rax, qword [free_var_34]	; free var __bin-add-qq
  9196 00005C59 803805                  	cmp byte [rax], T_undefined
  9197 00005C5C 0F847AF90000            	je L_error_fvar_undefined
  9198 00005C62 803804                  	cmp byte [rax], T_closure
  9199 00005C65 0F85F5F90000            	jne L_error_non_closure
  9200 00005C6B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9201                                  
  9202                                  	; recycling the current frame
  9203 00005C6E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9204 00005C71 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9205 00005C74 B906000000              	mov rcx, 2 + 4
  9206 00005C79 488B5D18                	mov rbx, COUNT
  9207 00005C7D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9208 00005C82 488D55F8                	lea rdx, [rbp - 8 * 1]
  9209                                  .L_tc_recycle_frame_loop_8ee0:
  9210 00005C86 4883F900                	cmp rcx, 0
  9211 00005C8A 7413                    	je .L_tc_recycle_frame_done_8ee0
  9212 00005C8C 488B32                  	mov rsi, qword [rdx]
  9213 00005C8F 488933                  	mov qword [rbx], rsi
  9214 00005C92 48FFC9                  	dec rcx
  9215 00005C95 4883EB08                	sub rbx, 8 * 1
  9216 00005C99 4883EA08                	sub rdx, 8 * 1
  9217 00005C9D EBE7                    	jmp .L_tc_recycle_frame_loop_8ee0
  9218                                  .L_tc_recycle_frame_done_8ee0:
  9219 00005C9F 488D6308                	lea rsp, [rbx + 8 * 1]
  9220 00005CA3 5D                      	pop rbp	; the proc will restore it!
  9221 00005CA4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9222                                  
  9223 00005CA7 E90B010000              	jmp .L_if_end_76d0
  9224                                  
  9225                                  	.L_if_else_76d0:
  9226 00005CAC 488B4528                	mov rax, PARAM(1)	; param b
  9227 00005CB0 50                      	push rax
  9228 00005CB1 6A01                    	push 1	; arg count
  9229 00005CB3 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
  9230 00005CBB 803805                  	cmp byte [rax], T_undefined
  9231 00005CBE 0F8418F90000            	je L_error_fvar_undefined
  9232 00005CC4 803804                  	cmp byte [rax], T_closure
  9233 00005CC7 0F8593F90000            	jne L_error_non_closure
  9234 00005CCD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9235 00005CD0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9236                                  
  9237 00005CD3 483D[02000000]          	cmp rax, sob_boolean_false
  9238 00005CD9 0F8487000000            	je .L_if_else_76d1
  9239                                  	; preparing a tail-call
  9240 00005CDF 488B4528                	mov rax, PARAM(1)	; param b
  9241 00005CE3 50                      	push rax
  9242 00005CE4 488B4520                	mov rax, PARAM(0)	; param a
  9243 00005CE8 50                      	push rax
  9244 00005CE9 6A01                    	push 1	; arg count
  9245 00005CEB 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
  9246 00005CF3 803805                  	cmp byte [rax], T_undefined
  9247 00005CF6 0F84E0F80000            	je L_error_fvar_undefined
  9248 00005CFC 803804                  	cmp byte [rax], T_closure
  9249 00005CFF 0F855BF90000            	jne L_error_non_closure
  9250 00005D05 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9251 00005D08 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9252 00005D0B 50                      	push rax
  9253 00005D0C 6A02                    	push 2	; arg count
  9254 00005D0E 488B0425[A60F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9255 00005D16 803805                  	cmp byte [rax], T_undefined
  9256 00005D19 0F84BDF80000            	je L_error_fvar_undefined
  9257 00005D1F 803804                  	cmp byte [rax], T_closure
  9258 00005D22 0F8538F90000            	jne L_error_non_closure
  9259 00005D28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9260                                  
  9261                                  	; recycling the current frame
  9262 00005D2B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9263 00005D2E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9264 00005D31 B906000000              	mov rcx, 2 + 4
  9265 00005D36 488B5D18                	mov rbx, COUNT
  9266 00005D3A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9267 00005D3F 488D55F8                	lea rdx, [rbp - 8 * 1]
  9268                                  .L_tc_recycle_frame_loop_8ee1:
  9269 00005D43 4883F900                	cmp rcx, 0
  9270 00005D47 7413                    	je .L_tc_recycle_frame_done_8ee1
  9271 00005D49 488B32                  	mov rsi, qword [rdx]
  9272 00005D4C 488933                  	mov qword [rbx], rsi
  9273 00005D4F 48FFC9                  	dec rcx
  9274 00005D52 4883EB08                	sub rbx, 8 * 1
  9275 00005D56 4883EA08                	sub rdx, 8 * 1
  9276 00005D5A EBE7                    	jmp .L_tc_recycle_frame_loop_8ee1
  9277                                  .L_tc_recycle_frame_done_8ee1:
  9278 00005D5C 488D6308                	lea rsp, [rbx + 8 * 1]
  9279 00005D60 5D                      	pop rbp	; the proc will restore it!
  9280 00005D61 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9281                                  
  9282 00005D64 EB51                    	jmp .L_if_end_76d1
  9283                                  
  9284                                  	.L_if_else_76d1:
  9285                                  	; preparing a tail-call
  9286 00005D66 6A00                    	push 0	; arg count
  9287 00005D68 488B4510                	mov rax, ENV
  9288 00005D6C 488B00                  	mov rax, qword [rax + 8 * 0]
  9289 00005D6F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9290 00005D72 803804                  	cmp byte [rax], T_closure
  9291 00005D75 0F85E5F80000            	jne L_error_non_closure
  9292 00005D7B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9293                                  
  9294                                  	; recycling the current frame
  9295 00005D7E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9296 00005D81 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9297 00005D84 B904000000              	mov rcx, 0 + 4
  9298 00005D89 488B5D18                	mov rbx, COUNT
  9299 00005D8D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9300 00005D92 488D55F8                	lea rdx, [rbp - 8 * 1]
  9301                                  .L_tc_recycle_frame_loop_8ee2:
  9302 00005D96 4883F900                	cmp rcx, 0
  9303 00005D9A 7413                    	je .L_tc_recycle_frame_done_8ee2
  9304 00005D9C 488B32                  	mov rsi, qword [rdx]
  9305 00005D9F 488933                  	mov qword [rbx], rsi
  9306 00005DA2 48FFC9                  	dec rcx
  9307 00005DA5 4883EB08                	sub rbx, 8 * 1
  9308 00005DA9 4883EA08                	sub rdx, 8 * 1
  9309 00005DAD EBE7                    	jmp .L_tc_recycle_frame_loop_8ee2
  9310                                  .L_tc_recycle_frame_done_8ee2:
  9311 00005DAF 488D6308                	lea rsp, [rbx + 8 * 1]
  9312 00005DB3 5D                      	pop rbp	; the proc will restore it!
  9313 00005DB4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9314                                  
  9315                                  	.L_if_end_76d1:
  9316                                  
  9317                                  	.L_if_end_76d0:
  9318                                  
  9319                                  	.L_if_end_76cf:
  9320                                  
  9321 00005DB7 E97A050000              	jmp .L_if_end_76ce
  9322                                  
  9323                                  	.L_if_else_76ce:
  9324 00005DBC 488B4520                	mov rax, PARAM(0)	; param a
  9325 00005DC0 50                      	push rax
  9326 00005DC1 6A01                    	push 1	; arg count
  9327 00005DC3 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9328 00005DCB 803805                  	cmp byte [rax], T_undefined
  9329 00005DCE 0F8408F80000            	je L_error_fvar_undefined
  9330 00005DD4 803804                  	cmp byte [rax], T_closure
  9331 00005DD7 0F8583F80000            	jne L_error_non_closure
  9332 00005DDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9333 00005DE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9334                                  
  9335 00005DE3 483D[02000000]          	cmp rax, sob_boolean_false
  9336 00005DE9 0F8463020000            	je .L_if_else_76d2
  9337 00005DEF 488B4528                	mov rax, PARAM(1)	; param b
  9338 00005DF3 50                      	push rax
  9339 00005DF4 6A01                    	push 1	; arg count
  9340 00005DF6 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9341 00005DFE 803805                  	cmp byte [rax], T_undefined
  9342 00005E01 0F84D5F70000            	je L_error_fvar_undefined
  9343 00005E07 803804                  	cmp byte [rax], T_closure
  9344 00005E0A 0F8550F80000            	jne L_error_non_closure
  9345 00005E10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9346 00005E13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9347                                  
  9348 00005E16 483D[02000000]          	cmp rax, sob_boolean_false
  9349 00005E1C 0F848A000000            	je .L_if_else_76d3
  9350                                  	; preparing a tail-call
  9351 00005E22 488B4528                	mov rax, PARAM(1)	; param b
  9352 00005E26 50                      	push rax
  9353 00005E27 6A01                    	push 1	; arg count
  9354 00005E29 488B0425[5C150000]      	mov rax, qword [free_var_116]	; free var __bin_integer_to_fraction
  9355 00005E31 803805                  	cmp byte [rax], T_undefined
  9356 00005E34 0F84A2F70000            	je L_error_fvar_undefined
  9357 00005E3A 803804                  	cmp byte [rax], T_closure
  9358 00005E3D 0F851DF80000            	jne L_error_non_closure
  9359 00005E43 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9360 00005E46 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9361 00005E49 50                      	push rax
  9362 00005E4A 488B4520                	mov rax, PARAM(0)	; param a
  9363 00005E4E 50                      	push rax
  9364 00005E4F 6A02                    	push 2	; arg count
  9365 00005E51 488B0425[EA0F0000]      	mov rax, qword [free_var_34]	; free var __bin-add-qq
  9366 00005E59 803805                  	cmp byte [rax], T_undefined
  9367 00005E5C 0F847AF70000            	je L_error_fvar_undefined
  9368 00005E62 803804                  	cmp byte [rax], T_closure
  9369 00005E65 0F85F5F70000            	jne L_error_non_closure
  9370 00005E6B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9371                                  
  9372                                  	; recycling the current frame
  9373 00005E6E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9374 00005E71 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9375 00005E74 B906000000              	mov rcx, 2 + 4
  9376 00005E79 488B5D18                	mov rbx, COUNT
  9377 00005E7D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9378 00005E82 488D55F8                	lea rdx, [rbp - 8 * 1]
  9379                                  .L_tc_recycle_frame_loop_8ee3:
  9380 00005E86 4883F900                	cmp rcx, 0
  9381 00005E8A 7413                    	je .L_tc_recycle_frame_done_8ee3
  9382 00005E8C 488B32                  	mov rsi, qword [rdx]
  9383 00005E8F 488933                  	mov qword [rbx], rsi
  9384 00005E92 48FFC9                  	dec rcx
  9385 00005E95 4883EB08                	sub rbx, 8 * 1
  9386 00005E99 4883EA08                	sub rdx, 8 * 1
  9387 00005E9D EBE7                    	jmp .L_tc_recycle_frame_loop_8ee3
  9388                                  .L_tc_recycle_frame_done_8ee3:
  9389 00005E9F 488D6308                	lea rsp, [rbx + 8 * 1]
  9390 00005EA3 5D                      	pop rbp	; the proc will restore it!
  9391 00005EA4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9392                                  
  9393 00005EA7 E9A1010000              	jmp .L_if_end_76d3
  9394                                  
  9395                                  	.L_if_else_76d3:
  9396 00005EAC 488B4528                	mov rax, PARAM(1)	; param b
  9397 00005EB0 50                      	push rax
  9398 00005EB1 6A01                    	push 1	; arg count
  9399 00005EB3 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9400 00005EBB 803805                  	cmp byte [rax], T_undefined
  9401 00005EBE 0F8418F70000            	je L_error_fvar_undefined
  9402 00005EC4 803804                  	cmp byte [rax], T_closure
  9403 00005EC7 0F8593F70000            	jne L_error_non_closure
  9404 00005ECD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9405 00005ED0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9406                                  
  9407 00005ED3 483D[02000000]          	cmp rax, sob_boolean_false
  9408 00005ED9 7467                    	je .L_if_else_76d4
  9409                                  	; preparing a tail-call
  9410 00005EDB 488B4528                	mov rax, PARAM(1)	; param b
  9411 00005EDF 50                      	push rax
  9412 00005EE0 488B4520                	mov rax, PARAM(0)	; param a
  9413 00005EE4 50                      	push rax
  9414 00005EE5 6A02                    	push 2	; arg count
  9415 00005EE7 488B0425[EA0F0000]      	mov rax, qword [free_var_34]	; free var __bin-add-qq
  9416 00005EEF 803805                  	cmp byte [rax], T_undefined
  9417 00005EF2 0F84E4F60000            	je L_error_fvar_undefined
  9418 00005EF8 803804                  	cmp byte [rax], T_closure
  9419 00005EFB 0F855FF70000            	jne L_error_non_closure
  9420 00005F01 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9421                                  
  9422                                  	; recycling the current frame
  9423 00005F04 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9424 00005F07 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9425 00005F0A B906000000              	mov rcx, 2 + 4
  9426 00005F0F 488B5D18                	mov rbx, COUNT
  9427 00005F13 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9428 00005F18 488D55F8                	lea rdx, [rbp - 8 * 1]
  9429                                  .L_tc_recycle_frame_loop_8ee4:
  9430 00005F1C 4883F900                	cmp rcx, 0
  9431 00005F20 7413                    	je .L_tc_recycle_frame_done_8ee4
  9432 00005F22 488B32                  	mov rsi, qword [rdx]
  9433 00005F25 488933                  	mov qword [rbx], rsi
  9434 00005F28 48FFC9                  	dec rcx
  9435 00005F2B 4883EB08                	sub rbx, 8 * 1
  9436 00005F2F 4883EA08                	sub rdx, 8 * 1
  9437 00005F33 EBE7                    	jmp .L_tc_recycle_frame_loop_8ee4
  9438                                  .L_tc_recycle_frame_done_8ee4:
  9439 00005F35 488D6308                	lea rsp, [rbx + 8 * 1]
  9440 00005F39 5D                      	pop rbp	; the proc will restore it!
  9441 00005F3A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9442                                  
  9443 00005F3D E90B010000              	jmp .L_if_end_76d4
  9444                                  
  9445                                  	.L_if_else_76d4:
  9446 00005F42 488B4528                	mov rax, PARAM(1)	; param b
  9447 00005F46 50                      	push rax
  9448 00005F47 6A01                    	push 1	; arg count
  9449 00005F49 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
  9450 00005F51 803805                  	cmp byte [rax], T_undefined
  9451 00005F54 0F8482F60000            	je L_error_fvar_undefined
  9452 00005F5A 803804                  	cmp byte [rax], T_closure
  9453 00005F5D 0F85FDF60000            	jne L_error_non_closure
  9454 00005F63 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9455 00005F66 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9456                                  
  9457 00005F69 483D[02000000]          	cmp rax, sob_boolean_false
  9458 00005F6F 0F8487000000            	je .L_if_else_76d5
  9459                                  	; preparing a tail-call
  9460 00005F75 488B4528                	mov rax, PARAM(1)	; param b
  9461 00005F79 50                      	push rax
  9462 00005F7A 488B4520                	mov rax, PARAM(0)	; param a
  9463 00005F7E 50                      	push rax
  9464 00005F7F 6A01                    	push 1	; arg count
  9465 00005F81 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
  9466 00005F89 803805                  	cmp byte [rax], T_undefined
  9467 00005F8C 0F844AF60000            	je L_error_fvar_undefined
  9468 00005F92 803804                  	cmp byte [rax], T_closure
  9469 00005F95 0F85C5F60000            	jne L_error_non_closure
  9470 00005F9B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9471 00005F9E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9472 00005FA1 50                      	push rax
  9473 00005FA2 6A02                    	push 2	; arg count
  9474 00005FA4 488B0425[A60F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9475 00005FAC 803805                  	cmp byte [rax], T_undefined
  9476 00005FAF 0F8427F60000            	je L_error_fvar_undefined
  9477 00005FB5 803804                  	cmp byte [rax], T_closure
  9478 00005FB8 0F85A2F60000            	jne L_error_non_closure
  9479 00005FBE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9480                                  
  9481                                  	; recycling the current frame
  9482 00005FC1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9483 00005FC4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9484 00005FC7 B906000000              	mov rcx, 2 + 4
  9485 00005FCC 488B5D18                	mov rbx, COUNT
  9486 00005FD0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9487 00005FD5 488D55F8                	lea rdx, [rbp - 8 * 1]
  9488                                  .L_tc_recycle_frame_loop_8ee5:
  9489 00005FD9 4883F900                	cmp rcx, 0
  9490 00005FDD 7413                    	je .L_tc_recycle_frame_done_8ee5
  9491 00005FDF 488B32                  	mov rsi, qword [rdx]
  9492 00005FE2 488933                  	mov qword [rbx], rsi
  9493 00005FE5 48FFC9                  	dec rcx
  9494 00005FE8 4883EB08                	sub rbx, 8 * 1
  9495 00005FEC 4883EA08                	sub rdx, 8 * 1
  9496 00005FF0 EBE7                    	jmp .L_tc_recycle_frame_loop_8ee5
  9497                                  .L_tc_recycle_frame_done_8ee5:
  9498 00005FF2 488D6308                	lea rsp, [rbx + 8 * 1]
  9499 00005FF6 5D                      	pop rbp	; the proc will restore it!
  9500 00005FF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9501                                  
  9502 00005FFA EB51                    	jmp .L_if_end_76d5
  9503                                  
  9504                                  	.L_if_else_76d5:
  9505                                  	; preparing a tail-call
  9506 00005FFC 6A00                    	push 0	; arg count
  9507 00005FFE 488B4510                	mov rax, ENV
  9508 00006002 488B00                  	mov rax, qword [rax + 8 * 0]
  9509 00006005 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9510 00006008 803804                  	cmp byte [rax], T_closure
  9511 0000600B 0F854FF60000            	jne L_error_non_closure
  9512 00006011 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9513                                  
  9514                                  	; recycling the current frame
  9515 00006014 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9516 00006017 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9517 0000601A B904000000              	mov rcx, 0 + 4
  9518 0000601F 488B5D18                	mov rbx, COUNT
  9519 00006023 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9520 00006028 488D55F8                	lea rdx, [rbp - 8 * 1]
  9521                                  .L_tc_recycle_frame_loop_8ee6:
  9522 0000602C 4883F900                	cmp rcx, 0
  9523 00006030 7413                    	je .L_tc_recycle_frame_done_8ee6
  9524 00006032 488B32                  	mov rsi, qword [rdx]
  9525 00006035 488933                  	mov qword [rbx], rsi
  9526 00006038 48FFC9                  	dec rcx
  9527 0000603B 4883EB08                	sub rbx, 8 * 1
  9528 0000603F 4883EA08                	sub rdx, 8 * 1
  9529 00006043 EBE7                    	jmp .L_tc_recycle_frame_loop_8ee6
  9530                                  .L_tc_recycle_frame_done_8ee6:
  9531 00006045 488D6308                	lea rsp, [rbx + 8 * 1]
  9532 00006049 5D                      	pop rbp	; the proc will restore it!
  9533 0000604A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9534                                  
  9535                                  	.L_if_end_76d5:
  9536                                  
  9537                                  	.L_if_end_76d4:
  9538                                  
  9539                                  	.L_if_end_76d3:
  9540                                  
  9541 0000604D E9E4020000              	jmp .L_if_end_76d2
  9542                                  
  9543                                  	.L_if_else_76d2:
  9544 00006052 488B4520                	mov rax, PARAM(0)	; param a
  9545 00006056 50                      	push rax
  9546 00006057 6A01                    	push 1	; arg count
  9547 00006059 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
  9548 00006061 803805                  	cmp byte [rax], T_undefined
  9549 00006064 0F8472F50000            	je L_error_fvar_undefined
  9550 0000606A 803804                  	cmp byte [rax], T_closure
  9551 0000606D 0F85EDF50000            	jne L_error_non_closure
  9552 00006073 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9553 00006076 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9554                                  
  9555 00006079 483D[02000000]          	cmp rax, sob_boolean_false
  9556 0000607F 0F8460020000            	je .L_if_else_76d6
  9557 00006085 488B4528                	mov rax, PARAM(1)	; param b
  9558 00006089 50                      	push rax
  9559 0000608A 6A01                    	push 1	; arg count
  9560 0000608C 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9561 00006094 803805                  	cmp byte [rax], T_undefined
  9562 00006097 0F843FF50000            	je L_error_fvar_undefined
  9563 0000609D 803804                  	cmp byte [rax], T_closure
  9564 000060A0 0F85BAF50000            	jne L_error_non_closure
  9565 000060A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9566 000060A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9567                                  
  9568 000060AC 483D[02000000]          	cmp rax, sob_boolean_false
  9569 000060B2 0F848A000000            	je .L_if_else_76d7
  9570                                  	; preparing a tail-call
  9571 000060B8 488B4528                	mov rax, PARAM(1)	; param b
  9572 000060BC 50                      	push rax
  9573 000060BD 6A01                    	push 1	; arg count
  9574 000060BF 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
  9575 000060C7 803805                  	cmp byte [rax], T_undefined
  9576 000060CA 0F840CF50000            	je L_error_fvar_undefined
  9577 000060D0 803804                  	cmp byte [rax], T_closure
  9578 000060D3 0F8587F50000            	jne L_error_non_closure
  9579 000060D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9580 000060DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  9581 000060DF 50                      	push rax
  9582 000060E0 488B4520                	mov rax, PARAM(0)	; param a
  9583 000060E4 50                      	push rax
  9584 000060E5 6A02                    	push 2	; arg count
  9585 000060E7 488B0425[A60F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9586 000060EF 803805                  	cmp byte [rax], T_undefined
  9587 000060F2 0F84E4F40000            	je L_error_fvar_undefined
  9588 000060F8 803804                  	cmp byte [rax], T_closure
  9589 000060FB 0F855FF50000            	jne L_error_non_closure
  9590 00006101 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9591                                  
  9592                                  	; recycling the current frame
  9593 00006104 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9594 00006107 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9595 0000610A B906000000              	mov rcx, 2 + 4
  9596 0000610F 488B5D18                	mov rbx, COUNT
  9597 00006113 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9598 00006118 488D55F8                	lea rdx, [rbp - 8 * 1]
  9599                                  .L_tc_recycle_frame_loop_8ee7:
  9600 0000611C 4883F900                	cmp rcx, 0
  9601 00006120 7413                    	je .L_tc_recycle_frame_done_8ee7
  9602 00006122 488B32                  	mov rsi, qword [rdx]
  9603 00006125 488933                  	mov qword [rbx], rsi
  9604 00006128 48FFC9                  	dec rcx
  9605 0000612B 4883EB08                	sub rbx, 8 * 1
  9606 0000612F 4883EA08                	sub rdx, 8 * 1
  9607 00006133 EBE7                    	jmp .L_tc_recycle_frame_loop_8ee7
  9608                                  .L_tc_recycle_frame_done_8ee7:
  9609 00006135 488D6308                	lea rsp, [rbx + 8 * 1]
  9610 00006139 5D                      	pop rbp	; the proc will restore it!
  9611 0000613A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9612                                  
  9613 0000613D E9A1010000              	jmp .L_if_end_76d7
  9614                                  
  9615                                  	.L_if_else_76d7:
  9616 00006142 488B4528                	mov rax, PARAM(1)	; param b
  9617 00006146 50                      	push rax
  9618 00006147 6A01                    	push 1	; arg count
  9619 00006149 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9620 00006151 803805                  	cmp byte [rax], T_undefined
  9621 00006154 0F8482F40000            	je L_error_fvar_undefined
  9622 0000615A 803804                  	cmp byte [rax], T_closure
  9623 0000615D 0F85FDF40000            	jne L_error_non_closure
  9624 00006163 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9625 00006166 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9626                                  
  9627 00006169 483D[02000000]          	cmp rax, sob_boolean_false
  9628 0000616F 0F848A000000            	je .L_if_else_76d8
  9629                                  	; preparing a tail-call
  9630 00006175 488B4528                	mov rax, PARAM(1)	; param b
  9631 00006179 50                      	push rax
  9632 0000617A 6A01                    	push 1	; arg count
  9633 0000617C 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
  9634 00006184 803805                  	cmp byte [rax], T_undefined
  9635 00006187 0F844FF40000            	je L_error_fvar_undefined
  9636 0000618D 803804                  	cmp byte [rax], T_closure
  9637 00006190 0F85CAF40000            	jne L_error_non_closure
  9638 00006196 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9639 00006199 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9640 0000619C 50                      	push rax
  9641 0000619D 488B4520                	mov rax, PARAM(0)	; param a
  9642 000061A1 50                      	push rax
  9643 000061A2 6A02                    	push 2	; arg count
  9644 000061A4 488B0425[A60F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9645 000061AC 803805                  	cmp byte [rax], T_undefined
  9646 000061AF 0F8427F40000            	je L_error_fvar_undefined
  9647 000061B5 803804                  	cmp byte [rax], T_closure
  9648 000061B8 0F85A2F40000            	jne L_error_non_closure
  9649 000061BE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9650                                  
  9651                                  	; recycling the current frame
  9652 000061C1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9653 000061C4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9654 000061C7 B906000000              	mov rcx, 2 + 4
  9655 000061CC 488B5D18                	mov rbx, COUNT
  9656 000061D0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9657 000061D5 488D55F8                	lea rdx, [rbp - 8 * 1]
  9658                                  .L_tc_recycle_frame_loop_8ee8:
  9659 000061D9 4883F900                	cmp rcx, 0
  9660 000061DD 7413                    	je .L_tc_recycle_frame_done_8ee8
  9661 000061DF 488B32                  	mov rsi, qword [rdx]
  9662 000061E2 488933                  	mov qword [rbx], rsi
  9663 000061E5 48FFC9                  	dec rcx
  9664 000061E8 4883EB08                	sub rbx, 8 * 1
  9665 000061EC 4883EA08                	sub rdx, 8 * 1
  9666 000061F0 EBE7                    	jmp .L_tc_recycle_frame_loop_8ee8
  9667                                  .L_tc_recycle_frame_done_8ee8:
  9668 000061F2 488D6308                	lea rsp, [rbx + 8 * 1]
  9669 000061F6 5D                      	pop rbp	; the proc will restore it!
  9670 000061F7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9671                                  
  9672 000061FA E9E4000000              	jmp .L_if_end_76d8
  9673                                  
  9674                                  	.L_if_else_76d8:
  9675 000061FF 488B4528                	mov rax, PARAM(1)	; param b
  9676 00006203 50                      	push rax
  9677 00006204 6A01                    	push 1	; arg count
  9678 00006206 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
  9679 0000620E 803805                  	cmp byte [rax], T_undefined
  9680 00006211 0F84C5F30000            	je L_error_fvar_undefined
  9681 00006217 803804                  	cmp byte [rax], T_closure
  9682 0000621A 0F8540F40000            	jne L_error_non_closure
  9683 00006220 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9684 00006223 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9685                                  
  9686 00006226 483D[02000000]          	cmp rax, sob_boolean_false
  9687 0000622C 7464                    	je .L_if_else_76d9
  9688                                  	; preparing a tail-call
  9689 0000622E 488B4528                	mov rax, PARAM(1)	; param b
  9690 00006232 50                      	push rax
  9691 00006233 488B4520                	mov rax, PARAM(0)	; param a
  9692 00006237 50                      	push rax
  9693 00006238 6A02                    	push 2	; arg count
  9694 0000623A 488B0425[A60F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9695 00006242 803805                  	cmp byte [rax], T_undefined
  9696 00006245 0F8491F30000            	je L_error_fvar_undefined
  9697 0000624B 803804                  	cmp byte [rax], T_closure
  9698 0000624E 0F850CF40000            	jne L_error_non_closure
  9699 00006254 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9700                                  
  9701                                  	; recycling the current frame
  9702 00006257 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9703 0000625A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9704 0000625D B906000000              	mov rcx, 2 + 4
  9705 00006262 488B5D18                	mov rbx, COUNT
  9706 00006266 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9707 0000626B 488D55F8                	lea rdx, [rbp - 8 * 1]
  9708                                  .L_tc_recycle_frame_loop_8ee9:
  9709 0000626F 4883F900                	cmp rcx, 0
  9710 00006273 7413                    	je .L_tc_recycle_frame_done_8ee9
  9711 00006275 488B32                  	mov rsi, qword [rdx]
  9712 00006278 488933                  	mov qword [rbx], rsi
  9713 0000627B 48FFC9                  	dec rcx
  9714 0000627E 4883EB08                	sub rbx, 8 * 1
  9715 00006282 4883EA08                	sub rdx, 8 * 1
  9716 00006286 EBE7                    	jmp .L_tc_recycle_frame_loop_8ee9
  9717                                  .L_tc_recycle_frame_done_8ee9:
  9718 00006288 488D6308                	lea rsp, [rbx + 8 * 1]
  9719 0000628C 5D                      	pop rbp	; the proc will restore it!
  9720 0000628D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9721                                  
  9722 00006290 EB51                    	jmp .L_if_end_76d9
  9723                                  
  9724                                  	.L_if_else_76d9:
  9725                                  	; preparing a tail-call
  9726 00006292 6A00                    	push 0	; arg count
  9727 00006294 488B4510                	mov rax, ENV
  9728 00006298 488B00                  	mov rax, qword [rax + 8 * 0]
  9729 0000629B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9730 0000629E 803804                  	cmp byte [rax], T_closure
  9731 000062A1 0F85B9F30000            	jne L_error_non_closure
  9732 000062A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9733                                  
  9734                                  	; recycling the current frame
  9735 000062AA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9736 000062AD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9737 000062B0 B904000000              	mov rcx, 0 + 4
  9738 000062B5 488B5D18                	mov rbx, COUNT
  9739 000062B9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9740 000062BE 488D55F8                	lea rdx, [rbp - 8 * 1]
  9741                                  .L_tc_recycle_frame_loop_8eea:
  9742 000062C2 4883F900                	cmp rcx, 0
  9743 000062C6 7413                    	je .L_tc_recycle_frame_done_8eea
  9744 000062C8 488B32                  	mov rsi, qword [rdx]
  9745 000062CB 488933                  	mov qword [rbx], rsi
  9746 000062CE 48FFC9                  	dec rcx
  9747 000062D1 4883EB08                	sub rbx, 8 * 1
  9748 000062D5 4883EA08                	sub rdx, 8 * 1
  9749 000062D9 EBE7                    	jmp .L_tc_recycle_frame_loop_8eea
  9750                                  .L_tc_recycle_frame_done_8eea:
  9751 000062DB 488D6308                	lea rsp, [rbx + 8 * 1]
  9752 000062DF 5D                      	pop rbp	; the proc will restore it!
  9753 000062E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9754                                  
  9755                                  	.L_if_end_76d9:
  9756                                  
  9757                                  	.L_if_end_76d8:
  9758                                  
  9759                                  	.L_if_end_76d7:
  9760                                  
  9761 000062E3 EB51                    	jmp .L_if_end_76d6
  9762                                  
  9763                                  	.L_if_else_76d6:
  9764                                  	; preparing a tail-call
  9765 000062E5 6A00                    	push 0	; arg count
  9766 000062E7 488B4510                	mov rax, ENV
  9767 000062EB 488B00                  	mov rax, qword [rax + 8 * 0]
  9768 000062EE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9769 000062F1 803804                  	cmp byte [rax], T_closure
  9770 000062F4 0F8566F30000            	jne L_error_non_closure
  9771 000062FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  9772                                  
  9773                                  	; recycling the current frame
  9774 000062FD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9775 00006300 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9776 00006303 B904000000              	mov rcx, 0 + 4
  9777 00006308 488B5D18                	mov rbx, COUNT
  9778 0000630C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9779 00006311 488D55F8                	lea rdx, [rbp - 8 * 1]
  9780                                  .L_tc_recycle_frame_loop_8eeb:
  9781 00006315 4883F900                	cmp rcx, 0
  9782 00006319 7413                    	je .L_tc_recycle_frame_done_8eeb
  9783 0000631B 488B32                  	mov rsi, qword [rdx]
  9784 0000631E 488933                  	mov qword [rbx], rsi
  9785 00006321 48FFC9                  	dec rcx
  9786 00006324 4883EB08                	sub rbx, 8 * 1
  9787 00006328 4883EA08                	sub rdx, 8 * 1
  9788 0000632C EBE7                    	jmp .L_tc_recycle_frame_loop_8eeb
  9789                                  .L_tc_recycle_frame_done_8eeb:
  9790 0000632E 488D6308                	lea rsp, [rbx + 8 * 1]
  9791 00006332 5D                      	pop rbp	; the proc will restore it!
  9792 00006333 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9793                                  
  9794                                  	.L_if_end_76d6:
  9795                                  
  9796                                  	.L_if_end_76d2:
  9797                                  
  9798                                  	.L_if_end_76ce:
  9799 00006336 C9                      	leave
  9800 00006337 C22000                  	ret AND_KILL_FRAME(2)
  9801                                  .L_lambda_simple_end_6d21:	; new closure is in rax
  9802 0000633A 50                      	push rax
  9803 0000633B 6A01                    	push 1	; arg count
  9804 0000633D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9805 00006342 E8C2F30000              	call malloc
  9806 00006347 50                      	push rax
  9807 00006348 BF08000000              	mov rdi, 8 * 1	; new rib
  9808 0000634D E8B7F30000              	call malloc
  9809 00006352 50                      	push rax
  9810 00006353 BF10000000              	mov rdi, 8 * 2	; extended env
  9811 00006358 E8ACF30000              	call malloc
  9812 0000635D 488B7D10                	mov rdi, ENV
  9813 00006361 BE00000000              	mov rsi, 0
  9814 00006366 BA01000000              	mov rdx, 1
  9815                                  .L_lambda_simple_env_loop_6d22:	; ext_env[i + 1] <-- env[i]
  9816 0000636B 4883FE01                	cmp rsi, 1
  9817 0000636F 7410                    	je .L_lambda_simple_env_end_6d22
  9818 00006371 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9819 00006375 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9820 00006379 48FFC6                  	inc rsi
  9821 0000637C 48FFC2                  	inc rdx
  9822 0000637F EBEA                    	jmp .L_lambda_simple_env_loop_6d22
  9823                                  .L_lambda_simple_env_end_6d22:
  9824 00006381 5B                      	pop rbx
  9825 00006382 BE00000000              	mov rsi, 0
  9826                                  .L_lambda_simple_params_loop_6d22:	; copy params
  9827 00006387 4883FE01                	cmp rsi, 1
  9828 0000638B 740E                    	je .L_lambda_simple_params_end_6d22
  9829 0000638D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9830 00006392 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9831 00006396 48FFC6                  	inc rsi
  9832 00006399 EBEC                    	jmp .L_lambda_simple_params_loop_6d22
  9833                                  .L_lambda_simple_params_end_6d22:
  9834 0000639B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9835 0000639E 4889C3                  	mov rbx, rax
  9836 000063A1 58                      	pop rax
  9837 000063A2 C60004                  	mov byte [rax], T_closure
  9838 000063A5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9839 000063A9 48C74009[B6630000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d22
  9840 000063B1 E9E2010000              	jmp .L_lambda_simple_end_6d22
  9841                                  .L_lambda_simple_code_6d22:	; lambda-simple body
  9842 000063B6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9843 000063BC 740B                    	je .L_lambda_simple_arity_check_ok_6d22
  9844 000063BE FF742410                	push qword [rsp + 8 * 2]
  9845 000063C2 6A01                    	push 1
  9846 000063C4 E9F9F20000              	jmp L_error_incorrect_arity_simple
  9847                                  .L_lambda_simple_arity_check_ok_6d22:
  9848 000063C9 C8000000                	enter 0, 0
  9849 000063CD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9850 000063D2 E832F30000              	call malloc
  9851 000063D7 50                      	push rax
  9852 000063D8 BF08000000              	mov rdi, 8 * 1	; new rib
  9853 000063DD E827F30000              	call malloc
  9854 000063E2 50                      	push rax
  9855 000063E3 BF18000000              	mov rdi, 8 * 3	; extended env
  9856 000063E8 E81CF30000              	call malloc
  9857 000063ED 488B7D10                	mov rdi, ENV
  9858 000063F1 BE00000000              	mov rsi, 0
  9859 000063F6 BA01000000              	mov rdx, 1
  9860                                  .L_lambda_opt_env_loop_0f5a:	; ext_env[i + 1] <-- env[i]
  9861 000063FB 4883FE02                	cmp rsi, 2
  9862 000063FF 7410                    	je .L_lambda_opt_env_end_0f5a
  9863 00006401 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9864 00006405 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9865 00006409 48FFC6                  	inc rsi
  9866 0000640C 48FFC2                  	inc rdx
  9867 0000640F EBEA                    	jmp .L_lambda_opt_env_loop_0f5a
  9868                                  .L_lambda_opt_env_end_0f5a:
  9869 00006411 5B                      	pop rbx
  9870 00006412 BE00000000              	mov rsi, 0
  9871                                  .L_lambda_opt_params_loop_0f5a:	; copy params
  9872 00006417 4883FE01                	cmp rsi, 1
  9873 0000641B 740E                    	je .L_lambda_opt_params_end_0f5a
  9874 0000641D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9875 00006422 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9876 00006426 48FFC6                  	inc rsi
  9877 00006429 EBEC                    	jmp .L_lambda_opt_params_loop_0f5a
  9878                                  .L_lambda_opt_params_end_0f5a:
  9879 0000642B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9880 0000642E 4889C3                  	mov rbx, rax
  9881 00006431 58                      	pop rax
  9882 00006432 C60004                  	mov byte [rax], T_closure
  9883 00006435 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9884 00006439 48C74009[46640000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f5a
  9885 00006441 E94E010000              	jmp .L_lambda_opt_end_0f5a
  9886                                  .L_lambda_opt_code_0f5a:	; lambda-simple body
  9887 00006446 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
  9888 0000644C 740D                    	je .L_lambda_opt_arity_check_exact_0f5a ;	 if equal, go to exact arity
  9889 0000644E 7F42                    	jg .L_lambda_opt_arity_check_more_0f5a ;	 if greater than, go to arity more
  9890 00006450 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  9891 00006454 6A00                     	push 0
  9892 00006456 E97BF20000              	jmp L_error_incorrect_arity_opt
  9893                                  	.L_lambda_opt_arity_check_exact_0f5a:
  9894 0000645B 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  9895 00006460 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  9896 00006465 4883EC08                	sub rsp, 8
  9897 00006469 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  9898                                  	.L_lambda_opt_exact_shifting_loop_0f5a:
  9899 0000646D 488B5108                	mov rdx, [rcx + 8]
  9900 00006471 488911                  	mov [rcx], rdx
  9901 00006474 4883C108                	add rcx, 8
  9902 00006478 4839CB                  	cmp rbx, rcx
  9903 0000647B 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f5a
  9904                                  	.L_lambda_opt_exact_shifting_loop_end_0f5a:
  9905 0000647D 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  9906 00006484 4883C001                	add rax, 1 ; 	arg count += 1
  9907 00006488 4889442410              	mov qword [rsp + 8 * 2], rax
  9908 0000648D E987000000              	jmp .L_lambda_opt_stack_adjusted_0f5a
  9909                                  	.L_lambda_opt_arity_check_more_0f5a:
  9910 00006492 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  9910 00006494 [0100000000000000] 
  9911 0000649C 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
  9912 000064A2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f5a
  9913                                  	.L_lambda_opt_stack_shrink_loop_0f5a:
  9914 000064A4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  9915 000064A9 E85BF20000              	call malloc ;	 allocated memory for the optional scheme list
  9916 000064AE C60021                  	mov byte[rax], T_pair ;	 set type pair
  9917 000064B1 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  9918 000064B5 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  9919 000064B8 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  9920 000064BD 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  9921 000064C2 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  9922 000064C6 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  9923                                  	.L_lambda_opt_more_shifting_loop_0f5a:
  9924 000064CB 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  9925 000064CE 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  9926 000064D2 4883EB08                	sub rbx, 8 
  9927 000064D6 4839DC                  	cmp rsp, rbx
  9928 000064D9 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f5a
  9929                                  	.L_lambda_opt_more_shifting_loop_end_0f5a:
  9930 000064DB 4883C408                	add rsp, 8 ;	 update rsp
  9931 000064DF 488B5C2410              	mov rbx, [rsp + 8 * 2]
  9932 000064E4 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  9933 000064E8 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  9934 000064ED 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9935 000064F3 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f5a
  9936                                  	.L_lambda_opt_stack_shrink_loop_exit_0f5a:
  9937 000064F5 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  9938 000064FA 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  9939 000064FF BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  9940 00006504 E800F20000              	call malloc ;	 allocated memory for the optional scheme list
  9941 00006509 C60021                  	mov byte[rax], T_pair ;	 set type pair
  9942 0000650C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  9943 00006510 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  9944 00006514 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  9945                                  	.L_lambda_opt_stack_adjusted_0f5a:
  9946 00006519 C8000000                	enter 0, 0
  9947                                  	; preparing a tail-call
  9948 0000651D 488B4520                	mov rax, PARAM(0)	; param s
  9949 00006521 50                      	push rax
  9950 00006522 48B8-                   	mov rax, L_constants + 2023
  9950 00006524 [E707000000000000] 
  9951 0000652C 50                      	push rax
  9952 0000652D 488B4510                	mov rax, ENV
  9953 00006531 488B00                  	mov rax, qword [rax + 8 * 0]
  9954 00006534 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
  9955 00006537 50                      	push rax
  9956 00006538 6A03                    	push 3	; arg count
  9957 0000653A 488B0425[18150000]      	mov rax, qword [free_var_112]	; free var fold-left
  9958 00006542 803805                  	cmp byte [rax], T_undefined
  9959 00006545 0F8491F00000            	je L_error_fvar_undefined
  9960 0000654B 803804                  	cmp byte [rax], T_closure
  9961 0000654E 0F850CF10000            	jne L_error_non_closure
  9962 00006554 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9963                                  
  9964                                  	; recycling the current frame
  9965 00006557 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9966 0000655A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9967 0000655D B907000000              	mov rcx, 3 + 4
  9968 00006562 488B5D18                	mov rbx, COUNT
  9969 00006566 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9970 0000656B 488D55F8                	lea rdx, [rbp - 8 * 1]
  9971                                  .L_tc_recycle_frame_loop_8eec:
  9972 0000656F 4883F900                	cmp rcx, 0
  9973 00006573 7413                    	je .L_tc_recycle_frame_done_8eec
  9974 00006575 488B32                  	mov rsi, qword [rdx]
  9975 00006578 488933                  	mov qword [rbx], rsi
  9976 0000657B 48FFC9                  	dec rcx
  9977 0000657E 4883EB08                	sub rbx, 8 * 1
  9978 00006582 4883EA08                	sub rdx, 8 * 1
  9979 00006586 EBE7                    	jmp .L_tc_recycle_frame_loop_8eec
  9980                                  .L_tc_recycle_frame_done_8eec:
  9981 00006588 488D6308                	lea rsp, [rbx + 8 * 1]
  9982 0000658C 5D                      	pop rbp	; the proc will restore it!
  9983 0000658D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9984 00006590 C9                      	leave
  9985 00006591 C21800                  	ret AND_KILL_FRAME(1)
  9986                                  .L_lambda_opt_end_0f5a:	; new closure is in rax
  9987 00006594 C9                      	leave
  9988 00006595 C21800                  	ret AND_KILL_FRAME(1)
  9989                                  .L_lambda_simple_end_6d22:	; new closure is in rax
  9990 00006598 803804                  	cmp byte [rax], T_closure
  9991 0000659B 0F85BFF00000            	jne L_error_non_closure
  9992 000065A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9993                                  
  9994                                  	; recycling the current frame
  9995 000065A4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9996 000065A7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9997 000065AA B905000000              	mov rcx, 1 + 4
  9998 000065AF 488B5D18                	mov rbx, COUNT
  9999 000065B3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10000 000065B8 488D55F8                	lea rdx, [rbp - 8 * 1]
 10001                                  .L_tc_recycle_frame_loop_8eed:
 10002 000065BC 4883F900                	cmp rcx, 0
 10003 000065C0 7413                    	je .L_tc_recycle_frame_done_8eed
 10004 000065C2 488B32                  	mov rsi, qword [rdx]
 10005 000065C5 488933                  	mov qword [rbx], rsi
 10006 000065C8 48FFC9                  	dec rcx
 10007 000065CB 4883EB08                	sub rbx, 8 * 1
 10008 000065CF 4883EA08                	sub rdx, 8 * 1
 10009 000065D3 EBE7                    	jmp .L_tc_recycle_frame_loop_8eed
 10010                                  .L_tc_recycle_frame_done_8eed:
 10011 000065D5 488D6308                	lea rsp, [rbx + 8 * 1]
 10012 000065D9 5D                      	pop rbp	; the proc will restore it!
 10013 000065DA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10014 000065DD C9                      	leave
 10015 000065DE C21800                  	ret AND_KILL_FRAME(1)
 10016                                  .L_lambda_simple_end_6d20:	; new closure is in rax
 10017 000065E1 803804                  	cmp byte [rax], T_closure
 10018 000065E4 0F8576F00000            	jne L_error_non_closure
 10019 000065EA FF7001                  	push SOB_CLOSURE_ENV(rax)
 10020 000065ED FF5009                  	call SOB_CLOSURE_CODE(rax)
 10021 000065F0 48890425[4B150000]      	mov qword [free_var_115], rax
 10022 000065F8 48B8-                   	mov rax, sob_void
 10022 000065FA [0000000000000000] 
 10023                                  
 10024 00006602 4889C7                  	mov rdi, rax
 10025 00006605 E811F20000              	call print_sexpr_if_not_void
 10026                                  
 10027 0000660A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10028 0000660F E8F5F00000              	call malloc
 10029 00006614 50                      	push rax
 10030 00006615 BF00000000              	mov rdi, 8 * 0	; new rib
 10031 0000661A E8EAF00000              	call malloc
 10032 0000661F 50                      	push rax
 10033 00006620 BF08000000              	mov rdi, 8 * 1	; extended env
 10034 00006625 E8DFF00000              	call malloc
 10035 0000662A 488B7D10                	mov rdi, ENV
 10036 0000662E BE00000000              	mov rsi, 0
 10037 00006633 BA01000000              	mov rdx, 1
 10038                                  .L_lambda_simple_env_loop_6d23:	; ext_env[i + 1] <-- env[i]
 10039 00006638 4883FE00                	cmp rsi, 0
 10040 0000663C 7410                    	je .L_lambda_simple_env_end_6d23
 10041 0000663E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10042 00006642 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10043 00006646 48FFC6                  	inc rsi
 10044 00006649 48FFC2                  	inc rdx
 10045 0000664C EBEA                    	jmp .L_lambda_simple_env_loop_6d23
 10046                                  .L_lambda_simple_env_end_6d23:
 10047 0000664E 5B                      	pop rbx
 10048 0000664F BE00000000              	mov rsi, 0
 10049                                  .L_lambda_simple_params_loop_6d23:	; copy params
 10050 00006654 4883FE00                	cmp rsi, 0
 10051 00006658 740E                    	je .L_lambda_simple_params_end_6d23
 10052 0000665A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10053 0000665F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10054 00006663 48FFC6                  	inc rsi
 10055 00006666 EBEC                    	jmp .L_lambda_simple_params_loop_6d23
 10056                                  .L_lambda_simple_params_end_6d23:
 10057 00006668 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10058 0000666B 4889C3                  	mov rbx, rax
 10059 0000666E 58                      	pop rax
 10060 0000666F C60004                  	mov byte [rax], T_closure
 10061 00006672 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10062 00006676 48C74009[83660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d23
 10063 0000667E E989000000              	jmp .L_lambda_simple_end_6d23
 10064                                  .L_lambda_simple_code_6d23:	; lambda-simple body
 10065 00006683 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10066 00006689 740B                    	je .L_lambda_simple_arity_check_ok_6d23
 10067 0000668B FF742410                	push qword [rsp + 8 * 2]
 10068 0000668F 6A00                    	push 0
 10069 00006691 E92CF00000              	jmp L_error_incorrect_arity_simple
 10070                                  .L_lambda_simple_arity_check_ok_6d23:
 10071 00006696 C8000000                	enter 0, 0
 10072                                  	; preparing a tail-call
 10073 0000669A 48B8-                   	mov rax, L_constants + 2075
 10073 0000669C [1B08000000000000] 
 10074 000066A4 50                      	push rax
 10075 000066A5 48B8-                   	mov rax, L_constants + 2139
 10075 000066A7 [5B08000000000000] 
 10076 000066AF 50                      	push rax
 10077 000066B0 6A02                    	push 2	; arg count
 10078 000066B2 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 10079 000066BA 803805                  	cmp byte [rax], T_undefined
 10080 000066BD 0F8419EF0000            	je L_error_fvar_undefined
 10081 000066C3 803804                  	cmp byte [rax], T_closure
 10082 000066C6 0F8594EF0000            	jne L_error_non_closure
 10083 000066CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 10084                                  
 10085                                  	; recycling the current frame
 10086 000066CF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10087 000066D2 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10088 000066D5 B906000000              	mov rcx, 2 + 4
 10089 000066DA 488B5D18                	mov rbx, COUNT
 10090 000066DE 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10091 000066E3 488D55F8                	lea rdx, [rbp - 8 * 1]
 10092                                  .L_tc_recycle_frame_loop_8eee:
 10093 000066E7 4883F900                	cmp rcx, 0
 10094 000066EB 7413                    	je .L_tc_recycle_frame_done_8eee
 10095 000066ED 488B32                  	mov rsi, qword [rdx]
 10096 000066F0 488933                  	mov qword [rbx], rsi
 10097 000066F3 48FFC9                  	dec rcx
 10098 000066F6 4883EB08                	sub rbx, 8 * 1
 10099 000066FA 4883EA08                	sub rdx, 8 * 1
 10100 000066FE EBE7                    	jmp .L_tc_recycle_frame_loop_8eee
 10101                                  .L_tc_recycle_frame_done_8eee:
 10102 00006700 488D6308                	lea rsp, [rbx + 8 * 1]
 10103 00006704 5D                      	pop rbp	; the proc will restore it!
 10104 00006705 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10105 00006708 C9                      	leave
 10106 00006709 C21000                  	ret AND_KILL_FRAME(0)
 10107                                  .L_lambda_simple_end_6d23:	; new closure is in rax
 10108 0000670C 50                      	push rax
 10109 0000670D 6A01                    	push 1	; arg count
 10110 0000670F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10111 00006714 E8F0EF0000              	call malloc
 10112 00006719 50                      	push rax
 10113 0000671A BF00000000              	mov rdi, 8 * 0	; new rib
 10114 0000671F E8E5EF0000              	call malloc
 10115 00006724 50                      	push rax
 10116 00006725 BF08000000              	mov rdi, 8 * 1	; extended env
 10117 0000672A E8DAEF0000              	call malloc
 10118 0000672F 488B7D10                	mov rdi, ENV
 10119 00006733 BE00000000              	mov rsi, 0
 10120 00006738 BA01000000              	mov rdx, 1
 10121                                  .L_lambda_simple_env_loop_6d24:	; ext_env[i + 1] <-- env[i]
 10122 0000673D 4883FE00                	cmp rsi, 0
 10123 00006741 7410                    	je .L_lambda_simple_env_end_6d24
 10124 00006743 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10125 00006747 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10126 0000674B 48FFC6                  	inc rsi
 10127 0000674E 48FFC2                  	inc rdx
 10128 00006751 EBEA                    	jmp .L_lambda_simple_env_loop_6d24
 10129                                  .L_lambda_simple_env_end_6d24:
 10130 00006753 5B                      	pop rbx
 10131 00006754 BE00000000              	mov rsi, 0
 10132                                  .L_lambda_simple_params_loop_6d24:	; copy params
 10133 00006759 4883FE00                	cmp rsi, 0
 10134 0000675D 740E                    	je .L_lambda_simple_params_end_6d24
 10135 0000675F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10136 00006764 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10137 00006768 48FFC6                  	inc rsi
 10138 0000676B EBEC                    	jmp .L_lambda_simple_params_loop_6d24
 10139                                  .L_lambda_simple_params_end_6d24:
 10140 0000676D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10141 00006770 4889C3                  	mov rbx, rax
 10142 00006773 58                      	pop rax
 10143 00006774 C60004                  	mov byte [rax], T_closure
 10144 00006777 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10145 0000677B 48C74009[88670000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d24
 10146 00006783 E9060D0000              	jmp .L_lambda_simple_end_6d24
 10147                                  .L_lambda_simple_code_6d24:	; lambda-simple body
 10148 00006788 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10149 0000678E 740B                    	je .L_lambda_simple_arity_check_ok_6d24
 10150 00006790 FF742410                	push qword [rsp + 8 * 2]
 10151 00006794 6A01                    	push 1
 10152 00006796 E927EF0000              	jmp L_error_incorrect_arity_simple
 10153                                  .L_lambda_simple_arity_check_ok_6d24:
 10154 0000679B C8000000                	enter 0, 0
 10155                                  	; preparing a tail-call
 10156 0000679F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10157 000067A4 E860EF0000              	call malloc
 10158 000067A9 50                      	push rax
 10159 000067AA BF08000000              	mov rdi, 8 * 1	; new rib
 10160 000067AF E855EF0000              	call malloc
 10161 000067B4 50                      	push rax
 10162 000067B5 BF10000000              	mov rdi, 8 * 2	; extended env
 10163 000067BA E84AEF0000              	call malloc
 10164 000067BF 488B7D10                	mov rdi, ENV
 10165 000067C3 BE00000000              	mov rsi, 0
 10166 000067C8 BA01000000              	mov rdx, 1
 10167                                  .L_lambda_simple_env_loop_6d25:	; ext_env[i + 1] <-- env[i]
 10168 000067CD 4883FE01                	cmp rsi, 1
 10169 000067D1 7410                    	je .L_lambda_simple_env_end_6d25
 10170 000067D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10171 000067D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10172 000067DB 48FFC6                  	inc rsi
 10173 000067DE 48FFC2                  	inc rdx
 10174 000067E1 EBEA                    	jmp .L_lambda_simple_env_loop_6d25
 10175                                  .L_lambda_simple_env_end_6d25:
 10176 000067E3 5B                      	pop rbx
 10177 000067E4 BE00000000              	mov rsi, 0
 10178                                  .L_lambda_simple_params_loop_6d25:	; copy params
 10179 000067E9 4883FE01                	cmp rsi, 1
 10180 000067ED 740E                    	je .L_lambda_simple_params_end_6d25
 10181 000067EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10182 000067F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10183 000067F8 48FFC6                  	inc rsi
 10184 000067FB EBEC                    	jmp .L_lambda_simple_params_loop_6d25
 10185                                  .L_lambda_simple_params_end_6d25:
 10186 000067FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10187 00006800 4889C3                  	mov rbx, rax
 10188 00006803 58                      	pop rax
 10189 00006804 C60004                  	mov byte [rax], T_closure
 10190 00006807 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10191 0000680B 48C74009[18680000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d25
 10192 00006813 E92B080000              	jmp .L_lambda_simple_end_6d25
 10193                                  .L_lambda_simple_code_6d25:	; lambda-simple body
 10194 00006818 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10195 0000681E 740B                    	je .L_lambda_simple_arity_check_ok_6d25
 10196 00006820 FF742410                	push qword [rsp + 8 * 2]
 10197 00006824 6A02                    	push 2
 10198 00006826 E997EE0000              	jmp L_error_incorrect_arity_simple
 10199                                  .L_lambda_simple_arity_check_ok_6d25:
 10200 0000682B C8000000                	enter 0, 0
 10201 0000682F 488B4520                	mov rax, PARAM(0)	; param a
 10202 00006833 50                      	push rax
 10203 00006834 6A01                    	push 1	; arg count
 10204 00006836 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10205 0000683E 803805                  	cmp byte [rax], T_undefined
 10206 00006841 0F8495ED0000            	je L_error_fvar_undefined
 10207 00006847 803804                  	cmp byte [rax], T_closure
 10208 0000684A 0F8510EE0000            	jne L_error_non_closure
 10209 00006850 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10210 00006853 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10211                                  
 10212 00006856 483D[02000000]          	cmp rax, sob_boolean_false
 10213 0000685C 0F8463020000            	je .L_if_else_76da
 10214 00006862 488B4528                	mov rax, PARAM(1)	; param b
 10215 00006866 50                      	push rax
 10216 00006867 6A01                    	push 1	; arg count
 10217 00006869 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10218 00006871 803805                  	cmp byte [rax], T_undefined
 10219 00006874 0F8462ED0000            	je L_error_fvar_undefined
 10220 0000687A 803804                  	cmp byte [rax], T_closure
 10221 0000687D 0F85DDED0000            	jne L_error_non_closure
 10222 00006883 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10223 00006886 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10224                                  
 10225 00006889 483D[02000000]          	cmp rax, sob_boolean_false
 10226 0000688F 7467                    	je .L_if_else_76db
 10227                                  	; preparing a tail-call
 10228 00006891 488B4528                	mov rax, PARAM(1)	; param b
 10229 00006895 50                      	push rax
 10230 00006896 488B4520                	mov rax, PARAM(0)	; param a
 10231 0000689A 50                      	push rax
 10232 0000689B 6A02                    	push 2	; arg count
 10233 0000689D 488B0425[3F100000]      	mov rax, qword [free_var_39]	; free var __bin-sub-zz
 10234 000068A5 803805                  	cmp byte [rax], T_undefined
 10235 000068A8 0F842EED0000            	je L_error_fvar_undefined
 10236 000068AE 803804                  	cmp byte [rax], T_closure
 10237 000068B1 0F85A9ED0000            	jne L_error_non_closure
 10238 000068B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10239                                  
 10240                                  	; recycling the current frame
 10241 000068BA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10242 000068BD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10243 000068C0 B906000000              	mov rcx, 2 + 4
 10244 000068C5 488B5D18                	mov rbx, COUNT
 10245 000068C9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10246 000068CE 488D55F8                	lea rdx, [rbp - 8 * 1]
 10247                                  .L_tc_recycle_frame_loop_8eef:
 10248 000068D2 4883F900                	cmp rcx, 0
 10249 000068D6 7413                    	je .L_tc_recycle_frame_done_8eef
 10250 000068D8 488B32                  	mov rsi, qword [rdx]
 10251 000068DB 488933                  	mov qword [rbx], rsi
 10252 000068DE 48FFC9                  	dec rcx
 10253 000068E1 4883EB08                	sub rbx, 8 * 1
 10254 000068E5 4883EA08                	sub rdx, 8 * 1
 10255 000068E9 EBE7                    	jmp .L_tc_recycle_frame_loop_8eef
 10256                                  .L_tc_recycle_frame_done_8eef:
 10257 000068EB 488D6308                	lea rsp, [rbx + 8 * 1]
 10258 000068EF 5D                      	pop rbp	; the proc will restore it!
 10259 000068F0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10260                                  
 10261 000068F3 E9C8010000              	jmp .L_if_end_76db
 10262                                  
 10263                                  	.L_if_else_76db:
 10264 000068F8 488B4528                	mov rax, PARAM(1)	; param b
 10265 000068FC 50                      	push rax
 10266 000068FD 6A01                    	push 1	; arg count
 10267 000068FF 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10268 00006907 803805                  	cmp byte [rax], T_undefined
 10269 0000690A 0F84CCEC0000            	je L_error_fvar_undefined
 10270 00006910 803804                  	cmp byte [rax], T_closure
 10271 00006913 0F8547ED0000            	jne L_error_non_closure
 10272 00006919 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10273 0000691C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10274                                  
 10275 0000691F 483D[02000000]          	cmp rax, sob_boolean_false
 10276 00006925 0F848A000000            	je .L_if_else_76dc
 10277                                  	; preparing a tail-call
 10278 0000692B 488B4528                	mov rax, PARAM(1)	; param b
 10279 0000692F 50                      	push rax
 10280 00006930 488B4520                	mov rax, PARAM(0)	; param a
 10281 00006934 50                      	push rax
 10282 00006935 6A01                    	push 1	; arg count
 10283 00006937 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 10284 0000693F 803805                  	cmp byte [rax], T_undefined
 10285 00006942 0F8494EC0000            	je L_error_fvar_undefined
 10286 00006948 803804                  	cmp byte [rax], T_closure
 10287 0000694B 0F850FED0000            	jne L_error_non_closure
 10288 00006951 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10289 00006954 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10290 00006957 50                      	push rax
 10291 00006958 6A02                    	push 2	; arg count
 10292 0000695A 488B0425[FB0F0000]      	mov rax, qword [free_var_35]	; free var __bin-sub-qq
 10293 00006962 803805                  	cmp byte [rax], T_undefined
 10294 00006965 0F8471EC0000            	je L_error_fvar_undefined
 10295 0000696B 803804                  	cmp byte [rax], T_closure
 10296 0000696E 0F85ECEC0000            	jne L_error_non_closure
 10297 00006974 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10298                                  
 10299                                  	; recycling the current frame
 10300 00006977 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10301 0000697A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10302 0000697D B906000000              	mov rcx, 2 + 4
 10303 00006982 488B5D18                	mov rbx, COUNT
 10304 00006986 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10305 0000698B 488D55F8                	lea rdx, [rbp - 8 * 1]
 10306                                  .L_tc_recycle_frame_loop_8ef0:
 10307 0000698F 4883F900                	cmp rcx, 0
 10308 00006993 7413                    	je .L_tc_recycle_frame_done_8ef0
 10309 00006995 488B32                  	mov rsi, qword [rdx]
 10310 00006998 488933                  	mov qword [rbx], rsi
 10311 0000699B 48FFC9                  	dec rcx
 10312 0000699E 4883EB08                	sub rbx, 8 * 1
 10313 000069A2 4883EA08                	sub rdx, 8 * 1
 10314 000069A6 EBE7                    	jmp .L_tc_recycle_frame_loop_8ef0
 10315                                  .L_tc_recycle_frame_done_8ef0:
 10316 000069A8 488D6308                	lea rsp, [rbx + 8 * 1]
 10317 000069AC 5D                      	pop rbp	; the proc will restore it!
 10318 000069AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10319                                  
 10320 000069B0 E90B010000              	jmp .L_if_end_76dc
 10321                                  
 10322                                  	.L_if_else_76dc:
 10323 000069B5 488B4528                	mov rax, PARAM(1)	; param b
 10324 000069B9 50                      	push rax
 10325 000069BA 6A01                    	push 1	; arg count
 10326 000069BC 488B0425[7E150000]      	mov rax, qword [free_var_118]	; free var real
 10327 000069C4 803805                  	cmp byte [rax], T_undefined
 10328 000069C7 0F840FEC0000            	je L_error_fvar_undefined
 10329 000069CD 803804                  	cmp byte [rax], T_closure
 10330 000069D0 0F858AEC0000            	jne L_error_non_closure
 10331 000069D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10332 000069D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10333                                  
 10334 000069DC 483D[02000000]          	cmp rax, sob_boolean_false
 10335 000069E2 0F8487000000            	je .L_if_else_76dd
 10336                                  	; preparing a tail-call
 10337 000069E8 488B4528                	mov rax, PARAM(1)	; param b
 10338 000069EC 50                      	push rax
 10339 000069ED 488B4520                	mov rax, PARAM(0)	; param a
 10340 000069F1 50                      	push rax
 10341 000069F2 6A01                    	push 1	; arg count
 10342 000069F4 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 10343 000069FC 803805                  	cmp byte [rax], T_undefined
 10344 000069FF 0F84D7EB0000            	je L_error_fvar_undefined
 10345 00006A05 803804                  	cmp byte [rax], T_closure
 10346 00006A08 0F8552EC0000            	jne L_error_non_closure
 10347 00006A0E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10348 00006A11 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10349 00006A14 50                      	push rax
 10350 00006A15 6A02                    	push 2	; arg count
 10351 00006A17 488B0425[B70F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10352 00006A1F 803805                  	cmp byte [rax], T_undefined
 10353 00006A22 0F84B4EB0000            	je L_error_fvar_undefined
 10354 00006A28 803804                  	cmp byte [rax], T_closure
 10355 00006A2B 0F852FEC0000            	jne L_error_non_closure
 10356 00006A31 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10357                                  
 10358                                  	; recycling the current frame
 10359 00006A34 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10360 00006A37 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10361 00006A3A B906000000              	mov rcx, 2 + 4
 10362 00006A3F 488B5D18                	mov rbx, COUNT
 10363 00006A43 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10364 00006A48 488D55F8                	lea rdx, [rbp - 8 * 1]
 10365                                  .L_tc_recycle_frame_loop_8ef1:
 10366 00006A4C 4883F900                	cmp rcx, 0
 10367 00006A50 7413                    	je .L_tc_recycle_frame_done_8ef1
 10368 00006A52 488B32                  	mov rsi, qword [rdx]
 10369 00006A55 488933                  	mov qword [rbx], rsi
 10370 00006A58 48FFC9                  	dec rcx
 10371 00006A5B 4883EB08                	sub rbx, 8 * 1
 10372 00006A5F 4883EA08                	sub rdx, 8 * 1
 10373 00006A63 EBE7                    	jmp .L_tc_recycle_frame_loop_8ef1
 10374                                  .L_tc_recycle_frame_done_8ef1:
 10375 00006A65 488D6308                	lea rsp, [rbx + 8 * 1]
 10376 00006A69 5D                      	pop rbp	; the proc will restore it!
 10377 00006A6A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10378                                  
 10379 00006A6D EB51                    	jmp .L_if_end_76dd
 10380                                  
 10381                                  	.L_if_else_76dd:
 10382                                  	; preparing a tail-call
 10383 00006A6F 6A00                    	push 0	; arg count
 10384 00006A71 488B4510                	mov rax, ENV
 10385 00006A75 488B00                  	mov rax, qword [rax + 8 * 0]
 10386 00006A78 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10387 00006A7B 803804                  	cmp byte [rax], T_closure
 10388 00006A7E 0F85DCEB0000            	jne L_error_non_closure
 10389 00006A84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10390                                  
 10391                                  	; recycling the current frame
 10392 00006A87 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10393 00006A8A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10394 00006A8D B904000000              	mov rcx, 0 + 4
 10395 00006A92 488B5D18                	mov rbx, COUNT
 10396 00006A96 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10397 00006A9B 488D55F8                	lea rdx, [rbp - 8 * 1]
 10398                                  .L_tc_recycle_frame_loop_8ef2:
 10399 00006A9F 4883F900                	cmp rcx, 0
 10400 00006AA3 7413                    	je .L_tc_recycle_frame_done_8ef2
 10401 00006AA5 488B32                  	mov rsi, qword [rdx]
 10402 00006AA8 488933                  	mov qword [rbx], rsi
 10403 00006AAB 48FFC9                  	dec rcx
 10404 00006AAE 4883EB08                	sub rbx, 8 * 1
 10405 00006AB2 4883EA08                	sub rdx, 8 * 1
 10406 00006AB6 EBE7                    	jmp .L_tc_recycle_frame_loop_8ef2
 10407                                  .L_tc_recycle_frame_done_8ef2:
 10408 00006AB8 488D6308                	lea rsp, [rbx + 8 * 1]
 10409 00006ABC 5D                      	pop rbp	; the proc will restore it!
 10410 00006ABD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10411                                  
 10412                                  	.L_if_end_76dd:
 10413                                  
 10414                                  	.L_if_end_76dc:
 10415                                  
 10416                                  	.L_if_end_76db:
 10417                                  
 10418 00006AC0 E97A050000              	jmp .L_if_end_76da
 10419                                  
 10420                                  	.L_if_else_76da:
 10421 00006AC5 488B4520                	mov rax, PARAM(0)	; param a
 10422 00006AC9 50                      	push rax
 10423 00006ACA 6A01                    	push 1	; arg count
 10424 00006ACC 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10425 00006AD4 803805                  	cmp byte [rax], T_undefined
 10426 00006AD7 0F84FFEA0000            	je L_error_fvar_undefined
 10427 00006ADD 803804                  	cmp byte [rax], T_closure
 10428 00006AE0 0F857AEB0000            	jne L_error_non_closure
 10429 00006AE6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10430 00006AE9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10431                                  
 10432 00006AEC 483D[02000000]          	cmp rax, sob_boolean_false
 10433 00006AF2 0F8463020000            	je .L_if_else_76de
 10434 00006AF8 488B4528                	mov rax, PARAM(1)	; param b
 10435 00006AFC 50                      	push rax
 10436 00006AFD 6A01                    	push 1	; arg count
 10437 00006AFF 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10438 00006B07 803805                  	cmp byte [rax], T_undefined
 10439 00006B0A 0F84CCEA0000            	je L_error_fvar_undefined
 10440 00006B10 803804                  	cmp byte [rax], T_closure
 10441 00006B13 0F8547EB0000            	jne L_error_non_closure
 10442 00006B19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10443 00006B1C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10444                                  
 10445 00006B1F 483D[02000000]          	cmp rax, sob_boolean_false
 10446 00006B25 0F848A000000            	je .L_if_else_76df
 10447                                  	; preparing a tail-call
 10448 00006B2B 488B4528                	mov rax, PARAM(1)	; param b
 10449 00006B2F 50                      	push rax
 10450 00006B30 6A01                    	push 1	; arg count
 10451 00006B32 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 10452 00006B3A 803805                  	cmp byte [rax], T_undefined
 10453 00006B3D 0F8499EA0000            	je L_error_fvar_undefined
 10454 00006B43 803804                  	cmp byte [rax], T_closure
 10455 00006B46 0F8514EB0000            	jne L_error_non_closure
 10456 00006B4C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10457 00006B4F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10458 00006B52 50                      	push rax
 10459 00006B53 488B4520                	mov rax, PARAM(0)	; param a
 10460 00006B57 50                      	push rax
 10461 00006B58 6A02                    	push 2	; arg count
 10462 00006B5A 488B0425[FB0F0000]      	mov rax, qword [free_var_35]	; free var __bin-sub-qq
 10463 00006B62 803805                  	cmp byte [rax], T_undefined
 10464 00006B65 0F8471EA0000            	je L_error_fvar_undefined
 10465 00006B6B 803804                  	cmp byte [rax], T_closure
 10466 00006B6E 0F85ECEA0000            	jne L_error_non_closure
 10467 00006B74 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10468                                  
 10469                                  	; recycling the current frame
 10470 00006B77 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10471 00006B7A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10472 00006B7D B906000000              	mov rcx, 2 + 4
 10473 00006B82 488B5D18                	mov rbx, COUNT
 10474 00006B86 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10475 00006B8B 488D55F8                	lea rdx, [rbp - 8 * 1]
 10476                                  .L_tc_recycle_frame_loop_8ef3:
 10477 00006B8F 4883F900                	cmp rcx, 0
 10478 00006B93 7413                    	je .L_tc_recycle_frame_done_8ef3
 10479 00006B95 488B32                  	mov rsi, qword [rdx]
 10480 00006B98 488933                  	mov qword [rbx], rsi
 10481 00006B9B 48FFC9                  	dec rcx
 10482 00006B9E 4883EB08                	sub rbx, 8 * 1
 10483 00006BA2 4883EA08                	sub rdx, 8 * 1
 10484 00006BA6 EBE7                    	jmp .L_tc_recycle_frame_loop_8ef3
 10485                                  .L_tc_recycle_frame_done_8ef3:
 10486 00006BA8 488D6308                	lea rsp, [rbx + 8 * 1]
 10487 00006BAC 5D                      	pop rbp	; the proc will restore it!
 10488 00006BAD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10489                                  
 10490 00006BB0 E9A1010000              	jmp .L_if_end_76df
 10491                                  
 10492                                  	.L_if_else_76df:
 10493 00006BB5 488B4528                	mov rax, PARAM(1)	; param b
 10494 00006BB9 50                      	push rax
 10495 00006BBA 6A01                    	push 1	; arg count
 10496 00006BBC 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10497 00006BC4 803805                  	cmp byte [rax], T_undefined
 10498 00006BC7 0F840FEA0000            	je L_error_fvar_undefined
 10499 00006BCD 803804                  	cmp byte [rax], T_closure
 10500 00006BD0 0F858AEA0000            	jne L_error_non_closure
 10501 00006BD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10502 00006BD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10503                                  
 10504 00006BDC 483D[02000000]          	cmp rax, sob_boolean_false
 10505 00006BE2 7467                    	je .L_if_else_76e0
 10506                                  	; preparing a tail-call
 10507 00006BE4 488B4528                	mov rax, PARAM(1)	; param b
 10508 00006BE8 50                      	push rax
 10509 00006BE9 488B4520                	mov rax, PARAM(0)	; param a
 10510 00006BED 50                      	push rax
 10511 00006BEE 6A02                    	push 2	; arg count
 10512 00006BF0 488B0425[FB0F0000]      	mov rax, qword [free_var_35]	; free var __bin-sub-qq
 10513 00006BF8 803805                  	cmp byte [rax], T_undefined
 10514 00006BFB 0F84DBE90000            	je L_error_fvar_undefined
 10515 00006C01 803804                  	cmp byte [rax], T_closure
 10516 00006C04 0F8556EA0000            	jne L_error_non_closure
 10517 00006C0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10518                                  
 10519                                  	; recycling the current frame
 10520 00006C0D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10521 00006C10 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10522 00006C13 B906000000              	mov rcx, 2 + 4
 10523 00006C18 488B5D18                	mov rbx, COUNT
 10524 00006C1C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10525 00006C21 488D55F8                	lea rdx, [rbp - 8 * 1]
 10526                                  .L_tc_recycle_frame_loop_8ef4:
 10527 00006C25 4883F900                	cmp rcx, 0
 10528 00006C29 7413                    	je .L_tc_recycle_frame_done_8ef4
 10529 00006C2B 488B32                  	mov rsi, qword [rdx]
 10530 00006C2E 488933                  	mov qword [rbx], rsi
 10531 00006C31 48FFC9                  	dec rcx
 10532 00006C34 4883EB08                	sub rbx, 8 * 1
 10533 00006C38 4883EA08                	sub rdx, 8 * 1
 10534 00006C3C EBE7                    	jmp .L_tc_recycle_frame_loop_8ef4
 10535                                  .L_tc_recycle_frame_done_8ef4:
 10536 00006C3E 488D6308                	lea rsp, [rbx + 8 * 1]
 10537 00006C42 5D                      	pop rbp	; the proc will restore it!
 10538 00006C43 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10539                                  
 10540 00006C46 E90B010000              	jmp .L_if_end_76e0
 10541                                  
 10542                                  	.L_if_else_76e0:
 10543 00006C4B 488B4528                	mov rax, PARAM(1)	; param b
 10544 00006C4F 50                      	push rax
 10545 00006C50 6A01                    	push 1	; arg count
 10546 00006C52 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 10547 00006C5A 803805                  	cmp byte [rax], T_undefined
 10548 00006C5D 0F8479E90000            	je L_error_fvar_undefined
 10549 00006C63 803804                  	cmp byte [rax], T_closure
 10550 00006C66 0F85F4E90000            	jne L_error_non_closure
 10551 00006C6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10552 00006C6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10553                                  
 10554 00006C72 483D[02000000]          	cmp rax, sob_boolean_false
 10555 00006C78 0F8487000000            	je .L_if_else_76e1
 10556                                  	; preparing a tail-call
 10557 00006C7E 488B4528                	mov rax, PARAM(1)	; param b
 10558 00006C82 50                      	push rax
 10559 00006C83 488B4520                	mov rax, PARAM(0)	; param a
 10560 00006C87 50                      	push rax
 10561 00006C88 6A01                    	push 1	; arg count
 10562 00006C8A 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 10563 00006C92 803805                  	cmp byte [rax], T_undefined
 10564 00006C95 0F8441E90000            	je L_error_fvar_undefined
 10565 00006C9B 803804                  	cmp byte [rax], T_closure
 10566 00006C9E 0F85BCE90000            	jne L_error_non_closure
 10567 00006CA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10568 00006CA7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10569 00006CAA 50                      	push rax
 10570 00006CAB 6A02                    	push 2	; arg count
 10571 00006CAD 488B0425[B70F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10572 00006CB5 803805                  	cmp byte [rax], T_undefined
 10573 00006CB8 0F841EE90000            	je L_error_fvar_undefined
 10574 00006CBE 803804                  	cmp byte [rax], T_closure
 10575 00006CC1 0F8599E90000            	jne L_error_non_closure
 10576 00006CC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10577                                  
 10578                                  	; recycling the current frame
 10579 00006CCA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10580 00006CCD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10581 00006CD0 B906000000              	mov rcx, 2 + 4
 10582 00006CD5 488B5D18                	mov rbx, COUNT
 10583 00006CD9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10584 00006CDE 488D55F8                	lea rdx, [rbp - 8 * 1]
 10585                                  .L_tc_recycle_frame_loop_8ef5:
 10586 00006CE2 4883F900                	cmp rcx, 0
 10587 00006CE6 7413                    	je .L_tc_recycle_frame_done_8ef5
 10588 00006CE8 488B32                  	mov rsi, qword [rdx]
 10589 00006CEB 488933                  	mov qword [rbx], rsi
 10590 00006CEE 48FFC9                  	dec rcx
 10591 00006CF1 4883EB08                	sub rbx, 8 * 1
 10592 00006CF5 4883EA08                	sub rdx, 8 * 1
 10593 00006CF9 EBE7                    	jmp .L_tc_recycle_frame_loop_8ef5
 10594                                  .L_tc_recycle_frame_done_8ef5:
 10595 00006CFB 488D6308                	lea rsp, [rbx + 8 * 1]
 10596 00006CFF 5D                      	pop rbp	; the proc will restore it!
 10597 00006D00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10598                                  
 10599 00006D03 EB51                    	jmp .L_if_end_76e1
 10600                                  
 10601                                  	.L_if_else_76e1:
 10602                                  	; preparing a tail-call
 10603 00006D05 6A00                    	push 0	; arg count
 10604 00006D07 488B4510                	mov rax, ENV
 10605 00006D0B 488B00                  	mov rax, qword [rax + 8 * 0]
 10606 00006D0E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10607 00006D11 803804                  	cmp byte [rax], T_closure
 10608 00006D14 0F8546E90000            	jne L_error_non_closure
 10609 00006D1A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10610                                  
 10611                                  	; recycling the current frame
 10612 00006D1D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10613 00006D20 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10614 00006D23 B904000000              	mov rcx, 0 + 4
 10615 00006D28 488B5D18                	mov rbx, COUNT
 10616 00006D2C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10617 00006D31 488D55F8                	lea rdx, [rbp - 8 * 1]
 10618                                  .L_tc_recycle_frame_loop_8ef6:
 10619 00006D35 4883F900                	cmp rcx, 0
 10620 00006D39 7413                    	je .L_tc_recycle_frame_done_8ef6
 10621 00006D3B 488B32                  	mov rsi, qword [rdx]
 10622 00006D3E 488933                  	mov qword [rbx], rsi
 10623 00006D41 48FFC9                  	dec rcx
 10624 00006D44 4883EB08                	sub rbx, 8 * 1
 10625 00006D48 4883EA08                	sub rdx, 8 * 1
 10626 00006D4C EBE7                    	jmp .L_tc_recycle_frame_loop_8ef6
 10627                                  .L_tc_recycle_frame_done_8ef6:
 10628 00006D4E 488D6308                	lea rsp, [rbx + 8 * 1]
 10629 00006D52 5D                      	pop rbp	; the proc will restore it!
 10630 00006D53 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10631                                  
 10632                                  	.L_if_end_76e1:
 10633                                  
 10634                                  	.L_if_end_76e0:
 10635                                  
 10636                                  	.L_if_end_76df:
 10637                                  
 10638 00006D56 E9E4020000              	jmp .L_if_end_76de
 10639                                  
 10640                                  	.L_if_else_76de:
 10641 00006D5B 488B4520                	mov rax, PARAM(0)	; param a
 10642 00006D5F 50                      	push rax
 10643 00006D60 6A01                    	push 1	; arg count
 10644 00006D62 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 10645 00006D6A 803805                  	cmp byte [rax], T_undefined
 10646 00006D6D 0F8469E80000            	je L_error_fvar_undefined
 10647 00006D73 803804                  	cmp byte [rax], T_closure
 10648 00006D76 0F85E4E80000            	jne L_error_non_closure
 10649 00006D7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10650 00006D7F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10651                                  
 10652 00006D82 483D[02000000]          	cmp rax, sob_boolean_false
 10653 00006D88 0F8460020000            	je .L_if_else_76e2
 10654 00006D8E 488B4528                	mov rax, PARAM(1)	; param b
 10655 00006D92 50                      	push rax
 10656 00006D93 6A01                    	push 1	; arg count
 10657 00006D95 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10658 00006D9D 803805                  	cmp byte [rax], T_undefined
 10659 00006DA0 0F8436E80000            	je L_error_fvar_undefined
 10660 00006DA6 803804                  	cmp byte [rax], T_closure
 10661 00006DA9 0F85B1E80000            	jne L_error_non_closure
 10662 00006DAF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10663 00006DB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10664                                  
 10665 00006DB5 483D[02000000]          	cmp rax, sob_boolean_false
 10666 00006DBB 0F848A000000            	je .L_if_else_76e3
 10667                                  	; preparing a tail-call
 10668 00006DC1 488B4528                	mov rax, PARAM(1)	; param b
 10669 00006DC5 50                      	push rax
 10670 00006DC6 6A01                    	push 1	; arg count
 10671 00006DC8 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 10672 00006DD0 803805                  	cmp byte [rax], T_undefined
 10673 00006DD3 0F8403E80000            	je L_error_fvar_undefined
 10674 00006DD9 803804                  	cmp byte [rax], T_closure
 10675 00006DDC 0F857EE80000            	jne L_error_non_closure
 10676 00006DE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10677 00006DE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10678 00006DE8 50                      	push rax
 10679 00006DE9 488B4520                	mov rax, PARAM(0)	; param a
 10680 00006DED 50                      	push rax
 10681 00006DEE 6A02                    	push 2	; arg count
 10682 00006DF0 488B0425[B70F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10683 00006DF8 803805                  	cmp byte [rax], T_undefined
 10684 00006DFB 0F84DBE70000            	je L_error_fvar_undefined
 10685 00006E01 803804                  	cmp byte [rax], T_closure
 10686 00006E04 0F8556E80000            	jne L_error_non_closure
 10687 00006E0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10688                                  
 10689                                  	; recycling the current frame
 10690 00006E0D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10691 00006E10 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10692 00006E13 B906000000              	mov rcx, 2 + 4
 10693 00006E18 488B5D18                	mov rbx, COUNT
 10694 00006E1C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10695 00006E21 488D55F8                	lea rdx, [rbp - 8 * 1]
 10696                                  .L_tc_recycle_frame_loop_8ef7:
 10697 00006E25 4883F900                	cmp rcx, 0
 10698 00006E29 7413                    	je .L_tc_recycle_frame_done_8ef7
 10699 00006E2B 488B32                  	mov rsi, qword [rdx]
 10700 00006E2E 488933                  	mov qword [rbx], rsi
 10701 00006E31 48FFC9                  	dec rcx
 10702 00006E34 4883EB08                	sub rbx, 8 * 1
 10703 00006E38 4883EA08                	sub rdx, 8 * 1
 10704 00006E3C EBE7                    	jmp .L_tc_recycle_frame_loop_8ef7
 10705                                  .L_tc_recycle_frame_done_8ef7:
 10706 00006E3E 488D6308                	lea rsp, [rbx + 8 * 1]
 10707 00006E42 5D                      	pop rbp	; the proc will restore it!
 10708 00006E43 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10709                                  
 10710 00006E46 E9A1010000              	jmp .L_if_end_76e3
 10711                                  
 10712                                  	.L_if_else_76e3:
 10713 00006E4B 488B4528                	mov rax, PARAM(1)	; param b
 10714 00006E4F 50                      	push rax
 10715 00006E50 6A01                    	push 1	; arg count
 10716 00006E52 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10717 00006E5A 803805                  	cmp byte [rax], T_undefined
 10718 00006E5D 0F8479E70000            	je L_error_fvar_undefined
 10719 00006E63 803804                  	cmp byte [rax], T_closure
 10720 00006E66 0F85F4E70000            	jne L_error_non_closure
 10721 00006E6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10722 00006E6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10723                                  
 10724 00006E72 483D[02000000]          	cmp rax, sob_boolean_false
 10725 00006E78 0F848A000000            	je .L_if_else_76e4
 10726                                  	; preparing a tail-call
 10727 00006E7E 488B4528                	mov rax, PARAM(1)	; param b
 10728 00006E82 50                      	push rax
 10729 00006E83 6A01                    	push 1	; arg count
 10730 00006E85 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 10731 00006E8D 803805                  	cmp byte [rax], T_undefined
 10732 00006E90 0F8446E70000            	je L_error_fvar_undefined
 10733 00006E96 803804                  	cmp byte [rax], T_closure
 10734 00006E99 0F85C1E70000            	jne L_error_non_closure
 10735 00006E9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10736 00006EA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10737 00006EA5 50                      	push rax
 10738 00006EA6 488B4520                	mov rax, PARAM(0)	; param a
 10739 00006EAA 50                      	push rax
 10740 00006EAB 6A02                    	push 2	; arg count
 10741 00006EAD 488B0425[B70F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10742 00006EB5 803805                  	cmp byte [rax], T_undefined
 10743 00006EB8 0F841EE70000            	je L_error_fvar_undefined
 10744 00006EBE 803804                  	cmp byte [rax], T_closure
 10745 00006EC1 0F8599E70000            	jne L_error_non_closure
 10746 00006EC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10747                                  
 10748                                  	; recycling the current frame
 10749 00006ECA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10750 00006ECD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10751 00006ED0 B906000000              	mov rcx, 2 + 4
 10752 00006ED5 488B5D18                	mov rbx, COUNT
 10753 00006ED9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10754 00006EDE 488D55F8                	lea rdx, [rbp - 8 * 1]
 10755                                  .L_tc_recycle_frame_loop_8ef8:
 10756 00006EE2 4883F900                	cmp rcx, 0
 10757 00006EE6 7413                    	je .L_tc_recycle_frame_done_8ef8
 10758 00006EE8 488B32                  	mov rsi, qword [rdx]
 10759 00006EEB 488933                  	mov qword [rbx], rsi
 10760 00006EEE 48FFC9                  	dec rcx
 10761 00006EF1 4883EB08                	sub rbx, 8 * 1
 10762 00006EF5 4883EA08                	sub rdx, 8 * 1
 10763 00006EF9 EBE7                    	jmp .L_tc_recycle_frame_loop_8ef8
 10764                                  .L_tc_recycle_frame_done_8ef8:
 10765 00006EFB 488D6308                	lea rsp, [rbx + 8 * 1]
 10766 00006EFF 5D                      	pop rbp	; the proc will restore it!
 10767 00006F00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10768                                  
 10769 00006F03 E9E4000000              	jmp .L_if_end_76e4
 10770                                  
 10771                                  	.L_if_else_76e4:
 10772 00006F08 488B4528                	mov rax, PARAM(1)	; param b
 10773 00006F0C 50                      	push rax
 10774 00006F0D 6A01                    	push 1	; arg count
 10775 00006F0F 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 10776 00006F17 803805                  	cmp byte [rax], T_undefined
 10777 00006F1A 0F84BCE60000            	je L_error_fvar_undefined
 10778 00006F20 803804                  	cmp byte [rax], T_closure
 10779 00006F23 0F8537E70000            	jne L_error_non_closure
 10780 00006F29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10781 00006F2C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10782                                  
 10783 00006F2F 483D[02000000]          	cmp rax, sob_boolean_false
 10784 00006F35 7464                    	je .L_if_else_76e5
 10785                                  	; preparing a tail-call
 10786 00006F37 488B4528                	mov rax, PARAM(1)	; param b
 10787 00006F3B 50                      	push rax
 10788 00006F3C 488B4520                	mov rax, PARAM(0)	; param a
 10789 00006F40 50                      	push rax
 10790 00006F41 6A02                    	push 2	; arg count
 10791 00006F43 488B0425[B70F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10792 00006F4B 803805                  	cmp byte [rax], T_undefined
 10793 00006F4E 0F8488E60000            	je L_error_fvar_undefined
 10794 00006F54 803804                  	cmp byte [rax], T_closure
 10795 00006F57 0F8503E70000            	jne L_error_non_closure
 10796 00006F5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10797                                  
 10798                                  	; recycling the current frame
 10799 00006F60 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10800 00006F63 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10801 00006F66 B906000000              	mov rcx, 2 + 4
 10802 00006F6B 488B5D18                	mov rbx, COUNT
 10803 00006F6F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10804 00006F74 488D55F8                	lea rdx, [rbp - 8 * 1]
 10805                                  .L_tc_recycle_frame_loop_8ef9:
 10806 00006F78 4883F900                	cmp rcx, 0
 10807 00006F7C 7413                    	je .L_tc_recycle_frame_done_8ef9
 10808 00006F7E 488B32                  	mov rsi, qword [rdx]
 10809 00006F81 488933                  	mov qword [rbx], rsi
 10810 00006F84 48FFC9                  	dec rcx
 10811 00006F87 4883EB08                	sub rbx, 8 * 1
 10812 00006F8B 4883EA08                	sub rdx, 8 * 1
 10813 00006F8F EBE7                    	jmp .L_tc_recycle_frame_loop_8ef9
 10814                                  .L_tc_recycle_frame_done_8ef9:
 10815 00006F91 488D6308                	lea rsp, [rbx + 8 * 1]
 10816 00006F95 5D                      	pop rbp	; the proc will restore it!
 10817 00006F96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10818                                  
 10819 00006F99 EB51                    	jmp .L_if_end_76e5
 10820                                  
 10821                                  	.L_if_else_76e5:
 10822                                  	; preparing a tail-call
 10823 00006F9B 6A00                    	push 0	; arg count
 10824 00006F9D 488B4510                	mov rax, ENV
 10825 00006FA1 488B00                  	mov rax, qword [rax + 8 * 0]
 10826 00006FA4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10827 00006FA7 803804                  	cmp byte [rax], T_closure
 10828 00006FAA 0F85B0E60000            	jne L_error_non_closure
 10829 00006FB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10830                                  
 10831                                  	; recycling the current frame
 10832 00006FB3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10833 00006FB6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10834 00006FB9 B904000000              	mov rcx, 0 + 4
 10835 00006FBE 488B5D18                	mov rbx, COUNT
 10836 00006FC2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10837 00006FC7 488D55F8                	lea rdx, [rbp - 8 * 1]
 10838                                  .L_tc_recycle_frame_loop_8efa:
 10839 00006FCB 4883F900                	cmp rcx, 0
 10840 00006FCF 7413                    	je .L_tc_recycle_frame_done_8efa
 10841 00006FD1 488B32                  	mov rsi, qword [rdx]
 10842 00006FD4 488933                  	mov qword [rbx], rsi
 10843 00006FD7 48FFC9                  	dec rcx
 10844 00006FDA 4883EB08                	sub rbx, 8 * 1
 10845 00006FDE 4883EA08                	sub rdx, 8 * 1
 10846 00006FE2 EBE7                    	jmp .L_tc_recycle_frame_loop_8efa
 10847                                  .L_tc_recycle_frame_done_8efa:
 10848 00006FE4 488D6308                	lea rsp, [rbx + 8 * 1]
 10849 00006FE8 5D                      	pop rbp	; the proc will restore it!
 10850 00006FE9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10851                                  
 10852                                  	.L_if_end_76e5:
 10853                                  
 10854                                  	.L_if_end_76e4:
 10855                                  
 10856                                  	.L_if_end_76e3:
 10857                                  
 10858 00006FEC EB51                    	jmp .L_if_end_76e2
 10859                                  
 10860                                  	.L_if_else_76e2:
 10861                                  	; preparing a tail-call
 10862 00006FEE 6A00                    	push 0	; arg count
 10863 00006FF0 488B4510                	mov rax, ENV
 10864 00006FF4 488B00                  	mov rax, qword [rax + 8 * 0]
 10865 00006FF7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10866 00006FFA 803804                  	cmp byte [rax], T_closure
 10867 00006FFD 0F855DE60000            	jne L_error_non_closure
 10868 00007003 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10869                                  
 10870                                  	; recycling the current frame
 10871 00007006 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10872 00007009 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10873 0000700C B904000000              	mov rcx, 0 + 4
 10874 00007011 488B5D18                	mov rbx, COUNT
 10875 00007015 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10876 0000701A 488D55F8                	lea rdx, [rbp - 8 * 1]
 10877                                  .L_tc_recycle_frame_loop_8efb:
 10878 0000701E 4883F900                	cmp rcx, 0
 10879 00007022 7413                    	je .L_tc_recycle_frame_done_8efb
 10880 00007024 488B32                  	mov rsi, qword [rdx]
 10881 00007027 488933                  	mov qword [rbx], rsi
 10882 0000702A 48FFC9                  	dec rcx
 10883 0000702D 4883EB08                	sub rbx, 8 * 1
 10884 00007031 4883EA08                	sub rdx, 8 * 1
 10885 00007035 EBE7                    	jmp .L_tc_recycle_frame_loop_8efb
 10886                                  .L_tc_recycle_frame_done_8efb:
 10887 00007037 488D6308                	lea rsp, [rbx + 8 * 1]
 10888 0000703B 5D                      	pop rbp	; the proc will restore it!
 10889 0000703C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10890                                  
 10891                                  	.L_if_end_76e2:
 10892                                  
 10893                                  	.L_if_end_76de:
 10894                                  
 10895                                  	.L_if_end_76da:
 10896 0000703F C9                      	leave
 10897 00007040 C22000                  	ret AND_KILL_FRAME(2)
 10898                                  .L_lambda_simple_end_6d25:	; new closure is in rax
 10899 00007043 50                      	push rax
 10900 00007044 6A01                    	push 1	; arg count
 10901 00007046 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10902 0000704B E8B9E60000              	call malloc
 10903 00007050 50                      	push rax
 10904 00007051 BF08000000              	mov rdi, 8 * 1	; new rib
 10905 00007056 E8AEE60000              	call malloc
 10906 0000705B 50                      	push rax
 10907 0000705C BF10000000              	mov rdi, 8 * 2	; extended env
 10908 00007061 E8A3E60000              	call malloc
 10909 00007066 488B7D10                	mov rdi, ENV
 10910 0000706A BE00000000              	mov rsi, 0
 10911 0000706F BA01000000              	mov rdx, 1
 10912                                  .L_lambda_simple_env_loop_6d26:	; ext_env[i + 1] <-- env[i]
 10913 00007074 4883FE01                	cmp rsi, 1
 10914 00007078 7410                    	je .L_lambda_simple_env_end_6d26
 10915 0000707A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10916 0000707E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10917 00007082 48FFC6                  	inc rsi
 10918 00007085 48FFC2                  	inc rdx
 10919 00007088 EBEA                    	jmp .L_lambda_simple_env_loop_6d26
 10920                                  .L_lambda_simple_env_end_6d26:
 10921 0000708A 5B                      	pop rbx
 10922 0000708B BE00000000              	mov rsi, 0
 10923                                  .L_lambda_simple_params_loop_6d26:	; copy params
 10924 00007090 4883FE01                	cmp rsi, 1
 10925 00007094 740E                    	je .L_lambda_simple_params_end_6d26
 10926 00007096 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10927 0000709B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10928 0000709F 48FFC6                  	inc rsi
 10929 000070A2 EBEC                    	jmp .L_lambda_simple_params_loop_6d26
 10930                                  .L_lambda_simple_params_end_6d26:
 10931 000070A4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10932 000070A7 4889C3                  	mov rbx, rax
 10933 000070AA 58                      	pop rax
 10934 000070AB C60004                  	mov byte [rax], T_closure
 10935 000070AE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10936 000070B2 48C74009[BF700000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d26
 10937 000070BA E986030000              	jmp .L_lambda_simple_end_6d26
 10938                                  .L_lambda_simple_code_6d26:	; lambda-simple body
 10939 000070BF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10940 000070C5 740B                    	je .L_lambda_simple_arity_check_ok_6d26
 10941 000070C7 FF742410                	push qword [rsp + 8 * 2]
 10942 000070CB 6A01                    	push 1
 10943 000070CD E9F0E50000              	jmp L_error_incorrect_arity_simple
 10944                                  .L_lambda_simple_arity_check_ok_6d26:
 10945 000070D2 C8000000                	enter 0, 0
 10946 000070D6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10947 000070DB E829E60000              	call malloc
 10948 000070E0 50                      	push rax
 10949 000070E1 BF08000000              	mov rdi, 8 * 1	; new rib
 10950 000070E6 E81EE60000              	call malloc
 10951 000070EB 50                      	push rax
 10952 000070EC BF18000000              	mov rdi, 8 * 3	; extended env
 10953 000070F1 E813E60000              	call malloc
 10954 000070F6 488B7D10                	mov rdi, ENV
 10955 000070FA BE00000000              	mov rsi, 0
 10956 000070FF BA01000000              	mov rdx, 1
 10957                                  .L_lambda_opt_env_loop_0f5b:	; ext_env[i + 1] <-- env[i]
 10958 00007104 4883FE02                	cmp rsi, 2
 10959 00007108 7410                    	je .L_lambda_opt_env_end_0f5b
 10960 0000710A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10961 0000710E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10962 00007112 48FFC6                  	inc rsi
 10963 00007115 48FFC2                  	inc rdx
 10964 00007118 EBEA                    	jmp .L_lambda_opt_env_loop_0f5b
 10965                                  .L_lambda_opt_env_end_0f5b:
 10966 0000711A 5B                      	pop rbx
 10967 0000711B BE00000000              	mov rsi, 0
 10968                                  .L_lambda_opt_params_loop_0f5b:	; copy params
 10969 00007120 4883FE01                	cmp rsi, 1
 10970 00007124 740E                    	je .L_lambda_opt_params_end_0f5b
 10971 00007126 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10972 0000712B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10973 0000712F 48FFC6                  	inc rsi
 10974 00007132 EBEC                    	jmp .L_lambda_opt_params_loop_0f5b
 10975                                  .L_lambda_opt_params_end_0f5b:
 10976 00007134 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10977 00007137 4889C3                  	mov rbx, rax
 10978 0000713A 58                      	pop rax
 10979 0000713B C60004                  	mov byte [rax], T_closure
 10980 0000713E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10981 00007142 48C74009[4F710000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f5b
 10982 0000714A E9F2020000              	jmp .L_lambda_opt_end_0f5b
 10983                                  .L_lambda_opt_code_0f5b:	; lambda-simple body
 10984 0000714F 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 10985 00007155 740D                    	je .L_lambda_opt_arity_check_exact_0f5b ;	 if equal, go to exact arity
 10986 00007157 7F42                    	jg .L_lambda_opt_arity_check_more_0f5b ;	 if greater than, go to arity more
 10987 00007159 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 10988 0000715D 6A01                     	push 1
 10989 0000715F E972E50000              	jmp L_error_incorrect_arity_opt
 10990                                  	.L_lambda_opt_arity_check_exact_0f5b:
 10991 00007164 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 10992 00007169 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 10993 0000716E 4883EC08                	sub rsp, 8
 10994 00007172 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 10995                                  	.L_lambda_opt_exact_shifting_loop_0f5b:
 10996 00007176 488B5108                	mov rdx, [rcx + 8]
 10997 0000717A 488911                  	mov [rcx], rdx
 10998 0000717D 4883C108                	add rcx, 8
 10999 00007181 4839CB                  	cmp rbx, rcx
 11000 00007184 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f5b
 11001                                  	.L_lambda_opt_exact_shifting_loop_end_0f5b:
 11002 00007186 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 11003 0000718D 4883C001                	add rax, 1 ; 	arg count += 1
 11004 00007191 4889442410              	mov qword [rsp + 8 * 2], rax
 11005 00007196 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f5b
 11006                                  	.L_lambda_opt_arity_check_more_0f5b:
 11007 0000719B 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 11007 0000719D [0100000000000000] 
 11008 000071A5 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 11009 000071AB 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f5b
 11010                                  	.L_lambda_opt_stack_shrink_loop_0f5b:
 11011 000071AD BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 11012 000071B2 E852E50000              	call malloc ;	 allocated memory for the optional scheme list
 11013 000071B7 C60021                  	mov byte[rax], T_pair ;	 set type pair
 11014 000071BA 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 11015 000071BE 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 11016 000071C1 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 11017 000071C6 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 11018 000071CB 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 11019 000071CF 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 11020                                  	.L_lambda_opt_more_shifting_loop_0f5b:
 11021 000071D4 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 11022 000071D7 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 11023 000071DB 4883EB08                	sub rbx, 8 
 11024 000071DF 4839DC                  	cmp rsp, rbx
 11025 000071E2 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f5b
 11026                                  	.L_lambda_opt_more_shifting_loop_end_0f5b:
 11027 000071E4 4883C408                	add rsp, 8 ;	 update rsp
 11028 000071E8 488B5C2410              	mov rbx, [rsp + 8 * 2]
 11029 000071ED 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 11030 000071F1 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 11031 000071F6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11032 000071FC 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f5b
 11033                                  	.L_lambda_opt_stack_shrink_loop_exit_0f5b:
 11034 000071FE 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 11035 00007203 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 11036 00007208 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 11037 0000720D E8F7E40000              	call malloc ;	 allocated memory for the optional scheme list
 11038 00007212 C60021                  	mov byte[rax], T_pair ;	 set type pair
 11039 00007215 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 11040 00007219 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 11041 0000721D 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 11042                                  	.L_lambda_opt_stack_adjusted_0f5b:
 11043 00007222 C8000000                	enter 0, 0
 11044 00007226 488B4528                	mov rax, PARAM(1)	; param s
 11045 0000722A 50                      	push rax
 11046 0000722B 6A01                    	push 1	; arg count
 11047 0000722D 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 11048 00007235 803805                  	cmp byte [rax], T_undefined
 11049 00007238 0F849EE30000            	je L_error_fvar_undefined
 11050 0000723E 803804                  	cmp byte [rax], T_closure
 11051 00007241 0F8519E40000            	jne L_error_non_closure
 11052 00007247 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11053 0000724A FF5009                  	call SOB_CLOSURE_CODE(rax)
 11054                                  
 11055 0000724D 483D[02000000]          	cmp rax, sob_boolean_false
 11056 00007253 7466                    	je .L_if_else_76e6
 11057                                  	; preparing a tail-call
 11058 00007255 488B4520                	mov rax, PARAM(0)	; param a
 11059 00007259 50                      	push rax
 11060 0000725A 48B8-                   	mov rax, L_constants + 2023
 11060 0000725C [E707000000000000] 
 11061 00007264 50                      	push rax
 11062 00007265 6A02                    	push 2	; arg count
 11063 00007267 488B4510                	mov rax, ENV
 11064 0000726B 488B00                  	mov rax, qword [rax + 8 * 0]
 11065 0000726E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 11066 00007271 803804                  	cmp byte [rax], T_closure
 11067 00007274 0F85E6E30000            	jne L_error_non_closure
 11068 0000727A FF7001                  	push SOB_CLOSURE_ENV(rax)
 11069                                  
 11070                                  	; recycling the current frame
 11071 0000727D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11072 00007280 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11073 00007283 B906000000              	mov rcx, 2 + 4
 11074 00007288 488B5D18                	mov rbx, COUNT
 11075 0000728C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11076 00007291 488D55F8                	lea rdx, [rbp - 8 * 1]
 11077                                  .L_tc_recycle_frame_loop_8efc:
 11078 00007295 4883F900                	cmp rcx, 0
 11079 00007299 7413                    	je .L_tc_recycle_frame_done_8efc
 11080 0000729B 488B32                  	mov rsi, qword [rdx]
 11081 0000729E 488933                  	mov qword [rbx], rsi
 11082 000072A1 48FFC9                  	dec rcx
 11083 000072A4 4883EB08                	sub rbx, 8 * 1
 11084 000072A8 4883EA08                	sub rdx, 8 * 1
 11085 000072AC EBE7                    	jmp .L_tc_recycle_frame_loop_8efc
 11086                                  .L_tc_recycle_frame_done_8efc:
 11087 000072AE 488D6308                	lea rsp, [rbx + 8 * 1]
 11088 000072B2 5D                      	pop rbp	; the proc will restore it!
 11089 000072B3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11090                                  
 11091 000072B6 E982010000              	jmp .L_if_end_76e6
 11092                                  
 11093                                  	.L_if_else_76e6:
 11094                                  	; preparing a tail-call
 11095 000072BB 488B4528                	mov rax, PARAM(1)	; param s
 11096 000072BF 50                      	push rax
 11097 000072C0 48B8-                   	mov rax, L_constants + 2023
 11097 000072C2 [E707000000000000] 
 11098 000072CA 50                      	push rax
 11099 000072CB 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 11100 000072D3 803805                  	cmp byte [rax], T_undefined
 11101 000072D6 0F8400E30000            	je L_error_fvar_undefined
 11102 000072DC 50                      	push rax
 11103 000072DD 6A03                    	push 3	; arg count
 11104 000072DF 488B0425[18150000]      	mov rax, qword [free_var_112]	; free var fold-left
 11105 000072E7 803805                  	cmp byte [rax], T_undefined
 11106 000072EA 0F84ECE20000            	je L_error_fvar_undefined
 11107 000072F0 803804                  	cmp byte [rax], T_closure
 11108 000072F3 0F8567E30000            	jne L_error_non_closure
 11109 000072F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11110 000072FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 11111 000072FF 50                      	push rax
 11112 00007300 6A01                    	push 1	; arg count
 11113 00007302 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11114 00007307 E8FDE30000              	call malloc
 11115 0000730C 50                      	push rax
 11116 0000730D BF10000000              	mov rdi, 8 * 2	; new rib
 11117 00007312 E8F2E30000              	call malloc
 11118 00007317 50                      	push rax
 11119 00007318 BF20000000              	mov rdi, 8 * 4	; extended env
 11120 0000731D E8E7E30000              	call malloc
 11121 00007322 488B7D10                	mov rdi, ENV
 11122 00007326 BE00000000              	mov rsi, 0
 11123 0000732B BA01000000              	mov rdx, 1
 11124                                  .L_lambda_simple_env_loop_6d27:	; ext_env[i + 1] <-- env[i]
 11125 00007330 4883FE03                	cmp rsi, 3
 11126 00007334 7410                    	je .L_lambda_simple_env_end_6d27
 11127 00007336 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11128 0000733A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11129 0000733E 48FFC6                  	inc rsi
 11130 00007341 48FFC2                  	inc rdx
 11131 00007344 EBEA                    	jmp .L_lambda_simple_env_loop_6d27
 11132                                  .L_lambda_simple_env_end_6d27:
 11133 00007346 5B                      	pop rbx
 11134 00007347 BE00000000              	mov rsi, 0
 11135                                  .L_lambda_simple_params_loop_6d27:	; copy params
 11136 0000734C 4883FE02                	cmp rsi, 2
 11137 00007350 740E                    	je .L_lambda_simple_params_end_6d27
 11138 00007352 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11139 00007357 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11140 0000735B 48FFC6                  	inc rsi
 11141 0000735E EBEC                    	jmp .L_lambda_simple_params_loop_6d27
 11142                                  .L_lambda_simple_params_end_6d27:
 11143 00007360 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11144 00007363 4889C3                  	mov rbx, rax
 11145 00007366 58                      	pop rax
 11146 00007367 C60004                  	mov byte [rax], T_closure
 11147 0000736A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11148 0000736E 48C74009[7B730000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d27
 11149 00007376 E97D000000              	jmp .L_lambda_simple_end_6d27
 11150                                  .L_lambda_simple_code_6d27:	; lambda-simple body
 11151 0000737B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11152 00007381 740B                    	je .L_lambda_simple_arity_check_ok_6d27
 11153 00007383 FF742410                	push qword [rsp + 8 * 2]
 11154 00007387 6A01                    	push 1
 11155 00007389 E934E30000              	jmp L_error_incorrect_arity_simple
 11156                                  .L_lambda_simple_arity_check_ok_6d27:
 11157 0000738E C8000000                	enter 0, 0
 11158                                  	; preparing a tail-call
 11159 00007392 488B4520                	mov rax, PARAM(0)	; param b
 11160 00007396 50                      	push rax
 11161 00007397 488B4510                	mov rax, ENV
 11162 0000739B 488B00                  	mov rax, qword [rax + 8 * 0]
 11163 0000739E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 11164 000073A1 50                      	push rax
 11165 000073A2 6A02                    	push 2	; arg count
 11166 000073A4 488B4510                	mov rax, ENV
 11167 000073A8 488B4008                	mov rax, qword [rax + 8 * 1]
 11168 000073AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 11169 000073AF 803804                  	cmp byte [rax], T_closure
 11170 000073B2 0F85A8E20000            	jne L_error_non_closure
 11171 000073B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11172                                  
 11173                                  	; recycling the current frame
 11174 000073BB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11175 000073BE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11176 000073C1 B906000000              	mov rcx, 2 + 4
 11177 000073C6 488B5D18                	mov rbx, COUNT
 11178 000073CA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11179 000073CF 488D55F8                	lea rdx, [rbp - 8 * 1]
 11180                                  .L_tc_recycle_frame_loop_8efd:
 11181 000073D3 4883F900                	cmp rcx, 0
 11182 000073D7 7413                    	je .L_tc_recycle_frame_done_8efd
 11183 000073D9 488B32                  	mov rsi, qword [rdx]
 11184 000073DC 488933                  	mov qword [rbx], rsi
 11185 000073DF 48FFC9                  	dec rcx
 11186 000073E2 4883EB08                	sub rbx, 8 * 1
 11187 000073E6 4883EA08                	sub rdx, 8 * 1
 11188 000073EA EBE7                    	jmp .L_tc_recycle_frame_loop_8efd
 11189                                  .L_tc_recycle_frame_done_8efd:
 11190 000073EC 488D6308                	lea rsp, [rbx + 8 * 1]
 11191 000073F0 5D                      	pop rbp	; the proc will restore it!
 11192 000073F1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11193 000073F4 C9                      	leave
 11194 000073F5 C21800                  	ret AND_KILL_FRAME(1)
 11195                                  .L_lambda_simple_end_6d27:	; new closure is in rax
 11196 000073F8 803804                  	cmp byte [rax], T_closure
 11197 000073FB 0F855FE20000            	jne L_error_non_closure
 11198 00007401 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11199                                  
 11200                                  	; recycling the current frame
 11201 00007404 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11202 00007407 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11203 0000740A B905000000              	mov rcx, 1 + 4
 11204 0000740F 488B5D18                	mov rbx, COUNT
 11205 00007413 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11206 00007418 488D55F8                	lea rdx, [rbp - 8 * 1]
 11207                                  .L_tc_recycle_frame_loop_8efe:
 11208 0000741C 4883F900                	cmp rcx, 0
 11209 00007420 7413                    	je .L_tc_recycle_frame_done_8efe
 11210 00007422 488B32                  	mov rsi, qword [rdx]
 11211 00007425 488933                  	mov qword [rbx], rsi
 11212 00007428 48FFC9                  	dec rcx
 11213 0000742B 4883EB08                	sub rbx, 8 * 1
 11214 0000742F 4883EA08                	sub rdx, 8 * 1
 11215 00007433 EBE7                    	jmp .L_tc_recycle_frame_loop_8efe
 11216                                  .L_tc_recycle_frame_done_8efe:
 11217 00007435 488D6308                	lea rsp, [rbx + 8 * 1]
 11218 00007439 5D                      	pop rbp	; the proc will restore it!
 11219 0000743A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11220                                  
 11221                                  	.L_if_end_76e6:
 11222 0000743D C9                      	leave
 11223 0000743E C22000                  	ret AND_KILL_FRAME(2)
 11224                                  .L_lambda_opt_end_0f5b:	; new closure is in rax
 11225 00007441 C9                      	leave
 11226 00007442 C21800                  	ret AND_KILL_FRAME(1)
 11227                                  .L_lambda_simple_end_6d26:	; new closure is in rax
 11228 00007445 803804                  	cmp byte [rax], T_closure
 11229 00007448 0F8512E20000            	jne L_error_non_closure
 11230 0000744E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11231                                  
 11232                                  	; recycling the current frame
 11233 00007451 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11234 00007454 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11235 00007457 B905000000              	mov rcx, 1 + 4
 11236 0000745C 488B5D18                	mov rbx, COUNT
 11237 00007460 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11238 00007465 488D55F8                	lea rdx, [rbp - 8 * 1]
 11239                                  .L_tc_recycle_frame_loop_8eff:
 11240 00007469 4883F900                	cmp rcx, 0
 11241 0000746D 7413                    	je .L_tc_recycle_frame_done_8eff
 11242 0000746F 488B32                  	mov rsi, qword [rdx]
 11243 00007472 488933                  	mov qword [rbx], rsi
 11244 00007475 48FFC9                  	dec rcx
 11245 00007478 4883EB08                	sub rbx, 8 * 1
 11246 0000747C 4883EA08                	sub rdx, 8 * 1
 11247 00007480 EBE7                    	jmp .L_tc_recycle_frame_loop_8eff
 11248                                  .L_tc_recycle_frame_done_8eff:
 11249 00007482 488D6308                	lea rsp, [rbx + 8 * 1]
 11250 00007486 5D                      	pop rbp	; the proc will restore it!
 11251 00007487 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11252 0000748A C9                      	leave
 11253 0000748B C21800                  	ret AND_KILL_FRAME(1)
 11254                                  .L_lambda_simple_end_6d24:	; new closure is in rax
 11255 0000748E 803804                  	cmp byte [rax], T_closure
 11256 00007491 0F85C9E10000            	jne L_error_non_closure
 11257 00007497 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11258 0000749A FF5009                  	call SOB_CLOSURE_CODE(rax)
 11259 0000749D 48890425[6D150000]      	mov qword [free_var_117], rax
 11260 000074A5 48B8-                   	mov rax, sob_void
 11260 000074A7 [0000000000000000] 
 11261                                  
 11262 000074AF 4889C7                  	mov rdi, rax
 11263 000074B2 E864E30000              	call print_sexpr_if_not_void
 11264                                  
 11265 000074B7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11266 000074BC E848E20000              	call malloc
 11267 000074C1 50                      	push rax
 11268 000074C2 BF00000000              	mov rdi, 8 * 0	; new rib
 11269 000074C7 E83DE20000              	call malloc
 11270 000074CC 50                      	push rax
 11271 000074CD BF08000000              	mov rdi, 8 * 1	; extended env
 11272 000074D2 E832E20000              	call malloc
 11273 000074D7 488B7D10                	mov rdi, ENV
 11274 000074DB BE00000000              	mov rsi, 0
 11275 000074E0 BA01000000              	mov rdx, 1
 11276                                  .L_lambda_simple_env_loop_6d28:	; ext_env[i + 1] <-- env[i]
 11277 000074E5 4883FE00                	cmp rsi, 0
 11278 000074E9 7410                    	je .L_lambda_simple_env_end_6d28
 11279 000074EB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11280 000074EF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11281 000074F3 48FFC6                  	inc rsi
 11282 000074F6 48FFC2                  	inc rdx
 11283 000074F9 EBEA                    	jmp .L_lambda_simple_env_loop_6d28
 11284                                  .L_lambda_simple_env_end_6d28:
 11285 000074FB 5B                      	pop rbx
 11286 000074FC BE00000000              	mov rsi, 0
 11287                                  .L_lambda_simple_params_loop_6d28:	; copy params
 11288 00007501 4883FE00                	cmp rsi, 0
 11289 00007505 740E                    	je .L_lambda_simple_params_end_6d28
 11290 00007507 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11291 0000750C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11292 00007510 48FFC6                  	inc rsi
 11293 00007513 EBEC                    	jmp .L_lambda_simple_params_loop_6d28
 11294                                  .L_lambda_simple_params_end_6d28:
 11295 00007515 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11296 00007518 4889C3                  	mov rbx, rax
 11297 0000751B 58                      	pop rax
 11298 0000751C C60004                  	mov byte [rax], T_closure
 11299 0000751F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11300 00007523 48C74009[30750000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d28
 11301 0000752B E989000000              	jmp .L_lambda_simple_end_6d28
 11302                                  .L_lambda_simple_code_6d28:	; lambda-simple body
 11303 00007530 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11304 00007536 740B                    	je .L_lambda_simple_arity_check_ok_6d28
 11305 00007538 FF742410                	push qword [rsp + 8 * 2]
 11306 0000753C 6A00                    	push 0
 11307 0000753E E97FE10000              	jmp L_error_incorrect_arity_simple
 11308                                  .L_lambda_simple_arity_check_ok_6d28:
 11309 00007543 C8000000                	enter 0, 0
 11310                                  	; preparing a tail-call
 11311 00007547 48B8-                   	mov rax, L_constants + 2075
 11311 00007549 [1B08000000000000] 
 11312 00007551 50                      	push rax
 11313 00007552 48B8-                   	mov rax, L_constants + 2167
 11313 00007554 [7708000000000000] 
 11314 0000755C 50                      	push rax
 11315 0000755D 6A02                    	push 2	; arg count
 11316 0000755F 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 11317 00007567 803805                  	cmp byte [rax], T_undefined
 11318 0000756A 0F846CE00000            	je L_error_fvar_undefined
 11319 00007570 803804                  	cmp byte [rax], T_closure
 11320 00007573 0F85E7E00000            	jne L_error_non_closure
 11321 00007579 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11322                                  
 11323                                  	; recycling the current frame
 11324 0000757C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11325 0000757F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11326 00007582 B906000000              	mov rcx, 2 + 4
 11327 00007587 488B5D18                	mov rbx, COUNT
 11328 0000758B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11329 00007590 488D55F8                	lea rdx, [rbp - 8 * 1]
 11330                                  .L_tc_recycle_frame_loop_8f00:
 11331 00007594 4883F900                	cmp rcx, 0
 11332 00007598 7413                    	je .L_tc_recycle_frame_done_8f00
 11333 0000759A 488B32                  	mov rsi, qword [rdx]
 11334 0000759D 488933                  	mov qword [rbx], rsi
 11335 000075A0 48FFC9                  	dec rcx
 11336 000075A3 4883EB08                	sub rbx, 8 * 1
 11337 000075A7 4883EA08                	sub rdx, 8 * 1
 11338 000075AB EBE7                    	jmp .L_tc_recycle_frame_loop_8f00
 11339                                  .L_tc_recycle_frame_done_8f00:
 11340 000075AD 488D6308                	lea rsp, [rbx + 8 * 1]
 11341 000075B1 5D                      	pop rbp	; the proc will restore it!
 11342 000075B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11343 000075B5 C9                      	leave
 11344 000075B6 C21000                  	ret AND_KILL_FRAME(0)
 11345                                  .L_lambda_simple_end_6d28:	; new closure is in rax
 11346 000075B9 50                      	push rax
 11347 000075BA 6A01                    	push 1	; arg count
 11348 000075BC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11349 000075C1 E843E10000              	call malloc
 11350 000075C6 50                      	push rax
 11351 000075C7 BF00000000              	mov rdi, 8 * 0	; new rib
 11352 000075CC E838E10000              	call malloc
 11353 000075D1 50                      	push rax
 11354 000075D2 BF08000000              	mov rdi, 8 * 1	; extended env
 11355 000075D7 E82DE10000              	call malloc
 11356 000075DC 488B7D10                	mov rdi, ENV
 11357 000075E0 BE00000000              	mov rsi, 0
 11358 000075E5 BA01000000              	mov rdx, 1
 11359                                  .L_lambda_simple_env_loop_6d29:	; ext_env[i + 1] <-- env[i]
 11360 000075EA 4883FE00                	cmp rsi, 0
 11361 000075EE 7410                    	je .L_lambda_simple_env_end_6d29
 11362 000075F0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11363 000075F4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11364 000075F8 48FFC6                  	inc rsi
 11365 000075FB 48FFC2                  	inc rdx
 11366 000075FE EBEA                    	jmp .L_lambda_simple_env_loop_6d29
 11367                                  .L_lambda_simple_env_end_6d29:
 11368 00007600 5B                      	pop rbx
 11369 00007601 BE00000000              	mov rsi, 0
 11370                                  .L_lambda_simple_params_loop_6d29:	; copy params
 11371 00007606 4883FE00                	cmp rsi, 0
 11372 0000760A 740E                    	je .L_lambda_simple_params_end_6d29
 11373 0000760C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11374 00007611 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11375 00007615 48FFC6                  	inc rsi
 11376 00007618 EBEC                    	jmp .L_lambda_simple_params_loop_6d29
 11377                                  .L_lambda_simple_params_end_6d29:
 11378 0000761A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11379 0000761D 4889C3                  	mov rbx, rax
 11380 00007620 58                      	pop rax
 11381 00007621 C60004                  	mov byte [rax], T_closure
 11382 00007624 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11383 00007628 48C74009[35760000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d29
 11384 00007630 E9620B0000              	jmp .L_lambda_simple_end_6d29
 11385                                  .L_lambda_simple_code_6d29:	; lambda-simple body
 11386 00007635 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11387 0000763B 740B                    	je .L_lambda_simple_arity_check_ok_6d29
 11388 0000763D FF742410                	push qword [rsp + 8 * 2]
 11389 00007641 6A01                    	push 1
 11390 00007643 E97AE00000              	jmp L_error_incorrect_arity_simple
 11391                                  .L_lambda_simple_arity_check_ok_6d29:
 11392 00007648 C8000000                	enter 0, 0
 11393                                  	; preparing a tail-call
 11394 0000764C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11395 00007651 E8B3E00000              	call malloc
 11396 00007656 50                      	push rax
 11397 00007657 BF08000000              	mov rdi, 8 * 1	; new rib
 11398 0000765C E8A8E00000              	call malloc
 11399 00007661 50                      	push rax
 11400 00007662 BF10000000              	mov rdi, 8 * 2	; extended env
 11401 00007667 E89DE00000              	call malloc
 11402 0000766C 488B7D10                	mov rdi, ENV
 11403 00007670 BE00000000              	mov rsi, 0
 11404 00007675 BA01000000              	mov rdx, 1
 11405                                  .L_lambda_simple_env_loop_6d2a:	; ext_env[i + 1] <-- env[i]
 11406 0000767A 4883FE01                	cmp rsi, 1
 11407 0000767E 7410                    	je .L_lambda_simple_env_end_6d2a
 11408 00007680 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11409 00007684 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11410 00007688 48FFC6                  	inc rsi
 11411 0000768B 48FFC2                  	inc rdx
 11412 0000768E EBEA                    	jmp .L_lambda_simple_env_loop_6d2a
 11413                                  .L_lambda_simple_env_end_6d2a:
 11414 00007690 5B                      	pop rbx
 11415 00007691 BE00000000              	mov rsi, 0
 11416                                  .L_lambda_simple_params_loop_6d2a:	; copy params
 11417 00007696 4883FE01                	cmp rsi, 1
 11418 0000769A 740E                    	je .L_lambda_simple_params_end_6d2a
 11419 0000769C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11420 000076A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11421 000076A5 48FFC6                  	inc rsi
 11422 000076A8 EBEC                    	jmp .L_lambda_simple_params_loop_6d2a
 11423                                  .L_lambda_simple_params_end_6d2a:
 11424 000076AA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11425 000076AD 4889C3                  	mov rbx, rax
 11426 000076B0 58                      	pop rax
 11427 000076B1 C60004                  	mov byte [rax], T_closure
 11428 000076B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11429 000076B8 48C74009[C5760000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d2a
 11430 000076C0 E92B080000              	jmp .L_lambda_simple_end_6d2a
 11431                                  .L_lambda_simple_code_6d2a:	; lambda-simple body
 11432 000076C5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11433 000076CB 740B                    	je .L_lambda_simple_arity_check_ok_6d2a
 11434 000076CD FF742410                	push qword [rsp + 8 * 2]
 11435 000076D1 6A02                    	push 2
 11436 000076D3 E9EADF0000              	jmp L_error_incorrect_arity_simple
 11437                                  .L_lambda_simple_arity_check_ok_6d2a:
 11438 000076D8 C8000000                	enter 0, 0
 11439 000076DC 488B4520                	mov rax, PARAM(0)	; param a
 11440 000076E0 50                      	push rax
 11441 000076E1 6A01                    	push 1	; arg count
 11442 000076E3 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11443 000076EB 803805                  	cmp byte [rax], T_undefined
 11444 000076EE 0F84E8DE0000            	je L_error_fvar_undefined
 11445 000076F4 803804                  	cmp byte [rax], T_closure
 11446 000076F7 0F8563DF0000            	jne L_error_non_closure
 11447 000076FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 11448 00007700 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11449                                  
 11450 00007703 483D[02000000]          	cmp rax, sob_boolean_false
 11451 00007709 0F8463020000            	je .L_if_else_76e7
 11452 0000770F 488B4528                	mov rax, PARAM(1)	; param b
 11453 00007713 50                      	push rax
 11454 00007714 6A01                    	push 1	; arg count
 11455 00007716 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11456 0000771E 803805                  	cmp byte [rax], T_undefined
 11457 00007721 0F84B5DE0000            	je L_error_fvar_undefined
 11458 00007727 803804                  	cmp byte [rax], T_closure
 11459 0000772A 0F8530DF0000            	jne L_error_non_closure
 11460 00007730 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11461 00007733 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11462                                  
 11463 00007736 483D[02000000]          	cmp rax, sob_boolean_false
 11464 0000773C 7467                    	je .L_if_else_76e8
 11465                                  	; preparing a tail-call
 11466 0000773E 488B4528                	mov rax, PARAM(1)	; param b
 11467 00007742 50                      	push rax
 11468 00007743 488B4520                	mov rax, PARAM(0)	; param a
 11469 00007747 50                      	push rax
 11470 00007748 6A02                    	push 2	; arg count
 11471 0000774A 488B0425[50100000]      	mov rax, qword [free_var_40]	; free var __bin-mul-zz
 11472 00007752 803805                  	cmp byte [rax], T_undefined
 11473 00007755 0F8481DE0000            	je L_error_fvar_undefined
 11474 0000775B 803804                  	cmp byte [rax], T_closure
 11475 0000775E 0F85FCDE0000            	jne L_error_non_closure
 11476 00007764 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11477                                  
 11478                                  	; recycling the current frame
 11479 00007767 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11480 0000776A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11481 0000776D B906000000              	mov rcx, 2 + 4
 11482 00007772 488B5D18                	mov rbx, COUNT
 11483 00007776 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11484 0000777B 488D55F8                	lea rdx, [rbp - 8 * 1]
 11485                                  .L_tc_recycle_frame_loop_8f01:
 11486 0000777F 4883F900                	cmp rcx, 0
 11487 00007783 7413                    	je .L_tc_recycle_frame_done_8f01
 11488 00007785 488B32                  	mov rsi, qword [rdx]
 11489 00007788 488933                  	mov qword [rbx], rsi
 11490 0000778B 48FFC9                  	dec rcx
 11491 0000778E 4883EB08                	sub rbx, 8 * 1
 11492 00007792 4883EA08                	sub rdx, 8 * 1
 11493 00007796 EBE7                    	jmp .L_tc_recycle_frame_loop_8f01
 11494                                  .L_tc_recycle_frame_done_8f01:
 11495 00007798 488D6308                	lea rsp, [rbx + 8 * 1]
 11496 0000779C 5D                      	pop rbp	; the proc will restore it!
 11497 0000779D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11498                                  
 11499 000077A0 E9C8010000              	jmp .L_if_end_76e8
 11500                                  
 11501                                  	.L_if_else_76e8:
 11502 000077A5 488B4528                	mov rax, PARAM(1)	; param b
 11503 000077A9 50                      	push rax
 11504 000077AA 6A01                    	push 1	; arg count
 11505 000077AC 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11506 000077B4 803805                  	cmp byte [rax], T_undefined
 11507 000077B7 0F841FDE0000            	je L_error_fvar_undefined
 11508 000077BD 803804                  	cmp byte [rax], T_closure
 11509 000077C0 0F859ADE0000            	jne L_error_non_closure
 11510 000077C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11511 000077C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11512                                  
 11513 000077CC 483D[02000000]          	cmp rax, sob_boolean_false
 11514 000077D2 0F848A000000            	je .L_if_else_76e9
 11515                                  	; preparing a tail-call
 11516 000077D8 488B4528                	mov rax, PARAM(1)	; param b
 11517 000077DC 50                      	push rax
 11518 000077DD 488B4520                	mov rax, PARAM(0)	; param a
 11519 000077E1 50                      	push rax
 11520 000077E2 6A01                    	push 1	; arg count
 11521 000077E4 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 11522 000077EC 803805                  	cmp byte [rax], T_undefined
 11523 000077EF 0F84E7DD0000            	je L_error_fvar_undefined
 11524 000077F5 803804                  	cmp byte [rax], T_closure
 11525 000077F8 0F8562DE0000            	jne L_error_non_closure
 11526 000077FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 11527 00007801 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11528 00007804 50                      	push rax
 11529 00007805 6A02                    	push 2	; arg count
 11530 00007807 488B0425[0C100000]      	mov rax, qword [free_var_36]	; free var __bin-mul-qq
 11531 0000780F 803805                  	cmp byte [rax], T_undefined
 11532 00007812 0F84C4DD0000            	je L_error_fvar_undefined
 11533 00007818 803804                  	cmp byte [rax], T_closure
 11534 0000781B 0F853FDE0000            	jne L_error_non_closure
 11535 00007821 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11536                                  
 11537                                  	; recycling the current frame
 11538 00007824 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11539 00007827 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11540 0000782A B906000000              	mov rcx, 2 + 4
 11541 0000782F 488B5D18                	mov rbx, COUNT
 11542 00007833 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11543 00007838 488D55F8                	lea rdx, [rbp - 8 * 1]
 11544                                  .L_tc_recycle_frame_loop_8f02:
 11545 0000783C 4883F900                	cmp rcx, 0
 11546 00007840 7413                    	je .L_tc_recycle_frame_done_8f02
 11547 00007842 488B32                  	mov rsi, qword [rdx]
 11548 00007845 488933                  	mov qword [rbx], rsi
 11549 00007848 48FFC9                  	dec rcx
 11550 0000784B 4883EB08                	sub rbx, 8 * 1
 11551 0000784F 4883EA08                	sub rdx, 8 * 1
 11552 00007853 EBE7                    	jmp .L_tc_recycle_frame_loop_8f02
 11553                                  .L_tc_recycle_frame_done_8f02:
 11554 00007855 488D6308                	lea rsp, [rbx + 8 * 1]
 11555 00007859 5D                      	pop rbp	; the proc will restore it!
 11556 0000785A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11557                                  
 11558 0000785D E90B010000              	jmp .L_if_end_76e9
 11559                                  
 11560                                  	.L_if_else_76e9:
 11561 00007862 488B4528                	mov rax, PARAM(1)	; param b
 11562 00007866 50                      	push rax
 11563 00007867 6A01                    	push 1	; arg count
 11564 00007869 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 11565 00007871 803805                  	cmp byte [rax], T_undefined
 11566 00007874 0F8462DD0000            	je L_error_fvar_undefined
 11567 0000787A 803804                  	cmp byte [rax], T_closure
 11568 0000787D 0F85DDDD0000            	jne L_error_non_closure
 11569 00007883 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11570 00007886 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11571                                  
 11572 00007889 483D[02000000]          	cmp rax, sob_boolean_false
 11573 0000788F 0F8487000000            	je .L_if_else_76ea
 11574                                  	; preparing a tail-call
 11575 00007895 488B4528                	mov rax, PARAM(1)	; param b
 11576 00007899 50                      	push rax
 11577 0000789A 488B4520                	mov rax, PARAM(0)	; param a
 11578 0000789E 50                      	push rax
 11579 0000789F 6A01                    	push 1	; arg count
 11580 000078A1 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 11581 000078A9 803805                  	cmp byte [rax], T_undefined
 11582 000078AC 0F842ADD0000            	je L_error_fvar_undefined
 11583 000078B2 803804                  	cmp byte [rax], T_closure
 11584 000078B5 0F85A5DD0000            	jne L_error_non_closure
 11585 000078BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 11586 000078BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 11587 000078C1 50                      	push rax
 11588 000078C2 6A02                    	push 2	; arg count
 11589 000078C4 488B0425[C80F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 11590 000078CC 803805                  	cmp byte [rax], T_undefined
 11591 000078CF 0F8407DD0000            	je L_error_fvar_undefined
 11592 000078D5 803804                  	cmp byte [rax], T_closure
 11593 000078D8 0F8582DD0000            	jne L_error_non_closure
 11594 000078DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 11595                                  
 11596                                  	; recycling the current frame
 11597 000078E1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11598 000078E4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11599 000078E7 B906000000              	mov rcx, 2 + 4
 11600 000078EC 488B5D18                	mov rbx, COUNT
 11601 000078F0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11602 000078F5 488D55F8                	lea rdx, [rbp - 8 * 1]
 11603                                  .L_tc_recycle_frame_loop_8f03:
 11604 000078F9 4883F900                	cmp rcx, 0
 11605 000078FD 7413                    	je .L_tc_recycle_frame_done_8f03
 11606 000078FF 488B32                  	mov rsi, qword [rdx]
 11607 00007902 488933                  	mov qword [rbx], rsi
 11608 00007905 48FFC9                  	dec rcx
 11609 00007908 4883EB08                	sub rbx, 8 * 1
 11610 0000790C 4883EA08                	sub rdx, 8 * 1
 11611 00007910 EBE7                    	jmp .L_tc_recycle_frame_loop_8f03
 11612                                  .L_tc_recycle_frame_done_8f03:
 11613 00007912 488D6308                	lea rsp, [rbx + 8 * 1]
 11614 00007916 5D                      	pop rbp	; the proc will restore it!
 11615 00007917 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11616                                  
 11617 0000791A EB51                    	jmp .L_if_end_76ea
 11618                                  
 11619                                  	.L_if_else_76ea:
 11620                                  	; preparing a tail-call
 11621 0000791C 6A00                    	push 0	; arg count
 11622 0000791E 488B4510                	mov rax, ENV
 11623 00007922 488B00                  	mov rax, qword [rax + 8 * 0]
 11624 00007925 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11625 00007928 803804                  	cmp byte [rax], T_closure
 11626 0000792B 0F852FDD0000            	jne L_error_non_closure
 11627 00007931 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11628                                  
 11629                                  	; recycling the current frame
 11630 00007934 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11631 00007937 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11632 0000793A B904000000              	mov rcx, 0 + 4
 11633 0000793F 488B5D18                	mov rbx, COUNT
 11634 00007943 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11635 00007948 488D55F8                	lea rdx, [rbp - 8 * 1]
 11636                                  .L_tc_recycle_frame_loop_8f04:
 11637 0000794C 4883F900                	cmp rcx, 0
 11638 00007950 7413                    	je .L_tc_recycle_frame_done_8f04
 11639 00007952 488B32                  	mov rsi, qword [rdx]
 11640 00007955 488933                  	mov qword [rbx], rsi
 11641 00007958 48FFC9                  	dec rcx
 11642 0000795B 4883EB08                	sub rbx, 8 * 1
 11643 0000795F 4883EA08                	sub rdx, 8 * 1
 11644 00007963 EBE7                    	jmp .L_tc_recycle_frame_loop_8f04
 11645                                  .L_tc_recycle_frame_done_8f04:
 11646 00007965 488D6308                	lea rsp, [rbx + 8 * 1]
 11647 00007969 5D                      	pop rbp	; the proc will restore it!
 11648 0000796A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11649                                  
 11650                                  	.L_if_end_76ea:
 11651                                  
 11652                                  	.L_if_end_76e9:
 11653                                  
 11654                                  	.L_if_end_76e8:
 11655                                  
 11656 0000796D E97A050000              	jmp .L_if_end_76e7
 11657                                  
 11658                                  	.L_if_else_76e7:
 11659 00007972 488B4520                	mov rax, PARAM(0)	; param a
 11660 00007976 50                      	push rax
 11661 00007977 6A01                    	push 1	; arg count
 11662 00007979 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11663 00007981 803805                  	cmp byte [rax], T_undefined
 11664 00007984 0F8452DC0000            	je L_error_fvar_undefined
 11665 0000798A 803804                  	cmp byte [rax], T_closure
 11666 0000798D 0F85CDDC0000            	jne L_error_non_closure
 11667 00007993 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11668 00007996 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11669                                  
 11670 00007999 483D[02000000]          	cmp rax, sob_boolean_false
 11671 0000799F 0F8463020000            	je .L_if_else_76eb
 11672 000079A5 488B4528                	mov rax, PARAM(1)	; param b
 11673 000079A9 50                      	push rax
 11674 000079AA 6A01                    	push 1	; arg count
 11675 000079AC 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11676 000079B4 803805                  	cmp byte [rax], T_undefined
 11677 000079B7 0F841FDC0000            	je L_error_fvar_undefined
 11678 000079BD 803804                  	cmp byte [rax], T_closure
 11679 000079C0 0F859ADC0000            	jne L_error_non_closure
 11680 000079C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11681 000079C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11682                                  
 11683 000079CC 483D[02000000]          	cmp rax, sob_boolean_false
 11684 000079D2 0F848A000000            	je .L_if_else_76ec
 11685                                  	; preparing a tail-call
 11686 000079D8 488B4528                	mov rax, PARAM(1)	; param b
 11687 000079DC 50                      	push rax
 11688 000079DD 6A01                    	push 1	; arg count
 11689 000079DF 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 11690 000079E7 803805                  	cmp byte [rax], T_undefined
 11691 000079EA 0F84ECDB0000            	je L_error_fvar_undefined
 11692 000079F0 803804                  	cmp byte [rax], T_closure
 11693 000079F3 0F8567DC0000            	jne L_error_non_closure
 11694 000079F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11695 000079FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 11696 000079FF 50                      	push rax
 11697 00007A00 488B4520                	mov rax, PARAM(0)	; param a
 11698 00007A04 50                      	push rax
 11699 00007A05 6A02                    	push 2	; arg count
 11700 00007A07 488B0425[0C100000]      	mov rax, qword [free_var_36]	; free var __bin-mul-qq
 11701 00007A0F 803805                  	cmp byte [rax], T_undefined
 11702 00007A12 0F84C4DB0000            	je L_error_fvar_undefined
 11703 00007A18 803804                  	cmp byte [rax], T_closure
 11704 00007A1B 0F853FDC0000            	jne L_error_non_closure
 11705 00007A21 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11706                                  
 11707                                  	; recycling the current frame
 11708 00007A24 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11709 00007A27 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11710 00007A2A B906000000              	mov rcx, 2 + 4
 11711 00007A2F 488B5D18                	mov rbx, COUNT
 11712 00007A33 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11713 00007A38 488D55F8                	lea rdx, [rbp - 8 * 1]
 11714                                  .L_tc_recycle_frame_loop_8f05:
 11715 00007A3C 4883F900                	cmp rcx, 0
 11716 00007A40 7413                    	je .L_tc_recycle_frame_done_8f05
 11717 00007A42 488B32                  	mov rsi, qword [rdx]
 11718 00007A45 488933                  	mov qword [rbx], rsi
 11719 00007A48 48FFC9                  	dec rcx
 11720 00007A4B 4883EB08                	sub rbx, 8 * 1
 11721 00007A4F 4883EA08                	sub rdx, 8 * 1
 11722 00007A53 EBE7                    	jmp .L_tc_recycle_frame_loop_8f05
 11723                                  .L_tc_recycle_frame_done_8f05:
 11724 00007A55 488D6308                	lea rsp, [rbx + 8 * 1]
 11725 00007A59 5D                      	pop rbp	; the proc will restore it!
 11726 00007A5A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11727                                  
 11728 00007A5D E9A1010000              	jmp .L_if_end_76ec
 11729                                  
 11730                                  	.L_if_else_76ec:
 11731 00007A62 488B4528                	mov rax, PARAM(1)	; param b
 11732 00007A66 50                      	push rax
 11733 00007A67 6A01                    	push 1	; arg count
 11734 00007A69 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11735 00007A71 803805                  	cmp byte [rax], T_undefined
 11736 00007A74 0F8462DB0000            	je L_error_fvar_undefined
 11737 00007A7A 803804                  	cmp byte [rax], T_closure
 11738 00007A7D 0F85DDDB0000            	jne L_error_non_closure
 11739 00007A83 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11740 00007A86 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11741                                  
 11742 00007A89 483D[02000000]          	cmp rax, sob_boolean_false
 11743 00007A8F 7467                    	je .L_if_else_76ed
 11744                                  	; preparing a tail-call
 11745 00007A91 488B4528                	mov rax, PARAM(1)	; param b
 11746 00007A95 50                      	push rax
 11747 00007A96 488B4520                	mov rax, PARAM(0)	; param a
 11748 00007A9A 50                      	push rax
 11749 00007A9B 6A02                    	push 2	; arg count
 11750 00007A9D 488B0425[0C100000]      	mov rax, qword [free_var_36]	; free var __bin-mul-qq
 11751 00007AA5 803805                  	cmp byte [rax], T_undefined
 11752 00007AA8 0F842EDB0000            	je L_error_fvar_undefined
 11753 00007AAE 803804                  	cmp byte [rax], T_closure
 11754 00007AB1 0F85A9DB0000            	jne L_error_non_closure
 11755 00007AB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11756                                  
 11757                                  	; recycling the current frame
 11758 00007ABA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11759 00007ABD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11760 00007AC0 B906000000              	mov rcx, 2 + 4
 11761 00007AC5 488B5D18                	mov rbx, COUNT
 11762 00007AC9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11763 00007ACE 488D55F8                	lea rdx, [rbp - 8 * 1]
 11764                                  .L_tc_recycle_frame_loop_8f06:
 11765 00007AD2 4883F900                	cmp rcx, 0
 11766 00007AD6 7413                    	je .L_tc_recycle_frame_done_8f06
 11767 00007AD8 488B32                  	mov rsi, qword [rdx]
 11768 00007ADB 488933                  	mov qword [rbx], rsi
 11769 00007ADE 48FFC9                  	dec rcx
 11770 00007AE1 4883EB08                	sub rbx, 8 * 1
 11771 00007AE5 4883EA08                	sub rdx, 8 * 1
 11772 00007AE9 EBE7                    	jmp .L_tc_recycle_frame_loop_8f06
 11773                                  .L_tc_recycle_frame_done_8f06:
 11774 00007AEB 488D6308                	lea rsp, [rbx + 8 * 1]
 11775 00007AEF 5D                      	pop rbp	; the proc will restore it!
 11776 00007AF0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11777                                  
 11778 00007AF3 E90B010000              	jmp .L_if_end_76ed
 11779                                  
 11780                                  	.L_if_else_76ed:
 11781 00007AF8 488B4528                	mov rax, PARAM(1)	; param b
 11782 00007AFC 50                      	push rax
 11783 00007AFD 6A01                    	push 1	; arg count
 11784 00007AFF 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 11785 00007B07 803805                  	cmp byte [rax], T_undefined
 11786 00007B0A 0F84CCDA0000            	je L_error_fvar_undefined
 11787 00007B10 803804                  	cmp byte [rax], T_closure
 11788 00007B13 0F8547DB0000            	jne L_error_non_closure
 11789 00007B19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11790 00007B1C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11791                                  
 11792 00007B1F 483D[02000000]          	cmp rax, sob_boolean_false
 11793 00007B25 0F8487000000            	je .L_if_else_76ee
 11794                                  	; preparing a tail-call
 11795 00007B2B 488B4528                	mov rax, PARAM(1)	; param b
 11796 00007B2F 50                      	push rax
 11797 00007B30 488B4520                	mov rax, PARAM(0)	; param a
 11798 00007B34 50                      	push rax
 11799 00007B35 6A01                    	push 1	; arg count
 11800 00007B37 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 11801 00007B3F 803805                  	cmp byte [rax], T_undefined
 11802 00007B42 0F8494DA0000            	je L_error_fvar_undefined
 11803 00007B48 803804                  	cmp byte [rax], T_closure
 11804 00007B4B 0F850FDB0000            	jne L_error_non_closure
 11805 00007B51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11806 00007B54 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11807 00007B57 50                      	push rax
 11808 00007B58 6A02                    	push 2	; arg count
 11809 00007B5A 488B0425[C80F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 11810 00007B62 803805                  	cmp byte [rax], T_undefined
 11811 00007B65 0F8471DA0000            	je L_error_fvar_undefined
 11812 00007B6B 803804                  	cmp byte [rax], T_closure
 11813 00007B6E 0F85ECDA0000            	jne L_error_non_closure
 11814 00007B74 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11815                                  
 11816                                  	; recycling the current frame
 11817 00007B77 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11818 00007B7A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11819 00007B7D B906000000              	mov rcx, 2 + 4
 11820 00007B82 488B5D18                	mov rbx, COUNT
 11821 00007B86 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11822 00007B8B 488D55F8                	lea rdx, [rbp - 8 * 1]
 11823                                  .L_tc_recycle_frame_loop_8f07:
 11824 00007B8F 4883F900                	cmp rcx, 0
 11825 00007B93 7413                    	je .L_tc_recycle_frame_done_8f07
 11826 00007B95 488B32                  	mov rsi, qword [rdx]
 11827 00007B98 488933                  	mov qword [rbx], rsi
 11828 00007B9B 48FFC9                  	dec rcx
 11829 00007B9E 4883EB08                	sub rbx, 8 * 1
 11830 00007BA2 4883EA08                	sub rdx, 8 * 1
 11831 00007BA6 EBE7                    	jmp .L_tc_recycle_frame_loop_8f07
 11832                                  .L_tc_recycle_frame_done_8f07:
 11833 00007BA8 488D6308                	lea rsp, [rbx + 8 * 1]
 11834 00007BAC 5D                      	pop rbp	; the proc will restore it!
 11835 00007BAD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11836                                  
 11837 00007BB0 EB51                    	jmp .L_if_end_76ee
 11838                                  
 11839                                  	.L_if_else_76ee:
 11840                                  	; preparing a tail-call
 11841 00007BB2 6A00                    	push 0	; arg count
 11842 00007BB4 488B4510                	mov rax, ENV
 11843 00007BB8 488B00                  	mov rax, qword [rax + 8 * 0]
 11844 00007BBB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11845 00007BBE 803804                  	cmp byte [rax], T_closure
 11846 00007BC1 0F8599DA0000            	jne L_error_non_closure
 11847 00007BC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11848                                  
 11849                                  	; recycling the current frame
 11850 00007BCA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11851 00007BCD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11852 00007BD0 B904000000              	mov rcx, 0 + 4
 11853 00007BD5 488B5D18                	mov rbx, COUNT
 11854 00007BD9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11855 00007BDE 488D55F8                	lea rdx, [rbp - 8 * 1]
 11856                                  .L_tc_recycle_frame_loop_8f08:
 11857 00007BE2 4883F900                	cmp rcx, 0
 11858 00007BE6 7413                    	je .L_tc_recycle_frame_done_8f08
 11859 00007BE8 488B32                  	mov rsi, qword [rdx]
 11860 00007BEB 488933                  	mov qword [rbx], rsi
 11861 00007BEE 48FFC9                  	dec rcx
 11862 00007BF1 4883EB08                	sub rbx, 8 * 1
 11863 00007BF5 4883EA08                	sub rdx, 8 * 1
 11864 00007BF9 EBE7                    	jmp .L_tc_recycle_frame_loop_8f08
 11865                                  .L_tc_recycle_frame_done_8f08:
 11866 00007BFB 488D6308                	lea rsp, [rbx + 8 * 1]
 11867 00007BFF 5D                      	pop rbp	; the proc will restore it!
 11868 00007C00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11869                                  
 11870                                  	.L_if_end_76ee:
 11871                                  
 11872                                  	.L_if_end_76ed:
 11873                                  
 11874                                  	.L_if_end_76ec:
 11875                                  
 11876 00007C03 E9E4020000              	jmp .L_if_end_76eb
 11877                                  
 11878                                  	.L_if_else_76eb:
 11879 00007C08 488B4520                	mov rax, PARAM(0)	; param a
 11880 00007C0C 50                      	push rax
 11881 00007C0D 6A01                    	push 1	; arg count
 11882 00007C0F 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 11883 00007C17 803805                  	cmp byte [rax], T_undefined
 11884 00007C1A 0F84BCD90000            	je L_error_fvar_undefined
 11885 00007C20 803804                  	cmp byte [rax], T_closure
 11886 00007C23 0F8537DA0000            	jne L_error_non_closure
 11887 00007C29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11888 00007C2C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11889                                  
 11890 00007C2F 483D[02000000]          	cmp rax, sob_boolean_false
 11891 00007C35 0F8460020000            	je .L_if_else_76ef
 11892 00007C3B 488B4528                	mov rax, PARAM(1)	; param b
 11893 00007C3F 50                      	push rax
 11894 00007C40 6A01                    	push 1	; arg count
 11895 00007C42 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11896 00007C4A 803805                  	cmp byte [rax], T_undefined
 11897 00007C4D 0F8489D90000            	je L_error_fvar_undefined
 11898 00007C53 803804                  	cmp byte [rax], T_closure
 11899 00007C56 0F8504DA0000            	jne L_error_non_closure
 11900 00007C5C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11901 00007C5F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11902                                  
 11903 00007C62 483D[02000000]          	cmp rax, sob_boolean_false
 11904 00007C68 0F848A000000            	je .L_if_else_76f0
 11905                                  	; preparing a tail-call
 11906 00007C6E 488B4528                	mov rax, PARAM(1)	; param b
 11907 00007C72 50                      	push rax
 11908 00007C73 6A01                    	push 1	; arg count
 11909 00007C75 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 11910 00007C7D 803805                  	cmp byte [rax], T_undefined
 11911 00007C80 0F8456D90000            	je L_error_fvar_undefined
 11912 00007C86 803804                  	cmp byte [rax], T_closure
 11913 00007C89 0F85D1D90000            	jne L_error_non_closure
 11914 00007C8F FF7001                  	push SOB_CLOSURE_ENV(rax)
 11915 00007C92 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11916 00007C95 50                      	push rax
 11917 00007C96 488B4520                	mov rax, PARAM(0)	; param a
 11918 00007C9A 50                      	push rax
 11919 00007C9B 6A02                    	push 2	; arg count
 11920 00007C9D 488B0425[C80F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 11921 00007CA5 803805                  	cmp byte [rax], T_undefined
 11922 00007CA8 0F842ED90000            	je L_error_fvar_undefined
 11923 00007CAE 803804                  	cmp byte [rax], T_closure
 11924 00007CB1 0F85A9D90000            	jne L_error_non_closure
 11925 00007CB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11926                                  
 11927                                  	; recycling the current frame
 11928 00007CBA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11929 00007CBD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11930 00007CC0 B906000000              	mov rcx, 2 + 4
 11931 00007CC5 488B5D18                	mov rbx, COUNT
 11932 00007CC9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11933 00007CCE 488D55F8                	lea rdx, [rbp - 8 * 1]
 11934                                  .L_tc_recycle_frame_loop_8f09:
 11935 00007CD2 4883F900                	cmp rcx, 0
 11936 00007CD6 7413                    	je .L_tc_recycle_frame_done_8f09
 11937 00007CD8 488B32                  	mov rsi, qword [rdx]
 11938 00007CDB 488933                  	mov qword [rbx], rsi
 11939 00007CDE 48FFC9                  	dec rcx
 11940 00007CE1 4883EB08                	sub rbx, 8 * 1
 11941 00007CE5 4883EA08                	sub rdx, 8 * 1
 11942 00007CE9 EBE7                    	jmp .L_tc_recycle_frame_loop_8f09
 11943                                  .L_tc_recycle_frame_done_8f09:
 11944 00007CEB 488D6308                	lea rsp, [rbx + 8 * 1]
 11945 00007CEF 5D                      	pop rbp	; the proc will restore it!
 11946 00007CF0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11947                                  
 11948 00007CF3 E9A1010000              	jmp .L_if_end_76f0
 11949                                  
 11950                                  	.L_if_else_76f0:
 11951 00007CF8 488B4528                	mov rax, PARAM(1)	; param b
 11952 00007CFC 50                      	push rax
 11953 00007CFD 6A01                    	push 1	; arg count
 11954 00007CFF 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11955 00007D07 803805                  	cmp byte [rax], T_undefined
 11956 00007D0A 0F84CCD80000            	je L_error_fvar_undefined
 11957 00007D10 803804                  	cmp byte [rax], T_closure
 11958 00007D13 0F8547D90000            	jne L_error_non_closure
 11959 00007D19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11960 00007D1C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11961                                  
 11962 00007D1F 483D[02000000]          	cmp rax, sob_boolean_false
 11963 00007D25 0F848A000000            	je .L_if_else_76f1
 11964                                  	; preparing a tail-call
 11965 00007D2B 488B4528                	mov rax, PARAM(1)	; param b
 11966 00007D2F 50                      	push rax
 11967 00007D30 6A01                    	push 1	; arg count
 11968 00007D32 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 11969 00007D3A 803805                  	cmp byte [rax], T_undefined
 11970 00007D3D 0F8499D80000            	je L_error_fvar_undefined
 11971 00007D43 803804                  	cmp byte [rax], T_closure
 11972 00007D46 0F8514D90000            	jne L_error_non_closure
 11973 00007D4C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11974 00007D4F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11975 00007D52 50                      	push rax
 11976 00007D53 488B4520                	mov rax, PARAM(0)	; param a
 11977 00007D57 50                      	push rax
 11978 00007D58 6A02                    	push 2	; arg count
 11979 00007D5A 488B0425[C80F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 11980 00007D62 803805                  	cmp byte [rax], T_undefined
 11981 00007D65 0F8471D80000            	je L_error_fvar_undefined
 11982 00007D6B 803804                  	cmp byte [rax], T_closure
 11983 00007D6E 0F85ECD80000            	jne L_error_non_closure
 11984 00007D74 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11985                                  
 11986                                  	; recycling the current frame
 11987 00007D77 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11988 00007D7A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11989 00007D7D B906000000              	mov rcx, 2 + 4
 11990 00007D82 488B5D18                	mov rbx, COUNT
 11991 00007D86 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11992 00007D8B 488D55F8                	lea rdx, [rbp - 8 * 1]
 11993                                  .L_tc_recycle_frame_loop_8f0a:
 11994 00007D8F 4883F900                	cmp rcx, 0
 11995 00007D93 7413                    	je .L_tc_recycle_frame_done_8f0a
 11996 00007D95 488B32                  	mov rsi, qword [rdx]
 11997 00007D98 488933                  	mov qword [rbx], rsi
 11998 00007D9B 48FFC9                  	dec rcx
 11999 00007D9E 4883EB08                	sub rbx, 8 * 1
 12000 00007DA2 4883EA08                	sub rdx, 8 * 1
 12001 00007DA6 EBE7                    	jmp .L_tc_recycle_frame_loop_8f0a
 12002                                  .L_tc_recycle_frame_done_8f0a:
 12003 00007DA8 488D6308                	lea rsp, [rbx + 8 * 1]
 12004 00007DAC 5D                      	pop rbp	; the proc will restore it!
 12005 00007DAD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12006                                  
 12007 00007DB0 E9E4000000              	jmp .L_if_end_76f1
 12008                                  
 12009                                  	.L_if_else_76f1:
 12010 00007DB5 488B4528                	mov rax, PARAM(1)	; param b
 12011 00007DB9 50                      	push rax
 12012 00007DBA 6A01                    	push 1	; arg count
 12013 00007DBC 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 12014 00007DC4 803805                  	cmp byte [rax], T_undefined
 12015 00007DC7 0F840FD80000            	je L_error_fvar_undefined
 12016 00007DCD 803804                  	cmp byte [rax], T_closure
 12017 00007DD0 0F858AD80000            	jne L_error_non_closure
 12018 00007DD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12019 00007DD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12020                                  
 12021 00007DDC 483D[02000000]          	cmp rax, sob_boolean_false
 12022 00007DE2 7464                    	je .L_if_else_76f2
 12023                                  	; preparing a tail-call
 12024 00007DE4 488B4528                	mov rax, PARAM(1)	; param b
 12025 00007DE8 50                      	push rax
 12026 00007DE9 488B4520                	mov rax, PARAM(0)	; param a
 12027 00007DED 50                      	push rax
 12028 00007DEE 6A02                    	push 2	; arg count
 12029 00007DF0 488B0425[C80F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 12030 00007DF8 803805                  	cmp byte [rax], T_undefined
 12031 00007DFB 0F84DBD70000            	je L_error_fvar_undefined
 12032 00007E01 803804                  	cmp byte [rax], T_closure
 12033 00007E04 0F8556D80000            	jne L_error_non_closure
 12034 00007E0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12035                                  
 12036                                  	; recycling the current frame
 12037 00007E0D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12038 00007E10 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12039 00007E13 B906000000              	mov rcx, 2 + 4
 12040 00007E18 488B5D18                	mov rbx, COUNT
 12041 00007E1C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12042 00007E21 488D55F8                	lea rdx, [rbp - 8 * 1]
 12043                                  .L_tc_recycle_frame_loop_8f0b:
 12044 00007E25 4883F900                	cmp rcx, 0
 12045 00007E29 7413                    	je .L_tc_recycle_frame_done_8f0b
 12046 00007E2B 488B32                  	mov rsi, qword [rdx]
 12047 00007E2E 488933                  	mov qword [rbx], rsi
 12048 00007E31 48FFC9                  	dec rcx
 12049 00007E34 4883EB08                	sub rbx, 8 * 1
 12050 00007E38 4883EA08                	sub rdx, 8 * 1
 12051 00007E3C EBE7                    	jmp .L_tc_recycle_frame_loop_8f0b
 12052                                  .L_tc_recycle_frame_done_8f0b:
 12053 00007E3E 488D6308                	lea rsp, [rbx + 8 * 1]
 12054 00007E42 5D                      	pop rbp	; the proc will restore it!
 12055 00007E43 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12056                                  
 12057 00007E46 EB51                    	jmp .L_if_end_76f2
 12058                                  
 12059                                  	.L_if_else_76f2:
 12060                                  	; preparing a tail-call
 12061 00007E48 6A00                    	push 0	; arg count
 12062 00007E4A 488B4510                	mov rax, ENV
 12063 00007E4E 488B00                  	mov rax, qword [rax + 8 * 0]
 12064 00007E51 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12065 00007E54 803804                  	cmp byte [rax], T_closure
 12066 00007E57 0F8503D80000            	jne L_error_non_closure
 12067 00007E5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 12068                                  
 12069                                  	; recycling the current frame
 12070 00007E60 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12071 00007E63 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12072 00007E66 B904000000              	mov rcx, 0 + 4
 12073 00007E6B 488B5D18                	mov rbx, COUNT
 12074 00007E6F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12075 00007E74 488D55F8                	lea rdx, [rbp - 8 * 1]
 12076                                  .L_tc_recycle_frame_loop_8f0c:
 12077 00007E78 4883F900                	cmp rcx, 0
 12078 00007E7C 7413                    	je .L_tc_recycle_frame_done_8f0c
 12079 00007E7E 488B32                  	mov rsi, qword [rdx]
 12080 00007E81 488933                  	mov qword [rbx], rsi
 12081 00007E84 48FFC9                  	dec rcx
 12082 00007E87 4883EB08                	sub rbx, 8 * 1
 12083 00007E8B 4883EA08                	sub rdx, 8 * 1
 12084 00007E8F EBE7                    	jmp .L_tc_recycle_frame_loop_8f0c
 12085                                  .L_tc_recycle_frame_done_8f0c:
 12086 00007E91 488D6308                	lea rsp, [rbx + 8 * 1]
 12087 00007E95 5D                      	pop rbp	; the proc will restore it!
 12088 00007E96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12089                                  
 12090                                  	.L_if_end_76f2:
 12091                                  
 12092                                  	.L_if_end_76f1:
 12093                                  
 12094                                  	.L_if_end_76f0:
 12095                                  
 12096 00007E99 EB51                    	jmp .L_if_end_76ef
 12097                                  
 12098                                  	.L_if_else_76ef:
 12099                                  	; preparing a tail-call
 12100 00007E9B 6A00                    	push 0	; arg count
 12101 00007E9D 488B4510                	mov rax, ENV
 12102 00007EA1 488B00                  	mov rax, qword [rax + 8 * 0]
 12103 00007EA4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12104 00007EA7 803804                  	cmp byte [rax], T_closure
 12105 00007EAA 0F85B0D70000            	jne L_error_non_closure
 12106 00007EB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12107                                  
 12108                                  	; recycling the current frame
 12109 00007EB3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12110 00007EB6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12111 00007EB9 B904000000              	mov rcx, 0 + 4
 12112 00007EBE 488B5D18                	mov rbx, COUNT
 12113 00007EC2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12114 00007EC7 488D55F8                	lea rdx, [rbp - 8 * 1]
 12115                                  .L_tc_recycle_frame_loop_8f0d:
 12116 00007ECB 4883F900                	cmp rcx, 0
 12117 00007ECF 7413                    	je .L_tc_recycle_frame_done_8f0d
 12118 00007ED1 488B32                  	mov rsi, qword [rdx]
 12119 00007ED4 488933                  	mov qword [rbx], rsi
 12120 00007ED7 48FFC9                  	dec rcx
 12121 00007EDA 4883EB08                	sub rbx, 8 * 1
 12122 00007EDE 4883EA08                	sub rdx, 8 * 1
 12123 00007EE2 EBE7                    	jmp .L_tc_recycle_frame_loop_8f0d
 12124                                  .L_tc_recycle_frame_done_8f0d:
 12125 00007EE4 488D6308                	lea rsp, [rbx + 8 * 1]
 12126 00007EE8 5D                      	pop rbp	; the proc will restore it!
 12127 00007EE9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12128                                  
 12129                                  	.L_if_end_76ef:
 12130                                  
 12131                                  	.L_if_end_76eb:
 12132                                  
 12133                                  	.L_if_end_76e7:
 12134 00007EEC C9                      	leave
 12135 00007EED C22000                  	ret AND_KILL_FRAME(2)
 12136                                  .L_lambda_simple_end_6d2a:	; new closure is in rax
 12137 00007EF0 50                      	push rax
 12138 00007EF1 6A01                    	push 1	; arg count
 12139 00007EF3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12140 00007EF8 E80CD80000              	call malloc
 12141 00007EFD 50                      	push rax
 12142 00007EFE BF08000000              	mov rdi, 8 * 1	; new rib
 12143 00007F03 E801D80000              	call malloc
 12144 00007F08 50                      	push rax
 12145 00007F09 BF10000000              	mov rdi, 8 * 2	; extended env
 12146 00007F0E E8F6D70000              	call malloc
 12147 00007F13 488B7D10                	mov rdi, ENV
 12148 00007F17 BE00000000              	mov rsi, 0
 12149 00007F1C BA01000000              	mov rdx, 1
 12150                                  .L_lambda_simple_env_loop_6d2b:	; ext_env[i + 1] <-- env[i]
 12151 00007F21 4883FE01                	cmp rsi, 1
 12152 00007F25 7410                    	je .L_lambda_simple_env_end_6d2b
 12153 00007F27 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12154 00007F2B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12155 00007F2F 48FFC6                  	inc rsi
 12156 00007F32 48FFC2                  	inc rdx
 12157 00007F35 EBEA                    	jmp .L_lambda_simple_env_loop_6d2b
 12158                                  .L_lambda_simple_env_end_6d2b:
 12159 00007F37 5B                      	pop rbx
 12160 00007F38 BE00000000              	mov rsi, 0
 12161                                  .L_lambda_simple_params_loop_6d2b:	; copy params
 12162 00007F3D 4883FE01                	cmp rsi, 1
 12163 00007F41 740E                    	je .L_lambda_simple_params_end_6d2b
 12164 00007F43 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12165 00007F48 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12166 00007F4C 48FFC6                  	inc rsi
 12167 00007F4F EBEC                    	jmp .L_lambda_simple_params_loop_6d2b
 12168                                  .L_lambda_simple_params_end_6d2b:
 12169 00007F51 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12170 00007F54 4889C3                  	mov rbx, rax
 12171 00007F57 58                      	pop rax
 12172 00007F58 C60004                  	mov byte [rax], T_closure
 12173 00007F5B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12174 00007F5F 48C74009[6C7F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d2b
 12175 00007F67 E9E2010000              	jmp .L_lambda_simple_end_6d2b
 12176                                  .L_lambda_simple_code_6d2b:	; lambda-simple body
 12177 00007F6C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12178 00007F72 740B                    	je .L_lambda_simple_arity_check_ok_6d2b
 12179 00007F74 FF742410                	push qword [rsp + 8 * 2]
 12180 00007F78 6A01                    	push 1
 12181 00007F7A E943D70000              	jmp L_error_incorrect_arity_simple
 12182                                  .L_lambda_simple_arity_check_ok_6d2b:
 12183 00007F7F C8000000                	enter 0, 0
 12184 00007F83 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12185 00007F88 E87CD70000              	call malloc
 12186 00007F8D 50                      	push rax
 12187 00007F8E BF08000000              	mov rdi, 8 * 1	; new rib
 12188 00007F93 E871D70000              	call malloc
 12189 00007F98 50                      	push rax
 12190 00007F99 BF18000000              	mov rdi, 8 * 3	; extended env
 12191 00007F9E E866D70000              	call malloc
 12192 00007FA3 488B7D10                	mov rdi, ENV
 12193 00007FA7 BE00000000              	mov rsi, 0
 12194 00007FAC BA01000000              	mov rdx, 1
 12195                                  .L_lambda_opt_env_loop_0f5c:	; ext_env[i + 1] <-- env[i]
 12196 00007FB1 4883FE02                	cmp rsi, 2
 12197 00007FB5 7410                    	je .L_lambda_opt_env_end_0f5c
 12198 00007FB7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12199 00007FBB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12200 00007FBF 48FFC6                  	inc rsi
 12201 00007FC2 48FFC2                  	inc rdx
 12202 00007FC5 EBEA                    	jmp .L_lambda_opt_env_loop_0f5c
 12203                                  .L_lambda_opt_env_end_0f5c:
 12204 00007FC7 5B                      	pop rbx
 12205 00007FC8 BE00000000              	mov rsi, 0
 12206                                  .L_lambda_opt_params_loop_0f5c:	; copy params
 12207 00007FCD 4883FE01                	cmp rsi, 1
 12208 00007FD1 740E                    	je .L_lambda_opt_params_end_0f5c
 12209 00007FD3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12210 00007FD8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12211 00007FDC 48FFC6                  	inc rsi
 12212 00007FDF EBEC                    	jmp .L_lambda_opt_params_loop_0f5c
 12213                                  .L_lambda_opt_params_end_0f5c:
 12214 00007FE1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12215 00007FE4 4889C3                  	mov rbx, rax
 12216 00007FE7 58                      	pop rax
 12217 00007FE8 C60004                  	mov byte [rax], T_closure
 12218 00007FEB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12219 00007FEF 48C74009[FC7F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f5c
 12220 00007FF7 E94E010000              	jmp .L_lambda_opt_end_0f5c
 12221                                  .L_lambda_opt_code_0f5c:	; lambda-simple body
 12222 00007FFC 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 12223 00008002 740D                    	je .L_lambda_opt_arity_check_exact_0f5c ;	 if equal, go to exact arity
 12224 00008004 7F42                    	jg .L_lambda_opt_arity_check_more_0f5c ;	 if greater than, go to arity more
 12225 00008006 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 12226 0000800A 6A00                     	push 0
 12227 0000800C E9C5D60000              	jmp L_error_incorrect_arity_opt
 12228                                  	.L_lambda_opt_arity_check_exact_0f5c:
 12229 00008011 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 12230 00008016 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 12231 0000801B 4883EC08                	sub rsp, 8
 12232 0000801F 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 12233                                  	.L_lambda_opt_exact_shifting_loop_0f5c:
 12234 00008023 488B5108                	mov rdx, [rcx + 8]
 12235 00008027 488911                  	mov [rcx], rdx
 12236 0000802A 4883C108                	add rcx, 8
 12237 0000802E 4839CB                  	cmp rbx, rcx
 12238 00008031 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f5c
 12239                                  	.L_lambda_opt_exact_shifting_loop_end_0f5c:
 12240 00008033 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 12241 0000803A 4883C001                	add rax, 1 ; 	arg count += 1
 12242 0000803E 4889442410              	mov qword [rsp + 8 * 2], rax
 12243 00008043 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f5c
 12244                                  	.L_lambda_opt_arity_check_more_0f5c:
 12245 00008048 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 12245 0000804A [0100000000000000] 
 12246 00008052 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 12247 00008058 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f5c
 12248                                  	.L_lambda_opt_stack_shrink_loop_0f5c:
 12249 0000805A BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 12250 0000805F E8A5D60000              	call malloc ;	 allocated memory for the optional scheme list
 12251 00008064 C60021                  	mov byte[rax], T_pair ;	 set type pair
 12252 00008067 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 12253 0000806B 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 12254 0000806E 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 12255 00008073 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 12256 00008078 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 12257 0000807C 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 12258                                  	.L_lambda_opt_more_shifting_loop_0f5c:
 12259 00008081 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 12260 00008084 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 12261 00008088 4883EB08                	sub rbx, 8 
 12262 0000808C 4839DC                  	cmp rsp, rbx
 12263 0000808F 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f5c
 12264                                  	.L_lambda_opt_more_shifting_loop_end_0f5c:
 12265 00008091 4883C408                	add rsp, 8 ;	 update rsp
 12266 00008095 488B5C2410              	mov rbx, [rsp + 8 * 2]
 12267 0000809A 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 12268 0000809E 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 12269 000080A3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12270 000080A9 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f5c
 12271                                  	.L_lambda_opt_stack_shrink_loop_exit_0f5c:
 12272 000080AB 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 12273 000080B0 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 12274 000080B5 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 12275 000080BA E84AD60000              	call malloc ;	 allocated memory for the optional scheme list
 12276 000080BF C60021                  	mov byte[rax], T_pair ;	 set type pair
 12277 000080C2 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 12278 000080C6 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 12279 000080CA 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 12280                                  	.L_lambda_opt_stack_adjusted_0f5c:
 12281 000080CF C8000000                	enter 0, 0
 12282                                  	; preparing a tail-call
 12283 000080D3 488B4520                	mov rax, PARAM(0)	; param s
 12284 000080D7 50                      	push rax
 12285 000080D8 48B8-                   	mov rax, L_constants + 2158
 12285 000080DA [6E08000000000000] 
 12286 000080E2 50                      	push rax
 12287 000080E3 488B4510                	mov rax, ENV
 12288 000080E7 488B00                  	mov rax, qword [rax + 8 * 0]
 12289 000080EA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
 12290 000080ED 50                      	push rax
 12291 000080EE 6A03                    	push 3	; arg count
 12292 000080F0 488B0425[18150000]      	mov rax, qword [free_var_112]	; free var fold-left
 12293 000080F8 803805                  	cmp byte [rax], T_undefined
 12294 000080FB 0F84DBD40000            	je L_error_fvar_undefined
 12295 00008101 803804                  	cmp byte [rax], T_closure
 12296 00008104 0F8556D50000            	jne L_error_non_closure
 12297 0000810A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12298                                  
 12299                                  	; recycling the current frame
 12300 0000810D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12301 00008110 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12302 00008113 B907000000              	mov rcx, 3 + 4
 12303 00008118 488B5D18                	mov rbx, COUNT
 12304 0000811C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12305 00008121 488D55F8                	lea rdx, [rbp - 8 * 1]
 12306                                  .L_tc_recycle_frame_loop_8f0e:
 12307 00008125 4883F900                	cmp rcx, 0
 12308 00008129 7413                    	je .L_tc_recycle_frame_done_8f0e
 12309 0000812B 488B32                  	mov rsi, qword [rdx]
 12310 0000812E 488933                  	mov qword [rbx], rsi
 12311 00008131 48FFC9                  	dec rcx
 12312 00008134 4883EB08                	sub rbx, 8 * 1
 12313 00008138 4883EA08                	sub rdx, 8 * 1
 12314 0000813C EBE7                    	jmp .L_tc_recycle_frame_loop_8f0e
 12315                                  .L_tc_recycle_frame_done_8f0e:
 12316 0000813E 488D6308                	lea rsp, [rbx + 8 * 1]
 12317 00008142 5D                      	pop rbp	; the proc will restore it!
 12318 00008143 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12319 00008146 C9                      	leave
 12320 00008147 C21800                  	ret AND_KILL_FRAME(1)
 12321                                  .L_lambda_opt_end_0f5c:	; new closure is in rax
 12322 0000814A C9                      	leave
 12323 0000814B C21800                  	ret AND_KILL_FRAME(1)
 12324                                  .L_lambda_simple_end_6d2b:	; new closure is in rax
 12325 0000814E 803804                  	cmp byte [rax], T_closure
 12326 00008151 0F8509D50000            	jne L_error_non_closure
 12327 00008157 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12328                                  
 12329                                  	; recycling the current frame
 12330 0000815A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12331 0000815D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12332 00008160 B905000000              	mov rcx, 1 + 4
 12333 00008165 488B5D18                	mov rbx, COUNT
 12334 00008169 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12335 0000816E 488D55F8                	lea rdx, [rbp - 8 * 1]
 12336                                  .L_tc_recycle_frame_loop_8f0f:
 12337 00008172 4883F900                	cmp rcx, 0
 12338 00008176 7413                    	je .L_tc_recycle_frame_done_8f0f
 12339 00008178 488B32                  	mov rsi, qword [rdx]
 12340 0000817B 488933                  	mov qword [rbx], rsi
 12341 0000817E 48FFC9                  	dec rcx
 12342 00008181 4883EB08                	sub rbx, 8 * 1
 12343 00008185 4883EA08                	sub rdx, 8 * 1
 12344 00008189 EBE7                    	jmp .L_tc_recycle_frame_loop_8f0f
 12345                                  .L_tc_recycle_frame_done_8f0f:
 12346 0000818B 488D6308                	lea rsp, [rbx + 8 * 1]
 12347 0000818F 5D                      	pop rbp	; the proc will restore it!
 12348 00008190 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12349 00008193 C9                      	leave
 12350 00008194 C21800                  	ret AND_KILL_FRAME(1)
 12351                                  .L_lambda_simple_end_6d29:	; new closure is in rax
 12352 00008197 803804                  	cmp byte [rax], T_closure
 12353 0000819A 0F85C0D40000            	jne L_error_non_closure
 12354 000081A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12355 000081A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12356 000081A6 48890425[8F150000]      	mov qword [free_var_119], rax
 12357 000081AE 48B8-                   	mov rax, sob_void
 12357 000081B0 [0000000000000000] 
 12358                                  
 12359 000081B8 4889C7                  	mov rdi, rax
 12360 000081BB E85BD60000              	call print_sexpr_if_not_void
 12361                                  
 12362 000081C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12363 000081C5 E83FD50000              	call malloc
 12364 000081CA 50                      	push rax
 12365 000081CB BF00000000              	mov rdi, 8 * 0	; new rib
 12366 000081D0 E834D50000              	call malloc
 12367 000081D5 50                      	push rax
 12368 000081D6 BF08000000              	mov rdi, 8 * 1	; extended env
 12369 000081DB E829D50000              	call malloc
 12370 000081E0 488B7D10                	mov rdi, ENV
 12371 000081E4 BE00000000              	mov rsi, 0
 12372 000081E9 BA01000000              	mov rdx, 1
 12373                                  .L_lambda_simple_env_loop_6d2c:	; ext_env[i + 1] <-- env[i]
 12374 000081EE 4883FE00                	cmp rsi, 0
 12375 000081F2 7410                    	je .L_lambda_simple_env_end_6d2c
 12376 000081F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12377 000081F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12378 000081FC 48FFC6                  	inc rsi
 12379 000081FF 48FFC2                  	inc rdx
 12380 00008202 EBEA                    	jmp .L_lambda_simple_env_loop_6d2c
 12381                                  .L_lambda_simple_env_end_6d2c:
 12382 00008204 5B                      	pop rbx
 12383 00008205 BE00000000              	mov rsi, 0
 12384                                  .L_lambda_simple_params_loop_6d2c:	; copy params
 12385 0000820A 4883FE00                	cmp rsi, 0
 12386 0000820E 740E                    	je .L_lambda_simple_params_end_6d2c
 12387 00008210 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12388 00008215 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12389 00008219 48FFC6                  	inc rsi
 12390 0000821C EBEC                    	jmp .L_lambda_simple_params_loop_6d2c
 12391                                  .L_lambda_simple_params_end_6d2c:
 12392 0000821E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12393 00008221 4889C3                  	mov rbx, rax
 12394 00008224 58                      	pop rax
 12395 00008225 C60004                  	mov byte [rax], T_closure
 12396 00008228 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12397 0000822C 48C74009[39820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d2c
 12398 00008234 E989000000              	jmp .L_lambda_simple_end_6d2c
 12399                                  .L_lambda_simple_code_6d2c:	; lambda-simple body
 12400 00008239 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12401 0000823F 740B                    	je .L_lambda_simple_arity_check_ok_6d2c
 12402 00008241 FF742410                	push qword [rsp + 8 * 2]
 12403 00008245 6A00                    	push 0
 12404 00008247 E976D40000              	jmp L_error_incorrect_arity_simple
 12405                                  .L_lambda_simple_arity_check_ok_6d2c:
 12406 0000824C C8000000                	enter 0, 0
 12407                                  	; preparing a tail-call
 12408 00008250 48B8-                   	mov rax, L_constants + 2075
 12408 00008252 [1B08000000000000] 
 12409 0000825A 50                      	push rax
 12410 0000825B 48B8-                   	mov rax, L_constants + 2186
 12410 0000825D [8A08000000000000] 
 12411 00008265 50                      	push rax
 12412 00008266 6A02                    	push 2	; arg count
 12413 00008268 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 12414 00008270 803805                  	cmp byte [rax], T_undefined
 12415 00008273 0F8463D30000            	je L_error_fvar_undefined
 12416 00008279 803804                  	cmp byte [rax], T_closure
 12417 0000827C 0F85DED30000            	jne L_error_non_closure
 12418 00008282 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12419                                  
 12420                                  	; recycling the current frame
 12421 00008285 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12422 00008288 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12423 0000828B B906000000              	mov rcx, 2 + 4
 12424 00008290 488B5D18                	mov rbx, COUNT
 12425 00008294 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12426 00008299 488D55F8                	lea rdx, [rbp - 8 * 1]
 12427                                  .L_tc_recycle_frame_loop_8f10:
 12428 0000829D 4883F900                	cmp rcx, 0
 12429 000082A1 7413                    	je .L_tc_recycle_frame_done_8f10
 12430 000082A3 488B32                  	mov rsi, qword [rdx]
 12431 000082A6 488933                  	mov qword [rbx], rsi
 12432 000082A9 48FFC9                  	dec rcx
 12433 000082AC 4883EB08                	sub rbx, 8 * 1
 12434 000082B0 4883EA08                	sub rdx, 8 * 1
 12435 000082B4 EBE7                    	jmp .L_tc_recycle_frame_loop_8f10
 12436                                  .L_tc_recycle_frame_done_8f10:
 12437 000082B6 488D6308                	lea rsp, [rbx + 8 * 1]
 12438 000082BA 5D                      	pop rbp	; the proc will restore it!
 12439 000082BB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12440 000082BE C9                      	leave
 12441 000082BF C21000                  	ret AND_KILL_FRAME(0)
 12442                                  .L_lambda_simple_end_6d2c:	; new closure is in rax
 12443 000082C2 50                      	push rax
 12444 000082C3 6A01                    	push 1	; arg count
 12445 000082C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12446 000082CA E83AD40000              	call malloc
 12447 000082CF 50                      	push rax
 12448 000082D0 BF00000000              	mov rdi, 8 * 0	; new rib
 12449 000082D5 E82FD40000              	call malloc
 12450 000082DA 50                      	push rax
 12451 000082DB BF08000000              	mov rdi, 8 * 1	; extended env
 12452 000082E0 E824D40000              	call malloc
 12453 000082E5 488B7D10                	mov rdi, ENV
 12454 000082E9 BE00000000              	mov rsi, 0
 12455 000082EE BA01000000              	mov rdx, 1
 12456                                  .L_lambda_simple_env_loop_6d2d:	; ext_env[i + 1] <-- env[i]
 12457 000082F3 4883FE00                	cmp rsi, 0
 12458 000082F7 7410                    	je .L_lambda_simple_env_end_6d2d
 12459 000082F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12460 000082FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12461 00008301 48FFC6                  	inc rsi
 12462 00008304 48FFC2                  	inc rdx
 12463 00008307 EBEA                    	jmp .L_lambda_simple_env_loop_6d2d
 12464                                  .L_lambda_simple_env_end_6d2d:
 12465 00008309 5B                      	pop rbx
 12466 0000830A BE00000000              	mov rsi, 0
 12467                                  .L_lambda_simple_params_loop_6d2d:	; copy params
 12468 0000830F 4883FE00                	cmp rsi, 0
 12469 00008313 740E                    	je .L_lambda_simple_params_end_6d2d
 12470 00008315 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12471 0000831A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12472 0000831E 48FFC6                  	inc rsi
 12473 00008321 EBEC                    	jmp .L_lambda_simple_params_loop_6d2d
 12474                                  .L_lambda_simple_params_end_6d2d:
 12475 00008323 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12476 00008326 4889C3                  	mov rbx, rax
 12477 00008329 58                      	pop rax
 12478 0000832A C60004                  	mov byte [rax], T_closure
 12479 0000832D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12480 00008331 48C74009[3E830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d2d
 12481 00008339 E9060D0000              	jmp .L_lambda_simple_end_6d2d
 12482                                  .L_lambda_simple_code_6d2d:	; lambda-simple body
 12483 0000833E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12484 00008344 740B                    	je .L_lambda_simple_arity_check_ok_6d2d
 12485 00008346 FF742410                	push qword [rsp + 8 * 2]
 12486 0000834A 6A01                    	push 1
 12487 0000834C E971D30000              	jmp L_error_incorrect_arity_simple
 12488                                  .L_lambda_simple_arity_check_ok_6d2d:
 12489 00008351 C8000000                	enter 0, 0
 12490                                  	; preparing a tail-call
 12491 00008355 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12492 0000835A E8AAD30000              	call malloc
 12493 0000835F 50                      	push rax
 12494 00008360 BF08000000              	mov rdi, 8 * 1	; new rib
 12495 00008365 E89FD30000              	call malloc
 12496 0000836A 50                      	push rax
 12497 0000836B BF10000000              	mov rdi, 8 * 2	; extended env
 12498 00008370 E894D30000              	call malloc
 12499 00008375 488B7D10                	mov rdi, ENV
 12500 00008379 BE00000000              	mov rsi, 0
 12501 0000837E BA01000000              	mov rdx, 1
 12502                                  .L_lambda_simple_env_loop_6d2e:	; ext_env[i + 1] <-- env[i]
 12503 00008383 4883FE01                	cmp rsi, 1
 12504 00008387 7410                    	je .L_lambda_simple_env_end_6d2e
 12505 00008389 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12506 0000838D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12507 00008391 48FFC6                  	inc rsi
 12508 00008394 48FFC2                  	inc rdx
 12509 00008397 EBEA                    	jmp .L_lambda_simple_env_loop_6d2e
 12510                                  .L_lambda_simple_env_end_6d2e:
 12511 00008399 5B                      	pop rbx
 12512 0000839A BE00000000              	mov rsi, 0
 12513                                  .L_lambda_simple_params_loop_6d2e:	; copy params
 12514 0000839F 4883FE01                	cmp rsi, 1
 12515 000083A3 740E                    	je .L_lambda_simple_params_end_6d2e
 12516 000083A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12517 000083AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12518 000083AE 48FFC6                  	inc rsi
 12519 000083B1 EBEC                    	jmp .L_lambda_simple_params_loop_6d2e
 12520                                  .L_lambda_simple_params_end_6d2e:
 12521 000083B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12522 000083B6 4889C3                  	mov rbx, rax
 12523 000083B9 58                      	pop rax
 12524 000083BA C60004                  	mov byte [rax], T_closure
 12525 000083BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12526 000083C1 48C74009[CE830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d2e
 12527 000083C9 E92B080000              	jmp .L_lambda_simple_end_6d2e
 12528                                  .L_lambda_simple_code_6d2e:	; lambda-simple body
 12529 000083CE 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12530 000083D4 740B                    	je .L_lambda_simple_arity_check_ok_6d2e
 12531 000083D6 FF742410                	push qword [rsp + 8 * 2]
 12532 000083DA 6A02                    	push 2
 12533 000083DC E9E1D20000              	jmp L_error_incorrect_arity_simple
 12534                                  .L_lambda_simple_arity_check_ok_6d2e:
 12535 000083E1 C8000000                	enter 0, 0
 12536 000083E5 488B4520                	mov rax, PARAM(0)	; param a
 12537 000083E9 50                      	push rax
 12538 000083EA 6A01                    	push 1	; arg count
 12539 000083EC 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12540 000083F4 803805                  	cmp byte [rax], T_undefined
 12541 000083F7 0F84DFD10000            	je L_error_fvar_undefined
 12542 000083FD 803804                  	cmp byte [rax], T_closure
 12543 00008400 0F855AD20000            	jne L_error_non_closure
 12544 00008406 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12545 00008409 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12546                                  
 12547 0000840C 483D[02000000]          	cmp rax, sob_boolean_false
 12548 00008412 0F8463020000            	je .L_if_else_76f3
 12549 00008418 488B4528                	mov rax, PARAM(1)	; param b
 12550 0000841C 50                      	push rax
 12551 0000841D 6A01                    	push 1	; arg count
 12552 0000841F 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12553 00008427 803805                  	cmp byte [rax], T_undefined
 12554 0000842A 0F84ACD10000            	je L_error_fvar_undefined
 12555 00008430 803804                  	cmp byte [rax], T_closure
 12556 00008433 0F8527D20000            	jne L_error_non_closure
 12557 00008439 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12558 0000843C FF5009                  	call SOB_CLOSURE_CODE(rax)
 12559                                  
 12560 0000843F 483D[02000000]          	cmp rax, sob_boolean_false
 12561 00008445 7467                    	je .L_if_else_76f4
 12562                                  	; preparing a tail-call
 12563 00008447 488B4528                	mov rax, PARAM(1)	; param b
 12564 0000844B 50                      	push rax
 12565 0000844C 488B4520                	mov rax, PARAM(0)	; param a
 12566 00008450 50                      	push rax
 12567 00008451 6A02                    	push 2	; arg count
 12568 00008453 488B0425[61100000]      	mov rax, qword [free_var_41]	; free var __bin-div-zz
 12569 0000845B 803805                  	cmp byte [rax], T_undefined
 12570 0000845E 0F8478D10000            	je L_error_fvar_undefined
 12571 00008464 803804                  	cmp byte [rax], T_closure
 12572 00008467 0F85F3D10000            	jne L_error_non_closure
 12573 0000846D FF7001                  	push SOB_CLOSURE_ENV(rax)
 12574                                  
 12575                                  	; recycling the current frame
 12576 00008470 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12577 00008473 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12578 00008476 B906000000              	mov rcx, 2 + 4
 12579 0000847B 488B5D18                	mov rbx, COUNT
 12580 0000847F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12581 00008484 488D55F8                	lea rdx, [rbp - 8 * 1]
 12582                                  .L_tc_recycle_frame_loop_8f11:
 12583 00008488 4883F900                	cmp rcx, 0
 12584 0000848C 7413                    	je .L_tc_recycle_frame_done_8f11
 12585 0000848E 488B32                  	mov rsi, qword [rdx]
 12586 00008491 488933                  	mov qword [rbx], rsi
 12587 00008494 48FFC9                  	dec rcx
 12588 00008497 4883EB08                	sub rbx, 8 * 1
 12589 0000849B 4883EA08                	sub rdx, 8 * 1
 12590 0000849F EBE7                    	jmp .L_tc_recycle_frame_loop_8f11
 12591                                  .L_tc_recycle_frame_done_8f11:
 12592 000084A1 488D6308                	lea rsp, [rbx + 8 * 1]
 12593 000084A5 5D                      	pop rbp	; the proc will restore it!
 12594 000084A6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12595                                  
 12596 000084A9 E9C8010000              	jmp .L_if_end_76f4
 12597                                  
 12598                                  	.L_if_else_76f4:
 12599 000084AE 488B4528                	mov rax, PARAM(1)	; param b
 12600 000084B2 50                      	push rax
 12601 000084B3 6A01                    	push 1	; arg count
 12602 000084B5 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 12603 000084BD 803805                  	cmp byte [rax], T_undefined
 12604 000084C0 0F8416D10000            	je L_error_fvar_undefined
 12605 000084C6 803804                  	cmp byte [rax], T_closure
 12606 000084C9 0F8591D10000            	jne L_error_non_closure
 12607 000084CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 12608 000084D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12609                                  
 12610 000084D5 483D[02000000]          	cmp rax, sob_boolean_false
 12611 000084DB 0F848A000000            	je .L_if_else_76f5
 12612                                  	; preparing a tail-call
 12613 000084E1 488B4528                	mov rax, PARAM(1)	; param b
 12614 000084E5 50                      	push rax
 12615 000084E6 488B4520                	mov rax, PARAM(0)	; param a
 12616 000084EA 50                      	push rax
 12617 000084EB 6A01                    	push 1	; arg count
 12618 000084ED 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 12619 000084F5 803805                  	cmp byte [rax], T_undefined
 12620 000084F8 0F84DED00000            	je L_error_fvar_undefined
 12621 000084FE 803804                  	cmp byte [rax], T_closure
 12622 00008501 0F8559D10000            	jne L_error_non_closure
 12623 00008507 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12624 0000850A FF5009                  	call SOB_CLOSURE_CODE(rax)
 12625 0000850D 50                      	push rax
 12626 0000850E 6A02                    	push 2	; arg count
 12627 00008510 488B0425[1D100000]      	mov rax, qword [free_var_37]	; free var __bin-div-qq
 12628 00008518 803805                  	cmp byte [rax], T_undefined
 12629 0000851B 0F84BBD00000            	je L_error_fvar_undefined
 12630 00008521 803804                  	cmp byte [rax], T_closure
 12631 00008524 0F8536D10000            	jne L_error_non_closure
 12632 0000852A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12633                                  
 12634                                  	; recycling the current frame
 12635 0000852D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12636 00008530 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12637 00008533 B906000000              	mov rcx, 2 + 4
 12638 00008538 488B5D18                	mov rbx, COUNT
 12639 0000853C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12640 00008541 488D55F8                	lea rdx, [rbp - 8 * 1]
 12641                                  .L_tc_recycle_frame_loop_8f12:
 12642 00008545 4883F900                	cmp rcx, 0
 12643 00008549 7413                    	je .L_tc_recycle_frame_done_8f12
 12644 0000854B 488B32                  	mov rsi, qword [rdx]
 12645 0000854E 488933                  	mov qword [rbx], rsi
 12646 00008551 48FFC9                  	dec rcx
 12647 00008554 4883EB08                	sub rbx, 8 * 1
 12648 00008558 4883EA08                	sub rdx, 8 * 1
 12649 0000855C EBE7                    	jmp .L_tc_recycle_frame_loop_8f12
 12650                                  .L_tc_recycle_frame_done_8f12:
 12651 0000855E 488D6308                	lea rsp, [rbx + 8 * 1]
 12652 00008562 5D                      	pop rbp	; the proc will restore it!
 12653 00008563 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12654                                  
 12655 00008566 E90B010000              	jmp .L_if_end_76f5
 12656                                  
 12657                                  	.L_if_else_76f5:
 12658 0000856B 488B4528                	mov rax, PARAM(1)	; param b
 12659 0000856F 50                      	push rax
 12660 00008570 6A01                    	push 1	; arg count
 12661 00008572 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 12662 0000857A 803805                  	cmp byte [rax], T_undefined
 12663 0000857D 0F8459D00000            	je L_error_fvar_undefined
 12664 00008583 803804                  	cmp byte [rax], T_closure
 12665 00008586 0F85D4D00000            	jne L_error_non_closure
 12666 0000858C FF7001                  	push SOB_CLOSURE_ENV(rax)
 12667 0000858F FF5009                  	call SOB_CLOSURE_CODE(rax)
 12668                                  
 12669 00008592 483D[02000000]          	cmp rax, sob_boolean_false
 12670 00008598 0F8487000000            	je .L_if_else_76f6
 12671                                  	; preparing a tail-call
 12672 0000859E 488B4528                	mov rax, PARAM(1)	; param b
 12673 000085A2 50                      	push rax
 12674 000085A3 488B4520                	mov rax, PARAM(0)	; param a
 12675 000085A7 50                      	push rax
 12676 000085A8 6A01                    	push 1	; arg count
 12677 000085AA 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 12678 000085B2 803805                  	cmp byte [rax], T_undefined
 12679 000085B5 0F8421D00000            	je L_error_fvar_undefined
 12680 000085BB 803804                  	cmp byte [rax], T_closure
 12681 000085BE 0F859CD00000            	jne L_error_non_closure
 12682 000085C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12683 000085C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12684 000085CA 50                      	push rax
 12685 000085CB 6A02                    	push 2	; arg count
 12686 000085CD 488B0425[D90F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 12687 000085D5 803805                  	cmp byte [rax], T_undefined
 12688 000085D8 0F84FECF0000            	je L_error_fvar_undefined
 12689 000085DE 803804                  	cmp byte [rax], T_closure
 12690 000085E1 0F8579D00000            	jne L_error_non_closure
 12691 000085E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12692                                  
 12693                                  	; recycling the current frame
 12694 000085EA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12695 000085ED FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12696 000085F0 B906000000              	mov rcx, 2 + 4
 12697 000085F5 488B5D18                	mov rbx, COUNT
 12698 000085F9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12699 000085FE 488D55F8                	lea rdx, [rbp - 8 * 1]
 12700                                  .L_tc_recycle_frame_loop_8f13:
 12701 00008602 4883F900                	cmp rcx, 0
 12702 00008606 7413                    	je .L_tc_recycle_frame_done_8f13
 12703 00008608 488B32                  	mov rsi, qword [rdx]
 12704 0000860B 488933                  	mov qword [rbx], rsi
 12705 0000860E 48FFC9                  	dec rcx
 12706 00008611 4883EB08                	sub rbx, 8 * 1
 12707 00008615 4883EA08                	sub rdx, 8 * 1
 12708 00008619 EBE7                    	jmp .L_tc_recycle_frame_loop_8f13
 12709                                  .L_tc_recycle_frame_done_8f13:
 12710 0000861B 488D6308                	lea rsp, [rbx + 8 * 1]
 12711 0000861F 5D                      	pop rbp	; the proc will restore it!
 12712 00008620 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12713                                  
 12714 00008623 EB51                    	jmp .L_if_end_76f6
 12715                                  
 12716                                  	.L_if_else_76f6:
 12717                                  	; preparing a tail-call
 12718 00008625 6A00                    	push 0	; arg count
 12719 00008627 488B4510                	mov rax, ENV
 12720 0000862B 488B00                  	mov rax, qword [rax + 8 * 0]
 12721 0000862E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12722 00008631 803804                  	cmp byte [rax], T_closure
 12723 00008634 0F8526D00000            	jne L_error_non_closure
 12724 0000863A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12725                                  
 12726                                  	; recycling the current frame
 12727 0000863D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12728 00008640 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12729 00008643 B904000000              	mov rcx, 0 + 4
 12730 00008648 488B5D18                	mov rbx, COUNT
 12731 0000864C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12732 00008651 488D55F8                	lea rdx, [rbp - 8 * 1]
 12733                                  .L_tc_recycle_frame_loop_8f14:
 12734 00008655 4883F900                	cmp rcx, 0
 12735 00008659 7413                    	je .L_tc_recycle_frame_done_8f14
 12736 0000865B 488B32                  	mov rsi, qword [rdx]
 12737 0000865E 488933                  	mov qword [rbx], rsi
 12738 00008661 48FFC9                  	dec rcx
 12739 00008664 4883EB08                	sub rbx, 8 * 1
 12740 00008668 4883EA08                	sub rdx, 8 * 1
 12741 0000866C EBE7                    	jmp .L_tc_recycle_frame_loop_8f14
 12742                                  .L_tc_recycle_frame_done_8f14:
 12743 0000866E 488D6308                	lea rsp, [rbx + 8 * 1]
 12744 00008672 5D                      	pop rbp	; the proc will restore it!
 12745 00008673 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12746                                  
 12747                                  	.L_if_end_76f6:
 12748                                  
 12749                                  	.L_if_end_76f5:
 12750                                  
 12751                                  	.L_if_end_76f4:
 12752                                  
 12753 00008676 E97A050000              	jmp .L_if_end_76f3
 12754                                  
 12755                                  	.L_if_else_76f3:
 12756 0000867B 488B4520                	mov rax, PARAM(0)	; param a
 12757 0000867F 50                      	push rax
 12758 00008680 6A01                    	push 1	; arg count
 12759 00008682 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 12760 0000868A 803805                  	cmp byte [rax], T_undefined
 12761 0000868D 0F8449CF0000            	je L_error_fvar_undefined
 12762 00008693 803804                  	cmp byte [rax], T_closure
 12763 00008696 0F85C4CF0000            	jne L_error_non_closure
 12764 0000869C FF7001                  	push SOB_CLOSURE_ENV(rax)
 12765 0000869F FF5009                  	call SOB_CLOSURE_CODE(rax)
 12766                                  
 12767 000086A2 483D[02000000]          	cmp rax, sob_boolean_false
 12768 000086A8 0F8463020000            	je .L_if_else_76f7
 12769 000086AE 488B4528                	mov rax, PARAM(1)	; param b
 12770 000086B2 50                      	push rax
 12771 000086B3 6A01                    	push 1	; arg count
 12772 000086B5 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12773 000086BD 803805                  	cmp byte [rax], T_undefined
 12774 000086C0 0F8416CF0000            	je L_error_fvar_undefined
 12775 000086C6 803804                  	cmp byte [rax], T_closure
 12776 000086C9 0F8591CF0000            	jne L_error_non_closure
 12777 000086CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 12778 000086D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12779                                  
 12780 000086D5 483D[02000000]          	cmp rax, sob_boolean_false
 12781 000086DB 0F848A000000            	je .L_if_else_76f8
 12782                                  	; preparing a tail-call
 12783 000086E1 488B4528                	mov rax, PARAM(1)	; param b
 12784 000086E5 50                      	push rax
 12785 000086E6 6A01                    	push 1	; arg count
 12786 000086E8 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 12787 000086F0 803805                  	cmp byte [rax], T_undefined
 12788 000086F3 0F84E3CE0000            	je L_error_fvar_undefined
 12789 000086F9 803804                  	cmp byte [rax], T_closure
 12790 000086FC 0F855ECF0000            	jne L_error_non_closure
 12791 00008702 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12792 00008705 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12793 00008708 50                      	push rax
 12794 00008709 488B4520                	mov rax, PARAM(0)	; param a
 12795 0000870D 50                      	push rax
 12796 0000870E 6A02                    	push 2	; arg count
 12797 00008710 488B0425[1D100000]      	mov rax, qword [free_var_37]	; free var __bin-div-qq
 12798 00008718 803805                  	cmp byte [rax], T_undefined
 12799 0000871B 0F84BBCE0000            	je L_error_fvar_undefined
 12800 00008721 803804                  	cmp byte [rax], T_closure
 12801 00008724 0F8536CF0000            	jne L_error_non_closure
 12802 0000872A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12803                                  
 12804                                  	; recycling the current frame
 12805 0000872D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12806 00008730 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12807 00008733 B906000000              	mov rcx, 2 + 4
 12808 00008738 488B5D18                	mov rbx, COUNT
 12809 0000873C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12810 00008741 488D55F8                	lea rdx, [rbp - 8 * 1]
 12811                                  .L_tc_recycle_frame_loop_8f15:
 12812 00008745 4883F900                	cmp rcx, 0
 12813 00008749 7413                    	je .L_tc_recycle_frame_done_8f15
 12814 0000874B 488B32                  	mov rsi, qword [rdx]
 12815 0000874E 488933                  	mov qword [rbx], rsi
 12816 00008751 48FFC9                  	dec rcx
 12817 00008754 4883EB08                	sub rbx, 8 * 1
 12818 00008758 4883EA08                	sub rdx, 8 * 1
 12819 0000875C EBE7                    	jmp .L_tc_recycle_frame_loop_8f15
 12820                                  .L_tc_recycle_frame_done_8f15:
 12821 0000875E 488D6308                	lea rsp, [rbx + 8 * 1]
 12822 00008762 5D                      	pop rbp	; the proc will restore it!
 12823 00008763 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12824                                  
 12825 00008766 E9A1010000              	jmp .L_if_end_76f8
 12826                                  
 12827                                  	.L_if_else_76f8:
 12828 0000876B 488B4528                	mov rax, PARAM(1)	; param b
 12829 0000876F 50                      	push rax
 12830 00008770 6A01                    	push 1	; arg count
 12831 00008772 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 12832 0000877A 803805                  	cmp byte [rax], T_undefined
 12833 0000877D 0F8459CE0000            	je L_error_fvar_undefined
 12834 00008783 803804                  	cmp byte [rax], T_closure
 12835 00008786 0F85D4CE0000            	jne L_error_non_closure
 12836 0000878C FF7001                  	push SOB_CLOSURE_ENV(rax)
 12837 0000878F FF5009                  	call SOB_CLOSURE_CODE(rax)
 12838                                  
 12839 00008792 483D[02000000]          	cmp rax, sob_boolean_false
 12840 00008798 7467                    	je .L_if_else_76f9
 12841                                  	; preparing a tail-call
 12842 0000879A 488B4528                	mov rax, PARAM(1)	; param b
 12843 0000879E 50                      	push rax
 12844 0000879F 488B4520                	mov rax, PARAM(0)	; param a
 12845 000087A3 50                      	push rax
 12846 000087A4 6A02                    	push 2	; arg count
 12847 000087A6 488B0425[1D100000]      	mov rax, qword [free_var_37]	; free var __bin-div-qq
 12848 000087AE 803805                  	cmp byte [rax], T_undefined
 12849 000087B1 0F8425CE0000            	je L_error_fvar_undefined
 12850 000087B7 803804                  	cmp byte [rax], T_closure
 12851 000087BA 0F85A0CE0000            	jne L_error_non_closure
 12852 000087C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12853                                  
 12854                                  	; recycling the current frame
 12855 000087C3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12856 000087C6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12857 000087C9 B906000000              	mov rcx, 2 + 4
 12858 000087CE 488B5D18                	mov rbx, COUNT
 12859 000087D2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12860 000087D7 488D55F8                	lea rdx, [rbp - 8 * 1]
 12861                                  .L_tc_recycle_frame_loop_8f16:
 12862 000087DB 4883F900                	cmp rcx, 0
 12863 000087DF 7413                    	je .L_tc_recycle_frame_done_8f16
 12864 000087E1 488B32                  	mov rsi, qword [rdx]
 12865 000087E4 488933                  	mov qword [rbx], rsi
 12866 000087E7 48FFC9                  	dec rcx
 12867 000087EA 4883EB08                	sub rbx, 8 * 1
 12868 000087EE 4883EA08                	sub rdx, 8 * 1
 12869 000087F2 EBE7                    	jmp .L_tc_recycle_frame_loop_8f16
 12870                                  .L_tc_recycle_frame_done_8f16:
 12871 000087F4 488D6308                	lea rsp, [rbx + 8 * 1]
 12872 000087F8 5D                      	pop rbp	; the proc will restore it!
 12873 000087F9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12874                                  
 12875 000087FC E90B010000              	jmp .L_if_end_76f9
 12876                                  
 12877                                  	.L_if_else_76f9:
 12878 00008801 488B4528                	mov rax, PARAM(1)	; param b
 12879 00008805 50                      	push rax
 12880 00008806 6A01                    	push 1	; arg count
 12881 00008808 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 12882 00008810 803805                  	cmp byte [rax], T_undefined
 12883 00008813 0F84C3CD0000            	je L_error_fvar_undefined
 12884 00008819 803804                  	cmp byte [rax], T_closure
 12885 0000881C 0F853ECE0000            	jne L_error_non_closure
 12886 00008822 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12887 00008825 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12888                                  
 12889 00008828 483D[02000000]          	cmp rax, sob_boolean_false
 12890 0000882E 0F8487000000            	je .L_if_else_76fa
 12891                                  	; preparing a tail-call
 12892 00008834 488B4528                	mov rax, PARAM(1)	; param b
 12893 00008838 50                      	push rax
 12894 00008839 488B4520                	mov rax, PARAM(0)	; param a
 12895 0000883D 50                      	push rax
 12896 0000883E 6A01                    	push 1	; arg count
 12897 00008840 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 12898 00008848 803805                  	cmp byte [rax], T_undefined
 12899 0000884B 0F848BCD0000            	je L_error_fvar_undefined
 12900 00008851 803804                  	cmp byte [rax], T_closure
 12901 00008854 0F8506CE0000            	jne L_error_non_closure
 12902 0000885A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12903 0000885D FF5009                  	call SOB_CLOSURE_CODE(rax)
 12904 00008860 50                      	push rax
 12905 00008861 6A02                    	push 2	; arg count
 12906 00008863 488B0425[D90F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 12907 0000886B 803805                  	cmp byte [rax], T_undefined
 12908 0000886E 0F8468CD0000            	je L_error_fvar_undefined
 12909 00008874 803804                  	cmp byte [rax], T_closure
 12910 00008877 0F85E3CD0000            	jne L_error_non_closure
 12911 0000887D FF7001                  	push SOB_CLOSURE_ENV(rax)
 12912                                  
 12913                                  	; recycling the current frame
 12914 00008880 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12915 00008883 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12916 00008886 B906000000              	mov rcx, 2 + 4
 12917 0000888B 488B5D18                	mov rbx, COUNT
 12918 0000888F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12919 00008894 488D55F8                	lea rdx, [rbp - 8 * 1]
 12920                                  .L_tc_recycle_frame_loop_8f17:
 12921 00008898 4883F900                	cmp rcx, 0
 12922 0000889C 7413                    	je .L_tc_recycle_frame_done_8f17
 12923 0000889E 488B32                  	mov rsi, qword [rdx]
 12924 000088A1 488933                  	mov qword [rbx], rsi
 12925 000088A4 48FFC9                  	dec rcx
 12926 000088A7 4883EB08                	sub rbx, 8 * 1
 12927 000088AB 4883EA08                	sub rdx, 8 * 1
 12928 000088AF EBE7                    	jmp .L_tc_recycle_frame_loop_8f17
 12929                                  .L_tc_recycle_frame_done_8f17:
 12930 000088B1 488D6308                	lea rsp, [rbx + 8 * 1]
 12931 000088B5 5D                      	pop rbp	; the proc will restore it!
 12932 000088B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12933                                  
 12934 000088B9 EB51                    	jmp .L_if_end_76fa
 12935                                  
 12936                                  	.L_if_else_76fa:
 12937                                  	; preparing a tail-call
 12938 000088BB 6A00                    	push 0	; arg count
 12939 000088BD 488B4510                	mov rax, ENV
 12940 000088C1 488B00                  	mov rax, qword [rax + 8 * 0]
 12941 000088C4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12942 000088C7 803804                  	cmp byte [rax], T_closure
 12943 000088CA 0F8590CD0000            	jne L_error_non_closure
 12944 000088D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12945                                  
 12946                                  	; recycling the current frame
 12947 000088D3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12948 000088D6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12949 000088D9 B904000000              	mov rcx, 0 + 4
 12950 000088DE 488B5D18                	mov rbx, COUNT
 12951 000088E2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12952 000088E7 488D55F8                	lea rdx, [rbp - 8 * 1]
 12953                                  .L_tc_recycle_frame_loop_8f18:
 12954 000088EB 4883F900                	cmp rcx, 0
 12955 000088EF 7413                    	je .L_tc_recycle_frame_done_8f18
 12956 000088F1 488B32                  	mov rsi, qword [rdx]
 12957 000088F4 488933                  	mov qword [rbx], rsi
 12958 000088F7 48FFC9                  	dec rcx
 12959 000088FA 4883EB08                	sub rbx, 8 * 1
 12960 000088FE 4883EA08                	sub rdx, 8 * 1
 12961 00008902 EBE7                    	jmp .L_tc_recycle_frame_loop_8f18
 12962                                  .L_tc_recycle_frame_done_8f18:
 12963 00008904 488D6308                	lea rsp, [rbx + 8 * 1]
 12964 00008908 5D                      	pop rbp	; the proc will restore it!
 12965 00008909 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12966                                  
 12967                                  	.L_if_end_76fa:
 12968                                  
 12969                                  	.L_if_end_76f9:
 12970                                  
 12971                                  	.L_if_end_76f8:
 12972                                  
 12973 0000890C E9E4020000              	jmp .L_if_end_76f7
 12974                                  
 12975                                  	.L_if_else_76f7:
 12976 00008911 488B4520                	mov rax, PARAM(0)	; param a
 12977 00008915 50                      	push rax
 12978 00008916 6A01                    	push 1	; arg count
 12979 00008918 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 12980 00008920 803805                  	cmp byte [rax], T_undefined
 12981 00008923 0F84B3CC0000            	je L_error_fvar_undefined
 12982 00008929 803804                  	cmp byte [rax], T_closure
 12983 0000892C 0F852ECD0000            	jne L_error_non_closure
 12984 00008932 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12985 00008935 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12986                                  
 12987 00008938 483D[02000000]          	cmp rax, sob_boolean_false
 12988 0000893E 0F8460020000            	je .L_if_else_76fb
 12989 00008944 488B4528                	mov rax, PARAM(1)	; param b
 12990 00008948 50                      	push rax
 12991 00008949 6A01                    	push 1	; arg count
 12992 0000894B 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12993 00008953 803805                  	cmp byte [rax], T_undefined
 12994 00008956 0F8480CC0000            	je L_error_fvar_undefined
 12995 0000895C 803804                  	cmp byte [rax], T_closure
 12996 0000895F 0F85FBCC0000            	jne L_error_non_closure
 12997 00008965 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12998 00008968 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12999                                  
 13000 0000896B 483D[02000000]          	cmp rax, sob_boolean_false
 13001 00008971 0F848A000000            	je .L_if_else_76fc
 13002                                  	; preparing a tail-call
 13003 00008977 488B4528                	mov rax, PARAM(1)	; param b
 13004 0000897B 50                      	push rax
 13005 0000897C 6A01                    	push 1	; arg count
 13006 0000897E 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 13007 00008986 803805                  	cmp byte [rax], T_undefined
 13008 00008989 0F844DCC0000            	je L_error_fvar_undefined
 13009 0000898F 803804                  	cmp byte [rax], T_closure
 13010 00008992 0F85C8CC0000            	jne L_error_non_closure
 13011 00008998 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13012 0000899B FF5009                  	call SOB_CLOSURE_CODE(rax)
 13013 0000899E 50                      	push rax
 13014 0000899F 488B4520                	mov rax, PARAM(0)	; param a
 13015 000089A3 50                      	push rax
 13016 000089A4 6A02                    	push 2	; arg count
 13017 000089A6 488B0425[D90F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13018 000089AE 803805                  	cmp byte [rax], T_undefined
 13019 000089B1 0F8425CC0000            	je L_error_fvar_undefined
 13020 000089B7 803804                  	cmp byte [rax], T_closure
 13021 000089BA 0F85A0CC0000            	jne L_error_non_closure
 13022 000089C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13023                                  
 13024                                  	; recycling the current frame
 13025 000089C3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13026 000089C6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13027 000089C9 B906000000              	mov rcx, 2 + 4
 13028 000089CE 488B5D18                	mov rbx, COUNT
 13029 000089D2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13030 000089D7 488D55F8                	lea rdx, [rbp - 8 * 1]
 13031                                  .L_tc_recycle_frame_loop_8f19:
 13032 000089DB 4883F900                	cmp rcx, 0
 13033 000089DF 7413                    	je .L_tc_recycle_frame_done_8f19
 13034 000089E1 488B32                  	mov rsi, qword [rdx]
 13035 000089E4 488933                  	mov qword [rbx], rsi
 13036 000089E7 48FFC9                  	dec rcx
 13037 000089EA 4883EB08                	sub rbx, 8 * 1
 13038 000089EE 4883EA08                	sub rdx, 8 * 1
 13039 000089F2 EBE7                    	jmp .L_tc_recycle_frame_loop_8f19
 13040                                  .L_tc_recycle_frame_done_8f19:
 13041 000089F4 488D6308                	lea rsp, [rbx + 8 * 1]
 13042 000089F8 5D                      	pop rbp	; the proc will restore it!
 13043 000089F9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13044                                  
 13045 000089FC E9A1010000              	jmp .L_if_end_76fc
 13046                                  
 13047                                  	.L_if_else_76fc:
 13048 00008A01 488B4528                	mov rax, PARAM(1)	; param b
 13049 00008A05 50                      	push rax
 13050 00008A06 6A01                    	push 1	; arg count
 13051 00008A08 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 13052 00008A10 803805                  	cmp byte [rax], T_undefined
 13053 00008A13 0F84C3CB0000            	je L_error_fvar_undefined
 13054 00008A19 803804                  	cmp byte [rax], T_closure
 13055 00008A1C 0F853ECC0000            	jne L_error_non_closure
 13056 00008A22 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13057 00008A25 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13058                                  
 13059 00008A28 483D[02000000]          	cmp rax, sob_boolean_false
 13060 00008A2E 0F848A000000            	je .L_if_else_76fd
 13061                                  	; preparing a tail-call
 13062 00008A34 488B4528                	mov rax, PARAM(1)	; param b
 13063 00008A38 50                      	push rax
 13064 00008A39 6A01                    	push 1	; arg count
 13065 00008A3B 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 13066 00008A43 803805                  	cmp byte [rax], T_undefined
 13067 00008A46 0F8490CB0000            	je L_error_fvar_undefined
 13068 00008A4C 803804                  	cmp byte [rax], T_closure
 13069 00008A4F 0F850BCC0000            	jne L_error_non_closure
 13070 00008A55 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13071 00008A58 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13072 00008A5B 50                      	push rax
 13073 00008A5C 488B4520                	mov rax, PARAM(0)	; param a
 13074 00008A60 50                      	push rax
 13075 00008A61 6A02                    	push 2	; arg count
 13076 00008A63 488B0425[D90F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13077 00008A6B 803805                  	cmp byte [rax], T_undefined
 13078 00008A6E 0F8468CB0000            	je L_error_fvar_undefined
 13079 00008A74 803804                  	cmp byte [rax], T_closure
 13080 00008A77 0F85E3CB0000            	jne L_error_non_closure
 13081 00008A7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 13082                                  
 13083                                  	; recycling the current frame
 13084 00008A80 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13085 00008A83 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13086 00008A86 B906000000              	mov rcx, 2 + 4
 13087 00008A8B 488B5D18                	mov rbx, COUNT
 13088 00008A8F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13089 00008A94 488D55F8                	lea rdx, [rbp - 8 * 1]
 13090                                  .L_tc_recycle_frame_loop_8f1a:
 13091 00008A98 4883F900                	cmp rcx, 0
 13092 00008A9C 7413                    	je .L_tc_recycle_frame_done_8f1a
 13093 00008A9E 488B32                  	mov rsi, qword [rdx]
 13094 00008AA1 488933                  	mov qword [rbx], rsi
 13095 00008AA4 48FFC9                  	dec rcx
 13096 00008AA7 4883EB08                	sub rbx, 8 * 1
 13097 00008AAB 4883EA08                	sub rdx, 8 * 1
 13098 00008AAF EBE7                    	jmp .L_tc_recycle_frame_loop_8f1a
 13099                                  .L_tc_recycle_frame_done_8f1a:
 13100 00008AB1 488D6308                	lea rsp, [rbx + 8 * 1]
 13101 00008AB5 5D                      	pop rbp	; the proc will restore it!
 13102 00008AB6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13103                                  
 13104 00008AB9 E9E4000000              	jmp .L_if_end_76fd
 13105                                  
 13106                                  	.L_if_else_76fd:
 13107 00008ABE 488B4528                	mov rax, PARAM(1)	; param b
 13108 00008AC2 50                      	push rax
 13109 00008AC3 6A01                    	push 1	; arg count
 13110 00008AC5 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 13111 00008ACD 803805                  	cmp byte [rax], T_undefined
 13112 00008AD0 0F8406CB0000            	je L_error_fvar_undefined
 13113 00008AD6 803804                  	cmp byte [rax], T_closure
 13114 00008AD9 0F8581CB0000            	jne L_error_non_closure
 13115 00008ADF FF7001                  	push SOB_CLOSURE_ENV(rax)
 13116 00008AE2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13117                                  
 13118 00008AE5 483D[02000000]          	cmp rax, sob_boolean_false
 13119 00008AEB 7464                    	je .L_if_else_76fe
 13120                                  	; preparing a tail-call
 13121 00008AED 488B4528                	mov rax, PARAM(1)	; param b
 13122 00008AF1 50                      	push rax
 13123 00008AF2 488B4520                	mov rax, PARAM(0)	; param a
 13124 00008AF6 50                      	push rax
 13125 00008AF7 6A02                    	push 2	; arg count
 13126 00008AF9 488B0425[D90F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13127 00008B01 803805                  	cmp byte [rax], T_undefined
 13128 00008B04 0F84D2CA0000            	je L_error_fvar_undefined
 13129 00008B0A 803804                  	cmp byte [rax], T_closure
 13130 00008B0D 0F854DCB0000            	jne L_error_non_closure
 13131 00008B13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13132                                  
 13133                                  	; recycling the current frame
 13134 00008B16 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13135 00008B19 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13136 00008B1C B906000000              	mov rcx, 2 + 4
 13137 00008B21 488B5D18                	mov rbx, COUNT
 13138 00008B25 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13139 00008B2A 488D55F8                	lea rdx, [rbp - 8 * 1]
 13140                                  .L_tc_recycle_frame_loop_8f1b:
 13141 00008B2E 4883F900                	cmp rcx, 0
 13142 00008B32 7413                    	je .L_tc_recycle_frame_done_8f1b
 13143 00008B34 488B32                  	mov rsi, qword [rdx]
 13144 00008B37 488933                  	mov qword [rbx], rsi
 13145 00008B3A 48FFC9                  	dec rcx
 13146 00008B3D 4883EB08                	sub rbx, 8 * 1
 13147 00008B41 4883EA08                	sub rdx, 8 * 1
 13148 00008B45 EBE7                    	jmp .L_tc_recycle_frame_loop_8f1b
 13149                                  .L_tc_recycle_frame_done_8f1b:
 13150 00008B47 488D6308                	lea rsp, [rbx + 8 * 1]
 13151 00008B4B 5D                      	pop rbp	; the proc will restore it!
 13152 00008B4C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13153                                  
 13154 00008B4F EB51                    	jmp .L_if_end_76fe
 13155                                  
 13156                                  	.L_if_else_76fe:
 13157                                  	; preparing a tail-call
 13158 00008B51 6A00                    	push 0	; arg count
 13159 00008B53 488B4510                	mov rax, ENV
 13160 00008B57 488B00                  	mov rax, qword [rax + 8 * 0]
 13161 00008B5A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13162 00008B5D 803804                  	cmp byte [rax], T_closure
 13163 00008B60 0F85FACA0000            	jne L_error_non_closure
 13164 00008B66 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13165                                  
 13166                                  	; recycling the current frame
 13167 00008B69 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13168 00008B6C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13169 00008B6F B904000000              	mov rcx, 0 + 4
 13170 00008B74 488B5D18                	mov rbx, COUNT
 13171 00008B78 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13172 00008B7D 488D55F8                	lea rdx, [rbp - 8 * 1]
 13173                                  .L_tc_recycle_frame_loop_8f1c:
 13174 00008B81 4883F900                	cmp rcx, 0
 13175 00008B85 7413                    	je .L_tc_recycle_frame_done_8f1c
 13176 00008B87 488B32                  	mov rsi, qword [rdx]
 13177 00008B8A 488933                  	mov qword [rbx], rsi
 13178 00008B8D 48FFC9                  	dec rcx
 13179 00008B90 4883EB08                	sub rbx, 8 * 1
 13180 00008B94 4883EA08                	sub rdx, 8 * 1
 13181 00008B98 EBE7                    	jmp .L_tc_recycle_frame_loop_8f1c
 13182                                  .L_tc_recycle_frame_done_8f1c:
 13183 00008B9A 488D6308                	lea rsp, [rbx + 8 * 1]
 13184 00008B9E 5D                      	pop rbp	; the proc will restore it!
 13185 00008B9F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13186                                  
 13187                                  	.L_if_end_76fe:
 13188                                  
 13189                                  	.L_if_end_76fd:
 13190                                  
 13191                                  	.L_if_end_76fc:
 13192                                  
 13193 00008BA2 EB51                    	jmp .L_if_end_76fb
 13194                                  
 13195                                  	.L_if_else_76fb:
 13196                                  	; preparing a tail-call
 13197 00008BA4 6A00                    	push 0	; arg count
 13198 00008BA6 488B4510                	mov rax, ENV
 13199 00008BAA 488B00                  	mov rax, qword [rax + 8 * 0]
 13200 00008BAD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13201 00008BB0 803804                  	cmp byte [rax], T_closure
 13202 00008BB3 0F85A7CA0000            	jne L_error_non_closure
 13203 00008BB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13204                                  
 13205                                  	; recycling the current frame
 13206 00008BBC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13207 00008BBF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13208 00008BC2 B904000000              	mov rcx, 0 + 4
 13209 00008BC7 488B5D18                	mov rbx, COUNT
 13210 00008BCB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13211 00008BD0 488D55F8                	lea rdx, [rbp - 8 * 1]
 13212                                  .L_tc_recycle_frame_loop_8f1d:
 13213 00008BD4 4883F900                	cmp rcx, 0
 13214 00008BD8 7413                    	je .L_tc_recycle_frame_done_8f1d
 13215 00008BDA 488B32                  	mov rsi, qword [rdx]
 13216 00008BDD 488933                  	mov qword [rbx], rsi
 13217 00008BE0 48FFC9                  	dec rcx
 13218 00008BE3 4883EB08                	sub rbx, 8 * 1
 13219 00008BE7 4883EA08                	sub rdx, 8 * 1
 13220 00008BEB EBE7                    	jmp .L_tc_recycle_frame_loop_8f1d
 13221                                  .L_tc_recycle_frame_done_8f1d:
 13222 00008BED 488D6308                	lea rsp, [rbx + 8 * 1]
 13223 00008BF1 5D                      	pop rbp	; the proc will restore it!
 13224 00008BF2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13225                                  
 13226                                  	.L_if_end_76fb:
 13227                                  
 13228                                  	.L_if_end_76f7:
 13229                                  
 13230                                  	.L_if_end_76f3:
 13231 00008BF5 C9                      	leave
 13232 00008BF6 C22000                  	ret AND_KILL_FRAME(2)
 13233                                  .L_lambda_simple_end_6d2e:	; new closure is in rax
 13234 00008BF9 50                      	push rax
 13235 00008BFA 6A01                    	push 1	; arg count
 13236 00008BFC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13237 00008C01 E803CB0000              	call malloc
 13238 00008C06 50                      	push rax
 13239 00008C07 BF08000000              	mov rdi, 8 * 1	; new rib
 13240 00008C0C E8F8CA0000              	call malloc
 13241 00008C11 50                      	push rax
 13242 00008C12 BF10000000              	mov rdi, 8 * 2	; extended env
 13243 00008C17 E8EDCA0000              	call malloc
 13244 00008C1C 488B7D10                	mov rdi, ENV
 13245 00008C20 BE00000000              	mov rsi, 0
 13246 00008C25 BA01000000              	mov rdx, 1
 13247                                  .L_lambda_simple_env_loop_6d2f:	; ext_env[i + 1] <-- env[i]
 13248 00008C2A 4883FE01                	cmp rsi, 1
 13249 00008C2E 7410                    	je .L_lambda_simple_env_end_6d2f
 13250 00008C30 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13251 00008C34 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13252 00008C38 48FFC6                  	inc rsi
 13253 00008C3B 48FFC2                  	inc rdx
 13254 00008C3E EBEA                    	jmp .L_lambda_simple_env_loop_6d2f
 13255                                  .L_lambda_simple_env_end_6d2f:
 13256 00008C40 5B                      	pop rbx
 13257 00008C41 BE00000000              	mov rsi, 0
 13258                                  .L_lambda_simple_params_loop_6d2f:	; copy params
 13259 00008C46 4883FE01                	cmp rsi, 1
 13260 00008C4A 740E                    	je .L_lambda_simple_params_end_6d2f
 13261 00008C4C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13262 00008C51 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13263 00008C55 48FFC6                  	inc rsi
 13264 00008C58 EBEC                    	jmp .L_lambda_simple_params_loop_6d2f
 13265                                  .L_lambda_simple_params_end_6d2f:
 13266 00008C5A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13267 00008C5D 4889C3                  	mov rbx, rax
 13268 00008C60 58                      	pop rax
 13269 00008C61 C60004                  	mov byte [rax], T_closure
 13270 00008C64 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13271 00008C68 48C74009[758C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d2f
 13272 00008C70 E986030000              	jmp .L_lambda_simple_end_6d2f
 13273                                  .L_lambda_simple_code_6d2f:	; lambda-simple body
 13274 00008C75 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13275 00008C7B 740B                    	je .L_lambda_simple_arity_check_ok_6d2f
 13276 00008C7D FF742410                	push qword [rsp + 8 * 2]
 13277 00008C81 6A01                    	push 1
 13278 00008C83 E93ACA0000              	jmp L_error_incorrect_arity_simple
 13279                                  .L_lambda_simple_arity_check_ok_6d2f:
 13280 00008C88 C8000000                	enter 0, 0
 13281 00008C8C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13282 00008C91 E873CA0000              	call malloc
 13283 00008C96 50                      	push rax
 13284 00008C97 BF08000000              	mov rdi, 8 * 1	; new rib
 13285 00008C9C E868CA0000              	call malloc
 13286 00008CA1 50                      	push rax
 13287 00008CA2 BF18000000              	mov rdi, 8 * 3	; extended env
 13288 00008CA7 E85DCA0000              	call malloc
 13289 00008CAC 488B7D10                	mov rdi, ENV
 13290 00008CB0 BE00000000              	mov rsi, 0
 13291 00008CB5 BA01000000              	mov rdx, 1
 13292                                  .L_lambda_opt_env_loop_0f5d:	; ext_env[i + 1] <-- env[i]
 13293 00008CBA 4883FE02                	cmp rsi, 2
 13294 00008CBE 7410                    	je .L_lambda_opt_env_end_0f5d
 13295 00008CC0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13296 00008CC4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13297 00008CC8 48FFC6                  	inc rsi
 13298 00008CCB 48FFC2                  	inc rdx
 13299 00008CCE EBEA                    	jmp .L_lambda_opt_env_loop_0f5d
 13300                                  .L_lambda_opt_env_end_0f5d:
 13301 00008CD0 5B                      	pop rbx
 13302 00008CD1 BE00000000              	mov rsi, 0
 13303                                  .L_lambda_opt_params_loop_0f5d:	; copy params
 13304 00008CD6 4883FE01                	cmp rsi, 1
 13305 00008CDA 740E                    	je .L_lambda_opt_params_end_0f5d
 13306 00008CDC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13307 00008CE1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13308 00008CE5 48FFC6                  	inc rsi
 13309 00008CE8 EBEC                    	jmp .L_lambda_opt_params_loop_0f5d
 13310                                  .L_lambda_opt_params_end_0f5d:
 13311 00008CEA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13312 00008CED 4889C3                  	mov rbx, rax
 13313 00008CF0 58                      	pop rax
 13314 00008CF1 C60004                  	mov byte [rax], T_closure
 13315 00008CF4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13316 00008CF8 48C74009[058D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f5d
 13317 00008D00 E9F2020000              	jmp .L_lambda_opt_end_0f5d
 13318                                  .L_lambda_opt_code_0f5d:	; lambda-simple body
 13319 00008D05 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 13320 00008D0B 740D                    	je .L_lambda_opt_arity_check_exact_0f5d ;	 if equal, go to exact arity
 13321 00008D0D 7F42                    	jg .L_lambda_opt_arity_check_more_0f5d ;	 if greater than, go to arity more
 13322 00008D0F FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 13323 00008D13 6A01                     	push 1
 13324 00008D15 E9BCC90000              	jmp L_error_incorrect_arity_opt
 13325                                  	.L_lambda_opt_arity_check_exact_0f5d:
 13326 00008D1A 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 13327 00008D1F 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 13328 00008D24 4883EC08                	sub rsp, 8
 13329 00008D28 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 13330                                  	.L_lambda_opt_exact_shifting_loop_0f5d:
 13331 00008D2C 488B5108                	mov rdx, [rcx + 8]
 13332 00008D30 488911                  	mov [rcx], rdx
 13333 00008D33 4883C108                	add rcx, 8
 13334 00008D37 4839CB                  	cmp rbx, rcx
 13335 00008D3A 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f5d
 13336                                  	.L_lambda_opt_exact_shifting_loop_end_0f5d:
 13337 00008D3C 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 13338 00008D43 4883C001                	add rax, 1 ; 	arg count += 1
 13339 00008D47 4889442410              	mov qword [rsp + 8 * 2], rax
 13340 00008D4C E987000000              	jmp .L_lambda_opt_stack_adjusted_0f5d
 13341                                  	.L_lambda_opt_arity_check_more_0f5d:
 13342 00008D51 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 13342 00008D53 [0100000000000000] 
 13343 00008D5B 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 13344 00008D61 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f5d
 13345                                  	.L_lambda_opt_stack_shrink_loop_0f5d:
 13346 00008D63 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 13347 00008D68 E89CC90000              	call malloc ;	 allocated memory for the optional scheme list
 13348 00008D6D C60021                  	mov byte[rax], T_pair ;	 set type pair
 13349 00008D70 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 13350 00008D74 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 13351 00008D77 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 13352 00008D7C 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 13353 00008D81 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 13354 00008D85 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 13355                                  	.L_lambda_opt_more_shifting_loop_0f5d:
 13356 00008D8A 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 13357 00008D8D 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 13358 00008D91 4883EB08                	sub rbx, 8 
 13359 00008D95 4839DC                  	cmp rsp, rbx
 13360 00008D98 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f5d
 13361                                  	.L_lambda_opt_more_shifting_loop_end_0f5d:
 13362 00008D9A 4883C408                	add rsp, 8 ;	 update rsp
 13363 00008D9E 488B5C2410              	mov rbx, [rsp + 8 * 2]
 13364 00008DA3 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 13365 00008DA7 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 13366 00008DAC 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13367 00008DB2 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f5d
 13368                                  	.L_lambda_opt_stack_shrink_loop_exit_0f5d:
 13369 00008DB4 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 13370 00008DB9 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 13371 00008DBE BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 13372 00008DC3 E841C90000              	call malloc ;	 allocated memory for the optional scheme list
 13373 00008DC8 C60021                  	mov byte[rax], T_pair ;	 set type pair
 13374 00008DCB 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 13375 00008DCF 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 13376 00008DD3 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 13377                                  	.L_lambda_opt_stack_adjusted_0f5d:
 13378 00008DD8 C8000000                	enter 0, 0
 13379 00008DDC 488B4528                	mov rax, PARAM(1)	; param s
 13380 00008DE0 50                      	push rax
 13381 00008DE1 6A01                    	push 1	; arg count
 13382 00008DE3 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 13383 00008DEB 803805                  	cmp byte [rax], T_undefined
 13384 00008DEE 0F84E8C70000            	je L_error_fvar_undefined
 13385 00008DF4 803804                  	cmp byte [rax], T_closure
 13386 00008DF7 0F8563C80000            	jne L_error_non_closure
 13387 00008DFD FF7001                  	push SOB_CLOSURE_ENV(rax)
 13388 00008E00 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13389                                  
 13390 00008E03 483D[02000000]          	cmp rax, sob_boolean_false
 13391 00008E09 7466                    	je .L_if_else_76ff
 13392                                  	; preparing a tail-call
 13393 00008E0B 488B4520                	mov rax, PARAM(0)	; param a
 13394 00008E0F 50                      	push rax
 13395 00008E10 48B8-                   	mov rax, L_constants + 2158
 13395 00008E12 [6E08000000000000] 
 13396 00008E1A 50                      	push rax
 13397 00008E1B 6A02                    	push 2	; arg count
 13398 00008E1D 488B4510                	mov rax, ENV
 13399 00008E21 488B00                  	mov rax, qword [rax + 8 * 0]
 13400 00008E24 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 13401 00008E27 803804                  	cmp byte [rax], T_closure
 13402 00008E2A 0F8530C80000            	jne L_error_non_closure
 13403 00008E30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13404                                  
 13405                                  	; recycling the current frame
 13406 00008E33 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13407 00008E36 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13408 00008E39 B906000000              	mov rcx, 2 + 4
 13409 00008E3E 488B5D18                	mov rbx, COUNT
 13410 00008E42 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13411 00008E47 488D55F8                	lea rdx, [rbp - 8 * 1]
 13412                                  .L_tc_recycle_frame_loop_8f1e:
 13413 00008E4B 4883F900                	cmp rcx, 0
 13414 00008E4F 7413                    	je .L_tc_recycle_frame_done_8f1e
 13415 00008E51 488B32                  	mov rsi, qword [rdx]
 13416 00008E54 488933                  	mov qword [rbx], rsi
 13417 00008E57 48FFC9                  	dec rcx
 13418 00008E5A 4883EB08                	sub rbx, 8 * 1
 13419 00008E5E 4883EA08                	sub rdx, 8 * 1
 13420 00008E62 EBE7                    	jmp .L_tc_recycle_frame_loop_8f1e
 13421                                  .L_tc_recycle_frame_done_8f1e:
 13422 00008E64 488D6308                	lea rsp, [rbx + 8 * 1]
 13423 00008E68 5D                      	pop rbp	; the proc will restore it!
 13424 00008E69 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13425                                  
 13426 00008E6C E982010000              	jmp .L_if_end_76ff
 13427                                  
 13428                                  	.L_if_else_76ff:
 13429                                  	; preparing a tail-call
 13430 00008E71 488B4528                	mov rax, PARAM(1)	; param s
 13431 00008E75 50                      	push rax
 13432 00008E76 48B8-                   	mov rax, L_constants + 2158
 13432 00008E78 [6E08000000000000] 
 13433 00008E80 50                      	push rax
 13434 00008E81 488B0425[8F150000]      	mov rax, qword [free_var_119]	; free var *
 13435 00008E89 803805                  	cmp byte [rax], T_undefined
 13436 00008E8C 0F844AC70000            	je L_error_fvar_undefined
 13437 00008E92 50                      	push rax
 13438 00008E93 6A03                    	push 3	; arg count
 13439 00008E95 488B0425[18150000]      	mov rax, qword [free_var_112]	; free var fold-left
 13440 00008E9D 803805                  	cmp byte [rax], T_undefined
 13441 00008EA0 0F8436C70000            	je L_error_fvar_undefined
 13442 00008EA6 803804                  	cmp byte [rax], T_closure
 13443 00008EA9 0F85B1C70000            	jne L_error_non_closure
 13444 00008EAF FF7001                  	push SOB_CLOSURE_ENV(rax)
 13445 00008EB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13446 00008EB5 50                      	push rax
 13447 00008EB6 6A01                    	push 1	; arg count
 13448 00008EB8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13449 00008EBD E847C80000              	call malloc
 13450 00008EC2 50                      	push rax
 13451 00008EC3 BF10000000              	mov rdi, 8 * 2	; new rib
 13452 00008EC8 E83CC80000              	call malloc
 13453 00008ECD 50                      	push rax
 13454 00008ECE BF20000000              	mov rdi, 8 * 4	; extended env
 13455 00008ED3 E831C80000              	call malloc
 13456 00008ED8 488B7D10                	mov rdi, ENV
 13457 00008EDC BE00000000              	mov rsi, 0
 13458 00008EE1 BA01000000              	mov rdx, 1
 13459                                  .L_lambda_simple_env_loop_6d30:	; ext_env[i + 1] <-- env[i]
 13460 00008EE6 4883FE03                	cmp rsi, 3
 13461 00008EEA 7410                    	je .L_lambda_simple_env_end_6d30
 13462 00008EEC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13463 00008EF0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13464 00008EF4 48FFC6                  	inc rsi
 13465 00008EF7 48FFC2                  	inc rdx
 13466 00008EFA EBEA                    	jmp .L_lambda_simple_env_loop_6d30
 13467                                  .L_lambda_simple_env_end_6d30:
 13468 00008EFC 5B                      	pop rbx
 13469 00008EFD BE00000000              	mov rsi, 0
 13470                                  .L_lambda_simple_params_loop_6d30:	; copy params
 13471 00008F02 4883FE02                	cmp rsi, 2
 13472 00008F06 740E                    	je .L_lambda_simple_params_end_6d30
 13473 00008F08 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13474 00008F0D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13475 00008F11 48FFC6                  	inc rsi
 13476 00008F14 EBEC                    	jmp .L_lambda_simple_params_loop_6d30
 13477                                  .L_lambda_simple_params_end_6d30:
 13478 00008F16 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13479 00008F19 4889C3                  	mov rbx, rax
 13480 00008F1C 58                      	pop rax
 13481 00008F1D C60004                  	mov byte [rax], T_closure
 13482 00008F20 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13483 00008F24 48C74009[318F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d30
 13484 00008F2C E97D000000              	jmp .L_lambda_simple_end_6d30
 13485                                  .L_lambda_simple_code_6d30:	; lambda-simple body
 13486 00008F31 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13487 00008F37 740B                    	je .L_lambda_simple_arity_check_ok_6d30
 13488 00008F39 FF742410                	push qword [rsp + 8 * 2]
 13489 00008F3D 6A01                    	push 1
 13490 00008F3F E97EC70000              	jmp L_error_incorrect_arity_simple
 13491                                  .L_lambda_simple_arity_check_ok_6d30:
 13492 00008F44 C8000000                	enter 0, 0
 13493                                  	; preparing a tail-call
 13494 00008F48 488B4520                	mov rax, PARAM(0)	; param b
 13495 00008F4C 50                      	push rax
 13496 00008F4D 488B4510                	mov rax, ENV
 13497 00008F51 488B00                  	mov rax, qword [rax + 8 * 0]
 13498 00008F54 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 13499 00008F57 50                      	push rax
 13500 00008F58 6A02                    	push 2	; arg count
 13501 00008F5A 488B4510                	mov rax, ENV
 13502 00008F5E 488B4008                	mov rax, qword [rax + 8 * 1]
 13503 00008F62 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 13504 00008F65 803804                  	cmp byte [rax], T_closure
 13505 00008F68 0F85F2C60000            	jne L_error_non_closure
 13506 00008F6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 13507                                  
 13508                                  	; recycling the current frame
 13509 00008F71 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13510 00008F74 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13511 00008F77 B906000000              	mov rcx, 2 + 4
 13512 00008F7C 488B5D18                	mov rbx, COUNT
 13513 00008F80 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13514 00008F85 488D55F8                	lea rdx, [rbp - 8 * 1]
 13515                                  .L_tc_recycle_frame_loop_8f1f:
 13516 00008F89 4883F900                	cmp rcx, 0
 13517 00008F8D 7413                    	je .L_tc_recycle_frame_done_8f1f
 13518 00008F8F 488B32                  	mov rsi, qword [rdx]
 13519 00008F92 488933                  	mov qword [rbx], rsi
 13520 00008F95 48FFC9                  	dec rcx
 13521 00008F98 4883EB08                	sub rbx, 8 * 1
 13522 00008F9C 4883EA08                	sub rdx, 8 * 1
 13523 00008FA0 EBE7                    	jmp .L_tc_recycle_frame_loop_8f1f
 13524                                  .L_tc_recycle_frame_done_8f1f:
 13525 00008FA2 488D6308                	lea rsp, [rbx + 8 * 1]
 13526 00008FA6 5D                      	pop rbp	; the proc will restore it!
 13527 00008FA7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13528 00008FAA C9                      	leave
 13529 00008FAB C21800                  	ret AND_KILL_FRAME(1)
 13530                                  .L_lambda_simple_end_6d30:	; new closure is in rax
 13531 00008FAE 803804                  	cmp byte [rax], T_closure
 13532 00008FB1 0F85A9C60000            	jne L_error_non_closure
 13533 00008FB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13534                                  
 13535                                  	; recycling the current frame
 13536 00008FBA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13537 00008FBD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13538 00008FC0 B905000000              	mov rcx, 1 + 4
 13539 00008FC5 488B5D18                	mov rbx, COUNT
 13540 00008FC9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13541 00008FCE 488D55F8                	lea rdx, [rbp - 8 * 1]
 13542                                  .L_tc_recycle_frame_loop_8f20:
 13543 00008FD2 4883F900                	cmp rcx, 0
 13544 00008FD6 7413                    	je .L_tc_recycle_frame_done_8f20
 13545 00008FD8 488B32                  	mov rsi, qword [rdx]
 13546 00008FDB 488933                  	mov qword [rbx], rsi
 13547 00008FDE 48FFC9                  	dec rcx
 13548 00008FE1 4883EB08                	sub rbx, 8 * 1
 13549 00008FE5 4883EA08                	sub rdx, 8 * 1
 13550 00008FE9 EBE7                    	jmp .L_tc_recycle_frame_loop_8f20
 13551                                  .L_tc_recycle_frame_done_8f20:
 13552 00008FEB 488D6308                	lea rsp, [rbx + 8 * 1]
 13553 00008FEF 5D                      	pop rbp	; the proc will restore it!
 13554 00008FF0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13555                                  
 13556                                  	.L_if_end_76ff:
 13557 00008FF3 C9                      	leave
 13558 00008FF4 C22000                  	ret AND_KILL_FRAME(2)
 13559                                  .L_lambda_opt_end_0f5d:	; new closure is in rax
 13560 00008FF7 C9                      	leave
 13561 00008FF8 C21800                  	ret AND_KILL_FRAME(1)
 13562                                  .L_lambda_simple_end_6d2f:	; new closure is in rax
 13563 00008FFB 803804                  	cmp byte [rax], T_closure
 13564 00008FFE 0F855CC60000            	jne L_error_non_closure
 13565 00009004 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13566                                  
 13567                                  	; recycling the current frame
 13568 00009007 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13569 0000900A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13570 0000900D B905000000              	mov rcx, 1 + 4
 13571 00009012 488B5D18                	mov rbx, COUNT
 13572 00009016 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13573 0000901B 488D55F8                	lea rdx, [rbp - 8 * 1]
 13574                                  .L_tc_recycle_frame_loop_8f21:
 13575 0000901F 4883F900                	cmp rcx, 0
 13576 00009023 7413                    	je .L_tc_recycle_frame_done_8f21
 13577 00009025 488B32                  	mov rsi, qword [rdx]
 13578 00009028 488933                  	mov qword [rbx], rsi
 13579 0000902B 48FFC9                  	dec rcx
 13580 0000902E 4883EB08                	sub rbx, 8 * 1
 13581 00009032 4883EA08                	sub rdx, 8 * 1
 13582 00009036 EBE7                    	jmp .L_tc_recycle_frame_loop_8f21
 13583                                  .L_tc_recycle_frame_done_8f21:
 13584 00009038 488D6308                	lea rsp, [rbx + 8 * 1]
 13585 0000903C 5D                      	pop rbp	; the proc will restore it!
 13586 0000903D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13587 00009040 C9                      	leave
 13588 00009041 C21800                  	ret AND_KILL_FRAME(1)
 13589                                  .L_lambda_simple_end_6d2d:	; new closure is in rax
 13590 00009044 803804                  	cmp byte [rax], T_closure
 13591 00009047 0F8513C60000            	jne L_error_non_closure
 13592 0000904D FF7001                  	push SOB_CLOSURE_ENV(rax)
 13593 00009050 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13594 00009053 48890425[A0150000]      	mov qword [free_var_120], rax
 13595 0000905B 48B8-                   	mov rax, sob_void
 13595 0000905D [0000000000000000] 
 13596                                  
 13597 00009065 4889C7                  	mov rdi, rax
 13598 00009068 E8AEC70000              	call print_sexpr_if_not_void
 13599                                  
 13600 0000906D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13601 00009072 E892C60000              	call malloc
 13602 00009077 50                      	push rax
 13603 00009078 BF00000000              	mov rdi, 8 * 0	; new rib
 13604 0000907D E887C60000              	call malloc
 13605 00009082 50                      	push rax
 13606 00009083 BF08000000              	mov rdi, 8 * 1	; extended env
 13607 00009088 E87CC60000              	call malloc
 13608 0000908D 488B7D10                	mov rdi, ENV
 13609 00009091 BE00000000              	mov rsi, 0
 13610 00009096 BA01000000              	mov rdx, 1
 13611                                  .L_lambda_simple_env_loop_6d31:	; ext_env[i + 1] <-- env[i]
 13612 0000909B 4883FE00                	cmp rsi, 0
 13613 0000909F 7410                    	je .L_lambda_simple_env_end_6d31
 13614 000090A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13615 000090A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13616 000090A9 48FFC6                  	inc rsi
 13617 000090AC 48FFC2                  	inc rdx
 13618 000090AF EBEA                    	jmp .L_lambda_simple_env_loop_6d31
 13619                                  .L_lambda_simple_env_end_6d31:
 13620 000090B1 5B                      	pop rbx
 13621 000090B2 BE00000000              	mov rsi, 0
 13622                                  .L_lambda_simple_params_loop_6d31:	; copy params
 13623 000090B7 4883FE00                	cmp rsi, 0
 13624 000090BB 740E                    	je .L_lambda_simple_params_end_6d31
 13625 000090BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13626 000090C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13627 000090C6 48FFC6                  	inc rsi
 13628 000090C9 EBEC                    	jmp .L_lambda_simple_params_loop_6d31
 13629                                  .L_lambda_simple_params_end_6d31:
 13630 000090CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13631 000090CE 4889C3                  	mov rbx, rax
 13632 000090D1 58                      	pop rax
 13633 000090D2 C60004                  	mov byte [rax], T_closure
 13634 000090D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13635 000090D9 48C74009[E6900000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d31
 13636 000090E1 E90C010000              	jmp .L_lambda_simple_end_6d31
 13637                                  .L_lambda_simple_code_6d31:	; lambda-simple body
 13638 000090E6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13639 000090EC 740B                    	je .L_lambda_simple_arity_check_ok_6d31
 13640 000090EE FF742410                	push qword [rsp + 8 * 2]
 13641 000090F2 6A01                    	push 1
 13642 000090F4 E9C9C50000              	jmp L_error_incorrect_arity_simple
 13643                                  .L_lambda_simple_arity_check_ok_6d31:
 13644 000090F9 C8000000                	enter 0, 0
 13645 000090FD 488B4520                	mov rax, PARAM(0)	; param n
 13646 00009101 50                      	push rax
 13647 00009102 6A01                    	push 1	; arg count
 13648 00009104 488B0425[730F0000]      	mov rax, qword [free_var_27]	; free var zero?
 13649 0000910C 803805                  	cmp byte [rax], T_undefined
 13650 0000910F 0F84C7C40000            	je L_error_fvar_undefined
 13651 00009115 803804                  	cmp byte [rax], T_closure
 13652 00009118 0F8542C50000            	jne L_error_non_closure
 13653 0000911E FF7001                  	push SOB_CLOSURE_ENV(rax)
 13654 00009121 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13655                                  
 13656 00009124 483D[02000000]          	cmp rax, sob_boolean_false
 13657 0000912A 740F                    	je .L_if_else_7700
 13658 0000912C 48B8-                   	mov rax, L_constants + 2158
 13658 0000912E [6E08000000000000] 
 13659                                  
 13660 00009136 E9B3000000              	jmp .L_if_end_7700
 13661                                  
 13662                                  	.L_if_else_7700:
 13663                                  	; preparing a tail-call
 13664 0000913B 48B8-                   	mov rax, L_constants + 2158
 13664 0000913D [6E08000000000000] 
 13665 00009145 50                      	push rax
 13666 00009146 488B4520                	mov rax, PARAM(0)	; param n
 13667 0000914A 50                      	push rax
 13668 0000914B 6A02                    	push 2	; arg count
 13669 0000914D 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 13670 00009155 803805                  	cmp byte [rax], T_undefined
 13671 00009158 0F847EC40000            	je L_error_fvar_undefined
 13672 0000915E 803804                  	cmp byte [rax], T_closure
 13673 00009161 0F85F9C40000            	jne L_error_non_closure
 13674 00009167 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13675 0000916A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13676 0000916D 50                      	push rax
 13677 0000916E 6A01                    	push 1	; arg count
 13678 00009170 488B0425[B1150000]      	mov rax, qword [free_var_121]	; free var fact
 13679 00009178 803805                  	cmp byte [rax], T_undefined
 13680 0000917B 0F845BC40000            	je L_error_fvar_undefined
 13681 00009181 803804                  	cmp byte [rax], T_closure
 13682 00009184 0F85D6C40000            	jne L_error_non_closure
 13683 0000918A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13684 0000918D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13685 00009190 50                      	push rax
 13686 00009191 488B4520                	mov rax, PARAM(0)	; param n
 13687 00009195 50                      	push rax
 13688 00009196 6A02                    	push 2	; arg count
 13689 00009198 488B0425[8F150000]      	mov rax, qword [free_var_119]	; free var *
 13690 000091A0 803805                  	cmp byte [rax], T_undefined
 13691 000091A3 0F8433C40000            	je L_error_fvar_undefined
 13692 000091A9 803804                  	cmp byte [rax], T_closure
 13693 000091AC 0F85AEC40000            	jne L_error_non_closure
 13694 000091B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13695                                  
 13696                                  	; recycling the current frame
 13697 000091B5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13698 000091B8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13699 000091BB B906000000              	mov rcx, 2 + 4
 13700 000091C0 488B5D18                	mov rbx, COUNT
 13701 000091C4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13702 000091C9 488D55F8                	lea rdx, [rbp - 8 * 1]
 13703                                  .L_tc_recycle_frame_loop_8f22:
 13704 000091CD 4883F900                	cmp rcx, 0
 13705 000091D1 7413                    	je .L_tc_recycle_frame_done_8f22
 13706 000091D3 488B32                  	mov rsi, qword [rdx]
 13707 000091D6 488933                  	mov qword [rbx], rsi
 13708 000091D9 48FFC9                  	dec rcx
 13709 000091DC 4883EB08                	sub rbx, 8 * 1
 13710 000091E0 4883EA08                	sub rdx, 8 * 1
 13711 000091E4 EBE7                    	jmp .L_tc_recycle_frame_loop_8f22
 13712                                  .L_tc_recycle_frame_done_8f22:
 13713 000091E6 488D6308                	lea rsp, [rbx + 8 * 1]
 13714 000091EA 5D                      	pop rbp	; the proc will restore it!
 13715 000091EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13716                                  
 13717                                  	.L_if_end_7700:
 13718 000091EE C9                      	leave
 13719 000091EF C21800                  	ret AND_KILL_FRAME(1)
 13720                                  .L_lambda_simple_end_6d31:	; new closure is in rax
 13721 000091F2 48890425[B1150000]      	mov qword [free_var_121], rax
 13722 000091FA 48B8-                   	mov rax, sob_void
 13722 000091FC [0000000000000000] 
 13723                                  
 13724 00009204 4889C7                  	mov rdi, rax
 13725 00009207 E80FC60000              	call print_sexpr_if_not_void
 13726                                  
 13727 0000920C 48B8-                   	mov rax, L_constants + 0
 13727 0000920E [0000000000000000] 
 13728 00009216 48890425[C2150000]      	mov qword [free_var_122], rax
 13729 0000921E 48B8-                   	mov rax, sob_void
 13729 00009220 [0000000000000000] 
 13730                                  
 13731 00009228 4889C7                  	mov rdi, rax
 13732 0000922B E8EBC50000              	call print_sexpr_if_not_void
 13733                                  
 13734 00009230 48B8-                   	mov rax, L_constants + 0
 13734 00009232 [0000000000000000] 
 13735 0000923A 48890425[D3150000]      	mov qword [free_var_123], rax
 13736 00009242 48B8-                   	mov rax, sob_void
 13736 00009244 [0000000000000000] 
 13737                                  
 13738 0000924C 4889C7                  	mov rdi, rax
 13739 0000924F E8C7C50000              	call print_sexpr_if_not_void
 13740                                  
 13741 00009254 48B8-                   	mov rax, L_constants + 0
 13741 00009256 [0000000000000000] 
 13742 0000925E 48890425[E4150000]      	mov qword [free_var_124], rax
 13743 00009266 48B8-                   	mov rax, sob_void
 13743 00009268 [0000000000000000] 
 13744                                  
 13745 00009270 4889C7                  	mov rdi, rax
 13746 00009273 E8A3C50000              	call print_sexpr_if_not_void
 13747                                  
 13748 00009278 48B8-                   	mov rax, L_constants + 0
 13748 0000927A [0000000000000000] 
 13749 00009282 48890425[F5150000]      	mov qword [free_var_125], rax
 13750 0000928A 48B8-                   	mov rax, sob_void
 13750 0000928C [0000000000000000] 
 13751                                  
 13752 00009294 4889C7                  	mov rdi, rax
 13753 00009297 E87FC50000              	call print_sexpr_if_not_void
 13754                                  
 13755 0000929C 48B8-                   	mov rax, L_constants + 0
 13755 0000929E [0000000000000000] 
 13756 000092A6 48890425[06160000]      	mov qword [free_var_126], rax
 13757 000092AE 48B8-                   	mov rax, sob_void
 13757 000092B0 [0000000000000000] 
 13758                                  
 13759 000092B8 4889C7                  	mov rdi, rax
 13760 000092BB E85BC50000              	call print_sexpr_if_not_void
 13761                                  
 13762 000092C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13763 000092C5 E83FC40000              	call malloc
 13764 000092CA 50                      	push rax
 13765 000092CB BF00000000              	mov rdi, 8 * 0	; new rib
 13766 000092D0 E834C40000              	call malloc
 13767 000092D5 50                      	push rax
 13768 000092D6 BF08000000              	mov rdi, 8 * 1	; extended env
 13769 000092DB E829C40000              	call malloc
 13770 000092E0 488B7D10                	mov rdi, ENV
 13771 000092E4 BE00000000              	mov rsi, 0
 13772 000092E9 BA01000000              	mov rdx, 1
 13773                                  .L_lambda_simple_env_loop_6d32:	; ext_env[i + 1] <-- env[i]
 13774 000092EE 4883FE00                	cmp rsi, 0
 13775 000092F2 7410                    	je .L_lambda_simple_env_end_6d32
 13776 000092F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13777 000092F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13778 000092FC 48FFC6                  	inc rsi
 13779 000092FF 48FFC2                  	inc rdx
 13780 00009302 EBEA                    	jmp .L_lambda_simple_env_loop_6d32
 13781                                  .L_lambda_simple_env_end_6d32:
 13782 00009304 5B                      	pop rbx
 13783 00009305 BE00000000              	mov rsi, 0
 13784                                  .L_lambda_simple_params_loop_6d32:	; copy params
 13785 0000930A 4883FE00                	cmp rsi, 0
 13786 0000930E 740E                    	je .L_lambda_simple_params_end_6d32
 13787 00009310 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13788 00009315 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13789 00009319 48FFC6                  	inc rsi
 13790 0000931C EBEC                    	jmp .L_lambda_simple_params_loop_6d32
 13791                                  .L_lambda_simple_params_end_6d32:
 13792 0000931E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13793 00009321 4889C3                  	mov rbx, rax
 13794 00009324 58                      	pop rax
 13795 00009325 C60004                  	mov byte [rax], T_closure
 13796 00009328 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13797 0000932C 48C74009[39930000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d32
 13798 00009334 E989000000              	jmp .L_lambda_simple_end_6d32
 13799                                  .L_lambda_simple_code_6d32:	; lambda-simple body
 13800 00009339 48837C241000            	cmp qword [rsp + 8 * 2], 0
 13801 0000933F 740B                    	je .L_lambda_simple_arity_check_ok_6d32
 13802 00009341 FF742410                	push qword [rsp + 8 * 2]
 13803 00009345 6A00                    	push 0
 13804 00009347 E976C30000              	jmp L_error_incorrect_arity_simple
 13805                                  .L_lambda_simple_arity_check_ok_6d32:
 13806 0000934C C8000000                	enter 0, 0
 13807                                  	; preparing a tail-call
 13808 00009350 48B8-                   	mov rax, L_constants + 2296
 13808 00009352 [F808000000000000] 
 13809 0000935A 50                      	push rax
 13810 0000935B 48B8-                   	mov rax, L_constants + 2287
 13810 0000935D [EF08000000000000] 
 13811 00009365 50                      	push rax
 13812 00009366 6A02                    	push 2	; arg count
 13813 00009368 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 13814 00009370 803805                  	cmp byte [rax], T_undefined
 13815 00009373 0F8463C20000            	je L_error_fvar_undefined
 13816 00009379 803804                  	cmp byte [rax], T_closure
 13817 0000937C 0F85DEC20000            	jne L_error_non_closure
 13818 00009382 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13819                                  
 13820                                  	; recycling the current frame
 13821 00009385 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13822 00009388 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13823 0000938B B906000000              	mov rcx, 2 + 4
 13824 00009390 488B5D18                	mov rbx, COUNT
 13825 00009394 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13826 00009399 488D55F8                	lea rdx, [rbp - 8 * 1]
 13827                                  .L_tc_recycle_frame_loop_8f23:
 13828 0000939D 4883F900                	cmp rcx, 0
 13829 000093A1 7413                    	je .L_tc_recycle_frame_done_8f23
 13830 000093A3 488B32                  	mov rsi, qword [rdx]
 13831 000093A6 488933                  	mov qword [rbx], rsi
 13832 000093A9 48FFC9                  	dec rcx
 13833 000093AC 4883EB08                	sub rbx, 8 * 1
 13834 000093B0 4883EA08                	sub rdx, 8 * 1
 13835 000093B4 EBE7                    	jmp .L_tc_recycle_frame_loop_8f23
 13836                                  .L_tc_recycle_frame_done_8f23:
 13837 000093B6 488D6308                	lea rsp, [rbx + 8 * 1]
 13838 000093BA 5D                      	pop rbp	; the proc will restore it!
 13839 000093BB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13840 000093BE C9                      	leave
 13841 000093BF C21000                  	ret AND_KILL_FRAME(0)
 13842                                  .L_lambda_simple_end_6d32:	; new closure is in rax
 13843 000093C2 50                      	push rax
 13844 000093C3 6A01                    	push 1	; arg count
 13845 000093C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13846 000093CA E83AC30000              	call malloc
 13847 000093CF 50                      	push rax
 13848 000093D0 BF00000000              	mov rdi, 8 * 0	; new rib
 13849 000093D5 E82FC30000              	call malloc
 13850 000093DA 50                      	push rax
 13851 000093DB BF08000000              	mov rdi, 8 * 1	; extended env
 13852 000093E0 E824C30000              	call malloc
 13853 000093E5 488B7D10                	mov rdi, ENV
 13854 000093E9 BE00000000              	mov rsi, 0
 13855 000093EE BA01000000              	mov rdx, 1
 13856                                  .L_lambda_simple_env_loop_6d33:	; ext_env[i + 1] <-- env[i]
 13857 000093F3 4883FE00                	cmp rsi, 0
 13858 000093F7 7410                    	je .L_lambda_simple_env_end_6d33
 13859 000093F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13860 000093FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13861 00009401 48FFC6                  	inc rsi
 13862 00009404 48FFC2                  	inc rdx
 13863 00009407 EBEA                    	jmp .L_lambda_simple_env_loop_6d33
 13864                                  .L_lambda_simple_env_end_6d33:
 13865 00009409 5B                      	pop rbx
 13866 0000940A BE00000000              	mov rsi, 0
 13867                                  .L_lambda_simple_params_loop_6d33:	; copy params
 13868 0000940F 4883FE00                	cmp rsi, 0
 13869 00009413 740E                    	je .L_lambda_simple_params_end_6d33
 13870 00009415 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13871 0000941A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13872 0000941E 48FFC6                  	inc rsi
 13873 00009421 EBEC                    	jmp .L_lambda_simple_params_loop_6d33
 13874                                  .L_lambda_simple_params_end_6d33:
 13875 00009423 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13876 00009426 4889C3                  	mov rbx, rax
 13877 00009429 58                      	pop rax
 13878 0000942A C60004                  	mov byte [rax], T_closure
 13879 0000942D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13880 00009431 48C74009[3E940000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d33
 13881 00009439 E925190000              	jmp .L_lambda_simple_end_6d33
 13882                                  .L_lambda_simple_code_6d33:	; lambda-simple body
 13883 0000943E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13884 00009444 740B                    	je .L_lambda_simple_arity_check_ok_6d33
 13885 00009446 FF742410                	push qword [rsp + 8 * 2]
 13886 0000944A 6A01                    	push 1
 13887 0000944C E971C20000              	jmp L_error_incorrect_arity_simple
 13888                                  .L_lambda_simple_arity_check_ok_6d33:
 13889 00009451 C8000000                	enter 0, 0
 13890                                  	; preparing a tail-call
 13891 00009455 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13892 0000945A E8AAC20000              	call malloc
 13893 0000945F 50                      	push rax
 13894 00009460 BF08000000              	mov rdi, 8 * 1	; new rib
 13895 00009465 E89FC20000              	call malloc
 13896 0000946A 50                      	push rax
 13897 0000946B BF10000000              	mov rdi, 8 * 2	; extended env
 13898 00009470 E894C20000              	call malloc
 13899 00009475 488B7D10                	mov rdi, ENV
 13900 00009479 BE00000000              	mov rsi, 0
 13901 0000947E BA01000000              	mov rdx, 1
 13902                                  .L_lambda_simple_env_loop_6d34:	; ext_env[i + 1] <-- env[i]
 13903 00009483 4883FE01                	cmp rsi, 1
 13904 00009487 7410                    	je .L_lambda_simple_env_end_6d34
 13905 00009489 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13906 0000948D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13907 00009491 48FFC6                  	inc rsi
 13908 00009494 48FFC2                  	inc rdx
 13909 00009497 EBEA                    	jmp .L_lambda_simple_env_loop_6d34
 13910                                  .L_lambda_simple_env_end_6d34:
 13911 00009499 5B                      	pop rbx
 13912 0000949A BE00000000              	mov rsi, 0
 13913                                  .L_lambda_simple_params_loop_6d34:	; copy params
 13914 0000949F 4883FE01                	cmp rsi, 1
 13915 000094A3 740E                    	je .L_lambda_simple_params_end_6d34
 13916 000094A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13917 000094AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13918 000094AE 48FFC6                  	inc rsi
 13919 000094B1 EBEC                    	jmp .L_lambda_simple_params_loop_6d34
 13920                                  .L_lambda_simple_params_end_6d34:
 13921 000094B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13922 000094B6 4889C3                  	mov rbx, rax
 13923 000094B9 58                      	pop rax
 13924 000094BA C60004                  	mov byte [rax], T_closure
 13925 000094BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13926 000094C1 48C74009[CE940000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d34
 13927 000094C9 E98C080000              	jmp .L_lambda_simple_end_6d34
 13928                                  .L_lambda_simple_code_6d34:	; lambda-simple body
 13929 000094CE 48837C241003            	cmp qword [rsp + 8 * 2], 3
 13930 000094D4 740B                    	je .L_lambda_simple_arity_check_ok_6d34
 13931 000094D6 FF742410                	push qword [rsp + 8 * 2]
 13932 000094DA 6A03                    	push 3
 13933 000094DC E9E1C10000              	jmp L_error_incorrect_arity_simple
 13934                                  .L_lambda_simple_arity_check_ok_6d34:
 13935 000094E1 C8000000                	enter 0, 0
 13936 000094E5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13937 000094EA E81AC20000              	call malloc
 13938 000094EF 50                      	push rax
 13939 000094F0 BF18000000              	mov rdi, 8 * 3	; new rib
 13940 000094F5 E80FC20000              	call malloc
 13941 000094FA 50                      	push rax
 13942 000094FB BF18000000              	mov rdi, 8 * 3	; extended env
 13943 00009500 E804C20000              	call malloc
 13944 00009505 488B7D10                	mov rdi, ENV
 13945 00009509 BE00000000              	mov rsi, 0
 13946 0000950E BA01000000              	mov rdx, 1
 13947                                  .L_lambda_simple_env_loop_6d35:	; ext_env[i + 1] <-- env[i]
 13948 00009513 4883FE02                	cmp rsi, 2
 13949 00009517 7410                    	je .L_lambda_simple_env_end_6d35
 13950 00009519 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13951 0000951D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13952 00009521 48FFC6                  	inc rsi
 13953 00009524 48FFC2                  	inc rdx
 13954 00009527 EBEA                    	jmp .L_lambda_simple_env_loop_6d35
 13955                                  .L_lambda_simple_env_end_6d35:
 13956 00009529 5B                      	pop rbx
 13957 0000952A BE00000000              	mov rsi, 0
 13958                                  .L_lambda_simple_params_loop_6d35:	; copy params
 13959 0000952F 4883FE03                	cmp rsi, 3
 13960 00009533 740E                    	je .L_lambda_simple_params_end_6d35
 13961 00009535 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13962 0000953A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13963 0000953E 48FFC6                  	inc rsi
 13964 00009541 EBEC                    	jmp .L_lambda_simple_params_loop_6d35
 13965                                  .L_lambda_simple_params_end_6d35:
 13966 00009543 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13967 00009546 4889C3                  	mov rbx, rax
 13968 00009549 58                      	pop rax
 13969 0000954A C60004                  	mov byte [rax], T_closure
 13970 0000954D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13971 00009551 48C74009[5E950000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d35
 13972 00009559 E9F8070000              	jmp .L_lambda_simple_end_6d35
 13973                                  .L_lambda_simple_code_6d35:	; lambda-simple body
 13974 0000955E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13975 00009564 740B                    	je .L_lambda_simple_arity_check_ok_6d35
 13976 00009566 FF742410                	push qword [rsp + 8 * 2]
 13977 0000956A 6A02                    	push 2
 13978 0000956C E951C10000              	jmp L_error_incorrect_arity_simple
 13979                                  .L_lambda_simple_arity_check_ok_6d35:
 13980 00009571 C8000000                	enter 0, 0
 13981 00009575 488B4520                	mov rax, PARAM(0)	; param a
 13982 00009579 50                      	push rax
 13983 0000957A 6A01                    	push 1	; arg count
 13984 0000957C 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 13985 00009584 803805                  	cmp byte [rax], T_undefined
 13986 00009587 0F844FC00000            	je L_error_fvar_undefined
 13987 0000958D 803804                  	cmp byte [rax], T_closure
 13988 00009590 0F85CAC00000            	jne L_error_non_closure
 13989 00009596 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13990 00009599 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13991                                  
 13992 0000959C 483D[02000000]          	cmp rax, sob_boolean_false
 13993 000095A2 0F8451020000            	je .L_if_else_7701
 13994 000095A8 488B4528                	mov rax, PARAM(1)	; param b
 13995 000095AC 50                      	push rax
 13996 000095AD 6A01                    	push 1	; arg count
 13997 000095AF 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 13998 000095B7 803805                  	cmp byte [rax], T_undefined
 13999 000095BA 0F841CC00000            	je L_error_fvar_undefined
 14000 000095C0 803804                  	cmp byte [rax], T_closure
 14001 000095C3 0F8597C00000            	jne L_error_non_closure
 14002 000095C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14003 000095CC FF5009                  	call SOB_CLOSURE_CODE(rax)
 14004                                  
 14005 000095CF 483D[02000000]          	cmp rax, sob_boolean_false
 14006 000095D5 7460                    	je .L_if_else_7702
 14007                                  	; preparing a tail-call
 14008 000095D7 488B4528                	mov rax, PARAM(1)	; param b
 14009 000095DB 50                      	push rax
 14010 000095DC 488B4520                	mov rax, PARAM(0)	; param a
 14011 000095E0 50                      	push rax
 14012 000095E1 6A02                    	push 2	; arg count
 14013 000095E3 488B4510                	mov rax, ENV
 14014 000095E7 488B00                  	mov rax, qword [rax + 8 * 0]
 14015 000095EA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator-zz
 14016 000095ED 803804                  	cmp byte [rax], T_closure
 14017 000095F0 0F856AC00000            	jne L_error_non_closure
 14018 000095F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14019                                  
 14020                                  	; recycling the current frame
 14021 000095F9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14022 000095FC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14023 000095FF B906000000              	mov rcx, 2 + 4
 14024 00009604 488B5D18                	mov rbx, COUNT
 14025 00009608 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14026 0000960D 488D55F8                	lea rdx, [rbp - 8 * 1]
 14027                                  .L_tc_recycle_frame_loop_8f24:
 14028 00009611 4883F900                	cmp rcx, 0
 14029 00009615 7413                    	je .L_tc_recycle_frame_done_8f24
 14030 00009617 488B32                  	mov rsi, qword [rdx]
 14031 0000961A 488933                  	mov qword [rbx], rsi
 14032 0000961D 48FFC9                  	dec rcx
 14033 00009620 4883EB08                	sub rbx, 8 * 1
 14034 00009624 4883EA08                	sub rdx, 8 * 1
 14035 00009628 EBE7                    	jmp .L_tc_recycle_frame_loop_8f24
 14036                                  .L_tc_recycle_frame_done_8f24:
 14037 0000962A 488D6308                	lea rsp, [rbx + 8 * 1]
 14038 0000962E 5D                      	pop rbp	; the proc will restore it!
 14039 0000962F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14040                                  
 14041 00009632 E9BD010000              	jmp .L_if_end_7702
 14042                                  
 14043                                  	.L_if_else_7702:
 14044 00009637 488B4528                	mov rax, PARAM(1)	; param b
 14045 0000963B 50                      	push rax
 14046 0000963C 6A01                    	push 1	; arg count
 14047 0000963E 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14048 00009646 803805                  	cmp byte [rax], T_undefined
 14049 00009649 0F848DBF0000            	je L_error_fvar_undefined
 14050 0000964F 803804                  	cmp byte [rax], T_closure
 14051 00009652 0F8508C00000            	jne L_error_non_closure
 14052 00009658 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14053 0000965B FF5009                  	call SOB_CLOSURE_CODE(rax)
 14054                                  
 14055 0000965E 483D[02000000]          	cmp rax, sob_boolean_false
 14056 00009664 0F8484000000            	je .L_if_else_7703
 14057                                  	; preparing a tail-call
 14058 0000966A 488B4528                	mov rax, PARAM(1)	; param b
 14059 0000966E 50                      	push rax
 14060 0000966F 488B4520                	mov rax, PARAM(0)	; param a
 14061 00009673 50                      	push rax
 14062 00009674 6A01                    	push 1	; arg count
 14063 00009676 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 14064 0000967E 803805                  	cmp byte [rax], T_undefined
 14065 00009681 0F8455BF0000            	je L_error_fvar_undefined
 14066 00009687 803804                  	cmp byte [rax], T_closure
 14067 0000968A 0F85D0BF0000            	jne L_error_non_closure
 14068 00009690 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14069 00009693 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14070 00009696 50                      	push rax
 14071 00009697 6A02                    	push 2	; arg count
 14072 00009699 488B4510                	mov rax, ENV
 14073 0000969D 488B00                  	mov rax, qword [rax + 8 * 0]
 14074 000096A0 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14075 000096A4 803804                  	cmp byte [rax], T_closure
 14076 000096A7 0F85B3BF0000            	jne L_error_non_closure
 14077 000096AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 14078                                  
 14079                                  	; recycling the current frame
 14080 000096B0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14081 000096B3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14082 000096B6 B906000000              	mov rcx, 2 + 4
 14083 000096BB 488B5D18                	mov rbx, COUNT
 14084 000096BF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14085 000096C4 488D55F8                	lea rdx, [rbp - 8 * 1]
 14086                                  .L_tc_recycle_frame_loop_8f25:
 14087 000096C8 4883F900                	cmp rcx, 0
 14088 000096CC 7413                    	je .L_tc_recycle_frame_done_8f25
 14089 000096CE 488B32                  	mov rsi, qword [rdx]
 14090 000096D1 488933                  	mov qword [rbx], rsi
 14091 000096D4 48FFC9                  	dec rcx
 14092 000096D7 4883EB08                	sub rbx, 8 * 1
 14093 000096DB 4883EA08                	sub rdx, 8 * 1
 14094 000096DF EBE7                    	jmp .L_tc_recycle_frame_loop_8f25
 14095                                  .L_tc_recycle_frame_done_8f25:
 14096 000096E1 488D6308                	lea rsp, [rbx + 8 * 1]
 14097 000096E5 5D                      	pop rbp	; the proc will restore it!
 14098 000096E6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14099                                  
 14100 000096E9 E906010000              	jmp .L_if_end_7703
 14101                                  
 14102                                  	.L_if_else_7703:
 14103 000096EE 488B4528                	mov rax, PARAM(1)	; param b
 14104 000096F2 50                      	push rax
 14105 000096F3 6A01                    	push 1	; arg count
 14106 000096F5 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 14107 000096FD 803805                  	cmp byte [rax], T_undefined
 14108 00009700 0F84D6BE0000            	je L_error_fvar_undefined
 14109 00009706 803804                  	cmp byte [rax], T_closure
 14110 00009709 0F8551BF0000            	jne L_error_non_closure
 14111 0000970F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14112 00009712 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14113                                  
 14114 00009715 483D[02000000]          	cmp rax, sob_boolean_false
 14115 0000971B 0F8481000000            	je .L_if_else_7704
 14116                                  	; preparing a tail-call
 14117 00009721 488B4528                	mov rax, PARAM(1)	; param b
 14118 00009725 50                      	push rax
 14119 00009726 488B4520                	mov rax, PARAM(0)	; param a
 14120 0000972A 50                      	push rax
 14121 0000972B 6A01                    	push 1	; arg count
 14122 0000972D 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 14123 00009735 803805                  	cmp byte [rax], T_undefined
 14124 00009738 0F849EBE0000            	je L_error_fvar_undefined
 14125 0000973E 803804                  	cmp byte [rax], T_closure
 14126 00009741 0F8519BF0000            	jne L_error_non_closure
 14127 00009747 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14128 0000974A FF5009                  	call SOB_CLOSURE_CODE(rax)
 14129 0000974D 50                      	push rax
 14130 0000974E 6A02                    	push 2	; arg count
 14131 00009750 488B4510                	mov rax, ENV
 14132 00009754 488B00                  	mov rax, qword [rax + 8 * 0]
 14133 00009757 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14134 0000975B 803804                  	cmp byte [rax], T_closure
 14135 0000975E 0F85FCBE0000            	jne L_error_non_closure
 14136 00009764 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14137                                  
 14138                                  	; recycling the current frame
 14139 00009767 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14140 0000976A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14141 0000976D B906000000              	mov rcx, 2 + 4
 14142 00009772 488B5D18                	mov rbx, COUNT
 14143 00009776 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14144 0000977B 488D55F8                	lea rdx, [rbp - 8 * 1]
 14145                                  .L_tc_recycle_frame_loop_8f26:
 14146 0000977F 4883F900                	cmp rcx, 0
 14147 00009783 7413                    	je .L_tc_recycle_frame_done_8f26
 14148 00009785 488B32                  	mov rsi, qword [rdx]
 14149 00009788 488933                  	mov qword [rbx], rsi
 14150 0000978B 48FFC9                  	dec rcx
 14151 0000978E 4883EB08                	sub rbx, 8 * 1
 14152 00009792 4883EA08                	sub rdx, 8 * 1
 14153 00009796 EBE7                    	jmp .L_tc_recycle_frame_loop_8f26
 14154                                  .L_tc_recycle_frame_done_8f26:
 14155 00009798 488D6308                	lea rsp, [rbx + 8 * 1]
 14156 0000979C 5D                      	pop rbp	; the proc will restore it!
 14157 0000979D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14158                                  
 14159 000097A0 EB52                    	jmp .L_if_end_7704
 14160                                  
 14161                                  	.L_if_else_7704:
 14162                                  	; preparing a tail-call
 14163 000097A2 6A00                    	push 0	; arg count
 14164 000097A4 488B4510                	mov rax, ENV
 14165 000097A8 488B4008                	mov rax, qword [rax + 8 * 1]
 14166 000097AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14167 000097AF 803804                  	cmp byte [rax], T_closure
 14168 000097B2 0F85A8BE0000            	jne L_error_non_closure
 14169 000097B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14170                                  
 14171                                  	; recycling the current frame
 14172 000097BB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14173 000097BE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14174 000097C1 B904000000              	mov rcx, 0 + 4
 14175 000097C6 488B5D18                	mov rbx, COUNT
 14176 000097CA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14177 000097CF 488D55F8                	lea rdx, [rbp - 8 * 1]
 14178                                  .L_tc_recycle_frame_loop_8f27:
 14179 000097D3 4883F900                	cmp rcx, 0
 14180 000097D7 7413                    	je .L_tc_recycle_frame_done_8f27
 14181 000097D9 488B32                  	mov rsi, qword [rdx]
 14182 000097DC 488933                  	mov qword [rbx], rsi
 14183 000097DF 48FFC9                  	dec rcx
 14184 000097E2 4883EB08                	sub rbx, 8 * 1
 14185 000097E6 4883EA08                	sub rdx, 8 * 1
 14186 000097EA EBE7                    	jmp .L_tc_recycle_frame_loop_8f27
 14187                                  .L_tc_recycle_frame_done_8f27:
 14188 000097EC 488D6308                	lea rsp, [rbx + 8 * 1]
 14189 000097F0 5D                      	pop rbp	; the proc will restore it!
 14190 000097F1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14191                                  
 14192                                  	.L_if_end_7704:
 14193                                  
 14194                                  	.L_if_end_7703:
 14195                                  
 14196                                  	.L_if_end_7702:
 14197                                  
 14198 000097F4 E959050000              	jmp .L_if_end_7701
 14199                                  
 14200                                  	.L_if_else_7701:
 14201 000097F9 488B4520                	mov rax, PARAM(0)	; param a
 14202 000097FD 50                      	push rax
 14203 000097FE 6A01                    	push 1	; arg count
 14204 00009800 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14205 00009808 803805                  	cmp byte [rax], T_undefined
 14206 0000980B 0F84CBBD0000            	je L_error_fvar_undefined
 14207 00009811 803804                  	cmp byte [rax], T_closure
 14208 00009814 0F8546BE0000            	jne L_error_non_closure
 14209 0000981A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14210 0000981D FF5009                  	call SOB_CLOSURE_CODE(rax)
 14211                                  
 14212 00009820 483D[02000000]          	cmp rax, sob_boolean_false
 14213 00009826 0F8452020000            	je .L_if_else_7705
 14214 0000982C 488B4528                	mov rax, PARAM(1)	; param b
 14215 00009830 50                      	push rax
 14216 00009831 6A01                    	push 1	; arg count
 14217 00009833 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 14218 0000983B 803805                  	cmp byte [rax], T_undefined
 14219 0000983E 0F8498BD0000            	je L_error_fvar_undefined
 14220 00009844 803804                  	cmp byte [rax], T_closure
 14221 00009847 0F8513BE0000            	jne L_error_non_closure
 14222 0000984D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14223 00009850 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14224                                  
 14225 00009853 483D[02000000]          	cmp rax, sob_boolean_false
 14226 00009859 0F8484000000            	je .L_if_else_7706
 14227                                  	; preparing a tail-call
 14228 0000985F 488B4528                	mov rax, PARAM(1)	; param b
 14229 00009863 50                      	push rax
 14230 00009864 6A01                    	push 1	; arg count
 14231 00009866 488B0425[C6110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 14232 0000986E 803805                  	cmp byte [rax], T_undefined
 14233 00009871 0F8465BD0000            	je L_error_fvar_undefined
 14234 00009877 803804                  	cmp byte [rax], T_closure
 14235 0000987A 0F85E0BD0000            	jne L_error_non_closure
 14236 00009880 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14237 00009883 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14238 00009886 50                      	push rax
 14239 00009887 488B4520                	mov rax, PARAM(0)	; param a
 14240 0000988B 50                      	push rax
 14241 0000988C 6A02                    	push 2	; arg count
 14242 0000988E 488B4510                	mov rax, ENV
 14243 00009892 488B00                  	mov rax, qword [rax + 8 * 0]
 14244 00009895 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14245 00009899 803804                  	cmp byte [rax], T_closure
 14246 0000989C 0F85BEBD0000            	jne L_error_non_closure
 14247 000098A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14248                                  
 14249                                  	; recycling the current frame
 14250 000098A5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14251 000098A8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14252 000098AB B906000000              	mov rcx, 2 + 4
 14253 000098B0 488B5D18                	mov rbx, COUNT
 14254 000098B4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14255 000098B9 488D55F8                	lea rdx, [rbp - 8 * 1]
 14256                                  .L_tc_recycle_frame_loop_8f28:
 14257 000098BD 4883F900                	cmp rcx, 0
 14258 000098C1 7413                    	je .L_tc_recycle_frame_done_8f28
 14259 000098C3 488B32                  	mov rsi, qword [rdx]
 14260 000098C6 488933                  	mov qword [rbx], rsi
 14261 000098C9 48FFC9                  	dec rcx
 14262 000098CC 4883EB08                	sub rbx, 8 * 1
 14263 000098D0 4883EA08                	sub rdx, 8 * 1
 14264 000098D4 EBE7                    	jmp .L_tc_recycle_frame_loop_8f28
 14265                                  .L_tc_recycle_frame_done_8f28:
 14266 000098D6 488D6308                	lea rsp, [rbx + 8 * 1]
 14267 000098DA 5D                      	pop rbp	; the proc will restore it!
 14268 000098DB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14269                                  
 14270 000098DE E996010000              	jmp .L_if_end_7706
 14271                                  
 14272                                  	.L_if_else_7706:
 14273 000098E3 488B4528                	mov rax, PARAM(1)	; param b
 14274 000098E7 50                      	push rax
 14275 000098E8 6A01                    	push 1	; arg count
 14276 000098EA 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14277 000098F2 803805                  	cmp byte [rax], T_undefined
 14278 000098F5 0F84E1BC0000            	je L_error_fvar_undefined
 14279 000098FB 803804                  	cmp byte [rax], T_closure
 14280 000098FE 0F855CBD0000            	jne L_error_non_closure
 14281 00009904 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14282 00009907 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14283                                  
 14284 0000990A 483D[02000000]          	cmp rax, sob_boolean_false
 14285 00009910 7461                    	je .L_if_else_7707
 14286                                  	; preparing a tail-call
 14287 00009912 488B4528                	mov rax, PARAM(1)	; param b
 14288 00009916 50                      	push rax
 14289 00009917 488B4520                	mov rax, PARAM(0)	; param a
 14290 0000991B 50                      	push rax
 14291 0000991C 6A02                    	push 2	; arg count
 14292 0000991E 488B4510                	mov rax, ENV
 14293 00009922 488B00                  	mov rax, qword [rax + 8 * 0]
 14294 00009925 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14295 00009929 803804                  	cmp byte [rax], T_closure
 14296 0000992C 0F852EBD0000            	jne L_error_non_closure
 14297 00009932 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14298                                  
 14299                                  	; recycling the current frame
 14300 00009935 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14301 00009938 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14302 0000993B B906000000              	mov rcx, 2 + 4
 14303 00009940 488B5D18                	mov rbx, COUNT
 14304 00009944 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14305 00009949 488D55F8                	lea rdx, [rbp - 8 * 1]
 14306                                  .L_tc_recycle_frame_loop_8f29:
 14307 0000994D 4883F900                	cmp rcx, 0
 14308 00009951 7413                    	je .L_tc_recycle_frame_done_8f29
 14309 00009953 488B32                  	mov rsi, qword [rdx]
 14310 00009956 488933                  	mov qword [rbx], rsi
 14311 00009959 48FFC9                  	dec rcx
 14312 0000995C 4883EB08                	sub rbx, 8 * 1
 14313 00009960 4883EA08                	sub rdx, 8 * 1
 14314 00009964 EBE7                    	jmp .L_tc_recycle_frame_loop_8f29
 14315                                  .L_tc_recycle_frame_done_8f29:
 14316 00009966 488D6308                	lea rsp, [rbx + 8 * 1]
 14317 0000996A 5D                      	pop rbp	; the proc will restore it!
 14318 0000996B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14319                                  
 14320 0000996E E906010000              	jmp .L_if_end_7707
 14321                                  
 14322                                  	.L_if_else_7707:
 14323 00009973 488B4528                	mov rax, PARAM(1)	; param b
 14324 00009977 50                      	push rax
 14325 00009978 6A01                    	push 1	; arg count
 14326 0000997A 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 14327 00009982 803805                  	cmp byte [rax], T_undefined
 14328 00009985 0F8451BC0000            	je L_error_fvar_undefined
 14329 0000998B 803804                  	cmp byte [rax], T_closure
 14330 0000998E 0F85CCBC0000            	jne L_error_non_closure
 14331 00009994 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14332 00009997 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14333                                  
 14334 0000999A 483D[02000000]          	cmp rax, sob_boolean_false
 14335 000099A0 0F8481000000            	je .L_if_else_7708
 14336                                  	; preparing a tail-call
 14337 000099A6 488B4528                	mov rax, PARAM(1)	; param b
 14338 000099AA 50                      	push rax
 14339 000099AB 488B4520                	mov rax, PARAM(0)	; param a
 14340 000099AF 50                      	push rax
 14341 000099B0 6A01                    	push 1	; arg count
 14342 000099B2 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 14343 000099BA 803805                  	cmp byte [rax], T_undefined
 14344 000099BD 0F8419BC0000            	je L_error_fvar_undefined
 14345 000099C3 803804                  	cmp byte [rax], T_closure
 14346 000099C6 0F8594BC0000            	jne L_error_non_closure
 14347 000099CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 14348 000099CF FF5009                  	call SOB_CLOSURE_CODE(rax)
 14349 000099D2 50                      	push rax
 14350 000099D3 6A02                    	push 2	; arg count
 14351 000099D5 488B4510                	mov rax, ENV
 14352 000099D9 488B00                  	mov rax, qword [rax + 8 * 0]
 14353 000099DC 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14354 000099E0 803804                  	cmp byte [rax], T_closure
 14355 000099E3 0F8577BC0000            	jne L_error_non_closure
 14356 000099E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14357                                  
 14358                                  	; recycling the current frame
 14359 000099EC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14360 000099EF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14361 000099F2 B906000000              	mov rcx, 2 + 4
 14362 000099F7 488B5D18                	mov rbx, COUNT
 14363 000099FB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14364 00009A00 488D55F8                	lea rdx, [rbp - 8 * 1]
 14365                                  .L_tc_recycle_frame_loop_8f2a:
 14366 00009A04 4883F900                	cmp rcx, 0
 14367 00009A08 7413                    	je .L_tc_recycle_frame_done_8f2a
 14368 00009A0A 488B32                  	mov rsi, qword [rdx]
 14369 00009A0D 488933                  	mov qword [rbx], rsi
 14370 00009A10 48FFC9                  	dec rcx
 14371 00009A13 4883EB08                	sub rbx, 8 * 1
 14372 00009A17 4883EA08                	sub rdx, 8 * 1
 14373 00009A1B EBE7                    	jmp .L_tc_recycle_frame_loop_8f2a
 14374                                  .L_tc_recycle_frame_done_8f2a:
 14375 00009A1D 488D6308                	lea rsp, [rbx + 8 * 1]
 14376 00009A21 5D                      	pop rbp	; the proc will restore it!
 14377 00009A22 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14378                                  
 14379 00009A25 EB52                    	jmp .L_if_end_7708
 14380                                  
 14381                                  	.L_if_else_7708:
 14382                                  	; preparing a tail-call
 14383 00009A27 6A00                    	push 0	; arg count
 14384 00009A29 488B4510                	mov rax, ENV
 14385 00009A2D 488B4008                	mov rax, qword [rax + 8 * 1]
 14386 00009A31 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14387 00009A34 803804                  	cmp byte [rax], T_closure
 14388 00009A37 0F8523BC0000            	jne L_error_non_closure
 14389 00009A3D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14390                                  
 14391                                  	; recycling the current frame
 14392 00009A40 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14393 00009A43 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14394 00009A46 B904000000              	mov rcx, 0 + 4
 14395 00009A4B 488B5D18                	mov rbx, COUNT
 14396 00009A4F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14397 00009A54 488D55F8                	lea rdx, [rbp - 8 * 1]
 14398                                  .L_tc_recycle_frame_loop_8f2b:
 14399 00009A58 4883F900                	cmp rcx, 0
 14400 00009A5C 7413                    	je .L_tc_recycle_frame_done_8f2b
 14401 00009A5E 488B32                  	mov rsi, qword [rdx]
 14402 00009A61 488933                  	mov qword [rbx], rsi
 14403 00009A64 48FFC9                  	dec rcx
 14404 00009A67 4883EB08                	sub rbx, 8 * 1
 14405 00009A6B 4883EA08                	sub rdx, 8 * 1
 14406 00009A6F EBE7                    	jmp .L_tc_recycle_frame_loop_8f2b
 14407                                  .L_tc_recycle_frame_done_8f2b:
 14408 00009A71 488D6308                	lea rsp, [rbx + 8 * 1]
 14409 00009A75 5D                      	pop rbp	; the proc will restore it!
 14410 00009A76 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14411                                  
 14412                                  	.L_if_end_7708:
 14413                                  
 14414                                  	.L_if_end_7707:
 14415                                  
 14416                                  	.L_if_end_7706:
 14417                                  
 14418 00009A79 E9D4020000              	jmp .L_if_end_7705
 14419                                  
 14420                                  	.L_if_else_7705:
 14421 00009A7E 488B4520                	mov rax, PARAM(0)	; param a
 14422 00009A82 50                      	push rax
 14423 00009A83 6A01                    	push 1	; arg count
 14424 00009A85 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 14425 00009A8D 803805                  	cmp byte [rax], T_undefined
 14426 00009A90 0F8446BB0000            	je L_error_fvar_undefined
 14427 00009A96 803804                  	cmp byte [rax], T_closure
 14428 00009A99 0F85C1BB0000            	jne L_error_non_closure
 14429 00009A9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14430 00009AA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14431                                  
 14432 00009AA5 483D[02000000]          	cmp rax, sob_boolean_false
 14433 00009AAB 0F844F020000            	je .L_if_else_7709
 14434 00009AB1 488B4528                	mov rax, PARAM(1)	; param b
 14435 00009AB5 50                      	push rax
 14436 00009AB6 6A01                    	push 1	; arg count
 14437 00009AB8 488B0425[840F0000]      	mov rax, qword [free_var_28]	; free var integer?
 14438 00009AC0 803805                  	cmp byte [rax], T_undefined
 14439 00009AC3 0F8413BB0000            	je L_error_fvar_undefined
 14440 00009AC9 803804                  	cmp byte [rax], T_closure
 14441 00009ACC 0F858EBB0000            	jne L_error_non_closure
 14442 00009AD2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14443 00009AD5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14444                                  
 14445 00009AD8 483D[02000000]          	cmp rax, sob_boolean_false
 14446 00009ADE 0F8484000000            	je .L_if_else_770a
 14447                                  	; preparing a tail-call
 14448 00009AE4 488B4528                	mov rax, PARAM(1)	; param b
 14449 00009AE8 50                      	push rax
 14450 00009AE9 6A01                    	push 1	; arg count
 14451 00009AEB 488B0425[1E0F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 14452 00009AF3 803805                  	cmp byte [rax], T_undefined
 14453 00009AF6 0F84E0BA0000            	je L_error_fvar_undefined
 14454 00009AFC 803804                  	cmp byte [rax], T_closure
 14455 00009AFF 0F855BBB0000            	jne L_error_non_closure
 14456 00009B05 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14457 00009B08 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14458 00009B0B 50                      	push rax
 14459 00009B0C 488B4520                	mov rax, PARAM(0)	; param a
 14460 00009B10 50                      	push rax
 14461 00009B11 6A02                    	push 2	; arg count
 14462 00009B13 488B4510                	mov rax, ENV
 14463 00009B17 488B00                  	mov rax, qword [rax + 8 * 0]
 14464 00009B1A 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14465 00009B1E 803804                  	cmp byte [rax], T_closure
 14466 00009B21 0F8539BB0000            	jne L_error_non_closure
 14467 00009B27 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14468                                  
 14469                                  	; recycling the current frame
 14470 00009B2A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14471 00009B2D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14472 00009B30 B906000000              	mov rcx, 2 + 4
 14473 00009B35 488B5D18                	mov rbx, COUNT
 14474 00009B39 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14475 00009B3E 488D55F8                	lea rdx, [rbp - 8 * 1]
 14476                                  .L_tc_recycle_frame_loop_8f2c:
 14477 00009B42 4883F900                	cmp rcx, 0
 14478 00009B46 7413                    	je .L_tc_recycle_frame_done_8f2c
 14479 00009B48 488B32                  	mov rsi, qword [rdx]
 14480 00009B4B 488933                  	mov qword [rbx], rsi
 14481 00009B4E 48FFC9                  	dec rcx
 14482 00009B51 4883EB08                	sub rbx, 8 * 1
 14483 00009B55 4883EA08                	sub rdx, 8 * 1
 14484 00009B59 EBE7                    	jmp .L_tc_recycle_frame_loop_8f2c
 14485                                  .L_tc_recycle_frame_done_8f2c:
 14486 00009B5B 488D6308                	lea rsp, [rbx + 8 * 1]
 14487 00009B5F 5D                      	pop rbp	; the proc will restore it!
 14488 00009B60 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14489                                  
 14490 00009B63 E996010000              	jmp .L_if_end_770a
 14491                                  
 14492                                  	.L_if_else_770a:
 14493 00009B68 488B4528                	mov rax, PARAM(1)	; param b
 14494 00009B6C 50                      	push rax
 14495 00009B6D 6A01                    	push 1	; arg count
 14496 00009B6F 488B0425[410E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14497 00009B77 803805                  	cmp byte [rax], T_undefined
 14498 00009B7A 0F845CBA0000            	je L_error_fvar_undefined
 14499 00009B80 803804                  	cmp byte [rax], T_closure
 14500 00009B83 0F85D7BA0000            	jne L_error_non_closure
 14501 00009B89 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14502 00009B8C FF5009                  	call SOB_CLOSURE_CODE(rax)
 14503                                  
 14504 00009B8F 483D[02000000]          	cmp rax, sob_boolean_false
 14505 00009B95 0F8484000000            	je .L_if_else_770b
 14506                                  	; preparing a tail-call
 14507 00009B9B 488B4528                	mov rax, PARAM(1)	; param b
 14508 00009B9F 50                      	push rax
 14509 00009BA0 6A01                    	push 1	; arg count
 14510 00009BA2 488B0425[2F0F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 14511 00009BAA 803805                  	cmp byte [rax], T_undefined
 14512 00009BAD 0F8429BA0000            	je L_error_fvar_undefined
 14513 00009BB3 803804                  	cmp byte [rax], T_closure
 14514 00009BB6 0F85A4BA0000            	jne L_error_non_closure
 14515 00009BBC FF7001                  	push SOB_CLOSURE_ENV(rax)
 14516 00009BBF FF5009                  	call SOB_CLOSURE_CODE(rax)
 14517 00009BC2 50                      	push rax
 14518 00009BC3 488B4520                	mov rax, PARAM(0)	; param a
 14519 00009BC7 50                      	push rax
 14520 00009BC8 6A02                    	push 2	; arg count
 14521 00009BCA 488B4510                	mov rax, ENV
 14522 00009BCE 488B00                  	mov rax, qword [rax + 8 * 0]
 14523 00009BD1 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14524 00009BD5 803804                  	cmp byte [rax], T_closure
 14525 00009BD8 0F8582BA0000            	jne L_error_non_closure
 14526 00009BDE FF7001                  	push SOB_CLOSURE_ENV(rax)
 14527                                  
 14528                                  	; recycling the current frame
 14529 00009BE1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14530 00009BE4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14531 00009BE7 B906000000              	mov rcx, 2 + 4
 14532 00009BEC 488B5D18                	mov rbx, COUNT
 14533 00009BF0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14534 00009BF5 488D55F8                	lea rdx, [rbp - 8 * 1]
 14535                                  .L_tc_recycle_frame_loop_8f2d:
 14536 00009BF9 4883F900                	cmp rcx, 0
 14537 00009BFD 7413                    	je .L_tc_recycle_frame_done_8f2d
 14538 00009BFF 488B32                  	mov rsi, qword [rdx]
 14539 00009C02 488933                  	mov qword [rbx], rsi
 14540 00009C05 48FFC9                  	dec rcx
 14541 00009C08 4883EB08                	sub rbx, 8 * 1
 14542 00009C0C 4883EA08                	sub rdx, 8 * 1
 14543 00009C10 EBE7                    	jmp .L_tc_recycle_frame_loop_8f2d
 14544                                  .L_tc_recycle_frame_done_8f2d:
 14545 00009C12 488D6308                	lea rsp, [rbx + 8 * 1]
 14546 00009C16 5D                      	pop rbp	; the proc will restore it!
 14547 00009C17 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14548                                  
 14549 00009C1A E9DF000000              	jmp .L_if_end_770b
 14550                                  
 14551                                  	.L_if_else_770b:
 14552 00009C1F 488B4528                	mov rax, PARAM(1)	; param b
 14553 00009C23 50                      	push rax
 14554 00009C24 6A01                    	push 1	; arg count
 14555 00009C26 488B0425[300E0000]      	mov rax, qword [free_var_8]	; free var real?
 14556 00009C2E 803805                  	cmp byte [rax], T_undefined
 14557 00009C31 0F84A5B90000            	je L_error_fvar_undefined
 14558 00009C37 803804                  	cmp byte [rax], T_closure
 14559 00009C3A 0F8520BA0000            	jne L_error_non_closure
 14560 00009C40 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14561 00009C43 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14562                                  
 14563 00009C46 483D[02000000]          	cmp rax, sob_boolean_false
 14564 00009C4C 745E                    	je .L_if_else_770c
 14565                                  	; preparing a tail-call
 14566 00009C4E 488B4528                	mov rax, PARAM(1)	; param b
 14567 00009C52 50                      	push rax
 14568 00009C53 488B4520                	mov rax, PARAM(0)	; param a
 14569 00009C57 50                      	push rax
 14570 00009C58 6A02                    	push 2	; arg count
 14571 00009C5A 488B4510                	mov rax, ENV
 14572 00009C5E 488B00                  	mov rax, qword [rax + 8 * 0]
 14573 00009C61 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14574 00009C65 803804                  	cmp byte [rax], T_closure
 14575 00009C68 0F85F2B90000            	jne L_error_non_closure
 14576 00009C6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 14577                                  
 14578                                  	; recycling the current frame
 14579 00009C71 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14580 00009C74 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14581 00009C77 B906000000              	mov rcx, 2 + 4
 14582 00009C7C 488B5D18                	mov rbx, COUNT
 14583 00009C80 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14584 00009C85 488D55F8                	lea rdx, [rbp - 8 * 1]
 14585                                  .L_tc_recycle_frame_loop_8f2e:
 14586 00009C89 4883F900                	cmp rcx, 0
 14587 00009C8D 7413                    	je .L_tc_recycle_frame_done_8f2e
 14588 00009C8F 488B32                  	mov rsi, qword [rdx]
 14589 00009C92 488933                  	mov qword [rbx], rsi
 14590 00009C95 48FFC9                  	dec rcx
 14591 00009C98 4883EB08                	sub rbx, 8 * 1
 14592 00009C9C 4883EA08                	sub rdx, 8 * 1
 14593 00009CA0 EBE7                    	jmp .L_tc_recycle_frame_loop_8f2e
 14594                                  .L_tc_recycle_frame_done_8f2e:
 14595 00009CA2 488D6308                	lea rsp, [rbx + 8 * 1]
 14596 00009CA6 5D                      	pop rbp	; the proc will restore it!
 14597 00009CA7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14598                                  
 14599 00009CAA EB52                    	jmp .L_if_end_770c
 14600                                  
 14601                                  	.L_if_else_770c:
 14602                                  	; preparing a tail-call
 14603 00009CAC 6A00                    	push 0	; arg count
 14604 00009CAE 488B4510                	mov rax, ENV
 14605 00009CB2 488B4008                	mov rax, qword [rax + 8 * 1]
 14606 00009CB6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14607 00009CB9 803804                  	cmp byte [rax], T_closure
 14608 00009CBC 0F859EB90000            	jne L_error_non_closure
 14609 00009CC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14610                                  
 14611                                  	; recycling the current frame
 14612 00009CC5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14613 00009CC8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14614 00009CCB B904000000              	mov rcx, 0 + 4
 14615 00009CD0 488B5D18                	mov rbx, COUNT
 14616 00009CD4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14617 00009CD9 488D55F8                	lea rdx, [rbp - 8 * 1]
 14618                                  .L_tc_recycle_frame_loop_8f2f:
 14619 00009CDD 4883F900                	cmp rcx, 0
 14620 00009CE1 7413                    	je .L_tc_recycle_frame_done_8f2f
 14621 00009CE3 488B32                  	mov rsi, qword [rdx]
 14622 00009CE6 488933                  	mov qword [rbx], rsi
 14623 00009CE9 48FFC9                  	dec rcx
 14624 00009CEC 4883EB08                	sub rbx, 8 * 1
 14625 00009CF0 4883EA08                	sub rdx, 8 * 1
 14626 00009CF4 EBE7                    	jmp .L_tc_recycle_frame_loop_8f2f
 14627                                  .L_tc_recycle_frame_done_8f2f:
 14628 00009CF6 488D6308                	lea rsp, [rbx + 8 * 1]
 14629 00009CFA 5D                      	pop rbp	; the proc will restore it!
 14630 00009CFB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14631                                  
 14632                                  	.L_if_end_770c:
 14633                                  
 14634                                  	.L_if_end_770b:
 14635                                  
 14636                                  	.L_if_end_770a:
 14637                                  
 14638 00009CFE EB52                    	jmp .L_if_end_7709
 14639                                  
 14640                                  	.L_if_else_7709:
 14641                                  	; preparing a tail-call
 14642 00009D00 6A00                    	push 0	; arg count
 14643 00009D02 488B4510                	mov rax, ENV
 14644 00009D06 488B4008                	mov rax, qword [rax + 8 * 1]
 14645 00009D0A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14646 00009D0D 803804                  	cmp byte [rax], T_closure
 14647 00009D10 0F854AB90000            	jne L_error_non_closure
 14648 00009D16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14649                                  
 14650                                  	; recycling the current frame
 14651 00009D19 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14652 00009D1C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14653 00009D1F B904000000              	mov rcx, 0 + 4
 14654 00009D24 488B5D18                	mov rbx, COUNT
 14655 00009D28 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14656 00009D2D 488D55F8                	lea rdx, [rbp - 8 * 1]
 14657                                  .L_tc_recycle_frame_loop_8f30:
 14658 00009D31 4883F900                	cmp rcx, 0
 14659 00009D35 7413                    	je .L_tc_recycle_frame_done_8f30
 14660 00009D37 488B32                  	mov rsi, qword [rdx]
 14661 00009D3A 488933                  	mov qword [rbx], rsi
 14662 00009D3D 48FFC9                  	dec rcx
 14663 00009D40 4883EB08                	sub rbx, 8 * 1
 14664 00009D44 4883EA08                	sub rdx, 8 * 1
 14665 00009D48 EBE7                    	jmp .L_tc_recycle_frame_loop_8f30
 14666                                  .L_tc_recycle_frame_done_8f30:
 14667 00009D4A 488D6308                	lea rsp, [rbx + 8 * 1]
 14668 00009D4E 5D                      	pop rbp	; the proc will restore it!
 14669 00009D4F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14670                                  
 14671                                  	.L_if_end_7709:
 14672                                  
 14673                                  	.L_if_end_7705:
 14674                                  
 14675                                  	.L_if_end_7701:
 14676 00009D52 C9                      	leave
 14677 00009D53 C22000                  	ret AND_KILL_FRAME(2)
 14678                                  .L_lambda_simple_end_6d35:	; new closure is in rax
 14679 00009D56 C9                      	leave
 14680 00009D57 C22800                  	ret AND_KILL_FRAME(3)
 14681                                  .L_lambda_simple_end_6d34:	; new closure is in rax
 14682 00009D5A 50                      	push rax
 14683 00009D5B 6A01                    	push 1	; arg count
 14684 00009D5D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14685 00009D62 E8A2B90000              	call malloc
 14686 00009D67 50                      	push rax
 14687 00009D68 BF08000000              	mov rdi, 8 * 1	; new rib
 14688 00009D6D E897B90000              	call malloc
 14689 00009D72 50                      	push rax
 14690 00009D73 BF10000000              	mov rdi, 8 * 2	; extended env
 14691 00009D78 E88CB90000              	call malloc
 14692 00009D7D 488B7D10                	mov rdi, ENV
 14693 00009D81 BE00000000              	mov rsi, 0
 14694 00009D86 BA01000000              	mov rdx, 1
 14695                                  .L_lambda_simple_env_loop_6d36:	; ext_env[i + 1] <-- env[i]
 14696 00009D8B 4883FE01                	cmp rsi, 1
 14697 00009D8F 7410                    	je .L_lambda_simple_env_end_6d36
 14698 00009D91 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14699 00009D95 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14700 00009D99 48FFC6                  	inc rsi
 14701 00009D9C 48FFC2                  	inc rdx
 14702 00009D9F EBEA                    	jmp .L_lambda_simple_env_loop_6d36
 14703                                  .L_lambda_simple_env_end_6d36:
 14704 00009DA1 5B                      	pop rbx
 14705 00009DA2 BE00000000              	mov rsi, 0
 14706                                  .L_lambda_simple_params_loop_6d36:	; copy params
 14707 00009DA7 4883FE01                	cmp rsi, 1
 14708 00009DAB 740E                    	je .L_lambda_simple_params_end_6d36
 14709 00009DAD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14710 00009DB2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14711 00009DB6 48FFC6                  	inc rsi
 14712 00009DB9 EBEC                    	jmp .L_lambda_simple_params_loop_6d36
 14713                                  .L_lambda_simple_params_end_6d36:
 14714 00009DBB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14715 00009DBE 4889C3                  	mov rbx, rax
 14716 00009DC1 58                      	pop rax
 14717 00009DC2 C60004                  	mov byte [rax], T_closure
 14718 00009DC5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14719 00009DC9 48C74009[D69D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d36
 14720 00009DD1 E9440F0000              	jmp .L_lambda_simple_end_6d36
 14721                                  .L_lambda_simple_code_6d36:	; lambda-simple body
 14722 00009DD6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14723 00009DDC 740B                    	je .L_lambda_simple_arity_check_ok_6d36
 14724 00009DDE FF742410                	push qword [rsp + 8 * 2]
 14725 00009DE2 6A01                    	push 1
 14726 00009DE4 E9D9B80000              	jmp L_error_incorrect_arity_simple
 14727                                  .L_lambda_simple_arity_check_ok_6d36:
 14728 00009DE9 C8000000                	enter 0, 0
 14729                                  	; preparing a tail-call
 14730 00009DED 488B0425[83100000]      	mov rax, qword [free_var_43]	; free var __bin-less-than-rr
 14731 00009DF5 803805                  	cmp byte [rax], T_undefined
 14732 00009DF8 0F84DEB70000            	je L_error_fvar_undefined
 14733 00009DFE 50                      	push rax
 14734 00009DFF 488B0425[94100000]      	mov rax, qword [free_var_44]	; free var __bin-less-than-qq
 14735 00009E07 803805                  	cmp byte [rax], T_undefined
 14736 00009E0A 0F84CCB70000            	je L_error_fvar_undefined
 14737 00009E10 50                      	push rax
 14738 00009E11 488B0425[A5100000]      	mov rax, qword [free_var_45]	; free var __bin-less-than-zz
 14739 00009E19 803805                  	cmp byte [rax], T_undefined
 14740 00009E1C 0F84BAB70000            	je L_error_fvar_undefined
 14741 00009E22 50                      	push rax
 14742 00009E23 6A03                    	push 3	; arg count
 14743 00009E25 488B4520                	mov rax, PARAM(0)	; param make-bin-comparator
 14744 00009E29 803804                  	cmp byte [rax], T_closure
 14745 00009E2C 0F852EB80000            	jne L_error_non_closure
 14746 00009E32 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14747 00009E35 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14748 00009E38 50                      	push rax
 14749 00009E39 6A01                    	push 1	; arg count
 14750 00009E3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14751 00009E40 E8C4B80000              	call malloc
 14752 00009E45 50                      	push rax
 14753 00009E46 BF08000000              	mov rdi, 8 * 1	; new rib
 14754 00009E4B E8B9B80000              	call malloc
 14755 00009E50 50                      	push rax
 14756 00009E51 BF18000000              	mov rdi, 8 * 3	; extended env
 14757 00009E56 E8AEB80000              	call malloc
 14758 00009E5B 488B7D10                	mov rdi, ENV
 14759 00009E5F BE00000000              	mov rsi, 0
 14760 00009E64 BA01000000              	mov rdx, 1
 14761                                  .L_lambda_simple_env_loop_6d37:	; ext_env[i + 1] <-- env[i]
 14762 00009E69 4883FE02                	cmp rsi, 2
 14763 00009E6D 7410                    	je .L_lambda_simple_env_end_6d37
 14764 00009E6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14765 00009E73 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14766 00009E77 48FFC6                  	inc rsi
 14767 00009E7A 48FFC2                  	inc rdx
 14768 00009E7D EBEA                    	jmp .L_lambda_simple_env_loop_6d37
 14769                                  .L_lambda_simple_env_end_6d37:
 14770 00009E7F 5B                      	pop rbx
 14771 00009E80 BE00000000              	mov rsi, 0
 14772                                  .L_lambda_simple_params_loop_6d37:	; copy params
 14773 00009E85 4883FE01                	cmp rsi, 1
 14774 00009E89 740E                    	je .L_lambda_simple_params_end_6d37
 14775 00009E8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14776 00009E90 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14777 00009E94 48FFC6                  	inc rsi
 14778 00009E97 EBEC                    	jmp .L_lambda_simple_params_loop_6d37
 14779                                  .L_lambda_simple_params_end_6d37:
 14780 00009E99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14781 00009E9C 4889C3                  	mov rbx, rax
 14782 00009E9F 58                      	pop rax
 14783 00009EA0 C60004                  	mov byte [rax], T_closure
 14784 00009EA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14785 00009EA7 48C74009[B49E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d37
 14786 00009EAF E91D0E0000              	jmp .L_lambda_simple_end_6d37
 14787                                  .L_lambda_simple_code_6d37:	; lambda-simple body
 14788 00009EB4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14789 00009EBA 740B                    	je .L_lambda_simple_arity_check_ok_6d37
 14790 00009EBC FF742410                	push qword [rsp + 8 * 2]
 14791 00009EC0 6A01                    	push 1
 14792 00009EC2 E9FBB70000              	jmp L_error_incorrect_arity_simple
 14793                                  .L_lambda_simple_arity_check_ok_6d37:
 14794 00009EC7 C8000000                	enter 0, 0
 14795                                  	; preparing a tail-call
 14796 00009ECB 488B0425[B6100000]      	mov rax, qword [free_var_46]	; free var __bin-equal-rr
 14797 00009ED3 803805                  	cmp byte [rax], T_undefined
 14798 00009ED6 0F8400B70000            	je L_error_fvar_undefined
 14799 00009EDC 50                      	push rax
 14800 00009EDD 488B0425[C7100000]      	mov rax, qword [free_var_47]	; free var __bin-equal-qq
 14801 00009EE5 803805                  	cmp byte [rax], T_undefined
 14802 00009EE8 0F84EEB60000            	je L_error_fvar_undefined
 14803 00009EEE 50                      	push rax
 14804 00009EEF 488B0425[D8100000]      	mov rax, qword [free_var_48]	; free var __bin-equal-zz
 14805 00009EF7 803805                  	cmp byte [rax], T_undefined
 14806 00009EFA 0F84DCB60000            	je L_error_fvar_undefined
 14807 00009F00 50                      	push rax
 14808 00009F01 6A03                    	push 3	; arg count
 14809 00009F03 488B4510                	mov rax, ENV
 14810 00009F07 488B00                  	mov rax, qword [rax + 8 * 0]
 14811 00009F0A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var make-bin-comparator
 14812 00009F0D 803804                  	cmp byte [rax], T_closure
 14813 00009F10 0F854AB70000            	jne L_error_non_closure
 14814 00009F16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14815 00009F19 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14816 00009F1C 50                      	push rax
 14817 00009F1D 6A01                    	push 1	; arg count
 14818 00009F1F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14819 00009F24 E8E0B70000              	call malloc
 14820 00009F29 50                      	push rax
 14821 00009F2A BF08000000              	mov rdi, 8 * 1	; new rib
 14822 00009F2F E8D5B70000              	call malloc
 14823 00009F34 50                      	push rax
 14824 00009F35 BF20000000              	mov rdi, 8 * 4	; extended env
 14825 00009F3A E8CAB70000              	call malloc
 14826 00009F3F 488B7D10                	mov rdi, ENV
 14827 00009F43 BE00000000              	mov rsi, 0
 14828 00009F48 BA01000000              	mov rdx, 1
 14829                                  .L_lambda_simple_env_loop_6d38:	; ext_env[i + 1] <-- env[i]
 14830 00009F4D 4883FE03                	cmp rsi, 3
 14831 00009F51 7410                    	je .L_lambda_simple_env_end_6d38
 14832 00009F53 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14833 00009F57 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14834 00009F5B 48FFC6                  	inc rsi
 14835 00009F5E 48FFC2                  	inc rdx
 14836 00009F61 EBEA                    	jmp .L_lambda_simple_env_loop_6d38
 14837                                  .L_lambda_simple_env_end_6d38:
 14838 00009F63 5B                      	pop rbx
 14839 00009F64 BE00000000              	mov rsi, 0
 14840                                  .L_lambda_simple_params_loop_6d38:	; copy params
 14841 00009F69 4883FE01                	cmp rsi, 1
 14842 00009F6D 740E                    	je .L_lambda_simple_params_end_6d38
 14843 00009F6F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14844 00009F74 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14845 00009F78 48FFC6                  	inc rsi
 14846 00009F7B EBEC                    	jmp .L_lambda_simple_params_loop_6d38
 14847                                  .L_lambda_simple_params_end_6d38:
 14848 00009F7D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14849 00009F80 4889C3                  	mov rbx, rax
 14850 00009F83 58                      	pop rax
 14851 00009F84 C60004                  	mov byte [rax], T_closure
 14852 00009F87 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14853 00009F8B 48C74009[989F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d38
 14854 00009F93 E9F00C0000              	jmp .L_lambda_simple_end_6d38
 14855                                  .L_lambda_simple_code_6d38:	; lambda-simple body
 14856 00009F98 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14857 00009F9E 740B                    	je .L_lambda_simple_arity_check_ok_6d38
 14858 00009FA0 FF742410                	push qword [rsp + 8 * 2]
 14859 00009FA4 6A01                    	push 1
 14860 00009FA6 E917B70000              	jmp L_error_incorrect_arity_simple
 14861                                  .L_lambda_simple_arity_check_ok_6d38:
 14862 00009FAB C8000000                	enter 0, 0
 14863                                  	; preparing a tail-call
 14864 00009FAF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14865 00009FB4 E850B70000              	call malloc
 14866 00009FB9 50                      	push rax
 14867 00009FBA BF08000000              	mov rdi, 8 * 1	; new rib
 14868 00009FBF E845B70000              	call malloc
 14869 00009FC4 50                      	push rax
 14870 00009FC5 BF28000000              	mov rdi, 8 * 5	; extended env
 14871 00009FCA E83AB70000              	call malloc
 14872 00009FCF 488B7D10                	mov rdi, ENV
 14873 00009FD3 BE00000000              	mov rsi, 0
 14874 00009FD8 BA01000000              	mov rdx, 1
 14875                                  .L_lambda_simple_env_loop_6d39:	; ext_env[i + 1] <-- env[i]
 14876 00009FDD 4883FE04                	cmp rsi, 4
 14877 00009FE1 7410                    	je .L_lambda_simple_env_end_6d39
 14878 00009FE3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14879 00009FE7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14880 00009FEB 48FFC6                  	inc rsi
 14881 00009FEE 48FFC2                  	inc rdx
 14882 00009FF1 EBEA                    	jmp .L_lambda_simple_env_loop_6d39
 14883                                  .L_lambda_simple_env_end_6d39:
 14884 00009FF3 5B                      	pop rbx
 14885 00009FF4 BE00000000              	mov rsi, 0
 14886                                  .L_lambda_simple_params_loop_6d39:	; copy params
 14887 00009FF9 4883FE01                	cmp rsi, 1
 14888 00009FFD 740E                    	je .L_lambda_simple_params_end_6d39
 14889 00009FFF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14890 0000A004 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14891 0000A008 48FFC6                  	inc rsi
 14892 0000A00B EBEC                    	jmp .L_lambda_simple_params_loop_6d39
 14893                                  .L_lambda_simple_params_end_6d39:
 14894 0000A00D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14895 0000A010 4889C3                  	mov rbx, rax
 14896 0000A013 58                      	pop rax
 14897 0000A014 C60004                  	mov byte [rax], T_closure
 14898 0000A017 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14899 0000A01B 48C74009[28A00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d39
 14900 0000A023 E99A000000              	jmp .L_lambda_simple_end_6d39
 14901                                  .L_lambda_simple_code_6d39:	; lambda-simple body
 14902 0000A028 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14903 0000A02E 740B                    	je .L_lambda_simple_arity_check_ok_6d39
 14904 0000A030 FF742410                	push qword [rsp + 8 * 2]
 14905 0000A034 6A02                    	push 2
 14906 0000A036 E987B60000              	jmp L_error_incorrect_arity_simple
 14907                                  .L_lambda_simple_arity_check_ok_6d39:
 14908 0000A03B C8000000                	enter 0, 0
 14909                                  	; preparing a tail-call
 14910 0000A03F 488B4528                	mov rax, PARAM(1)	; param b
 14911 0000A043 50                      	push rax
 14912 0000A044 488B4520                	mov rax, PARAM(0)	; param a
 14913 0000A048 50                      	push rax
 14914 0000A049 6A02                    	push 2	; arg count
 14915 0000A04B 488B4510                	mov rax, ENV
 14916 0000A04F 488B4008                	mov rax, qword [rax + 8 * 1]
 14917 0000A053 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 14918 0000A056 803804                  	cmp byte [rax], T_closure
 14919 0000A059 0F8501B60000            	jne L_error_non_closure
 14920 0000A05F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14921 0000A062 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14922 0000A065 50                      	push rax
 14923 0000A066 6A01                    	push 1	; arg count
 14924 0000A068 488B0425[90140000]      	mov rax, qword [free_var_104]	; free var not
 14925 0000A070 803805                  	cmp byte [rax], T_undefined
 14926 0000A073 0F8463B50000            	je L_error_fvar_undefined
 14927 0000A079 803804                  	cmp byte [rax], T_closure
 14928 0000A07C 0F85DEB50000            	jne L_error_non_closure
 14929 0000A082 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14930                                  
 14931                                  	; recycling the current frame
 14932 0000A085 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14933 0000A088 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14934 0000A08B B905000000              	mov rcx, 1 + 4
 14935 0000A090 488B5D18                	mov rbx, COUNT
 14936 0000A094 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14937 0000A099 488D55F8                	lea rdx, [rbp - 8 * 1]
 14938                                  .L_tc_recycle_frame_loop_8f31:
 14939 0000A09D 4883F900                	cmp rcx, 0
 14940 0000A0A1 7413                    	je .L_tc_recycle_frame_done_8f31
 14941 0000A0A3 488B32                  	mov rsi, qword [rdx]
 14942 0000A0A6 488933                  	mov qword [rbx], rsi
 14943 0000A0A9 48FFC9                  	dec rcx
 14944 0000A0AC 4883EB08                	sub rbx, 8 * 1
 14945 0000A0B0 4883EA08                	sub rdx, 8 * 1
 14946 0000A0B4 EBE7                    	jmp .L_tc_recycle_frame_loop_8f31
 14947                                  .L_tc_recycle_frame_done_8f31:
 14948 0000A0B6 488D6308                	lea rsp, [rbx + 8 * 1]
 14949 0000A0BA 5D                      	pop rbp	; the proc will restore it!
 14950 0000A0BB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14951 0000A0BE C9                      	leave
 14952 0000A0BF C22000                  	ret AND_KILL_FRAME(2)
 14953                                  .L_lambda_simple_end_6d39:	; new closure is in rax
 14954 0000A0C2 50                      	push rax
 14955 0000A0C3 6A01                    	push 1	; arg count
 14956 0000A0C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14957 0000A0CA E83AB60000              	call malloc
 14958 0000A0CF 50                      	push rax
 14959 0000A0D0 BF08000000              	mov rdi, 8 * 1	; new rib
 14960 0000A0D5 E82FB60000              	call malloc
 14961 0000A0DA 50                      	push rax
 14962 0000A0DB BF28000000              	mov rdi, 8 * 5	; extended env
 14963 0000A0E0 E824B60000              	call malloc
 14964 0000A0E5 488B7D10                	mov rdi, ENV
 14965 0000A0E9 BE00000000              	mov rsi, 0
 14966 0000A0EE BA01000000              	mov rdx, 1
 14967                                  .L_lambda_simple_env_loop_6d3a:	; ext_env[i + 1] <-- env[i]
 14968 0000A0F3 4883FE04                	cmp rsi, 4
 14969 0000A0F7 7410                    	je .L_lambda_simple_env_end_6d3a
 14970 0000A0F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14971 0000A0FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14972 0000A101 48FFC6                  	inc rsi
 14973 0000A104 48FFC2                  	inc rdx
 14974 0000A107 EBEA                    	jmp .L_lambda_simple_env_loop_6d3a
 14975                                  .L_lambda_simple_env_end_6d3a:
 14976 0000A109 5B                      	pop rbx
 14977 0000A10A BE00000000              	mov rsi, 0
 14978                                  .L_lambda_simple_params_loop_6d3a:	; copy params
 14979 0000A10F 4883FE01                	cmp rsi, 1
 14980 0000A113 740E                    	je .L_lambda_simple_params_end_6d3a
 14981 0000A115 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14982 0000A11A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14983 0000A11E 48FFC6                  	inc rsi
 14984 0000A121 EBEC                    	jmp .L_lambda_simple_params_loop_6d3a
 14985                                  .L_lambda_simple_params_end_6d3a:
 14986 0000A123 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14987 0000A126 4889C3                  	mov rbx, rax
 14988 0000A129 58                      	pop rax
 14989 0000A12A C60004                  	mov byte [rax], T_closure
 14990 0000A12D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14991 0000A131 48C74009[3EA10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d3a
 14992 0000A139 E9010B0000              	jmp .L_lambda_simple_end_6d3a
 14993                                  .L_lambda_simple_code_6d3a:	; lambda-simple body
 14994 0000A13E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14995 0000A144 740B                    	je .L_lambda_simple_arity_check_ok_6d3a
 14996 0000A146 FF742410                	push qword [rsp + 8 * 2]
 14997 0000A14A 6A01                    	push 1
 14998 0000A14C E971B50000              	jmp L_error_incorrect_arity_simple
 14999                                  .L_lambda_simple_arity_check_ok_6d3a:
 15000 0000A151 C8000000                	enter 0, 0
 15001                                  	; preparing a tail-call
 15002 0000A155 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15003 0000A15A E8AAB50000              	call malloc
 15004 0000A15F 50                      	push rax
 15005 0000A160 BF08000000              	mov rdi, 8 * 1	; new rib
 15006 0000A165 E89FB50000              	call malloc
 15007 0000A16A 50                      	push rax
 15008 0000A16B BF30000000              	mov rdi, 8 * 6	; extended env
 15009 0000A170 E894B50000              	call malloc
 15010 0000A175 488B7D10                	mov rdi, ENV
 15011 0000A179 BE00000000              	mov rsi, 0
 15012 0000A17E BA01000000              	mov rdx, 1
 15013                                  .L_lambda_simple_env_loop_6d3b:	; ext_env[i + 1] <-- env[i]
 15014 0000A183 4883FE05                	cmp rsi, 5
 15015 0000A187 7410                    	je .L_lambda_simple_env_end_6d3b
 15016 0000A189 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15017 0000A18D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15018 0000A191 48FFC6                  	inc rsi
 15019 0000A194 48FFC2                  	inc rdx
 15020 0000A197 EBEA                    	jmp .L_lambda_simple_env_loop_6d3b
 15021                                  .L_lambda_simple_env_end_6d3b:
 15022 0000A199 5B                      	pop rbx
 15023 0000A19A BE00000000              	mov rsi, 0
 15024                                  .L_lambda_simple_params_loop_6d3b:	; copy params
 15025 0000A19F 4883FE01                	cmp rsi, 1
 15026 0000A1A3 740E                    	je .L_lambda_simple_params_end_6d3b
 15027 0000A1A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15028 0000A1AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15029 0000A1AE 48FFC6                  	inc rsi
 15030 0000A1B1 EBEC                    	jmp .L_lambda_simple_params_loop_6d3b
 15031                                  .L_lambda_simple_params_end_6d3b:
 15032 0000A1B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15033 0000A1B6 4889C3                  	mov rbx, rax
 15034 0000A1B9 58                      	pop rax
 15035 0000A1BA C60004                  	mov byte [rax], T_closure
 15036 0000A1BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15037 0000A1C1 48C74009[CBA10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d3b
 15038 0000A1C9 EB77                    	jmp .L_lambda_simple_end_6d3b
 15039                                  .L_lambda_simple_code_6d3b:	; lambda-simple body
 15040 0000A1CB 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15041 0000A1D1 740B                    	je .L_lambda_simple_arity_check_ok_6d3b
 15042 0000A1D3 FF742410                	push qword [rsp + 8 * 2]
 15043 0000A1D7 6A02                    	push 2
 15044 0000A1D9 E9E4B40000              	jmp L_error_incorrect_arity_simple
 15045                                  .L_lambda_simple_arity_check_ok_6d3b:
 15046 0000A1DE C8000000                	enter 0, 0
 15047                                  	; preparing a tail-call
 15048 0000A1E2 488B4520                	mov rax, PARAM(0)	; param a
 15049 0000A1E6 50                      	push rax
 15050 0000A1E7 488B4528                	mov rax, PARAM(1)	; param b
 15051 0000A1EB 50                      	push rax
 15052 0000A1EC 6A02                    	push 2	; arg count
 15053 0000A1EE 488B4510                	mov rax, ENV
 15054 0000A1F2 488B4010                	mov rax, qword [rax + 8 * 2]
 15055 0000A1F6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 15056 0000A1F9 803804                  	cmp byte [rax], T_closure
 15057 0000A1FC 0F855EB40000            	jne L_error_non_closure
 15058 0000A202 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15059                                  
 15060                                  	; recycling the current frame
 15061 0000A205 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15062 0000A208 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15063 0000A20B B906000000              	mov rcx, 2 + 4
 15064 0000A210 488B5D18                	mov rbx, COUNT
 15065 0000A214 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15066 0000A219 488D55F8                	lea rdx, [rbp - 8 * 1]
 15067                                  .L_tc_recycle_frame_loop_8f32:
 15068 0000A21D 4883F900                	cmp rcx, 0
 15069 0000A221 7413                    	je .L_tc_recycle_frame_done_8f32
 15070 0000A223 488B32                  	mov rsi, qword [rdx]
 15071 0000A226 488933                  	mov qword [rbx], rsi
 15072 0000A229 48FFC9                  	dec rcx
 15073 0000A22C 4883EB08                	sub rbx, 8 * 1
 15074 0000A230 4883EA08                	sub rdx, 8 * 1
 15075 0000A234 EBE7                    	jmp .L_tc_recycle_frame_loop_8f32
 15076                                  .L_tc_recycle_frame_done_8f32:
 15077 0000A236 488D6308                	lea rsp, [rbx + 8 * 1]
 15078 0000A23A 5D                      	pop rbp	; the proc will restore it!
 15079 0000A23B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15080 0000A23E C9                      	leave
 15081 0000A23F C22000                  	ret AND_KILL_FRAME(2)
 15082                                  .L_lambda_simple_end_6d3b:	; new closure is in rax
 15083 0000A242 50                      	push rax
 15084 0000A243 6A01                    	push 1	; arg count
 15085 0000A245 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15086 0000A24A E8BAB40000              	call malloc
 15087 0000A24F 50                      	push rax
 15088 0000A250 BF08000000              	mov rdi, 8 * 1	; new rib
 15089 0000A255 E8AFB40000              	call malloc
 15090 0000A25A 50                      	push rax
 15091 0000A25B BF30000000              	mov rdi, 8 * 6	; extended env
 15092 0000A260 E8A4B40000              	call malloc
 15093 0000A265 488B7D10                	mov rdi, ENV
 15094 0000A269 BE00000000              	mov rsi, 0
 15095 0000A26E BA01000000              	mov rdx, 1
 15096                                  .L_lambda_simple_env_loop_6d3c:	; ext_env[i + 1] <-- env[i]
 15097 0000A273 4883FE05                	cmp rsi, 5
 15098 0000A277 7410                    	je .L_lambda_simple_env_end_6d3c
 15099 0000A279 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15100 0000A27D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15101 0000A281 48FFC6                  	inc rsi
 15102 0000A284 48FFC2                  	inc rdx
 15103 0000A287 EBEA                    	jmp .L_lambda_simple_env_loop_6d3c
 15104                                  .L_lambda_simple_env_end_6d3c:
 15105 0000A289 5B                      	pop rbx
 15106 0000A28A BE00000000              	mov rsi, 0
 15107                                  .L_lambda_simple_params_loop_6d3c:	; copy params
 15108 0000A28F 4883FE01                	cmp rsi, 1
 15109 0000A293 740E                    	je .L_lambda_simple_params_end_6d3c
 15110 0000A295 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15111 0000A29A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15112 0000A29E 48FFC6                  	inc rsi
 15113 0000A2A1 EBEC                    	jmp .L_lambda_simple_params_loop_6d3c
 15114                                  .L_lambda_simple_params_end_6d3c:
 15115 0000A2A3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15116 0000A2A6 4889C3                  	mov rbx, rax
 15117 0000A2A9 58                      	pop rax
 15118 0000A2AA C60004                  	mov byte [rax], T_closure
 15119 0000A2AD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15120 0000A2B1 48C74009[BEA20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d3c
 15121 0000A2B9 E938090000              	jmp .L_lambda_simple_end_6d3c
 15122                                  .L_lambda_simple_code_6d3c:	; lambda-simple body
 15123 0000A2BE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15124 0000A2C4 740B                    	je .L_lambda_simple_arity_check_ok_6d3c
 15125 0000A2C6 FF742410                	push qword [rsp + 8 * 2]
 15126 0000A2CA 6A01                    	push 1
 15127 0000A2CC E9F1B30000              	jmp L_error_incorrect_arity_simple
 15128                                  .L_lambda_simple_arity_check_ok_6d3c:
 15129 0000A2D1 C8000000                	enter 0, 0
 15130                                  	; preparing a tail-call
 15131 0000A2D5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15132 0000A2DA E82AB40000              	call malloc
 15133 0000A2DF 50                      	push rax
 15134 0000A2E0 BF08000000              	mov rdi, 8 * 1	; new rib
 15135 0000A2E5 E81FB40000              	call malloc
 15136 0000A2EA 50                      	push rax
 15137 0000A2EB BF38000000              	mov rdi, 8 * 7	; extended env
 15138 0000A2F0 E814B40000              	call malloc
 15139 0000A2F5 488B7D10                	mov rdi, ENV
 15140 0000A2F9 BE00000000              	mov rsi, 0
 15141 0000A2FE BA01000000              	mov rdx, 1
 15142                                  .L_lambda_simple_env_loop_6d3d:	; ext_env[i + 1] <-- env[i]
 15143 0000A303 4883FE06                	cmp rsi, 6
 15144 0000A307 7410                    	je .L_lambda_simple_env_end_6d3d
 15145 0000A309 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15146 0000A30D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15147 0000A311 48FFC6                  	inc rsi
 15148 0000A314 48FFC2                  	inc rdx
 15149 0000A317 EBEA                    	jmp .L_lambda_simple_env_loop_6d3d
 15150                                  .L_lambda_simple_env_end_6d3d:
 15151 0000A319 5B                      	pop rbx
 15152 0000A31A BE00000000              	mov rsi, 0
 15153                                  .L_lambda_simple_params_loop_6d3d:	; copy params
 15154 0000A31F 4883FE01                	cmp rsi, 1
 15155 0000A323 740E                    	je .L_lambda_simple_params_end_6d3d
 15156 0000A325 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15157 0000A32A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15158 0000A32E 48FFC6                  	inc rsi
 15159 0000A331 EBEC                    	jmp .L_lambda_simple_params_loop_6d3d
 15160                                  .L_lambda_simple_params_end_6d3d:
 15161 0000A333 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15162 0000A336 4889C3                  	mov rbx, rax
 15163 0000A339 58                      	pop rax
 15164 0000A33A C60004                  	mov byte [rax], T_closure
 15165 0000A33D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15166 0000A341 48C74009[4EA30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d3d
 15167 0000A349 E999000000              	jmp .L_lambda_simple_end_6d3d
 15168                                  .L_lambda_simple_code_6d3d:	; lambda-simple body
 15169 0000A34E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15170 0000A354 740B                    	je .L_lambda_simple_arity_check_ok_6d3d
 15171 0000A356 FF742410                	push qword [rsp + 8 * 2]
 15172 0000A35A 6A02                    	push 2
 15173 0000A35C E961B30000              	jmp L_error_incorrect_arity_simple
 15174                                  .L_lambda_simple_arity_check_ok_6d3d:
 15175 0000A361 C8000000                	enter 0, 0
 15176                                  	; preparing a tail-call
 15177 0000A365 488B4528                	mov rax, PARAM(1)	; param b
 15178 0000A369 50                      	push rax
 15179 0000A36A 488B4520                	mov rax, PARAM(0)	; param a
 15180 0000A36E 50                      	push rax
 15181 0000A36F 6A02                    	push 2	; arg count
 15182 0000A371 488B4510                	mov rax, ENV
 15183 0000A375 488B00                  	mov rax, qword [rax + 8 * 0]
 15184 0000A378 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 15185 0000A37B 803804                  	cmp byte [rax], T_closure
 15186 0000A37E 0F85DCB20000            	jne L_error_non_closure
 15187 0000A384 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15188 0000A387 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15189 0000A38A 50                      	push rax
 15190 0000A38B 6A01                    	push 1	; arg count
 15191 0000A38D 488B0425[90140000]      	mov rax, qword [free_var_104]	; free var not
 15192 0000A395 803805                  	cmp byte [rax], T_undefined
 15193 0000A398 0F843EB20000            	je L_error_fvar_undefined
 15194 0000A39E 803804                  	cmp byte [rax], T_closure
 15195 0000A3A1 0F85B9B20000            	jne L_error_non_closure
 15196 0000A3A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15197                                  
 15198                                  	; recycling the current frame
 15199 0000A3AA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15200 0000A3AD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15201 0000A3B0 B905000000              	mov rcx, 1 + 4
 15202 0000A3B5 488B5D18                	mov rbx, COUNT
 15203 0000A3B9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15204 0000A3BE 488D55F8                	lea rdx, [rbp - 8 * 1]
 15205                                  .L_tc_recycle_frame_loop_8f33:
 15206 0000A3C2 4883F900                	cmp rcx, 0
 15207 0000A3C6 7413                    	je .L_tc_recycle_frame_done_8f33
 15208 0000A3C8 488B32                  	mov rsi, qword [rdx]
 15209 0000A3CB 488933                  	mov qword [rbx], rsi
 15210 0000A3CE 48FFC9                  	dec rcx
 15211 0000A3D1 4883EB08                	sub rbx, 8 * 1
 15212 0000A3D5 4883EA08                	sub rdx, 8 * 1
 15213 0000A3D9 EBE7                    	jmp .L_tc_recycle_frame_loop_8f33
 15214                                  .L_tc_recycle_frame_done_8f33:
 15215 0000A3DB 488D6308                	lea rsp, [rbx + 8 * 1]
 15216 0000A3DF 5D                      	pop rbp	; the proc will restore it!
 15217 0000A3E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15218 0000A3E3 C9                      	leave
 15219 0000A3E4 C22000                  	ret AND_KILL_FRAME(2)
 15220                                  .L_lambda_simple_end_6d3d:	; new closure is in rax
 15221 0000A3E7 50                      	push rax
 15222 0000A3E8 6A01                    	push 1	; arg count
 15223 0000A3EA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15224 0000A3EF E815B30000              	call malloc
 15225 0000A3F4 50                      	push rax
 15226 0000A3F5 BF08000000              	mov rdi, 8 * 1	; new rib
 15227 0000A3FA E80AB30000              	call malloc
 15228 0000A3FF 50                      	push rax
 15229 0000A400 BF38000000              	mov rdi, 8 * 7	; extended env
 15230 0000A405 E8FFB20000              	call malloc
 15231 0000A40A 488B7D10                	mov rdi, ENV
 15232 0000A40E BE00000000              	mov rsi, 0
 15233 0000A413 BA01000000              	mov rdx, 1
 15234                                  .L_lambda_simple_env_loop_6d3e:	; ext_env[i + 1] <-- env[i]
 15235 0000A418 4883FE06                	cmp rsi, 6
 15236 0000A41C 7410                    	je .L_lambda_simple_env_end_6d3e
 15237 0000A41E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15238 0000A422 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15239 0000A426 48FFC6                  	inc rsi
 15240 0000A429 48FFC2                  	inc rdx
 15241 0000A42C EBEA                    	jmp .L_lambda_simple_env_loop_6d3e
 15242                                  .L_lambda_simple_env_end_6d3e:
 15243 0000A42E 5B                      	pop rbx
 15244 0000A42F BE00000000              	mov rsi, 0
 15245                                  .L_lambda_simple_params_loop_6d3e:	; copy params
 15246 0000A434 4883FE01                	cmp rsi, 1
 15247 0000A438 740E                    	je .L_lambda_simple_params_end_6d3e
 15248 0000A43A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15249 0000A43F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15250 0000A443 48FFC6                  	inc rsi
 15251 0000A446 EBEC                    	jmp .L_lambda_simple_params_loop_6d3e
 15252                                  .L_lambda_simple_params_end_6d3e:
 15253 0000A448 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15254 0000A44B 4889C3                  	mov rbx, rax
 15255 0000A44E 58                      	pop rax
 15256 0000A44F C60004                  	mov byte [rax], T_closure
 15257 0000A452 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15258 0000A456 48C74009[63A40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d3e
 15259 0000A45E E94A070000              	jmp .L_lambda_simple_end_6d3e
 15260                                  .L_lambda_simple_code_6d3e:	; lambda-simple body
 15261 0000A463 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15262 0000A469 740B                    	je .L_lambda_simple_arity_check_ok_6d3e
 15263 0000A46B FF742410                	push qword [rsp + 8 * 2]
 15264 0000A46F 6A01                    	push 1
 15265 0000A471 E94CB20000              	jmp L_error_incorrect_arity_simple
 15266                                  .L_lambda_simple_arity_check_ok_6d3e:
 15267 0000A476 C8000000                	enter 0, 0
 15268                                  	; preparing a tail-call
 15269 0000A47A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15270 0000A47F E885B20000              	call malloc
 15271 0000A484 50                      	push rax
 15272 0000A485 BF08000000              	mov rdi, 8 * 1	; new rib
 15273 0000A48A E87AB20000              	call malloc
 15274 0000A48F 50                      	push rax
 15275 0000A490 BF40000000              	mov rdi, 8 * 8	; extended env
 15276 0000A495 E86FB20000              	call malloc
 15277 0000A49A 488B7D10                	mov rdi, ENV
 15278 0000A49E BE00000000              	mov rsi, 0
 15279 0000A4A3 BA01000000              	mov rdx, 1
 15280                                  .L_lambda_simple_env_loop_6d3f:	; ext_env[i + 1] <-- env[i]
 15281 0000A4A8 4883FE07                	cmp rsi, 7
 15282 0000A4AC 7410                    	je .L_lambda_simple_env_end_6d3f
 15283 0000A4AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15284 0000A4B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15285 0000A4B6 48FFC6                  	inc rsi
 15286 0000A4B9 48FFC2                  	inc rdx
 15287 0000A4BC EBEA                    	jmp .L_lambda_simple_env_loop_6d3f
 15288                                  .L_lambda_simple_env_end_6d3f:
 15289 0000A4BE 5B                      	pop rbx
 15290 0000A4BF BE00000000              	mov rsi, 0
 15291                                  .L_lambda_simple_params_loop_6d3f:	; copy params
 15292 0000A4C4 4883FE01                	cmp rsi, 1
 15293 0000A4C8 740E                    	je .L_lambda_simple_params_end_6d3f
 15294 0000A4CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15295 0000A4CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15296 0000A4D3 48FFC6                  	inc rsi
 15297 0000A4D6 EBEC                    	jmp .L_lambda_simple_params_loop_6d3f
 15298                                  .L_lambda_simple_params_end_6d3f:
 15299 0000A4D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15300 0000A4DB 4889C3                  	mov rbx, rax
 15301 0000A4DE 58                      	pop rax
 15302 0000A4DF C60004                  	mov byte [rax], T_closure
 15303 0000A4E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15304 0000A4E6 48C74009[F3A40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d3f
 15305 0000A4EE E9AF040000              	jmp .L_lambda_simple_end_6d3f
 15306                                  .L_lambda_simple_code_6d3f:	; lambda-simple body
 15307 0000A4F3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15308 0000A4F9 740B                    	je .L_lambda_simple_arity_check_ok_6d3f
 15309 0000A4FB FF742410                	push qword [rsp + 8 * 2]
 15310 0000A4FF 6A01                    	push 1
 15311 0000A501 E9BCB10000              	jmp L_error_incorrect_arity_simple
 15312                                  .L_lambda_simple_arity_check_ok_6d3f:
 15313 0000A506 C8000000                	enter 0, 0
 15314                                  	; preparing a tail-call
 15315 0000A50A 48B8-                   	mov rax, L_constants + 1881
 15315 0000A50C [5907000000000000] 
 15316 0000A514 50                      	push rax
 15317 0000A515 6A01                    	push 1	; arg count
 15318 0000A517 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15319 0000A51C E8E8B10000              	call malloc
 15320 0000A521 50                      	push rax
 15321 0000A522 BF08000000              	mov rdi, 8 * 1	; new rib
 15322 0000A527 E8DDB10000              	call malloc
 15323 0000A52C 50                      	push rax
 15324 0000A52D BF48000000              	mov rdi, 8 * 9	; extended env
 15325 0000A532 E8D2B10000              	call malloc
 15326 0000A537 488B7D10                	mov rdi, ENV
 15327 0000A53B BE00000000              	mov rsi, 0
 15328 0000A540 BA01000000              	mov rdx, 1
 15329                                  .L_lambda_simple_env_loop_6d40:	; ext_env[i + 1] <-- env[i]
 15330 0000A545 4883FE08                	cmp rsi, 8
 15331 0000A549 7410                    	je .L_lambda_simple_env_end_6d40
 15332 0000A54B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15333 0000A54F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15334 0000A553 48FFC6                  	inc rsi
 15335 0000A556 48FFC2                  	inc rdx
 15336 0000A559 EBEA                    	jmp .L_lambda_simple_env_loop_6d40
 15337                                  .L_lambda_simple_env_end_6d40:
 15338 0000A55B 5B                      	pop rbx
 15339 0000A55C BE00000000              	mov rsi, 0
 15340                                  .L_lambda_simple_params_loop_6d40:	; copy params
 15341 0000A561 4883FE01                	cmp rsi, 1
 15342 0000A565 740E                    	je .L_lambda_simple_params_end_6d40
 15343 0000A567 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15344 0000A56C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15345 0000A570 48FFC6                  	inc rsi
 15346 0000A573 EBEC                    	jmp .L_lambda_simple_params_loop_6d40
 15347                                  .L_lambda_simple_params_end_6d40:
 15348 0000A575 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15349 0000A578 4889C3                  	mov rbx, rax
 15350 0000A57B 58                      	pop rax
 15351 0000A57C C60004                  	mov byte [rax], T_closure
 15352 0000A57F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15353 0000A583 48C74009[90A50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d40
 15354 0000A58B E9C9030000              	jmp .L_lambda_simple_end_6d40
 15355                                  .L_lambda_simple_code_6d40:	; lambda-simple body
 15356 0000A590 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15357 0000A596 740B                    	je .L_lambda_simple_arity_check_ok_6d40
 15358 0000A598 FF742410                	push qword [rsp + 8 * 2]
 15359 0000A59C 6A01                    	push 1
 15360 0000A59E E91FB10000              	jmp L_error_incorrect_arity_simple
 15361                                  .L_lambda_simple_arity_check_ok_6d40:
 15362 0000A5A3 C8000000                	enter 0, 0
 15363                                  
 15364 0000A5A7 BF08000000              	mov rdi, 8
 15365 0000A5AC E858B10000              	call malloc
 15366 0000A5B1 488B5D20                	mov rbx, PARAM(0)	; param run
 15367 0000A5B5 488918                  	mov [rax], rbx	; box run
 15368 0000A5B8 48894520                	mov PARAM(0), rax	;replace param run with box
 15369 0000A5BC 48B8-                   	mov rax, sob_void
 15369 0000A5BE [0000000000000000] 
 15370                                  
 15371 0000A5C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15372 0000A5CB E839B10000              	call malloc
 15373 0000A5D0 50                      	push rax
 15374 0000A5D1 BF08000000              	mov rdi, 8 * 1	; new rib
 15375 0000A5D6 E82EB10000              	call malloc
 15376 0000A5DB 50                      	push rax
 15377 0000A5DC BF50000000              	mov rdi, 8 * 10	; extended env
 15378 0000A5E1 E823B10000              	call malloc
 15379 0000A5E6 488B7D10                	mov rdi, ENV
 15380 0000A5EA BE00000000              	mov rsi, 0
 15381 0000A5EF BA01000000              	mov rdx, 1
 15382                                  .L_lambda_simple_env_loop_6d41:	; ext_env[i + 1] <-- env[i]
 15383 0000A5F4 4883FE09                	cmp rsi, 9
 15384 0000A5F8 7410                    	je .L_lambda_simple_env_end_6d41
 15385 0000A5FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15386 0000A5FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15387 0000A602 48FFC6                  	inc rsi
 15388 0000A605 48FFC2                  	inc rdx
 15389 0000A608 EBEA                    	jmp .L_lambda_simple_env_loop_6d41
 15390                                  .L_lambda_simple_env_end_6d41:
 15391 0000A60A 5B                      	pop rbx
 15392 0000A60B BE00000000              	mov rsi, 0
 15393                                  .L_lambda_simple_params_loop_6d41:	; copy params
 15394 0000A610 4883FE01                	cmp rsi, 1
 15395 0000A614 740E                    	je .L_lambda_simple_params_end_6d41
 15396 0000A616 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15397 0000A61B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15398 0000A61F 48FFC6                  	inc rsi
 15399 0000A622 EBEC                    	jmp .L_lambda_simple_params_loop_6d41
 15400                                  .L_lambda_simple_params_end_6d41:
 15401 0000A624 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15402 0000A627 4889C3                  	mov rbx, rax
 15403 0000A62A 58                      	pop rax
 15404 0000A62B C60004                  	mov byte [rax], T_closure
 15405 0000A62E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15406 0000A632 48C74009[3FA60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d41
 15407 0000A63A E953010000              	jmp .L_lambda_simple_end_6d41
 15408                                  .L_lambda_simple_code_6d41:	; lambda-simple body
 15409 0000A63F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15410 0000A645 740B                    	je .L_lambda_simple_arity_check_ok_6d41
 15411 0000A647 FF742410                	push qword [rsp + 8 * 2]
 15412 0000A64B 6A02                    	push 2
 15413 0000A64D E970B00000              	jmp L_error_incorrect_arity_simple
 15414                                  .L_lambda_simple_arity_check_ok_6d41:
 15415 0000A652 C8000000                	enter 0, 0
 15416 0000A656 488B4528                	mov rax, PARAM(1)	; param s
 15417 0000A65A 50                      	push rax
 15418 0000A65B 6A01                    	push 1	; arg count
 15419 0000A65D 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 15420 0000A665 803805                  	cmp byte [rax], T_undefined
 15421 0000A668 0F846EAF0000            	je L_error_fvar_undefined
 15422 0000A66E 803804                  	cmp byte [rax], T_closure
 15423 0000A671 0F85E9AF0000            	jne L_error_non_closure
 15424 0000A677 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15425 0000A67A FF5009                  	call SOB_CLOSURE_CODE(rax)
 15426 0000A67D 483D[02000000]          	cmp rax, sob_boolean_false
 15427 0000A683 0F8505010000            	jne .L_or_end_0774
 15428 0000A689 488B4528                	mov rax, PARAM(1)	; param s
 15429 0000A68D 50                      	push rax
 15430 0000A68E 6A01                    	push 1	; arg count
 15431 0000A690 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 15432 0000A698 803805                  	cmp byte [rax], T_undefined
 15433 0000A69B 0F843BAF0000            	je L_error_fvar_undefined
 15434 0000A6A1 803804                  	cmp byte [rax], T_closure
 15435 0000A6A4 0F85B6AF0000            	jne L_error_non_closure
 15436 0000A6AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 15437 0000A6AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 15438 0000A6B0 50                      	push rax
 15439 0000A6B1 488B4520                	mov rax, PARAM(0)	; param a
 15440 0000A6B5 50                      	push rax
 15441 0000A6B6 6A02                    	push 2	; arg count
 15442 0000A6B8 488B4510                	mov rax, ENV
 15443 0000A6BC 488B4008                	mov rax, qword [rax + 8 * 1]
 15444 0000A6C0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-ordering
 15445 0000A6C3 803804                  	cmp byte [rax], T_closure
 15446 0000A6C6 0F8594AF0000            	jne L_error_non_closure
 15447 0000A6CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 15448 0000A6CF FF5009                  	call SOB_CLOSURE_CODE(rax)
 15449                                  
 15450 0000A6D2 483D[02000000]          	cmp rax, sob_boolean_false
 15451 0000A6D8 0F84A6000000            	je .L_if_else_770d
 15452                                  	; preparing a tail-call
 15453 0000A6DE 488B4528                	mov rax, PARAM(1)	; param s
 15454 0000A6E2 50                      	push rax
 15455 0000A6E3 6A01                    	push 1	; arg count
 15456 0000A6E5 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 15457 0000A6ED 803805                  	cmp byte [rax], T_undefined
 15458 0000A6F0 0F84E6AE0000            	je L_error_fvar_undefined
 15459 0000A6F6 803804                  	cmp byte [rax], T_closure
 15460 0000A6F9 0F8561AF0000            	jne L_error_non_closure
 15461 0000A6FF FF7001                  	push SOB_CLOSURE_ENV(rax)
 15462 0000A702 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15463 0000A705 50                      	push rax
 15464 0000A706 488B4528                	mov rax, PARAM(1)	; param s
 15465 0000A70A 50                      	push rax
 15466 0000A70B 6A01                    	push 1	; arg count
 15467 0000A70D 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 15468 0000A715 803805                  	cmp byte [rax], T_undefined
 15469 0000A718 0F84BEAE0000            	je L_error_fvar_undefined
 15470 0000A71E 803804                  	cmp byte [rax], T_closure
 15471 0000A721 0F8539AF0000            	jne L_error_non_closure
 15472 0000A727 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15473 0000A72A FF5009                  	call SOB_CLOSURE_CODE(rax)
 15474 0000A72D 50                      	push rax
 15475 0000A72E 6A02                    	push 2	; arg count
 15476 0000A730 488B4510                	mov rax, ENV
 15477 0000A734 488B00                  	mov rax, qword [rax + 8 * 0]
 15478 0000A737 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 15479 0000A73A 488B00                  	mov rax, qword [rax]
 15480 0000A73D 803804                  	cmp byte [rax], T_closure
 15481 0000A740 0F851AAF0000            	jne L_error_non_closure
 15482 0000A746 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15483                                  
 15484                                  	; recycling the current frame
 15485 0000A749 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15486 0000A74C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15487 0000A74F B906000000              	mov rcx, 2 + 4
 15488 0000A754 488B5D18                	mov rbx, COUNT
 15489 0000A758 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15490 0000A75D 488D55F8                	lea rdx, [rbp - 8 * 1]
 15491                                  .L_tc_recycle_frame_loop_8f34:
 15492 0000A761 4883F900                	cmp rcx, 0
 15493 0000A765 7413                    	je .L_tc_recycle_frame_done_8f34
 15494 0000A767 488B32                  	mov rsi, qword [rdx]
 15495 0000A76A 488933                  	mov qword [rbx], rsi
 15496 0000A76D 48FFC9                  	dec rcx
 15497 0000A770 4883EB08                	sub rbx, 8 * 1
 15498 0000A774 4883EA08                	sub rdx, 8 * 1
 15499 0000A778 EBE7                    	jmp .L_tc_recycle_frame_loop_8f34
 15500                                  .L_tc_recycle_frame_done_8f34:
 15501 0000A77A 488D6308                	lea rsp, [rbx + 8 * 1]
 15502 0000A77E 5D                      	pop rbp	; the proc will restore it!
 15503 0000A77F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15504                                  
 15505 0000A782 EB0A                    	jmp .L_if_end_770d
 15506                                  
 15507                                  	.L_if_else_770d:
 15508 0000A784 48B8-                   	mov rax, L_constants + 2
 15508 0000A786 [0200000000000000] 
 15509                                  
 15510                                  	.L_if_end_770d:
 15511                                  .L_or_end_0774:
 15512 0000A78E C9                      	leave
 15513 0000A78F C22000                  	ret AND_KILL_FRAME(2)
 15514                                  .L_lambda_simple_end_6d41:	; new closure is in rax
 15515                                  
 15516 0000A792 50                      	push rax
 15517 0000A793 488B4520                	mov rax, PARAM(0)	; param run
 15518                                  
 15519 0000A797 8F00                    	pop qword[rax]
 15520 0000A799 48B8-                   	mov rax, sob_void
 15520 0000A79B [0000000000000000] 
 15521                                  
 15522 0000A7A3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15523 0000A7A8 E85CAF0000              	call malloc
 15524 0000A7AD 50                      	push rax
 15525 0000A7AE BF08000000              	mov rdi, 8 * 1	; new rib
 15526 0000A7B3 E851AF0000              	call malloc
 15527 0000A7B8 50                      	push rax
 15528 0000A7B9 BF50000000              	mov rdi, 8 * 10	; extended env
 15529 0000A7BE E846AF0000              	call malloc
 15530 0000A7C3 488B7D10                	mov rdi, ENV
 15531 0000A7C7 BE00000000              	mov rsi, 0
 15532 0000A7CC BA01000000              	mov rdx, 1
 15533                                  .L_lambda_opt_env_loop_0f5e:	; ext_env[i + 1] <-- env[i]
 15534 0000A7D1 4883FE09                	cmp rsi, 9
 15535 0000A7D5 7410                    	je .L_lambda_opt_env_end_0f5e
 15536 0000A7D7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15537 0000A7DB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15538 0000A7DF 48FFC6                  	inc rsi
 15539 0000A7E2 48FFC2                  	inc rdx
 15540 0000A7E5 EBEA                    	jmp .L_lambda_opt_env_loop_0f5e
 15541                                  .L_lambda_opt_env_end_0f5e:
 15542 0000A7E7 5B                      	pop rbx
 15543 0000A7E8 BE00000000              	mov rsi, 0
 15544                                  .L_lambda_opt_params_loop_0f5e:	; copy params
 15545 0000A7ED 4883FE01                	cmp rsi, 1
 15546 0000A7F1 740E                    	je .L_lambda_opt_params_end_0f5e
 15547 0000A7F3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15548 0000A7F8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15549 0000A7FC 48FFC6                  	inc rsi
 15550 0000A7FF EBEC                    	jmp .L_lambda_opt_params_loop_0f5e
 15551                                  .L_lambda_opt_params_end_0f5e:
 15552 0000A801 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15553 0000A804 4889C3                  	mov rbx, rax
 15554 0000A807 58                      	pop rax
 15555 0000A808 C60004                  	mov byte [rax], T_closure
 15556 0000A80B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15557 0000A80F 48C74009[1CA80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f5e
 15558 0000A817 E939010000              	jmp .L_lambda_opt_end_0f5e
 15559                                  .L_lambda_opt_code_0f5e:	; lambda-simple body
 15560 0000A81C 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 15561 0000A822 740D                    	je .L_lambda_opt_arity_check_exact_0f5e ;	 if equal, go to exact arity
 15562 0000A824 7F42                    	jg .L_lambda_opt_arity_check_more_0f5e ;	 if greater than, go to arity more
 15563 0000A826 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 15564 0000A82A 6A01                     	push 1
 15565 0000A82C E9A5AE0000              	jmp L_error_incorrect_arity_opt
 15566                                  	.L_lambda_opt_arity_check_exact_0f5e:
 15567 0000A831 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 15568 0000A836 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 15569 0000A83B 4883EC08                	sub rsp, 8
 15570 0000A83F 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 15571                                  	.L_lambda_opt_exact_shifting_loop_0f5e:
 15572 0000A843 488B5108                	mov rdx, [rcx + 8]
 15573 0000A847 488911                  	mov [rcx], rdx
 15574 0000A84A 4883C108                	add rcx, 8
 15575 0000A84E 4839CB                  	cmp rbx, rcx
 15576 0000A851 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f5e
 15577                                  	.L_lambda_opt_exact_shifting_loop_end_0f5e:
 15578 0000A853 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 15579 0000A85A 4883C001                	add rax, 1 ; 	arg count += 1
 15580 0000A85E 4889442410              	mov qword [rsp + 8 * 2], rax
 15581 0000A863 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f5e
 15582                                  	.L_lambda_opt_arity_check_more_0f5e:
 15583 0000A868 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 15583 0000A86A [0100000000000000] 
 15584 0000A872 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 15585 0000A878 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f5e
 15586                                  	.L_lambda_opt_stack_shrink_loop_0f5e:
 15587 0000A87A BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 15588 0000A87F E885AE0000              	call malloc ;	 allocated memory for the optional scheme list
 15589 0000A884 C60021                  	mov byte[rax], T_pair ;	 set type pair
 15590 0000A887 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 15591 0000A88B 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 15592 0000A88E 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 15593 0000A893 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 15594 0000A898 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 15595 0000A89C 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 15596                                  	.L_lambda_opt_more_shifting_loop_0f5e:
 15597 0000A8A1 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 15598 0000A8A4 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 15599 0000A8A8 4883EB08                	sub rbx, 8 
 15600 0000A8AC 4839DC                  	cmp rsp, rbx
 15601 0000A8AF 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f5e
 15602                                  	.L_lambda_opt_more_shifting_loop_end_0f5e:
 15603 0000A8B1 4883C408                	add rsp, 8 ;	 update rsp
 15604 0000A8B5 488B5C2410              	mov rbx, [rsp + 8 * 2]
 15605 0000A8BA 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 15606 0000A8BE 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 15607 0000A8C3 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15608 0000A8C9 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f5e
 15609                                  	.L_lambda_opt_stack_shrink_loop_exit_0f5e:
 15610 0000A8CB 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 15611 0000A8D0 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 15612 0000A8D5 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 15613 0000A8DA E82AAE0000              	call malloc ;	 allocated memory for the optional scheme list
 15614 0000A8DF C60021                  	mov byte[rax], T_pair ;	 set type pair
 15615 0000A8E2 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 15616 0000A8E6 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 15617 0000A8EA 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 15618                                  	.L_lambda_opt_stack_adjusted_0f5e:
 15619 0000A8EF C8000000                	enter 0, 0
 15620                                  	; preparing a tail-call
 15621 0000A8F3 488B4528                	mov rax, PARAM(1)	; param s
 15622 0000A8F7 50                      	push rax
 15623 0000A8F8 488B4520                	mov rax, PARAM(0)	; param a
 15624 0000A8FC 50                      	push rax
 15625 0000A8FD 6A02                    	push 2	; arg count
 15626 0000A8FF 488B4510                	mov rax, ENV
 15627 0000A903 488B00                  	mov rax, qword [rax + 8 * 0]
 15628 0000A906 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 15629 0000A909 488B00                  	mov rax, qword [rax]
 15630 0000A90C 803804                  	cmp byte [rax], T_closure
 15631 0000A90F 0F854BAD0000            	jne L_error_non_closure
 15632 0000A915 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15633                                  
 15634                                  	; recycling the current frame
 15635 0000A918 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15636 0000A91B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15637 0000A91E B906000000              	mov rcx, 2 + 4
 15638 0000A923 488B5D18                	mov rbx, COUNT
 15639 0000A927 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15640 0000A92C 488D55F8                	lea rdx, [rbp - 8 * 1]
 15641                                  .L_tc_recycle_frame_loop_8f35:
 15642 0000A930 4883F900                	cmp rcx, 0
 15643 0000A934 7413                    	je .L_tc_recycle_frame_done_8f35
 15644 0000A936 488B32                  	mov rsi, qword [rdx]
 15645 0000A939 488933                  	mov qword [rbx], rsi
 15646 0000A93C 48FFC9                  	dec rcx
 15647 0000A93F 4883EB08                	sub rbx, 8 * 1
 15648 0000A943 4883EA08                	sub rdx, 8 * 1
 15649 0000A947 EBE7                    	jmp .L_tc_recycle_frame_loop_8f35
 15650                                  .L_tc_recycle_frame_done_8f35:
 15651 0000A949 488D6308                	lea rsp, [rbx + 8 * 1]
 15652 0000A94D 5D                      	pop rbp	; the proc will restore it!
 15653 0000A94E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15654 0000A951 C9                      	leave
 15655 0000A952 C22000                  	ret AND_KILL_FRAME(2)
 15656                                  .L_lambda_opt_end_0f5e:	; new closure is in rax
 15657 0000A955 C9                      	leave
 15658 0000A956 C21800                  	ret AND_KILL_FRAME(1)
 15659                                  .L_lambda_simple_end_6d40:	; new closure is in rax
 15660 0000A959 803804                  	cmp byte [rax], T_closure
 15661 0000A95C 0F85FEAC0000            	jne L_error_non_closure
 15662 0000A962 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15663                                  
 15664                                  	; recycling the current frame
 15665 0000A965 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15666 0000A968 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15667 0000A96B B905000000              	mov rcx, 1 + 4
 15668 0000A970 488B5D18                	mov rbx, COUNT
 15669 0000A974 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15670 0000A979 488D55F8                	lea rdx, [rbp - 8 * 1]
 15671                                  .L_tc_recycle_frame_loop_8f36:
 15672 0000A97D 4883F900                	cmp rcx, 0
 15673 0000A981 7413                    	je .L_tc_recycle_frame_done_8f36
 15674 0000A983 488B32                  	mov rsi, qword [rdx]
 15675 0000A986 488933                  	mov qword [rbx], rsi
 15676 0000A989 48FFC9                  	dec rcx
 15677 0000A98C 4883EB08                	sub rbx, 8 * 1
 15678 0000A990 4883EA08                	sub rdx, 8 * 1
 15679 0000A994 EBE7                    	jmp .L_tc_recycle_frame_loop_8f36
 15680                                  .L_tc_recycle_frame_done_8f36:
 15681 0000A996 488D6308                	lea rsp, [rbx + 8 * 1]
 15682 0000A99A 5D                      	pop rbp	; the proc will restore it!
 15683 0000A99B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15684 0000A99E C9                      	leave
 15685 0000A99F C21800                  	ret AND_KILL_FRAME(1)
 15686                                  .L_lambda_simple_end_6d3f:	; new closure is in rax
 15687 0000A9A2 50                      	push rax
 15688 0000A9A3 6A01                    	push 1	; arg count
 15689 0000A9A5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15690 0000A9AA E85AAD0000              	call malloc
 15691 0000A9AF 50                      	push rax
 15692 0000A9B0 BF08000000              	mov rdi, 8 * 1	; new rib
 15693 0000A9B5 E84FAD0000              	call malloc
 15694 0000A9BA 50                      	push rax
 15695 0000A9BB BF40000000              	mov rdi, 8 * 8	; extended env
 15696 0000A9C0 E844AD0000              	call malloc
 15697 0000A9C5 488B7D10                	mov rdi, ENV
 15698 0000A9C9 BE00000000              	mov rsi, 0
 15699 0000A9CE BA01000000              	mov rdx, 1
 15700                                  .L_lambda_simple_env_loop_6d42:	; ext_env[i + 1] <-- env[i]
 15701 0000A9D3 4883FE07                	cmp rsi, 7
 15702 0000A9D7 7410                    	je .L_lambda_simple_env_end_6d42
 15703 0000A9D9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15704 0000A9DD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15705 0000A9E1 48FFC6                  	inc rsi
 15706 0000A9E4 48FFC2                  	inc rdx
 15707 0000A9E7 EBEA                    	jmp .L_lambda_simple_env_loop_6d42
 15708                                  .L_lambda_simple_env_end_6d42:
 15709 0000A9E9 5B                      	pop rbx
 15710 0000A9EA BE00000000              	mov rsi, 0
 15711                                  .L_lambda_simple_params_loop_6d42:	; copy params
 15712 0000A9EF 4883FE01                	cmp rsi, 1
 15713 0000A9F3 740E                    	je .L_lambda_simple_params_end_6d42
 15714 0000A9F5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15715 0000A9FA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15716 0000A9FE 48FFC6                  	inc rsi
 15717 0000AA01 EBEC                    	jmp .L_lambda_simple_params_loop_6d42
 15718                                  .L_lambda_simple_params_end_6d42:
 15719 0000AA03 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15720 0000AA06 4889C3                  	mov rbx, rax
 15721 0000AA09 58                      	pop rax
 15722 0000AA0A C60004                  	mov byte [rax], T_closure
 15723 0000AA0D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15724 0000AA11 48C74009[1EAA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d42
 15725 0000AA19 E946010000              	jmp .L_lambda_simple_end_6d42
 15726                                  .L_lambda_simple_code_6d42:	; lambda-simple body
 15727 0000AA1E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15728 0000AA24 740B                    	je .L_lambda_simple_arity_check_ok_6d42
 15729 0000AA26 FF742410                	push qword [rsp + 8 * 2]
 15730 0000AA2A 6A01                    	push 1
 15731 0000AA2C E991AC0000              	jmp L_error_incorrect_arity_simple
 15732                                  .L_lambda_simple_arity_check_ok_6d42:
 15733 0000AA31 C8000000                	enter 0, 0
 15734 0000AA35 488B4510                	mov rax, ENV
 15735 0000AA39 488B4020                	mov rax, qword [rax + 8 * 4]
 15736 0000AA3D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 15737 0000AA40 50                      	push rax
 15738 0000AA41 6A01                    	push 1	; arg count
 15739 0000AA43 488B4520                	mov rax, PARAM(0)	; param make-run
 15740 0000AA47 803804                  	cmp byte [rax], T_closure
 15741 0000AA4A 0F8510AC0000            	jne L_error_non_closure
 15742 0000AA50 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15743 0000AA53 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15744 0000AA56 48890425[C2150000]      	mov qword [free_var_122], rax	; free var <
 15745 0000AA5E 803805                  	cmp byte [rax], T_undefined
 15746 0000AA61 0F8475AB0000            	je L_error_fvar_undefined
 15747 0000AA67 48B8-                   	mov rax, sob_void
 15747 0000AA69 [0000000000000000] 
 15748                                  
 15749 0000AA71 488B4510                	mov rax, ENV
 15750 0000AA75 488B00                  	mov rax, qword [rax + 8 * 0]
 15751 0000AA78 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<=?
 15752 0000AA7B 50                      	push rax
 15753 0000AA7C 6A01                    	push 1	; arg count
 15754 0000AA7E 488B4520                	mov rax, PARAM(0)	; param make-run
 15755 0000AA82 803804                  	cmp byte [rax], T_closure
 15756 0000AA85 0F85D5AB0000            	jne L_error_non_closure
 15757 0000AA8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 15758 0000AA8E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15759 0000AA91 48890425[D3150000]      	mov qword [free_var_123], rax	; free var <=
 15760 0000AA99 803805                  	cmp byte [rax], T_undefined
 15761 0000AA9C 0F843AAB0000            	je L_error_fvar_undefined
 15762 0000AAA2 48B8-                   	mov rax, sob_void
 15762 0000AAA4 [0000000000000000] 
 15763                                  
 15764 0000AAAC 488B4510                	mov rax, ENV
 15765 0000AAB0 488B4008                	mov rax, qword [rax + 8 * 1]
 15766 0000AAB4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 15767 0000AAB7 50                      	push rax
 15768 0000AAB8 6A01                    	push 1	; arg count
 15769 0000AABA 488B4520                	mov rax, PARAM(0)	; param make-run
 15770 0000AABE 803804                  	cmp byte [rax], T_closure
 15771 0000AAC1 0F8599AB0000            	jne L_error_non_closure
 15772 0000AAC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15773 0000AACA FF5009                  	call SOB_CLOSURE_CODE(rax)
 15774 0000AACD 48890425[E4150000]      	mov qword [free_var_124], rax	; free var >
 15775 0000AAD5 803805                  	cmp byte [rax], T_undefined
 15776 0000AAD8 0F84FEAA0000            	je L_error_fvar_undefined
 15777 0000AADE 48B8-                   	mov rax, sob_void
 15777 0000AAE0 [0000000000000000] 
 15778                                  
 15779 0000AAE8 488B4510                	mov rax, ENV
 15780 0000AAEC 488B4010                	mov rax, qword [rax + 8 * 2]
 15781 0000AAF0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>=?
 15782 0000AAF3 50                      	push rax
 15783 0000AAF4 6A01                    	push 1	; arg count
 15784 0000AAF6 488B4520                	mov rax, PARAM(0)	; param make-run
 15785 0000AAFA 803804                  	cmp byte [rax], T_closure
 15786 0000AAFD 0F855DAB0000            	jne L_error_non_closure
 15787 0000AB03 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15788 0000AB06 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15789 0000AB09 48890425[F5150000]      	mov qword [free_var_125], rax	; free var >=
 15790 0000AB11 803805                  	cmp byte [rax], T_undefined
 15791 0000AB14 0F84C2AA0000            	je L_error_fvar_undefined
 15792 0000AB1A 48B8-                   	mov rax, sob_void
 15792 0000AB1C [0000000000000000] 
 15793                                  
 15794 0000AB24 488B4510                	mov rax, ENV
 15795 0000AB28 488B4018                	mov rax, qword [rax + 8 * 3]
 15796 0000AB2C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin=?
 15797 0000AB2F 50                      	push rax
 15798 0000AB30 6A01                    	push 1	; arg count
 15799 0000AB32 488B4520                	mov rax, PARAM(0)	; param make-run
 15800 0000AB36 803804                  	cmp byte [rax], T_closure
 15801 0000AB39 0F8521AB0000            	jne L_error_non_closure
 15802 0000AB3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 15803 0000AB42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15804 0000AB45 48890425[06160000]      	mov qword [free_var_126], rax	; free var =
 15805 0000AB4D 803805                  	cmp byte [rax], T_undefined
 15806 0000AB50 0F8486AA0000            	je L_error_fvar_undefined
 15807 0000AB56 48B8-                   	mov rax, sob_void
 15807 0000AB58 [0000000000000000] 
 15808 0000AB60 C9                      	leave
 15809 0000AB61 C21800                  	ret AND_KILL_FRAME(1)
 15810                                  .L_lambda_simple_end_6d42:	; new closure is in rax
 15811 0000AB64 803804                  	cmp byte [rax], T_closure
 15812 0000AB67 0F85F3AA0000            	jne L_error_non_closure
 15813 0000AB6D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15814                                  
 15815                                  	; recycling the current frame
 15816 0000AB70 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15817 0000AB73 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15818 0000AB76 B905000000              	mov rcx, 1 + 4
 15819 0000AB7B 488B5D18                	mov rbx, COUNT
 15820 0000AB7F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15821 0000AB84 488D55F8                	lea rdx, [rbp - 8 * 1]
 15822                                  .L_tc_recycle_frame_loop_8f37:
 15823 0000AB88 4883F900                	cmp rcx, 0
 15824 0000AB8C 7413                    	je .L_tc_recycle_frame_done_8f37
 15825 0000AB8E 488B32                  	mov rsi, qword [rdx]
 15826 0000AB91 488933                  	mov qword [rbx], rsi
 15827 0000AB94 48FFC9                  	dec rcx
 15828 0000AB97 4883EB08                	sub rbx, 8 * 1
 15829 0000AB9B 4883EA08                	sub rdx, 8 * 1
 15830 0000AB9F EBE7                    	jmp .L_tc_recycle_frame_loop_8f37
 15831                                  .L_tc_recycle_frame_done_8f37:
 15832 0000ABA1 488D6308                	lea rsp, [rbx + 8 * 1]
 15833 0000ABA5 5D                      	pop rbp	; the proc will restore it!
 15834 0000ABA6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15835 0000ABA9 C9                      	leave
 15836 0000ABAA C21800                  	ret AND_KILL_FRAME(1)
 15837                                  .L_lambda_simple_end_6d3e:	; new closure is in rax
 15838 0000ABAD 803804                  	cmp byte [rax], T_closure
 15839 0000ABB0 0F85AAAA0000            	jne L_error_non_closure
 15840 0000ABB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15841                                  
 15842                                  	; recycling the current frame
 15843 0000ABB9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15844 0000ABBC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15845 0000ABBF B905000000              	mov rcx, 1 + 4
 15846 0000ABC4 488B5D18                	mov rbx, COUNT
 15847 0000ABC8 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15848 0000ABCD 488D55F8                	lea rdx, [rbp - 8 * 1]
 15849                                  .L_tc_recycle_frame_loop_8f38:
 15850 0000ABD1 4883F900                	cmp rcx, 0
 15851 0000ABD5 7413                    	je .L_tc_recycle_frame_done_8f38
 15852 0000ABD7 488B32                  	mov rsi, qword [rdx]
 15853 0000ABDA 488933                  	mov qword [rbx], rsi
 15854 0000ABDD 48FFC9                  	dec rcx
 15855 0000ABE0 4883EB08                	sub rbx, 8 * 1
 15856 0000ABE4 4883EA08                	sub rdx, 8 * 1
 15857 0000ABE8 EBE7                    	jmp .L_tc_recycle_frame_loop_8f38
 15858                                  .L_tc_recycle_frame_done_8f38:
 15859 0000ABEA 488D6308                	lea rsp, [rbx + 8 * 1]
 15860 0000ABEE 5D                      	pop rbp	; the proc will restore it!
 15861 0000ABEF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15862 0000ABF2 C9                      	leave
 15863 0000ABF3 C21800                  	ret AND_KILL_FRAME(1)
 15864                                  .L_lambda_simple_end_6d3c:	; new closure is in rax
 15865 0000ABF6 803804                  	cmp byte [rax], T_closure
 15866 0000ABF9 0F8561AA0000            	jne L_error_non_closure
 15867 0000ABFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 15868                                  
 15869                                  	; recycling the current frame
 15870 0000AC02 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15871 0000AC05 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15872 0000AC08 B905000000              	mov rcx, 1 + 4
 15873 0000AC0D 488B5D18                	mov rbx, COUNT
 15874 0000AC11 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15875 0000AC16 488D55F8                	lea rdx, [rbp - 8 * 1]
 15876                                  .L_tc_recycle_frame_loop_8f39:
 15877 0000AC1A 4883F900                	cmp rcx, 0
 15878 0000AC1E 7413                    	je .L_tc_recycle_frame_done_8f39
 15879 0000AC20 488B32                  	mov rsi, qword [rdx]
 15880 0000AC23 488933                  	mov qword [rbx], rsi
 15881 0000AC26 48FFC9                  	dec rcx
 15882 0000AC29 4883EB08                	sub rbx, 8 * 1
 15883 0000AC2D 4883EA08                	sub rdx, 8 * 1
 15884 0000AC31 EBE7                    	jmp .L_tc_recycle_frame_loop_8f39
 15885                                  .L_tc_recycle_frame_done_8f39:
 15886 0000AC33 488D6308                	lea rsp, [rbx + 8 * 1]
 15887 0000AC37 5D                      	pop rbp	; the proc will restore it!
 15888 0000AC38 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15889 0000AC3B C9                      	leave
 15890 0000AC3C C21800                  	ret AND_KILL_FRAME(1)
 15891                                  .L_lambda_simple_end_6d3a:	; new closure is in rax
 15892 0000AC3F 803804                  	cmp byte [rax], T_closure
 15893 0000AC42 0F8518AA0000            	jne L_error_non_closure
 15894 0000AC48 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15895                                  
 15896                                  	; recycling the current frame
 15897 0000AC4B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15898 0000AC4E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15899 0000AC51 B905000000              	mov rcx, 1 + 4
 15900 0000AC56 488B5D18                	mov rbx, COUNT
 15901 0000AC5A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15902 0000AC5F 488D55F8                	lea rdx, [rbp - 8 * 1]
 15903                                  .L_tc_recycle_frame_loop_8f3a:
 15904 0000AC63 4883F900                	cmp rcx, 0
 15905 0000AC67 7413                    	je .L_tc_recycle_frame_done_8f3a
 15906 0000AC69 488B32                  	mov rsi, qword [rdx]
 15907 0000AC6C 488933                  	mov qword [rbx], rsi
 15908 0000AC6F 48FFC9                  	dec rcx
 15909 0000AC72 4883EB08                	sub rbx, 8 * 1
 15910 0000AC76 4883EA08                	sub rdx, 8 * 1
 15911 0000AC7A EBE7                    	jmp .L_tc_recycle_frame_loop_8f3a
 15912                                  .L_tc_recycle_frame_done_8f3a:
 15913 0000AC7C 488D6308                	lea rsp, [rbx + 8 * 1]
 15914 0000AC80 5D                      	pop rbp	; the proc will restore it!
 15915 0000AC81 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15916 0000AC84 C9                      	leave
 15917 0000AC85 C21800                  	ret AND_KILL_FRAME(1)
 15918                                  .L_lambda_simple_end_6d38:	; new closure is in rax
 15919 0000AC88 803804                  	cmp byte [rax], T_closure
 15920 0000AC8B 0F85CFA90000            	jne L_error_non_closure
 15921 0000AC91 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15922                                  
 15923                                  	; recycling the current frame
 15924 0000AC94 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15925 0000AC97 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15926 0000AC9A B905000000              	mov rcx, 1 + 4
 15927 0000AC9F 488B5D18                	mov rbx, COUNT
 15928 0000ACA3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15929 0000ACA8 488D55F8                	lea rdx, [rbp - 8 * 1]
 15930                                  .L_tc_recycle_frame_loop_8f3b:
 15931 0000ACAC 4883F900                	cmp rcx, 0
 15932 0000ACB0 7413                    	je .L_tc_recycle_frame_done_8f3b
 15933 0000ACB2 488B32                  	mov rsi, qword [rdx]
 15934 0000ACB5 488933                  	mov qword [rbx], rsi
 15935 0000ACB8 48FFC9                  	dec rcx
 15936 0000ACBB 4883EB08                	sub rbx, 8 * 1
 15937 0000ACBF 4883EA08                	sub rdx, 8 * 1
 15938 0000ACC3 EBE7                    	jmp .L_tc_recycle_frame_loop_8f3b
 15939                                  .L_tc_recycle_frame_done_8f3b:
 15940 0000ACC5 488D6308                	lea rsp, [rbx + 8 * 1]
 15941 0000ACC9 5D                      	pop rbp	; the proc will restore it!
 15942 0000ACCA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15943 0000ACCD C9                      	leave
 15944 0000ACCE C21800                  	ret AND_KILL_FRAME(1)
 15945                                  .L_lambda_simple_end_6d37:	; new closure is in rax
 15946 0000ACD1 803804                  	cmp byte [rax], T_closure
 15947 0000ACD4 0F8586A90000            	jne L_error_non_closure
 15948 0000ACDA FF7001                  	push SOB_CLOSURE_ENV(rax)
 15949                                  
 15950                                  	; recycling the current frame
 15951 0000ACDD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15952 0000ACE0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15953 0000ACE3 B905000000              	mov rcx, 1 + 4
 15954 0000ACE8 488B5D18                	mov rbx, COUNT
 15955 0000ACEC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15956 0000ACF1 488D55F8                	lea rdx, [rbp - 8 * 1]
 15957                                  .L_tc_recycle_frame_loop_8f3c:
 15958 0000ACF5 4883F900                	cmp rcx, 0
 15959 0000ACF9 7413                    	je .L_tc_recycle_frame_done_8f3c
 15960 0000ACFB 488B32                  	mov rsi, qword [rdx]
 15961 0000ACFE 488933                  	mov qword [rbx], rsi
 15962 0000AD01 48FFC9                  	dec rcx
 15963 0000AD04 4883EB08                	sub rbx, 8 * 1
 15964 0000AD08 4883EA08                	sub rdx, 8 * 1
 15965 0000AD0C EBE7                    	jmp .L_tc_recycle_frame_loop_8f3c
 15966                                  .L_tc_recycle_frame_done_8f3c:
 15967 0000AD0E 488D6308                	lea rsp, [rbx + 8 * 1]
 15968 0000AD12 5D                      	pop rbp	; the proc will restore it!
 15969 0000AD13 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15970 0000AD16 C9                      	leave
 15971 0000AD17 C21800                  	ret AND_KILL_FRAME(1)
 15972                                  .L_lambda_simple_end_6d36:	; new closure is in rax
 15973 0000AD1A 803804                  	cmp byte [rax], T_closure
 15974 0000AD1D 0F853DA90000            	jne L_error_non_closure
 15975 0000AD23 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15976                                  
 15977                                  	; recycling the current frame
 15978 0000AD26 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15979 0000AD29 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15980 0000AD2C B905000000              	mov rcx, 1 + 4
 15981 0000AD31 488B5D18                	mov rbx, COUNT
 15982 0000AD35 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15983 0000AD3A 488D55F8                	lea rdx, [rbp - 8 * 1]
 15984                                  .L_tc_recycle_frame_loop_8f3d:
 15985 0000AD3E 4883F900                	cmp rcx, 0
 15986 0000AD42 7413                    	je .L_tc_recycle_frame_done_8f3d
 15987 0000AD44 488B32                  	mov rsi, qword [rdx]
 15988 0000AD47 488933                  	mov qword [rbx], rsi
 15989 0000AD4A 48FFC9                  	dec rcx
 15990 0000AD4D 4883EB08                	sub rbx, 8 * 1
 15991 0000AD51 4883EA08                	sub rdx, 8 * 1
 15992 0000AD55 EBE7                    	jmp .L_tc_recycle_frame_loop_8f3d
 15993                                  .L_tc_recycle_frame_done_8f3d:
 15994 0000AD57 488D6308                	lea rsp, [rbx + 8 * 1]
 15995 0000AD5B 5D                      	pop rbp	; the proc will restore it!
 15996 0000AD5C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15997 0000AD5F C9                      	leave
 15998 0000AD60 C21800                  	ret AND_KILL_FRAME(1)
 15999                                  .L_lambda_simple_end_6d33:	; new closure is in rax
 16000 0000AD63 803804                  	cmp byte [rax], T_closure
 16001 0000AD66 0F85F4A80000            	jne L_error_non_closure
 16002 0000AD6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 16003 0000AD6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 16004                                  
 16005 0000AD72 4889C7                  	mov rdi, rax
 16006 0000AD75 E8A1AA0000              	call print_sexpr_if_not_void
 16007                                  
 16008 0000AD7A 48B8-                   	mov rax, L_constants + 1881
 16008 0000AD7C [5907000000000000] 
 16009 0000AD84 50                      	push rax
 16010 0000AD85 6A01                    	push 1	; arg count
 16011 0000AD87 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16012 0000AD8C E878A90000              	call malloc
 16013 0000AD91 50                      	push rax
 16014 0000AD92 BF00000000              	mov rdi, 8 * 0	; new rib
 16015 0000AD97 E86DA90000              	call malloc
 16016 0000AD9C 50                      	push rax
 16017 0000AD9D BF08000000              	mov rdi, 8 * 1	; extended env
 16018 0000ADA2 E862A90000              	call malloc
 16019 0000ADA7 488B7D10                	mov rdi, ENV
 16020 0000ADAB BE00000000              	mov rsi, 0
 16021 0000ADB0 BA01000000              	mov rdx, 1
 16022                                  .L_lambda_simple_env_loop_6d43:	; ext_env[i + 1] <-- env[i]
 16023 0000ADB5 4883FE00                	cmp rsi, 0
 16024 0000ADB9 7410                    	je .L_lambda_simple_env_end_6d43
 16025 0000ADBB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16026 0000ADBF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16027 0000ADC3 48FFC6                  	inc rsi
 16028 0000ADC6 48FFC2                  	inc rdx
 16029 0000ADC9 EBEA                    	jmp .L_lambda_simple_env_loop_6d43
 16030                                  .L_lambda_simple_env_end_6d43:
 16031 0000ADCB 5B                      	pop rbx
 16032 0000ADCC BE00000000              	mov rsi, 0
 16033                                  .L_lambda_simple_params_loop_6d43:	; copy params
 16034 0000ADD1 4883FE00                	cmp rsi, 0
 16035 0000ADD5 740E                    	je .L_lambda_simple_params_end_6d43
 16036 0000ADD7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16037 0000ADDC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16038 0000ADE0 48FFC6                  	inc rsi
 16039 0000ADE3 EBEC                    	jmp .L_lambda_simple_params_loop_6d43
 16040                                  .L_lambda_simple_params_end_6d43:
 16041 0000ADE5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16042 0000ADE8 4889C3                  	mov rbx, rax
 16043 0000ADEB 58                      	pop rax
 16044 0000ADEC C60004                  	mov byte [rax], T_closure
 16045 0000ADEF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16046 0000ADF3 48C74009[00AE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d43
 16047 0000ADFB E93F050000              	jmp .L_lambda_simple_end_6d43
 16048                                  .L_lambda_simple_code_6d43:	; lambda-simple body
 16049 0000AE00 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16050 0000AE06 740B                    	je .L_lambda_simple_arity_check_ok_6d43
 16051 0000AE08 FF742410                	push qword [rsp + 8 * 2]
 16052 0000AE0C 6A01                    	push 1
 16053 0000AE0E E9AFA80000              	jmp L_error_incorrect_arity_simple
 16054                                  .L_lambda_simple_arity_check_ok_6d43:
 16055 0000AE13 C8000000                	enter 0, 0
 16056                                  
 16057 0000AE17 BF08000000              	mov rdi, 8
 16058 0000AE1C E8E8A80000              	call malloc
 16059 0000AE21 488B5D20                	mov rbx, PARAM(0)	; param run
 16060 0000AE25 488918                  	mov [rax], rbx	; box run
 16061 0000AE28 48894520                	mov PARAM(0), rax	;replace param run with box
 16062 0000AE2C 48B8-                   	mov rax, sob_void
 16062 0000AE2E [0000000000000000] 
 16063                                  
 16064 0000AE36 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16065 0000AE3B E8C9A80000              	call malloc
 16066 0000AE40 50                      	push rax
 16067 0000AE41 BF08000000              	mov rdi, 8 * 1	; new rib
 16068 0000AE46 E8BEA80000              	call malloc
 16069 0000AE4B 50                      	push rax
 16070 0000AE4C BF10000000              	mov rdi, 8 * 2	; extended env
 16071 0000AE51 E8B3A80000              	call malloc
 16072 0000AE56 488B7D10                	mov rdi, ENV
 16073 0000AE5A BE00000000              	mov rsi, 0
 16074 0000AE5F BA01000000              	mov rdx, 1
 16075                                  .L_lambda_simple_env_loop_6d44:	; ext_env[i + 1] <-- env[i]
 16076 0000AE64 4883FE01                	cmp rsi, 1
 16077 0000AE68 7410                    	je .L_lambda_simple_env_end_6d44
 16078 0000AE6A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16079 0000AE6E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16080 0000AE72 48FFC6                  	inc rsi
 16081 0000AE75 48FFC2                  	inc rdx
 16082 0000AE78 EBEA                    	jmp .L_lambda_simple_env_loop_6d44
 16083                                  .L_lambda_simple_env_end_6d44:
 16084 0000AE7A 5B                      	pop rbx
 16085 0000AE7B BE00000000              	mov rsi, 0
 16086                                  .L_lambda_simple_params_loop_6d44:	; copy params
 16087 0000AE80 4883FE01                	cmp rsi, 1
 16088 0000AE84 740E                    	je .L_lambda_simple_params_end_6d44
 16089 0000AE86 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16090 0000AE8B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16091 0000AE8F 48FFC6                  	inc rsi
 16092 0000AE92 EBEC                    	jmp .L_lambda_simple_params_loop_6d44
 16093                                  .L_lambda_simple_params_end_6d44:
 16094 0000AE94 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16095 0000AE97 4889C3                  	mov rbx, rax
 16096 0000AE9A 58                      	pop rax
 16097 0000AE9B C60004                  	mov byte [rax], T_closure
 16098 0000AE9E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16099 0000AEA2 48C74009[AFAE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d44
 16100 0000AEAA E90D010000              	jmp .L_lambda_simple_end_6d44
 16101                                  .L_lambda_simple_code_6d44:	; lambda-simple body
 16102 0000AEAF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16103 0000AEB5 740B                    	je .L_lambda_simple_arity_check_ok_6d44
 16104 0000AEB7 FF742410                	push qword [rsp + 8 * 2]
 16105 0000AEBB 6A02                    	push 2
 16106 0000AEBD E900A80000              	jmp L_error_incorrect_arity_simple
 16107                                  .L_lambda_simple_arity_check_ok_6d44:
 16108 0000AEC2 C8000000                	enter 0, 0
 16109 0000AEC6 488B4520                	mov rax, PARAM(0)	; param n
 16110 0000AECA 50                      	push rax
 16111 0000AECB 6A01                    	push 1	; arg count
 16112 0000AECD 488B0425[730F0000]      	mov rax, qword [free_var_27]	; free var zero?
 16113 0000AED5 803805                  	cmp byte [rax], T_undefined
 16114 0000AED8 0F84FEA60000            	je L_error_fvar_undefined
 16115 0000AEDE 803804                  	cmp byte [rax], T_closure
 16116 0000AEE1 0F8579A70000            	jne L_error_non_closure
 16117 0000AEE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16118 0000AEEA FF5009                  	call SOB_CLOSURE_CODE(rax)
 16119                                  
 16120 0000AEED 483D[02000000]          	cmp rax, sob_boolean_false
 16121 0000AEF3 740F                    	je .L_if_else_770e
 16122 0000AEF5 48B8-                   	mov rax, L_constants + 1
 16122 0000AEF7 [0100000000000000] 
 16123                                  
 16124 0000AEFF E9B4000000              	jmp .L_if_end_770e
 16125                                  
 16126                                  	.L_if_else_770e:
 16127                                  	; preparing a tail-call
 16128 0000AF04 488B4528                	mov rax, PARAM(1)	; param ch
 16129 0000AF08 50                      	push rax
 16130 0000AF09 48B8-                   	mov rax, L_constants + 2158
 16130 0000AF0B [6E08000000000000] 
 16131 0000AF13 50                      	push rax
 16132 0000AF14 488B4520                	mov rax, PARAM(0)	; param n
 16133 0000AF18 50                      	push rax
 16134 0000AF19 6A02                    	push 2	; arg count
 16135 0000AF1B 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 16136 0000AF23 803805                  	cmp byte [rax], T_undefined
 16137 0000AF26 0F84B0A60000            	je L_error_fvar_undefined
 16138 0000AF2C 803804                  	cmp byte [rax], T_closure
 16139 0000AF2F 0F852BA70000            	jne L_error_non_closure
 16140 0000AF35 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16141 0000AF38 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16142 0000AF3B 50                      	push rax
 16143 0000AF3C 6A02                    	push 2	; arg count
 16144 0000AF3E 488B4510                	mov rax, ENV
 16145 0000AF42 488B00                  	mov rax, qword [rax + 8 * 0]
 16146 0000AF45 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16147 0000AF48 488B00                  	mov rax, qword [rax]
 16148 0000AF4B 803804                  	cmp byte [rax], T_closure
 16149 0000AF4E 0F850CA70000            	jne L_error_non_closure
 16150 0000AF54 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16151 0000AF57 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16152 0000AF5A 50                      	push rax
 16153 0000AF5B 488B4528                	mov rax, PARAM(1)	; param ch
 16154 0000AF5F 50                      	push rax
 16155 0000AF60 6A02                    	push 2	; arg count
 16156 0000AF62 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
 16157 0000AF6A 803805                  	cmp byte [rax], T_undefined
 16158 0000AF6D 0F8469A60000            	je L_error_fvar_undefined
 16159 0000AF73 803804                  	cmp byte [rax], T_closure
 16160 0000AF76 0F85E4A60000            	jne L_error_non_closure
 16161 0000AF7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 16162                                  
 16163                                  	; recycling the current frame
 16164 0000AF7F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16165 0000AF82 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16166 0000AF85 B906000000              	mov rcx, 2 + 4
 16167 0000AF8A 488B5D18                	mov rbx, COUNT
 16168 0000AF8E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16169 0000AF93 488D55F8                	lea rdx, [rbp - 8 * 1]
 16170                                  .L_tc_recycle_frame_loop_8f3e:
 16171 0000AF97 4883F900                	cmp rcx, 0
 16172 0000AF9B 7413                    	je .L_tc_recycle_frame_done_8f3e
 16173 0000AF9D 488B32                  	mov rsi, qword [rdx]
 16174 0000AFA0 488933                  	mov qword [rbx], rsi
 16175 0000AFA3 48FFC9                  	dec rcx
 16176 0000AFA6 4883EB08                	sub rbx, 8 * 1
 16177 0000AFAA 4883EA08                	sub rdx, 8 * 1
 16178 0000AFAE EBE7                    	jmp .L_tc_recycle_frame_loop_8f3e
 16179                                  .L_tc_recycle_frame_done_8f3e:
 16180 0000AFB0 488D6308                	lea rsp, [rbx + 8 * 1]
 16181 0000AFB4 5D                      	pop rbp	; the proc will restore it!
 16182 0000AFB5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16183                                  
 16184                                  	.L_if_end_770e:
 16185 0000AFB8 C9                      	leave
 16186 0000AFB9 C22000                  	ret AND_KILL_FRAME(2)
 16187                                  .L_lambda_simple_end_6d44:	; new closure is in rax
 16188                                  
 16189 0000AFBC 50                      	push rax
 16190 0000AFBD 488B4520                	mov rax, PARAM(0)	; param run
 16191                                  
 16192 0000AFC1 8F00                    	pop qword[rax]
 16193 0000AFC3 48B8-                   	mov rax, sob_void
 16193 0000AFC5 [0000000000000000] 
 16194                                  
 16195 0000AFCD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16196 0000AFD2 E832A70000              	call malloc
 16197 0000AFD7 50                      	push rax
 16198 0000AFD8 BF08000000              	mov rdi, 8 * 1	; new rib
 16199 0000AFDD E827A70000              	call malloc
 16200 0000AFE2 50                      	push rax
 16201 0000AFE3 BF10000000              	mov rdi, 8 * 2	; extended env
 16202 0000AFE8 E81CA70000              	call malloc
 16203 0000AFED 488B7D10                	mov rdi, ENV
 16204 0000AFF1 BE00000000              	mov rsi, 0
 16205 0000AFF6 BA01000000              	mov rdx, 1
 16206                                  .L_lambda_opt_env_loop_0f5f:	; ext_env[i + 1] <-- env[i]
 16207 0000AFFB 4883FE01                	cmp rsi, 1
 16208 0000AFFF 7410                    	je .L_lambda_opt_env_end_0f5f
 16209 0000B001 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16210 0000B005 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16211 0000B009 48FFC6                  	inc rsi
 16212 0000B00C 48FFC2                  	inc rdx
 16213 0000B00F EBEA                    	jmp .L_lambda_opt_env_loop_0f5f
 16214                                  .L_lambda_opt_env_end_0f5f:
 16215 0000B011 5B                      	pop rbx
 16216 0000B012 BE00000000              	mov rsi, 0
 16217                                  .L_lambda_opt_params_loop_0f5f:	; copy params
 16218 0000B017 4883FE01                	cmp rsi, 1
 16219 0000B01B 740E                    	je .L_lambda_opt_params_end_0f5f
 16220 0000B01D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16221 0000B022 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16222 0000B026 48FFC6                  	inc rsi
 16223 0000B029 EBEC                    	jmp .L_lambda_opt_params_loop_0f5f
 16224                                  .L_lambda_opt_params_end_0f5f:
 16225 0000B02B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16226 0000B02E 4889C3                  	mov rbx, rax
 16227 0000B031 58                      	pop rax
 16228 0000B032 C60004                  	mov byte [rax], T_closure
 16229 0000B035 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16230 0000B039 48C74009[46B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f5f
 16231 0000B041 E9F5020000              	jmp .L_lambda_opt_end_0f5f
 16232                                  .L_lambda_opt_code_0f5f:	; lambda-simple body
 16233 0000B046 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 16234 0000B04C 740D                    	je .L_lambda_opt_arity_check_exact_0f5f ;	 if equal, go to exact arity
 16235 0000B04E 7F42                    	jg .L_lambda_opt_arity_check_more_0f5f ;	 if greater than, go to arity more
 16236 0000B050 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 16237 0000B054 6A01                     	push 1
 16238 0000B056 E97BA60000              	jmp L_error_incorrect_arity_opt
 16239                                  	.L_lambda_opt_arity_check_exact_0f5f:
 16240 0000B05B 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 16241 0000B060 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 16242 0000B065 4883EC08                	sub rsp, 8
 16243 0000B069 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 16244                                  	.L_lambda_opt_exact_shifting_loop_0f5f:
 16245 0000B06D 488B5108                	mov rdx, [rcx + 8]
 16246 0000B071 488911                  	mov [rcx], rdx
 16247 0000B074 4883C108                	add rcx, 8
 16248 0000B078 4839CB                  	cmp rbx, rcx
 16249 0000B07B 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f5f
 16250                                  	.L_lambda_opt_exact_shifting_loop_end_0f5f:
 16251 0000B07D 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 16252 0000B084 4883C001                	add rax, 1 ; 	arg count += 1
 16253 0000B088 4889442410              	mov qword [rsp + 8 * 2], rax
 16254 0000B08D E987000000              	jmp .L_lambda_opt_stack_adjusted_0f5f
 16255                                  	.L_lambda_opt_arity_check_more_0f5f:
 16256 0000B092 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 16256 0000B094 [0100000000000000] 
 16257 0000B09C 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 16258 0000B0A2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f5f
 16259                                  	.L_lambda_opt_stack_shrink_loop_0f5f:
 16260 0000B0A4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 16261 0000B0A9 E85BA60000              	call malloc ;	 allocated memory for the optional scheme list
 16262 0000B0AE C60021                  	mov byte[rax], T_pair ;	 set type pair
 16263 0000B0B1 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 16264 0000B0B5 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 16265 0000B0B8 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 16266 0000B0BD 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 16267 0000B0C2 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 16268 0000B0C6 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 16269                                  	.L_lambda_opt_more_shifting_loop_0f5f:
 16270 0000B0CB 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 16271 0000B0CE 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 16272 0000B0D2 4883EB08                	sub rbx, 8 
 16273 0000B0D6 4839DC                  	cmp rsp, rbx
 16274 0000B0D9 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f5f
 16275                                  	.L_lambda_opt_more_shifting_loop_end_0f5f:
 16276 0000B0DB 4883C408                	add rsp, 8 ;	 update rsp
 16277 0000B0DF 488B5C2410              	mov rbx, [rsp + 8 * 2]
 16278 0000B0E4 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 16279 0000B0E8 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 16280 0000B0ED 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16281 0000B0F3 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f5f
 16282                                  	.L_lambda_opt_stack_shrink_loop_exit_0f5f:
 16283 0000B0F5 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 16284 0000B0FA 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 16285 0000B0FF BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 16286 0000B104 E800A60000              	call malloc ;	 allocated memory for the optional scheme list
 16287 0000B109 C60021                  	mov byte[rax], T_pair ;	 set type pair
 16288 0000B10C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 16289 0000B110 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 16290 0000B114 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 16291                                  	.L_lambda_opt_stack_adjusted_0f5f:
 16292 0000B119 C8000000                	enter 0, 0
 16293 0000B11D 488B4528                	mov rax, PARAM(1)	; param chs
 16294 0000B121 50                      	push rax
 16295 0000B122 6A01                    	push 1	; arg count
 16296 0000B124 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 16297 0000B12C 803805                  	cmp byte [rax], T_undefined
 16298 0000B12F 0F84A7A40000            	je L_error_fvar_undefined
 16299 0000B135 803804                  	cmp byte [rax], T_closure
 16300 0000B138 0F8522A50000            	jne L_error_non_closure
 16301 0000B13E FF7001                  	push SOB_CLOSURE_ENV(rax)
 16302 0000B141 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16303                                  
 16304 0000B144 483D[02000000]          	cmp rax, sob_boolean_false
 16305 0000B14A 7469                    	je .L_if_else_770f
 16306                                  	; preparing a tail-call
 16307 0000B14C 48B8-                   	mov rax, L_constants + 4
 16307 0000B14E [0400000000000000] 
 16308 0000B156 50                      	push rax
 16309 0000B157 488B4520                	mov rax, PARAM(0)	; param n
 16310 0000B15B 50                      	push rax
 16311 0000B15C 6A02                    	push 2	; arg count
 16312 0000B15E 488B4510                	mov rax, ENV
 16313 0000B162 488B00                  	mov rax, qword [rax + 8 * 0]
 16314 0000B165 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16315 0000B168 488B00                  	mov rax, qword [rax]
 16316 0000B16B 803804                  	cmp byte [rax], T_closure
 16317 0000B16E 0F85ECA40000            	jne L_error_non_closure
 16318 0000B174 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16319                                  
 16320                                  	; recycling the current frame
 16321 0000B177 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16322 0000B17A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16323 0000B17D B906000000              	mov rcx, 2 + 4
 16324 0000B182 488B5D18                	mov rbx, COUNT
 16325 0000B186 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16326 0000B18B 488D55F8                	lea rdx, [rbp - 8 * 1]
 16327                                  .L_tc_recycle_frame_loop_8f3f:
 16328 0000B18F 4883F900                	cmp rcx, 0
 16329 0000B193 7413                    	je .L_tc_recycle_frame_done_8f3f
 16330 0000B195 488B32                  	mov rsi, qword [rdx]
 16331 0000B198 488933                  	mov qword [rbx], rsi
 16332 0000B19B 48FFC9                  	dec rcx
 16333 0000B19E 4883EB08                	sub rbx, 8 * 1
 16334 0000B1A2 4883EA08                	sub rdx, 8 * 1
 16335 0000B1A6 EBE7                    	jmp .L_tc_recycle_frame_loop_8f3f
 16336                                  .L_tc_recycle_frame_done_8f3f:
 16337 0000B1A8 488D6308                	lea rsp, [rbx + 8 * 1]
 16338 0000B1AC 5D                      	pop rbp	; the proc will restore it!
 16339 0000B1AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16340                                  
 16341 0000B1B0 E982010000              	jmp .L_if_end_770f
 16342                                  
 16343                                  	.L_if_else_770f:
 16344 0000B1B5 488B4528                	mov rax, PARAM(1)	; param chs
 16345 0000B1B9 50                      	push rax
 16346 0000B1BA 6A01                    	push 1	; arg count
 16347 0000B1BC 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
 16348 0000B1C4 803805                  	cmp byte [rax], T_undefined
 16349 0000B1C7 0F840FA40000            	je L_error_fvar_undefined
 16350 0000B1CD 803804                  	cmp byte [rax], T_closure
 16351 0000B1D0 0F858AA40000            	jne L_error_non_closure
 16352 0000B1D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16353 0000B1D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16354                                  
 16355 0000B1DC 483D[02000000]          	cmp rax, sob_boolean_false
 16356 0000B1E2 744C                    	je .L_if_else_7711
 16357 0000B1E4 488B4528                	mov rax, PARAM(1)	; param chs
 16358 0000B1E8 50                      	push rax
 16359 0000B1E9 6A01                    	push 1	; arg count
 16360 0000B1EB 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 16361 0000B1F3 803805                  	cmp byte [rax], T_undefined
 16362 0000B1F6 0F84E0A30000            	je L_error_fvar_undefined
 16363 0000B1FC 803804                  	cmp byte [rax], T_closure
 16364 0000B1FF 0F855BA40000            	jne L_error_non_closure
 16365 0000B205 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16366 0000B208 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16367 0000B20B 50                      	push rax
 16368 0000B20C 6A01                    	push 1	; arg count
 16369 0000B20E 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 16370 0000B216 803805                  	cmp byte [rax], T_undefined
 16371 0000B219 0F84BDA30000            	je L_error_fvar_undefined
 16372 0000B21F 803804                  	cmp byte [rax], T_closure
 16373 0000B222 0F8538A40000            	jne L_error_non_closure
 16374 0000B228 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16375 0000B22B FF5009                  	call SOB_CLOSURE_CODE(rax)
 16376                                  
 16377 0000B22E EB0A                    	jmp .L_if_end_7711
 16378                                  
 16379                                  	.L_if_else_7711:
 16380 0000B230 48B8-                   	mov rax, L_constants + 2
 16380 0000B232 [0200000000000000] 
 16381                                  
 16382                                  	.L_if_end_7711:
 16383                                  
 16384 0000B23A 483D[02000000]          	cmp rax, sob_boolean_false
 16385 0000B240 0F8483000000            	je .L_if_else_7710
 16386                                  	; preparing a tail-call
 16387 0000B246 488B4528                	mov rax, PARAM(1)	; param chs
 16388 0000B24A 50                      	push rax
 16389 0000B24B 6A01                    	push 1	; arg count
 16390 0000B24D 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 16391 0000B255 803805                  	cmp byte [rax], T_undefined
 16392 0000B258 0F847EA30000            	je L_error_fvar_undefined
 16393 0000B25E 803804                  	cmp byte [rax], T_closure
 16394 0000B261 0F85F9A30000            	jne L_error_non_closure
 16395 0000B267 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16396 0000B26A FF5009                  	call SOB_CLOSURE_CODE(rax)
 16397 0000B26D 50                      	push rax
 16398 0000B26E 488B4520                	mov rax, PARAM(0)	; param n
 16399 0000B272 50                      	push rax
 16400 0000B273 6A02                    	push 2	; arg count
 16401 0000B275 488B4510                	mov rax, ENV
 16402 0000B279 488B00                  	mov rax, qword [rax + 8 * 0]
 16403 0000B27C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16404 0000B27F 488B00                  	mov rax, qword [rax]
 16405 0000B282 803804                  	cmp byte [rax], T_closure
 16406 0000B285 0F85D5A30000            	jne L_error_non_closure
 16407 0000B28B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16408                                  
 16409                                  	; recycling the current frame
 16410 0000B28E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16411 0000B291 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16412 0000B294 B906000000              	mov rcx, 2 + 4
 16413 0000B299 488B5D18                	mov rbx, COUNT
 16414 0000B29D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16415 0000B2A2 488D55F8                	lea rdx, [rbp - 8 * 1]
 16416                                  .L_tc_recycle_frame_loop_8f40:
 16417 0000B2A6 4883F900                	cmp rcx, 0
 16418 0000B2AA 7413                    	je .L_tc_recycle_frame_done_8f40
 16419 0000B2AC 488B32                  	mov rsi, qword [rdx]
 16420 0000B2AF 488933                  	mov qword [rbx], rsi
 16421 0000B2B2 48FFC9                  	dec rcx
 16422 0000B2B5 4883EB08                	sub rbx, 8 * 1
 16423 0000B2B9 4883EA08                	sub rdx, 8 * 1
 16424 0000B2BD EBE7                    	jmp .L_tc_recycle_frame_loop_8f40
 16425                                  .L_tc_recycle_frame_done_8f40:
 16426 0000B2BF 488D6308                	lea rsp, [rbx + 8 * 1]
 16427 0000B2C3 5D                      	pop rbp	; the proc will restore it!
 16428 0000B2C4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16429                                  
 16430 0000B2C7 EB6E                    	jmp .L_if_end_7710
 16431                                  
 16432                                  	.L_if_else_7710:
 16433                                  	; preparing a tail-call
 16434 0000B2C9 48B8-                   	mov rax, L_constants + 2365
 16434 0000B2CB [3D09000000000000] 
 16435 0000B2D3 50                      	push rax
 16436 0000B2D4 48B8-                   	mov rax, L_constants + 2356
 16436 0000B2D6 [3409000000000000] 
 16437 0000B2DE 50                      	push rax
 16438 0000B2DF 6A02                    	push 2	; arg count
 16439 0000B2E1 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 16440 0000B2E9 803805                  	cmp byte [rax], T_undefined
 16441 0000B2EC 0F84EAA20000            	je L_error_fvar_undefined
 16442 0000B2F2 803804                  	cmp byte [rax], T_closure
 16443 0000B2F5 0F8565A30000            	jne L_error_non_closure
 16444 0000B2FB FF7001                  	push SOB_CLOSURE_ENV(rax)
 16445                                  
 16446                                  	; recycling the current frame
 16447 0000B2FE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16448 0000B301 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16449 0000B304 B906000000              	mov rcx, 2 + 4
 16450 0000B309 488B5D18                	mov rbx, COUNT
 16451 0000B30D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16452 0000B312 488D55F8                	lea rdx, [rbp - 8 * 1]
 16453                                  .L_tc_recycle_frame_loop_8f41:
 16454 0000B316 4883F900                	cmp rcx, 0
 16455 0000B31A 7413                    	je .L_tc_recycle_frame_done_8f41
 16456 0000B31C 488B32                  	mov rsi, qword [rdx]
 16457 0000B31F 488933                  	mov qword [rbx], rsi
 16458 0000B322 48FFC9                  	dec rcx
 16459 0000B325 4883EB08                	sub rbx, 8 * 1
 16460 0000B329 4883EA08                	sub rdx, 8 * 1
 16461 0000B32D EBE7                    	jmp .L_tc_recycle_frame_loop_8f41
 16462                                  .L_tc_recycle_frame_done_8f41:
 16463 0000B32F 488D6308                	lea rsp, [rbx + 8 * 1]
 16464 0000B333 5D                      	pop rbp	; the proc will restore it!
 16465 0000B334 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16466                                  
 16467                                  	.L_if_end_7710:
 16468                                  
 16469                                  	.L_if_end_770f:
 16470 0000B337 C9                      	leave
 16471 0000B338 C22000                  	ret AND_KILL_FRAME(2)
 16472                                  .L_lambda_opt_end_0f5f:	; new closure is in rax
 16473 0000B33B C9                      	leave
 16474 0000B33C C21800                  	ret AND_KILL_FRAME(1)
 16475                                  .L_lambda_simple_end_6d43:	; new closure is in rax
 16476 0000B33F 803804                  	cmp byte [rax], T_closure
 16477 0000B342 0F8518A30000            	jne L_error_non_closure
 16478 0000B348 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16479 0000B34B FF5009                  	call SOB_CLOSURE_CODE(rax)
 16480 0000B34E 48890425[17160000]      	mov qword [free_var_127], rax
 16481 0000B356 48B8-                   	mov rax, sob_void
 16481 0000B358 [0000000000000000] 
 16482                                  
 16483 0000B360 4889C7                  	mov rdi, rax
 16484 0000B363 E8B3A40000              	call print_sexpr_if_not_void
 16485                                  
 16486 0000B368 48B8-                   	mov rax, L_constants + 0
 16486 0000B36A [0000000000000000] 
 16487 0000B372 48890425[28160000]      	mov qword [free_var_128], rax
 16488 0000B37A 48B8-                   	mov rax, sob_void
 16488 0000B37C [0000000000000000] 
 16489                                  
 16490 0000B384 4889C7                  	mov rdi, rax
 16491 0000B387 E88FA40000              	call print_sexpr_if_not_void
 16492                                  
 16493 0000B38C 48B8-                   	mov rax, L_constants + 0
 16493 0000B38E [0000000000000000] 
 16494 0000B396 48890425[39160000]      	mov qword [free_var_129], rax
 16495 0000B39E 48B8-                   	mov rax, sob_void
 16495 0000B3A0 [0000000000000000] 
 16496                                  
 16497 0000B3A8 4889C7                  	mov rdi, rax
 16498 0000B3AB E86BA40000              	call print_sexpr_if_not_void
 16499                                  
 16500 0000B3B0 48B8-                   	mov rax, L_constants + 0
 16500 0000B3B2 [0000000000000000] 
 16501 0000B3BA 48890425[4A160000]      	mov qword [free_var_130], rax
 16502 0000B3C2 48B8-                   	mov rax, sob_void
 16502 0000B3C4 [0000000000000000] 
 16503                                  
 16504 0000B3CC 4889C7                  	mov rdi, rax
 16505 0000B3CF E847A40000              	call print_sexpr_if_not_void
 16506                                  
 16507 0000B3D4 48B8-                   	mov rax, L_constants + 0
 16507 0000B3D6 [0000000000000000] 
 16508 0000B3DE 48890425[5B160000]      	mov qword [free_var_131], rax
 16509 0000B3E6 48B8-                   	mov rax, sob_void
 16509 0000B3E8 [0000000000000000] 
 16510                                  
 16511 0000B3F0 4889C7                  	mov rdi, rax
 16512 0000B3F3 E823A40000              	call print_sexpr_if_not_void
 16513                                  
 16514 0000B3F8 48B8-                   	mov rax, L_constants + 0
 16514 0000B3FA [0000000000000000] 
 16515 0000B402 48890425[6C160000]      	mov qword [free_var_132], rax
 16516 0000B40A 48B8-                   	mov rax, sob_void
 16516 0000B40C [0000000000000000] 
 16517                                  
 16518 0000B414 4889C7                  	mov rdi, rax
 16519 0000B417 E8FFA30000              	call print_sexpr_if_not_void
 16520                                  
 16521 0000B41C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16522 0000B421 E8E3A20000              	call malloc
 16523 0000B426 50                      	push rax
 16524 0000B427 BF00000000              	mov rdi, 8 * 0	; new rib
 16525 0000B42C E8D8A20000              	call malloc
 16526 0000B431 50                      	push rax
 16527 0000B432 BF08000000              	mov rdi, 8 * 1	; extended env
 16528 0000B437 E8CDA20000              	call malloc
 16529 0000B43C 488B7D10                	mov rdi, ENV
 16530 0000B440 BE00000000              	mov rsi, 0
 16531 0000B445 BA01000000              	mov rdx, 1
 16532                                  .L_lambda_simple_env_loop_6d45:	; ext_env[i + 1] <-- env[i]
 16533 0000B44A 4883FE00                	cmp rsi, 0
 16534 0000B44E 7410                    	je .L_lambda_simple_env_end_6d45
 16535 0000B450 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16536 0000B454 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16537 0000B458 48FFC6                  	inc rsi
 16538 0000B45B 48FFC2                  	inc rdx
 16539 0000B45E EBEA                    	jmp .L_lambda_simple_env_loop_6d45
 16540                                  .L_lambda_simple_env_end_6d45:
 16541 0000B460 5B                      	pop rbx
 16542 0000B461 BE00000000              	mov rsi, 0
 16543                                  .L_lambda_simple_params_loop_6d45:	; copy params
 16544 0000B466 4883FE00                	cmp rsi, 0
 16545 0000B46A 740E                    	je .L_lambda_simple_params_end_6d45
 16546 0000B46C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16547 0000B471 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16548 0000B475 48FFC6                  	inc rsi
 16549 0000B478 EBEC                    	jmp .L_lambda_simple_params_loop_6d45
 16550                                  .L_lambda_simple_params_end_6d45:
 16551 0000B47A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16552 0000B47D 4889C3                  	mov rbx, rax
 16553 0000B480 58                      	pop rax
 16554 0000B481 C60004                  	mov byte [rax], T_closure
 16555 0000B484 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16556 0000B488 48C74009[95B40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d45
 16557 0000B490 E90C020000              	jmp .L_lambda_simple_end_6d45
 16558                                  .L_lambda_simple_code_6d45:	; lambda-simple body
 16559 0000B495 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16560 0000B49B 740B                    	je .L_lambda_simple_arity_check_ok_6d45
 16561 0000B49D FF742410                	push qword [rsp + 8 * 2]
 16562 0000B4A1 6A01                    	push 1
 16563 0000B4A3 E91AA20000              	jmp L_error_incorrect_arity_simple
 16564                                  .L_lambda_simple_arity_check_ok_6d45:
 16565 0000B4A8 C8000000                	enter 0, 0
 16566 0000B4AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16567 0000B4B1 E853A20000              	call malloc
 16568 0000B4B6 50                      	push rax
 16569 0000B4B7 BF08000000              	mov rdi, 8 * 1	; new rib
 16570 0000B4BC E848A20000              	call malloc
 16571 0000B4C1 50                      	push rax
 16572 0000B4C2 BF10000000              	mov rdi, 8 * 2	; extended env
 16573 0000B4C7 E83DA20000              	call malloc
 16574 0000B4CC 488B7D10                	mov rdi, ENV
 16575 0000B4D0 BE00000000              	mov rsi, 0
 16576 0000B4D5 BA01000000              	mov rdx, 1
 16577                                  .L_lambda_opt_env_loop_0f60:	; ext_env[i + 1] <-- env[i]
 16578 0000B4DA 4883FE01                	cmp rsi, 1
 16579 0000B4DE 7410                    	je .L_lambda_opt_env_end_0f60
 16580 0000B4E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16581 0000B4E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16582 0000B4E8 48FFC6                  	inc rsi
 16583 0000B4EB 48FFC2                  	inc rdx
 16584 0000B4EE EBEA                    	jmp .L_lambda_opt_env_loop_0f60
 16585                                  .L_lambda_opt_env_end_0f60:
 16586 0000B4F0 5B                      	pop rbx
 16587 0000B4F1 BE00000000              	mov rsi, 0
 16588                                  .L_lambda_opt_params_loop_0f60:	; copy params
 16589 0000B4F6 4883FE01                	cmp rsi, 1
 16590 0000B4FA 740E                    	je .L_lambda_opt_params_end_0f60
 16591 0000B4FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16592 0000B501 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16593 0000B505 48FFC6                  	inc rsi
 16594 0000B508 EBEC                    	jmp .L_lambda_opt_params_loop_0f60
 16595                                  .L_lambda_opt_params_end_0f60:
 16596 0000B50A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16597 0000B50D 4889C3                  	mov rbx, rax
 16598 0000B510 58                      	pop rax
 16599 0000B511 C60004                  	mov byte [rax], T_closure
 16600 0000B514 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16601 0000B518 48C74009[25B50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f60
 16602 0000B520 E978010000              	jmp .L_lambda_opt_end_0f60
 16603                                  .L_lambda_opt_code_0f60:	; lambda-simple body
 16604 0000B525 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 16605 0000B52B 740D                    	je .L_lambda_opt_arity_check_exact_0f60 ;	 if equal, go to exact arity
 16606 0000B52D 7F42                    	jg .L_lambda_opt_arity_check_more_0f60 ;	 if greater than, go to arity more
 16607 0000B52F FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 16608 0000B533 6A00                     	push 0
 16609 0000B535 E99CA10000              	jmp L_error_incorrect_arity_opt
 16610                                  	.L_lambda_opt_arity_check_exact_0f60:
 16611 0000B53A 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 16612 0000B53F 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 16613 0000B544 4883EC08                	sub rsp, 8
 16614 0000B548 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 16615                                  	.L_lambda_opt_exact_shifting_loop_0f60:
 16616 0000B54C 488B5108                	mov rdx, [rcx + 8]
 16617 0000B550 488911                  	mov [rcx], rdx
 16618 0000B553 4883C108                	add rcx, 8
 16619 0000B557 4839CB                  	cmp rbx, rcx
 16620 0000B55A 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f60
 16621                                  	.L_lambda_opt_exact_shifting_loop_end_0f60:
 16622 0000B55C 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 16623 0000B563 4883C001                	add rax, 1 ; 	arg count += 1
 16624 0000B567 4889442410              	mov qword [rsp + 8 * 2], rax
 16625 0000B56C E987000000              	jmp .L_lambda_opt_stack_adjusted_0f60
 16626                                  	.L_lambda_opt_arity_check_more_0f60:
 16627 0000B571 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 16627 0000B573 [0100000000000000] 
 16628 0000B57B 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 16629 0000B581 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f60
 16630                                  	.L_lambda_opt_stack_shrink_loop_0f60:
 16631 0000B583 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 16632 0000B588 E87CA10000              	call malloc ;	 allocated memory for the optional scheme list
 16633 0000B58D C60021                  	mov byte[rax], T_pair ;	 set type pair
 16634 0000B590 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 16635 0000B594 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 16636 0000B597 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 16637 0000B59C 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 16638 0000B5A1 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 16639 0000B5A5 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 16640                                  	.L_lambda_opt_more_shifting_loop_0f60:
 16641 0000B5AA 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 16642 0000B5AD 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 16643 0000B5B1 4883EB08                	sub rbx, 8 
 16644 0000B5B5 4839DC                  	cmp rsp, rbx
 16645 0000B5B8 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f60
 16646                                  	.L_lambda_opt_more_shifting_loop_end_0f60:
 16647 0000B5BA 4883C408                	add rsp, 8 ;	 update rsp
 16648 0000B5BE 488B5C2410              	mov rbx, [rsp + 8 * 2]
 16649 0000B5C3 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 16650 0000B5C7 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 16651 0000B5CC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16652 0000B5D2 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f60
 16653                                  	.L_lambda_opt_stack_shrink_loop_exit_0f60:
 16654 0000B5D4 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 16655 0000B5D9 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 16656 0000B5DE BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 16657 0000B5E3 E821A10000              	call malloc ;	 allocated memory for the optional scheme list
 16658 0000B5E8 C60021                  	mov byte[rax], T_pair ;	 set type pair
 16659 0000B5EB 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 16660 0000B5EF 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 16661 0000B5F3 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 16662                                  	.L_lambda_opt_stack_adjusted_0f60:
 16663 0000B5F8 C8000000                	enter 0, 0
 16664                                  	; preparing a tail-call
 16665 0000B5FC 488B4520                	mov rax, PARAM(0)	; param s
 16666 0000B600 50                      	push rax
 16667 0000B601 488B0425[400F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 16668 0000B609 803805                  	cmp byte [rax], T_undefined
 16669 0000B60C 0F84CA9F0000            	je L_error_fvar_undefined
 16670 0000B612 50                      	push rax
 16671 0000B613 6A02                    	push 2	; arg count
 16672 0000B615 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
 16673 0000B61D 803805                  	cmp byte [rax], T_undefined
 16674 0000B620 0F84B69F0000            	je L_error_fvar_undefined
 16675 0000B626 803804                  	cmp byte [rax], T_closure
 16676 0000B629 0F8531A00000            	jne L_error_non_closure
 16677 0000B62F FF7001                  	push SOB_CLOSURE_ENV(rax)
 16678 0000B632 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16679 0000B635 50                      	push rax
 16680 0000B636 488B4510                	mov rax, ENV
 16681 0000B63A 488B00                  	mov rax, qword [rax + 8 * 0]
 16682 0000B63D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 16683 0000B640 50                      	push rax
 16684 0000B641 6A02                    	push 2	; arg count
 16685 0000B643 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
 16686 0000B64B 803805                  	cmp byte [rax], T_undefined
 16687 0000B64E 0F84889F0000            	je L_error_fvar_undefined
 16688 0000B654 803804                  	cmp byte [rax], T_closure
 16689 0000B657 0F8503A00000            	jne L_error_non_closure
 16690 0000B65D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16691                                  
 16692                                  	; recycling the current frame
 16693 0000B660 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16694 0000B663 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16695 0000B666 B906000000              	mov rcx, 2 + 4
 16696 0000B66B 488B5D18                	mov rbx, COUNT
 16697 0000B66F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16698 0000B674 488D55F8                	lea rdx, [rbp - 8 * 1]
 16699                                  .L_tc_recycle_frame_loop_8f42:
 16700 0000B678 4883F900                	cmp rcx, 0
 16701 0000B67C 7413                    	je .L_tc_recycle_frame_done_8f42
 16702 0000B67E 488B32                  	mov rsi, qword [rdx]
 16703 0000B681 488933                  	mov qword [rbx], rsi
 16704 0000B684 48FFC9                  	dec rcx
 16705 0000B687 4883EB08                	sub rbx, 8 * 1
 16706 0000B68B 4883EA08                	sub rdx, 8 * 1
 16707 0000B68F EBE7                    	jmp .L_tc_recycle_frame_loop_8f42
 16708                                  .L_tc_recycle_frame_done_8f42:
 16709 0000B691 488D6308                	lea rsp, [rbx + 8 * 1]
 16710 0000B695 5D                      	pop rbp	; the proc will restore it!
 16711 0000B696 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16712 0000B699 C9                      	leave
 16713 0000B69A C21800                  	ret AND_KILL_FRAME(1)
 16714                                  .L_lambda_opt_end_0f60:	; new closure is in rax
 16715 0000B69D C9                      	leave
 16716 0000B69E C21800                  	ret AND_KILL_FRAME(1)
 16717                                  .L_lambda_simple_end_6d45:	; new closure is in rax
 16718 0000B6A1 50                      	push rax
 16719 0000B6A2 6A01                    	push 1	; arg count
 16720 0000B6A4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16721 0000B6A9 E85BA00000              	call malloc
 16722 0000B6AE 50                      	push rax
 16723 0000B6AF BF00000000              	mov rdi, 8 * 0	; new rib
 16724 0000B6B4 E850A00000              	call malloc
 16725 0000B6B9 50                      	push rax
 16726 0000B6BA BF08000000              	mov rdi, 8 * 1	; extended env
 16727 0000B6BF E845A00000              	call malloc
 16728 0000B6C4 488B7D10                	mov rdi, ENV
 16729 0000B6C8 BE00000000              	mov rsi, 0
 16730 0000B6CD BA01000000              	mov rdx, 1
 16731                                  .L_lambda_simple_env_loop_6d46:	; ext_env[i + 1] <-- env[i]
 16732 0000B6D2 4883FE00                	cmp rsi, 0
 16733 0000B6D6 7410                    	je .L_lambda_simple_env_end_6d46
 16734 0000B6D8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16735 0000B6DC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16736 0000B6E0 48FFC6                  	inc rsi
 16737 0000B6E3 48FFC2                  	inc rdx
 16738 0000B6E6 EBEA                    	jmp .L_lambda_simple_env_loop_6d46
 16739                                  .L_lambda_simple_env_end_6d46:
 16740 0000B6E8 5B                      	pop rbx
 16741 0000B6E9 BE00000000              	mov rsi, 0
 16742                                  .L_lambda_simple_params_loop_6d46:	; copy params
 16743 0000B6EE 4883FE00                	cmp rsi, 0
 16744 0000B6F2 740E                    	je .L_lambda_simple_params_end_6d46
 16745 0000B6F4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16746 0000B6F9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16747 0000B6FD 48FFC6                  	inc rsi
 16748 0000B700 EBEC                    	jmp .L_lambda_simple_params_loop_6d46
 16749                                  .L_lambda_simple_params_end_6d46:
 16750 0000B702 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16751 0000B705 4889C3                  	mov rbx, rax
 16752 0000B708 58                      	pop rax
 16753 0000B709 C60004                  	mov byte [rax], T_closure
 16754 0000B70C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16755 0000B710 48C74009[1DB70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d46
 16756 0000B718 E965010000              	jmp .L_lambda_simple_end_6d46
 16757                                  .L_lambda_simple_code_6d46:	; lambda-simple body
 16758 0000B71D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16759 0000B723 740B                    	je .L_lambda_simple_arity_check_ok_6d46
 16760 0000B725 FF742410                	push qword [rsp + 8 * 2]
 16761 0000B729 6A01                    	push 1
 16762 0000B72B E9929F0000              	jmp L_error_incorrect_arity_simple
 16763                                  .L_lambda_simple_arity_check_ok_6d46:
 16764 0000B730 C8000000                	enter 0, 0
 16765 0000B734 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 16766 0000B73C 803805                  	cmp byte [rax], T_undefined
 16767 0000B73F 0F84979E0000            	je L_error_fvar_undefined
 16768 0000B745 50                      	push rax
 16769 0000B746 6A01                    	push 1	; arg count
 16770 0000B748 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16771 0000B74C 803804                  	cmp byte [rax], T_closure
 16772 0000B74F 0F850B9F0000            	jne L_error_non_closure
 16773 0000B755 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16774 0000B758 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16775 0000B75B 48890425[28160000]      	mov qword [free_var_128], rax	; free var char<?
 16776 0000B763 803805                  	cmp byte [rax], T_undefined
 16777 0000B766 0F84709E0000            	je L_error_fvar_undefined
 16778 0000B76C 48B8-                   	mov rax, sob_void
 16778 0000B76E [0000000000000000] 
 16779                                  
 16780 0000B776 488B0425[D3150000]      	mov rax, qword [free_var_123]	; free var <=
 16781 0000B77E 803805                  	cmp byte [rax], T_undefined
 16782 0000B781 0F84559E0000            	je L_error_fvar_undefined
 16783 0000B787 50                      	push rax
 16784 0000B788 6A01                    	push 1	; arg count
 16785 0000B78A 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16786 0000B78E 803804                  	cmp byte [rax], T_closure
 16787 0000B791 0F85C99E0000            	jne L_error_non_closure
 16788 0000B797 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16789 0000B79A FF5009                  	call SOB_CLOSURE_CODE(rax)
 16790 0000B79D 48890425[39160000]      	mov qword [free_var_129], rax	; free var char<=?
 16791 0000B7A5 803805                  	cmp byte [rax], T_undefined
 16792 0000B7A8 0F842E9E0000            	je L_error_fvar_undefined
 16793 0000B7AE 48B8-                   	mov rax, sob_void
 16793 0000B7B0 [0000000000000000] 
 16794                                  
 16795 0000B7B8 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 16796 0000B7C0 803805                  	cmp byte [rax], T_undefined
 16797 0000B7C3 0F84139E0000            	je L_error_fvar_undefined
 16798 0000B7C9 50                      	push rax
 16799 0000B7CA 6A01                    	push 1	; arg count
 16800 0000B7CC 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16801 0000B7D0 803804                  	cmp byte [rax], T_closure
 16802 0000B7D3 0F85879E0000            	jne L_error_non_closure
 16803 0000B7D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16804 0000B7DC FF5009                  	call SOB_CLOSURE_CODE(rax)
 16805 0000B7DF 48890425[4A160000]      	mov qword [free_var_130], rax	; free var char=?
 16806 0000B7E7 803805                  	cmp byte [rax], T_undefined
 16807 0000B7EA 0F84EC9D0000            	je L_error_fvar_undefined
 16808 0000B7F0 48B8-                   	mov rax, sob_void
 16808 0000B7F2 [0000000000000000] 
 16809                                  
 16810 0000B7FA 488B0425[E4150000]      	mov rax, qword [free_var_124]	; free var >
 16811 0000B802 803805                  	cmp byte [rax], T_undefined
 16812 0000B805 0F84D19D0000            	je L_error_fvar_undefined
 16813 0000B80B 50                      	push rax
 16814 0000B80C 6A01                    	push 1	; arg count
 16815 0000B80E 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16816 0000B812 803804                  	cmp byte [rax], T_closure
 16817 0000B815 0F85459E0000            	jne L_error_non_closure
 16818 0000B81B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16819 0000B81E FF5009                  	call SOB_CLOSURE_CODE(rax)
 16820 0000B821 48890425[5B160000]      	mov qword [free_var_131], rax	; free var char>?
 16821 0000B829 803805                  	cmp byte [rax], T_undefined
 16822 0000B82C 0F84AA9D0000            	je L_error_fvar_undefined
 16823 0000B832 48B8-                   	mov rax, sob_void
 16823 0000B834 [0000000000000000] 
 16824                                  
 16825 0000B83C 488B0425[F5150000]      	mov rax, qword [free_var_125]	; free var >=
 16826 0000B844 803805                  	cmp byte [rax], T_undefined
 16827 0000B847 0F848F9D0000            	je L_error_fvar_undefined
 16828 0000B84D 50                      	push rax
 16829 0000B84E 6A01                    	push 1	; arg count
 16830 0000B850 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16831 0000B854 803804                  	cmp byte [rax], T_closure
 16832 0000B857 0F85039E0000            	jne L_error_non_closure
 16833 0000B85D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16834 0000B860 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16835 0000B863 48890425[6C160000]      	mov qword [free_var_132], rax	; free var char>=?
 16836 0000B86B 803805                  	cmp byte [rax], T_undefined
 16837 0000B86E 0F84689D0000            	je L_error_fvar_undefined
 16838 0000B874 48B8-                   	mov rax, sob_void
 16838 0000B876 [0000000000000000] 
 16839 0000B87E C9                      	leave
 16840 0000B87F C21800                  	ret AND_KILL_FRAME(1)
 16841                                  .L_lambda_simple_end_6d46:	; new closure is in rax
 16842 0000B882 803804                  	cmp byte [rax], T_closure
 16843 0000B885 0F85D59D0000            	jne L_error_non_closure
 16844 0000B88B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16845 0000B88E FF5009                  	call SOB_CLOSURE_CODE(rax)
 16846                                  
 16847 0000B891 4889C7                  	mov rdi, rax
 16848 0000B894 E8829F0000              	call print_sexpr_if_not_void
 16849                                  
 16850 0000B899 48B8-                   	mov rax, L_constants + 0
 16850 0000B89B [0000000000000000] 
 16851 0000B8A3 48890425[7D160000]      	mov qword [free_var_133], rax
 16852 0000B8AB 48B8-                   	mov rax, sob_void
 16852 0000B8AD [0000000000000000] 
 16853                                  
 16854 0000B8B5 4889C7                  	mov rdi, rax
 16855 0000B8B8 E85E9F0000              	call print_sexpr_if_not_void
 16856                                  
 16857 0000B8BD 48B8-                   	mov rax, L_constants + 0
 16857 0000B8BF [0000000000000000] 
 16858 0000B8C7 48890425[8E160000]      	mov qword [free_var_134], rax
 16859 0000B8CF 48B8-                   	mov rax, sob_void
 16859 0000B8D1 [0000000000000000] 
 16860                                  
 16861 0000B8D9 4889C7                  	mov rdi, rax
 16862 0000B8DC E83A9F0000              	call print_sexpr_if_not_void
 16863                                  
 16864 0000B8E1 48B8-                   	mov rax, L_constants + 2538
 16864 0000B8E3 [EA09000000000000] 
 16865 0000B8EB 50                      	push rax
 16866 0000B8EC 6A01                    	push 1	; arg count
 16867 0000B8EE 488B0425[400F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 16868 0000B8F6 803805                  	cmp byte [rax], T_undefined
 16869 0000B8F9 0F84DD9C0000            	je L_error_fvar_undefined
 16870 0000B8FF 803804                  	cmp byte [rax], T_closure
 16871 0000B902 0F85589D0000            	jne L_error_non_closure
 16872 0000B908 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16873 0000B90B FF5009                  	call SOB_CLOSURE_CODE(rax)
 16874 0000B90E 50                      	push rax
 16875 0000B90F 48B8-                   	mov rax, L_constants + 2542
 16875 0000B911 [EE09000000000000] 
 16876 0000B919 50                      	push rax
 16877 0000B91A 6A01                    	push 1	; arg count
 16878 0000B91C 488B0425[400F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 16879 0000B924 803805                  	cmp byte [rax], T_undefined
 16880 0000B927 0F84AF9C0000            	je L_error_fvar_undefined
 16881 0000B92D 803804                  	cmp byte [rax], T_closure
 16882 0000B930 0F852A9D0000            	jne L_error_non_closure
 16883 0000B936 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16884 0000B939 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16885 0000B93C 50                      	push rax
 16886 0000B93D 6A02                    	push 2	; arg count
 16887 0000B93F 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 16888 0000B947 803805                  	cmp byte [rax], T_undefined
 16889 0000B94A 0F848C9C0000            	je L_error_fvar_undefined
 16890 0000B950 803804                  	cmp byte [rax], T_closure
 16891 0000B953 0F85079D0000            	jne L_error_non_closure
 16892 0000B959 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16893 0000B95C FF5009                  	call SOB_CLOSURE_CODE(rax)
 16894 0000B95F 50                      	push rax
 16895 0000B960 6A01                    	push 1	; arg count
 16896 0000B962 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16897 0000B967 E89D9D0000              	call malloc
 16898 0000B96C 50                      	push rax
 16899 0000B96D BF00000000              	mov rdi, 8 * 0	; new rib
 16900 0000B972 E8929D0000              	call malloc
 16901 0000B977 50                      	push rax
 16902 0000B978 BF08000000              	mov rdi, 8 * 1	; extended env
 16903 0000B97D E8879D0000              	call malloc
 16904 0000B982 488B7D10                	mov rdi, ENV
 16905 0000B986 BE00000000              	mov rsi, 0
 16906 0000B98B BA01000000              	mov rdx, 1
 16907                                  .L_lambda_simple_env_loop_6d47:	; ext_env[i + 1] <-- env[i]
 16908 0000B990 4883FE00                	cmp rsi, 0
 16909 0000B994 7410                    	je .L_lambda_simple_env_end_6d47
 16910 0000B996 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16911 0000B99A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16912 0000B99E 48FFC6                  	inc rsi
 16913 0000B9A1 48FFC2                  	inc rdx
 16914 0000B9A4 EBEA                    	jmp .L_lambda_simple_env_loop_6d47
 16915                                  .L_lambda_simple_env_end_6d47:
 16916 0000B9A6 5B                      	pop rbx
 16917 0000B9A7 BE00000000              	mov rsi, 0
 16918                                  .L_lambda_simple_params_loop_6d47:	; copy params
 16919 0000B9AC 4883FE00                	cmp rsi, 0
 16920 0000B9B0 740E                    	je .L_lambda_simple_params_end_6d47
 16921 0000B9B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16922 0000B9B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16923 0000B9BB 48FFC6                  	inc rsi
 16924 0000B9BE EBEC                    	jmp .L_lambda_simple_params_loop_6d47
 16925                                  .L_lambda_simple_params_end_6d47:
 16926 0000B9C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16927 0000B9C3 4889C3                  	mov rbx, rax
 16928 0000B9C6 58                      	pop rax
 16929 0000B9C7 C60004                  	mov byte [rax], T_closure
 16930 0000B9CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16931 0000B9CE 48C74009[DBB90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d47
 16932 0000B9D6 E973030000              	jmp .L_lambda_simple_end_6d47
 16933                                  .L_lambda_simple_code_6d47:	; lambda-simple body
 16934 0000B9DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16935 0000B9E1 740B                    	je .L_lambda_simple_arity_check_ok_6d47
 16936 0000B9E3 FF742410                	push qword [rsp + 8 * 2]
 16937 0000B9E7 6A01                    	push 1
 16938 0000B9E9 E9D49C0000              	jmp L_error_incorrect_arity_simple
 16939                                  .L_lambda_simple_arity_check_ok_6d47:
 16940 0000B9EE C8000000                	enter 0, 0
 16941 0000B9F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16942 0000B9F7 E80D9D0000              	call malloc
 16943 0000B9FC 50                      	push rax
 16944 0000B9FD BF08000000              	mov rdi, 8 * 1	; new rib
 16945 0000BA02 E8029D0000              	call malloc
 16946 0000BA07 50                      	push rax
 16947 0000BA08 BF10000000              	mov rdi, 8 * 2	; extended env
 16948 0000BA0D E8F79C0000              	call malloc
 16949 0000BA12 488B7D10                	mov rdi, ENV
 16950 0000BA16 BE00000000              	mov rsi, 0
 16951 0000BA1B BA01000000              	mov rdx, 1
 16952                                  .L_lambda_simple_env_loop_6d48:	; ext_env[i + 1] <-- env[i]
 16953 0000BA20 4883FE01                	cmp rsi, 1
 16954 0000BA24 7410                    	je .L_lambda_simple_env_end_6d48
 16955 0000BA26 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16956 0000BA2A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16957 0000BA2E 48FFC6                  	inc rsi
 16958 0000BA31 48FFC2                  	inc rdx
 16959 0000BA34 EBEA                    	jmp .L_lambda_simple_env_loop_6d48
 16960                                  .L_lambda_simple_env_end_6d48:
 16961 0000BA36 5B                      	pop rbx
 16962 0000BA37 BE00000000              	mov rsi, 0
 16963                                  .L_lambda_simple_params_loop_6d48:	; copy params
 16964 0000BA3C 4883FE01                	cmp rsi, 1
 16965 0000BA40 740E                    	je .L_lambda_simple_params_end_6d48
 16966 0000BA42 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16967 0000BA47 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16968 0000BA4B 48FFC6                  	inc rsi
 16969 0000BA4E EBEC                    	jmp .L_lambda_simple_params_loop_6d48
 16970                                  .L_lambda_simple_params_end_6d48:
 16971 0000BA50 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16972 0000BA53 4889C3                  	mov rbx, rax
 16973 0000BA56 58                      	pop rax
 16974 0000BA57 C60004                  	mov byte [rax], T_closure
 16975 0000BA5A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16976 0000BA5E 48C74009[6BBA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d48
 16977 0000BA66 E918010000              	jmp .L_lambda_simple_end_6d48
 16978                                  .L_lambda_simple_code_6d48:	; lambda-simple body
 16979 0000BA6B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16980 0000BA71 740B                    	je .L_lambda_simple_arity_check_ok_6d48
 16981 0000BA73 FF742410                	push qword [rsp + 8 * 2]
 16982 0000BA77 6A01                    	push 1
 16983 0000BA79 E9449C0000              	jmp L_error_incorrect_arity_simple
 16984                                  .L_lambda_simple_arity_check_ok_6d48:
 16985 0000BA7E C8000000                	enter 0, 0
 16986 0000BA82 48B8-                   	mov rax, L_constants + 2540
 16986 0000BA84 [EC09000000000000] 
 16987 0000BA8C 50                      	push rax
 16988 0000BA8D 488B4520                	mov rax, PARAM(0)	; param ch
 16989 0000BA91 50                      	push rax
 16990 0000BA92 48B8-                   	mov rax, L_constants + 2538
 16990 0000BA94 [EA09000000000000] 
 16991 0000BA9C 50                      	push rax
 16992 0000BA9D 6A03                    	push 3	; arg count
 16993 0000BA9F 488B0425[39160000]      	mov rax, qword [free_var_129]	; free var char<=?
 16994 0000BAA7 803805                  	cmp byte [rax], T_undefined
 16995 0000BAAA 0F842C9B0000            	je L_error_fvar_undefined
 16996 0000BAB0 803804                  	cmp byte [rax], T_closure
 16997 0000BAB3 0F85A79B0000            	jne L_error_non_closure
 16998 0000BAB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16999 0000BABC FF5009                  	call SOB_CLOSURE_CODE(rax)
 17000                                  
 17001 0000BABF 483D[02000000]          	cmp rax, sob_boolean_false
 17002 0000BAC5 0F84B0000000            	je .L_if_else_7712
 17003                                  	; preparing a tail-call
 17004 0000BACB 488B4510                	mov rax, ENV
 17005 0000BACF 488B00                  	mov rax, qword [rax + 8 * 0]
 17006 0000BAD2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 17007 0000BAD5 50                      	push rax
 17008 0000BAD6 488B4520                	mov rax, PARAM(0)	; param ch
 17009 0000BADA 50                      	push rax
 17010 0000BADB 6A01                    	push 1	; arg count
 17011 0000BADD 488B0425[400F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17012 0000BAE5 803805                  	cmp byte [rax], T_undefined
 17013 0000BAE8 0F84EE9A0000            	je L_error_fvar_undefined
 17014 0000BAEE 803804                  	cmp byte [rax], T_closure
 17015 0000BAF1 0F85699B0000            	jne L_error_non_closure
 17016 0000BAF7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17017 0000BAFA FF5009                  	call SOB_CLOSURE_CODE(rax)
 17018 0000BAFD 50                      	push rax
 17019 0000BAFE 6A02                    	push 2	; arg count
 17020 0000BB00 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 17021 0000BB08 803805                  	cmp byte [rax], T_undefined
 17022 0000BB0B 0F84CB9A0000            	je L_error_fvar_undefined
 17023 0000BB11 803804                  	cmp byte [rax], T_closure
 17024 0000BB14 0F85469B0000            	jne L_error_non_closure
 17025 0000BB1A FF7001                  	push SOB_CLOSURE_ENV(rax)
 17026 0000BB1D FF5009                  	call SOB_CLOSURE_CODE(rax)
 17027 0000BB20 50                      	push rax
 17028 0000BB21 6A01                    	push 1	; arg count
 17029 0000BB23 488B0425[510F0000]      	mov rax, qword [free_var_25]	; free var integer->char
 17030 0000BB2B 803805                  	cmp byte [rax], T_undefined
 17031 0000BB2E 0F84A89A0000            	je L_error_fvar_undefined
 17032 0000BB34 803804                  	cmp byte [rax], T_closure
 17033 0000BB37 0F85239B0000            	jne L_error_non_closure
 17034 0000BB3D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17035                                  
 17036                                  	; recycling the current frame
 17037 0000BB40 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17038 0000BB43 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17039 0000BB46 B905000000              	mov rcx, 1 + 4
 17040 0000BB4B 488B5D18                	mov rbx, COUNT
 17041 0000BB4F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17042 0000BB54 488D55F8                	lea rdx, [rbp - 8 * 1]
 17043                                  .L_tc_recycle_frame_loop_8f43:
 17044 0000BB58 4883F900                	cmp rcx, 0
 17045 0000BB5C 7413                    	je .L_tc_recycle_frame_done_8f43
 17046 0000BB5E 488B32                  	mov rsi, qword [rdx]
 17047 0000BB61 488933                  	mov qword [rbx], rsi
 17048 0000BB64 48FFC9                  	dec rcx
 17049 0000BB67 4883EB08                	sub rbx, 8 * 1
 17050 0000BB6B 4883EA08                	sub rdx, 8 * 1
 17051 0000BB6F EBE7                    	jmp .L_tc_recycle_frame_loop_8f43
 17052                                  .L_tc_recycle_frame_done_8f43:
 17053 0000BB71 488D6308                	lea rsp, [rbx + 8 * 1]
 17054 0000BB75 5D                      	pop rbp	; the proc will restore it!
 17055 0000BB76 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17056                                  
 17057 0000BB79 EB04                    	jmp .L_if_end_7712
 17058                                  
 17059                                  	.L_if_else_7712:
 17060 0000BB7B 488B4520                	mov rax, PARAM(0)	; param ch
 17061                                  
 17062                                  	.L_if_end_7712:
 17063 0000BB7F C9                      	leave
 17064 0000BB80 C21800                  	ret AND_KILL_FRAME(1)
 17065                                  .L_lambda_simple_end_6d48:	; new closure is in rax
 17066 0000BB83 48890425[7D160000]      	mov qword [free_var_133], rax	; free var char-downcase
 17067 0000BB8B 803805                  	cmp byte [rax], T_undefined
 17068 0000BB8E 0F84489A0000            	je L_error_fvar_undefined
 17069 0000BB94 48B8-                   	mov rax, sob_void
 17069 0000BB96 [0000000000000000] 
 17070                                  
 17071 0000BB9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17072 0000BBA3 E8619B0000              	call malloc
 17073 0000BBA8 50                      	push rax
 17074 0000BBA9 BF08000000              	mov rdi, 8 * 1	; new rib
 17075 0000BBAE E8569B0000              	call malloc
 17076 0000BBB3 50                      	push rax
 17077 0000BBB4 BF10000000              	mov rdi, 8 * 2	; extended env
 17078 0000BBB9 E84B9B0000              	call malloc
 17079 0000BBBE 488B7D10                	mov rdi, ENV
 17080 0000BBC2 BE00000000              	mov rsi, 0
 17081 0000BBC7 BA01000000              	mov rdx, 1
 17082                                  .L_lambda_simple_env_loop_6d49:	; ext_env[i + 1] <-- env[i]
 17083 0000BBCC 4883FE01                	cmp rsi, 1
 17084 0000BBD0 7410                    	je .L_lambda_simple_env_end_6d49
 17085 0000BBD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17086 0000BBD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17087 0000BBDA 48FFC6                  	inc rsi
 17088 0000BBDD 48FFC2                  	inc rdx
 17089 0000BBE0 EBEA                    	jmp .L_lambda_simple_env_loop_6d49
 17090                                  .L_lambda_simple_env_end_6d49:
 17091 0000BBE2 5B                      	pop rbx
 17092 0000BBE3 BE00000000              	mov rsi, 0
 17093                                  .L_lambda_simple_params_loop_6d49:	; copy params
 17094 0000BBE8 4883FE01                	cmp rsi, 1
 17095 0000BBEC 740E                    	je .L_lambda_simple_params_end_6d49
 17096 0000BBEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17097 0000BBF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17098 0000BBF7 48FFC6                  	inc rsi
 17099 0000BBFA EBEC                    	jmp .L_lambda_simple_params_loop_6d49
 17100                                  .L_lambda_simple_params_end_6d49:
 17101 0000BBFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17102 0000BBFF 4889C3                  	mov rbx, rax
 17103 0000BC02 58                      	pop rax
 17104 0000BC03 C60004                  	mov byte [rax], T_closure
 17105 0000BC06 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17106 0000BC0A 48C74009[17BC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d49
 17107 0000BC12 E918010000              	jmp .L_lambda_simple_end_6d49
 17108                                  .L_lambda_simple_code_6d49:	; lambda-simple body
 17109 0000BC17 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17110 0000BC1D 740B                    	je .L_lambda_simple_arity_check_ok_6d49
 17111 0000BC1F FF742410                	push qword [rsp + 8 * 2]
 17112 0000BC23 6A01                    	push 1
 17113 0000BC25 E9989A0000              	jmp L_error_incorrect_arity_simple
 17114                                  .L_lambda_simple_arity_check_ok_6d49:
 17115 0000BC2A C8000000                	enter 0, 0
 17116 0000BC2E 48B8-                   	mov rax, L_constants + 2544
 17116 0000BC30 [F009000000000000] 
 17117 0000BC38 50                      	push rax
 17118 0000BC39 488B4520                	mov rax, PARAM(0)	; param ch
 17119 0000BC3D 50                      	push rax
 17120 0000BC3E 48B8-                   	mov rax, L_constants + 2542
 17120 0000BC40 [EE09000000000000] 
 17121 0000BC48 50                      	push rax
 17122 0000BC49 6A03                    	push 3	; arg count
 17123 0000BC4B 488B0425[39160000]      	mov rax, qword [free_var_129]	; free var char<=?
 17124 0000BC53 803805                  	cmp byte [rax], T_undefined
 17125 0000BC56 0F8480990000            	je L_error_fvar_undefined
 17126 0000BC5C 803804                  	cmp byte [rax], T_closure
 17127 0000BC5F 0F85FB990000            	jne L_error_non_closure
 17128 0000BC65 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17129 0000BC68 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17130                                  
 17131 0000BC6B 483D[02000000]          	cmp rax, sob_boolean_false
 17132 0000BC71 0F84B0000000            	je .L_if_else_7713
 17133                                  	; preparing a tail-call
 17134 0000BC77 488B4510                	mov rax, ENV
 17135 0000BC7B 488B00                  	mov rax, qword [rax + 8 * 0]
 17136 0000BC7E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 17137 0000BC81 50                      	push rax
 17138 0000BC82 488B4520                	mov rax, PARAM(0)	; param ch
 17139 0000BC86 50                      	push rax
 17140 0000BC87 6A01                    	push 1	; arg count
 17141 0000BC89 488B0425[400F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17142 0000BC91 803805                  	cmp byte [rax], T_undefined
 17143 0000BC94 0F8442990000            	je L_error_fvar_undefined
 17144 0000BC9A 803804                  	cmp byte [rax], T_closure
 17145 0000BC9D 0F85BD990000            	jne L_error_non_closure
 17146 0000BCA3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17147 0000BCA6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17148 0000BCA9 50                      	push rax
 17149 0000BCAA 6A02                    	push 2	; arg count
 17150 0000BCAC 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 17151 0000BCB4 803805                  	cmp byte [rax], T_undefined
 17152 0000BCB7 0F841F990000            	je L_error_fvar_undefined
 17153 0000BCBD 803804                  	cmp byte [rax], T_closure
 17154 0000BCC0 0F859A990000            	jne L_error_non_closure
 17155 0000BCC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17156 0000BCC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17157 0000BCCC 50                      	push rax
 17158 0000BCCD 6A01                    	push 1	; arg count
 17159 0000BCCF 488B0425[510F0000]      	mov rax, qword [free_var_25]	; free var integer->char
 17160 0000BCD7 803805                  	cmp byte [rax], T_undefined
 17161 0000BCDA 0F84FC980000            	je L_error_fvar_undefined
 17162 0000BCE0 803804                  	cmp byte [rax], T_closure
 17163 0000BCE3 0F8577990000            	jne L_error_non_closure
 17164 0000BCE9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17165                                  
 17166                                  	; recycling the current frame
 17167 0000BCEC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17168 0000BCEF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17169 0000BCF2 B905000000              	mov rcx, 1 + 4
 17170 0000BCF7 488B5D18                	mov rbx, COUNT
 17171 0000BCFB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17172 0000BD00 488D55F8                	lea rdx, [rbp - 8 * 1]
 17173                                  .L_tc_recycle_frame_loop_8f44:
 17174 0000BD04 4883F900                	cmp rcx, 0
 17175 0000BD08 7413                    	je .L_tc_recycle_frame_done_8f44
 17176 0000BD0A 488B32                  	mov rsi, qword [rdx]
 17177 0000BD0D 488933                  	mov qword [rbx], rsi
 17178 0000BD10 48FFC9                  	dec rcx
 17179 0000BD13 4883EB08                	sub rbx, 8 * 1
 17180 0000BD17 4883EA08                	sub rdx, 8 * 1
 17181 0000BD1B EBE7                    	jmp .L_tc_recycle_frame_loop_8f44
 17182                                  .L_tc_recycle_frame_done_8f44:
 17183 0000BD1D 488D6308                	lea rsp, [rbx + 8 * 1]
 17184 0000BD21 5D                      	pop rbp	; the proc will restore it!
 17185 0000BD22 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17186                                  
 17187 0000BD25 EB04                    	jmp .L_if_end_7713
 17188                                  
 17189                                  	.L_if_else_7713:
 17190 0000BD27 488B4520                	mov rax, PARAM(0)	; param ch
 17191                                  
 17192                                  	.L_if_end_7713:
 17193 0000BD2B C9                      	leave
 17194 0000BD2C C21800                  	ret AND_KILL_FRAME(1)
 17195                                  .L_lambda_simple_end_6d49:	; new closure is in rax
 17196 0000BD2F 48890425[8E160000]      	mov qword [free_var_134], rax	; free var char-upcase
 17197 0000BD37 803805                  	cmp byte [rax], T_undefined
 17198 0000BD3A 0F849C980000            	je L_error_fvar_undefined
 17199 0000BD40 48B8-                   	mov rax, sob_void
 17199 0000BD42 [0000000000000000] 
 17200 0000BD4A C9                      	leave
 17201 0000BD4B C21800                  	ret AND_KILL_FRAME(1)
 17202                                  .L_lambda_simple_end_6d47:	; new closure is in rax
 17203 0000BD4E 803804                  	cmp byte [rax], T_closure
 17204 0000BD51 0F8509990000            	jne L_error_non_closure
 17205 0000BD57 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17206 0000BD5A FF5009                  	call SOB_CLOSURE_CODE(rax)
 17207                                  
 17208 0000BD5D 4889C7                  	mov rdi, rax
 17209 0000BD60 E8B69A0000              	call print_sexpr_if_not_void
 17210                                  
 17211 0000BD65 48B8-                   	mov rax, L_constants + 0
 17211 0000BD67 [0000000000000000] 
 17212 0000BD6F 48890425[9F160000]      	mov qword [free_var_135], rax
 17213 0000BD77 48B8-                   	mov rax, sob_void
 17213 0000BD79 [0000000000000000] 
 17214                                  
 17215 0000BD81 4889C7                  	mov rdi, rax
 17216 0000BD84 E8929A0000              	call print_sexpr_if_not_void
 17217                                  
 17218 0000BD89 48B8-                   	mov rax, L_constants + 0
 17218 0000BD8B [0000000000000000] 
 17219 0000BD93 48890425[B0160000]      	mov qword [free_var_136], rax
 17220 0000BD9B 48B8-                   	mov rax, sob_void
 17220 0000BD9D [0000000000000000] 
 17221                                  
 17222 0000BDA5 4889C7                  	mov rdi, rax
 17223 0000BDA8 E86E9A0000              	call print_sexpr_if_not_void
 17224                                  
 17225 0000BDAD 48B8-                   	mov rax, L_constants + 0
 17225 0000BDAF [0000000000000000] 
 17226 0000BDB7 48890425[C1160000]      	mov qword [free_var_137], rax
 17227 0000BDBF 48B8-                   	mov rax, sob_void
 17227 0000BDC1 [0000000000000000] 
 17228                                  
 17229 0000BDC9 4889C7                  	mov rdi, rax
 17230 0000BDCC E84A9A0000              	call print_sexpr_if_not_void
 17231                                  
 17232 0000BDD1 48B8-                   	mov rax, L_constants + 0
 17232 0000BDD3 [0000000000000000] 
 17233 0000BDDB 48890425[D2160000]      	mov qword [free_var_138], rax
 17234 0000BDE3 48B8-                   	mov rax, sob_void
 17234 0000BDE5 [0000000000000000] 
 17235                                  
 17236 0000BDED 4889C7                  	mov rdi, rax
 17237 0000BDF0 E8269A0000              	call print_sexpr_if_not_void
 17238                                  
 17239 0000BDF5 48B8-                   	mov rax, L_constants + 0
 17239 0000BDF7 [0000000000000000] 
 17240 0000BDFF 48890425[E3160000]      	mov qword [free_var_139], rax
 17241 0000BE07 48B8-                   	mov rax, sob_void
 17241 0000BE09 [0000000000000000] 
 17242                                  
 17243 0000BE11 4889C7                  	mov rdi, rax
 17244 0000BE14 E8029A0000              	call print_sexpr_if_not_void
 17245                                  
 17246 0000BE19 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17247 0000BE1E E8E6980000              	call malloc
 17248 0000BE23 50                      	push rax
 17249 0000BE24 BF00000000              	mov rdi, 8 * 0	; new rib
 17250 0000BE29 E8DB980000              	call malloc
 17251 0000BE2E 50                      	push rax
 17252 0000BE2F BF08000000              	mov rdi, 8 * 1	; extended env
 17253 0000BE34 E8D0980000              	call malloc
 17254 0000BE39 488B7D10                	mov rdi, ENV
 17255 0000BE3D BE00000000              	mov rsi, 0
 17256 0000BE42 BA01000000              	mov rdx, 1
 17257                                  .L_lambda_simple_env_loop_6d4a:	; ext_env[i + 1] <-- env[i]
 17258 0000BE47 4883FE00                	cmp rsi, 0
 17259 0000BE4B 7410                    	je .L_lambda_simple_env_end_6d4a
 17260 0000BE4D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17261 0000BE51 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17262 0000BE55 48FFC6                  	inc rsi
 17263 0000BE58 48FFC2                  	inc rdx
 17264 0000BE5B EBEA                    	jmp .L_lambda_simple_env_loop_6d4a
 17265                                  .L_lambda_simple_env_end_6d4a:
 17266 0000BE5D 5B                      	pop rbx
 17267 0000BE5E BE00000000              	mov rsi, 0
 17268                                  .L_lambda_simple_params_loop_6d4a:	; copy params
 17269 0000BE63 4883FE00                	cmp rsi, 0
 17270 0000BE67 740E                    	je .L_lambda_simple_params_end_6d4a
 17271 0000BE69 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17272 0000BE6E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17273 0000BE72 48FFC6                  	inc rsi
 17274 0000BE75 EBEC                    	jmp .L_lambda_simple_params_loop_6d4a
 17275                                  .L_lambda_simple_params_end_6d4a:
 17276 0000BE77 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17277 0000BE7A 4889C3                  	mov rbx, rax
 17278 0000BE7D 58                      	pop rax
 17279 0000BE7E C60004                  	mov byte [rax], T_closure
 17280 0000BE81 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17281 0000BE85 48C74009[92BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d4a
 17282 0000BE8D E90F030000              	jmp .L_lambda_simple_end_6d4a
 17283                                  .L_lambda_simple_code_6d4a:	; lambda-simple body
 17284 0000BE92 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17285 0000BE98 740B                    	je .L_lambda_simple_arity_check_ok_6d4a
 17286 0000BE9A FF742410                	push qword [rsp + 8 * 2]
 17287 0000BE9E 6A01                    	push 1
 17288 0000BEA0 E91D980000              	jmp L_error_incorrect_arity_simple
 17289                                  .L_lambda_simple_arity_check_ok_6d4a:
 17290 0000BEA5 C8000000                	enter 0, 0
 17291 0000BEA9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17292 0000BEAE E856980000              	call malloc
 17293 0000BEB3 50                      	push rax
 17294 0000BEB4 BF08000000              	mov rdi, 8 * 1	; new rib
 17295 0000BEB9 E84B980000              	call malloc
 17296 0000BEBE 50                      	push rax
 17297 0000BEBF BF10000000              	mov rdi, 8 * 2	; extended env
 17298 0000BEC4 E840980000              	call malloc
 17299 0000BEC9 488B7D10                	mov rdi, ENV
 17300 0000BECD BE00000000              	mov rsi, 0
 17301 0000BED2 BA01000000              	mov rdx, 1
 17302                                  .L_lambda_opt_env_loop_0f61:	; ext_env[i + 1] <-- env[i]
 17303 0000BED7 4883FE01                	cmp rsi, 1
 17304 0000BEDB 7410                    	je .L_lambda_opt_env_end_0f61
 17305 0000BEDD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17306 0000BEE1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17307 0000BEE5 48FFC6                  	inc rsi
 17308 0000BEE8 48FFC2                  	inc rdx
 17309 0000BEEB EBEA                    	jmp .L_lambda_opt_env_loop_0f61
 17310                                  .L_lambda_opt_env_end_0f61:
 17311 0000BEED 5B                      	pop rbx
 17312 0000BEEE BE00000000              	mov rsi, 0
 17313                                  .L_lambda_opt_params_loop_0f61:	; copy params
 17314 0000BEF3 4883FE01                	cmp rsi, 1
 17315 0000BEF7 740E                    	je .L_lambda_opt_params_end_0f61
 17316 0000BEF9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17317 0000BEFE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17318 0000BF02 48FFC6                  	inc rsi
 17319 0000BF05 EBEC                    	jmp .L_lambda_opt_params_loop_0f61
 17320                                  .L_lambda_opt_params_end_0f61:
 17321 0000BF07 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17322 0000BF0A 4889C3                  	mov rbx, rax
 17323 0000BF0D 58                      	pop rax
 17324 0000BF0E C60004                  	mov byte [rax], T_closure
 17325 0000BF11 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17326 0000BF15 48C74009[22BF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f61
 17327 0000BF1D E97B020000              	jmp .L_lambda_opt_end_0f61
 17328                                  .L_lambda_opt_code_0f61:	; lambda-simple body
 17329 0000BF22 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 17330 0000BF28 740D                    	je .L_lambda_opt_arity_check_exact_0f61 ;	 if equal, go to exact arity
 17331 0000BF2A 7F42                    	jg .L_lambda_opt_arity_check_more_0f61 ;	 if greater than, go to arity more
 17332 0000BF2C FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 17333 0000BF30 6A00                     	push 0
 17334 0000BF32 E99F970000              	jmp L_error_incorrect_arity_opt
 17335                                  	.L_lambda_opt_arity_check_exact_0f61:
 17336 0000BF37 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 17337 0000BF3C 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 17338 0000BF41 4883EC08                	sub rsp, 8
 17339 0000BF45 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 17340                                  	.L_lambda_opt_exact_shifting_loop_0f61:
 17341 0000BF49 488B5108                	mov rdx, [rcx + 8]
 17342 0000BF4D 488911                  	mov [rcx], rdx
 17343 0000BF50 4883C108                	add rcx, 8
 17344 0000BF54 4839CB                  	cmp rbx, rcx
 17345 0000BF57 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f61
 17346                                  	.L_lambda_opt_exact_shifting_loop_end_0f61:
 17347 0000BF59 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 17348 0000BF60 4883C001                	add rax, 1 ; 	arg count += 1
 17349 0000BF64 4889442410              	mov qword [rsp + 8 * 2], rax
 17350 0000BF69 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f61
 17351                                  	.L_lambda_opt_arity_check_more_0f61:
 17352 0000BF6E 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 17352 0000BF70 [0100000000000000] 
 17353 0000BF78 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 17354 0000BF7E 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f61
 17355                                  	.L_lambda_opt_stack_shrink_loop_0f61:
 17356 0000BF80 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 17357 0000BF85 E87F970000              	call malloc ;	 allocated memory for the optional scheme list
 17358 0000BF8A C60021                  	mov byte[rax], T_pair ;	 set type pair
 17359 0000BF8D 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 17360 0000BF91 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 17361 0000BF94 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 17362 0000BF99 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 17363 0000BF9E 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 17364 0000BFA2 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 17365                                  	.L_lambda_opt_more_shifting_loop_0f61:
 17366 0000BFA7 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 17367 0000BFAA 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 17368 0000BFAE 4883EB08                	sub rbx, 8 
 17369 0000BFB2 4839DC                  	cmp rsp, rbx
 17370 0000BFB5 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f61
 17371                                  	.L_lambda_opt_more_shifting_loop_end_0f61:
 17372 0000BFB7 4883C408                	add rsp, 8 ;	 update rsp
 17373 0000BFBB 488B5C2410              	mov rbx, [rsp + 8 * 2]
 17374 0000BFC0 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 17375 0000BFC4 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 17376 0000BFC9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17377 0000BFCF 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f61
 17378                                  	.L_lambda_opt_stack_shrink_loop_exit_0f61:
 17379 0000BFD1 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 17380 0000BFD6 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 17381 0000BFDB BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 17382 0000BFE0 E824970000              	call malloc ;	 allocated memory for the optional scheme list
 17383 0000BFE5 C60021                  	mov byte[rax], T_pair ;	 set type pair
 17384 0000BFE8 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 17385 0000BFEC 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 17386 0000BFF0 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 17387                                  	.L_lambda_opt_stack_adjusted_0f61:
 17388 0000BFF5 C8000000                	enter 0, 0
 17389                                  	; preparing a tail-call
 17390 0000BFF9 488B4520                	mov rax, PARAM(0)	; param s
 17391 0000BFFD 50                      	push rax
 17392 0000BFFE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17393 0000C003 E801970000              	call malloc
 17394 0000C008 50                      	push rax
 17395 0000C009 BF08000000              	mov rdi, 8 * 1	; new rib
 17396 0000C00E E8F6960000              	call malloc
 17397 0000C013 50                      	push rax
 17398 0000C014 BF18000000              	mov rdi, 8 * 3	; extended env
 17399 0000C019 E8EB960000              	call malloc
 17400 0000C01E 488B7D10                	mov rdi, ENV
 17401 0000C022 BE00000000              	mov rsi, 0
 17402 0000C027 BA01000000              	mov rdx, 1
 17403                                  .L_lambda_simple_env_loop_6d4b:	; ext_env[i + 1] <-- env[i]
 17404 0000C02C 4883FE02                	cmp rsi, 2
 17405 0000C030 7410                    	je .L_lambda_simple_env_end_6d4b
 17406 0000C032 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17407 0000C036 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17408 0000C03A 48FFC6                  	inc rsi
 17409 0000C03D 48FFC2                  	inc rdx
 17410 0000C040 EBEA                    	jmp .L_lambda_simple_env_loop_6d4b
 17411                                  .L_lambda_simple_env_end_6d4b:
 17412 0000C042 5B                      	pop rbx
 17413 0000C043 BE00000000              	mov rsi, 0
 17414                                  .L_lambda_simple_params_loop_6d4b:	; copy params
 17415 0000C048 4883FE01                	cmp rsi, 1
 17416 0000C04C 740E                    	je .L_lambda_simple_params_end_6d4b
 17417 0000C04E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17418 0000C053 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17419 0000C057 48FFC6                  	inc rsi
 17420 0000C05A EBEC                    	jmp .L_lambda_simple_params_loop_6d4b
 17421                                  .L_lambda_simple_params_end_6d4b:
 17422 0000C05C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17423 0000C05F 4889C3                  	mov rbx, rax
 17424 0000C062 58                      	pop rax
 17425 0000C063 C60004                  	mov byte [rax], T_closure
 17426 0000C066 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17427 0000C06A 48C74009[77C00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d4b
 17428 0000C072 E99B000000              	jmp .L_lambda_simple_end_6d4b
 17429                                  .L_lambda_simple_code_6d4b:	; lambda-simple body
 17430 0000C077 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17431 0000C07D 740B                    	je .L_lambda_simple_arity_check_ok_6d4b
 17432 0000C07F FF742410                	push qword [rsp + 8 * 2]
 17433 0000C083 6A01                    	push 1
 17434 0000C085 E938960000              	jmp L_error_incorrect_arity_simple
 17435                                  .L_lambda_simple_arity_check_ok_6d4b:
 17436 0000C08A C8000000                	enter 0, 0
 17437                                  	; preparing a tail-call
 17438 0000C08E 488B4520                	mov rax, PARAM(0)	; param ch
 17439 0000C092 50                      	push rax
 17440 0000C093 6A01                    	push 1	; arg count
 17441 0000C095 488B0425[7D160000]      	mov rax, qword [free_var_133]	; free var char-downcase
 17442 0000C09D 803805                  	cmp byte [rax], T_undefined
 17443 0000C0A0 0F8436950000            	je L_error_fvar_undefined
 17444 0000C0A6 803804                  	cmp byte [rax], T_closure
 17445 0000C0A9 0F85B1950000            	jne L_error_non_closure
 17446 0000C0AF FF7001                  	push SOB_CLOSURE_ENV(rax)
 17447 0000C0B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17448 0000C0B5 50                      	push rax
 17449 0000C0B6 6A01                    	push 1	; arg count
 17450 0000C0B8 488B0425[400F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17451 0000C0C0 803805                  	cmp byte [rax], T_undefined
 17452 0000C0C3 0F8413950000            	je L_error_fvar_undefined
 17453 0000C0C9 803804                  	cmp byte [rax], T_closure
 17454 0000C0CC 0F858E950000            	jne L_error_non_closure
 17455 0000C0D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17456                                  
 17457                                  	; recycling the current frame
 17458 0000C0D5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17459 0000C0D8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17460 0000C0DB B905000000              	mov rcx, 1 + 4
 17461 0000C0E0 488B5D18                	mov rbx, COUNT
 17462 0000C0E4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17463 0000C0E9 488D55F8                	lea rdx, [rbp - 8 * 1]
 17464                                  .L_tc_recycle_frame_loop_8f45:
 17465 0000C0ED 4883F900                	cmp rcx, 0
 17466 0000C0F1 7413                    	je .L_tc_recycle_frame_done_8f45
 17467 0000C0F3 488B32                  	mov rsi, qword [rdx]
 17468 0000C0F6 488933                  	mov qword [rbx], rsi
 17469 0000C0F9 48FFC9                  	dec rcx
 17470 0000C0FC 4883EB08                	sub rbx, 8 * 1
 17471 0000C100 4883EA08                	sub rdx, 8 * 1
 17472 0000C104 EBE7                    	jmp .L_tc_recycle_frame_loop_8f45
 17473                                  .L_tc_recycle_frame_done_8f45:
 17474 0000C106 488D6308                	lea rsp, [rbx + 8 * 1]
 17475 0000C10A 5D                      	pop rbp	; the proc will restore it!
 17476 0000C10B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17477 0000C10E C9                      	leave
 17478 0000C10F C21800                  	ret AND_KILL_FRAME(1)
 17479                                  .L_lambda_simple_end_6d4b:	; new closure is in rax
 17480 0000C112 50                      	push rax
 17481 0000C113 6A02                    	push 2	; arg count
 17482 0000C115 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
 17483 0000C11D 803805                  	cmp byte [rax], T_undefined
 17484 0000C120 0F84B6940000            	je L_error_fvar_undefined
 17485 0000C126 803804                  	cmp byte [rax], T_closure
 17486 0000C129 0F8531950000            	jne L_error_non_closure
 17487 0000C12F FF7001                  	push SOB_CLOSURE_ENV(rax)
 17488 0000C132 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17489 0000C135 50                      	push rax
 17490 0000C136 488B4510                	mov rax, ENV
 17491 0000C13A 488B00                  	mov rax, qword [rax + 8 * 0]
 17492 0000C13D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 17493 0000C140 50                      	push rax
 17494 0000C141 6A02                    	push 2	; arg count
 17495 0000C143 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
 17496 0000C14B 803805                  	cmp byte [rax], T_undefined
 17497 0000C14E 0F8488940000            	je L_error_fvar_undefined
 17498 0000C154 803804                  	cmp byte [rax], T_closure
 17499 0000C157 0F8503950000            	jne L_error_non_closure
 17500 0000C15D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17501                                  
 17502                                  	; recycling the current frame
 17503 0000C160 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17504 0000C163 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17505 0000C166 B906000000              	mov rcx, 2 + 4
 17506 0000C16B 488B5D18                	mov rbx, COUNT
 17507 0000C16F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17508 0000C174 488D55F8                	lea rdx, [rbp - 8 * 1]
 17509                                  .L_tc_recycle_frame_loop_8f46:
 17510 0000C178 4883F900                	cmp rcx, 0
 17511 0000C17C 7413                    	je .L_tc_recycle_frame_done_8f46
 17512 0000C17E 488B32                  	mov rsi, qword [rdx]
 17513 0000C181 488933                  	mov qword [rbx], rsi
 17514 0000C184 48FFC9                  	dec rcx
 17515 0000C187 4883EB08                	sub rbx, 8 * 1
 17516 0000C18B 4883EA08                	sub rdx, 8 * 1
 17517 0000C18F EBE7                    	jmp .L_tc_recycle_frame_loop_8f46
 17518                                  .L_tc_recycle_frame_done_8f46:
 17519 0000C191 488D6308                	lea rsp, [rbx + 8 * 1]
 17520 0000C195 5D                      	pop rbp	; the proc will restore it!
 17521 0000C196 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17522 0000C199 C9                      	leave
 17523 0000C19A C21800                  	ret AND_KILL_FRAME(1)
 17524                                  .L_lambda_opt_end_0f61:	; new closure is in rax
 17525 0000C19D C9                      	leave
 17526 0000C19E C21800                  	ret AND_KILL_FRAME(1)
 17527                                  .L_lambda_simple_end_6d4a:	; new closure is in rax
 17528 0000C1A1 50                      	push rax
 17529 0000C1A2 6A01                    	push 1	; arg count
 17530 0000C1A4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17531 0000C1A9 E85B950000              	call malloc
 17532 0000C1AE 50                      	push rax
 17533 0000C1AF BF00000000              	mov rdi, 8 * 0	; new rib
 17534 0000C1B4 E850950000              	call malloc
 17535 0000C1B9 50                      	push rax
 17536 0000C1BA BF08000000              	mov rdi, 8 * 1	; extended env
 17537 0000C1BF E845950000              	call malloc
 17538 0000C1C4 488B7D10                	mov rdi, ENV
 17539 0000C1C8 BE00000000              	mov rsi, 0
 17540 0000C1CD BA01000000              	mov rdx, 1
 17541                                  .L_lambda_simple_env_loop_6d4c:	; ext_env[i + 1] <-- env[i]
 17542 0000C1D2 4883FE00                	cmp rsi, 0
 17543 0000C1D6 7410                    	je .L_lambda_simple_env_end_6d4c
 17544 0000C1D8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17545 0000C1DC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17546 0000C1E0 48FFC6                  	inc rsi
 17547 0000C1E3 48FFC2                  	inc rdx
 17548 0000C1E6 EBEA                    	jmp .L_lambda_simple_env_loop_6d4c
 17549                                  .L_lambda_simple_env_end_6d4c:
 17550 0000C1E8 5B                      	pop rbx
 17551 0000C1E9 BE00000000              	mov rsi, 0
 17552                                  .L_lambda_simple_params_loop_6d4c:	; copy params
 17553 0000C1EE 4883FE00                	cmp rsi, 0
 17554 0000C1F2 740E                    	je .L_lambda_simple_params_end_6d4c
 17555 0000C1F4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17556 0000C1F9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17557 0000C1FD 48FFC6                  	inc rsi
 17558 0000C200 EBEC                    	jmp .L_lambda_simple_params_loop_6d4c
 17559                                  .L_lambda_simple_params_end_6d4c:
 17560 0000C202 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17561 0000C205 4889C3                  	mov rbx, rax
 17562 0000C208 58                      	pop rax
 17563 0000C209 C60004                  	mov byte [rax], T_closure
 17564 0000C20C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17565 0000C210 48C74009[1DC20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d4c
 17566 0000C218 E965010000              	jmp .L_lambda_simple_end_6d4c
 17567                                  .L_lambda_simple_code_6d4c:	; lambda-simple body
 17568 0000C21D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17569 0000C223 740B                    	je .L_lambda_simple_arity_check_ok_6d4c
 17570 0000C225 FF742410                	push qword [rsp + 8 * 2]
 17571 0000C229 6A01                    	push 1
 17572 0000C22B E992940000              	jmp L_error_incorrect_arity_simple
 17573                                  .L_lambda_simple_arity_check_ok_6d4c:
 17574 0000C230 C8000000                	enter 0, 0
 17575 0000C234 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 17576 0000C23C 803805                  	cmp byte [rax], T_undefined
 17577 0000C23F 0F8497930000            	je L_error_fvar_undefined
 17578 0000C245 50                      	push rax
 17579 0000C246 6A01                    	push 1	; arg count
 17580 0000C248 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17581 0000C24C 803804                  	cmp byte [rax], T_closure
 17582 0000C24F 0F850B940000            	jne L_error_non_closure
 17583 0000C255 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17584 0000C258 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17585 0000C25B 48890425[9F160000]      	mov qword [free_var_135], rax	; free var char-ci<?
 17586 0000C263 803805                  	cmp byte [rax], T_undefined
 17587 0000C266 0F8470930000            	je L_error_fvar_undefined
 17588 0000C26C 48B8-                   	mov rax, sob_void
 17588 0000C26E [0000000000000000] 
 17589                                  
 17590 0000C276 488B0425[D3150000]      	mov rax, qword [free_var_123]	; free var <=
 17591 0000C27E 803805                  	cmp byte [rax], T_undefined
 17592 0000C281 0F8455930000            	je L_error_fvar_undefined
 17593 0000C287 50                      	push rax
 17594 0000C288 6A01                    	push 1	; arg count
 17595 0000C28A 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17596 0000C28E 803804                  	cmp byte [rax], T_closure
 17597 0000C291 0F85C9930000            	jne L_error_non_closure
 17598 0000C297 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17599 0000C29A FF5009                  	call SOB_CLOSURE_CODE(rax)
 17600 0000C29D 48890425[B0160000]      	mov qword [free_var_136], rax	; free var char-ci<=?
 17601 0000C2A5 803805                  	cmp byte [rax], T_undefined
 17602 0000C2A8 0F842E930000            	je L_error_fvar_undefined
 17603 0000C2AE 48B8-                   	mov rax, sob_void
 17603 0000C2B0 [0000000000000000] 
 17604                                  
 17605 0000C2B8 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 17606 0000C2C0 803805                  	cmp byte [rax], T_undefined
 17607 0000C2C3 0F8413930000            	je L_error_fvar_undefined
 17608 0000C2C9 50                      	push rax
 17609 0000C2CA 6A01                    	push 1	; arg count
 17610 0000C2CC 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17611 0000C2D0 803804                  	cmp byte [rax], T_closure
 17612 0000C2D3 0F8587930000            	jne L_error_non_closure
 17613 0000C2D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17614 0000C2DC FF5009                  	call SOB_CLOSURE_CODE(rax)
 17615 0000C2DF 48890425[C1160000]      	mov qword [free_var_137], rax	; free var char-ci=?
 17616 0000C2E7 803805                  	cmp byte [rax], T_undefined
 17617 0000C2EA 0F84EC920000            	je L_error_fvar_undefined
 17618 0000C2F0 48B8-                   	mov rax, sob_void
 17618 0000C2F2 [0000000000000000] 
 17619                                  
 17620 0000C2FA 488B0425[E4150000]      	mov rax, qword [free_var_124]	; free var >
 17621 0000C302 803805                  	cmp byte [rax], T_undefined
 17622 0000C305 0F84D1920000            	je L_error_fvar_undefined
 17623 0000C30B 50                      	push rax
 17624 0000C30C 6A01                    	push 1	; arg count
 17625 0000C30E 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17626 0000C312 803804                  	cmp byte [rax], T_closure
 17627 0000C315 0F8545930000            	jne L_error_non_closure
 17628 0000C31B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17629 0000C31E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17630 0000C321 48890425[D2160000]      	mov qword [free_var_138], rax	; free var char-ci>?
 17631 0000C329 803805                  	cmp byte [rax], T_undefined
 17632 0000C32C 0F84AA920000            	je L_error_fvar_undefined
 17633 0000C332 48B8-                   	mov rax, sob_void
 17633 0000C334 [0000000000000000] 
 17634                                  
 17635 0000C33C 488B0425[F5150000]      	mov rax, qword [free_var_125]	; free var >=
 17636 0000C344 803805                  	cmp byte [rax], T_undefined
 17637 0000C347 0F848F920000            	je L_error_fvar_undefined
 17638 0000C34D 50                      	push rax
 17639 0000C34E 6A01                    	push 1	; arg count
 17640 0000C350 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17641 0000C354 803804                  	cmp byte [rax], T_closure
 17642 0000C357 0F8503930000            	jne L_error_non_closure
 17643 0000C35D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17644 0000C360 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17645 0000C363 48890425[E3160000]      	mov qword [free_var_139], rax	; free var char-ci>=?
 17646 0000C36B 803805                  	cmp byte [rax], T_undefined
 17647 0000C36E 0F8468920000            	je L_error_fvar_undefined
 17648 0000C374 48B8-                   	mov rax, sob_void
 17648 0000C376 [0000000000000000] 
 17649 0000C37E C9                      	leave
 17650 0000C37F C21800                  	ret AND_KILL_FRAME(1)
 17651                                  .L_lambda_simple_end_6d4c:	; new closure is in rax
 17652 0000C382 803804                  	cmp byte [rax], T_closure
 17653 0000C385 0F85D5920000            	jne L_error_non_closure
 17654 0000C38B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17655 0000C38E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17656                                  
 17657 0000C391 4889C7                  	mov rdi, rax
 17658 0000C394 E882940000              	call print_sexpr_if_not_void
 17659                                  
 17660 0000C399 48B8-                   	mov rax, L_constants + 0
 17660 0000C39B [0000000000000000] 
 17661 0000C3A3 48890425[F4160000]      	mov qword [free_var_140], rax
 17662 0000C3AB 48B8-                   	mov rax, sob_void
 17662 0000C3AD [0000000000000000] 
 17663                                  
 17664 0000C3B5 4889C7                  	mov rdi, rax
 17665 0000C3B8 E85E940000              	call print_sexpr_if_not_void
 17666                                  
 17667 0000C3BD 48B8-                   	mov rax, L_constants + 0
 17667 0000C3BF [0000000000000000] 
 17668 0000C3C7 48890425[05170000]      	mov qword [free_var_141], rax
 17669 0000C3CF 48B8-                   	mov rax, sob_void
 17669 0000C3D1 [0000000000000000] 
 17670                                  
 17671 0000C3D9 4889C7                  	mov rdi, rax
 17672 0000C3DC E83A940000              	call print_sexpr_if_not_void
 17673                                  
 17674 0000C3E1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17675 0000C3E6 E81E930000              	call malloc
 17676 0000C3EB 50                      	push rax
 17677 0000C3EC BF00000000              	mov rdi, 8 * 0	; new rib
 17678 0000C3F1 E813930000              	call malloc
 17679 0000C3F6 50                      	push rax
 17680 0000C3F7 BF08000000              	mov rdi, 8 * 1	; extended env
 17681 0000C3FC E808930000              	call malloc
 17682 0000C401 488B7D10                	mov rdi, ENV
 17683 0000C405 BE00000000              	mov rsi, 0
 17684 0000C40A BA01000000              	mov rdx, 1
 17685                                  .L_lambda_simple_env_loop_6d4d:	; ext_env[i + 1] <-- env[i]
 17686 0000C40F 4883FE00                	cmp rsi, 0
 17687 0000C413 7410                    	je .L_lambda_simple_env_end_6d4d
 17688 0000C415 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17689 0000C419 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17690 0000C41D 48FFC6                  	inc rsi
 17691 0000C420 48FFC2                  	inc rdx
 17692 0000C423 EBEA                    	jmp .L_lambda_simple_env_loop_6d4d
 17693                                  .L_lambda_simple_env_end_6d4d:
 17694 0000C425 5B                      	pop rbx
 17695 0000C426 BE00000000              	mov rsi, 0
 17696                                  .L_lambda_simple_params_loop_6d4d:	; copy params
 17697 0000C42B 4883FE00                	cmp rsi, 0
 17698 0000C42F 740E                    	je .L_lambda_simple_params_end_6d4d
 17699 0000C431 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17700 0000C436 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17701 0000C43A 48FFC6                  	inc rsi
 17702 0000C43D EBEC                    	jmp .L_lambda_simple_params_loop_6d4d
 17703                                  .L_lambda_simple_params_end_6d4d:
 17704 0000C43F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17705 0000C442 4889C3                  	mov rbx, rax
 17706 0000C445 58                      	pop rax
 17707 0000C446 C60004                  	mov byte [rax], T_closure
 17708 0000C449 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17709 0000C44D 48C74009[5AC40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d4d
 17710 0000C455 E95D010000              	jmp .L_lambda_simple_end_6d4d
 17711                                  .L_lambda_simple_code_6d4d:	; lambda-simple body
 17712 0000C45A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17713 0000C460 740B                    	je .L_lambda_simple_arity_check_ok_6d4d
 17714 0000C462 FF742410                	push qword [rsp + 8 * 2]
 17715 0000C466 6A01                    	push 1
 17716 0000C468 E955920000              	jmp L_error_incorrect_arity_simple
 17717                                  .L_lambda_simple_arity_check_ok_6d4d:
 17718 0000C46D C8000000                	enter 0, 0
 17719 0000C471 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17720 0000C476 E88E920000              	call malloc
 17721 0000C47B 50                      	push rax
 17722 0000C47C BF08000000              	mov rdi, 8 * 1	; new rib
 17723 0000C481 E883920000              	call malloc
 17724 0000C486 50                      	push rax
 17725 0000C487 BF10000000              	mov rdi, 8 * 2	; extended env
 17726 0000C48C E878920000              	call malloc
 17727 0000C491 488B7D10                	mov rdi, ENV
 17728 0000C495 BE00000000              	mov rsi, 0
 17729 0000C49A BA01000000              	mov rdx, 1
 17730                                  .L_lambda_simple_env_loop_6d4e:	; ext_env[i + 1] <-- env[i]
 17731 0000C49F 4883FE01                	cmp rsi, 1
 17732 0000C4A3 7410                    	je .L_lambda_simple_env_end_6d4e
 17733 0000C4A5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17734 0000C4A9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17735 0000C4AD 48FFC6                  	inc rsi
 17736 0000C4B0 48FFC2                  	inc rdx
 17737 0000C4B3 EBEA                    	jmp .L_lambda_simple_env_loop_6d4e
 17738                                  .L_lambda_simple_env_end_6d4e:
 17739 0000C4B5 5B                      	pop rbx
 17740 0000C4B6 BE00000000              	mov rsi, 0
 17741                                  .L_lambda_simple_params_loop_6d4e:	; copy params
 17742 0000C4BB 4883FE01                	cmp rsi, 1
 17743 0000C4BF 740E                    	je .L_lambda_simple_params_end_6d4e
 17744 0000C4C1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17745 0000C4C6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17746 0000C4CA 48FFC6                  	inc rsi
 17747 0000C4CD EBEC                    	jmp .L_lambda_simple_params_loop_6d4e
 17748                                  .L_lambda_simple_params_end_6d4e:
 17749 0000C4CF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17750 0000C4D2 4889C3                  	mov rbx, rax
 17751 0000C4D5 58                      	pop rax
 17752 0000C4D6 C60004                  	mov byte [rax], T_closure
 17753 0000C4D9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17754 0000C4DD 48C74009[EAC40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d4e
 17755 0000C4E5 E9C9000000              	jmp .L_lambda_simple_end_6d4e
 17756                                  .L_lambda_simple_code_6d4e:	; lambda-simple body
 17757 0000C4EA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17758 0000C4F0 740B                    	je .L_lambda_simple_arity_check_ok_6d4e
 17759 0000C4F2 FF742410                	push qword [rsp + 8 * 2]
 17760 0000C4F6 6A01                    	push 1
 17761 0000C4F8 E9C5910000              	jmp L_error_incorrect_arity_simple
 17762                                  .L_lambda_simple_arity_check_ok_6d4e:
 17763 0000C4FD C8000000                	enter 0, 0
 17764                                  	; preparing a tail-call
 17765 0000C501 488B4520                	mov rax, PARAM(0)	; param str
 17766 0000C505 50                      	push rax
 17767 0000C506 6A01                    	push 1	; arg count
 17768 0000C508 488B0425[27170000]      	mov rax, qword [free_var_143]	; free var string->list
 17769 0000C510 803805                  	cmp byte [rax], T_undefined
 17770 0000C513 0F84C3900000            	je L_error_fvar_undefined
 17771 0000C519 803804                  	cmp byte [rax], T_closure
 17772 0000C51C 0F853E910000            	jne L_error_non_closure
 17773 0000C522 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17774 0000C525 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17775 0000C528 50                      	push rax
 17776 0000C529 488B4510                	mov rax, ENV
 17777 0000C52D 488B00                  	mov rax, qword [rax + 8 * 0]
 17778 0000C530 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char-case-converter
 17779 0000C533 50                      	push rax
 17780 0000C534 6A02                    	push 2	; arg count
 17781 0000C536 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
 17782 0000C53E 803805                  	cmp byte [rax], T_undefined
 17783 0000C541 0F8495900000            	je L_error_fvar_undefined
 17784 0000C547 803804                  	cmp byte [rax], T_closure
 17785 0000C54A 0F8510910000            	jne L_error_non_closure
 17786 0000C550 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17787 0000C553 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17788 0000C556 50                      	push rax
 17789 0000C557 6A01                    	push 1	; arg count
 17790 0000C559 488B0425[16170000]      	mov rax, qword [free_var_142]	; free var list->string
 17791 0000C561 803805                  	cmp byte [rax], T_undefined
 17792 0000C564 0F8472900000            	je L_error_fvar_undefined
 17793 0000C56A 803804                  	cmp byte [rax], T_closure
 17794 0000C56D 0F85ED900000            	jne L_error_non_closure
 17795 0000C573 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17796                                  
 17797                                  	; recycling the current frame
 17798 0000C576 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17799 0000C579 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17800 0000C57C B905000000              	mov rcx, 1 + 4
 17801 0000C581 488B5D18                	mov rbx, COUNT
 17802 0000C585 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17803 0000C58A 488D55F8                	lea rdx, [rbp - 8 * 1]
 17804                                  .L_tc_recycle_frame_loop_8f47:
 17805 0000C58E 4883F900                	cmp rcx, 0
 17806 0000C592 7413                    	je .L_tc_recycle_frame_done_8f47
 17807 0000C594 488B32                  	mov rsi, qword [rdx]
 17808 0000C597 488933                  	mov qword [rbx], rsi
 17809 0000C59A 48FFC9                  	dec rcx
 17810 0000C59D 4883EB08                	sub rbx, 8 * 1
 17811 0000C5A1 4883EA08                	sub rdx, 8 * 1
 17812 0000C5A5 EBE7                    	jmp .L_tc_recycle_frame_loop_8f47
 17813                                  .L_tc_recycle_frame_done_8f47:
 17814 0000C5A7 488D6308                	lea rsp, [rbx + 8 * 1]
 17815 0000C5AB 5D                      	pop rbp	; the proc will restore it!
 17816 0000C5AC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17817 0000C5AF C9                      	leave
 17818 0000C5B0 C21800                  	ret AND_KILL_FRAME(1)
 17819                                  .L_lambda_simple_end_6d4e:	; new closure is in rax
 17820 0000C5B3 C9                      	leave
 17821 0000C5B4 C21800                  	ret AND_KILL_FRAME(1)
 17822                                  .L_lambda_simple_end_6d4d:	; new closure is in rax
 17823 0000C5B7 50                      	push rax
 17824 0000C5B8 6A01                    	push 1	; arg count
 17825 0000C5BA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17826 0000C5BF E845910000              	call malloc
 17827 0000C5C4 50                      	push rax
 17828 0000C5C5 BF00000000              	mov rdi, 8 * 0	; new rib
 17829 0000C5CA E83A910000              	call malloc
 17830 0000C5CF 50                      	push rax
 17831 0000C5D0 BF08000000              	mov rdi, 8 * 1	; extended env
 17832 0000C5D5 E82F910000              	call malloc
 17833 0000C5DA 488B7D10                	mov rdi, ENV
 17834 0000C5DE BE00000000              	mov rsi, 0
 17835 0000C5E3 BA01000000              	mov rdx, 1
 17836                                  .L_lambda_simple_env_loop_6d4f:	; ext_env[i + 1] <-- env[i]
 17837 0000C5E8 4883FE00                	cmp rsi, 0
 17838 0000C5EC 7410                    	je .L_lambda_simple_env_end_6d4f
 17839 0000C5EE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17840 0000C5F2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17841 0000C5F6 48FFC6                  	inc rsi
 17842 0000C5F9 48FFC2                  	inc rdx
 17843 0000C5FC EBEA                    	jmp .L_lambda_simple_env_loop_6d4f
 17844                                  .L_lambda_simple_env_end_6d4f:
 17845 0000C5FE 5B                      	pop rbx
 17846 0000C5FF BE00000000              	mov rsi, 0
 17847                                  .L_lambda_simple_params_loop_6d4f:	; copy params
 17848 0000C604 4883FE00                	cmp rsi, 0
 17849 0000C608 740E                    	je .L_lambda_simple_params_end_6d4f
 17850 0000C60A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17851 0000C60F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17852 0000C613 48FFC6                  	inc rsi
 17853 0000C616 EBEC                    	jmp .L_lambda_simple_params_loop_6d4f
 17854                                  .L_lambda_simple_params_end_6d4f:
 17855 0000C618 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17856 0000C61B 4889C3                  	mov rbx, rax
 17857 0000C61E 58                      	pop rax
 17858 0000C61F C60004                  	mov byte [rax], T_closure
 17859 0000C622 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17860 0000C626 48C74009[33C60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d4f
 17861 0000C62E E99F000000              	jmp .L_lambda_simple_end_6d4f
 17862                                  .L_lambda_simple_code_6d4f:	; lambda-simple body
 17863 0000C633 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17864 0000C639 740B                    	je .L_lambda_simple_arity_check_ok_6d4f
 17865 0000C63B FF742410                	push qword [rsp + 8 * 2]
 17866 0000C63F 6A01                    	push 1
 17867 0000C641 E97C900000              	jmp L_error_incorrect_arity_simple
 17868                                  .L_lambda_simple_arity_check_ok_6d4f:
 17869 0000C646 C8000000                	enter 0, 0
 17870 0000C64A 488B0425[7D160000]      	mov rax, qword [free_var_133]	; free var char-downcase
 17871 0000C652 803805                  	cmp byte [rax], T_undefined
 17872 0000C655 0F84818F0000            	je L_error_fvar_undefined
 17873 0000C65B 50                      	push rax
 17874 0000C65C 6A01                    	push 1	; arg count
 17875 0000C65E 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 17876 0000C662 803804                  	cmp byte [rax], T_closure
 17877 0000C665 0F85F58F0000            	jne L_error_non_closure
 17878 0000C66B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17879 0000C66E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17880 0000C671 48890425[F4160000]      	mov qword [free_var_140], rax	; free var string-downcase
 17881 0000C679 803805                  	cmp byte [rax], T_undefined
 17882 0000C67C 0F845A8F0000            	je L_error_fvar_undefined
 17883 0000C682 48B8-                   	mov rax, sob_void
 17883 0000C684 [0000000000000000] 
 17884                                  
 17885 0000C68C 488B0425[8E160000]      	mov rax, qword [free_var_134]	; free var char-upcase
 17886 0000C694 803805                  	cmp byte [rax], T_undefined
 17887 0000C697 0F843F8F0000            	je L_error_fvar_undefined
 17888 0000C69D 50                      	push rax
 17889 0000C69E 6A01                    	push 1	; arg count
 17890 0000C6A0 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 17891 0000C6A4 803804                  	cmp byte [rax], T_closure
 17892 0000C6A7 0F85B38F0000            	jne L_error_non_closure
 17893 0000C6AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 17894 0000C6B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17895 0000C6B3 48890425[05170000]      	mov qword [free_var_141], rax	; free var string-upcase
 17896 0000C6BB 803805                  	cmp byte [rax], T_undefined
 17897 0000C6BE 0F84188F0000            	je L_error_fvar_undefined
 17898 0000C6C4 48B8-                   	mov rax, sob_void
 17898 0000C6C6 [0000000000000000] 
 17899 0000C6CE C9                      	leave
 17900 0000C6CF C21800                  	ret AND_KILL_FRAME(1)
 17901                                  .L_lambda_simple_end_6d4f:	; new closure is in rax
 17902 0000C6D2 803804                  	cmp byte [rax], T_closure
 17903 0000C6D5 0F85858F0000            	jne L_error_non_closure
 17904 0000C6DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 17905 0000C6DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 17906                                  
 17907 0000C6E1 4889C7                  	mov rdi, rax
 17908 0000C6E4 E832910000              	call print_sexpr_if_not_void
 17909                                  
 17910 0000C6E9 48B8-                   	mov rax, L_constants + 0
 17910 0000C6EB [0000000000000000] 
 17911 0000C6F3 48890425[38170000]      	mov qword [free_var_144], rax
 17912 0000C6FB 48B8-                   	mov rax, sob_void
 17912 0000C6FD [0000000000000000] 
 17913                                  
 17914 0000C705 4889C7                  	mov rdi, rax
 17915 0000C708 E80E910000              	call print_sexpr_if_not_void
 17916                                  
 17917 0000C70D 48B8-                   	mov rax, L_constants + 0
 17917 0000C70F [0000000000000000] 
 17918 0000C717 48890425[49170000]      	mov qword [free_var_145], rax
 17919 0000C71F 48B8-                   	mov rax, sob_void
 17919 0000C721 [0000000000000000] 
 17920                                  
 17921 0000C729 4889C7                  	mov rdi, rax
 17922 0000C72C E8EA900000              	call print_sexpr_if_not_void
 17923                                  
 17924 0000C731 48B8-                   	mov rax, L_constants + 0
 17924 0000C733 [0000000000000000] 
 17925 0000C73B 48890425[5A170000]      	mov qword [free_var_146], rax
 17926 0000C743 48B8-                   	mov rax, sob_void
 17926 0000C745 [0000000000000000] 
 17927                                  
 17928 0000C74D 4889C7                  	mov rdi, rax
 17929 0000C750 E8C6900000              	call print_sexpr_if_not_void
 17930                                  
 17931 0000C755 48B8-                   	mov rax, L_constants + 0
 17931 0000C757 [0000000000000000] 
 17932 0000C75F 48890425[6B170000]      	mov qword [free_var_147], rax
 17933 0000C767 48B8-                   	mov rax, sob_void
 17933 0000C769 [0000000000000000] 
 17934                                  
 17935 0000C771 4889C7                  	mov rdi, rax
 17936 0000C774 E8A2900000              	call print_sexpr_if_not_void
 17937                                  
 17938 0000C779 48B8-                   	mov rax, L_constants + 0
 17938 0000C77B [0000000000000000] 
 17939 0000C783 48890425[7C170000]      	mov qword [free_var_148], rax
 17940 0000C78B 48B8-                   	mov rax, sob_void
 17940 0000C78D [0000000000000000] 
 17941                                  
 17942 0000C795 4889C7                  	mov rdi, rax
 17943 0000C798 E87E900000              	call print_sexpr_if_not_void
 17944                                  
 17945 0000C79D 48B8-                   	mov rax, L_constants + 0
 17945 0000C79F [0000000000000000] 
 17946 0000C7A7 48890425[8D170000]      	mov qword [free_var_149], rax
 17947 0000C7AF 48B8-                   	mov rax, sob_void
 17947 0000C7B1 [0000000000000000] 
 17948                                  
 17949 0000C7B9 4889C7                  	mov rdi, rax
 17950 0000C7BC E85A900000              	call print_sexpr_if_not_void
 17951                                  
 17952 0000C7C1 48B8-                   	mov rax, L_constants + 0
 17952 0000C7C3 [0000000000000000] 
 17953 0000C7CB 48890425[9E170000]      	mov qword [free_var_150], rax
 17954 0000C7D3 48B8-                   	mov rax, sob_void
 17954 0000C7D5 [0000000000000000] 
 17955                                  
 17956 0000C7DD 4889C7                  	mov rdi, rax
 17957 0000C7E0 E836900000              	call print_sexpr_if_not_void
 17958                                  
 17959 0000C7E5 48B8-                   	mov rax, L_constants + 0
 17959 0000C7E7 [0000000000000000] 
 17960 0000C7EF 48890425[AF170000]      	mov qword [free_var_151], rax
 17961 0000C7F7 48B8-                   	mov rax, sob_void
 17961 0000C7F9 [0000000000000000] 
 17962                                  
 17963 0000C801 4889C7                  	mov rdi, rax
 17964 0000C804 E812900000              	call print_sexpr_if_not_void
 17965                                  
 17966 0000C809 48B8-                   	mov rax, L_constants + 0
 17966 0000C80B [0000000000000000] 
 17967 0000C813 48890425[C0170000]      	mov qword [free_var_152], rax
 17968 0000C81B 48B8-                   	mov rax, sob_void
 17968 0000C81D [0000000000000000] 
 17969                                  
 17970 0000C825 4889C7                  	mov rdi, rax
 17971 0000C828 E8EE8F0000              	call print_sexpr_if_not_void
 17972                                  
 17973 0000C82D 48B8-                   	mov rax, L_constants + 0
 17973 0000C82F [0000000000000000] 
 17974 0000C837 48890425[D1170000]      	mov qword [free_var_153], rax
 17975 0000C83F 48B8-                   	mov rax, sob_void
 17975 0000C841 [0000000000000000] 
 17976                                  
 17977 0000C849 4889C7                  	mov rdi, rax
 17978 0000C84C E8CA8F0000              	call print_sexpr_if_not_void
 17979                                  
 17980 0000C851 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17981 0000C856 E8AE8E0000              	call malloc
 17982 0000C85B 50                      	push rax
 17983 0000C85C BF00000000              	mov rdi, 8 * 0	; new rib
 17984 0000C861 E8A38E0000              	call malloc
 17985 0000C866 50                      	push rax
 17986 0000C867 BF08000000              	mov rdi, 8 * 1	; extended env
 17987 0000C86C E8988E0000              	call malloc
 17988 0000C871 488B7D10                	mov rdi, ENV
 17989 0000C875 BE00000000              	mov rsi, 0
 17990 0000C87A BA01000000              	mov rdx, 1
 17991                                  .L_lambda_simple_env_loop_6d50:	; ext_env[i + 1] <-- env[i]
 17992 0000C87F 4883FE00                	cmp rsi, 0
 17993 0000C883 7410                    	je .L_lambda_simple_env_end_6d50
 17994 0000C885 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17995 0000C889 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17996 0000C88D 48FFC6                  	inc rsi
 17997 0000C890 48FFC2                  	inc rdx
 17998 0000C893 EBEA                    	jmp .L_lambda_simple_env_loop_6d50
 17999                                  .L_lambda_simple_env_end_6d50:
 18000 0000C895 5B                      	pop rbx
 18001 0000C896 BE00000000              	mov rsi, 0
 18002                                  .L_lambda_simple_params_loop_6d50:	; copy params
 18003 0000C89B 4883FE00                	cmp rsi, 0
 18004 0000C89F 740E                    	je .L_lambda_simple_params_end_6d50
 18005 0000C8A1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18006 0000C8A6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18007 0000C8AA 48FFC6                  	inc rsi
 18008 0000C8AD EBEC                    	jmp .L_lambda_simple_params_loop_6d50
 18009                                  .L_lambda_simple_params_end_6d50:
 18010 0000C8AF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18011 0000C8B2 4889C3                  	mov rbx, rax
 18012 0000C8B5 58                      	pop rax
 18013 0000C8B6 C60004                  	mov byte [rax], T_closure
 18014 0000C8B9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18015 0000C8BD 48C74009[CAC80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d50
 18016 0000C8C5 E99B0C0000              	jmp .L_lambda_simple_end_6d50
 18017                                  .L_lambda_simple_code_6d50:	; lambda-simple body
 18018 0000C8CA 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18019 0000C8D0 740B                    	je .L_lambda_simple_arity_check_ok_6d50
 18020 0000C8D2 FF742410                	push qword [rsp + 8 * 2]
 18021 0000C8D6 6A02                    	push 2
 18022 0000C8D8 E9E58D0000              	jmp L_error_incorrect_arity_simple
 18023                                  .L_lambda_simple_arity_check_ok_6d50:
 18024 0000C8DD C8000000                	enter 0, 0
 18025                                  	; preparing a tail-call
 18026 0000C8E1 48B8-                   	mov rax, L_constants + 1881
 18026 0000C8E3 [5907000000000000] 
 18027 0000C8EB 50                      	push rax
 18028 0000C8EC 6A01                    	push 1	; arg count
 18029 0000C8EE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18030 0000C8F3 E8118E0000              	call malloc
 18031 0000C8F8 50                      	push rax
 18032 0000C8F9 BF10000000              	mov rdi, 8 * 2	; new rib
 18033 0000C8FE E8068E0000              	call malloc
 18034 0000C903 50                      	push rax
 18035 0000C904 BF10000000              	mov rdi, 8 * 2	; extended env
 18036 0000C909 E8FB8D0000              	call malloc
 18037 0000C90E 488B7D10                	mov rdi, ENV
 18038 0000C912 BE00000000              	mov rsi, 0
 18039 0000C917 BA01000000              	mov rdx, 1
 18040                                  .L_lambda_simple_env_loop_6d51:	; ext_env[i + 1] <-- env[i]
 18041 0000C91C 4883FE01                	cmp rsi, 1
 18042 0000C920 7410                    	je .L_lambda_simple_env_end_6d51
 18043 0000C922 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18044 0000C926 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18045 0000C92A 48FFC6                  	inc rsi
 18046 0000C92D 48FFC2                  	inc rdx
 18047 0000C930 EBEA                    	jmp .L_lambda_simple_env_loop_6d51
 18048                                  .L_lambda_simple_env_end_6d51:
 18049 0000C932 5B                      	pop rbx
 18050 0000C933 BE00000000              	mov rsi, 0
 18051                                  .L_lambda_simple_params_loop_6d51:	; copy params
 18052 0000C938 4883FE02                	cmp rsi, 2
 18053 0000C93C 740E                    	je .L_lambda_simple_params_end_6d51
 18054 0000C93E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18055 0000C943 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18056 0000C947 48FFC6                  	inc rsi
 18057 0000C94A EBEC                    	jmp .L_lambda_simple_params_loop_6d51
 18058                                  .L_lambda_simple_params_end_6d51:
 18059 0000C94C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18060 0000C94F 4889C3                  	mov rbx, rax
 18061 0000C952 58                      	pop rax
 18062 0000C953 C60004                  	mov byte [rax], T_closure
 18063 0000C956 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18064 0000C95A 48C74009[67C90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d51
 18065 0000C962 E9B50B0000              	jmp .L_lambda_simple_end_6d51
 18066                                  .L_lambda_simple_code_6d51:	; lambda-simple body
 18067 0000C967 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18068 0000C96D 740B                    	je .L_lambda_simple_arity_check_ok_6d51
 18069 0000C96F FF742410                	push qword [rsp + 8 * 2]
 18070 0000C973 6A01                    	push 1
 18071 0000C975 E9488D0000              	jmp L_error_incorrect_arity_simple
 18072                                  .L_lambda_simple_arity_check_ok_6d51:
 18073 0000C97A C8000000                	enter 0, 0
 18074                                  
 18075 0000C97E BF08000000              	mov rdi, 8
 18076 0000C983 E8818D0000              	call malloc
 18077 0000C988 488B5D20                	mov rbx, PARAM(0)	; param run
 18078 0000C98C 488918                  	mov [rax], rbx	; box run
 18079 0000C98F 48894520                	mov PARAM(0), rax	;replace param run with box
 18080 0000C993 48B8-                   	mov rax, sob_void
 18080 0000C995 [0000000000000000] 
 18081                                  
 18082 0000C99D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18083 0000C9A2 E8628D0000              	call malloc
 18084 0000C9A7 50                      	push rax
 18085 0000C9A8 BF08000000              	mov rdi, 8 * 1	; new rib
 18086 0000C9AD E8578D0000              	call malloc
 18087 0000C9B2 50                      	push rax
 18088 0000C9B3 BF18000000              	mov rdi, 8 * 3	; extended env
 18089 0000C9B8 E84C8D0000              	call malloc
 18090 0000C9BD 488B7D10                	mov rdi, ENV
 18091 0000C9C1 BE00000000              	mov rsi, 0
 18092 0000C9C6 BA01000000              	mov rdx, 1
 18093                                  .L_lambda_simple_env_loop_6d52:	; ext_env[i + 1] <-- env[i]
 18094 0000C9CB 4883FE02                	cmp rsi, 2
 18095 0000C9CF 7410                    	je .L_lambda_simple_env_end_6d52
 18096 0000C9D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18097 0000C9D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18098 0000C9D9 48FFC6                  	inc rsi
 18099 0000C9DC 48FFC2                  	inc rdx
 18100 0000C9DF EBEA                    	jmp .L_lambda_simple_env_loop_6d52
 18101                                  .L_lambda_simple_env_end_6d52:
 18102 0000C9E1 5B                      	pop rbx
 18103 0000C9E2 BE00000000              	mov rsi, 0
 18104                                  .L_lambda_simple_params_loop_6d52:	; copy params
 18105 0000C9E7 4883FE01                	cmp rsi, 1
 18106 0000C9EB 740E                    	je .L_lambda_simple_params_end_6d52
 18107 0000C9ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18108 0000C9F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18109 0000C9F6 48FFC6                  	inc rsi
 18110 0000C9F9 EBEC                    	jmp .L_lambda_simple_params_loop_6d52
 18111                                  .L_lambda_simple_params_end_6d52:
 18112 0000C9FB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18113 0000C9FE 4889C3                  	mov rbx, rax
 18114 0000CA01 58                      	pop rax
 18115 0000CA02 C60004                  	mov byte [rax], T_closure
 18116 0000CA05 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18117 0000CA09 48C74009[16CA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d52
 18118 0000CA11 E983020000              	jmp .L_lambda_simple_end_6d52
 18119                                  .L_lambda_simple_code_6d52:	; lambda-simple body
 18120 0000CA16 48837C241005            	cmp qword [rsp + 8 * 2], 5
 18121 0000CA1C 740B                    	je .L_lambda_simple_arity_check_ok_6d52
 18122 0000CA1E FF742410                	push qword [rsp + 8 * 2]
 18123 0000CA22 6A05                    	push 5
 18124 0000CA24 E9998C0000              	jmp L_error_incorrect_arity_simple
 18125                                  .L_lambda_simple_arity_check_ok_6d52:
 18126 0000CA29 C8000000                	enter 0, 0
 18127 0000CA2D 488B4530                	mov rax, PARAM(2)	; param len1
 18128 0000CA31 50                      	push rax
 18129 0000CA32 488B4520                	mov rax, PARAM(0)	; param i
 18130 0000CA36 50                      	push rax
 18131 0000CA37 6A02                    	push 2	; arg count
 18132 0000CA39 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 18133 0000CA41 803805                  	cmp byte [rax], T_undefined
 18134 0000CA44 0F84928B0000            	je L_error_fvar_undefined
 18135 0000CA4A 803804                  	cmp byte [rax], T_closure
 18136 0000CA4D 0F850D8C0000            	jne L_error_non_closure
 18137 0000CA53 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18138 0000CA56 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18139                                  
 18140 0000CA59 483D[02000000]          	cmp rax, sob_boolean_false
 18141 0000CA5F 742E                    	je .L_if_else_7714
 18142 0000CA61 488B4540                	mov rax, PARAM(4)	; param len2
 18143 0000CA65 50                      	push rax
 18144 0000CA66 488B4530                	mov rax, PARAM(2)	; param len1
 18145 0000CA6A 50                      	push rax
 18146 0000CA6B 6A02                    	push 2	; arg count
 18147 0000CA6D 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 18148 0000CA75 803805                  	cmp byte [rax], T_undefined
 18149 0000CA78 0F845E8B0000            	je L_error_fvar_undefined
 18150 0000CA7E 803804                  	cmp byte [rax], T_closure
 18151 0000CA81 0F85D98B0000            	jne L_error_non_closure
 18152 0000CA87 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18153 0000CA8A FF5009                  	call SOB_CLOSURE_CODE(rax)
 18154                                  
 18155 0000CA8D EB0A                    	jmp .L_if_end_7714
 18156                                  
 18157                                  	.L_if_else_7714:
 18158 0000CA8F 48B8-                   	mov rax, L_constants + 2
 18158 0000CA91 [0200000000000000] 
 18159                                  
 18160                                  	.L_if_end_7714:
 18161 0000CA99 483D[02000000]          	cmp rax, sob_boolean_false
 18162 0000CA9F 0F85F0010000            	jne .L_or_end_0775
 18163 0000CAA5 488B4530                	mov rax, PARAM(2)	; param len1
 18164 0000CAA9 50                      	push rax
 18165 0000CAAA 488B4520                	mov rax, PARAM(0)	; param i
 18166 0000CAAE 50                      	push rax
 18167 0000CAAF 6A02                    	push 2	; arg count
 18168 0000CAB1 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 18169 0000CAB9 803805                  	cmp byte [rax], T_undefined
 18170 0000CABC 0F841A8B0000            	je L_error_fvar_undefined
 18171 0000CAC2 803804                  	cmp byte [rax], T_closure
 18172 0000CAC5 0F85958B0000            	jne L_error_non_closure
 18173 0000CACB FF7001                  	push SOB_CLOSURE_ENV(rax)
 18174 0000CACE FF5009                  	call SOB_CLOSURE_CODE(rax)
 18175                                  
 18176 0000CAD1 483D[02000000]          	cmp rax, sob_boolean_false
 18177 0000CAD7 0F84AE010000            	je .L_if_else_7715
 18178 0000CADD 488B4520                	mov rax, PARAM(0)	; param i
 18179 0000CAE1 50                      	push rax
 18180 0000CAE2 488B4538                	mov rax, PARAM(3)	; param str2
 18181 0000CAE6 50                      	push rax
 18182 0000CAE7 6A02                    	push 2	; arg count
 18183 0000CAE9 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18184 0000CAF1 803805                  	cmp byte [rax], T_undefined
 18185 0000CAF4 0F84E28A0000            	je L_error_fvar_undefined
 18186 0000CAFA 803804                  	cmp byte [rax], T_closure
 18187 0000CAFD 0F855D8B0000            	jne L_error_non_closure
 18188 0000CB03 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18189 0000CB06 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18190 0000CB09 50                      	push rax
 18191 0000CB0A 488B4520                	mov rax, PARAM(0)	; param i
 18192 0000CB0E 50                      	push rax
 18193 0000CB0F 488B4528                	mov rax, PARAM(1)	; param str1
 18194 0000CB13 50                      	push rax
 18195 0000CB14 6A02                    	push 2	; arg count
 18196 0000CB16 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18197 0000CB1E 803805                  	cmp byte [rax], T_undefined
 18198 0000CB21 0F84B58A0000            	je L_error_fvar_undefined
 18199 0000CB27 803804                  	cmp byte [rax], T_closure
 18200 0000CB2A 0F85308B0000            	jne L_error_non_closure
 18201 0000CB30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18202 0000CB33 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18203 0000CB36 50                      	push rax
 18204 0000CB37 6A02                    	push 2	; arg count
 18205 0000CB39 488B4510                	mov rax, ENV
 18206 0000CB3D 488B4008                	mov rax, qword [rax + 8 * 1]
 18207 0000CB41 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 18208 0000CB44 803804                  	cmp byte [rax], T_closure
 18209 0000CB47 0F85138B0000            	jne L_error_non_closure
 18210 0000CB4D FF7001                  	push SOB_CLOSURE_ENV(rax)
 18211 0000CB50 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18212 0000CB53 483D[02000000]          	cmp rax, sob_boolean_false
 18213 0000CB59 0F852A010000            	jne .L_or_end_0776
 18214 0000CB5F 488B4520                	mov rax, PARAM(0)	; param i
 18215 0000CB63 50                      	push rax
 18216 0000CB64 488B4538                	mov rax, PARAM(3)	; param str2
 18217 0000CB68 50                      	push rax
 18218 0000CB69 6A02                    	push 2	; arg count
 18219 0000CB6B 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18220 0000CB73 803805                  	cmp byte [rax], T_undefined
 18221 0000CB76 0F84608A0000            	je L_error_fvar_undefined
 18222 0000CB7C 803804                  	cmp byte [rax], T_closure
 18223 0000CB7F 0F85DB8A0000            	jne L_error_non_closure
 18224 0000CB85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18225 0000CB88 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18226 0000CB8B 50                      	push rax
 18227 0000CB8C 488B4520                	mov rax, PARAM(0)	; param i
 18228 0000CB90 50                      	push rax
 18229 0000CB91 488B4528                	mov rax, PARAM(1)	; param str1
 18230 0000CB95 50                      	push rax
 18231 0000CB96 6A02                    	push 2	; arg count
 18232 0000CB98 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18233 0000CBA0 803805                  	cmp byte [rax], T_undefined
 18234 0000CBA3 0F84338A0000            	je L_error_fvar_undefined
 18235 0000CBA9 803804                  	cmp byte [rax], T_closure
 18236 0000CBAC 0F85AE8A0000            	jne L_error_non_closure
 18237 0000CBB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18238 0000CBB5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18239 0000CBB8 50                      	push rax
 18240 0000CBB9 6A02                    	push 2	; arg count
 18241 0000CBBB 488B4510                	mov rax, ENV
 18242 0000CBBF 488B4008                	mov rax, qword [rax + 8 * 1]
 18243 0000CBC3 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 18244 0000CBC7 803804                  	cmp byte [rax], T_closure
 18245 0000CBCA 0F85908A0000            	jne L_error_non_closure
 18246 0000CBD0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18247 0000CBD3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18248                                  
 18249 0000CBD6 483D[02000000]          	cmp rax, sob_boolean_false
 18250 0000CBDC 0F849D000000            	je .L_if_else_7716
 18251                                  	; preparing a tail-call
 18252 0000CBE2 488B4540                	mov rax, PARAM(4)	; param len2
 18253 0000CBE6 50                      	push rax
 18254 0000CBE7 488B4538                	mov rax, PARAM(3)	; param str2
 18255 0000CBEB 50                      	push rax
 18256 0000CBEC 488B4530                	mov rax, PARAM(2)	; param len1
 18257 0000CBF0 50                      	push rax
 18258 0000CBF1 488B4528                	mov rax, PARAM(1)	; param str1
 18259 0000CBF5 50                      	push rax
 18260 0000CBF6 48B8-                   	mov rax, L_constants + 2158
 18260 0000CBF8 [6E08000000000000] 
 18261 0000CC00 50                      	push rax
 18262 0000CC01 488B4520                	mov rax, PARAM(0)	; param i
 18263 0000CC05 50                      	push rax
 18264 0000CC06 6A02                    	push 2	; arg count
 18265 0000CC08 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 18266 0000CC10 803805                  	cmp byte [rax], T_undefined
 18267 0000CC13 0F84C3890000            	je L_error_fvar_undefined
 18268 0000CC19 803804                  	cmp byte [rax], T_closure
 18269 0000CC1C 0F853E8A0000            	jne L_error_non_closure
 18270 0000CC22 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18271 0000CC25 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18272 0000CC28 50                      	push rax
 18273 0000CC29 6A05                    	push 5	; arg count
 18274 0000CC2B 488B4510                	mov rax, ENV
 18275 0000CC2F 488B00                  	mov rax, qword [rax + 8 * 0]
 18276 0000CC32 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18277 0000CC35 488B00                  	mov rax, qword [rax]
 18278 0000CC38 803804                  	cmp byte [rax], T_closure
 18279 0000CC3B 0F851F8A0000            	jne L_error_non_closure
 18280 0000CC41 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18281                                  
 18282                                  	; recycling the current frame
 18283 0000CC44 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18284 0000CC47 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18285 0000CC4A B909000000              	mov rcx, 5 + 4
 18286 0000CC4F 488B5D18                	mov rbx, COUNT
 18287 0000CC53 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18288 0000CC58 488D55F8                	lea rdx, [rbp - 8 * 1]
 18289                                  .L_tc_recycle_frame_loop_8f48:
 18290 0000CC5C 4883F900                	cmp rcx, 0
 18291 0000CC60 7413                    	je .L_tc_recycle_frame_done_8f48
 18292 0000CC62 488B32                  	mov rsi, qword [rdx]
 18293 0000CC65 488933                  	mov qword [rbx], rsi
 18294 0000CC68 48FFC9                  	dec rcx
 18295 0000CC6B 4883EB08                	sub rbx, 8 * 1
 18296 0000CC6F 4883EA08                	sub rdx, 8 * 1
 18297 0000CC73 EBE7                    	jmp .L_tc_recycle_frame_loop_8f48
 18298                                  .L_tc_recycle_frame_done_8f48:
 18299 0000CC75 488D6308                	lea rsp, [rbx + 8 * 1]
 18300 0000CC79 5D                      	pop rbp	; the proc will restore it!
 18301 0000CC7A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18302                                  
 18303 0000CC7D EB0A                    	jmp .L_if_end_7716
 18304                                  
 18305                                  	.L_if_else_7716:
 18306 0000CC7F 48B8-                   	mov rax, L_constants + 2
 18306 0000CC81 [0200000000000000] 
 18307                                  
 18308                                  	.L_if_end_7716:
 18309                                  .L_or_end_0776:
 18310                                  
 18311 0000CC89 EB0A                    	jmp .L_if_end_7715
 18312                                  
 18313                                  	.L_if_else_7715:
 18314 0000CC8B 48B8-                   	mov rax, L_constants + 2
 18314 0000CC8D [0200000000000000] 
 18315                                  
 18316                                  	.L_if_end_7715:
 18317                                  .L_or_end_0775:
 18318 0000CC95 C9                      	leave
 18319 0000CC96 C23800                  	ret AND_KILL_FRAME(5)
 18320                                  .L_lambda_simple_end_6d52:	; new closure is in rax
 18321                                  
 18322 0000CC99 50                      	push rax
 18323 0000CC9A 488B4520                	mov rax, PARAM(0)	; param run
 18324                                  
 18325 0000CC9E 8F00                    	pop qword[rax]
 18326 0000CCA0 48B8-                   	mov rax, sob_void
 18326 0000CCA2 [0000000000000000] 
 18327                                  
 18328                                  	; preparing a tail-call
 18329 0000CCAA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18330 0000CCAF E8558A0000              	call malloc
 18331 0000CCB4 50                      	push rax
 18332 0000CCB5 BF08000000              	mov rdi, 8 * 1	; new rib
 18333 0000CCBA E84A8A0000              	call malloc
 18334 0000CCBF 50                      	push rax
 18335 0000CCC0 BF18000000              	mov rdi, 8 * 3	; extended env
 18336 0000CCC5 E83F8A0000              	call malloc
 18337 0000CCCA 488B7D10                	mov rdi, ENV
 18338 0000CCCE BE00000000              	mov rsi, 0
 18339 0000CCD3 BA01000000              	mov rdx, 1
 18340                                  .L_lambda_simple_env_loop_6d53:	; ext_env[i + 1] <-- env[i]
 18341 0000CCD8 4883FE02                	cmp rsi, 2
 18342 0000CCDC 7410                    	je .L_lambda_simple_env_end_6d53
 18343 0000CCDE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18344 0000CCE2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18345 0000CCE6 48FFC6                  	inc rsi
 18346 0000CCE9 48FFC2                  	inc rdx
 18347 0000CCEC EBEA                    	jmp .L_lambda_simple_env_loop_6d53
 18348                                  .L_lambda_simple_env_end_6d53:
 18349 0000CCEE 5B                      	pop rbx
 18350 0000CCEF BE00000000              	mov rsi, 0
 18351                                  .L_lambda_simple_params_loop_6d53:	; copy params
 18352 0000CCF4 4883FE01                	cmp rsi, 1
 18353 0000CCF8 740E                    	je .L_lambda_simple_params_end_6d53
 18354 0000CCFA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18355 0000CCFF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18356 0000CD03 48FFC6                  	inc rsi
 18357 0000CD06 EBEC                    	jmp .L_lambda_simple_params_loop_6d53
 18358                                  .L_lambda_simple_params_end_6d53:
 18359 0000CD08 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18360 0000CD0B 4889C3                  	mov rbx, rax
 18361 0000CD0E 58                      	pop rax
 18362 0000CD0F C60004                  	mov byte [rax], T_closure
 18363 0000CD12 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18364 0000CD16 48C74009[23CD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d53
 18365 0000CD1E E985020000              	jmp .L_lambda_simple_end_6d53
 18366                                  .L_lambda_simple_code_6d53:	; lambda-simple body
 18367 0000CD23 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18368 0000CD29 740B                    	je .L_lambda_simple_arity_check_ok_6d53
 18369 0000CD2B FF742410                	push qword [rsp + 8 * 2]
 18370 0000CD2F 6A02                    	push 2
 18371 0000CD31 E98C890000              	jmp L_error_incorrect_arity_simple
 18372                                  .L_lambda_simple_arity_check_ok_6d53:
 18373 0000CD36 C8000000                	enter 0, 0
 18374                                  	; preparing a tail-call
 18375 0000CD3A 488B4528                	mov rax, PARAM(1)	; param str2
 18376 0000CD3E 50                      	push rax
 18377 0000CD3F 6A01                    	push 1	; arg count
 18378 0000CD41 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 18379 0000CD49 803805                  	cmp byte [rax], T_undefined
 18380 0000CD4C 0F848A880000            	je L_error_fvar_undefined
 18381 0000CD52 803804                  	cmp byte [rax], T_closure
 18382 0000CD55 0F8505890000            	jne L_error_non_closure
 18383 0000CD5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 18384 0000CD5E FF5009                  	call SOB_CLOSURE_CODE(rax)
 18385 0000CD61 50                      	push rax
 18386 0000CD62 488B4520                	mov rax, PARAM(0)	; param str1
 18387 0000CD66 50                      	push rax
 18388 0000CD67 6A01                    	push 1	; arg count
 18389 0000CD69 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 18390 0000CD71 803805                  	cmp byte [rax], T_undefined
 18391 0000CD74 0F8462880000            	je L_error_fvar_undefined
 18392 0000CD7A 803804                  	cmp byte [rax], T_closure
 18393 0000CD7D 0F85DD880000            	jne L_error_non_closure
 18394 0000CD83 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18395 0000CD86 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18396 0000CD89 50                      	push rax
 18397 0000CD8A 6A02                    	push 2	; arg count
 18398 0000CD8C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18399 0000CD91 E873890000              	call malloc
 18400 0000CD96 50                      	push rax
 18401 0000CD97 BF10000000              	mov rdi, 8 * 2	; new rib
 18402 0000CD9C E868890000              	call malloc
 18403 0000CDA1 50                      	push rax
 18404 0000CDA2 BF20000000              	mov rdi, 8 * 4	; extended env
 18405 0000CDA7 E85D890000              	call malloc
 18406 0000CDAC 488B7D10                	mov rdi, ENV
 18407 0000CDB0 BE00000000              	mov rsi, 0
 18408 0000CDB5 BA01000000              	mov rdx, 1
 18409                                  .L_lambda_simple_env_loop_6d54:	; ext_env[i + 1] <-- env[i]
 18410 0000CDBA 4883FE03                	cmp rsi, 3
 18411 0000CDBE 7410                    	je .L_lambda_simple_env_end_6d54
 18412 0000CDC0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18413 0000CDC4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18414 0000CDC8 48FFC6                  	inc rsi
 18415 0000CDCB 48FFC2                  	inc rdx
 18416 0000CDCE EBEA                    	jmp .L_lambda_simple_env_loop_6d54
 18417                                  .L_lambda_simple_env_end_6d54:
 18418 0000CDD0 5B                      	pop rbx
 18419 0000CDD1 BE00000000              	mov rsi, 0
 18420                                  .L_lambda_simple_params_loop_6d54:	; copy params
 18421 0000CDD6 4883FE02                	cmp rsi, 2
 18422 0000CDDA 740E                    	je .L_lambda_simple_params_end_6d54
 18423 0000CDDC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18424 0000CDE1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18425 0000CDE5 48FFC6                  	inc rsi
 18426 0000CDE8 EBEC                    	jmp .L_lambda_simple_params_loop_6d54
 18427                                  .L_lambda_simple_params_end_6d54:
 18428 0000CDEA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18429 0000CDED 4889C3                  	mov rbx, rax
 18430 0000CDF0 58                      	pop rax
 18431 0000CDF1 C60004                  	mov byte [rax], T_closure
 18432 0000CDF4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18433 0000CDF8 48C74009[05CE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d54
 18434 0000CE00 E95A010000              	jmp .L_lambda_simple_end_6d54
 18435                                  .L_lambda_simple_code_6d54:	; lambda-simple body
 18436 0000CE05 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18437 0000CE0B 740B                    	je .L_lambda_simple_arity_check_ok_6d54
 18438 0000CE0D FF742410                	push qword [rsp + 8 * 2]
 18439 0000CE11 6A02                    	push 2
 18440 0000CE13 E9AA880000              	jmp L_error_incorrect_arity_simple
 18441                                  .L_lambda_simple_arity_check_ok_6d54:
 18442 0000CE18 C8000000                	enter 0, 0
 18443 0000CE1C 488B4528                	mov rax, PARAM(1)	; param len2
 18444 0000CE20 50                      	push rax
 18445 0000CE21 488B4520                	mov rax, PARAM(0)	; param len1
 18446 0000CE25 50                      	push rax
 18447 0000CE26 6A02                    	push 2	; arg count
 18448 0000CE28 488B0425[D3150000]      	mov rax, qword [free_var_123]	; free var <=
 18449 0000CE30 803805                  	cmp byte [rax], T_undefined
 18450 0000CE33 0F84A3870000            	je L_error_fvar_undefined
 18451 0000CE39 803804                  	cmp byte [rax], T_closure
 18452 0000CE3C 0F851E880000            	jne L_error_non_closure
 18453 0000CE42 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18454 0000CE45 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18455                                  
 18456 0000CE48 483D[02000000]          	cmp rax, sob_boolean_false
 18457 0000CE4E 0F8486000000            	je .L_if_else_7717
 18458                                  	; preparing a tail-call
 18459 0000CE54 488B4528                	mov rax, PARAM(1)	; param len2
 18460 0000CE58 50                      	push rax
 18461 0000CE59 488B4510                	mov rax, ENV
 18462 0000CE5D 488B00                  	mov rax, qword [rax + 8 * 0]
 18463 0000CE60 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 18464 0000CE64 50                      	push rax
 18465 0000CE65 488B4520                	mov rax, PARAM(0)	; param len1
 18466 0000CE69 50                      	push rax
 18467 0000CE6A 488B4510                	mov rax, ENV
 18468 0000CE6E 488B00                  	mov rax, qword [rax + 8 * 0]
 18469 0000CE71 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 18470 0000CE74 50                      	push rax
 18471 0000CE75 48B8-                   	mov rax, L_constants + 2023
 18471 0000CE77 [E707000000000000] 
 18472 0000CE7F 50                      	push rax
 18473 0000CE80 6A05                    	push 5	; arg count
 18474 0000CE82 488B4510                	mov rax, ENV
 18475 0000CE86 488B4008                	mov rax, qword [rax + 8 * 1]
 18476 0000CE8A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18477 0000CE8D 488B00                  	mov rax, qword [rax]
 18478 0000CE90 803804                  	cmp byte [rax], T_closure
 18479 0000CE93 0F85C7870000            	jne L_error_non_closure
 18480 0000CE99 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18481                                  
 18482                                  	; recycling the current frame
 18483 0000CE9C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18484 0000CE9F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18485 0000CEA2 B909000000              	mov rcx, 5 + 4
 18486 0000CEA7 488B5D18                	mov rbx, COUNT
 18487 0000CEAB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18488 0000CEB0 488D55F8                	lea rdx, [rbp - 8 * 1]
 18489                                  .L_tc_recycle_frame_loop_8f49:
 18490 0000CEB4 4883F900                	cmp rcx, 0
 18491 0000CEB8 7413                    	je .L_tc_recycle_frame_done_8f49
 18492 0000CEBA 488B32                  	mov rsi, qword [rdx]
 18493 0000CEBD 488933                  	mov qword [rbx], rsi
 18494 0000CEC0 48FFC9                  	dec rcx
 18495 0000CEC3 4883EB08                	sub rbx, 8 * 1
 18496 0000CEC7 4883EA08                	sub rdx, 8 * 1
 18497 0000CECB EBE7                    	jmp .L_tc_recycle_frame_loop_8f49
 18498                                  .L_tc_recycle_frame_done_8f49:
 18499 0000CECD 488D6308                	lea rsp, [rbx + 8 * 1]
 18500 0000CED1 5D                      	pop rbp	; the proc will restore it!
 18501 0000CED2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18502                                  
 18503 0000CED5 E981000000              	jmp .L_if_end_7717
 18504                                  
 18505                                  	.L_if_else_7717:
 18506                                  	; preparing a tail-call
 18507 0000CEDA 488B4520                	mov rax, PARAM(0)	; param len1
 18508 0000CEDE 50                      	push rax
 18509 0000CEDF 488B4510                	mov rax, ENV
 18510 0000CEE3 488B00                  	mov rax, qword [rax + 8 * 0]
 18511 0000CEE6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 18512 0000CEE9 50                      	push rax
 18513 0000CEEA 488B4528                	mov rax, PARAM(1)	; param len2
 18514 0000CEEE 50                      	push rax
 18515 0000CEEF 488B4510                	mov rax, ENV
 18516 0000CEF3 488B00                  	mov rax, qword [rax + 8 * 0]
 18517 0000CEF6 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 18518 0000CEFA 50                      	push rax
 18519 0000CEFB 48B8-                   	mov rax, L_constants + 2023
 18519 0000CEFD [E707000000000000] 
 18520 0000CF05 50                      	push rax
 18521 0000CF06 6A05                    	push 5	; arg count
 18522 0000CF08 488B4510                	mov rax, ENV
 18523 0000CF0C 488B4008                	mov rax, qword [rax + 8 * 1]
 18524 0000CF10 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18525 0000CF13 488B00                  	mov rax, qword [rax]
 18526 0000CF16 803804                  	cmp byte [rax], T_closure
 18527 0000CF19 0F8541870000            	jne L_error_non_closure
 18528 0000CF1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18529                                  
 18530                                  	; recycling the current frame
 18531 0000CF22 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18532 0000CF25 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18533 0000CF28 B909000000              	mov rcx, 5 + 4
 18534 0000CF2D 488B5D18                	mov rbx, COUNT
 18535 0000CF31 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18536 0000CF36 488D55F8                	lea rdx, [rbp - 8 * 1]
 18537                                  .L_tc_recycle_frame_loop_8f4a:
 18538 0000CF3A 4883F900                	cmp rcx, 0
 18539 0000CF3E 7413                    	je .L_tc_recycle_frame_done_8f4a
 18540 0000CF40 488B32                  	mov rsi, qword [rdx]
 18541 0000CF43 488933                  	mov qword [rbx], rsi
 18542 0000CF46 48FFC9                  	dec rcx
 18543 0000CF49 4883EB08                	sub rbx, 8 * 1
 18544 0000CF4D 4883EA08                	sub rdx, 8 * 1
 18545 0000CF51 EBE7                    	jmp .L_tc_recycle_frame_loop_8f4a
 18546                                  .L_tc_recycle_frame_done_8f4a:
 18547 0000CF53 488D6308                	lea rsp, [rbx + 8 * 1]
 18548 0000CF57 5D                      	pop rbp	; the proc will restore it!
 18549 0000CF58 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18550                                  
 18551                                  	.L_if_end_7717:
 18552 0000CF5B C9                      	leave
 18553 0000CF5C C22000                  	ret AND_KILL_FRAME(2)
 18554                                  .L_lambda_simple_end_6d54:	; new closure is in rax
 18555 0000CF5F 803804                  	cmp byte [rax], T_closure
 18556 0000CF62 0F85F8860000            	jne L_error_non_closure
 18557 0000CF68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18558                                  
 18559                                  	; recycling the current frame
 18560 0000CF6B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18561 0000CF6E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18562 0000CF71 B906000000              	mov rcx, 2 + 4
 18563 0000CF76 488B5D18                	mov rbx, COUNT
 18564 0000CF7A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18565 0000CF7F 488D55F8                	lea rdx, [rbp - 8 * 1]
 18566                                  .L_tc_recycle_frame_loop_8f4b:
 18567 0000CF83 4883F900                	cmp rcx, 0
 18568 0000CF87 7413                    	je .L_tc_recycle_frame_done_8f4b
 18569 0000CF89 488B32                  	mov rsi, qword [rdx]
 18570 0000CF8C 488933                  	mov qword [rbx], rsi
 18571 0000CF8F 48FFC9                  	dec rcx
 18572 0000CF92 4883EB08                	sub rbx, 8 * 1
 18573 0000CF96 4883EA08                	sub rdx, 8 * 1
 18574 0000CF9A EBE7                    	jmp .L_tc_recycle_frame_loop_8f4b
 18575                                  .L_tc_recycle_frame_done_8f4b:
 18576 0000CF9C 488D6308                	lea rsp, [rbx + 8 * 1]
 18577 0000CFA0 5D                      	pop rbp	; the proc will restore it!
 18578 0000CFA1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18579 0000CFA4 C9                      	leave
 18580 0000CFA5 C22000                  	ret AND_KILL_FRAME(2)
 18581                                  .L_lambda_simple_end_6d53:	; new closure is in rax
 18582 0000CFA8 50                      	push rax
 18583 0000CFA9 6A01                    	push 1	; arg count
 18584 0000CFAB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18585 0000CFB0 E854870000              	call malloc
 18586 0000CFB5 50                      	push rax
 18587 0000CFB6 BF08000000              	mov rdi, 8 * 1	; new rib
 18588 0000CFBB E849870000              	call malloc
 18589 0000CFC0 50                      	push rax
 18590 0000CFC1 BF18000000              	mov rdi, 8 * 3	; extended env
 18591 0000CFC6 E83E870000              	call malloc
 18592 0000CFCB 488B7D10                	mov rdi, ENV
 18593 0000CFCF BE00000000              	mov rsi, 0
 18594 0000CFD4 BA01000000              	mov rdx, 1
 18595                                  .L_lambda_simple_env_loop_6d55:	; ext_env[i + 1] <-- env[i]
 18596 0000CFD9 4883FE02                	cmp rsi, 2
 18597 0000CFDD 7410                    	je .L_lambda_simple_env_end_6d55
 18598 0000CFDF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18599 0000CFE3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18600 0000CFE7 48FFC6                  	inc rsi
 18601 0000CFEA 48FFC2                  	inc rdx
 18602 0000CFED EBEA                    	jmp .L_lambda_simple_env_loop_6d55
 18603                                  .L_lambda_simple_env_end_6d55:
 18604 0000CFEF 5B                      	pop rbx
 18605 0000CFF0 BE00000000              	mov rsi, 0
 18606                                  .L_lambda_simple_params_loop_6d55:	; copy params
 18607 0000CFF5 4883FE01                	cmp rsi, 1
 18608 0000CFF9 740E                    	je .L_lambda_simple_params_end_6d55
 18609 0000CFFB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18610 0000D000 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18611 0000D004 48FFC6                  	inc rsi
 18612 0000D007 EBEC                    	jmp .L_lambda_simple_params_loop_6d55
 18613                                  .L_lambda_simple_params_end_6d55:
 18614 0000D009 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18615 0000D00C 4889C3                  	mov rbx, rax
 18616 0000D00F 58                      	pop rax
 18617 0000D010 C60004                  	mov byte [rax], T_closure
 18618 0000D013 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18619 0000D017 48C74009[24D00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d55
 18620 0000D01F E9AF040000              	jmp .L_lambda_simple_end_6d55
 18621                                  .L_lambda_simple_code_6d55:	; lambda-simple body
 18622 0000D024 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18623 0000D02A 740B                    	je .L_lambda_simple_arity_check_ok_6d55
 18624 0000D02C FF742410                	push qword [rsp + 8 * 2]
 18625 0000D030 6A01                    	push 1
 18626 0000D032 E98B860000              	jmp L_error_incorrect_arity_simple
 18627                                  .L_lambda_simple_arity_check_ok_6d55:
 18628 0000D037 C8000000                	enter 0, 0
 18629                                  	; preparing a tail-call
 18630 0000D03B 48B8-                   	mov rax, L_constants + 1881
 18630 0000D03D [5907000000000000] 
 18631 0000D045 50                      	push rax
 18632 0000D046 6A01                    	push 1	; arg count
 18633 0000D048 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18634 0000D04D E8B7860000              	call malloc
 18635 0000D052 50                      	push rax
 18636 0000D053 BF08000000              	mov rdi, 8 * 1	; new rib
 18637 0000D058 E8AC860000              	call malloc
 18638 0000D05D 50                      	push rax
 18639 0000D05E BF20000000              	mov rdi, 8 * 4	; extended env
 18640 0000D063 E8A1860000              	call malloc
 18641 0000D068 488B7D10                	mov rdi, ENV
 18642 0000D06C BE00000000              	mov rsi, 0
 18643 0000D071 BA01000000              	mov rdx, 1
 18644                                  .L_lambda_simple_env_loop_6d56:	; ext_env[i + 1] <-- env[i]
 18645 0000D076 4883FE03                	cmp rsi, 3
 18646 0000D07A 7410                    	je .L_lambda_simple_env_end_6d56
 18647 0000D07C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18648 0000D080 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18649 0000D084 48FFC6                  	inc rsi
 18650 0000D087 48FFC2                  	inc rdx
 18651 0000D08A EBEA                    	jmp .L_lambda_simple_env_loop_6d56
 18652                                  .L_lambda_simple_env_end_6d56:
 18653 0000D08C 5B                      	pop rbx
 18654 0000D08D BE00000000              	mov rsi, 0
 18655                                  .L_lambda_simple_params_loop_6d56:	; copy params
 18656 0000D092 4883FE01                	cmp rsi, 1
 18657 0000D096 740E                    	je .L_lambda_simple_params_end_6d56
 18658 0000D098 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18659 0000D09D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18660 0000D0A1 48FFC6                  	inc rsi
 18661 0000D0A4 EBEC                    	jmp .L_lambda_simple_params_loop_6d56
 18662                                  .L_lambda_simple_params_end_6d56:
 18663 0000D0A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18664 0000D0A9 4889C3                  	mov rbx, rax
 18665 0000D0AC 58                      	pop rax
 18666 0000D0AD C60004                  	mov byte [rax], T_closure
 18667 0000D0B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18668 0000D0B4 48C74009[C1D00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d56
 18669 0000D0BC E9C9030000              	jmp .L_lambda_simple_end_6d56
 18670                                  .L_lambda_simple_code_6d56:	; lambda-simple body
 18671 0000D0C1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18672 0000D0C7 740B                    	je .L_lambda_simple_arity_check_ok_6d56
 18673 0000D0C9 FF742410                	push qword [rsp + 8 * 2]
 18674 0000D0CD 6A01                    	push 1
 18675 0000D0CF E9EE850000              	jmp L_error_incorrect_arity_simple
 18676                                  .L_lambda_simple_arity_check_ok_6d56:
 18677 0000D0D4 C8000000                	enter 0, 0
 18678                                  
 18679 0000D0D8 BF08000000              	mov rdi, 8
 18680 0000D0DD E827860000              	call malloc
 18681 0000D0E2 488B5D20                	mov rbx, PARAM(0)	; param run
 18682 0000D0E6 488918                  	mov [rax], rbx	; box run
 18683 0000D0E9 48894520                	mov PARAM(0), rax	;replace param run with box
 18684 0000D0ED 48B8-                   	mov rax, sob_void
 18684 0000D0EF [0000000000000000] 
 18685                                  
 18686 0000D0F7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18687 0000D0FC E808860000              	call malloc
 18688 0000D101 50                      	push rax
 18689 0000D102 BF08000000              	mov rdi, 8 * 1	; new rib
 18690 0000D107 E8FD850000              	call malloc
 18691 0000D10C 50                      	push rax
 18692 0000D10D BF28000000              	mov rdi, 8 * 5	; extended env
 18693 0000D112 E8F2850000              	call malloc
 18694 0000D117 488B7D10                	mov rdi, ENV
 18695 0000D11B BE00000000              	mov rsi, 0
 18696 0000D120 BA01000000              	mov rdx, 1
 18697                                  .L_lambda_simple_env_loop_6d57:	; ext_env[i + 1] <-- env[i]
 18698 0000D125 4883FE04                	cmp rsi, 4
 18699 0000D129 7410                    	je .L_lambda_simple_env_end_6d57
 18700 0000D12B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18701 0000D12F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18702 0000D133 48FFC6                  	inc rsi
 18703 0000D136 48FFC2                  	inc rdx
 18704 0000D139 EBEA                    	jmp .L_lambda_simple_env_loop_6d57
 18705                                  .L_lambda_simple_env_end_6d57:
 18706 0000D13B 5B                      	pop rbx
 18707 0000D13C BE00000000              	mov rsi, 0
 18708                                  .L_lambda_simple_params_loop_6d57:	; copy params
 18709 0000D141 4883FE01                	cmp rsi, 1
 18710 0000D145 740E                    	je .L_lambda_simple_params_end_6d57
 18711 0000D147 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18712 0000D14C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18713 0000D150 48FFC6                  	inc rsi
 18714 0000D153 EBEC                    	jmp .L_lambda_simple_params_loop_6d57
 18715                                  .L_lambda_simple_params_end_6d57:
 18716 0000D155 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18717 0000D158 4889C3                  	mov rbx, rax
 18718 0000D15B 58                      	pop rax
 18719 0000D15C C60004                  	mov byte [rax], T_closure
 18720 0000D15F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18721 0000D163 48C74009[70D10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d57
 18722 0000D16B E953010000              	jmp .L_lambda_simple_end_6d57
 18723                                  .L_lambda_simple_code_6d57:	; lambda-simple body
 18724 0000D170 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18725 0000D176 740B                    	je .L_lambda_simple_arity_check_ok_6d57
 18726 0000D178 FF742410                	push qword [rsp + 8 * 2]
 18727 0000D17C 6A02                    	push 2
 18728 0000D17E E93F850000              	jmp L_error_incorrect_arity_simple
 18729                                  .L_lambda_simple_arity_check_ok_6d57:
 18730 0000D183 C8000000                	enter 0, 0
 18731 0000D187 488B4528                	mov rax, PARAM(1)	; param strs
 18732 0000D18B 50                      	push rax
 18733 0000D18C 6A01                    	push 1	; arg count
 18734 0000D18E 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 18735 0000D196 803805                  	cmp byte [rax], T_undefined
 18736 0000D199 0F843D840000            	je L_error_fvar_undefined
 18737 0000D19F 803804                  	cmp byte [rax], T_closure
 18738 0000D1A2 0F85B8840000            	jne L_error_non_closure
 18739 0000D1A8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18740 0000D1AB FF5009                  	call SOB_CLOSURE_CODE(rax)
 18741 0000D1AE 483D[02000000]          	cmp rax, sob_boolean_false
 18742 0000D1B4 0F8505010000            	jne .L_or_end_0777
 18743 0000D1BA 488B4528                	mov rax, PARAM(1)	; param strs
 18744 0000D1BE 50                      	push rax
 18745 0000D1BF 6A01                    	push 1	; arg count
 18746 0000D1C1 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 18747 0000D1C9 803805                  	cmp byte [rax], T_undefined
 18748 0000D1CC 0F840A840000            	je L_error_fvar_undefined
 18749 0000D1D2 803804                  	cmp byte [rax], T_closure
 18750 0000D1D5 0F8585840000            	jne L_error_non_closure
 18751 0000D1DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 18752 0000D1DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 18753 0000D1E1 50                      	push rax
 18754 0000D1E2 488B4520                	mov rax, PARAM(0)	; param str
 18755 0000D1E6 50                      	push rax
 18756 0000D1E7 6A02                    	push 2	; arg count
 18757 0000D1E9 488B4510                	mov rax, ENV
 18758 0000D1ED 488B4008                	mov rax, qword [rax + 8 * 1]
 18759 0000D1F1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<?
 18760 0000D1F4 803804                  	cmp byte [rax], T_closure
 18761 0000D1F7 0F8563840000            	jne L_error_non_closure
 18762 0000D1FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 18763 0000D200 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18764                                  
 18765 0000D203 483D[02000000]          	cmp rax, sob_boolean_false
 18766 0000D209 0F84A6000000            	je .L_if_else_7718
 18767                                  	; preparing a tail-call
 18768 0000D20F 488B4528                	mov rax, PARAM(1)	; param strs
 18769 0000D213 50                      	push rax
 18770 0000D214 6A01                    	push 1	; arg count
 18771 0000D216 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 18772 0000D21E 803805                  	cmp byte [rax], T_undefined
 18773 0000D221 0F84B5830000            	je L_error_fvar_undefined
 18774 0000D227 803804                  	cmp byte [rax], T_closure
 18775 0000D22A 0F8530840000            	jne L_error_non_closure
 18776 0000D230 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18777 0000D233 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18778 0000D236 50                      	push rax
 18779 0000D237 488B4528                	mov rax, PARAM(1)	; param strs
 18780 0000D23B 50                      	push rax
 18781 0000D23C 6A01                    	push 1	; arg count
 18782 0000D23E 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 18783 0000D246 803805                  	cmp byte [rax], T_undefined
 18784 0000D249 0F848D830000            	je L_error_fvar_undefined
 18785 0000D24F 803804                  	cmp byte [rax], T_closure
 18786 0000D252 0F8508840000            	jne L_error_non_closure
 18787 0000D258 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18788 0000D25B FF5009                  	call SOB_CLOSURE_CODE(rax)
 18789 0000D25E 50                      	push rax
 18790 0000D25F 6A02                    	push 2	; arg count
 18791 0000D261 488B4510                	mov rax, ENV
 18792 0000D265 488B00                  	mov rax, qword [rax + 8 * 0]
 18793 0000D268 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18794 0000D26B 488B00                  	mov rax, qword [rax]
 18795 0000D26E 803804                  	cmp byte [rax], T_closure
 18796 0000D271 0F85E9830000            	jne L_error_non_closure
 18797 0000D277 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18798                                  
 18799                                  	; recycling the current frame
 18800 0000D27A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18801 0000D27D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18802 0000D280 B906000000              	mov rcx, 2 + 4
 18803 0000D285 488B5D18                	mov rbx, COUNT
 18804 0000D289 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18805 0000D28E 488D55F8                	lea rdx, [rbp - 8 * 1]
 18806                                  .L_tc_recycle_frame_loop_8f4c:
 18807 0000D292 4883F900                	cmp rcx, 0
 18808 0000D296 7413                    	je .L_tc_recycle_frame_done_8f4c
 18809 0000D298 488B32                  	mov rsi, qword [rdx]
 18810 0000D29B 488933                  	mov qword [rbx], rsi
 18811 0000D29E 48FFC9                  	dec rcx
 18812 0000D2A1 4883EB08                	sub rbx, 8 * 1
 18813 0000D2A5 4883EA08                	sub rdx, 8 * 1
 18814 0000D2A9 EBE7                    	jmp .L_tc_recycle_frame_loop_8f4c
 18815                                  .L_tc_recycle_frame_done_8f4c:
 18816 0000D2AB 488D6308                	lea rsp, [rbx + 8 * 1]
 18817 0000D2AF 5D                      	pop rbp	; the proc will restore it!
 18818 0000D2B0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18819                                  
 18820 0000D2B3 EB0A                    	jmp .L_if_end_7718
 18821                                  
 18822                                  	.L_if_else_7718:
 18823 0000D2B5 48B8-                   	mov rax, L_constants + 2
 18823 0000D2B7 [0200000000000000] 
 18824                                  
 18825                                  	.L_if_end_7718:
 18826                                  .L_or_end_0777:
 18827 0000D2BF C9                      	leave
 18828 0000D2C0 C22000                  	ret AND_KILL_FRAME(2)
 18829                                  .L_lambda_simple_end_6d57:	; new closure is in rax
 18830                                  
 18831 0000D2C3 50                      	push rax
 18832 0000D2C4 488B4520                	mov rax, PARAM(0)	; param run
 18833                                  
 18834 0000D2C8 8F00                    	pop qword[rax]
 18835 0000D2CA 48B8-                   	mov rax, sob_void
 18835 0000D2CC [0000000000000000] 
 18836                                  
 18837 0000D2D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18838 0000D2D9 E82B840000              	call malloc
 18839 0000D2DE 50                      	push rax
 18840 0000D2DF BF08000000              	mov rdi, 8 * 1	; new rib
 18841 0000D2E4 E820840000              	call malloc
 18842 0000D2E9 50                      	push rax
 18843 0000D2EA BF28000000              	mov rdi, 8 * 5	; extended env
 18844 0000D2EF E815840000              	call malloc
 18845 0000D2F4 488B7D10                	mov rdi, ENV
 18846 0000D2F8 BE00000000              	mov rsi, 0
 18847 0000D2FD BA01000000              	mov rdx, 1
 18848                                  .L_lambda_opt_env_loop_0f62:	; ext_env[i + 1] <-- env[i]
 18849 0000D302 4883FE04                	cmp rsi, 4
 18850 0000D306 7410                    	je .L_lambda_opt_env_end_0f62
 18851 0000D308 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18852 0000D30C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18853 0000D310 48FFC6                  	inc rsi
 18854 0000D313 48FFC2                  	inc rdx
 18855 0000D316 EBEA                    	jmp .L_lambda_opt_env_loop_0f62
 18856                                  .L_lambda_opt_env_end_0f62:
 18857 0000D318 5B                      	pop rbx
 18858 0000D319 BE00000000              	mov rsi, 0
 18859                                  .L_lambda_opt_params_loop_0f62:	; copy params
 18860 0000D31E 4883FE01                	cmp rsi, 1
 18861 0000D322 740E                    	je .L_lambda_opt_params_end_0f62
 18862 0000D324 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18863 0000D329 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18864 0000D32D 48FFC6                  	inc rsi
 18865 0000D330 EBEC                    	jmp .L_lambda_opt_params_loop_0f62
 18866                                  .L_lambda_opt_params_end_0f62:
 18867 0000D332 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18868 0000D335 4889C3                  	mov rbx, rax
 18869 0000D338 58                      	pop rax
 18870 0000D339 C60004                  	mov byte [rax], T_closure
 18871 0000D33C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18872 0000D340 48C74009[4DD30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f62
 18873 0000D348 E939010000              	jmp .L_lambda_opt_end_0f62
 18874                                  .L_lambda_opt_code_0f62:	; lambda-simple body
 18875 0000D34D 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 18876 0000D353 740D                    	je .L_lambda_opt_arity_check_exact_0f62 ;	 if equal, go to exact arity
 18877 0000D355 7F42                    	jg .L_lambda_opt_arity_check_more_0f62 ;	 if greater than, go to arity more
 18878 0000D357 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 18879 0000D35B 6A01                     	push 1
 18880 0000D35D E974830000              	jmp L_error_incorrect_arity_opt
 18881                                  	.L_lambda_opt_arity_check_exact_0f62:
 18882 0000D362 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 18883 0000D367 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 18884 0000D36C 4883EC08                	sub rsp, 8
 18885 0000D370 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 18886                                  	.L_lambda_opt_exact_shifting_loop_0f62:
 18887 0000D374 488B5108                	mov rdx, [rcx + 8]
 18888 0000D378 488911                  	mov [rcx], rdx
 18889 0000D37B 4883C108                	add rcx, 8
 18890 0000D37F 4839CB                  	cmp rbx, rcx
 18891 0000D382 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f62
 18892                                  	.L_lambda_opt_exact_shifting_loop_end_0f62:
 18893 0000D384 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 18894 0000D38B 4883C001                	add rax, 1 ; 	arg count += 1
 18895 0000D38F 4889442410              	mov qword [rsp + 8 * 2], rax
 18896 0000D394 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f62
 18897                                  	.L_lambda_opt_arity_check_more_0f62:
 18898 0000D399 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 18898 0000D39B [0100000000000000] 
 18899 0000D3A3 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 18900 0000D3A9 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f62
 18901                                  	.L_lambda_opt_stack_shrink_loop_0f62:
 18902 0000D3AB BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 18903 0000D3B0 E854830000              	call malloc ;	 allocated memory for the optional scheme list
 18904 0000D3B5 C60021                  	mov byte[rax], T_pair ;	 set type pair
 18905 0000D3B8 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 18906 0000D3BC 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 18907 0000D3BF 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 18908 0000D3C4 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 18909 0000D3C9 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 18910 0000D3CD 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 18911                                  	.L_lambda_opt_more_shifting_loop_0f62:
 18912 0000D3D2 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 18913 0000D3D5 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 18914 0000D3D9 4883EB08                	sub rbx, 8 
 18915 0000D3DD 4839DC                  	cmp rsp, rbx
 18916 0000D3E0 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f62
 18917                                  	.L_lambda_opt_more_shifting_loop_end_0f62:
 18918 0000D3E2 4883C408                	add rsp, 8 ;	 update rsp
 18919 0000D3E6 488B5C2410              	mov rbx, [rsp + 8 * 2]
 18920 0000D3EB 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 18921 0000D3EF 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 18922 0000D3F4 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18923 0000D3FA 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f62
 18924                                  	.L_lambda_opt_stack_shrink_loop_exit_0f62:
 18925 0000D3FC 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 18926 0000D401 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 18927 0000D406 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 18928 0000D40B E8F9820000              	call malloc ;	 allocated memory for the optional scheme list
 18929 0000D410 C60021                  	mov byte[rax], T_pair ;	 set type pair
 18930 0000D413 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 18931 0000D417 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 18932 0000D41B 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 18933                                  	.L_lambda_opt_stack_adjusted_0f62:
 18934 0000D420 C8000000                	enter 0, 0
 18935                                  	; preparing a tail-call
 18936 0000D424 488B4528                	mov rax, PARAM(1)	; param strs
 18937 0000D428 50                      	push rax
 18938 0000D429 488B4520                	mov rax, PARAM(0)	; param str
 18939 0000D42D 50                      	push rax
 18940 0000D42E 6A02                    	push 2	; arg count
 18941 0000D430 488B4510                	mov rax, ENV
 18942 0000D434 488B00                  	mov rax, qword [rax + 8 * 0]
 18943 0000D437 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18944 0000D43A 488B00                  	mov rax, qword [rax]
 18945 0000D43D 803804                  	cmp byte [rax], T_closure
 18946 0000D440 0F851A820000            	jne L_error_non_closure
 18947 0000D446 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18948                                  
 18949                                  	; recycling the current frame
 18950 0000D449 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18951 0000D44C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18952 0000D44F B906000000              	mov rcx, 2 + 4
 18953 0000D454 488B5D18                	mov rbx, COUNT
 18954 0000D458 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18955 0000D45D 488D55F8                	lea rdx, [rbp - 8 * 1]
 18956                                  .L_tc_recycle_frame_loop_8f4d:
 18957 0000D461 4883F900                	cmp rcx, 0
 18958 0000D465 7413                    	je .L_tc_recycle_frame_done_8f4d
 18959 0000D467 488B32                  	mov rsi, qword [rdx]
 18960 0000D46A 488933                  	mov qword [rbx], rsi
 18961 0000D46D 48FFC9                  	dec rcx
 18962 0000D470 4883EB08                	sub rbx, 8 * 1
 18963 0000D474 4883EA08                	sub rdx, 8 * 1
 18964 0000D478 EBE7                    	jmp .L_tc_recycle_frame_loop_8f4d
 18965                                  .L_tc_recycle_frame_done_8f4d:
 18966 0000D47A 488D6308                	lea rsp, [rbx + 8 * 1]
 18967 0000D47E 5D                      	pop rbp	; the proc will restore it!
 18968 0000D47F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18969 0000D482 C9                      	leave
 18970 0000D483 C22000                  	ret AND_KILL_FRAME(2)
 18971                                  .L_lambda_opt_end_0f62:	; new closure is in rax
 18972 0000D486 C9                      	leave
 18973 0000D487 C21800                  	ret AND_KILL_FRAME(1)
 18974                                  .L_lambda_simple_end_6d56:	; new closure is in rax
 18975 0000D48A 803804                  	cmp byte [rax], T_closure
 18976 0000D48D 0F85CD810000            	jne L_error_non_closure
 18977 0000D493 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18978                                  
 18979                                  	; recycling the current frame
 18980 0000D496 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18981 0000D499 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18982 0000D49C B905000000              	mov rcx, 1 + 4
 18983 0000D4A1 488B5D18                	mov rbx, COUNT
 18984 0000D4A5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18985 0000D4AA 488D55F8                	lea rdx, [rbp - 8 * 1]
 18986                                  .L_tc_recycle_frame_loop_8f4e:
 18987 0000D4AE 4883F900                	cmp rcx, 0
 18988 0000D4B2 7413                    	je .L_tc_recycle_frame_done_8f4e
 18989 0000D4B4 488B32                  	mov rsi, qword [rdx]
 18990 0000D4B7 488933                  	mov qword [rbx], rsi
 18991 0000D4BA 48FFC9                  	dec rcx
 18992 0000D4BD 4883EB08                	sub rbx, 8 * 1
 18993 0000D4C1 4883EA08                	sub rdx, 8 * 1
 18994 0000D4C5 EBE7                    	jmp .L_tc_recycle_frame_loop_8f4e
 18995                                  .L_tc_recycle_frame_done_8f4e:
 18996 0000D4C7 488D6308                	lea rsp, [rbx + 8 * 1]
 18997 0000D4CB 5D                      	pop rbp	; the proc will restore it!
 18998 0000D4CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18999 0000D4CF C9                      	leave
 19000 0000D4D0 C21800                  	ret AND_KILL_FRAME(1)
 19001                                  .L_lambda_simple_end_6d55:	; new closure is in rax
 19002 0000D4D3 803804                  	cmp byte [rax], T_closure
 19003 0000D4D6 0F8584810000            	jne L_error_non_closure
 19004 0000D4DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 19005                                  
 19006                                  	; recycling the current frame
 19007 0000D4DF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19008 0000D4E2 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19009 0000D4E5 B905000000              	mov rcx, 1 + 4
 19010 0000D4EA 488B5D18                	mov rbx, COUNT
 19011 0000D4EE 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19012 0000D4F3 488D55F8                	lea rdx, [rbp - 8 * 1]
 19013                                  .L_tc_recycle_frame_loop_8f4f:
 19014 0000D4F7 4883F900                	cmp rcx, 0
 19015 0000D4FB 7413                    	je .L_tc_recycle_frame_done_8f4f
 19016 0000D4FD 488B32                  	mov rsi, qword [rdx]
 19017 0000D500 488933                  	mov qword [rbx], rsi
 19018 0000D503 48FFC9                  	dec rcx
 19019 0000D506 4883EB08                	sub rbx, 8 * 1
 19020 0000D50A 4883EA08                	sub rdx, 8 * 1
 19021 0000D50E EBE7                    	jmp .L_tc_recycle_frame_loop_8f4f
 19022                                  .L_tc_recycle_frame_done_8f4f:
 19023 0000D510 488D6308                	lea rsp, [rbx + 8 * 1]
 19024 0000D514 5D                      	pop rbp	; the proc will restore it!
 19025 0000D515 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19026 0000D518 C9                      	leave
 19027 0000D519 C21800                  	ret AND_KILL_FRAME(1)
 19028                                  .L_lambda_simple_end_6d51:	; new closure is in rax
 19029 0000D51C 803804                  	cmp byte [rax], T_closure
 19030 0000D51F 0F853B810000            	jne L_error_non_closure
 19031 0000D525 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19032                                  
 19033                                  	; recycling the current frame
 19034 0000D528 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19035 0000D52B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19036 0000D52E B905000000              	mov rcx, 1 + 4
 19037 0000D533 488B5D18                	mov rbx, COUNT
 19038 0000D537 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19039 0000D53C 488D55F8                	lea rdx, [rbp - 8 * 1]
 19040                                  .L_tc_recycle_frame_loop_8f50:
 19041 0000D540 4883F900                	cmp rcx, 0
 19042 0000D544 7413                    	je .L_tc_recycle_frame_done_8f50
 19043 0000D546 488B32                  	mov rsi, qword [rdx]
 19044 0000D549 488933                  	mov qword [rbx], rsi
 19045 0000D54C 48FFC9                  	dec rcx
 19046 0000D54F 4883EB08                	sub rbx, 8 * 1
 19047 0000D553 4883EA08                	sub rdx, 8 * 1
 19048 0000D557 EBE7                    	jmp .L_tc_recycle_frame_loop_8f50
 19049                                  .L_tc_recycle_frame_done_8f50:
 19050 0000D559 488D6308                	lea rsp, [rbx + 8 * 1]
 19051 0000D55D 5D                      	pop rbp	; the proc will restore it!
 19052 0000D55E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19053 0000D561 C9                      	leave
 19054 0000D562 C22000                  	ret AND_KILL_FRAME(2)
 19055                                  .L_lambda_simple_end_6d50:	; new closure is in rax
 19056 0000D565 50                      	push rax
 19057 0000D566 6A01                    	push 1	; arg count
 19058 0000D568 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19059 0000D56D E897810000              	call malloc
 19060 0000D572 50                      	push rax
 19061 0000D573 BF00000000              	mov rdi, 8 * 0	; new rib
 19062 0000D578 E88C810000              	call malloc
 19063 0000D57D 50                      	push rax
 19064 0000D57E BF08000000              	mov rdi, 8 * 1	; extended env
 19065 0000D583 E881810000              	call malloc
 19066 0000D588 488B7D10                	mov rdi, ENV
 19067 0000D58C BE00000000              	mov rsi, 0
 19068 0000D591 BA01000000              	mov rdx, 1
 19069                                  .L_lambda_simple_env_loop_6d58:	; ext_env[i + 1] <-- env[i]
 19070 0000D596 4883FE00                	cmp rsi, 0
 19071 0000D59A 7410                    	je .L_lambda_simple_env_end_6d58
 19072 0000D59C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19073 0000D5A0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19074 0000D5A4 48FFC6                  	inc rsi
 19075 0000D5A7 48FFC2                  	inc rdx
 19076 0000D5AA EBEA                    	jmp .L_lambda_simple_env_loop_6d58
 19077                                  .L_lambda_simple_env_end_6d58:
 19078 0000D5AC 5B                      	pop rbx
 19079 0000D5AD BE00000000              	mov rsi, 0
 19080                                  .L_lambda_simple_params_loop_6d58:	; copy params
 19081 0000D5B2 4883FE00                	cmp rsi, 0
 19082 0000D5B6 740E                    	je .L_lambda_simple_params_end_6d58
 19083 0000D5B8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19084 0000D5BD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19085 0000D5C1 48FFC6                  	inc rsi
 19086 0000D5C4 EBEC                    	jmp .L_lambda_simple_params_loop_6d58
 19087                                  .L_lambda_simple_params_end_6d58:
 19088 0000D5C6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19089 0000D5C9 4889C3                  	mov rbx, rax
 19090 0000D5CC 58                      	pop rax
 19091 0000D5CD C60004                  	mov byte [rax], T_closure
 19092 0000D5D0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19093 0000D5D4 48C74009[E1D50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d58
 19094 0000D5DC E96B010000              	jmp .L_lambda_simple_end_6d58
 19095                                  .L_lambda_simple_code_6d58:	; lambda-simple body
 19096 0000D5E1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19097 0000D5E7 740B                    	je .L_lambda_simple_arity_check_ok_6d58
 19098 0000D5E9 FF742410                	push qword [rsp + 8 * 2]
 19099 0000D5ED 6A01                    	push 1
 19100 0000D5EF E9CE800000              	jmp L_error_incorrect_arity_simple
 19101                                  .L_lambda_simple_arity_check_ok_6d58:
 19102 0000D5F4 C8000000                	enter 0, 0
 19103 0000D5F8 488B0425[4A160000]      	mov rax, qword [free_var_130]	; free var char=?
 19104 0000D600 803805                  	cmp byte [rax], T_undefined
 19105 0000D603 0F84D37F0000            	je L_error_fvar_undefined
 19106 0000D609 50                      	push rax
 19107 0000D60A 488B0425[28160000]      	mov rax, qword [free_var_128]	; free var char<?
 19108 0000D612 803805                  	cmp byte [rax], T_undefined
 19109 0000D615 0F84C17F0000            	je L_error_fvar_undefined
 19110 0000D61B 50                      	push rax
 19111 0000D61C 6A02                    	push 2	; arg count
 19112 0000D61E 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19113 0000D622 803804                  	cmp byte [rax], T_closure
 19114 0000D625 0F8535800000            	jne L_error_non_closure
 19115 0000D62B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19116 0000D62E FF5009                  	call SOB_CLOSURE_CODE(rax)
 19117 0000D631 48890425[38170000]      	mov qword [free_var_144], rax	; free var string<?
 19118 0000D639 803805                  	cmp byte [rax], T_undefined
 19119 0000D63C 0F849A7F0000            	je L_error_fvar_undefined
 19120 0000D642 48B8-                   	mov rax, sob_void
 19120 0000D644 [0000000000000000] 
 19121                                  
 19122 0000D64C 488B0425[C1160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 19123 0000D654 803805                  	cmp byte [rax], T_undefined
 19124 0000D657 0F847F7F0000            	je L_error_fvar_undefined
 19125 0000D65D 50                      	push rax
 19126 0000D65E 488B0425[9F160000]      	mov rax, qword [free_var_135]	; free var char-ci<?
 19127 0000D666 803805                  	cmp byte [rax], T_undefined
 19128 0000D669 0F846D7F0000            	je L_error_fvar_undefined
 19129 0000D66F 50                      	push rax
 19130 0000D670 6A02                    	push 2	; arg count
 19131 0000D672 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19132 0000D676 803804                  	cmp byte [rax], T_closure
 19133 0000D679 0F85E17F0000            	jne L_error_non_closure
 19134 0000D67F FF7001                  	push SOB_CLOSURE_ENV(rax)
 19135 0000D682 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19136 0000D685 48890425[8D170000]      	mov qword [free_var_149], rax	; free var string-ci<?
 19137 0000D68D 803805                  	cmp byte [rax], T_undefined
 19138 0000D690 0F84467F0000            	je L_error_fvar_undefined
 19139 0000D696 48B8-                   	mov rax, sob_void
 19139 0000D698 [0000000000000000] 
 19140                                  
 19141 0000D6A0 488B0425[4A160000]      	mov rax, qword [free_var_130]	; free var char=?
 19142 0000D6A8 803805                  	cmp byte [rax], T_undefined
 19143 0000D6AB 0F842B7F0000            	je L_error_fvar_undefined
 19144 0000D6B1 50                      	push rax
 19145 0000D6B2 488B0425[5B160000]      	mov rax, qword [free_var_131]	; free var char>?
 19146 0000D6BA 803805                  	cmp byte [rax], T_undefined
 19147 0000D6BD 0F84197F0000            	je L_error_fvar_undefined
 19148 0000D6C3 50                      	push rax
 19149 0000D6C4 6A02                    	push 2	; arg count
 19150 0000D6C6 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19151 0000D6CA 803804                  	cmp byte [rax], T_closure
 19152 0000D6CD 0F858D7F0000            	jne L_error_non_closure
 19153 0000D6D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19154 0000D6D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19155 0000D6D9 48890425[7C170000]      	mov qword [free_var_148], rax	; free var string>?
 19156 0000D6E1 803805                  	cmp byte [rax], T_undefined
 19157 0000D6E4 0F84F27E0000            	je L_error_fvar_undefined
 19158 0000D6EA 48B8-                   	mov rax, sob_void
 19158 0000D6EC [0000000000000000] 
 19159                                  
 19160 0000D6F4 488B0425[C1160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 19161 0000D6FC 803805                  	cmp byte [rax], T_undefined
 19162 0000D6FF 0F84D77E0000            	je L_error_fvar_undefined
 19163 0000D705 50                      	push rax
 19164 0000D706 488B0425[D2160000]      	mov rax, qword [free_var_138]	; free var char-ci>?
 19165 0000D70E 803805                  	cmp byte [rax], T_undefined
 19166 0000D711 0F84C57E0000            	je L_error_fvar_undefined
 19167 0000D717 50                      	push rax
 19168 0000D718 6A02                    	push 2	; arg count
 19169 0000D71A 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19170 0000D71E 803804                  	cmp byte [rax], T_closure
 19171 0000D721 0F85397F0000            	jne L_error_non_closure
 19172 0000D727 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19173 0000D72A FF5009                  	call SOB_CLOSURE_CODE(rax)
 19174 0000D72D 48890425[D1170000]      	mov qword [free_var_153], rax	; free var string-ci>?
 19175 0000D735 803805                  	cmp byte [rax], T_undefined
 19176 0000D738 0F849E7E0000            	je L_error_fvar_undefined
 19177 0000D73E 48B8-                   	mov rax, sob_void
 19177 0000D740 [0000000000000000] 
 19178 0000D748 C9                      	leave
 19179 0000D749 C21800                  	ret AND_KILL_FRAME(1)
 19180                                  .L_lambda_simple_end_6d58:	; new closure is in rax
 19181 0000D74C 803804                  	cmp byte [rax], T_closure
 19182 0000D74F 0F850B7F0000            	jne L_error_non_closure
 19183 0000D755 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19184 0000D758 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19185                                  
 19186 0000D75B 4889C7                  	mov rdi, rax
 19187 0000D75E E8B8800000              	call print_sexpr_if_not_void
 19188                                  
 19189 0000D763 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19190 0000D768 E89C7F0000              	call malloc
 19191 0000D76D 50                      	push rax
 19192 0000D76E BF00000000              	mov rdi, 8 * 0	; new rib
 19193 0000D773 E8917F0000              	call malloc
 19194 0000D778 50                      	push rax
 19195 0000D779 BF08000000              	mov rdi, 8 * 1	; extended env
 19196 0000D77E E8867F0000              	call malloc
 19197 0000D783 488B7D10                	mov rdi, ENV
 19198 0000D787 BE00000000              	mov rsi, 0
 19199 0000D78C BA01000000              	mov rdx, 1
 19200                                  .L_lambda_simple_env_loop_6d59:	; ext_env[i + 1] <-- env[i]
 19201 0000D791 4883FE00                	cmp rsi, 0
 19202 0000D795 7410                    	je .L_lambda_simple_env_end_6d59
 19203 0000D797 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19204 0000D79B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19205 0000D79F 48FFC6                  	inc rsi
 19206 0000D7A2 48FFC2                  	inc rdx
 19207 0000D7A5 EBEA                    	jmp .L_lambda_simple_env_loop_6d59
 19208                                  .L_lambda_simple_env_end_6d59:
 19209 0000D7A7 5B                      	pop rbx
 19210 0000D7A8 BE00000000              	mov rsi, 0
 19211                                  .L_lambda_simple_params_loop_6d59:	; copy params
 19212 0000D7AD 4883FE00                	cmp rsi, 0
 19213 0000D7B1 740E                    	je .L_lambda_simple_params_end_6d59
 19214 0000D7B3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19215 0000D7B8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19216 0000D7BC 48FFC6                  	inc rsi
 19217 0000D7BF EBEC                    	jmp .L_lambda_simple_params_loop_6d59
 19218                                  .L_lambda_simple_params_end_6d59:
 19219 0000D7C1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19220 0000D7C4 4889C3                  	mov rbx, rax
 19221 0000D7C7 58                      	pop rax
 19222 0000D7C8 C60004                  	mov byte [rax], T_closure
 19223 0000D7CB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19224 0000D7CF 48C74009[DCD70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d59
 19225 0000D7D7 E95B0C0000              	jmp .L_lambda_simple_end_6d59
 19226                                  .L_lambda_simple_code_6d59:	; lambda-simple body
 19227 0000D7DC 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19228 0000D7E2 740B                    	je .L_lambda_simple_arity_check_ok_6d59
 19229 0000D7E4 FF742410                	push qword [rsp + 8 * 2]
 19230 0000D7E8 6A02                    	push 2
 19231 0000D7EA E9D37E0000              	jmp L_error_incorrect_arity_simple
 19232                                  .L_lambda_simple_arity_check_ok_6d59:
 19233 0000D7EF C8000000                	enter 0, 0
 19234                                  	; preparing a tail-call
 19235 0000D7F3 48B8-                   	mov rax, L_constants + 1881
 19235 0000D7F5 [5907000000000000] 
 19236 0000D7FD 50                      	push rax
 19237 0000D7FE 6A01                    	push 1	; arg count
 19238 0000D800 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19239 0000D805 E8FF7E0000              	call malloc
 19240 0000D80A 50                      	push rax
 19241 0000D80B BF10000000              	mov rdi, 8 * 2	; new rib
 19242 0000D810 E8F47E0000              	call malloc
 19243 0000D815 50                      	push rax
 19244 0000D816 BF10000000              	mov rdi, 8 * 2	; extended env
 19245 0000D81B E8E97E0000              	call malloc
 19246 0000D820 488B7D10                	mov rdi, ENV
 19247 0000D824 BE00000000              	mov rsi, 0
 19248 0000D829 BA01000000              	mov rdx, 1
 19249                                  .L_lambda_simple_env_loop_6d5a:	; ext_env[i + 1] <-- env[i]
 19250 0000D82E 4883FE01                	cmp rsi, 1
 19251 0000D832 7410                    	je .L_lambda_simple_env_end_6d5a
 19252 0000D834 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19253 0000D838 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19254 0000D83C 48FFC6                  	inc rsi
 19255 0000D83F 48FFC2                  	inc rdx
 19256 0000D842 EBEA                    	jmp .L_lambda_simple_env_loop_6d5a
 19257                                  .L_lambda_simple_env_end_6d5a:
 19258 0000D844 5B                      	pop rbx
 19259 0000D845 BE00000000              	mov rsi, 0
 19260                                  .L_lambda_simple_params_loop_6d5a:	; copy params
 19261 0000D84A 4883FE02                	cmp rsi, 2
 19262 0000D84E 740E                    	je .L_lambda_simple_params_end_6d5a
 19263 0000D850 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19264 0000D855 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19265 0000D859 48FFC6                  	inc rsi
 19266 0000D85C EBEC                    	jmp .L_lambda_simple_params_loop_6d5a
 19267                                  .L_lambda_simple_params_end_6d5a:
 19268 0000D85E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19269 0000D861 4889C3                  	mov rbx, rax
 19270 0000D864 58                      	pop rax
 19271 0000D865 C60004                  	mov byte [rax], T_closure
 19272 0000D868 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19273 0000D86C 48C74009[79D80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d5a
 19274 0000D874 E9750B0000              	jmp .L_lambda_simple_end_6d5a
 19275                                  .L_lambda_simple_code_6d5a:	; lambda-simple body
 19276 0000D879 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19277 0000D87F 740B                    	je .L_lambda_simple_arity_check_ok_6d5a
 19278 0000D881 FF742410                	push qword [rsp + 8 * 2]
 19279 0000D885 6A01                    	push 1
 19280 0000D887 E9367E0000              	jmp L_error_incorrect_arity_simple
 19281                                  .L_lambda_simple_arity_check_ok_6d5a:
 19282 0000D88C C8000000                	enter 0, 0
 19283                                  
 19284 0000D890 BF08000000              	mov rdi, 8
 19285 0000D895 E86F7E0000              	call malloc
 19286 0000D89A 488B5D20                	mov rbx, PARAM(0)	; param run
 19287 0000D89E 488918                  	mov [rax], rbx	; box run
 19288 0000D8A1 48894520                	mov PARAM(0), rax	;replace param run with box
 19289 0000D8A5 48B8-                   	mov rax, sob_void
 19289 0000D8A7 [0000000000000000] 
 19290                                  
 19291 0000D8AF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19292 0000D8B4 E8507E0000              	call malloc
 19293 0000D8B9 50                      	push rax
 19294 0000D8BA BF08000000              	mov rdi, 8 * 1	; new rib
 19295 0000D8BF E8457E0000              	call malloc
 19296 0000D8C4 50                      	push rax
 19297 0000D8C5 BF18000000              	mov rdi, 8 * 3	; extended env
 19298 0000D8CA E83A7E0000              	call malloc
 19299 0000D8CF 488B7D10                	mov rdi, ENV
 19300 0000D8D3 BE00000000              	mov rsi, 0
 19301 0000D8D8 BA01000000              	mov rdx, 1
 19302                                  .L_lambda_simple_env_loop_6d5b:	; ext_env[i + 1] <-- env[i]
 19303 0000D8DD 4883FE02                	cmp rsi, 2
 19304 0000D8E1 7410                    	je .L_lambda_simple_env_end_6d5b
 19305 0000D8E3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19306 0000D8E7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19307 0000D8EB 48FFC6                  	inc rsi
 19308 0000D8EE 48FFC2                  	inc rdx
 19309 0000D8F1 EBEA                    	jmp .L_lambda_simple_env_loop_6d5b
 19310                                  .L_lambda_simple_env_end_6d5b:
 19311 0000D8F3 5B                      	pop rbx
 19312 0000D8F4 BE00000000              	mov rsi, 0
 19313                                  .L_lambda_simple_params_loop_6d5b:	; copy params
 19314 0000D8F9 4883FE01                	cmp rsi, 1
 19315 0000D8FD 740E                    	je .L_lambda_simple_params_end_6d5b
 19316 0000D8FF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19317 0000D904 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19318 0000D908 48FFC6                  	inc rsi
 19319 0000D90B EBEC                    	jmp .L_lambda_simple_params_loop_6d5b
 19320                                  .L_lambda_simple_params_end_6d5b:
 19321 0000D90D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19322 0000D910 4889C3                  	mov rbx, rax
 19323 0000D913 58                      	pop rax
 19324 0000D914 C60004                  	mov byte [rax], T_closure
 19325 0000D917 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19326 0000D91B 48C74009[28D90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d5b
 19327 0000D923 E943020000              	jmp .L_lambda_simple_end_6d5b
 19328                                  .L_lambda_simple_code_6d5b:	; lambda-simple body
 19329 0000D928 48837C241005            	cmp qword [rsp + 8 * 2], 5
 19330 0000D92E 740B                    	je .L_lambda_simple_arity_check_ok_6d5b
 19331 0000D930 FF742410                	push qword [rsp + 8 * 2]
 19332 0000D934 6A05                    	push 5
 19333 0000D936 E9877D0000              	jmp L_error_incorrect_arity_simple
 19334                                  .L_lambda_simple_arity_check_ok_6d5b:
 19335 0000D93B C8000000                	enter 0, 0
 19336 0000D93F 488B4530                	mov rax, PARAM(2)	; param len1
 19337 0000D943 50                      	push rax
 19338 0000D944 488B4520                	mov rax, PARAM(0)	; param i
 19339 0000D948 50                      	push rax
 19340 0000D949 6A02                    	push 2	; arg count
 19341 0000D94B 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 19342 0000D953 803805                  	cmp byte [rax], T_undefined
 19343 0000D956 0F84807C0000            	je L_error_fvar_undefined
 19344 0000D95C 803804                  	cmp byte [rax], T_closure
 19345 0000D95F 0F85FB7C0000            	jne L_error_non_closure
 19346 0000D965 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19347 0000D968 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19348 0000D96B 483D[02000000]          	cmp rax, sob_boolean_false
 19349 0000D971 0F85F0010000            	jne .L_or_end_0778
 19350 0000D977 488B4520                	mov rax, PARAM(0)	; param i
 19351 0000D97B 50                      	push rax
 19352 0000D97C 488B4538                	mov rax, PARAM(3)	; param str2
 19353 0000D980 50                      	push rax
 19354 0000D981 6A02                    	push 2	; arg count
 19355 0000D983 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 19356 0000D98B 803805                  	cmp byte [rax], T_undefined
 19357 0000D98E 0F84487C0000            	je L_error_fvar_undefined
 19358 0000D994 803804                  	cmp byte [rax], T_closure
 19359 0000D997 0F85C37C0000            	jne L_error_non_closure
 19360 0000D99D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19361 0000D9A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19362 0000D9A3 50                      	push rax
 19363 0000D9A4 488B4520                	mov rax, PARAM(0)	; param i
 19364 0000D9A8 50                      	push rax
 19365 0000D9A9 488B4528                	mov rax, PARAM(1)	; param str1
 19366 0000D9AD 50                      	push rax
 19367 0000D9AE 6A02                    	push 2	; arg count
 19368 0000D9B0 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 19369 0000D9B8 803805                  	cmp byte [rax], T_undefined
 19370 0000D9BB 0F841B7C0000            	je L_error_fvar_undefined
 19371 0000D9C1 803804                  	cmp byte [rax], T_closure
 19372 0000D9C4 0F85967C0000            	jne L_error_non_closure
 19373 0000D9CA FF7001                  	push SOB_CLOSURE_ENV(rax)
 19374 0000D9CD FF5009                  	call SOB_CLOSURE_CODE(rax)
 19375 0000D9D0 50                      	push rax
 19376 0000D9D1 6A02                    	push 2	; arg count
 19377 0000D9D3 488B4510                	mov rax, ENV
 19378 0000D9D7 488B4008                	mov rax, qword [rax + 8 * 1]
 19379 0000D9DB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 19380 0000D9DE 803804                  	cmp byte [rax], T_closure
 19381 0000D9E1 0F85797C0000            	jne L_error_non_closure
 19382 0000D9E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19383 0000D9EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 19384 0000D9ED 483D[02000000]          	cmp rax, sob_boolean_false
 19385 0000D9F3 0F856E010000            	jne .L_or_end_0778
 19386 0000D9F9 488B4530                	mov rax, PARAM(2)	; param len1
 19387 0000D9FD 50                      	push rax
 19388 0000D9FE 488B4520                	mov rax, PARAM(0)	; param i
 19389 0000DA02 50                      	push rax
 19390 0000DA03 6A02                    	push 2	; arg count
 19391 0000DA05 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 19392 0000DA0D 803805                  	cmp byte [rax], T_undefined
 19393 0000DA10 0F84C67B0000            	je L_error_fvar_undefined
 19394 0000DA16 803804                  	cmp byte [rax], T_closure
 19395 0000DA19 0F85417C0000            	jne L_error_non_closure
 19396 0000DA1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 19397 0000DA22 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19398                                  
 19399 0000DA25 483D[02000000]          	cmp rax, sob_boolean_false
 19400 0000DA2B 0F842C010000            	je .L_if_else_7719
 19401 0000DA31 488B4520                	mov rax, PARAM(0)	; param i
 19402 0000DA35 50                      	push rax
 19403 0000DA36 488B4538                	mov rax, PARAM(3)	; param str2
 19404 0000DA3A 50                      	push rax
 19405 0000DA3B 6A02                    	push 2	; arg count
 19406 0000DA3D 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 19407 0000DA45 803805                  	cmp byte [rax], T_undefined
 19408 0000DA48 0F848E7B0000            	je L_error_fvar_undefined
 19409 0000DA4E 803804                  	cmp byte [rax], T_closure
 19410 0000DA51 0F85097C0000            	jne L_error_non_closure
 19411 0000DA57 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19412 0000DA5A FF5009                  	call SOB_CLOSURE_CODE(rax)
 19413 0000DA5D 50                      	push rax
 19414 0000DA5E 488B4520                	mov rax, PARAM(0)	; param i
 19415 0000DA62 50                      	push rax
 19416 0000DA63 488B4528                	mov rax, PARAM(1)	; param str1
 19417 0000DA67 50                      	push rax
 19418 0000DA68 6A02                    	push 2	; arg count
 19419 0000DA6A 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 19420 0000DA72 803805                  	cmp byte [rax], T_undefined
 19421 0000DA75 0F84617B0000            	je L_error_fvar_undefined
 19422 0000DA7B 803804                  	cmp byte [rax], T_closure
 19423 0000DA7E 0F85DC7B0000            	jne L_error_non_closure
 19424 0000DA84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19425 0000DA87 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19426 0000DA8A 50                      	push rax
 19427 0000DA8B 6A02                    	push 2	; arg count
 19428 0000DA8D 488B4510                	mov rax, ENV
 19429 0000DA91 488B4008                	mov rax, qword [rax + 8 * 1]
 19430 0000DA95 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 19431 0000DA99 803804                  	cmp byte [rax], T_closure
 19432 0000DA9C 0F85BE7B0000            	jne L_error_non_closure
 19433 0000DAA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19434 0000DAA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19435                                  
 19436 0000DAA8 483D[02000000]          	cmp rax, sob_boolean_false
 19437 0000DAAE 0F849D000000            	je .L_if_else_771a
 19438                                  	; preparing a tail-call
 19439 0000DAB4 488B4540                	mov rax, PARAM(4)	; param len2
 19440 0000DAB8 50                      	push rax
 19441 0000DAB9 488B4538                	mov rax, PARAM(3)	; param str2
 19442 0000DABD 50                      	push rax
 19443 0000DABE 488B4530                	mov rax, PARAM(2)	; param len1
 19444 0000DAC2 50                      	push rax
 19445 0000DAC3 488B4528                	mov rax, PARAM(1)	; param str1
 19446 0000DAC7 50                      	push rax
 19447 0000DAC8 48B8-                   	mov rax, L_constants + 2158
 19447 0000DACA [6E08000000000000] 
 19448 0000DAD2 50                      	push rax
 19449 0000DAD3 488B4520                	mov rax, PARAM(0)	; param i
 19450 0000DAD7 50                      	push rax
 19451 0000DAD8 6A02                    	push 2	; arg count
 19452 0000DADA 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 19453 0000DAE2 803805                  	cmp byte [rax], T_undefined
 19454 0000DAE5 0F84F17A0000            	je L_error_fvar_undefined
 19455 0000DAEB 803804                  	cmp byte [rax], T_closure
 19456 0000DAEE 0F856C7B0000            	jne L_error_non_closure
 19457 0000DAF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19458 0000DAF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19459 0000DAFA 50                      	push rax
 19460 0000DAFB 6A05                    	push 5	; arg count
 19461 0000DAFD 488B4510                	mov rax, ENV
 19462 0000DB01 488B00                  	mov rax, qword [rax + 8 * 0]
 19463 0000DB04 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19464 0000DB07 488B00                  	mov rax, qword [rax]
 19465 0000DB0A 803804                  	cmp byte [rax], T_closure
 19466 0000DB0D 0F854D7B0000            	jne L_error_non_closure
 19467 0000DB13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19468                                  
 19469                                  	; recycling the current frame
 19470 0000DB16 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19471 0000DB19 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19472 0000DB1C B909000000              	mov rcx, 5 + 4
 19473 0000DB21 488B5D18                	mov rbx, COUNT
 19474 0000DB25 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19475 0000DB2A 488D55F8                	lea rdx, [rbp - 8 * 1]
 19476                                  .L_tc_recycle_frame_loop_8f51:
 19477 0000DB2E 4883F900                	cmp rcx, 0
 19478 0000DB32 7413                    	je .L_tc_recycle_frame_done_8f51
 19479 0000DB34 488B32                  	mov rsi, qword [rdx]
 19480 0000DB37 488933                  	mov qword [rbx], rsi
 19481 0000DB3A 48FFC9                  	dec rcx
 19482 0000DB3D 4883EB08                	sub rbx, 8 * 1
 19483 0000DB41 4883EA08                	sub rdx, 8 * 1
 19484 0000DB45 EBE7                    	jmp .L_tc_recycle_frame_loop_8f51
 19485                                  .L_tc_recycle_frame_done_8f51:
 19486 0000DB47 488D6308                	lea rsp, [rbx + 8 * 1]
 19487 0000DB4B 5D                      	pop rbp	; the proc will restore it!
 19488 0000DB4C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19489                                  
 19490 0000DB4F EB0A                    	jmp .L_if_end_771a
 19491                                  
 19492                                  	.L_if_else_771a:
 19493 0000DB51 48B8-                   	mov rax, L_constants + 2
 19493 0000DB53 [0200000000000000] 
 19494                                  
 19495                                  	.L_if_end_771a:
 19496                                  
 19497 0000DB5B EB0A                    	jmp .L_if_end_7719
 19498                                  
 19499                                  	.L_if_else_7719:
 19500 0000DB5D 48B8-                   	mov rax, L_constants + 2
 19500 0000DB5F [0200000000000000] 
 19501                                  
 19502                                  	.L_if_end_7719:
 19503                                  .L_or_end_0778:
 19504 0000DB67 C9                      	leave
 19505 0000DB68 C23800                  	ret AND_KILL_FRAME(5)
 19506                                  .L_lambda_simple_end_6d5b:	; new closure is in rax
 19507                                  
 19508 0000DB6B 50                      	push rax
 19509 0000DB6C 488B4520                	mov rax, PARAM(0)	; param run
 19510                                  
 19511 0000DB70 8F00                    	pop qword[rax]
 19512 0000DB72 48B8-                   	mov rax, sob_void
 19512 0000DB74 [0000000000000000] 
 19513                                  
 19514                                  	; preparing a tail-call
 19515 0000DB7C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19516 0000DB81 E8837B0000              	call malloc
 19517 0000DB86 50                      	push rax
 19518 0000DB87 BF08000000              	mov rdi, 8 * 1	; new rib
 19519 0000DB8C E8787B0000              	call malloc
 19520 0000DB91 50                      	push rax
 19521 0000DB92 BF18000000              	mov rdi, 8 * 3	; extended env
 19522 0000DB97 E86D7B0000              	call malloc
 19523 0000DB9C 488B7D10                	mov rdi, ENV
 19524 0000DBA0 BE00000000              	mov rsi, 0
 19525 0000DBA5 BA01000000              	mov rdx, 1
 19526                                  .L_lambda_simple_env_loop_6d5c:	; ext_env[i + 1] <-- env[i]
 19527 0000DBAA 4883FE02                	cmp rsi, 2
 19528 0000DBAE 7410                    	je .L_lambda_simple_env_end_6d5c
 19529 0000DBB0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19530 0000DBB4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19531 0000DBB8 48FFC6                  	inc rsi
 19532 0000DBBB 48FFC2                  	inc rdx
 19533 0000DBBE EBEA                    	jmp .L_lambda_simple_env_loop_6d5c
 19534                                  .L_lambda_simple_env_end_6d5c:
 19535 0000DBC0 5B                      	pop rbx
 19536 0000DBC1 BE00000000              	mov rsi, 0
 19537                                  .L_lambda_simple_params_loop_6d5c:	; copy params
 19538 0000DBC6 4883FE01                	cmp rsi, 1
 19539 0000DBCA 740E                    	je .L_lambda_simple_params_end_6d5c
 19540 0000DBCC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19541 0000DBD1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19542 0000DBD5 48FFC6                  	inc rsi
 19543 0000DBD8 EBEC                    	jmp .L_lambda_simple_params_loop_6d5c
 19544                                  .L_lambda_simple_params_end_6d5c:
 19545 0000DBDA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19546 0000DBDD 4889C3                  	mov rbx, rax
 19547 0000DBE0 58                      	pop rax
 19548 0000DBE1 C60004                  	mov byte [rax], T_closure
 19549 0000DBE4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19550 0000DBE8 48C74009[F5DB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d5c
 19551 0000DBF0 E985020000              	jmp .L_lambda_simple_end_6d5c
 19552                                  .L_lambda_simple_code_6d5c:	; lambda-simple body
 19553 0000DBF5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19554 0000DBFB 740B                    	je .L_lambda_simple_arity_check_ok_6d5c
 19555 0000DBFD FF742410                	push qword [rsp + 8 * 2]
 19556 0000DC01 6A02                    	push 2
 19557 0000DC03 E9BA7A0000              	jmp L_error_incorrect_arity_simple
 19558                                  .L_lambda_simple_arity_check_ok_6d5c:
 19559 0000DC08 C8000000                	enter 0, 0
 19560                                  	; preparing a tail-call
 19561 0000DC0C 488B4528                	mov rax, PARAM(1)	; param str2
 19562 0000DC10 50                      	push rax
 19563 0000DC11 6A01                    	push 1	; arg count
 19564 0000DC13 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 19565 0000DC1B 803805                  	cmp byte [rax], T_undefined
 19566 0000DC1E 0F84B8790000            	je L_error_fvar_undefined
 19567 0000DC24 803804                  	cmp byte [rax], T_closure
 19568 0000DC27 0F85337A0000            	jne L_error_non_closure
 19569 0000DC2D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19570 0000DC30 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19571 0000DC33 50                      	push rax
 19572 0000DC34 488B4520                	mov rax, PARAM(0)	; param str1
 19573 0000DC38 50                      	push rax
 19574 0000DC39 6A01                    	push 1	; arg count
 19575 0000DC3B 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 19576 0000DC43 803805                  	cmp byte [rax], T_undefined
 19577 0000DC46 0F8490790000            	je L_error_fvar_undefined
 19578 0000DC4C 803804                  	cmp byte [rax], T_closure
 19579 0000DC4F 0F850B7A0000            	jne L_error_non_closure
 19580 0000DC55 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19581 0000DC58 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19582 0000DC5B 50                      	push rax
 19583 0000DC5C 6A02                    	push 2	; arg count
 19584 0000DC5E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19585 0000DC63 E8A17A0000              	call malloc
 19586 0000DC68 50                      	push rax
 19587 0000DC69 BF10000000              	mov rdi, 8 * 2	; new rib
 19588 0000DC6E E8967A0000              	call malloc
 19589 0000DC73 50                      	push rax
 19590 0000DC74 BF20000000              	mov rdi, 8 * 4	; extended env
 19591 0000DC79 E88B7A0000              	call malloc
 19592 0000DC7E 488B7D10                	mov rdi, ENV
 19593 0000DC82 BE00000000              	mov rsi, 0
 19594 0000DC87 BA01000000              	mov rdx, 1
 19595                                  .L_lambda_simple_env_loop_6d5d:	; ext_env[i + 1] <-- env[i]
 19596 0000DC8C 4883FE03                	cmp rsi, 3
 19597 0000DC90 7410                    	je .L_lambda_simple_env_end_6d5d
 19598 0000DC92 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19599 0000DC96 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19600 0000DC9A 48FFC6                  	inc rsi
 19601 0000DC9D 48FFC2                  	inc rdx
 19602 0000DCA0 EBEA                    	jmp .L_lambda_simple_env_loop_6d5d
 19603                                  .L_lambda_simple_env_end_6d5d:
 19604 0000DCA2 5B                      	pop rbx
 19605 0000DCA3 BE00000000              	mov rsi, 0
 19606                                  .L_lambda_simple_params_loop_6d5d:	; copy params
 19607 0000DCA8 4883FE02                	cmp rsi, 2
 19608 0000DCAC 740E                    	je .L_lambda_simple_params_end_6d5d
 19609 0000DCAE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19610 0000DCB3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19611 0000DCB7 48FFC6                  	inc rsi
 19612 0000DCBA EBEC                    	jmp .L_lambda_simple_params_loop_6d5d
 19613                                  .L_lambda_simple_params_end_6d5d:
 19614 0000DCBC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19615 0000DCBF 4889C3                  	mov rbx, rax
 19616 0000DCC2 58                      	pop rax
 19617 0000DCC3 C60004                  	mov byte [rax], T_closure
 19618 0000DCC6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19619 0000DCCA 48C74009[D7DC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d5d
 19620 0000DCD2 E95A010000              	jmp .L_lambda_simple_end_6d5d
 19621                                  .L_lambda_simple_code_6d5d:	; lambda-simple body
 19622 0000DCD7 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19623 0000DCDD 740B                    	je .L_lambda_simple_arity_check_ok_6d5d
 19624 0000DCDF FF742410                	push qword [rsp + 8 * 2]
 19625 0000DCE3 6A02                    	push 2
 19626 0000DCE5 E9D8790000              	jmp L_error_incorrect_arity_simple
 19627                                  .L_lambda_simple_arity_check_ok_6d5d:
 19628 0000DCEA C8000000                	enter 0, 0
 19629 0000DCEE 488B4528                	mov rax, PARAM(1)	; param len2
 19630 0000DCF2 50                      	push rax
 19631 0000DCF3 488B4520                	mov rax, PARAM(0)	; param len1
 19632 0000DCF7 50                      	push rax
 19633 0000DCF8 6A02                    	push 2	; arg count
 19634 0000DCFA 488B0425[D3150000]      	mov rax, qword [free_var_123]	; free var <=
 19635 0000DD02 803805                  	cmp byte [rax], T_undefined
 19636 0000DD05 0F84D1780000            	je L_error_fvar_undefined
 19637 0000DD0B 803804                  	cmp byte [rax], T_closure
 19638 0000DD0E 0F854C790000            	jne L_error_non_closure
 19639 0000DD14 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19640 0000DD17 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19641                                  
 19642 0000DD1A 483D[02000000]          	cmp rax, sob_boolean_false
 19643 0000DD20 0F8486000000            	je .L_if_else_771b
 19644                                  	; preparing a tail-call
 19645 0000DD26 488B4528                	mov rax, PARAM(1)	; param len2
 19646 0000DD2A 50                      	push rax
 19647 0000DD2B 488B4510                	mov rax, ENV
 19648 0000DD2F 488B00                  	mov rax, qword [rax + 8 * 0]
 19649 0000DD32 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19650 0000DD36 50                      	push rax
 19651 0000DD37 488B4520                	mov rax, PARAM(0)	; param len1
 19652 0000DD3B 50                      	push rax
 19653 0000DD3C 488B4510                	mov rax, ENV
 19654 0000DD40 488B00                  	mov rax, qword [rax + 8 * 0]
 19655 0000DD43 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19656 0000DD46 50                      	push rax
 19657 0000DD47 48B8-                   	mov rax, L_constants + 2023
 19657 0000DD49 [E707000000000000] 
 19658 0000DD51 50                      	push rax
 19659 0000DD52 6A05                    	push 5	; arg count
 19660 0000DD54 488B4510                	mov rax, ENV
 19661 0000DD58 488B4008                	mov rax, qword [rax + 8 * 1]
 19662 0000DD5C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19663 0000DD5F 488B00                  	mov rax, qword [rax]
 19664 0000DD62 803804                  	cmp byte [rax], T_closure
 19665 0000DD65 0F85F5780000            	jne L_error_non_closure
 19666 0000DD6B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19667                                  
 19668                                  	; recycling the current frame
 19669 0000DD6E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19670 0000DD71 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19671 0000DD74 B909000000              	mov rcx, 5 + 4
 19672 0000DD79 488B5D18                	mov rbx, COUNT
 19673 0000DD7D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19674 0000DD82 488D55F8                	lea rdx, [rbp - 8 * 1]
 19675                                  .L_tc_recycle_frame_loop_8f52:
 19676 0000DD86 4883F900                	cmp rcx, 0
 19677 0000DD8A 7413                    	je .L_tc_recycle_frame_done_8f52
 19678 0000DD8C 488B32                  	mov rsi, qword [rdx]
 19679 0000DD8F 488933                  	mov qword [rbx], rsi
 19680 0000DD92 48FFC9                  	dec rcx
 19681 0000DD95 4883EB08                	sub rbx, 8 * 1
 19682 0000DD99 4883EA08                	sub rdx, 8 * 1
 19683 0000DD9D EBE7                    	jmp .L_tc_recycle_frame_loop_8f52
 19684                                  .L_tc_recycle_frame_done_8f52:
 19685 0000DD9F 488D6308                	lea rsp, [rbx + 8 * 1]
 19686 0000DDA3 5D                      	pop rbp	; the proc will restore it!
 19687 0000DDA4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19688                                  
 19689 0000DDA7 E981000000              	jmp .L_if_end_771b
 19690                                  
 19691                                  	.L_if_else_771b:
 19692                                  	; preparing a tail-call
 19693 0000DDAC 488B4520                	mov rax, PARAM(0)	; param len1
 19694 0000DDB0 50                      	push rax
 19695 0000DDB1 488B4510                	mov rax, ENV
 19696 0000DDB5 488B00                  	mov rax, qword [rax + 8 * 0]
 19697 0000DDB8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19698 0000DDBB 50                      	push rax
 19699 0000DDBC 488B4528                	mov rax, PARAM(1)	; param len2
 19700 0000DDC0 50                      	push rax
 19701 0000DDC1 488B4510                	mov rax, ENV
 19702 0000DDC5 488B00                  	mov rax, qword [rax + 8 * 0]
 19703 0000DDC8 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19704 0000DDCC 50                      	push rax
 19705 0000DDCD 48B8-                   	mov rax, L_constants + 2023
 19705 0000DDCF [E707000000000000] 
 19706 0000DDD7 50                      	push rax
 19707 0000DDD8 6A05                    	push 5	; arg count
 19708 0000DDDA 488B4510                	mov rax, ENV
 19709 0000DDDE 488B4008                	mov rax, qword [rax + 8 * 1]
 19710 0000DDE2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19711 0000DDE5 488B00                  	mov rax, qword [rax]
 19712 0000DDE8 803804                  	cmp byte [rax], T_closure
 19713 0000DDEB 0F856F780000            	jne L_error_non_closure
 19714 0000DDF1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19715                                  
 19716                                  	; recycling the current frame
 19717 0000DDF4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19718 0000DDF7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19719 0000DDFA B909000000              	mov rcx, 5 + 4
 19720 0000DDFF 488B5D18                	mov rbx, COUNT
 19721 0000DE03 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19722 0000DE08 488D55F8                	lea rdx, [rbp - 8 * 1]
 19723                                  .L_tc_recycle_frame_loop_8f53:
 19724 0000DE0C 4883F900                	cmp rcx, 0
 19725 0000DE10 7413                    	je .L_tc_recycle_frame_done_8f53
 19726 0000DE12 488B32                  	mov rsi, qword [rdx]
 19727 0000DE15 488933                  	mov qword [rbx], rsi
 19728 0000DE18 48FFC9                  	dec rcx
 19729 0000DE1B 4883EB08                	sub rbx, 8 * 1
 19730 0000DE1F 4883EA08                	sub rdx, 8 * 1
 19731 0000DE23 EBE7                    	jmp .L_tc_recycle_frame_loop_8f53
 19732                                  .L_tc_recycle_frame_done_8f53:
 19733 0000DE25 488D6308                	lea rsp, [rbx + 8 * 1]
 19734 0000DE29 5D                      	pop rbp	; the proc will restore it!
 19735 0000DE2A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19736                                  
 19737                                  	.L_if_end_771b:
 19738 0000DE2D C9                      	leave
 19739 0000DE2E C22000                  	ret AND_KILL_FRAME(2)
 19740                                  .L_lambda_simple_end_6d5d:	; new closure is in rax
 19741 0000DE31 803804                  	cmp byte [rax], T_closure
 19742 0000DE34 0F8526780000            	jne L_error_non_closure
 19743 0000DE3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 19744                                  
 19745                                  	; recycling the current frame
 19746 0000DE3D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19747 0000DE40 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19748 0000DE43 B906000000              	mov rcx, 2 + 4
 19749 0000DE48 488B5D18                	mov rbx, COUNT
 19750 0000DE4C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19751 0000DE51 488D55F8                	lea rdx, [rbp - 8 * 1]
 19752                                  .L_tc_recycle_frame_loop_8f54:
 19753 0000DE55 4883F900                	cmp rcx, 0
 19754 0000DE59 7413                    	je .L_tc_recycle_frame_done_8f54
 19755 0000DE5B 488B32                  	mov rsi, qword [rdx]
 19756 0000DE5E 488933                  	mov qword [rbx], rsi
 19757 0000DE61 48FFC9                  	dec rcx
 19758 0000DE64 4883EB08                	sub rbx, 8 * 1
 19759 0000DE68 4883EA08                	sub rdx, 8 * 1
 19760 0000DE6C EBE7                    	jmp .L_tc_recycle_frame_loop_8f54
 19761                                  .L_tc_recycle_frame_done_8f54:
 19762 0000DE6E 488D6308                	lea rsp, [rbx + 8 * 1]
 19763 0000DE72 5D                      	pop rbp	; the proc will restore it!
 19764 0000DE73 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19765 0000DE76 C9                      	leave
 19766 0000DE77 C22000                  	ret AND_KILL_FRAME(2)
 19767                                  .L_lambda_simple_end_6d5c:	; new closure is in rax
 19768 0000DE7A 50                      	push rax
 19769 0000DE7B 6A01                    	push 1	; arg count
 19770 0000DE7D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19771 0000DE82 E882780000              	call malloc
 19772 0000DE87 50                      	push rax
 19773 0000DE88 BF08000000              	mov rdi, 8 * 1	; new rib
 19774 0000DE8D E877780000              	call malloc
 19775 0000DE92 50                      	push rax
 19776 0000DE93 BF18000000              	mov rdi, 8 * 3	; extended env
 19777 0000DE98 E86C780000              	call malloc
 19778 0000DE9D 488B7D10                	mov rdi, ENV
 19779 0000DEA1 BE00000000              	mov rsi, 0
 19780 0000DEA6 BA01000000              	mov rdx, 1
 19781                                  .L_lambda_simple_env_loop_6d5e:	; ext_env[i + 1] <-- env[i]
 19782 0000DEAB 4883FE02                	cmp rsi, 2
 19783 0000DEAF 7410                    	je .L_lambda_simple_env_end_6d5e
 19784 0000DEB1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19785 0000DEB5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19786 0000DEB9 48FFC6                  	inc rsi
 19787 0000DEBC 48FFC2                  	inc rdx
 19788 0000DEBF EBEA                    	jmp .L_lambda_simple_env_loop_6d5e
 19789                                  .L_lambda_simple_env_end_6d5e:
 19790 0000DEC1 5B                      	pop rbx
 19791 0000DEC2 BE00000000              	mov rsi, 0
 19792                                  .L_lambda_simple_params_loop_6d5e:	; copy params
 19793 0000DEC7 4883FE01                	cmp rsi, 1
 19794 0000DECB 740E                    	je .L_lambda_simple_params_end_6d5e
 19795 0000DECD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19796 0000DED2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19797 0000DED6 48FFC6                  	inc rsi
 19798 0000DED9 EBEC                    	jmp .L_lambda_simple_params_loop_6d5e
 19799                                  .L_lambda_simple_params_end_6d5e:
 19800 0000DEDB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19801 0000DEDE 4889C3                  	mov rbx, rax
 19802 0000DEE1 58                      	pop rax
 19803 0000DEE2 C60004                  	mov byte [rax], T_closure
 19804 0000DEE5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19805 0000DEE9 48C74009[F6DE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d5e
 19806 0000DEF1 E9AF040000              	jmp .L_lambda_simple_end_6d5e
 19807                                  .L_lambda_simple_code_6d5e:	; lambda-simple body
 19808 0000DEF6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19809 0000DEFC 740B                    	je .L_lambda_simple_arity_check_ok_6d5e
 19810 0000DEFE FF742410                	push qword [rsp + 8 * 2]
 19811 0000DF02 6A01                    	push 1
 19812 0000DF04 E9B9770000              	jmp L_error_incorrect_arity_simple
 19813                                  .L_lambda_simple_arity_check_ok_6d5e:
 19814 0000DF09 C8000000                	enter 0, 0
 19815                                  	; preparing a tail-call
 19816 0000DF0D 48B8-                   	mov rax, L_constants + 1881
 19816 0000DF0F [5907000000000000] 
 19817 0000DF17 50                      	push rax
 19818 0000DF18 6A01                    	push 1	; arg count
 19819 0000DF1A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19820 0000DF1F E8E5770000              	call malloc
 19821 0000DF24 50                      	push rax
 19822 0000DF25 BF08000000              	mov rdi, 8 * 1	; new rib
 19823 0000DF2A E8DA770000              	call malloc
 19824 0000DF2F 50                      	push rax
 19825 0000DF30 BF20000000              	mov rdi, 8 * 4	; extended env
 19826 0000DF35 E8CF770000              	call malloc
 19827 0000DF3A 488B7D10                	mov rdi, ENV
 19828 0000DF3E BE00000000              	mov rsi, 0
 19829 0000DF43 BA01000000              	mov rdx, 1
 19830                                  .L_lambda_simple_env_loop_6d5f:	; ext_env[i + 1] <-- env[i]
 19831 0000DF48 4883FE03                	cmp rsi, 3
 19832 0000DF4C 7410                    	je .L_lambda_simple_env_end_6d5f
 19833 0000DF4E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19834 0000DF52 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19835 0000DF56 48FFC6                  	inc rsi
 19836 0000DF59 48FFC2                  	inc rdx
 19837 0000DF5C EBEA                    	jmp .L_lambda_simple_env_loop_6d5f
 19838                                  .L_lambda_simple_env_end_6d5f:
 19839 0000DF5E 5B                      	pop rbx
 19840 0000DF5F BE00000000              	mov rsi, 0
 19841                                  .L_lambda_simple_params_loop_6d5f:	; copy params
 19842 0000DF64 4883FE01                	cmp rsi, 1
 19843 0000DF68 740E                    	je .L_lambda_simple_params_end_6d5f
 19844 0000DF6A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19845 0000DF6F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19846 0000DF73 48FFC6                  	inc rsi
 19847 0000DF76 EBEC                    	jmp .L_lambda_simple_params_loop_6d5f
 19848                                  .L_lambda_simple_params_end_6d5f:
 19849 0000DF78 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19850 0000DF7B 4889C3                  	mov rbx, rax
 19851 0000DF7E 58                      	pop rax
 19852 0000DF7F C60004                  	mov byte [rax], T_closure
 19853 0000DF82 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19854 0000DF86 48C74009[93DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d5f
 19855 0000DF8E E9C9030000              	jmp .L_lambda_simple_end_6d5f
 19856                                  .L_lambda_simple_code_6d5f:	; lambda-simple body
 19857 0000DF93 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19858 0000DF99 740B                    	je .L_lambda_simple_arity_check_ok_6d5f
 19859 0000DF9B FF742410                	push qword [rsp + 8 * 2]
 19860 0000DF9F 6A01                    	push 1
 19861 0000DFA1 E91C770000              	jmp L_error_incorrect_arity_simple
 19862                                  .L_lambda_simple_arity_check_ok_6d5f:
 19863 0000DFA6 C8000000                	enter 0, 0
 19864                                  
 19865 0000DFAA BF08000000              	mov rdi, 8
 19866 0000DFAF E855770000              	call malloc
 19867 0000DFB4 488B5D20                	mov rbx, PARAM(0)	; param run
 19868 0000DFB8 488918                  	mov [rax], rbx	; box run
 19869 0000DFBB 48894520                	mov PARAM(0), rax	;replace param run with box
 19870 0000DFBF 48B8-                   	mov rax, sob_void
 19870 0000DFC1 [0000000000000000] 
 19871                                  
 19872 0000DFC9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19873 0000DFCE E836770000              	call malloc
 19874 0000DFD3 50                      	push rax
 19875 0000DFD4 BF08000000              	mov rdi, 8 * 1	; new rib
 19876 0000DFD9 E82B770000              	call malloc
 19877 0000DFDE 50                      	push rax
 19878 0000DFDF BF28000000              	mov rdi, 8 * 5	; extended env
 19879 0000DFE4 E820770000              	call malloc
 19880 0000DFE9 488B7D10                	mov rdi, ENV
 19881 0000DFED BE00000000              	mov rsi, 0
 19882 0000DFF2 BA01000000              	mov rdx, 1
 19883                                  .L_lambda_simple_env_loop_6d60:	; ext_env[i + 1] <-- env[i]
 19884 0000DFF7 4883FE04                	cmp rsi, 4
 19885 0000DFFB 7410                    	je .L_lambda_simple_env_end_6d60
 19886 0000DFFD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19887 0000E001 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19888 0000E005 48FFC6                  	inc rsi
 19889 0000E008 48FFC2                  	inc rdx
 19890 0000E00B EBEA                    	jmp .L_lambda_simple_env_loop_6d60
 19891                                  .L_lambda_simple_env_end_6d60:
 19892 0000E00D 5B                      	pop rbx
 19893 0000E00E BE00000000              	mov rsi, 0
 19894                                  .L_lambda_simple_params_loop_6d60:	; copy params
 19895 0000E013 4883FE01                	cmp rsi, 1
 19896 0000E017 740E                    	je .L_lambda_simple_params_end_6d60
 19897 0000E019 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19898 0000E01E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19899 0000E022 48FFC6                  	inc rsi
 19900 0000E025 EBEC                    	jmp .L_lambda_simple_params_loop_6d60
 19901                                  .L_lambda_simple_params_end_6d60:
 19902 0000E027 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19903 0000E02A 4889C3                  	mov rbx, rax
 19904 0000E02D 58                      	pop rax
 19905 0000E02E C60004                  	mov byte [rax], T_closure
 19906 0000E031 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19907 0000E035 48C74009[42E00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d60
 19908 0000E03D E953010000              	jmp .L_lambda_simple_end_6d60
 19909                                  .L_lambda_simple_code_6d60:	; lambda-simple body
 19910 0000E042 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19911 0000E048 740B                    	je .L_lambda_simple_arity_check_ok_6d60
 19912 0000E04A FF742410                	push qword [rsp + 8 * 2]
 19913 0000E04E 6A02                    	push 2
 19914 0000E050 E96D760000              	jmp L_error_incorrect_arity_simple
 19915                                  .L_lambda_simple_arity_check_ok_6d60:
 19916 0000E055 C8000000                	enter 0, 0
 19917 0000E059 488B4528                	mov rax, PARAM(1)	; param strs
 19918 0000E05D 50                      	push rax
 19919 0000E05E 6A01                    	push 1	; arg count
 19920 0000E060 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 19921 0000E068 803805                  	cmp byte [rax], T_undefined
 19922 0000E06B 0F846B750000            	je L_error_fvar_undefined
 19923 0000E071 803804                  	cmp byte [rax], T_closure
 19924 0000E074 0F85E6750000            	jne L_error_non_closure
 19925 0000E07A FF7001                  	push SOB_CLOSURE_ENV(rax)
 19926 0000E07D FF5009                  	call SOB_CLOSURE_CODE(rax)
 19927 0000E080 483D[02000000]          	cmp rax, sob_boolean_false
 19928 0000E086 0F8505010000            	jne .L_or_end_0779
 19929 0000E08C 488B4528                	mov rax, PARAM(1)	; param strs
 19930 0000E090 50                      	push rax
 19931 0000E091 6A01                    	push 1	; arg count
 19932 0000E093 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 19933 0000E09B 803805                  	cmp byte [rax], T_undefined
 19934 0000E09E 0F8438750000            	je L_error_fvar_undefined
 19935 0000E0A4 803804                  	cmp byte [rax], T_closure
 19936 0000E0A7 0F85B3750000            	jne L_error_non_closure
 19937 0000E0AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 19938 0000E0B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19939 0000E0B3 50                      	push rax
 19940 0000E0B4 488B4520                	mov rax, PARAM(0)	; param str
 19941 0000E0B8 50                      	push rax
 19942 0000E0B9 6A02                    	push 2	; arg count
 19943 0000E0BB 488B4510                	mov rax, ENV
 19944 0000E0BF 488B4008                	mov rax, qword [rax + 8 * 1]
 19945 0000E0C3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<=?
 19946 0000E0C6 803804                  	cmp byte [rax], T_closure
 19947 0000E0C9 0F8591750000            	jne L_error_non_closure
 19948 0000E0CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 19949 0000E0D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19950                                  
 19951 0000E0D5 483D[02000000]          	cmp rax, sob_boolean_false
 19952 0000E0DB 0F84A6000000            	je .L_if_else_771c
 19953                                  	; preparing a tail-call
 19954 0000E0E1 488B4528                	mov rax, PARAM(1)	; param strs
 19955 0000E0E5 50                      	push rax
 19956 0000E0E6 6A01                    	push 1	; arg count
 19957 0000E0E8 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 19958 0000E0F0 803805                  	cmp byte [rax], T_undefined
 19959 0000E0F3 0F84E3740000            	je L_error_fvar_undefined
 19960 0000E0F9 803804                  	cmp byte [rax], T_closure
 19961 0000E0FC 0F855E750000            	jne L_error_non_closure
 19962 0000E102 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19963 0000E105 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19964 0000E108 50                      	push rax
 19965 0000E109 488B4528                	mov rax, PARAM(1)	; param strs
 19966 0000E10D 50                      	push rax
 19967 0000E10E 6A01                    	push 1	; arg count
 19968 0000E110 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 19969 0000E118 803805                  	cmp byte [rax], T_undefined
 19970 0000E11B 0F84BB740000            	je L_error_fvar_undefined
 19971 0000E121 803804                  	cmp byte [rax], T_closure
 19972 0000E124 0F8536750000            	jne L_error_non_closure
 19973 0000E12A FF7001                  	push SOB_CLOSURE_ENV(rax)
 19974 0000E12D FF5009                  	call SOB_CLOSURE_CODE(rax)
 19975 0000E130 50                      	push rax
 19976 0000E131 6A02                    	push 2	; arg count
 19977 0000E133 488B4510                	mov rax, ENV
 19978 0000E137 488B00                  	mov rax, qword [rax + 8 * 0]
 19979 0000E13A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19980 0000E13D 488B00                  	mov rax, qword [rax]
 19981 0000E140 803804                  	cmp byte [rax], T_closure
 19982 0000E143 0F8517750000            	jne L_error_non_closure
 19983 0000E149 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19984                                  
 19985                                  	; recycling the current frame
 19986 0000E14C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19987 0000E14F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19988 0000E152 B906000000              	mov rcx, 2 + 4
 19989 0000E157 488B5D18                	mov rbx, COUNT
 19990 0000E15B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19991 0000E160 488D55F8                	lea rdx, [rbp - 8 * 1]
 19992                                  .L_tc_recycle_frame_loop_8f55:
 19993 0000E164 4883F900                	cmp rcx, 0
 19994 0000E168 7413                    	je .L_tc_recycle_frame_done_8f55
 19995 0000E16A 488B32                  	mov rsi, qword [rdx]
 19996 0000E16D 488933                  	mov qword [rbx], rsi
 19997 0000E170 48FFC9                  	dec rcx
 19998 0000E173 4883EB08                	sub rbx, 8 * 1
 19999 0000E177 4883EA08                	sub rdx, 8 * 1
 20000 0000E17B EBE7                    	jmp .L_tc_recycle_frame_loop_8f55
 20001                                  .L_tc_recycle_frame_done_8f55:
 20002 0000E17D 488D6308                	lea rsp, [rbx + 8 * 1]
 20003 0000E181 5D                      	pop rbp	; the proc will restore it!
 20004 0000E182 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20005                                  
 20006 0000E185 EB0A                    	jmp .L_if_end_771c
 20007                                  
 20008                                  	.L_if_else_771c:
 20009 0000E187 48B8-                   	mov rax, L_constants + 2
 20009 0000E189 [0200000000000000] 
 20010                                  
 20011                                  	.L_if_end_771c:
 20012                                  .L_or_end_0779:
 20013 0000E191 C9                      	leave
 20014 0000E192 C22000                  	ret AND_KILL_FRAME(2)
 20015                                  .L_lambda_simple_end_6d60:	; new closure is in rax
 20016                                  
 20017 0000E195 50                      	push rax
 20018 0000E196 488B4520                	mov rax, PARAM(0)	; param run
 20019                                  
 20020 0000E19A 8F00                    	pop qword[rax]
 20021 0000E19C 48B8-                   	mov rax, sob_void
 20021 0000E19E [0000000000000000] 
 20022                                  
 20023 0000E1A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20024 0000E1AB E859750000              	call malloc
 20025 0000E1B0 50                      	push rax
 20026 0000E1B1 BF08000000              	mov rdi, 8 * 1	; new rib
 20027 0000E1B6 E84E750000              	call malloc
 20028 0000E1BB 50                      	push rax
 20029 0000E1BC BF28000000              	mov rdi, 8 * 5	; extended env
 20030 0000E1C1 E843750000              	call malloc
 20031 0000E1C6 488B7D10                	mov rdi, ENV
 20032 0000E1CA BE00000000              	mov rsi, 0
 20033 0000E1CF BA01000000              	mov rdx, 1
 20034                                  .L_lambda_opt_env_loop_0f63:	; ext_env[i + 1] <-- env[i]
 20035 0000E1D4 4883FE04                	cmp rsi, 4
 20036 0000E1D8 7410                    	je .L_lambda_opt_env_end_0f63
 20037 0000E1DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20038 0000E1DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20039 0000E1E2 48FFC6                  	inc rsi
 20040 0000E1E5 48FFC2                  	inc rdx
 20041 0000E1E8 EBEA                    	jmp .L_lambda_opt_env_loop_0f63
 20042                                  .L_lambda_opt_env_end_0f63:
 20043 0000E1EA 5B                      	pop rbx
 20044 0000E1EB BE00000000              	mov rsi, 0
 20045                                  .L_lambda_opt_params_loop_0f63:	; copy params
 20046 0000E1F0 4883FE01                	cmp rsi, 1
 20047 0000E1F4 740E                    	je .L_lambda_opt_params_end_0f63
 20048 0000E1F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20049 0000E1FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20050 0000E1FF 48FFC6                  	inc rsi
 20051 0000E202 EBEC                    	jmp .L_lambda_opt_params_loop_0f63
 20052                                  .L_lambda_opt_params_end_0f63:
 20053 0000E204 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20054 0000E207 4889C3                  	mov rbx, rax
 20055 0000E20A 58                      	pop rax
 20056 0000E20B C60004                  	mov byte [rax], T_closure
 20057 0000E20E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20058 0000E212 48C74009[1FE20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f63
 20059 0000E21A E939010000              	jmp .L_lambda_opt_end_0f63
 20060                                  .L_lambda_opt_code_0f63:	; lambda-simple body
 20061 0000E21F 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 20062 0000E225 740D                    	je .L_lambda_opt_arity_check_exact_0f63 ;	 if equal, go to exact arity
 20063 0000E227 7F42                    	jg .L_lambda_opt_arity_check_more_0f63 ;	 if greater than, go to arity more
 20064 0000E229 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 20065 0000E22D 6A01                     	push 1
 20066 0000E22F E9A2740000              	jmp L_error_incorrect_arity_opt
 20067                                  	.L_lambda_opt_arity_check_exact_0f63:
 20068 0000E234 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 20069 0000E239 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 20070 0000E23E 4883EC08                	sub rsp, 8
 20071 0000E242 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 20072                                  	.L_lambda_opt_exact_shifting_loop_0f63:
 20073 0000E246 488B5108                	mov rdx, [rcx + 8]
 20074 0000E24A 488911                  	mov [rcx], rdx
 20075 0000E24D 4883C108                	add rcx, 8
 20076 0000E251 4839CB                  	cmp rbx, rcx
 20077 0000E254 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f63
 20078                                  	.L_lambda_opt_exact_shifting_loop_end_0f63:
 20079 0000E256 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 20080 0000E25D 4883C001                	add rax, 1 ; 	arg count += 1
 20081 0000E261 4889442410              	mov qword [rsp + 8 * 2], rax
 20082 0000E266 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f63
 20083                                  	.L_lambda_opt_arity_check_more_0f63:
 20084 0000E26B 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 20084 0000E26D [0100000000000000] 
 20085 0000E275 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 20086 0000E27B 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f63
 20087                                  	.L_lambda_opt_stack_shrink_loop_0f63:
 20088 0000E27D BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 20089 0000E282 E882740000              	call malloc ;	 allocated memory for the optional scheme list
 20090 0000E287 C60021                  	mov byte[rax], T_pair ;	 set type pair
 20091 0000E28A 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 20092 0000E28E 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 20093 0000E291 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 20094 0000E296 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 20095 0000E29B 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 20096 0000E29F 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 20097                                  	.L_lambda_opt_more_shifting_loop_0f63:
 20098 0000E2A4 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 20099 0000E2A7 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 20100 0000E2AB 4883EB08                	sub rbx, 8 
 20101 0000E2AF 4839DC                  	cmp rsp, rbx
 20102 0000E2B2 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f63
 20103                                  	.L_lambda_opt_more_shifting_loop_end_0f63:
 20104 0000E2B4 4883C408                	add rsp, 8 ;	 update rsp
 20105 0000E2B8 488B5C2410              	mov rbx, [rsp + 8 * 2]
 20106 0000E2BD 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 20107 0000E2C1 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 20108 0000E2C6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20109 0000E2CC 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f63
 20110                                  	.L_lambda_opt_stack_shrink_loop_exit_0f63:
 20111 0000E2CE 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 20112 0000E2D3 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 20113 0000E2D8 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 20114 0000E2DD E827740000              	call malloc ;	 allocated memory for the optional scheme list
 20115 0000E2E2 C60021                  	mov byte[rax], T_pair ;	 set type pair
 20116 0000E2E5 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 20117 0000E2E9 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 20118 0000E2ED 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 20119                                  	.L_lambda_opt_stack_adjusted_0f63:
 20120 0000E2F2 C8000000                	enter 0, 0
 20121                                  	; preparing a tail-call
 20122 0000E2F6 488B4528                	mov rax, PARAM(1)	; param strs
 20123 0000E2FA 50                      	push rax
 20124 0000E2FB 488B4520                	mov rax, PARAM(0)	; param str
 20125 0000E2FF 50                      	push rax
 20126 0000E300 6A02                    	push 2	; arg count
 20127 0000E302 488B4510                	mov rax, ENV
 20128 0000E306 488B00                  	mov rax, qword [rax + 8 * 0]
 20129 0000E309 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20130 0000E30C 488B00                  	mov rax, qword [rax]
 20131 0000E30F 803804                  	cmp byte [rax], T_closure
 20132 0000E312 0F8548730000            	jne L_error_non_closure
 20133 0000E318 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20134                                  
 20135                                  	; recycling the current frame
 20136 0000E31B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20137 0000E31E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20138 0000E321 B906000000              	mov rcx, 2 + 4
 20139 0000E326 488B5D18                	mov rbx, COUNT
 20140 0000E32A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20141 0000E32F 488D55F8                	lea rdx, [rbp - 8 * 1]
 20142                                  .L_tc_recycle_frame_loop_8f56:
 20143 0000E333 4883F900                	cmp rcx, 0
 20144 0000E337 7413                    	je .L_tc_recycle_frame_done_8f56
 20145 0000E339 488B32                  	mov rsi, qword [rdx]
 20146 0000E33C 488933                  	mov qword [rbx], rsi
 20147 0000E33F 48FFC9                  	dec rcx
 20148 0000E342 4883EB08                	sub rbx, 8 * 1
 20149 0000E346 4883EA08                	sub rdx, 8 * 1
 20150 0000E34A EBE7                    	jmp .L_tc_recycle_frame_loop_8f56
 20151                                  .L_tc_recycle_frame_done_8f56:
 20152 0000E34C 488D6308                	lea rsp, [rbx + 8 * 1]
 20153 0000E350 5D                      	pop rbp	; the proc will restore it!
 20154 0000E351 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20155 0000E354 C9                      	leave
 20156 0000E355 C22000                  	ret AND_KILL_FRAME(2)
 20157                                  .L_lambda_opt_end_0f63:	; new closure is in rax
 20158 0000E358 C9                      	leave
 20159 0000E359 C21800                  	ret AND_KILL_FRAME(1)
 20160                                  .L_lambda_simple_end_6d5f:	; new closure is in rax
 20161 0000E35C 803804                  	cmp byte [rax], T_closure
 20162 0000E35F 0F85FB720000            	jne L_error_non_closure
 20163 0000E365 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20164                                  
 20165                                  	; recycling the current frame
 20166 0000E368 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20167 0000E36B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20168 0000E36E B905000000              	mov rcx, 1 + 4
 20169 0000E373 488B5D18                	mov rbx, COUNT
 20170 0000E377 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20171 0000E37C 488D55F8                	lea rdx, [rbp - 8 * 1]
 20172                                  .L_tc_recycle_frame_loop_8f57:
 20173 0000E380 4883F900                	cmp rcx, 0
 20174 0000E384 7413                    	je .L_tc_recycle_frame_done_8f57
 20175 0000E386 488B32                  	mov rsi, qword [rdx]
 20176 0000E389 488933                  	mov qword [rbx], rsi
 20177 0000E38C 48FFC9                  	dec rcx
 20178 0000E38F 4883EB08                	sub rbx, 8 * 1
 20179 0000E393 4883EA08                	sub rdx, 8 * 1
 20180 0000E397 EBE7                    	jmp .L_tc_recycle_frame_loop_8f57
 20181                                  .L_tc_recycle_frame_done_8f57:
 20182 0000E399 488D6308                	lea rsp, [rbx + 8 * 1]
 20183 0000E39D 5D                      	pop rbp	; the proc will restore it!
 20184 0000E39E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20185 0000E3A1 C9                      	leave
 20186 0000E3A2 C21800                  	ret AND_KILL_FRAME(1)
 20187                                  .L_lambda_simple_end_6d5e:	; new closure is in rax
 20188 0000E3A5 803804                  	cmp byte [rax], T_closure
 20189 0000E3A8 0F85B2720000            	jne L_error_non_closure
 20190 0000E3AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 20191                                  
 20192                                  	; recycling the current frame
 20193 0000E3B1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20194 0000E3B4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20195 0000E3B7 B905000000              	mov rcx, 1 + 4
 20196 0000E3BC 488B5D18                	mov rbx, COUNT
 20197 0000E3C0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20198 0000E3C5 488D55F8                	lea rdx, [rbp - 8 * 1]
 20199                                  .L_tc_recycle_frame_loop_8f58:
 20200 0000E3C9 4883F900                	cmp rcx, 0
 20201 0000E3CD 7413                    	je .L_tc_recycle_frame_done_8f58
 20202 0000E3CF 488B32                  	mov rsi, qword [rdx]
 20203 0000E3D2 488933                  	mov qword [rbx], rsi
 20204 0000E3D5 48FFC9                  	dec rcx
 20205 0000E3D8 4883EB08                	sub rbx, 8 * 1
 20206 0000E3DC 4883EA08                	sub rdx, 8 * 1
 20207 0000E3E0 EBE7                    	jmp .L_tc_recycle_frame_loop_8f58
 20208                                  .L_tc_recycle_frame_done_8f58:
 20209 0000E3E2 488D6308                	lea rsp, [rbx + 8 * 1]
 20210 0000E3E6 5D                      	pop rbp	; the proc will restore it!
 20211 0000E3E7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20212 0000E3EA C9                      	leave
 20213 0000E3EB C21800                  	ret AND_KILL_FRAME(1)
 20214                                  .L_lambda_simple_end_6d5a:	; new closure is in rax
 20215 0000E3EE 803804                  	cmp byte [rax], T_closure
 20216 0000E3F1 0F8569720000            	jne L_error_non_closure
 20217 0000E3F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20218                                  
 20219                                  	; recycling the current frame
 20220 0000E3FA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20221 0000E3FD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20222 0000E400 B905000000              	mov rcx, 1 + 4
 20223 0000E405 488B5D18                	mov rbx, COUNT
 20224 0000E409 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20225 0000E40E 488D55F8                	lea rdx, [rbp - 8 * 1]
 20226                                  .L_tc_recycle_frame_loop_8f59:
 20227 0000E412 4883F900                	cmp rcx, 0
 20228 0000E416 7413                    	je .L_tc_recycle_frame_done_8f59
 20229 0000E418 488B32                  	mov rsi, qword [rdx]
 20230 0000E41B 488933                  	mov qword [rbx], rsi
 20231 0000E41E 48FFC9                  	dec rcx
 20232 0000E421 4883EB08                	sub rbx, 8 * 1
 20233 0000E425 4883EA08                	sub rdx, 8 * 1
 20234 0000E429 EBE7                    	jmp .L_tc_recycle_frame_loop_8f59
 20235                                  .L_tc_recycle_frame_done_8f59:
 20236 0000E42B 488D6308                	lea rsp, [rbx + 8 * 1]
 20237 0000E42F 5D                      	pop rbp	; the proc will restore it!
 20238 0000E430 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20239 0000E433 C9                      	leave
 20240 0000E434 C22000                  	ret AND_KILL_FRAME(2)
 20241                                  .L_lambda_simple_end_6d59:	; new closure is in rax
 20242 0000E437 50                      	push rax
 20243 0000E438 6A01                    	push 1	; arg count
 20244 0000E43A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20245 0000E43F E8C5720000              	call malloc
 20246 0000E444 50                      	push rax
 20247 0000E445 BF00000000              	mov rdi, 8 * 0	; new rib
 20248 0000E44A E8BA720000              	call malloc
 20249 0000E44F 50                      	push rax
 20250 0000E450 BF08000000              	mov rdi, 8 * 1	; extended env
 20251 0000E455 E8AF720000              	call malloc
 20252 0000E45A 488B7D10                	mov rdi, ENV
 20253 0000E45E BE00000000              	mov rsi, 0
 20254 0000E463 BA01000000              	mov rdx, 1
 20255                                  .L_lambda_simple_env_loop_6d61:	; ext_env[i + 1] <-- env[i]
 20256 0000E468 4883FE00                	cmp rsi, 0
 20257 0000E46C 7410                    	je .L_lambda_simple_env_end_6d61
 20258 0000E46E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20259 0000E472 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20260 0000E476 48FFC6                  	inc rsi
 20261 0000E479 48FFC2                  	inc rdx
 20262 0000E47C EBEA                    	jmp .L_lambda_simple_env_loop_6d61
 20263                                  .L_lambda_simple_env_end_6d61:
 20264 0000E47E 5B                      	pop rbx
 20265 0000E47F BE00000000              	mov rsi, 0
 20266                                  .L_lambda_simple_params_loop_6d61:	; copy params
 20267 0000E484 4883FE00                	cmp rsi, 0
 20268 0000E488 740E                    	je .L_lambda_simple_params_end_6d61
 20269 0000E48A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20270 0000E48F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20271 0000E493 48FFC6                  	inc rsi
 20272 0000E496 EBEC                    	jmp .L_lambda_simple_params_loop_6d61
 20273                                  .L_lambda_simple_params_end_6d61:
 20274 0000E498 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20275 0000E49B 4889C3                  	mov rbx, rax
 20276 0000E49E 58                      	pop rax
 20277 0000E49F C60004                  	mov byte [rax], T_closure
 20278 0000E4A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20279 0000E4A6 48C74009[B3E40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d61
 20280 0000E4AE E96B010000              	jmp .L_lambda_simple_end_6d61
 20281                                  .L_lambda_simple_code_6d61:	; lambda-simple body
 20282 0000E4B3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20283 0000E4B9 740B                    	je .L_lambda_simple_arity_check_ok_6d61
 20284 0000E4BB FF742410                	push qword [rsp + 8 * 2]
 20285 0000E4BF 6A01                    	push 1
 20286 0000E4C1 E9FC710000              	jmp L_error_incorrect_arity_simple
 20287                                  .L_lambda_simple_arity_check_ok_6d61:
 20288 0000E4C6 C8000000                	enter 0, 0
 20289 0000E4CA 488B0425[4A160000]      	mov rax, qword [free_var_130]	; free var char=?
 20290 0000E4D2 803805                  	cmp byte [rax], T_undefined
 20291 0000E4D5 0F8401710000            	je L_error_fvar_undefined
 20292 0000E4DB 50                      	push rax
 20293 0000E4DC 488B0425[28160000]      	mov rax, qword [free_var_128]	; free var char<?
 20294 0000E4E4 803805                  	cmp byte [rax], T_undefined
 20295 0000E4E7 0F84EF700000            	je L_error_fvar_undefined
 20296 0000E4ED 50                      	push rax
 20297 0000E4EE 6A02                    	push 2	; arg count
 20298 0000E4F0 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20299 0000E4F4 803804                  	cmp byte [rax], T_closure
 20300 0000E4F7 0F8563710000            	jne L_error_non_closure
 20301 0000E4FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 20302 0000E500 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20303 0000E503 48890425[49170000]      	mov qword [free_var_145], rax	; free var string<=?
 20304 0000E50B 803805                  	cmp byte [rax], T_undefined
 20305 0000E50E 0F84C8700000            	je L_error_fvar_undefined
 20306 0000E514 48B8-                   	mov rax, sob_void
 20306 0000E516 [0000000000000000] 
 20307                                  
 20308 0000E51E 488B0425[C1160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 20309 0000E526 803805                  	cmp byte [rax], T_undefined
 20310 0000E529 0F84AD700000            	je L_error_fvar_undefined
 20311 0000E52F 50                      	push rax
 20312 0000E530 488B0425[9F160000]      	mov rax, qword [free_var_135]	; free var char-ci<?
 20313 0000E538 803805                  	cmp byte [rax], T_undefined
 20314 0000E53B 0F849B700000            	je L_error_fvar_undefined
 20315 0000E541 50                      	push rax
 20316 0000E542 6A02                    	push 2	; arg count
 20317 0000E544 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20318 0000E548 803804                  	cmp byte [rax], T_closure
 20319 0000E54B 0F850F710000            	jne L_error_non_closure
 20320 0000E551 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20321 0000E554 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20322 0000E557 48890425[9E170000]      	mov qword [free_var_150], rax	; free var string-ci<=?
 20323 0000E55F 803805                  	cmp byte [rax], T_undefined
 20324 0000E562 0F8474700000            	je L_error_fvar_undefined
 20325 0000E568 48B8-                   	mov rax, sob_void
 20325 0000E56A [0000000000000000] 
 20326                                  
 20327 0000E572 488B0425[4A160000]      	mov rax, qword [free_var_130]	; free var char=?
 20328 0000E57A 803805                  	cmp byte [rax], T_undefined
 20329 0000E57D 0F8459700000            	je L_error_fvar_undefined
 20330 0000E583 50                      	push rax
 20331 0000E584 488B0425[5B160000]      	mov rax, qword [free_var_131]	; free var char>?
 20332 0000E58C 803805                  	cmp byte [rax], T_undefined
 20333 0000E58F 0F8447700000            	je L_error_fvar_undefined
 20334 0000E595 50                      	push rax
 20335 0000E596 6A02                    	push 2	; arg count
 20336 0000E598 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20337 0000E59C 803804                  	cmp byte [rax], T_closure
 20338 0000E59F 0F85BB700000            	jne L_error_non_closure
 20339 0000E5A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20340 0000E5A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20341 0000E5AB 48890425[6B170000]      	mov qword [free_var_147], rax	; free var string>=?
 20342 0000E5B3 803805                  	cmp byte [rax], T_undefined
 20343 0000E5B6 0F8420700000            	je L_error_fvar_undefined
 20344 0000E5BC 48B8-                   	mov rax, sob_void
 20344 0000E5BE [0000000000000000] 
 20345                                  
 20346 0000E5C6 488B0425[C1160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 20347 0000E5CE 803805                  	cmp byte [rax], T_undefined
 20348 0000E5D1 0F8405700000            	je L_error_fvar_undefined
 20349 0000E5D7 50                      	push rax
 20350 0000E5D8 488B0425[D2160000]      	mov rax, qword [free_var_138]	; free var char-ci>?
 20351 0000E5E0 803805                  	cmp byte [rax], T_undefined
 20352 0000E5E3 0F84F36F0000            	je L_error_fvar_undefined
 20353 0000E5E9 50                      	push rax
 20354 0000E5EA 6A02                    	push 2	; arg count
 20355 0000E5EC 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20356 0000E5F0 803804                  	cmp byte [rax], T_closure
 20357 0000E5F3 0F8567700000            	jne L_error_non_closure
 20358 0000E5F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20359 0000E5FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 20360 0000E5FF 48890425[C0170000]      	mov qword [free_var_152], rax	; free var string-ci>=?
 20361 0000E607 803805                  	cmp byte [rax], T_undefined
 20362 0000E60A 0F84CC6F0000            	je L_error_fvar_undefined
 20363 0000E610 48B8-                   	mov rax, sob_void
 20363 0000E612 [0000000000000000] 
 20364 0000E61A C9                      	leave
 20365 0000E61B C21800                  	ret AND_KILL_FRAME(1)
 20366                                  .L_lambda_simple_end_6d61:	; new closure is in rax
 20367 0000E61E 803804                  	cmp byte [rax], T_closure
 20368 0000E621 0F8539700000            	jne L_error_non_closure
 20369 0000E627 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20370 0000E62A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20371                                  
 20372 0000E62D 4889C7                  	mov rdi, rax
 20373 0000E630 E8E6710000              	call print_sexpr_if_not_void
 20374                                  
 20375 0000E635 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20376 0000E63A E8CA700000              	call malloc
 20377 0000E63F 50                      	push rax
 20378 0000E640 BF00000000              	mov rdi, 8 * 0	; new rib
 20379 0000E645 E8BF700000              	call malloc
 20380 0000E64A 50                      	push rax
 20381 0000E64B BF08000000              	mov rdi, 8 * 1	; extended env
 20382 0000E650 E8B4700000              	call malloc
 20383 0000E655 488B7D10                	mov rdi, ENV
 20384 0000E659 BE00000000              	mov rsi, 0
 20385 0000E65E BA01000000              	mov rdx, 1
 20386                                  .L_lambda_simple_env_loop_6d62:	; ext_env[i + 1] <-- env[i]
 20387 0000E663 4883FE00                	cmp rsi, 0
 20388 0000E667 7410                    	je .L_lambda_simple_env_end_6d62
 20389 0000E669 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20390 0000E66D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20391 0000E671 48FFC6                  	inc rsi
 20392 0000E674 48FFC2                  	inc rdx
 20393 0000E677 EBEA                    	jmp .L_lambda_simple_env_loop_6d62
 20394                                  .L_lambda_simple_env_end_6d62:
 20395 0000E679 5B                      	pop rbx
 20396 0000E67A BE00000000              	mov rsi, 0
 20397                                  .L_lambda_simple_params_loop_6d62:	; copy params
 20398 0000E67F 4883FE00                	cmp rsi, 0
 20399 0000E683 740E                    	je .L_lambda_simple_params_end_6d62
 20400 0000E685 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20401 0000E68A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20402 0000E68E 48FFC6                  	inc rsi
 20403 0000E691 EBEC                    	jmp .L_lambda_simple_params_loop_6d62
 20404                                  .L_lambda_simple_params_end_6d62:
 20405 0000E693 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20406 0000E696 4889C3                  	mov rbx, rax
 20407 0000E699 58                      	pop rax
 20408 0000E69A C60004                  	mov byte [rax], T_closure
 20409 0000E69D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20410 0000E6A1 48C74009[AEE60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d62
 20411 0000E6A9 E9540B0000              	jmp .L_lambda_simple_end_6d62
 20412                                  .L_lambda_simple_code_6d62:	; lambda-simple body
 20413 0000E6AE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20414 0000E6B4 740B                    	je .L_lambda_simple_arity_check_ok_6d62
 20415 0000E6B6 FF742410                	push qword [rsp + 8 * 2]
 20416 0000E6BA 6A01                    	push 1
 20417 0000E6BC E901700000              	jmp L_error_incorrect_arity_simple
 20418                                  .L_lambda_simple_arity_check_ok_6d62:
 20419 0000E6C1 C8000000                	enter 0, 0
 20420                                  	; preparing a tail-call
 20421 0000E6C5 48B8-                   	mov rax, L_constants + 1881
 20421 0000E6C7 [5907000000000000] 
 20422 0000E6CF 50                      	push rax
 20423 0000E6D0 6A01                    	push 1	; arg count
 20424 0000E6D2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20425 0000E6D7 E82D700000              	call malloc
 20426 0000E6DC 50                      	push rax
 20427 0000E6DD BF08000000              	mov rdi, 8 * 1	; new rib
 20428 0000E6E2 E822700000              	call malloc
 20429 0000E6E7 50                      	push rax
 20430 0000E6E8 BF10000000              	mov rdi, 8 * 2	; extended env
 20431 0000E6ED E817700000              	call malloc
 20432 0000E6F2 488B7D10                	mov rdi, ENV
 20433 0000E6F6 BE00000000              	mov rsi, 0
 20434 0000E6FB BA01000000              	mov rdx, 1
 20435                                  .L_lambda_simple_env_loop_6d63:	; ext_env[i + 1] <-- env[i]
 20436 0000E700 4883FE01                	cmp rsi, 1
 20437 0000E704 7410                    	je .L_lambda_simple_env_end_6d63
 20438 0000E706 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20439 0000E70A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20440 0000E70E 48FFC6                  	inc rsi
 20441 0000E711 48FFC2                  	inc rdx
 20442 0000E714 EBEA                    	jmp .L_lambda_simple_env_loop_6d63
 20443                                  .L_lambda_simple_env_end_6d63:
 20444 0000E716 5B                      	pop rbx
 20445 0000E717 BE00000000              	mov rsi, 0
 20446                                  .L_lambda_simple_params_loop_6d63:	; copy params
 20447 0000E71C 4883FE01                	cmp rsi, 1
 20448 0000E720 740E                    	je .L_lambda_simple_params_end_6d63
 20449 0000E722 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20450 0000E727 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20451 0000E72B 48FFC6                  	inc rsi
 20452 0000E72E EBEC                    	jmp .L_lambda_simple_params_loop_6d63
 20453                                  .L_lambda_simple_params_end_6d63:
 20454 0000E730 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20455 0000E733 4889C3                  	mov rbx, rax
 20456 0000E736 58                      	pop rax
 20457 0000E737 C60004                  	mov byte [rax], T_closure
 20458 0000E73A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20459 0000E73E 48C74009[4BE70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d63
 20460 0000E746 E96E0A0000              	jmp .L_lambda_simple_end_6d63
 20461                                  .L_lambda_simple_code_6d63:	; lambda-simple body
 20462 0000E74B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20463 0000E751 740B                    	je .L_lambda_simple_arity_check_ok_6d63
 20464 0000E753 FF742410                	push qword [rsp + 8 * 2]
 20465 0000E757 6A01                    	push 1
 20466 0000E759 E9646F0000              	jmp L_error_incorrect_arity_simple
 20467                                  .L_lambda_simple_arity_check_ok_6d63:
 20468 0000E75E C8000000                	enter 0, 0
 20469                                  
 20470 0000E762 BF08000000              	mov rdi, 8
 20471 0000E767 E89D6F0000              	call malloc
 20472 0000E76C 488B5D20                	mov rbx, PARAM(0)	; param run
 20473 0000E770 488918                  	mov [rax], rbx	; box run
 20474 0000E773 48894520                	mov PARAM(0), rax	;replace param run with box
 20475 0000E777 48B8-                   	mov rax, sob_void
 20475 0000E779 [0000000000000000] 
 20476                                  
 20477 0000E781 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20478 0000E786 E87E6F0000              	call malloc
 20479 0000E78B 50                      	push rax
 20480 0000E78C BF08000000              	mov rdi, 8 * 1	; new rib
 20481 0000E791 E8736F0000              	call malloc
 20482 0000E796 50                      	push rax
 20483 0000E797 BF18000000              	mov rdi, 8 * 3	; extended env
 20484 0000E79C E8686F0000              	call malloc
 20485 0000E7A1 488B7D10                	mov rdi, ENV
 20486 0000E7A5 BE00000000              	mov rsi, 0
 20487 0000E7AA BA01000000              	mov rdx, 1
 20488                                  .L_lambda_simple_env_loop_6d64:	; ext_env[i + 1] <-- env[i]
 20489 0000E7AF 4883FE02                	cmp rsi, 2
 20490 0000E7B3 7410                    	je .L_lambda_simple_env_end_6d64
 20491 0000E7B5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20492 0000E7B9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20493 0000E7BD 48FFC6                  	inc rsi
 20494 0000E7C0 48FFC2                  	inc rdx
 20495 0000E7C3 EBEA                    	jmp .L_lambda_simple_env_loop_6d64
 20496                                  .L_lambda_simple_env_end_6d64:
 20497 0000E7C5 5B                      	pop rbx
 20498 0000E7C6 BE00000000              	mov rsi, 0
 20499                                  .L_lambda_simple_params_loop_6d64:	; copy params
 20500 0000E7CB 4883FE01                	cmp rsi, 1
 20501 0000E7CF 740E                    	je .L_lambda_simple_params_end_6d64
 20502 0000E7D1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20503 0000E7D6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20504 0000E7DA 48FFC6                  	inc rsi
 20505 0000E7DD EBEC                    	jmp .L_lambda_simple_params_loop_6d64
 20506                                  .L_lambda_simple_params_end_6d64:
 20507 0000E7DF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20508 0000E7E2 4889C3                  	mov rbx, rax
 20509 0000E7E5 58                      	pop rax
 20510 0000E7E6 C60004                  	mov byte [rax], T_closure
 20511 0000E7E9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20512 0000E7ED 48C74009[FAE70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d64
 20513 0000E7F5 E9BB010000              	jmp .L_lambda_simple_end_6d64
 20514                                  .L_lambda_simple_code_6d64:	; lambda-simple body
 20515 0000E7FA 48837C241004            	cmp qword [rsp + 8 * 2], 4
 20516 0000E800 740B                    	je .L_lambda_simple_arity_check_ok_6d64
 20517 0000E802 FF742410                	push qword [rsp + 8 * 2]
 20518 0000E806 6A04                    	push 4
 20519 0000E808 E9B56E0000              	jmp L_error_incorrect_arity_simple
 20520                                  .L_lambda_simple_arity_check_ok_6d64:
 20521 0000E80D C8000000                	enter 0, 0
 20522 0000E811 488B4538                	mov rax, PARAM(3)	; param len
 20523 0000E815 50                      	push rax
 20524 0000E816 488B4520                	mov rax, PARAM(0)	; param i
 20525 0000E81A 50                      	push rax
 20526 0000E81B 6A02                    	push 2	; arg count
 20527 0000E81D 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 20528 0000E825 803805                  	cmp byte [rax], T_undefined
 20529 0000E828 0F84AE6D0000            	je L_error_fvar_undefined
 20530 0000E82E 803804                  	cmp byte [rax], T_closure
 20531 0000E831 0F85296E0000            	jne L_error_non_closure
 20532 0000E837 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20533 0000E83A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20534 0000E83D 483D[02000000]          	cmp rax, sob_boolean_false
 20535 0000E843 0F8568010000            	jne .L_or_end_077a
 20536 0000E849 488B4538                	mov rax, PARAM(3)	; param len
 20537 0000E84D 50                      	push rax
 20538 0000E84E 488B4520                	mov rax, PARAM(0)	; param i
 20539 0000E852 50                      	push rax
 20540 0000E853 6A02                    	push 2	; arg count
 20541 0000E855 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 20542 0000E85D 803805                  	cmp byte [rax], T_undefined
 20543 0000E860 0F84766D0000            	je L_error_fvar_undefined
 20544 0000E866 803804                  	cmp byte [rax], T_closure
 20545 0000E869 0F85F16D0000            	jne L_error_non_closure
 20546 0000E86F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20547 0000E872 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20548                                  
 20549 0000E875 483D[02000000]          	cmp rax, sob_boolean_false
 20550 0000E87B 0F8426010000            	je .L_if_else_771d
 20551 0000E881 488B4520                	mov rax, PARAM(0)	; param i
 20552 0000E885 50                      	push rax
 20553 0000E886 488B4530                	mov rax, PARAM(2)	; param str2
 20554 0000E88A 50                      	push rax
 20555 0000E88B 6A02                    	push 2	; arg count
 20556 0000E88D 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 20557 0000E895 803805                  	cmp byte [rax], T_undefined
 20558 0000E898 0F843E6D0000            	je L_error_fvar_undefined
 20559 0000E89E 803804                  	cmp byte [rax], T_closure
 20560 0000E8A1 0F85B96D0000            	jne L_error_non_closure
 20561 0000E8A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20562 0000E8AA FF5009                  	call SOB_CLOSURE_CODE(rax)
 20563 0000E8AD 50                      	push rax
 20564 0000E8AE 488B4520                	mov rax, PARAM(0)	; param i
 20565 0000E8B2 50                      	push rax
 20566 0000E8B3 488B4528                	mov rax, PARAM(1)	; param str1
 20567 0000E8B7 50                      	push rax
 20568 0000E8B8 6A02                    	push 2	; arg count
 20569 0000E8BA 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 20570 0000E8C2 803805                  	cmp byte [rax], T_undefined
 20571 0000E8C5 0F84116D0000            	je L_error_fvar_undefined
 20572 0000E8CB 803804                  	cmp byte [rax], T_closure
 20573 0000E8CE 0F858C6D0000            	jne L_error_non_closure
 20574 0000E8D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20575 0000E8D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20576 0000E8DA 50                      	push rax
 20577 0000E8DB 6A02                    	push 2	; arg count
 20578 0000E8DD 488B4510                	mov rax, ENV
 20579 0000E8E1 488B4008                	mov rax, qword [rax + 8 * 1]
 20580 0000E8E5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char=?
 20581 0000E8E8 803804                  	cmp byte [rax], T_closure
 20582 0000E8EB 0F856F6D0000            	jne L_error_non_closure
 20583 0000E8F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20584 0000E8F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20585                                  
 20586 0000E8F7 483D[02000000]          	cmp rax, sob_boolean_false
 20587 0000E8FD 0F8498000000            	je .L_if_else_771e
 20588                                  	; preparing a tail-call
 20589 0000E903 488B4538                	mov rax, PARAM(3)	; param len
 20590 0000E907 50                      	push rax
 20591 0000E908 488B4530                	mov rax, PARAM(2)	; param str2
 20592 0000E90C 50                      	push rax
 20593 0000E90D 488B4528                	mov rax, PARAM(1)	; param str1
 20594 0000E911 50                      	push rax
 20595 0000E912 48B8-                   	mov rax, L_constants + 2158
 20595 0000E914 [6E08000000000000] 
 20596 0000E91C 50                      	push rax
 20597 0000E91D 488B4520                	mov rax, PARAM(0)	; param i
 20598 0000E921 50                      	push rax
 20599 0000E922 6A02                    	push 2	; arg count
 20600 0000E924 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 20601 0000E92C 803805                  	cmp byte [rax], T_undefined
 20602 0000E92F 0F84A76C0000            	je L_error_fvar_undefined
 20603 0000E935 803804                  	cmp byte [rax], T_closure
 20604 0000E938 0F85226D0000            	jne L_error_non_closure
 20605 0000E93E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20606 0000E941 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20607 0000E944 50                      	push rax
 20608 0000E945 6A04                    	push 4	; arg count
 20609 0000E947 488B4510                	mov rax, ENV
 20610 0000E94B 488B00                  	mov rax, qword [rax + 8 * 0]
 20611 0000E94E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20612 0000E951 488B00                  	mov rax, qword [rax]
 20613 0000E954 803804                  	cmp byte [rax], T_closure
 20614 0000E957 0F85036D0000            	jne L_error_non_closure
 20615 0000E95D FF7001                  	push SOB_CLOSURE_ENV(rax)
 20616                                  
 20617                                  	; recycling the current frame
 20618 0000E960 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20619 0000E963 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20620 0000E966 B908000000              	mov rcx, 4 + 4
 20621 0000E96B 488B5D18                	mov rbx, COUNT
 20622 0000E96F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20623 0000E974 488D55F8                	lea rdx, [rbp - 8 * 1]
 20624                                  .L_tc_recycle_frame_loop_8f5a:
 20625 0000E978 4883F900                	cmp rcx, 0
 20626 0000E97C 7413                    	je .L_tc_recycle_frame_done_8f5a
 20627 0000E97E 488B32                  	mov rsi, qword [rdx]
 20628 0000E981 488933                  	mov qword [rbx], rsi
 20629 0000E984 48FFC9                  	dec rcx
 20630 0000E987 4883EB08                	sub rbx, 8 * 1
 20631 0000E98B 4883EA08                	sub rdx, 8 * 1
 20632 0000E98F EBE7                    	jmp .L_tc_recycle_frame_loop_8f5a
 20633                                  .L_tc_recycle_frame_done_8f5a:
 20634 0000E991 488D6308                	lea rsp, [rbx + 8 * 1]
 20635 0000E995 5D                      	pop rbp	; the proc will restore it!
 20636 0000E996 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20637                                  
 20638 0000E999 EB0A                    	jmp .L_if_end_771e
 20639                                  
 20640                                  	.L_if_else_771e:
 20641 0000E99B 48B8-                   	mov rax, L_constants + 2
 20641 0000E99D [0200000000000000] 
 20642                                  
 20643                                  	.L_if_end_771e:
 20644                                  
 20645 0000E9A5 EB0A                    	jmp .L_if_end_771d
 20646                                  
 20647                                  	.L_if_else_771d:
 20648 0000E9A7 48B8-                   	mov rax, L_constants + 2
 20648 0000E9A9 [0200000000000000] 
 20649                                  
 20650                                  	.L_if_end_771d:
 20651                                  .L_or_end_077a:
 20652 0000E9B1 C9                      	leave
 20653 0000E9B2 C23000                  	ret AND_KILL_FRAME(4)
 20654                                  .L_lambda_simple_end_6d64:	; new closure is in rax
 20655                                  
 20656 0000E9B5 50                      	push rax
 20657 0000E9B6 488B4520                	mov rax, PARAM(0)	; param run
 20658                                  
 20659 0000E9BA 8F00                    	pop qword[rax]
 20660 0000E9BC 48B8-                   	mov rax, sob_void
 20660 0000E9BE [0000000000000000] 
 20661                                  
 20662                                  	; preparing a tail-call
 20663 0000E9C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20664 0000E9CB E8396D0000              	call malloc
 20665 0000E9D0 50                      	push rax
 20666 0000E9D1 BF08000000              	mov rdi, 8 * 1	; new rib
 20667 0000E9D6 E82E6D0000              	call malloc
 20668 0000E9DB 50                      	push rax
 20669 0000E9DC BF18000000              	mov rdi, 8 * 3	; extended env
 20670 0000E9E1 E8236D0000              	call malloc
 20671 0000E9E6 488B7D10                	mov rdi, ENV
 20672 0000E9EA BE00000000              	mov rsi, 0
 20673 0000E9EF BA01000000              	mov rdx, 1
 20674                                  .L_lambda_simple_env_loop_6d65:	; ext_env[i + 1] <-- env[i]
 20675 0000E9F4 4883FE02                	cmp rsi, 2
 20676 0000E9F8 7410                    	je .L_lambda_simple_env_end_6d65
 20677 0000E9FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20678 0000E9FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20679 0000EA02 48FFC6                  	inc rsi
 20680 0000EA05 48FFC2                  	inc rdx
 20681 0000EA08 EBEA                    	jmp .L_lambda_simple_env_loop_6d65
 20682                                  .L_lambda_simple_env_end_6d65:
 20683 0000EA0A 5B                      	pop rbx
 20684 0000EA0B BE00000000              	mov rsi, 0
 20685                                  .L_lambda_simple_params_loop_6d65:	; copy params
 20686 0000EA10 4883FE01                	cmp rsi, 1
 20687 0000EA14 740E                    	je .L_lambda_simple_params_end_6d65
 20688 0000EA16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20689 0000EA1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20690 0000EA1F 48FFC6                  	inc rsi
 20691 0000EA22 EBEC                    	jmp .L_lambda_simple_params_loop_6d65
 20692                                  .L_lambda_simple_params_end_6d65:
 20693 0000EA24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20694 0000EA27 4889C3                  	mov rbx, rax
 20695 0000EA2A 58                      	pop rax
 20696 0000EA2B C60004                  	mov byte [rax], T_closure
 20697 0000EA2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20698 0000EA32 48C74009[3FEA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d65
 20699 0000EA3A E906020000              	jmp .L_lambda_simple_end_6d65
 20700                                  .L_lambda_simple_code_6d65:	; lambda-simple body
 20701 0000EA3F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20702 0000EA45 740B                    	je .L_lambda_simple_arity_check_ok_6d65
 20703 0000EA47 FF742410                	push qword [rsp + 8 * 2]
 20704 0000EA4B 6A02                    	push 2
 20705 0000EA4D E9706C0000              	jmp L_error_incorrect_arity_simple
 20706                                  .L_lambda_simple_arity_check_ok_6d65:
 20707 0000EA52 C8000000                	enter 0, 0
 20708                                  	; preparing a tail-call
 20709 0000EA56 488B4528                	mov rax, PARAM(1)	; param str2
 20710 0000EA5A 50                      	push rax
 20711 0000EA5B 6A01                    	push 1	; arg count
 20712 0000EA5D 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 20713 0000EA65 803805                  	cmp byte [rax], T_undefined
 20714 0000EA68 0F846E6B0000            	je L_error_fvar_undefined
 20715 0000EA6E 803804                  	cmp byte [rax], T_closure
 20716 0000EA71 0F85E96B0000            	jne L_error_non_closure
 20717 0000EA77 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20718 0000EA7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20719 0000EA7D 50                      	push rax
 20720 0000EA7E 488B4520                	mov rax, PARAM(0)	; param str1
 20721 0000EA82 50                      	push rax
 20722 0000EA83 6A01                    	push 1	; arg count
 20723 0000EA85 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 20724 0000EA8D 803805                  	cmp byte [rax], T_undefined
 20725 0000EA90 0F84466B0000            	je L_error_fvar_undefined
 20726 0000EA96 803804                  	cmp byte [rax], T_closure
 20727 0000EA99 0F85C16B0000            	jne L_error_non_closure
 20728 0000EA9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20729 0000EAA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20730 0000EAA5 50                      	push rax
 20731 0000EAA6 6A02                    	push 2	; arg count
 20732 0000EAA8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20733 0000EAAD E8576C0000              	call malloc
 20734 0000EAB2 50                      	push rax
 20735 0000EAB3 BF10000000              	mov rdi, 8 * 2	; new rib
 20736 0000EAB8 E84C6C0000              	call malloc
 20737 0000EABD 50                      	push rax
 20738 0000EABE BF20000000              	mov rdi, 8 * 4	; extended env
 20739 0000EAC3 E8416C0000              	call malloc
 20740 0000EAC8 488B7D10                	mov rdi, ENV
 20741 0000EACC BE00000000              	mov rsi, 0
 20742 0000EAD1 BA01000000              	mov rdx, 1
 20743                                  .L_lambda_simple_env_loop_6d66:	; ext_env[i + 1] <-- env[i]
 20744 0000EAD6 4883FE03                	cmp rsi, 3
 20745 0000EADA 7410                    	je .L_lambda_simple_env_end_6d66
 20746 0000EADC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20747 0000EAE0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20748 0000EAE4 48FFC6                  	inc rsi
 20749 0000EAE7 48FFC2                  	inc rdx
 20750 0000EAEA EBEA                    	jmp .L_lambda_simple_env_loop_6d66
 20751                                  .L_lambda_simple_env_end_6d66:
 20752 0000EAEC 5B                      	pop rbx
 20753 0000EAED BE00000000              	mov rsi, 0
 20754                                  .L_lambda_simple_params_loop_6d66:	; copy params
 20755 0000EAF2 4883FE02                	cmp rsi, 2
 20756 0000EAF6 740E                    	je .L_lambda_simple_params_end_6d66
 20757 0000EAF8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20758 0000EAFD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20759 0000EB01 48FFC6                  	inc rsi
 20760 0000EB04 EBEC                    	jmp .L_lambda_simple_params_loop_6d66
 20761                                  .L_lambda_simple_params_end_6d66:
 20762 0000EB06 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20763 0000EB09 4889C3                  	mov rbx, rax
 20764 0000EB0C 58                      	pop rax
 20765 0000EB0D C60004                  	mov byte [rax], T_closure
 20766 0000EB10 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20767 0000EB14 48C74009[21EB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d66
 20768 0000EB1C E9DB000000              	jmp .L_lambda_simple_end_6d66
 20769                                  .L_lambda_simple_code_6d66:	; lambda-simple body
 20770 0000EB21 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20771 0000EB27 740B                    	je .L_lambda_simple_arity_check_ok_6d66
 20772 0000EB29 FF742410                	push qword [rsp + 8 * 2]
 20773 0000EB2D 6A02                    	push 2
 20774 0000EB2F E98E6B0000              	jmp L_error_incorrect_arity_simple
 20775                                  .L_lambda_simple_arity_check_ok_6d66:
 20776 0000EB34 C8000000                	enter 0, 0
 20777 0000EB38 488B4528                	mov rax, PARAM(1)	; param len2
 20778 0000EB3C 50                      	push rax
 20779 0000EB3D 488B4520                	mov rax, PARAM(0)	; param len1
 20780 0000EB41 50                      	push rax
 20781 0000EB42 6A02                    	push 2	; arg count
 20782 0000EB44 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 20783 0000EB4C 803805                  	cmp byte [rax], T_undefined
 20784 0000EB4F 0F84876A0000            	je L_error_fvar_undefined
 20785 0000EB55 803804                  	cmp byte [rax], T_closure
 20786 0000EB58 0F85026B0000            	jne L_error_non_closure
 20787 0000EB5E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20788 0000EB61 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20789                                  
 20790 0000EB64 483D[02000000]          	cmp rax, sob_boolean_false
 20791 0000EB6A 0F847E000000            	je .L_if_else_771f
 20792                                  	; preparing a tail-call
 20793 0000EB70 488B4520                	mov rax, PARAM(0)	; param len1
 20794 0000EB74 50                      	push rax
 20795 0000EB75 488B4510                	mov rax, ENV
 20796 0000EB79 488B00                  	mov rax, qword [rax + 8 * 0]
 20797 0000EB7C 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 20798 0000EB80 50                      	push rax
 20799 0000EB81 488B4510                	mov rax, ENV
 20800 0000EB85 488B00                  	mov rax, qword [rax + 8 * 0]
 20801 0000EB88 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 20802 0000EB8B 50                      	push rax
 20803 0000EB8C 48B8-                   	mov rax, L_constants + 2023
 20803 0000EB8E [E707000000000000] 
 20804 0000EB96 50                      	push rax
 20805 0000EB97 6A04                    	push 4	; arg count
 20806 0000EB99 488B4510                	mov rax, ENV
 20807 0000EB9D 488B4008                	mov rax, qword [rax + 8 * 1]
 20808 0000EBA1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20809 0000EBA4 488B00                  	mov rax, qword [rax]
 20810 0000EBA7 803804                  	cmp byte [rax], T_closure
 20811 0000EBAA 0F85B06A0000            	jne L_error_non_closure
 20812 0000EBB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20813                                  
 20814                                  	; recycling the current frame
 20815 0000EBB3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20816 0000EBB6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20817 0000EBB9 B908000000              	mov rcx, 4 + 4
 20818 0000EBBE 488B5D18                	mov rbx, COUNT
 20819 0000EBC2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20820 0000EBC7 488D55F8                	lea rdx, [rbp - 8 * 1]
 20821                                  .L_tc_recycle_frame_loop_8f5b:
 20822 0000EBCB 4883F900                	cmp rcx, 0
 20823 0000EBCF 7413                    	je .L_tc_recycle_frame_done_8f5b
 20824 0000EBD1 488B32                  	mov rsi, qword [rdx]
 20825 0000EBD4 488933                  	mov qword [rbx], rsi
 20826 0000EBD7 48FFC9                  	dec rcx
 20827 0000EBDA 4883EB08                	sub rbx, 8 * 1
 20828 0000EBDE 4883EA08                	sub rdx, 8 * 1
 20829 0000EBE2 EBE7                    	jmp .L_tc_recycle_frame_loop_8f5b
 20830                                  .L_tc_recycle_frame_done_8f5b:
 20831 0000EBE4 488D6308                	lea rsp, [rbx + 8 * 1]
 20832 0000EBE8 5D                      	pop rbp	; the proc will restore it!
 20833 0000EBE9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20834                                  
 20835 0000EBEC EB0A                    	jmp .L_if_end_771f
 20836                                  
 20837                                  	.L_if_else_771f:
 20838 0000EBEE 48B8-                   	mov rax, L_constants + 2
 20838 0000EBF0 [0200000000000000] 
 20839                                  
 20840                                  	.L_if_end_771f:
 20841 0000EBF8 C9                      	leave
 20842 0000EBF9 C22000                  	ret AND_KILL_FRAME(2)
 20843                                  .L_lambda_simple_end_6d66:	; new closure is in rax
 20844 0000EBFC 803804                  	cmp byte [rax], T_closure
 20845 0000EBFF 0F855B6A0000            	jne L_error_non_closure
 20846 0000EC05 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20847                                  
 20848                                  	; recycling the current frame
 20849 0000EC08 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20850 0000EC0B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20851 0000EC0E B906000000              	mov rcx, 2 + 4
 20852 0000EC13 488B5D18                	mov rbx, COUNT
 20853 0000EC17 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20854 0000EC1C 488D55F8                	lea rdx, [rbp - 8 * 1]
 20855                                  .L_tc_recycle_frame_loop_8f5c:
 20856 0000EC20 4883F900                	cmp rcx, 0
 20857 0000EC24 7413                    	je .L_tc_recycle_frame_done_8f5c
 20858 0000EC26 488B32                  	mov rsi, qword [rdx]
 20859 0000EC29 488933                  	mov qword [rbx], rsi
 20860 0000EC2C 48FFC9                  	dec rcx
 20861 0000EC2F 4883EB08                	sub rbx, 8 * 1
 20862 0000EC33 4883EA08                	sub rdx, 8 * 1
 20863 0000EC37 EBE7                    	jmp .L_tc_recycle_frame_loop_8f5c
 20864                                  .L_tc_recycle_frame_done_8f5c:
 20865 0000EC39 488D6308                	lea rsp, [rbx + 8 * 1]
 20866 0000EC3D 5D                      	pop rbp	; the proc will restore it!
 20867 0000EC3E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20868 0000EC41 C9                      	leave
 20869 0000EC42 C22000                  	ret AND_KILL_FRAME(2)
 20870                                  .L_lambda_simple_end_6d65:	; new closure is in rax
 20871 0000EC45 50                      	push rax
 20872 0000EC46 6A01                    	push 1	; arg count
 20873 0000EC48 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20874 0000EC4D E8B76A0000              	call malloc
 20875 0000EC52 50                      	push rax
 20876 0000EC53 BF08000000              	mov rdi, 8 * 1	; new rib
 20877 0000EC58 E8AC6A0000              	call malloc
 20878 0000EC5D 50                      	push rax
 20879 0000EC5E BF18000000              	mov rdi, 8 * 3	; extended env
 20880 0000EC63 E8A16A0000              	call malloc
 20881 0000EC68 488B7D10                	mov rdi, ENV
 20882 0000EC6C BE00000000              	mov rsi, 0
 20883 0000EC71 BA01000000              	mov rdx, 1
 20884                                  .L_lambda_simple_env_loop_6d67:	; ext_env[i + 1] <-- env[i]
 20885 0000EC76 4883FE02                	cmp rsi, 2
 20886 0000EC7A 7410                    	je .L_lambda_simple_env_end_6d67
 20887 0000EC7C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20888 0000EC80 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20889 0000EC84 48FFC6                  	inc rsi
 20890 0000EC87 48FFC2                  	inc rdx
 20891 0000EC8A EBEA                    	jmp .L_lambda_simple_env_loop_6d67
 20892                                  .L_lambda_simple_env_end_6d67:
 20893 0000EC8C 5B                      	pop rbx
 20894 0000EC8D BE00000000              	mov rsi, 0
 20895                                  .L_lambda_simple_params_loop_6d67:	; copy params
 20896 0000EC92 4883FE01                	cmp rsi, 1
 20897 0000EC96 740E                    	je .L_lambda_simple_params_end_6d67
 20898 0000EC98 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20899 0000EC9D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20900 0000ECA1 48FFC6                  	inc rsi
 20901 0000ECA4 EBEC                    	jmp .L_lambda_simple_params_loop_6d67
 20902                                  .L_lambda_simple_params_end_6d67:
 20903 0000ECA6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20904 0000ECA9 4889C3                  	mov rbx, rax
 20905 0000ECAC 58                      	pop rax
 20906 0000ECAD C60004                  	mov byte [rax], T_closure
 20907 0000ECB0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20908 0000ECB4 48C74009[C1EC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d67
 20909 0000ECBC E9AF040000              	jmp .L_lambda_simple_end_6d67
 20910                                  .L_lambda_simple_code_6d67:	; lambda-simple body
 20911 0000ECC1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20912 0000ECC7 740B                    	je .L_lambda_simple_arity_check_ok_6d67
 20913 0000ECC9 FF742410                	push qword [rsp + 8 * 2]
 20914 0000ECCD 6A01                    	push 1
 20915 0000ECCF E9EE690000              	jmp L_error_incorrect_arity_simple
 20916                                  .L_lambda_simple_arity_check_ok_6d67:
 20917 0000ECD4 C8000000                	enter 0, 0
 20918                                  	; preparing a tail-call
 20919 0000ECD8 48B8-                   	mov rax, L_constants + 1881
 20919 0000ECDA [5907000000000000] 
 20920 0000ECE2 50                      	push rax
 20921 0000ECE3 6A01                    	push 1	; arg count
 20922 0000ECE5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20923 0000ECEA E81A6A0000              	call malloc
 20924 0000ECEF 50                      	push rax
 20925 0000ECF0 BF08000000              	mov rdi, 8 * 1	; new rib
 20926 0000ECF5 E80F6A0000              	call malloc
 20927 0000ECFA 50                      	push rax
 20928 0000ECFB BF20000000              	mov rdi, 8 * 4	; extended env
 20929 0000ED00 E8046A0000              	call malloc
 20930 0000ED05 488B7D10                	mov rdi, ENV
 20931 0000ED09 BE00000000              	mov rsi, 0
 20932 0000ED0E BA01000000              	mov rdx, 1
 20933                                  .L_lambda_simple_env_loop_6d68:	; ext_env[i + 1] <-- env[i]
 20934 0000ED13 4883FE03                	cmp rsi, 3
 20935 0000ED17 7410                    	je .L_lambda_simple_env_end_6d68
 20936 0000ED19 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20937 0000ED1D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20938 0000ED21 48FFC6                  	inc rsi
 20939 0000ED24 48FFC2                  	inc rdx
 20940 0000ED27 EBEA                    	jmp .L_lambda_simple_env_loop_6d68
 20941                                  .L_lambda_simple_env_end_6d68:
 20942 0000ED29 5B                      	pop rbx
 20943 0000ED2A BE00000000              	mov rsi, 0
 20944                                  .L_lambda_simple_params_loop_6d68:	; copy params
 20945 0000ED2F 4883FE01                	cmp rsi, 1
 20946 0000ED33 740E                    	je .L_lambda_simple_params_end_6d68
 20947 0000ED35 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20948 0000ED3A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20949 0000ED3E 48FFC6                  	inc rsi
 20950 0000ED41 EBEC                    	jmp .L_lambda_simple_params_loop_6d68
 20951                                  .L_lambda_simple_params_end_6d68:
 20952 0000ED43 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20953 0000ED46 4889C3                  	mov rbx, rax
 20954 0000ED49 58                      	pop rax
 20955 0000ED4A C60004                  	mov byte [rax], T_closure
 20956 0000ED4D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20957 0000ED51 48C74009[5EED0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d68
 20958 0000ED59 E9C9030000              	jmp .L_lambda_simple_end_6d68
 20959                                  .L_lambda_simple_code_6d68:	; lambda-simple body
 20960 0000ED5E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20961 0000ED64 740B                    	je .L_lambda_simple_arity_check_ok_6d68
 20962 0000ED66 FF742410                	push qword [rsp + 8 * 2]
 20963 0000ED6A 6A01                    	push 1
 20964 0000ED6C E951690000              	jmp L_error_incorrect_arity_simple
 20965                                  .L_lambda_simple_arity_check_ok_6d68:
 20966 0000ED71 C8000000                	enter 0, 0
 20967                                  
 20968 0000ED75 BF08000000              	mov rdi, 8
 20969 0000ED7A E88A690000              	call malloc
 20970 0000ED7F 488B5D20                	mov rbx, PARAM(0)	; param run
 20971 0000ED83 488918                  	mov [rax], rbx	; box run
 20972 0000ED86 48894520                	mov PARAM(0), rax	;replace param run with box
 20973 0000ED8A 48B8-                   	mov rax, sob_void
 20973 0000ED8C [0000000000000000] 
 20974                                  
 20975 0000ED94 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20976 0000ED99 E86B690000              	call malloc
 20977 0000ED9E 50                      	push rax
 20978 0000ED9F BF08000000              	mov rdi, 8 * 1	; new rib
 20979 0000EDA4 E860690000              	call malloc
 20980 0000EDA9 50                      	push rax
 20981 0000EDAA BF28000000              	mov rdi, 8 * 5	; extended env
 20982 0000EDAF E855690000              	call malloc
 20983 0000EDB4 488B7D10                	mov rdi, ENV
 20984 0000EDB8 BE00000000              	mov rsi, 0
 20985 0000EDBD BA01000000              	mov rdx, 1
 20986                                  .L_lambda_simple_env_loop_6d69:	; ext_env[i + 1] <-- env[i]
 20987 0000EDC2 4883FE04                	cmp rsi, 4
 20988 0000EDC6 7410                    	je .L_lambda_simple_env_end_6d69
 20989 0000EDC8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20990 0000EDCC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20991 0000EDD0 48FFC6                  	inc rsi
 20992 0000EDD3 48FFC2                  	inc rdx
 20993 0000EDD6 EBEA                    	jmp .L_lambda_simple_env_loop_6d69
 20994                                  .L_lambda_simple_env_end_6d69:
 20995 0000EDD8 5B                      	pop rbx
 20996 0000EDD9 BE00000000              	mov rsi, 0
 20997                                  .L_lambda_simple_params_loop_6d69:	; copy params
 20998 0000EDDE 4883FE01                	cmp rsi, 1
 20999 0000EDE2 740E                    	je .L_lambda_simple_params_end_6d69
 21000 0000EDE4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21001 0000EDE9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21002 0000EDED 48FFC6                  	inc rsi
 21003 0000EDF0 EBEC                    	jmp .L_lambda_simple_params_loop_6d69
 21004                                  .L_lambda_simple_params_end_6d69:
 21005 0000EDF2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21006 0000EDF5 4889C3                  	mov rbx, rax
 21007 0000EDF8 58                      	pop rax
 21008 0000EDF9 C60004                  	mov byte [rax], T_closure
 21009 0000EDFC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21010 0000EE00 48C74009[0DEE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d69
 21011 0000EE08 E953010000              	jmp .L_lambda_simple_end_6d69
 21012                                  .L_lambda_simple_code_6d69:	; lambda-simple body
 21013 0000EE0D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21014 0000EE13 740B                    	je .L_lambda_simple_arity_check_ok_6d69
 21015 0000EE15 FF742410                	push qword [rsp + 8 * 2]
 21016 0000EE19 6A02                    	push 2
 21017 0000EE1B E9A2680000              	jmp L_error_incorrect_arity_simple
 21018                                  .L_lambda_simple_arity_check_ok_6d69:
 21019 0000EE20 C8000000                	enter 0, 0
 21020 0000EE24 488B4528                	mov rax, PARAM(1)	; param strs
 21021 0000EE28 50                      	push rax
 21022 0000EE29 6A01                    	push 1	; arg count
 21023 0000EE2B 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 21024 0000EE33 803805                  	cmp byte [rax], T_undefined
 21025 0000EE36 0F84A0670000            	je L_error_fvar_undefined
 21026 0000EE3C 803804                  	cmp byte [rax], T_closure
 21027 0000EE3F 0F851B680000            	jne L_error_non_closure
 21028 0000EE45 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21029 0000EE48 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21030 0000EE4B 483D[02000000]          	cmp rax, sob_boolean_false
 21031 0000EE51 0F8505010000            	jne .L_or_end_077b
 21032 0000EE57 488B4528                	mov rax, PARAM(1)	; param strs
 21033 0000EE5B 50                      	push rax
 21034 0000EE5C 6A01                    	push 1	; arg count
 21035 0000EE5E 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 21036 0000EE66 803805                  	cmp byte [rax], T_undefined
 21037 0000EE69 0F846D670000            	je L_error_fvar_undefined
 21038 0000EE6F 803804                  	cmp byte [rax], T_closure
 21039 0000EE72 0F85E8670000            	jne L_error_non_closure
 21040 0000EE78 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21041 0000EE7B FF5009                  	call SOB_CLOSURE_CODE(rax)
 21042 0000EE7E 50                      	push rax
 21043 0000EE7F 488B4520                	mov rax, PARAM(0)	; param str
 21044 0000EE83 50                      	push rax
 21045 0000EE84 6A02                    	push 2	; arg count
 21046 0000EE86 488B4510                	mov rax, ENV
 21047 0000EE8A 488B4008                	mov rax, qword [rax + 8 * 1]
 21048 0000EE8E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string=?
 21049 0000EE91 803804                  	cmp byte [rax], T_closure
 21050 0000EE94 0F85C6670000            	jne L_error_non_closure
 21051 0000EE9A FF7001                  	push SOB_CLOSURE_ENV(rax)
 21052 0000EE9D FF5009                  	call SOB_CLOSURE_CODE(rax)
 21053                                  
 21054 0000EEA0 483D[02000000]          	cmp rax, sob_boolean_false
 21055 0000EEA6 0F84A6000000            	je .L_if_else_7720
 21056                                  	; preparing a tail-call
 21057 0000EEAC 488B4528                	mov rax, PARAM(1)	; param strs
 21058 0000EEB0 50                      	push rax
 21059 0000EEB1 6A01                    	push 1	; arg count
 21060 0000EEB3 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 21061 0000EEBB 803805                  	cmp byte [rax], T_undefined
 21062 0000EEBE 0F8418670000            	je L_error_fvar_undefined
 21063 0000EEC4 803804                  	cmp byte [rax], T_closure
 21064 0000EEC7 0F8593670000            	jne L_error_non_closure
 21065 0000EECD FF7001                  	push SOB_CLOSURE_ENV(rax)
 21066 0000EED0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21067 0000EED3 50                      	push rax
 21068 0000EED4 488B4528                	mov rax, PARAM(1)	; param strs
 21069 0000EED8 50                      	push rax
 21070 0000EED9 6A01                    	push 1	; arg count
 21071 0000EEDB 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 21072 0000EEE3 803805                  	cmp byte [rax], T_undefined
 21073 0000EEE6 0F84F0660000            	je L_error_fvar_undefined
 21074 0000EEEC 803804                  	cmp byte [rax], T_closure
 21075 0000EEEF 0F856B670000            	jne L_error_non_closure
 21076 0000EEF5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21077 0000EEF8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21078 0000EEFB 50                      	push rax
 21079 0000EEFC 6A02                    	push 2	; arg count
 21080 0000EEFE 488B4510                	mov rax, ENV
 21081 0000EF02 488B00                  	mov rax, qword [rax + 8 * 0]
 21082 0000EF05 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21083 0000EF08 488B00                  	mov rax, qword [rax]
 21084 0000EF0B 803804                  	cmp byte [rax], T_closure
 21085 0000EF0E 0F854C670000            	jne L_error_non_closure
 21086 0000EF14 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21087                                  
 21088                                  	; recycling the current frame
 21089 0000EF17 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21090 0000EF1A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21091 0000EF1D B906000000              	mov rcx, 2 + 4
 21092 0000EF22 488B5D18                	mov rbx, COUNT
 21093 0000EF26 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21094 0000EF2B 488D55F8                	lea rdx, [rbp - 8 * 1]
 21095                                  .L_tc_recycle_frame_loop_8f5d:
 21096 0000EF2F 4883F900                	cmp rcx, 0
 21097 0000EF33 7413                    	je .L_tc_recycle_frame_done_8f5d
 21098 0000EF35 488B32                  	mov rsi, qword [rdx]
 21099 0000EF38 488933                  	mov qword [rbx], rsi
 21100 0000EF3B 48FFC9                  	dec rcx
 21101 0000EF3E 4883EB08                	sub rbx, 8 * 1
 21102 0000EF42 4883EA08                	sub rdx, 8 * 1
 21103 0000EF46 EBE7                    	jmp .L_tc_recycle_frame_loop_8f5d
 21104                                  .L_tc_recycle_frame_done_8f5d:
 21105 0000EF48 488D6308                	lea rsp, [rbx + 8 * 1]
 21106 0000EF4C 5D                      	pop rbp	; the proc will restore it!
 21107 0000EF4D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21108                                  
 21109 0000EF50 EB0A                    	jmp .L_if_end_7720
 21110                                  
 21111                                  	.L_if_else_7720:
 21112 0000EF52 48B8-                   	mov rax, L_constants + 2
 21112 0000EF54 [0200000000000000] 
 21113                                  
 21114                                  	.L_if_end_7720:
 21115                                  .L_or_end_077b:
 21116 0000EF5C C9                      	leave
 21117 0000EF5D C22000                  	ret AND_KILL_FRAME(2)
 21118                                  .L_lambda_simple_end_6d69:	; new closure is in rax
 21119                                  
 21120 0000EF60 50                      	push rax
 21121 0000EF61 488B4520                	mov rax, PARAM(0)	; param run
 21122                                  
 21123 0000EF65 8F00                    	pop qword[rax]
 21124 0000EF67 48B8-                   	mov rax, sob_void
 21124 0000EF69 [0000000000000000] 
 21125                                  
 21126 0000EF71 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21127 0000EF76 E88E670000              	call malloc
 21128 0000EF7B 50                      	push rax
 21129 0000EF7C BF08000000              	mov rdi, 8 * 1	; new rib
 21130 0000EF81 E883670000              	call malloc
 21131 0000EF86 50                      	push rax
 21132 0000EF87 BF28000000              	mov rdi, 8 * 5	; extended env
 21133 0000EF8C E878670000              	call malloc
 21134 0000EF91 488B7D10                	mov rdi, ENV
 21135 0000EF95 BE00000000              	mov rsi, 0
 21136 0000EF9A BA01000000              	mov rdx, 1
 21137                                  .L_lambda_opt_env_loop_0f64:	; ext_env[i + 1] <-- env[i]
 21138 0000EF9F 4883FE04                	cmp rsi, 4
 21139 0000EFA3 7410                    	je .L_lambda_opt_env_end_0f64
 21140 0000EFA5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21141 0000EFA9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21142 0000EFAD 48FFC6                  	inc rsi
 21143 0000EFB0 48FFC2                  	inc rdx
 21144 0000EFB3 EBEA                    	jmp .L_lambda_opt_env_loop_0f64
 21145                                  .L_lambda_opt_env_end_0f64:
 21146 0000EFB5 5B                      	pop rbx
 21147 0000EFB6 BE00000000              	mov rsi, 0
 21148                                  .L_lambda_opt_params_loop_0f64:	; copy params
 21149 0000EFBB 4883FE01                	cmp rsi, 1
 21150 0000EFBF 740E                    	je .L_lambda_opt_params_end_0f64
 21151 0000EFC1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21152 0000EFC6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21153 0000EFCA 48FFC6                  	inc rsi
 21154 0000EFCD EBEC                    	jmp .L_lambda_opt_params_loop_0f64
 21155                                  .L_lambda_opt_params_end_0f64:
 21156 0000EFCF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21157 0000EFD2 4889C3                  	mov rbx, rax
 21158 0000EFD5 58                      	pop rax
 21159 0000EFD6 C60004                  	mov byte [rax], T_closure
 21160 0000EFD9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21161 0000EFDD 48C74009[EAEF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f64
 21162 0000EFE5 E939010000              	jmp .L_lambda_opt_end_0f64
 21163                                  .L_lambda_opt_code_0f64:	; lambda-simple body
 21164 0000EFEA 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 21165 0000EFF0 740D                    	je .L_lambda_opt_arity_check_exact_0f64 ;	 if equal, go to exact arity
 21166 0000EFF2 7F42                    	jg .L_lambda_opt_arity_check_more_0f64 ;	 if greater than, go to arity more
 21167 0000EFF4 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 21168 0000EFF8 6A01                     	push 1
 21169 0000EFFA E9D7660000              	jmp L_error_incorrect_arity_opt
 21170                                  	.L_lambda_opt_arity_check_exact_0f64:
 21171 0000EFFF 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 21172 0000F004 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 21173 0000F009 4883EC08                	sub rsp, 8
 21174 0000F00D 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 21175                                  	.L_lambda_opt_exact_shifting_loop_0f64:
 21176 0000F011 488B5108                	mov rdx, [rcx + 8]
 21177 0000F015 488911                  	mov [rcx], rdx
 21178 0000F018 4883C108                	add rcx, 8
 21179 0000F01C 4839CB                  	cmp rbx, rcx
 21180 0000F01F 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f64
 21181                                  	.L_lambda_opt_exact_shifting_loop_end_0f64:
 21182 0000F021 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 21183 0000F028 4883C001                	add rax, 1 ; 	arg count += 1
 21184 0000F02C 4889442410              	mov qword [rsp + 8 * 2], rax
 21185 0000F031 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f64
 21186                                  	.L_lambda_opt_arity_check_more_0f64:
 21187 0000F036 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 21187 0000F038 [0100000000000000] 
 21188 0000F040 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 21189 0000F046 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f64
 21190                                  	.L_lambda_opt_stack_shrink_loop_0f64:
 21191 0000F048 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 21192 0000F04D E8B7660000              	call malloc ;	 allocated memory for the optional scheme list
 21193 0000F052 C60021                  	mov byte[rax], T_pair ;	 set type pair
 21194 0000F055 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 21195 0000F059 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 21196 0000F05C 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 21197 0000F061 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 21198 0000F066 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 21199 0000F06A 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 21200                                  	.L_lambda_opt_more_shifting_loop_0f64:
 21201 0000F06F 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 21202 0000F072 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 21203 0000F076 4883EB08                	sub rbx, 8 
 21204 0000F07A 4839DC                  	cmp rsp, rbx
 21205 0000F07D 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f64
 21206                                  	.L_lambda_opt_more_shifting_loop_end_0f64:
 21207 0000F07F 4883C408                	add rsp, 8 ;	 update rsp
 21208 0000F083 488B5C2410              	mov rbx, [rsp + 8 * 2]
 21209 0000F088 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 21210 0000F08C 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 21211 0000F091 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21212 0000F097 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f64
 21213                                  	.L_lambda_opt_stack_shrink_loop_exit_0f64:
 21214 0000F099 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 21215 0000F09E 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 21216 0000F0A3 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 21217 0000F0A8 E85C660000              	call malloc ;	 allocated memory for the optional scheme list
 21218 0000F0AD C60021                  	mov byte[rax], T_pair ;	 set type pair
 21219 0000F0B0 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 21220 0000F0B4 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 21221 0000F0B8 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 21222                                  	.L_lambda_opt_stack_adjusted_0f64:
 21223 0000F0BD C8000000                	enter 0, 0
 21224                                  	; preparing a tail-call
 21225 0000F0C1 488B4528                	mov rax, PARAM(1)	; param strs
 21226 0000F0C5 50                      	push rax
 21227 0000F0C6 488B4520                	mov rax, PARAM(0)	; param str
 21228 0000F0CA 50                      	push rax
 21229 0000F0CB 6A02                    	push 2	; arg count
 21230 0000F0CD 488B4510                	mov rax, ENV
 21231 0000F0D1 488B00                  	mov rax, qword [rax + 8 * 0]
 21232 0000F0D4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21233 0000F0D7 488B00                  	mov rax, qword [rax]
 21234 0000F0DA 803804                  	cmp byte [rax], T_closure
 21235 0000F0DD 0F857D650000            	jne L_error_non_closure
 21236 0000F0E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21237                                  
 21238                                  	; recycling the current frame
 21239 0000F0E6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21240 0000F0E9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21241 0000F0EC B906000000              	mov rcx, 2 + 4
 21242 0000F0F1 488B5D18                	mov rbx, COUNT
 21243 0000F0F5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21244 0000F0FA 488D55F8                	lea rdx, [rbp - 8 * 1]
 21245                                  .L_tc_recycle_frame_loop_8f5e:
 21246 0000F0FE 4883F900                	cmp rcx, 0
 21247 0000F102 7413                    	je .L_tc_recycle_frame_done_8f5e
 21248 0000F104 488B32                  	mov rsi, qword [rdx]
 21249 0000F107 488933                  	mov qword [rbx], rsi
 21250 0000F10A 48FFC9                  	dec rcx
 21251 0000F10D 4883EB08                	sub rbx, 8 * 1
 21252 0000F111 4883EA08                	sub rdx, 8 * 1
 21253 0000F115 EBE7                    	jmp .L_tc_recycle_frame_loop_8f5e
 21254                                  .L_tc_recycle_frame_done_8f5e:
 21255 0000F117 488D6308                	lea rsp, [rbx + 8 * 1]
 21256 0000F11B 5D                      	pop rbp	; the proc will restore it!
 21257 0000F11C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21258 0000F11F C9                      	leave
 21259 0000F120 C22000                  	ret AND_KILL_FRAME(2)
 21260                                  .L_lambda_opt_end_0f64:	; new closure is in rax
 21261 0000F123 C9                      	leave
 21262 0000F124 C21800                  	ret AND_KILL_FRAME(1)
 21263                                  .L_lambda_simple_end_6d68:	; new closure is in rax
 21264 0000F127 803804                  	cmp byte [rax], T_closure
 21265 0000F12A 0F8530650000            	jne L_error_non_closure
 21266 0000F130 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21267                                  
 21268                                  	; recycling the current frame
 21269 0000F133 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21270 0000F136 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21271 0000F139 B905000000              	mov rcx, 1 + 4
 21272 0000F13E 488B5D18                	mov rbx, COUNT
 21273 0000F142 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21274 0000F147 488D55F8                	lea rdx, [rbp - 8 * 1]
 21275                                  .L_tc_recycle_frame_loop_8f5f:
 21276 0000F14B 4883F900                	cmp rcx, 0
 21277 0000F14F 7413                    	je .L_tc_recycle_frame_done_8f5f
 21278 0000F151 488B32                  	mov rsi, qword [rdx]
 21279 0000F154 488933                  	mov qword [rbx], rsi
 21280 0000F157 48FFC9                  	dec rcx
 21281 0000F15A 4883EB08                	sub rbx, 8 * 1
 21282 0000F15E 4883EA08                	sub rdx, 8 * 1
 21283 0000F162 EBE7                    	jmp .L_tc_recycle_frame_loop_8f5f
 21284                                  .L_tc_recycle_frame_done_8f5f:
 21285 0000F164 488D6308                	lea rsp, [rbx + 8 * 1]
 21286 0000F168 5D                      	pop rbp	; the proc will restore it!
 21287 0000F169 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21288 0000F16C C9                      	leave
 21289 0000F16D C21800                  	ret AND_KILL_FRAME(1)
 21290                                  .L_lambda_simple_end_6d67:	; new closure is in rax
 21291 0000F170 803804                  	cmp byte [rax], T_closure
 21292 0000F173 0F85E7640000            	jne L_error_non_closure
 21293 0000F179 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21294                                  
 21295                                  	; recycling the current frame
 21296 0000F17C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21297 0000F17F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21298 0000F182 B905000000              	mov rcx, 1 + 4
 21299 0000F187 488B5D18                	mov rbx, COUNT
 21300 0000F18B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21301 0000F190 488D55F8                	lea rdx, [rbp - 8 * 1]
 21302                                  .L_tc_recycle_frame_loop_8f60:
 21303 0000F194 4883F900                	cmp rcx, 0
 21304 0000F198 7413                    	je .L_tc_recycle_frame_done_8f60
 21305 0000F19A 488B32                  	mov rsi, qword [rdx]
 21306 0000F19D 488933                  	mov qword [rbx], rsi
 21307 0000F1A0 48FFC9                  	dec rcx
 21308 0000F1A3 4883EB08                	sub rbx, 8 * 1
 21309 0000F1A7 4883EA08                	sub rdx, 8 * 1
 21310 0000F1AB EBE7                    	jmp .L_tc_recycle_frame_loop_8f60
 21311                                  .L_tc_recycle_frame_done_8f60:
 21312 0000F1AD 488D6308                	lea rsp, [rbx + 8 * 1]
 21313 0000F1B1 5D                      	pop rbp	; the proc will restore it!
 21314 0000F1B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21315 0000F1B5 C9                      	leave
 21316 0000F1B6 C21800                  	ret AND_KILL_FRAME(1)
 21317                                  .L_lambda_simple_end_6d63:	; new closure is in rax
 21318 0000F1B9 803804                  	cmp byte [rax], T_closure
 21319 0000F1BC 0F859E640000            	jne L_error_non_closure
 21320 0000F1C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21321                                  
 21322                                  	; recycling the current frame
 21323 0000F1C5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21324 0000F1C8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21325 0000F1CB B905000000              	mov rcx, 1 + 4
 21326 0000F1D0 488B5D18                	mov rbx, COUNT
 21327 0000F1D4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21328 0000F1D9 488D55F8                	lea rdx, [rbp - 8 * 1]
 21329                                  .L_tc_recycle_frame_loop_8f61:
 21330 0000F1DD 4883F900                	cmp rcx, 0
 21331 0000F1E1 7413                    	je .L_tc_recycle_frame_done_8f61
 21332 0000F1E3 488B32                  	mov rsi, qword [rdx]
 21333 0000F1E6 488933                  	mov qword [rbx], rsi
 21334 0000F1E9 48FFC9                  	dec rcx
 21335 0000F1EC 4883EB08                	sub rbx, 8 * 1
 21336 0000F1F0 4883EA08                	sub rdx, 8 * 1
 21337 0000F1F4 EBE7                    	jmp .L_tc_recycle_frame_loop_8f61
 21338                                  .L_tc_recycle_frame_done_8f61:
 21339 0000F1F6 488D6308                	lea rsp, [rbx + 8 * 1]
 21340 0000F1FA 5D                      	pop rbp	; the proc will restore it!
 21341 0000F1FB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21342 0000F1FE C9                      	leave
 21343 0000F1FF C21800                  	ret AND_KILL_FRAME(1)
 21344                                  .L_lambda_simple_end_6d62:	; new closure is in rax
 21345 0000F202 50                      	push rax
 21346 0000F203 6A01                    	push 1	; arg count
 21347 0000F205 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21348 0000F20A E8FA640000              	call malloc
 21349 0000F20F 50                      	push rax
 21350 0000F210 BF00000000              	mov rdi, 8 * 0	; new rib
 21351 0000F215 E8EF640000              	call malloc
 21352 0000F21A 50                      	push rax
 21353 0000F21B BF08000000              	mov rdi, 8 * 1	; extended env
 21354 0000F220 E8E4640000              	call malloc
 21355 0000F225 488B7D10                	mov rdi, ENV
 21356 0000F229 BE00000000              	mov rsi, 0
 21357 0000F22E BA01000000              	mov rdx, 1
 21358                                  .L_lambda_simple_env_loop_6d6a:	; ext_env[i + 1] <-- env[i]
 21359 0000F233 4883FE00                	cmp rsi, 0
 21360 0000F237 7410                    	je .L_lambda_simple_env_end_6d6a
 21361 0000F239 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21362 0000F23D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21363 0000F241 48FFC6                  	inc rsi
 21364 0000F244 48FFC2                  	inc rdx
 21365 0000F247 EBEA                    	jmp .L_lambda_simple_env_loop_6d6a
 21366                                  .L_lambda_simple_env_end_6d6a:
 21367 0000F249 5B                      	pop rbx
 21368 0000F24A BE00000000              	mov rsi, 0
 21369                                  .L_lambda_simple_params_loop_6d6a:	; copy params
 21370 0000F24F 4883FE00                	cmp rsi, 0
 21371 0000F253 740E                    	je .L_lambda_simple_params_end_6d6a
 21372 0000F255 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21373 0000F25A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21374 0000F25E 48FFC6                  	inc rsi
 21375 0000F261 EBEC                    	jmp .L_lambda_simple_params_loop_6d6a
 21376                                  .L_lambda_simple_params_end_6d6a:
 21377 0000F263 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21378 0000F266 4889C3                  	mov rbx, rax
 21379 0000F269 58                      	pop rax
 21380 0000F26A C60004                  	mov byte [rax], T_closure
 21381 0000F26D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21382 0000F271 48C74009[7EF20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d6a
 21383 0000F279 E99F000000              	jmp .L_lambda_simple_end_6d6a
 21384                                  .L_lambda_simple_code_6d6a:	; lambda-simple body
 21385 0000F27E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21386 0000F284 740B                    	je .L_lambda_simple_arity_check_ok_6d6a
 21387 0000F286 FF742410                	push qword [rsp + 8 * 2]
 21388 0000F28A 6A01                    	push 1
 21389 0000F28C E931640000              	jmp L_error_incorrect_arity_simple
 21390                                  .L_lambda_simple_arity_check_ok_6d6a:
 21391 0000F291 C8000000                	enter 0, 0
 21392 0000F295 488B0425[4A160000]      	mov rax, qword [free_var_130]	; free var char=?
 21393 0000F29D 803805                  	cmp byte [rax], T_undefined
 21394 0000F2A0 0F8436630000            	je L_error_fvar_undefined
 21395 0000F2A6 50                      	push rax
 21396 0000F2A7 6A01                    	push 1	; arg count
 21397 0000F2A9 488B4520                	mov rax, PARAM(0)	; param make-string=?
 21398 0000F2AD 803804                  	cmp byte [rax], T_closure
 21399 0000F2B0 0F85AA630000            	jne L_error_non_closure
 21400 0000F2B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21401 0000F2B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21402 0000F2BC 48890425[5A170000]      	mov qword [free_var_146], rax	; free var string=?
 21403 0000F2C4 803805                  	cmp byte [rax], T_undefined
 21404 0000F2C7 0F840F630000            	je L_error_fvar_undefined
 21405 0000F2CD 48B8-                   	mov rax, sob_void
 21405 0000F2CF [0000000000000000] 
 21406                                  
 21407 0000F2D7 488B0425[C1160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 21408 0000F2DF 803805                  	cmp byte [rax], T_undefined
 21409 0000F2E2 0F84F4620000            	je L_error_fvar_undefined
 21410 0000F2E8 50                      	push rax
 21411 0000F2E9 6A01                    	push 1	; arg count
 21412 0000F2EB 488B4520                	mov rax, PARAM(0)	; param make-string=?
 21413 0000F2EF 803804                  	cmp byte [rax], T_closure
 21414 0000F2F2 0F8568630000            	jne L_error_non_closure
 21415 0000F2F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21416 0000F2FB FF5009                  	call SOB_CLOSURE_CODE(rax)
 21417 0000F2FE 48890425[AF170000]      	mov qword [free_var_151], rax	; free var string-ci=?
 21418 0000F306 803805                  	cmp byte [rax], T_undefined
 21419 0000F309 0F84CD620000            	je L_error_fvar_undefined
 21420 0000F30F 48B8-                   	mov rax, sob_void
 21420 0000F311 [0000000000000000] 
 21421 0000F319 C9                      	leave
 21422 0000F31A C21800                  	ret AND_KILL_FRAME(1)
 21423                                  .L_lambda_simple_end_6d6a:	; new closure is in rax
 21424 0000F31D 803804                  	cmp byte [rax], T_closure
 21425 0000F320 0F853A630000            	jne L_error_non_closure
 21426 0000F326 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21427 0000F329 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21428                                  
 21429 0000F32C 4889C7                  	mov rdi, rax
 21430 0000F32F E8E7640000              	call print_sexpr_if_not_void
 21431                                  
 21432 0000F334 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21433 0000F339 E8CB630000              	call malloc
 21434 0000F33E 50                      	push rax
 21435 0000F33F BF00000000              	mov rdi, 8 * 0	; new rib
 21436 0000F344 E8C0630000              	call malloc
 21437 0000F349 50                      	push rax
 21438 0000F34A BF08000000              	mov rdi, 8 * 1	; extended env
 21439 0000F34F E8B5630000              	call malloc
 21440 0000F354 488B7D10                	mov rdi, ENV
 21441 0000F358 BE00000000              	mov rsi, 0
 21442 0000F35D BA01000000              	mov rdx, 1
 21443                                  .L_lambda_simple_env_loop_6d6b:	; ext_env[i + 1] <-- env[i]
 21444 0000F362 4883FE00                	cmp rsi, 0
 21445 0000F366 7410                    	je .L_lambda_simple_env_end_6d6b
 21446 0000F368 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21447 0000F36C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21448 0000F370 48FFC6                  	inc rsi
 21449 0000F373 48FFC2                  	inc rdx
 21450 0000F376 EBEA                    	jmp .L_lambda_simple_env_loop_6d6b
 21451                                  .L_lambda_simple_env_end_6d6b:
 21452 0000F378 5B                      	pop rbx
 21453 0000F379 BE00000000              	mov rsi, 0
 21454                                  .L_lambda_simple_params_loop_6d6b:	; copy params
 21455 0000F37E 4883FE00                	cmp rsi, 0
 21456 0000F382 740E                    	je .L_lambda_simple_params_end_6d6b
 21457 0000F384 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21458 0000F389 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21459 0000F38D 48FFC6                  	inc rsi
 21460 0000F390 EBEC                    	jmp .L_lambda_simple_params_loop_6d6b
 21461                                  .L_lambda_simple_params_end_6d6b:
 21462 0000F392 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21463 0000F395 4889C3                  	mov rbx, rax
 21464 0000F398 58                      	pop rax
 21465 0000F399 C60004                  	mov byte [rax], T_closure
 21466 0000F39C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21467 0000F3A0 48C74009[ADF30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d6b
 21468 0000F3A8 E907010000              	jmp .L_lambda_simple_end_6d6b
 21469                                  .L_lambda_simple_code_6d6b:	; lambda-simple body
 21470 0000F3AD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21471 0000F3B3 740B                    	je .L_lambda_simple_arity_check_ok_6d6b
 21472 0000F3B5 FF742410                	push qword [rsp + 8 * 2]
 21473 0000F3B9 6A01                    	push 1
 21474 0000F3BB E902630000              	jmp L_error_incorrect_arity_simple
 21475                                  .L_lambda_simple_arity_check_ok_6d6b:
 21476 0000F3C0 C8000000                	enter 0, 0
 21477 0000F3C4 488B4520                	mov rax, PARAM(0)	; param s
 21478 0000F3C8 50                      	push rax
 21479 0000F3C9 6A01                    	push 1	; arg count
 21480 0000F3CB 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 21481 0000F3D3 803805                  	cmp byte [rax], T_undefined
 21482 0000F3D6 0F8400620000            	je L_error_fvar_undefined
 21483 0000F3DC 803804                  	cmp byte [rax], T_closure
 21484 0000F3DF 0F857B620000            	jne L_error_non_closure
 21485 0000F3E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21486 0000F3E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21487                                  
 21488 0000F3EB 483D[02000000]          	cmp rax, sob_boolean_false
 21489 0000F3F1 740F                    	je .L_if_else_7721
 21490 0000F3F3 48B8-                   	mov rax, L_constants + 2023
 21490 0000F3F5 [E707000000000000] 
 21491                                  
 21492 0000F3FD E9AE000000              	jmp .L_if_end_7721
 21493                                  
 21494                                  	.L_if_else_7721:
 21495                                  	; preparing a tail-call
 21496 0000F402 488B4520                	mov rax, PARAM(0)	; param s
 21497 0000F406 50                      	push rax
 21498 0000F407 6A01                    	push 1	; arg count
 21499 0000F409 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 21500 0000F411 803805                  	cmp byte [rax], T_undefined
 21501 0000F414 0F84C2610000            	je L_error_fvar_undefined
 21502 0000F41A 803804                  	cmp byte [rax], T_closure
 21503 0000F41D 0F853D620000            	jne L_error_non_closure
 21504 0000F423 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21505 0000F426 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21506 0000F429 50                      	push rax
 21507 0000F42A 6A01                    	push 1	; arg count
 21508 0000F42C 488B0425[E2170000]      	mov rax, qword [free_var_154]	; free var length
 21509 0000F434 803805                  	cmp byte [rax], T_undefined
 21510 0000F437 0F849F610000            	je L_error_fvar_undefined
 21511 0000F43D 803804                  	cmp byte [rax], T_closure
 21512 0000F440 0F851A620000            	jne L_error_non_closure
 21513 0000F446 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21514 0000F449 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21515 0000F44C 50                      	push rax
 21516 0000F44D 48B8-                   	mov rax, L_constants + 2158
 21516 0000F44F [6E08000000000000] 
 21517 0000F457 50                      	push rax
 21518 0000F458 6A02                    	push 2	; arg count
 21519 0000F45A 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 21520 0000F462 803805                  	cmp byte [rax], T_undefined
 21521 0000F465 0F8471610000            	je L_error_fvar_undefined
 21522 0000F46B 803804                  	cmp byte [rax], T_closure
 21523 0000F46E 0F85EC610000            	jne L_error_non_closure
 21524 0000F474 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21525                                  
 21526                                  	; recycling the current frame
 21527 0000F477 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21528 0000F47A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21529 0000F47D B906000000              	mov rcx, 2 + 4
 21530 0000F482 488B5D18                	mov rbx, COUNT
 21531 0000F486 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21532 0000F48B 488D55F8                	lea rdx, [rbp - 8 * 1]
 21533                                  .L_tc_recycle_frame_loop_8f62:
 21534 0000F48F 4883F900                	cmp rcx, 0
 21535 0000F493 7413                    	je .L_tc_recycle_frame_done_8f62
 21536 0000F495 488B32                  	mov rsi, qword [rdx]
 21537 0000F498 488933                  	mov qword [rbx], rsi
 21538 0000F49B 48FFC9                  	dec rcx
 21539 0000F49E 4883EB08                	sub rbx, 8 * 1
 21540 0000F4A2 4883EA08                	sub rdx, 8 * 1
 21541 0000F4A6 EBE7                    	jmp .L_tc_recycle_frame_loop_8f62
 21542                                  .L_tc_recycle_frame_done_8f62:
 21543 0000F4A8 488D6308                	lea rsp, [rbx + 8 * 1]
 21544 0000F4AC 5D                      	pop rbp	; the proc will restore it!
 21545 0000F4AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21546                                  
 21547                                  	.L_if_end_7721:
 21548 0000F4B0 C9                      	leave
 21549 0000F4B1 C21800                  	ret AND_KILL_FRAME(1)
 21550                                  .L_lambda_simple_end_6d6b:	; new closure is in rax
 21551 0000F4B4 48890425[E2170000]      	mov qword [free_var_154], rax
 21552 0000F4BC 48B8-                   	mov rax, sob_void
 21552 0000F4BE [0000000000000000] 
 21553                                  
 21554 0000F4C6 4889C7                  	mov rdi, rax
 21555 0000F4C9 E84D630000              	call print_sexpr_if_not_void
 21556                                  
 21557 0000F4CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21558 0000F4D3 E831620000              	call malloc
 21559 0000F4D8 50                      	push rax
 21560 0000F4D9 BF00000000              	mov rdi, 8 * 0	; new rib
 21561 0000F4DE E826620000              	call malloc
 21562 0000F4E3 50                      	push rax
 21563 0000F4E4 BF08000000              	mov rdi, 8 * 1	; extended env
 21564 0000F4E9 E81B620000              	call malloc
 21565 0000F4EE 488B7D10                	mov rdi, ENV
 21566 0000F4F2 BE00000000              	mov rsi, 0
 21567 0000F4F7 BA01000000              	mov rdx, 1
 21568                                  .L_lambda_simple_env_loop_6d6c:	; ext_env[i + 1] <-- env[i]
 21569 0000F4FC 4883FE00                	cmp rsi, 0
 21570 0000F500 7410                    	je .L_lambda_simple_env_end_6d6c
 21571 0000F502 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21572 0000F506 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21573 0000F50A 48FFC6                  	inc rsi
 21574 0000F50D 48FFC2                  	inc rdx
 21575 0000F510 EBEA                    	jmp .L_lambda_simple_env_loop_6d6c
 21576                                  .L_lambda_simple_env_end_6d6c:
 21577 0000F512 5B                      	pop rbx
 21578 0000F513 BE00000000              	mov rsi, 0
 21579                                  .L_lambda_simple_params_loop_6d6c:	; copy params
 21580 0000F518 4883FE00                	cmp rsi, 0
 21581 0000F51C 740E                    	je .L_lambda_simple_params_end_6d6c
 21582 0000F51E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21583 0000F523 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21584 0000F527 48FFC6                  	inc rsi
 21585 0000F52A EBEC                    	jmp .L_lambda_simple_params_loop_6d6c
 21586                                  .L_lambda_simple_params_end_6d6c:
 21587 0000F52C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21588 0000F52F 4889C3                  	mov rbx, rax
 21589 0000F532 58                      	pop rax
 21590 0000F533 C60004                  	mov byte [rax], T_closure
 21591 0000F536 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21592 0000F53A 48C74009[47F50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d6c
 21593 0000F542 E90D010000              	jmp .L_lambda_simple_end_6d6c
 21594                                  .L_lambda_simple_code_6d6c:	; lambda-simple body
 21595 0000F547 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21596 0000F54D 740B                    	je .L_lambda_simple_arity_check_ok_6d6c
 21597 0000F54F FF742410                	push qword [rsp + 8 * 2]
 21598 0000F553 6A01                    	push 1
 21599 0000F555 E968610000              	jmp L_error_incorrect_arity_simple
 21600                                  .L_lambda_simple_arity_check_ok_6d6c:
 21601 0000F55A C8000000                	enter 0, 0
 21602 0000F55E 488B4520                	mov rax, PARAM(0)	; param e
 21603 0000F562 50                      	push rax
 21604 0000F563 6A01                    	push 1	; arg count
 21605 0000F565 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 21606 0000F56D 803805                  	cmp byte [rax], T_undefined
 21607 0000F570 0F8466600000            	je L_error_fvar_undefined
 21608 0000F576 803804                  	cmp byte [rax], T_closure
 21609 0000F579 0F85E1600000            	jne L_error_non_closure
 21610 0000F57F FF7001                  	push SOB_CLOSURE_ENV(rax)
 21611 0000F582 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21612 0000F585 483D[02000000]          	cmp rax, sob_boolean_false
 21613 0000F58B 0F85BF000000            	jne .L_or_end_077c
 21614 0000F591 488B4520                	mov rax, PARAM(0)	; param e
 21615 0000F595 50                      	push rax
 21616 0000F596 6A01                    	push 1	; arg count
 21617 0000F598 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
 21618 0000F5A0 803805                  	cmp byte [rax], T_undefined
 21619 0000F5A3 0F8433600000            	je L_error_fvar_undefined
 21620 0000F5A9 803804                  	cmp byte [rax], T_closure
 21621 0000F5AC 0F85AE600000            	jne L_error_non_closure
 21622 0000F5B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21623 0000F5B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21624                                  
 21625 0000F5B8 483D[02000000]          	cmp rax, sob_boolean_false
 21626 0000F5BE 0F8482000000            	je .L_if_else_7722
 21627                                  	; preparing a tail-call
 21628 0000F5C4 488B4520                	mov rax, PARAM(0)	; param e
 21629 0000F5C8 50                      	push rax
 21630 0000F5C9 6A01                    	push 1	; arg count
 21631 0000F5CB 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 21632 0000F5D3 803805                  	cmp byte [rax], T_undefined
 21633 0000F5D6 0F8400600000            	je L_error_fvar_undefined
 21634 0000F5DC 803804                  	cmp byte [rax], T_closure
 21635 0000F5DF 0F857B600000            	jne L_error_non_closure
 21636 0000F5E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21637 0000F5E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21638 0000F5EB 50                      	push rax
 21639 0000F5EC 6A01                    	push 1	; arg count
 21640 0000F5EE 488B0425[6E140000]      	mov rax, qword [free_var_102]	; free var list?
 21641 0000F5F6 803805                  	cmp byte [rax], T_undefined
 21642 0000F5F9 0F84DD5F0000            	je L_error_fvar_undefined
 21643 0000F5FF 803804                  	cmp byte [rax], T_closure
 21644 0000F602 0F8558600000            	jne L_error_non_closure
 21645 0000F608 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21646                                  
 21647                                  	; recycling the current frame
 21648 0000F60B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21649 0000F60E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21650 0000F611 B905000000              	mov rcx, 1 + 4
 21651 0000F616 488B5D18                	mov rbx, COUNT
 21652 0000F61A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21653 0000F61F 488D55F8                	lea rdx, [rbp - 8 * 1]
 21654                                  .L_tc_recycle_frame_loop_8f63:
 21655 0000F623 4883F900                	cmp rcx, 0
 21656 0000F627 7413                    	je .L_tc_recycle_frame_done_8f63
 21657 0000F629 488B32                  	mov rsi, qword [rdx]
 21658 0000F62C 488933                  	mov qword [rbx], rsi
 21659 0000F62F 48FFC9                  	dec rcx
 21660 0000F632 4883EB08                	sub rbx, 8 * 1
 21661 0000F636 4883EA08                	sub rdx, 8 * 1
 21662 0000F63A EBE7                    	jmp .L_tc_recycle_frame_loop_8f63
 21663                                  .L_tc_recycle_frame_done_8f63:
 21664 0000F63C 488D6308                	lea rsp, [rbx + 8 * 1]
 21665 0000F640 5D                      	pop rbp	; the proc will restore it!
 21666 0000F641 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21667                                  
 21668 0000F644 EB0A                    	jmp .L_if_end_7722
 21669                                  
 21670                                  	.L_if_else_7722:
 21671 0000F646 48B8-                   	mov rax, L_constants + 2
 21671 0000F648 [0200000000000000] 
 21672                                  
 21673                                  	.L_if_end_7722:
 21674                                  .L_or_end_077c:
 21675 0000F650 C9                      	leave
 21676 0000F651 C21800                  	ret AND_KILL_FRAME(1)
 21677                                  .L_lambda_simple_end_6d6c:	; new closure is in rax
 21678 0000F654 48890425[6E140000]      	mov qword [free_var_102], rax
 21679 0000F65C 48B8-                   	mov rax, sob_void
 21679 0000F65E [0000000000000000] 
 21680                                  
 21681 0000F666 4889C7                  	mov rdi, rax
 21682 0000F669 E8AD610000              	call print_sexpr_if_not_void
 21683                                  
 21684 0000F66E 488B0425[71110000]      	mov rax, qword [free_var_57]	; free var make-vector
 21685 0000F676 803805                  	cmp byte [rax], T_undefined
 21686 0000F679 0F845D5F0000            	je L_error_fvar_undefined
 21687 0000F67F 50                      	push rax
 21688 0000F680 6A01                    	push 1	; arg count
 21689 0000F682 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21690 0000F687 E87D600000              	call malloc
 21691 0000F68C 50                      	push rax
 21692 0000F68D BF00000000              	mov rdi, 8 * 0	; new rib
 21693 0000F692 E872600000              	call malloc
 21694 0000F697 50                      	push rax
 21695 0000F698 BF08000000              	mov rdi, 8 * 1	; extended env
 21696 0000F69D E867600000              	call malloc
 21697 0000F6A2 488B7D10                	mov rdi, ENV
 21698 0000F6A6 BE00000000              	mov rsi, 0
 21699 0000F6AB BA01000000              	mov rdx, 1
 21700                                  .L_lambda_simple_env_loop_6d6d:	; ext_env[i + 1] <-- env[i]
 21701 0000F6B0 4883FE00                	cmp rsi, 0
 21702 0000F6B4 7410                    	je .L_lambda_simple_env_end_6d6d
 21703 0000F6B6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21704 0000F6BA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21705 0000F6BE 48FFC6                  	inc rsi
 21706 0000F6C1 48FFC2                  	inc rdx
 21707 0000F6C4 EBEA                    	jmp .L_lambda_simple_env_loop_6d6d
 21708                                  .L_lambda_simple_env_end_6d6d:
 21709 0000F6C6 5B                      	pop rbx
 21710 0000F6C7 BE00000000              	mov rsi, 0
 21711                                  .L_lambda_simple_params_loop_6d6d:	; copy params
 21712 0000F6CC 4883FE00                	cmp rsi, 0
 21713 0000F6D0 740E                    	je .L_lambda_simple_params_end_6d6d
 21714 0000F6D2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21715 0000F6D7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21716 0000F6DB 48FFC6                  	inc rsi
 21717 0000F6DE EBEC                    	jmp .L_lambda_simple_params_loop_6d6d
 21718                                  .L_lambda_simple_params_end_6d6d:
 21719 0000F6E0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21720 0000F6E3 4889C3                  	mov rbx, rax
 21721 0000F6E6 58                      	pop rax
 21722 0000F6E7 C60004                  	mov byte [rax], T_closure
 21723 0000F6EA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21724 0000F6EE 48C74009[FBF60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d6d
 21725 0000F6F6 E9D9030000              	jmp .L_lambda_simple_end_6d6d
 21726                                  .L_lambda_simple_code_6d6d:	; lambda-simple body
 21727 0000F6FB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21728 0000F701 740B                    	je .L_lambda_simple_arity_check_ok_6d6d
 21729 0000F703 FF742410                	push qword [rsp + 8 * 2]
 21730 0000F707 6A01                    	push 1
 21731 0000F709 E9B45F0000              	jmp L_error_incorrect_arity_simple
 21732                                  .L_lambda_simple_arity_check_ok_6d6d:
 21733 0000F70E C8000000                	enter 0, 0
 21734 0000F712 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21735 0000F717 E8ED5F0000              	call malloc
 21736 0000F71C 50                      	push rax
 21737 0000F71D BF08000000              	mov rdi, 8 * 1	; new rib
 21738 0000F722 E8E25F0000              	call malloc
 21739 0000F727 50                      	push rax
 21740 0000F728 BF10000000              	mov rdi, 8 * 2	; extended env
 21741 0000F72D E8D75F0000              	call malloc
 21742 0000F732 488B7D10                	mov rdi, ENV
 21743 0000F736 BE00000000              	mov rsi, 0
 21744 0000F73B BA01000000              	mov rdx, 1
 21745                                  .L_lambda_opt_env_loop_0f65:	; ext_env[i + 1] <-- env[i]
 21746 0000F740 4883FE01                	cmp rsi, 1
 21747 0000F744 7410                    	je .L_lambda_opt_env_end_0f65
 21748 0000F746 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21749 0000F74A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21750 0000F74E 48FFC6                  	inc rsi
 21751 0000F751 48FFC2                  	inc rdx
 21752 0000F754 EBEA                    	jmp .L_lambda_opt_env_loop_0f65
 21753                                  .L_lambda_opt_env_end_0f65:
 21754 0000F756 5B                      	pop rbx
 21755 0000F757 BE00000000              	mov rsi, 0
 21756                                  .L_lambda_opt_params_loop_0f65:	; copy params
 21757 0000F75C 4883FE01                	cmp rsi, 1
 21758 0000F760 740E                    	je .L_lambda_opt_params_end_0f65
 21759 0000F762 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21760 0000F767 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21761 0000F76B 48FFC6                  	inc rsi
 21762 0000F76E EBEC                    	jmp .L_lambda_opt_params_loop_0f65
 21763                                  .L_lambda_opt_params_end_0f65:
 21764 0000F770 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21765 0000F773 4889C3                  	mov rbx, rax
 21766 0000F776 58                      	pop rax
 21767 0000F777 C60004                  	mov byte [rax], T_closure
 21768 0000F77A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21769 0000F77E 48C74009[8BF70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f65
 21770 0000F786 E945030000              	jmp .L_lambda_opt_end_0f65
 21771                                  .L_lambda_opt_code_0f65:	; lambda-simple body
 21772 0000F78B 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 21773 0000F791 740D                    	je .L_lambda_opt_arity_check_exact_0f65 ;	 if equal, go to exact arity
 21774 0000F793 7F42                    	jg .L_lambda_opt_arity_check_more_0f65 ;	 if greater than, go to arity more
 21775 0000F795 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 21776 0000F799 6A01                     	push 1
 21777 0000F79B E9365F0000              	jmp L_error_incorrect_arity_opt
 21778                                  	.L_lambda_opt_arity_check_exact_0f65:
 21779 0000F7A0 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 21780 0000F7A5 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 21781 0000F7AA 4883EC08                	sub rsp, 8
 21782 0000F7AE 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 21783                                  	.L_lambda_opt_exact_shifting_loop_0f65:
 21784 0000F7B2 488B5108                	mov rdx, [rcx + 8]
 21785 0000F7B6 488911                  	mov [rcx], rdx
 21786 0000F7B9 4883C108                	add rcx, 8
 21787 0000F7BD 4839CB                  	cmp rbx, rcx
 21788 0000F7C0 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f65
 21789                                  	.L_lambda_opt_exact_shifting_loop_end_0f65:
 21790 0000F7C2 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 21791 0000F7C9 4883C001                	add rax, 1 ; 	arg count += 1
 21792 0000F7CD 4889442410              	mov qword [rsp + 8 * 2], rax
 21793 0000F7D2 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f65
 21794                                  	.L_lambda_opt_arity_check_more_0f65:
 21795 0000F7D7 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 21795 0000F7D9 [0100000000000000] 
 21796 0000F7E1 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 21797 0000F7E7 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f65
 21798                                  	.L_lambda_opt_stack_shrink_loop_0f65:
 21799 0000F7E9 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 21800 0000F7EE E8165F0000              	call malloc ;	 allocated memory for the optional scheme list
 21801 0000F7F3 C60021                  	mov byte[rax], T_pair ;	 set type pair
 21802 0000F7F6 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 21803 0000F7FA 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 21804 0000F7FD 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 21805 0000F802 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 21806 0000F807 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 21807 0000F80B 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 21808                                  	.L_lambda_opt_more_shifting_loop_0f65:
 21809 0000F810 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 21810 0000F813 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 21811 0000F817 4883EB08                	sub rbx, 8 
 21812 0000F81B 4839DC                  	cmp rsp, rbx
 21813 0000F81E 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f65
 21814                                  	.L_lambda_opt_more_shifting_loop_end_0f65:
 21815 0000F820 4883C408                	add rsp, 8 ;	 update rsp
 21816 0000F824 488B5C2410              	mov rbx, [rsp + 8 * 2]
 21817 0000F829 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 21818 0000F82D 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 21819 0000F832 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21820 0000F838 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f65
 21821                                  	.L_lambda_opt_stack_shrink_loop_exit_0f65:
 21822 0000F83A 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 21823 0000F83F 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 21824 0000F844 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 21825 0000F849 E8BB5E0000              	call malloc ;	 allocated memory for the optional scheme list
 21826 0000F84E C60021                  	mov byte[rax], T_pair ;	 set type pair
 21827 0000F851 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 21828 0000F855 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 21829 0000F859 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 21830                                  	.L_lambda_opt_stack_adjusted_0f65:
 21831 0000F85E C8000000                	enter 0, 0
 21832                                  	; preparing a tail-call
 21833 0000F862 488B4528                	mov rax, PARAM(1)	; param xs
 21834 0000F866 50                      	push rax
 21835 0000F867 6A01                    	push 1	; arg count
 21836 0000F869 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 21837 0000F871 803805                  	cmp byte [rax], T_undefined
 21838 0000F874 0F84625D0000            	je L_error_fvar_undefined
 21839 0000F87A 803804                  	cmp byte [rax], T_closure
 21840 0000F87D 0F85DD5D0000            	jne L_error_non_closure
 21841 0000F883 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21842 0000F886 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21843                                  
 21844 0000F889 483D[02000000]          	cmp rax, sob_boolean_false
 21845 0000F88F 740F                    	je .L_if_else_7723
 21846 0000F891 48B8-                   	mov rax, L_constants + 0
 21846 0000F893 [0000000000000000] 
 21847                                  
 21848 0000F89B E9EE000000              	jmp .L_if_end_7723
 21849                                  
 21850                                  	.L_if_else_7723:
 21851 0000F8A0 488B4528                	mov rax, PARAM(1)	; param xs
 21852 0000F8A4 50                      	push rax
 21853 0000F8A5 6A01                    	push 1	; arg count
 21854 0000F8A7 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
 21855 0000F8AF 803805                  	cmp byte [rax], T_undefined
 21856 0000F8B2 0F84245D0000            	je L_error_fvar_undefined
 21857 0000F8B8 803804                  	cmp byte [rax], T_closure
 21858 0000F8BB 0F859F5D0000            	jne L_error_non_closure
 21859 0000F8C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21860 0000F8C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21861                                  
 21862 0000F8C7 483D[02000000]          	cmp rax, sob_boolean_false
 21863 0000F8CD 744C                    	je .L_if_else_7725
 21864 0000F8CF 488B4528                	mov rax, PARAM(1)	; param xs
 21865 0000F8D3 50                      	push rax
 21866 0000F8D4 6A01                    	push 1	; arg count
 21867 0000F8D6 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 21868 0000F8DE 803805                  	cmp byte [rax], T_undefined
 21869 0000F8E1 0F84F55C0000            	je L_error_fvar_undefined
 21870 0000F8E7 803804                  	cmp byte [rax], T_closure
 21871 0000F8EA 0F85705D0000            	jne L_error_non_closure
 21872 0000F8F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21873 0000F8F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21874 0000F8F6 50                      	push rax
 21875 0000F8F7 6A01                    	push 1	; arg count
 21876 0000F8F9 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 21877 0000F901 803805                  	cmp byte [rax], T_undefined
 21878 0000F904 0F84D25C0000            	je L_error_fvar_undefined
 21879 0000F90A 803804                  	cmp byte [rax], T_closure
 21880 0000F90D 0F854D5D0000            	jne L_error_non_closure
 21881 0000F913 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21882 0000F916 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21883                                  
 21884 0000F919 EB0A                    	jmp .L_if_end_7725
 21885                                  
 21886                                  	.L_if_else_7725:
 21887 0000F91B 48B8-                   	mov rax, L_constants + 2
 21887 0000F91D [0200000000000000] 
 21888                                  
 21889                                  	.L_if_end_7725:
 21890                                  
 21891 0000F925 483D[02000000]          	cmp rax, sob_boolean_false
 21892 0000F92B 7429                    	je .L_if_else_7724
 21893 0000F92D 488B4528                	mov rax, PARAM(1)	; param xs
 21894 0000F931 50                      	push rax
 21895 0000F932 6A01                    	push 1	; arg count
 21896 0000F934 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 21897 0000F93C 803805                  	cmp byte [rax], T_undefined
 21898 0000F93F 0F84975C0000            	je L_error_fvar_undefined
 21899 0000F945 803804                  	cmp byte [rax], T_closure
 21900 0000F948 0F85125D0000            	jne L_error_non_closure
 21901 0000F94E FF7001                  	push SOB_CLOSURE_ENV(rax)
 21902 0000F951 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21903                                  
 21904 0000F954 EB38                    	jmp .L_if_end_7724
 21905                                  
 21906                                  	.L_if_else_7724:
 21907 0000F956 48B8-                   	mov rax, L_constants + 2939
 21907 0000F958 [7B0B000000000000] 
 21908 0000F960 50                      	push rax
 21909 0000F961 48B8-                   	mov rax, L_constants + 2930
 21909 0000F963 [720B000000000000] 
 21910 0000F96B 50                      	push rax
 21911 0000F96C 6A02                    	push 2	; arg count
 21912 0000F96E 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 21913 0000F976 803805                  	cmp byte [rax], T_undefined
 21914 0000F979 0F845D5C0000            	je L_error_fvar_undefined
 21915 0000F97F 803804                  	cmp byte [rax], T_closure
 21916 0000F982 0F85D85C0000            	jne L_error_non_closure
 21917 0000F988 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21918 0000F98B FF5009                  	call SOB_CLOSURE_CODE(rax)
 21919                                  
 21920                                  	.L_if_end_7724:
 21921                                  
 21922                                  	.L_if_end_7723:
 21923 0000F98E 50                      	push rax
 21924 0000F98F 6A01                    	push 1	; arg count
 21925 0000F991 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21926 0000F996 E86E5D0000              	call malloc
 21927 0000F99B 50                      	push rax
 21928 0000F99C BF10000000              	mov rdi, 8 * 2	; new rib
 21929 0000F9A1 E8635D0000              	call malloc
 21930 0000F9A6 50                      	push rax
 21931 0000F9A7 BF18000000              	mov rdi, 8 * 3	; extended env
 21932 0000F9AC E8585D0000              	call malloc
 21933 0000F9B1 488B7D10                	mov rdi, ENV
 21934 0000F9B5 BE00000000              	mov rsi, 0
 21935 0000F9BA BA01000000              	mov rdx, 1
 21936                                  .L_lambda_simple_env_loop_6d6e:	; ext_env[i + 1] <-- env[i]
 21937 0000F9BF 4883FE02                	cmp rsi, 2
 21938 0000F9C3 7410                    	je .L_lambda_simple_env_end_6d6e
 21939 0000F9C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21940 0000F9C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21941 0000F9CD 48FFC6                  	inc rsi
 21942 0000F9D0 48FFC2                  	inc rdx
 21943 0000F9D3 EBEA                    	jmp .L_lambda_simple_env_loop_6d6e
 21944                                  .L_lambda_simple_env_end_6d6e:
 21945 0000F9D5 5B                      	pop rbx
 21946 0000F9D6 BE00000000              	mov rsi, 0
 21947                                  .L_lambda_simple_params_loop_6d6e:	; copy params
 21948 0000F9DB 4883FE02                	cmp rsi, 2
 21949 0000F9DF 740E                    	je .L_lambda_simple_params_end_6d6e
 21950 0000F9E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21951 0000F9E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21952 0000F9EA 48FFC6                  	inc rsi
 21953 0000F9ED EBEC                    	jmp .L_lambda_simple_params_loop_6d6e
 21954                                  .L_lambda_simple_params_end_6d6e:
 21955 0000F9EF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21956 0000F9F2 4889C3                  	mov rbx, rax
 21957 0000F9F5 58                      	pop rax
 21958 0000F9F6 C60004                  	mov byte [rax], T_closure
 21959 0000F9F9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21960 0000F9FD 48C74009[0AFA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d6e
 21961 0000FA05 E97D000000              	jmp .L_lambda_simple_end_6d6e
 21962                                  .L_lambda_simple_code_6d6e:	; lambda-simple body
 21963 0000FA0A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21964 0000FA10 740B                    	je .L_lambda_simple_arity_check_ok_6d6e
 21965 0000FA12 FF742410                	push qword [rsp + 8 * 2]
 21966 0000FA16 6A01                    	push 1
 21967 0000FA18 E9A55C0000              	jmp L_error_incorrect_arity_simple
 21968                                  .L_lambda_simple_arity_check_ok_6d6e:
 21969 0000FA1D C8000000                	enter 0, 0
 21970                                  	; preparing a tail-call
 21971 0000FA21 488B4520                	mov rax, PARAM(0)	; param x
 21972 0000FA25 50                      	push rax
 21973 0000FA26 488B4510                	mov rax, ENV
 21974 0000FA2A 488B00                  	mov rax, qword [rax + 8 * 0]
 21975 0000FA2D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 21976 0000FA30 50                      	push rax
 21977 0000FA31 6A02                    	push 2	; arg count
 21978 0000FA33 488B4510                	mov rax, ENV
 21979 0000FA37 488B4008                	mov rax, qword [rax + 8 * 1]
 21980 0000FA3B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
 21981 0000FA3E 803804                  	cmp byte [rax], T_closure
 21982 0000FA41 0F85195C0000            	jne L_error_non_closure
 21983 0000FA47 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21984                                  
 21985                                  	; recycling the current frame
 21986 0000FA4A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21987 0000FA4D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21988 0000FA50 B906000000              	mov rcx, 2 + 4
 21989 0000FA55 488B5D18                	mov rbx, COUNT
 21990 0000FA59 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21991 0000FA5E 488D55F8                	lea rdx, [rbp - 8 * 1]
 21992                                  .L_tc_recycle_frame_loop_8f64:
 21993 0000FA62 4883F900                	cmp rcx, 0
 21994 0000FA66 7413                    	je .L_tc_recycle_frame_done_8f64
 21995 0000FA68 488B32                  	mov rsi, qword [rdx]
 21996 0000FA6B 488933                  	mov qword [rbx], rsi
 21997 0000FA6E 48FFC9                  	dec rcx
 21998 0000FA71 4883EB08                	sub rbx, 8 * 1
 21999 0000FA75 4883EA08                	sub rdx, 8 * 1
 22000 0000FA79 EBE7                    	jmp .L_tc_recycle_frame_loop_8f64
 22001                                  .L_tc_recycle_frame_done_8f64:
 22002 0000FA7B 488D6308                	lea rsp, [rbx + 8 * 1]
 22003 0000FA7F 5D                      	pop rbp	; the proc will restore it!
 22004 0000FA80 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22005 0000FA83 C9                      	leave
 22006 0000FA84 C21800                  	ret AND_KILL_FRAME(1)
 22007                                  .L_lambda_simple_end_6d6e:	; new closure is in rax
 22008 0000FA87 803804                  	cmp byte [rax], T_closure
 22009 0000FA8A 0F85D05B0000            	jne L_error_non_closure
 22010 0000FA90 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22011                                  
 22012                                  	; recycling the current frame
 22013 0000FA93 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22014 0000FA96 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22015 0000FA99 B905000000              	mov rcx, 1 + 4
 22016 0000FA9E 488B5D18                	mov rbx, COUNT
 22017 0000FAA2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22018 0000FAA7 488D55F8                	lea rdx, [rbp - 8 * 1]
 22019                                  .L_tc_recycle_frame_loop_8f65:
 22020 0000FAAB 4883F900                	cmp rcx, 0
 22021 0000FAAF 7413                    	je .L_tc_recycle_frame_done_8f65
 22022 0000FAB1 488B32                  	mov rsi, qword [rdx]
 22023 0000FAB4 488933                  	mov qword [rbx], rsi
 22024 0000FAB7 48FFC9                  	dec rcx
 22025 0000FABA 4883EB08                	sub rbx, 8 * 1
 22026 0000FABE 4883EA08                	sub rdx, 8 * 1
 22027 0000FAC2 EBE7                    	jmp .L_tc_recycle_frame_loop_8f65
 22028                                  .L_tc_recycle_frame_done_8f65:
 22029 0000FAC4 488D6308                	lea rsp, [rbx + 8 * 1]
 22030 0000FAC8 5D                      	pop rbp	; the proc will restore it!
 22031 0000FAC9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22032 0000FACC C9                      	leave
 22033 0000FACD C22000                  	ret AND_KILL_FRAME(2)
 22034                                  .L_lambda_opt_end_0f65:	; new closure is in rax
 22035 0000FAD0 C9                      	leave
 22036 0000FAD1 C21800                  	ret AND_KILL_FRAME(1)
 22037                                  .L_lambda_simple_end_6d6d:	; new closure is in rax
 22038 0000FAD4 803804                  	cmp byte [rax], T_closure
 22039 0000FAD7 0F85835B0000            	jne L_error_non_closure
 22040 0000FADD FF7001                  	push SOB_CLOSURE_ENV(rax)
 22041 0000FAE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22042 0000FAE3 48890425[71110000]      	mov qword [free_var_57], rax
 22043 0000FAEB 48B8-                   	mov rax, sob_void
 22043 0000FAED [0000000000000000] 
 22044                                  
 22045 0000FAF5 4889C7                  	mov rdi, rax
 22046 0000FAF8 E81E5D0000              	call print_sexpr_if_not_void
 22047                                  
 22048 0000FAFD 488B0425[82110000]      	mov rax, qword [free_var_58]	; free var make-string
 22049 0000FB05 803805                  	cmp byte [rax], T_undefined
 22050 0000FB08 0F84CE5A0000            	je L_error_fvar_undefined
 22051 0000FB0E 50                      	push rax
 22052 0000FB0F 6A01                    	push 1	; arg count
 22053 0000FB11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22054 0000FB16 E8EE5B0000              	call malloc
 22055 0000FB1B 50                      	push rax
 22056 0000FB1C BF00000000              	mov rdi, 8 * 0	; new rib
 22057 0000FB21 E8E35B0000              	call malloc
 22058 0000FB26 50                      	push rax
 22059 0000FB27 BF08000000              	mov rdi, 8 * 1	; extended env
 22060 0000FB2C E8D85B0000              	call malloc
 22061 0000FB31 488B7D10                	mov rdi, ENV
 22062 0000FB35 BE00000000              	mov rsi, 0
 22063 0000FB3A BA01000000              	mov rdx, 1
 22064                                  .L_lambda_simple_env_loop_6d6f:	; ext_env[i + 1] <-- env[i]
 22065 0000FB3F 4883FE00                	cmp rsi, 0
 22066 0000FB43 7410                    	je .L_lambda_simple_env_end_6d6f
 22067 0000FB45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22068 0000FB49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22069 0000FB4D 48FFC6                  	inc rsi
 22070 0000FB50 48FFC2                  	inc rdx
 22071 0000FB53 EBEA                    	jmp .L_lambda_simple_env_loop_6d6f
 22072                                  .L_lambda_simple_env_end_6d6f:
 22073 0000FB55 5B                      	pop rbx
 22074 0000FB56 BE00000000              	mov rsi, 0
 22075                                  .L_lambda_simple_params_loop_6d6f:	; copy params
 22076 0000FB5B 4883FE00                	cmp rsi, 0
 22077 0000FB5F 740E                    	je .L_lambda_simple_params_end_6d6f
 22078 0000FB61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22079 0000FB66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22080 0000FB6A 48FFC6                  	inc rsi
 22081 0000FB6D EBEC                    	jmp .L_lambda_simple_params_loop_6d6f
 22082                                  .L_lambda_simple_params_end_6d6f:
 22083 0000FB6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22084 0000FB72 4889C3                  	mov rbx, rax
 22085 0000FB75 58                      	pop rax
 22086 0000FB76 C60004                  	mov byte [rax], T_closure
 22087 0000FB79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22088 0000FB7D 48C74009[8AFB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d6f
 22089 0000FB85 E9D9030000              	jmp .L_lambda_simple_end_6d6f
 22090                                  .L_lambda_simple_code_6d6f:	; lambda-simple body
 22091 0000FB8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22092 0000FB90 740B                    	je .L_lambda_simple_arity_check_ok_6d6f
 22093 0000FB92 FF742410                	push qword [rsp + 8 * 2]
 22094 0000FB96 6A01                    	push 1
 22095 0000FB98 E9255B0000              	jmp L_error_incorrect_arity_simple
 22096                                  .L_lambda_simple_arity_check_ok_6d6f:
 22097 0000FB9D C8000000                	enter 0, 0
 22098 0000FBA1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22099 0000FBA6 E85E5B0000              	call malloc
 22100 0000FBAB 50                      	push rax
 22101 0000FBAC BF08000000              	mov rdi, 8 * 1	; new rib
 22102 0000FBB1 E8535B0000              	call malloc
 22103 0000FBB6 50                      	push rax
 22104 0000FBB7 BF10000000              	mov rdi, 8 * 2	; extended env
 22105 0000FBBC E8485B0000              	call malloc
 22106 0000FBC1 488B7D10                	mov rdi, ENV
 22107 0000FBC5 BE00000000              	mov rsi, 0
 22108 0000FBCA BA01000000              	mov rdx, 1
 22109                                  .L_lambda_opt_env_loop_0f66:	; ext_env[i + 1] <-- env[i]
 22110 0000FBCF 4883FE01                	cmp rsi, 1
 22111 0000FBD3 7410                    	je .L_lambda_opt_env_end_0f66
 22112 0000FBD5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22113 0000FBD9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22114 0000FBDD 48FFC6                  	inc rsi
 22115 0000FBE0 48FFC2                  	inc rdx
 22116 0000FBE3 EBEA                    	jmp .L_lambda_opt_env_loop_0f66
 22117                                  .L_lambda_opt_env_end_0f66:
 22118 0000FBE5 5B                      	pop rbx
 22119 0000FBE6 BE00000000              	mov rsi, 0
 22120                                  .L_lambda_opt_params_loop_0f66:	; copy params
 22121 0000FBEB 4883FE01                	cmp rsi, 1
 22122 0000FBEF 740E                    	je .L_lambda_opt_params_end_0f66
 22123 0000FBF1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22124 0000FBF6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22125 0000FBFA 48FFC6                  	inc rsi
 22126 0000FBFD EBEC                    	jmp .L_lambda_opt_params_loop_0f66
 22127                                  .L_lambda_opt_params_end_0f66:
 22128 0000FBFF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22129 0000FC02 4889C3                  	mov rbx, rax
 22130 0000FC05 58                      	pop rax
 22131 0000FC06 C60004                  	mov byte [rax], T_closure
 22132 0000FC09 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22133 0000FC0D 48C74009[1AFC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f66
 22134 0000FC15 E945030000              	jmp .L_lambda_opt_end_0f66
 22135                                  .L_lambda_opt_code_0f66:	; lambda-simple body
 22136 0000FC1A 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 22137 0000FC20 740D                    	je .L_lambda_opt_arity_check_exact_0f66 ;	 if equal, go to exact arity
 22138 0000FC22 7F42                    	jg .L_lambda_opt_arity_check_more_0f66 ;	 if greater than, go to arity more
 22139 0000FC24 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 22140 0000FC28 6A01                     	push 1
 22141 0000FC2A E9A75A0000              	jmp L_error_incorrect_arity_opt
 22142                                  	.L_lambda_opt_arity_check_exact_0f66:
 22143 0000FC2F 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 22144 0000FC34 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 22145 0000FC39 4883EC08                	sub rsp, 8
 22146 0000FC3D 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 22147                                  	.L_lambda_opt_exact_shifting_loop_0f66:
 22148 0000FC41 488B5108                	mov rdx, [rcx + 8]
 22149 0000FC45 488911                  	mov [rcx], rdx
 22150 0000FC48 4883C108                	add rcx, 8
 22151 0000FC4C 4839CB                  	cmp rbx, rcx
 22152 0000FC4F 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f66
 22153                                  	.L_lambda_opt_exact_shifting_loop_end_0f66:
 22154 0000FC51 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 22155 0000FC58 4883C001                	add rax, 1 ; 	arg count += 1
 22156 0000FC5C 4889442410              	mov qword [rsp + 8 * 2], rax
 22157 0000FC61 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f66
 22158                                  	.L_lambda_opt_arity_check_more_0f66:
 22159 0000FC66 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 22159 0000FC68 [0100000000000000] 
 22160 0000FC70 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 22161 0000FC76 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f66
 22162                                  	.L_lambda_opt_stack_shrink_loop_0f66:
 22163 0000FC78 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 22164 0000FC7D E8875A0000              	call malloc ;	 allocated memory for the optional scheme list
 22165 0000FC82 C60021                  	mov byte[rax], T_pair ;	 set type pair
 22166 0000FC85 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 22167 0000FC89 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 22168 0000FC8C 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 22169 0000FC91 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 22170 0000FC96 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 22171 0000FC9A 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 22172                                  	.L_lambda_opt_more_shifting_loop_0f66:
 22173 0000FC9F 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 22174 0000FCA2 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 22175 0000FCA6 4883EB08                	sub rbx, 8 
 22176 0000FCAA 4839DC                  	cmp rsp, rbx
 22177 0000FCAD 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f66
 22178                                  	.L_lambda_opt_more_shifting_loop_end_0f66:
 22179 0000FCAF 4883C408                	add rsp, 8 ;	 update rsp
 22180 0000FCB3 488B5C2410              	mov rbx, [rsp + 8 * 2]
 22181 0000FCB8 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 22182 0000FCBC 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 22183 0000FCC1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22184 0000FCC7 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f66
 22185                                  	.L_lambda_opt_stack_shrink_loop_exit_0f66:
 22186 0000FCC9 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 22187 0000FCCE 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 22188 0000FCD3 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 22189 0000FCD8 E82C5A0000              	call malloc ;	 allocated memory for the optional scheme list
 22190 0000FCDD C60021                  	mov byte[rax], T_pair ;	 set type pair
 22191 0000FCE0 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 22192 0000FCE4 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 22193 0000FCE8 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 22194                                  	.L_lambda_opt_stack_adjusted_0f66:
 22195 0000FCED C8000000                	enter 0, 0
 22196                                  	; preparing a tail-call
 22197 0000FCF1 488B4528                	mov rax, PARAM(1)	; param chs
 22198 0000FCF5 50                      	push rax
 22199 0000FCF6 6A01                    	push 1	; arg count
 22200 0000FCF8 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 22201 0000FD00 803805                  	cmp byte [rax], T_undefined
 22202 0000FD03 0F84D3580000            	je L_error_fvar_undefined
 22203 0000FD09 803804                  	cmp byte [rax], T_closure
 22204 0000FD0C 0F854E590000            	jne L_error_non_closure
 22205 0000FD12 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22206 0000FD15 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22207                                  
 22208 0000FD18 483D[02000000]          	cmp rax, sob_boolean_false
 22209 0000FD1E 740F                    	je .L_if_else_7726
 22210 0000FD20 48B8-                   	mov rax, L_constants + 4
 22210 0000FD22 [0400000000000000] 
 22211                                  
 22212 0000FD2A E9EE000000              	jmp .L_if_end_7726
 22213                                  
 22214                                  	.L_if_else_7726:
 22215 0000FD2F 488B4528                	mov rax, PARAM(1)	; param chs
 22216 0000FD33 50                      	push rax
 22217 0000FD34 6A01                    	push 1	; arg count
 22218 0000FD36 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
 22219 0000FD3E 803805                  	cmp byte [rax], T_undefined
 22220 0000FD41 0F8495580000            	je L_error_fvar_undefined
 22221 0000FD47 803804                  	cmp byte [rax], T_closure
 22222 0000FD4A 0F8510590000            	jne L_error_non_closure
 22223 0000FD50 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22224 0000FD53 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22225                                  
 22226 0000FD56 483D[02000000]          	cmp rax, sob_boolean_false
 22227 0000FD5C 744C                    	je .L_if_else_7728
 22228 0000FD5E 488B4528                	mov rax, PARAM(1)	; param chs
 22229 0000FD62 50                      	push rax
 22230 0000FD63 6A01                    	push 1	; arg count
 22231 0000FD65 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 22232 0000FD6D 803805                  	cmp byte [rax], T_undefined
 22233 0000FD70 0F8466580000            	je L_error_fvar_undefined
 22234 0000FD76 803804                  	cmp byte [rax], T_closure
 22235 0000FD79 0F85E1580000            	jne L_error_non_closure
 22236 0000FD7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 22237 0000FD82 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22238 0000FD85 50                      	push rax
 22239 0000FD86 6A01                    	push 1	; arg count
 22240 0000FD88 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 22241 0000FD90 803805                  	cmp byte [rax], T_undefined
 22242 0000FD93 0F8443580000            	je L_error_fvar_undefined
 22243 0000FD99 803804                  	cmp byte [rax], T_closure
 22244 0000FD9C 0F85BE580000            	jne L_error_non_closure
 22245 0000FDA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22246 0000FDA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22247                                  
 22248 0000FDA8 EB0A                    	jmp .L_if_end_7728
 22249                                  
 22250                                  	.L_if_else_7728:
 22251 0000FDAA 48B8-                   	mov rax, L_constants + 2
 22251 0000FDAC [0200000000000000] 
 22252                                  
 22253                                  	.L_if_end_7728:
 22254                                  
 22255 0000FDB4 483D[02000000]          	cmp rax, sob_boolean_false
 22256 0000FDBA 7429                    	je .L_if_else_7727
 22257 0000FDBC 488B4528                	mov rax, PARAM(1)	; param chs
 22258 0000FDC0 50                      	push rax
 22259 0000FDC1 6A01                    	push 1	; arg count
 22260 0000FDC3 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 22261 0000FDCB 803805                  	cmp byte [rax], T_undefined
 22262 0000FDCE 0F8408580000            	je L_error_fvar_undefined
 22263 0000FDD4 803804                  	cmp byte [rax], T_closure
 22264 0000FDD7 0F8583580000            	jne L_error_non_closure
 22265 0000FDDD FF7001                  	push SOB_CLOSURE_ENV(rax)
 22266 0000FDE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22267                                  
 22268 0000FDE3 EB38                    	jmp .L_if_end_7727
 22269                                  
 22270                                  	.L_if_else_7727:
 22271 0000FDE5 48B8-                   	mov rax, L_constants + 3000
 22271 0000FDE7 [B80B000000000000] 
 22272 0000FDEF 50                      	push rax
 22273 0000FDF0 48B8-                   	mov rax, L_constants + 2991
 22273 0000FDF2 [AF0B000000000000] 
 22274 0000FDFA 50                      	push rax
 22275 0000FDFB 6A02                    	push 2	; arg count
 22276 0000FDFD 488B0425[72100000]      	mov rax, qword [free_var_42]	; free var error
 22277 0000FE05 803805                  	cmp byte [rax], T_undefined
 22278 0000FE08 0F84CE570000            	je L_error_fvar_undefined
 22279 0000FE0E 803804                  	cmp byte [rax], T_closure
 22280 0000FE11 0F8549580000            	jne L_error_non_closure
 22281 0000FE17 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22282 0000FE1A FF5009                  	call SOB_CLOSURE_CODE(rax)
 22283                                  
 22284                                  	.L_if_end_7727:
 22285                                  
 22286                                  	.L_if_end_7726:
 22287 0000FE1D 50                      	push rax
 22288 0000FE1E 6A01                    	push 1	; arg count
 22289 0000FE20 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22290 0000FE25 E8DF580000              	call malloc
 22291 0000FE2A 50                      	push rax
 22292 0000FE2B BF10000000              	mov rdi, 8 * 2	; new rib
 22293 0000FE30 E8D4580000              	call malloc
 22294 0000FE35 50                      	push rax
 22295 0000FE36 BF18000000              	mov rdi, 8 * 3	; extended env
 22296 0000FE3B E8C9580000              	call malloc
 22297 0000FE40 488B7D10                	mov rdi, ENV
 22298 0000FE44 BE00000000              	mov rsi, 0
 22299 0000FE49 BA01000000              	mov rdx, 1
 22300                                  .L_lambda_simple_env_loop_6d70:	; ext_env[i + 1] <-- env[i]
 22301 0000FE4E 4883FE02                	cmp rsi, 2
 22302 0000FE52 7410                    	je .L_lambda_simple_env_end_6d70
 22303 0000FE54 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22304 0000FE58 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22305 0000FE5C 48FFC6                  	inc rsi
 22306 0000FE5F 48FFC2                  	inc rdx
 22307 0000FE62 EBEA                    	jmp .L_lambda_simple_env_loop_6d70
 22308                                  .L_lambda_simple_env_end_6d70:
 22309 0000FE64 5B                      	pop rbx
 22310 0000FE65 BE00000000              	mov rsi, 0
 22311                                  .L_lambda_simple_params_loop_6d70:	; copy params
 22312 0000FE6A 4883FE02                	cmp rsi, 2
 22313 0000FE6E 740E                    	je .L_lambda_simple_params_end_6d70
 22314 0000FE70 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22315 0000FE75 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22316 0000FE79 48FFC6                  	inc rsi
 22317 0000FE7C EBEC                    	jmp .L_lambda_simple_params_loop_6d70
 22318                                  .L_lambda_simple_params_end_6d70:
 22319 0000FE7E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22320 0000FE81 4889C3                  	mov rbx, rax
 22321 0000FE84 58                      	pop rax
 22322 0000FE85 C60004                  	mov byte [rax], T_closure
 22323 0000FE88 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22324 0000FE8C 48C74009[99FE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d70
 22325 0000FE94 E97D000000              	jmp .L_lambda_simple_end_6d70
 22326                                  .L_lambda_simple_code_6d70:	; lambda-simple body
 22327 0000FE99 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22328 0000FE9F 740B                    	je .L_lambda_simple_arity_check_ok_6d70
 22329 0000FEA1 FF742410                	push qword [rsp + 8 * 2]
 22330 0000FEA5 6A01                    	push 1
 22331 0000FEA7 E916580000              	jmp L_error_incorrect_arity_simple
 22332                                  .L_lambda_simple_arity_check_ok_6d70:
 22333 0000FEAC C8000000                	enter 0, 0
 22334                                  	; preparing a tail-call
 22335 0000FEB0 488B4520                	mov rax, PARAM(0)	; param ch
 22336 0000FEB4 50                      	push rax
 22337 0000FEB5 488B4510                	mov rax, ENV
 22338 0000FEB9 488B00                  	mov rax, qword [rax + 8 * 0]
 22339 0000FEBC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 22340 0000FEBF 50                      	push rax
 22341 0000FEC0 6A02                    	push 2	; arg count
 22342 0000FEC2 488B4510                	mov rax, ENV
 22343 0000FEC6 488B4008                	mov rax, qword [rax + 8 * 1]
 22344 0000FECA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
 22345 0000FECD 803804                  	cmp byte [rax], T_closure
 22346 0000FED0 0F858A570000            	jne L_error_non_closure
 22347 0000FED6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22348                                  
 22349                                  	; recycling the current frame
 22350 0000FED9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22351 0000FEDC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22352 0000FEDF B906000000              	mov rcx, 2 + 4
 22353 0000FEE4 488B5D18                	mov rbx, COUNT
 22354 0000FEE8 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22355 0000FEED 488D55F8                	lea rdx, [rbp - 8 * 1]
 22356                                  .L_tc_recycle_frame_loop_8f66:
 22357 0000FEF1 4883F900                	cmp rcx, 0
 22358 0000FEF5 7413                    	je .L_tc_recycle_frame_done_8f66
 22359 0000FEF7 488B32                  	mov rsi, qword [rdx]
 22360 0000FEFA 488933                  	mov qword [rbx], rsi
 22361 0000FEFD 48FFC9                  	dec rcx
 22362 0000FF00 4883EB08                	sub rbx, 8 * 1
 22363 0000FF04 4883EA08                	sub rdx, 8 * 1
 22364 0000FF08 EBE7                    	jmp .L_tc_recycle_frame_loop_8f66
 22365                                  .L_tc_recycle_frame_done_8f66:
 22366 0000FF0A 488D6308                	lea rsp, [rbx + 8 * 1]
 22367 0000FF0E 5D                      	pop rbp	; the proc will restore it!
 22368 0000FF0F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22369 0000FF12 C9                      	leave
 22370 0000FF13 C21800                  	ret AND_KILL_FRAME(1)
 22371                                  .L_lambda_simple_end_6d70:	; new closure is in rax
 22372 0000FF16 803804                  	cmp byte [rax], T_closure
 22373 0000FF19 0F8541570000            	jne L_error_non_closure
 22374 0000FF1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 22375                                  
 22376                                  	; recycling the current frame
 22377 0000FF22 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22378 0000FF25 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22379 0000FF28 B905000000              	mov rcx, 1 + 4
 22380 0000FF2D 488B5D18                	mov rbx, COUNT
 22381 0000FF31 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22382 0000FF36 488D55F8                	lea rdx, [rbp - 8 * 1]
 22383                                  .L_tc_recycle_frame_loop_8f67:
 22384 0000FF3A 4883F900                	cmp rcx, 0
 22385 0000FF3E 7413                    	je .L_tc_recycle_frame_done_8f67
 22386 0000FF40 488B32                  	mov rsi, qword [rdx]
 22387 0000FF43 488933                  	mov qword [rbx], rsi
 22388 0000FF46 48FFC9                  	dec rcx
 22389 0000FF49 4883EB08                	sub rbx, 8 * 1
 22390 0000FF4D 4883EA08                	sub rdx, 8 * 1
 22391 0000FF51 EBE7                    	jmp .L_tc_recycle_frame_loop_8f67
 22392                                  .L_tc_recycle_frame_done_8f67:
 22393 0000FF53 488D6308                	lea rsp, [rbx + 8 * 1]
 22394 0000FF57 5D                      	pop rbp	; the proc will restore it!
 22395 0000FF58 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22396 0000FF5B C9                      	leave
 22397 0000FF5C C22000                  	ret AND_KILL_FRAME(2)
 22398                                  .L_lambda_opt_end_0f66:	; new closure is in rax
 22399 0000FF5F C9                      	leave
 22400 0000FF60 C21800                  	ret AND_KILL_FRAME(1)
 22401                                  .L_lambda_simple_end_6d6f:	; new closure is in rax
 22402 0000FF63 803804                  	cmp byte [rax], T_closure
 22403 0000FF66 0F85F4560000            	jne L_error_non_closure
 22404 0000FF6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22405 0000FF6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22406 0000FF72 48890425[82110000]      	mov qword [free_var_58], rax
 22407 0000FF7A 48B8-                   	mov rax, sob_void
 22407 0000FF7C [0000000000000000] 
 22408                                  
 22409 0000FF84 4889C7                  	mov rdi, rax
 22410 0000FF87 E88F580000              	call print_sexpr_if_not_void
 22411                                  
 22412 0000FF8C 48B8-                   	mov rax, L_constants + 1881
 22412 0000FF8E [5907000000000000] 
 22413 0000FF96 50                      	push rax
 22414 0000FF97 6A01                    	push 1	; arg count
 22415 0000FF99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22416 0000FF9E E866570000              	call malloc
 22417 0000FFA3 50                      	push rax
 22418 0000FFA4 BF00000000              	mov rdi, 8 * 0	; new rib
 22419 0000FFA9 E85B570000              	call malloc
 22420 0000FFAE 50                      	push rax
 22421 0000FFAF BF08000000              	mov rdi, 8 * 1	; extended env
 22422 0000FFB4 E850570000              	call malloc
 22423 0000FFB9 488B7D10                	mov rdi, ENV
 22424 0000FFBD BE00000000              	mov rsi, 0
 22425 0000FFC2 BA01000000              	mov rdx, 1
 22426                                  .L_lambda_simple_env_loop_6d71:	; ext_env[i + 1] <-- env[i]
 22427 0000FFC7 4883FE00                	cmp rsi, 0
 22428 0000FFCB 7410                    	je .L_lambda_simple_env_end_6d71
 22429 0000FFCD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22430 0000FFD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22431 0000FFD5 48FFC6                  	inc rsi
 22432 0000FFD8 48FFC2                  	inc rdx
 22433 0000FFDB EBEA                    	jmp .L_lambda_simple_env_loop_6d71
 22434                                  .L_lambda_simple_env_end_6d71:
 22435 0000FFDD 5B                      	pop rbx
 22436 0000FFDE BE00000000              	mov rsi, 0
 22437                                  .L_lambda_simple_params_loop_6d71:	; copy params
 22438 0000FFE3 4883FE00                	cmp rsi, 0
 22439 0000FFE7 740E                    	je .L_lambda_simple_params_end_6d71
 22440 0000FFE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22441 0000FFEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22442 0000FFF2 48FFC6                  	inc rsi
 22443 0000FFF5 EBEC                    	jmp .L_lambda_simple_params_loop_6d71
 22444                                  .L_lambda_simple_params_end_6d71:
 22445 0000FFF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22446 0000FFFA 4889C3                  	mov rbx, rax
 22447 0000FFFD 58                      	pop rax
 22448 0000FFFE C60004                  	mov byte [rax], T_closure
 22449 00010001 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22450 00010005 48C74009[12000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d71
 22451 0001000D E92D040000              	jmp .L_lambda_simple_end_6d71
 22452                                  .L_lambda_simple_code_6d71:	; lambda-simple body
 22453 00010012 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22454 00010018 740B                    	je .L_lambda_simple_arity_check_ok_6d71
 22455 0001001A FF742410                	push qword [rsp + 8 * 2]
 22456 0001001E 6A01                    	push 1
 22457 00010020 E99D560000              	jmp L_error_incorrect_arity_simple
 22458                                  .L_lambda_simple_arity_check_ok_6d71:
 22459 00010025 C8000000                	enter 0, 0
 22460                                  
 22461 00010029 BF08000000              	mov rdi, 8
 22462 0001002E E8D6560000              	call malloc
 22463 00010033 488B5D20                	mov rbx, PARAM(0)	; param run
 22464 00010037 488918                  	mov [rax], rbx	; box run
 22465 0001003A 48894520                	mov PARAM(0), rax	;replace param run with box
 22466 0001003E 48B8-                   	mov rax, sob_void
 22466 00010040 [0000000000000000] 
 22467                                  
 22468 00010048 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22469 0001004D E8B7560000              	call malloc
 22470 00010052 50                      	push rax
 22471 00010053 BF08000000              	mov rdi, 8 * 1	; new rib
 22472 00010058 E8AC560000              	call malloc
 22473 0001005D 50                      	push rax
 22474 0001005E BF10000000              	mov rdi, 8 * 2	; extended env
 22475 00010063 E8A1560000              	call malloc
 22476 00010068 488B7D10                	mov rdi, ENV
 22477 0001006C BE00000000              	mov rsi, 0
 22478 00010071 BA01000000              	mov rdx, 1
 22479                                  .L_lambda_simple_env_loop_6d72:	; ext_env[i + 1] <-- env[i]
 22480 00010076 4883FE01                	cmp rsi, 1
 22481 0001007A 7410                    	je .L_lambda_simple_env_end_6d72
 22482 0001007C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22483 00010080 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22484 00010084 48FFC6                  	inc rsi
 22485 00010087 48FFC2                  	inc rdx
 22486 0001008A EBEA                    	jmp .L_lambda_simple_env_loop_6d72
 22487                                  .L_lambda_simple_env_end_6d72:
 22488 0001008C 5B                      	pop rbx
 22489 0001008D BE00000000              	mov rsi, 0
 22490                                  .L_lambda_simple_params_loop_6d72:	; copy params
 22491 00010092 4883FE01                	cmp rsi, 1
 22492 00010096 740E                    	je .L_lambda_simple_params_end_6d72
 22493 00010098 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22494 0001009D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22495 000100A1 48FFC6                  	inc rsi
 22496 000100A4 EBEC                    	jmp .L_lambda_simple_params_loop_6d72
 22497                                  .L_lambda_simple_params_end_6d72:
 22498 000100A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22499 000100A9 4889C3                  	mov rbx, rax
 22500 000100AC 58                      	pop rax
 22501 000100AD C60004                  	mov byte [rax], T_closure
 22502 000100B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22503 000100B4 48C74009[C1000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d72
 22504 000100BC E971020000              	jmp .L_lambda_simple_end_6d72
 22505                                  .L_lambda_simple_code_6d72:	; lambda-simple body
 22506 000100C1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22507 000100C7 740B                    	je .L_lambda_simple_arity_check_ok_6d72
 22508 000100C9 FF742410                	push qword [rsp + 8 * 2]
 22509 000100CD 6A02                    	push 2
 22510 000100CF E9EE550000              	jmp L_error_incorrect_arity_simple
 22511                                  .L_lambda_simple_arity_check_ok_6d72:
 22512 000100D4 C8000000                	enter 0, 0
 22513 000100D8 488B4520                	mov rax, PARAM(0)	; param s
 22514 000100DC 50                      	push rax
 22515 000100DD 6A01                    	push 1	; arg count
 22516 000100DF 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 22517 000100E7 803805                  	cmp byte [rax], T_undefined
 22518 000100EA 0F84EC540000            	je L_error_fvar_undefined
 22519 000100F0 803804                  	cmp byte [rax], T_closure
 22520 000100F3 0F8567550000            	jne L_error_non_closure
 22521 000100F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22522 000100FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 22523                                  
 22524 000100FF 483D[02000000]          	cmp rax, sob_boolean_false
 22525 00010105 746D                    	je .L_if_else_7729
 22526                                  	; preparing a tail-call
 22527 00010107 48B8-                   	mov rax, L_constants + 0
 22527 00010109 [0000000000000000] 
 22528 00010111 50                      	push rax
 22529 00010112 488B4528                	mov rax, PARAM(1)	; param i
 22530 00010116 50                      	push rax
 22531 00010117 6A02                    	push 2	; arg count
 22532 00010119 488B0425[71110000]      	mov rax, qword [free_var_57]	; free var make-vector
 22533 00010121 803805                  	cmp byte [rax], T_undefined
 22534 00010124 0F84B2540000            	je L_error_fvar_undefined
 22535 0001012A 803804                  	cmp byte [rax], T_closure
 22536 0001012D 0F852D550000            	jne L_error_non_closure
 22537 00010133 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22538                                  
 22539                                  	; recycling the current frame
 22540 00010136 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22541 00010139 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22542 0001013C B906000000              	mov rcx, 2 + 4
 22543 00010141 488B5D18                	mov rbx, COUNT
 22544 00010145 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22545 0001014A 488D55F8                	lea rdx, [rbp - 8 * 1]
 22546                                  .L_tc_recycle_frame_loop_8f68:
 22547 0001014E 4883F900                	cmp rcx, 0
 22548 00010152 7413                    	je .L_tc_recycle_frame_done_8f68
 22549 00010154 488B32                  	mov rsi, qword [rdx]
 22550 00010157 488933                  	mov qword [rbx], rsi
 22551 0001015A 48FFC9                  	dec rcx
 22552 0001015D 4883EB08                	sub rbx, 8 * 1
 22553 00010161 4883EA08                	sub rdx, 8 * 1
 22554 00010165 EBE7                    	jmp .L_tc_recycle_frame_loop_8f68
 22555                                  .L_tc_recycle_frame_done_8f68:
 22556 00010167 488D6308                	lea rsp, [rbx + 8 * 1]
 22557 0001016B 5D                      	pop rbp	; the proc will restore it!
 22558 0001016C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22559                                  
 22560 0001016F E9BA010000              	jmp .L_if_end_7729
 22561                                  
 22562                                  	.L_if_else_7729:
 22563                                  	; preparing a tail-call
 22564 00010174 48B8-                   	mov rax, L_constants + 2158
 22564 00010176 [6E08000000000000] 
 22565 0001017E 50                      	push rax
 22566 0001017F 488B4528                	mov rax, PARAM(1)	; param i
 22567 00010183 50                      	push rax
 22568 00010184 6A02                    	push 2	; arg count
 22569 00010186 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 22570 0001018E 803805                  	cmp byte [rax], T_undefined
 22571 00010191 0F8445540000            	je L_error_fvar_undefined
 22572 00010197 803804                  	cmp byte [rax], T_closure
 22573 0001019A 0F85C0540000            	jne L_error_non_closure
 22574 000101A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22575 000101A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22576 000101A6 50                      	push rax
 22577 000101A7 488B4520                	mov rax, PARAM(0)	; param s
 22578 000101AB 50                      	push rax
 22579 000101AC 6A01                    	push 1	; arg count
 22580 000101AE 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 22581 000101B6 803805                  	cmp byte [rax], T_undefined
 22582 000101B9 0F841D540000            	je L_error_fvar_undefined
 22583 000101BF 803804                  	cmp byte [rax], T_closure
 22584 000101C2 0F8598540000            	jne L_error_non_closure
 22585 000101C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22586 000101CB FF5009                  	call SOB_CLOSURE_CODE(rax)
 22587 000101CE 50                      	push rax
 22588 000101CF 6A02                    	push 2	; arg count
 22589 000101D1 488B4510                	mov rax, ENV
 22590 000101D5 488B00                  	mov rax, qword [rax + 8 * 0]
 22591 000101D8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22592 000101DB 488B00                  	mov rax, qword [rax]
 22593 000101DE 803804                  	cmp byte [rax], T_closure
 22594 000101E1 0F8579540000            	jne L_error_non_closure
 22595 000101E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22596 000101EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 22597 000101ED 50                      	push rax
 22598 000101EE 6A01                    	push 1	; arg count
 22599 000101F0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22600 000101F5 E80F550000              	call malloc
 22601 000101FA 50                      	push rax
 22602 000101FB BF10000000              	mov rdi, 8 * 2	; new rib
 22603 00010200 E804550000              	call malloc
 22604 00010205 50                      	push rax
 22605 00010206 BF18000000              	mov rdi, 8 * 3	; extended env
 22606 0001020B E8F9540000              	call malloc
 22607 00010210 488B7D10                	mov rdi, ENV
 22608 00010214 BE00000000              	mov rsi, 0
 22609 00010219 BA01000000              	mov rdx, 1
 22610                                  .L_lambda_simple_env_loop_6d73:	; ext_env[i + 1] <-- env[i]
 22611 0001021E 4883FE02                	cmp rsi, 2
 22612 00010222 7410                    	je .L_lambda_simple_env_end_6d73
 22613 00010224 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22614 00010228 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22615 0001022C 48FFC6                  	inc rsi
 22616 0001022F 48FFC2                  	inc rdx
 22617 00010232 EBEA                    	jmp .L_lambda_simple_env_loop_6d73
 22618                                  .L_lambda_simple_env_end_6d73:
 22619 00010234 5B                      	pop rbx
 22620 00010235 BE00000000              	mov rsi, 0
 22621                                  .L_lambda_simple_params_loop_6d73:	; copy params
 22622 0001023A 4883FE02                	cmp rsi, 2
 22623 0001023E 740E                    	je .L_lambda_simple_params_end_6d73
 22624 00010240 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22625 00010245 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22626 00010249 48FFC6                  	inc rsi
 22627 0001024C EBEC                    	jmp .L_lambda_simple_params_loop_6d73
 22628                                  .L_lambda_simple_params_end_6d73:
 22629 0001024E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22630 00010251 4889C3                  	mov rbx, rax
 22631 00010254 58                      	pop rax
 22632 00010255 C60004                  	mov byte [rax], T_closure
 22633 00010258 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22634 0001025C 48C74009[69020100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d73
 22635 00010264 E980000000              	jmp .L_lambda_simple_end_6d73
 22636                                  .L_lambda_simple_code_6d73:	; lambda-simple body
 22637 00010269 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22638 0001026F 740B                    	je .L_lambda_simple_arity_check_ok_6d73
 22639 00010271 FF742410                	push qword [rsp + 8 * 2]
 22640 00010275 6A01                    	push 1
 22641 00010277 E946540000              	jmp L_error_incorrect_arity_simple
 22642                                  .L_lambda_simple_arity_check_ok_6d73:
 22643 0001027C C8000000                	enter 0, 0
 22644 00010280 488B4510                	mov rax, ENV
 22645 00010284 488B00                  	mov rax, qword [rax + 8 * 0]
 22646 00010287 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 22647 0001028A 50                      	push rax
 22648 0001028B 6A01                    	push 1	; arg count
 22649 0001028D 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 22650 00010295 803805                  	cmp byte [rax], T_undefined
 22651 00010298 0F843E530000            	je L_error_fvar_undefined
 22652 0001029E 803804                  	cmp byte [rax], T_closure
 22653 000102A1 0F85B9530000            	jne L_error_non_closure
 22654 000102A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22655 000102AA FF5009                  	call SOB_CLOSURE_CODE(rax)
 22656 000102AD 50                      	push rax
 22657 000102AE 488B4510                	mov rax, ENV
 22658 000102B2 488B00                  	mov rax, qword [rax + 8 * 0]
 22659 000102B5 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 22660 000102B9 50                      	push rax
 22661 000102BA 488B4520                	mov rax, PARAM(0)	; param v
 22662 000102BE 50                      	push rax
 22663 000102BF 6A03                    	push 3	; arg count
 22664 000102C1 488B0425[4F110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 22665 000102C9 803805                  	cmp byte [rax], T_undefined
 22666 000102CC 0F840A530000            	je L_error_fvar_undefined
 22667 000102D2 803804                  	cmp byte [rax], T_closure
 22668 000102D5 0F8585530000            	jne L_error_non_closure
 22669 000102DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 22670 000102DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 22671                                  
 22672 000102E1 488B4520                	mov rax, PARAM(0)	; param v
 22673 000102E5 C9                      	leave
 22674 000102E6 C21800                  	ret AND_KILL_FRAME(1)
 22675                                  .L_lambda_simple_end_6d73:	; new closure is in rax
 22676 000102E9 803804                  	cmp byte [rax], T_closure
 22677 000102EC 0F856E530000            	jne L_error_non_closure
 22678 000102F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22679                                  
 22680                                  	; recycling the current frame
 22681 000102F5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22682 000102F8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22683 000102FB B905000000              	mov rcx, 1 + 4
 22684 00010300 488B5D18                	mov rbx, COUNT
 22685 00010304 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22686 00010309 488D55F8                	lea rdx, [rbp - 8 * 1]
 22687                                  .L_tc_recycle_frame_loop_8f69:
 22688 0001030D 4883F900                	cmp rcx, 0
 22689 00010311 7413                    	je .L_tc_recycle_frame_done_8f69
 22690 00010313 488B32                  	mov rsi, qword [rdx]
 22691 00010316 488933                  	mov qword [rbx], rsi
 22692 00010319 48FFC9                  	dec rcx
 22693 0001031C 4883EB08                	sub rbx, 8 * 1
 22694 00010320 4883EA08                	sub rdx, 8 * 1
 22695 00010324 EBE7                    	jmp .L_tc_recycle_frame_loop_8f69
 22696                                  .L_tc_recycle_frame_done_8f69:
 22697 00010326 488D6308                	lea rsp, [rbx + 8 * 1]
 22698 0001032A 5D                      	pop rbp	; the proc will restore it!
 22699 0001032B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22700                                  
 22701                                  	.L_if_end_7729:
 22702 0001032E C9                      	leave
 22703 0001032F C22000                  	ret AND_KILL_FRAME(2)
 22704                                  .L_lambda_simple_end_6d72:	; new closure is in rax
 22705                                  
 22706 00010332 50                      	push rax
 22707 00010333 488B4520                	mov rax, PARAM(0)	; param run
 22708                                  
 22709 00010337 8F00                    	pop qword[rax]
 22710 00010339 48B8-                   	mov rax, sob_void
 22710 0001033B [0000000000000000] 
 22711                                  
 22712 00010343 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22713 00010348 E8BC530000              	call malloc
 22714 0001034D 50                      	push rax
 22715 0001034E BF08000000              	mov rdi, 8 * 1	; new rib
 22716 00010353 E8B1530000              	call malloc
 22717 00010358 50                      	push rax
 22718 00010359 BF10000000              	mov rdi, 8 * 2	; extended env
 22719 0001035E E8A6530000              	call malloc
 22720 00010363 488B7D10                	mov rdi, ENV
 22721 00010367 BE00000000              	mov rsi, 0
 22722 0001036C BA01000000              	mov rdx, 1
 22723                                  .L_lambda_simple_env_loop_6d74:	; ext_env[i + 1] <-- env[i]
 22724 00010371 4883FE01                	cmp rsi, 1
 22725 00010375 7410                    	je .L_lambda_simple_env_end_6d74
 22726 00010377 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22727 0001037B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22728 0001037F 48FFC6                  	inc rsi
 22729 00010382 48FFC2                  	inc rdx
 22730 00010385 EBEA                    	jmp .L_lambda_simple_env_loop_6d74
 22731                                  .L_lambda_simple_env_end_6d74:
 22732 00010387 5B                      	pop rbx
 22733 00010388 BE00000000              	mov rsi, 0
 22734                                  .L_lambda_simple_params_loop_6d74:	; copy params
 22735 0001038D 4883FE01                	cmp rsi, 1
 22736 00010391 740E                    	je .L_lambda_simple_params_end_6d74
 22737 00010393 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22738 00010398 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22739 0001039C 48FFC6                  	inc rsi
 22740 0001039F EBEC                    	jmp .L_lambda_simple_params_loop_6d74
 22741                                  .L_lambda_simple_params_end_6d74:
 22742 000103A1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22743 000103A4 4889C3                  	mov rbx, rax
 22744 000103A7 58                      	pop rax
 22745 000103A8 C60004                  	mov byte [rax], T_closure
 22746 000103AB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22747 000103AF 48C74009[BC030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d74
 22748 000103B7 E97F000000              	jmp .L_lambda_simple_end_6d74
 22749                                  .L_lambda_simple_code_6d74:	; lambda-simple body
 22750 000103BC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22751 000103C2 740B                    	je .L_lambda_simple_arity_check_ok_6d74
 22752 000103C4 FF742410                	push qword [rsp + 8 * 2]
 22753 000103C8 6A01                    	push 1
 22754 000103CA E9F3520000              	jmp L_error_incorrect_arity_simple
 22755                                  .L_lambda_simple_arity_check_ok_6d74:
 22756 000103CF C8000000                	enter 0, 0
 22757                                  	; preparing a tail-call
 22758 000103D3 48B8-                   	mov rax, L_constants + 2023
 22758 000103D5 [E707000000000000] 
 22759 000103DD 50                      	push rax
 22760 000103DE 488B4520                	mov rax, PARAM(0)	; param s
 22761 000103E2 50                      	push rax
 22762 000103E3 6A02                    	push 2	; arg count
 22763 000103E5 488B4510                	mov rax, ENV
 22764 000103E9 488B00                  	mov rax, qword [rax + 8 * 0]
 22765 000103EC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22766 000103EF 488B00                  	mov rax, qword [rax]
 22767 000103F2 803804                  	cmp byte [rax], T_closure
 22768 000103F5 0F8565520000            	jne L_error_non_closure
 22769 000103FB FF7001                  	push SOB_CLOSURE_ENV(rax)
 22770                                  
 22771                                  	; recycling the current frame
 22772 000103FE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22773 00010401 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22774 00010404 B906000000              	mov rcx, 2 + 4
 22775 00010409 488B5D18                	mov rbx, COUNT
 22776 0001040D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22777 00010412 488D55F8                	lea rdx, [rbp - 8 * 1]
 22778                                  .L_tc_recycle_frame_loop_8f6a:
 22779 00010416 4883F900                	cmp rcx, 0
 22780 0001041A 7413                    	je .L_tc_recycle_frame_done_8f6a
 22781 0001041C 488B32                  	mov rsi, qword [rdx]
 22782 0001041F 488933                  	mov qword [rbx], rsi
 22783 00010422 48FFC9                  	dec rcx
 22784 00010425 4883EB08                	sub rbx, 8 * 1
 22785 00010429 4883EA08                	sub rdx, 8 * 1
 22786 0001042D EBE7                    	jmp .L_tc_recycle_frame_loop_8f6a
 22787                                  .L_tc_recycle_frame_done_8f6a:
 22788 0001042F 488D6308                	lea rsp, [rbx + 8 * 1]
 22789 00010433 5D                      	pop rbp	; the proc will restore it!
 22790 00010434 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22791 00010437 C9                      	leave
 22792 00010438 C21800                  	ret AND_KILL_FRAME(1)
 22793                                  .L_lambda_simple_end_6d74:	; new closure is in rax
 22794 0001043B C9                      	leave
 22795 0001043C C21800                  	ret AND_KILL_FRAME(1)
 22796                                  .L_lambda_simple_end_6d71:	; new closure is in rax
 22797 0001043F 803804                  	cmp byte [rax], T_closure
 22798 00010442 0F8518520000            	jne L_error_non_closure
 22799 00010448 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22800 0001044B FF5009                  	call SOB_CLOSURE_CODE(rax)
 22801 0001044E 48890425[F3170000]      	mov qword [free_var_155], rax
 22802 00010456 48B8-                   	mov rax, sob_void
 22802 00010458 [0000000000000000] 
 22803                                  
 22804 00010460 4889C7                  	mov rdi, rax
 22805 00010463 E8B3530000              	call print_sexpr_if_not_void
 22806                                  
 22807 00010468 48B8-                   	mov rax, L_constants + 1881
 22807 0001046A [5907000000000000] 
 22808 00010472 50                      	push rax
 22809 00010473 6A01                    	push 1	; arg count
 22810 00010475 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22811 0001047A E88A520000              	call malloc
 22812 0001047F 50                      	push rax
 22813 00010480 BF00000000              	mov rdi, 8 * 0	; new rib
 22814 00010485 E87F520000              	call malloc
 22815 0001048A 50                      	push rax
 22816 0001048B BF08000000              	mov rdi, 8 * 1	; extended env
 22817 00010490 E874520000              	call malloc
 22818 00010495 488B7D10                	mov rdi, ENV
 22819 00010499 BE00000000              	mov rsi, 0
 22820 0001049E BA01000000              	mov rdx, 1
 22821                                  .L_lambda_simple_env_loop_6d75:	; ext_env[i + 1] <-- env[i]
 22822 000104A3 4883FE00                	cmp rsi, 0
 22823 000104A7 7410                    	je .L_lambda_simple_env_end_6d75
 22824 000104A9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22825 000104AD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22826 000104B1 48FFC6                  	inc rsi
 22827 000104B4 48FFC2                  	inc rdx
 22828 000104B7 EBEA                    	jmp .L_lambda_simple_env_loop_6d75
 22829                                  .L_lambda_simple_env_end_6d75:
 22830 000104B9 5B                      	pop rbx
 22831 000104BA BE00000000              	mov rsi, 0
 22832                                  .L_lambda_simple_params_loop_6d75:	; copy params
 22833 000104BF 4883FE00                	cmp rsi, 0
 22834 000104C3 740E                    	je .L_lambda_simple_params_end_6d75
 22835 000104C5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22836 000104CA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22837 000104CE 48FFC6                  	inc rsi
 22838 000104D1 EBEC                    	jmp .L_lambda_simple_params_loop_6d75
 22839                                  .L_lambda_simple_params_end_6d75:
 22840 000104D3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22841 000104D6 4889C3                  	mov rbx, rax
 22842 000104D9 58                      	pop rax
 22843 000104DA C60004                  	mov byte [rax], T_closure
 22844 000104DD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22845 000104E1 48C74009[EE040100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d75
 22846 000104E9 E92D040000              	jmp .L_lambda_simple_end_6d75
 22847                                  .L_lambda_simple_code_6d75:	; lambda-simple body
 22848 000104EE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22849 000104F4 740B                    	je .L_lambda_simple_arity_check_ok_6d75
 22850 000104F6 FF742410                	push qword [rsp + 8 * 2]
 22851 000104FA 6A01                    	push 1
 22852 000104FC E9C1510000              	jmp L_error_incorrect_arity_simple
 22853                                  .L_lambda_simple_arity_check_ok_6d75:
 22854 00010501 C8000000                	enter 0, 0
 22855                                  
 22856 00010505 BF08000000              	mov rdi, 8
 22857 0001050A E8FA510000              	call malloc
 22858 0001050F 488B5D20                	mov rbx, PARAM(0)	; param run
 22859 00010513 488918                  	mov [rax], rbx	; box run
 22860 00010516 48894520                	mov PARAM(0), rax	;replace param run with box
 22861 0001051A 48B8-                   	mov rax, sob_void
 22861 0001051C [0000000000000000] 
 22862                                  
 22863 00010524 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22864 00010529 E8DB510000              	call malloc
 22865 0001052E 50                      	push rax
 22866 0001052F BF08000000              	mov rdi, 8 * 1	; new rib
 22867 00010534 E8D0510000              	call malloc
 22868 00010539 50                      	push rax
 22869 0001053A BF10000000              	mov rdi, 8 * 2	; extended env
 22870 0001053F E8C5510000              	call malloc
 22871 00010544 488B7D10                	mov rdi, ENV
 22872 00010548 BE00000000              	mov rsi, 0
 22873 0001054D BA01000000              	mov rdx, 1
 22874                                  .L_lambda_simple_env_loop_6d76:	; ext_env[i + 1] <-- env[i]
 22875 00010552 4883FE01                	cmp rsi, 1
 22876 00010556 7410                    	je .L_lambda_simple_env_end_6d76
 22877 00010558 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22878 0001055C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22879 00010560 48FFC6                  	inc rsi
 22880 00010563 48FFC2                  	inc rdx
 22881 00010566 EBEA                    	jmp .L_lambda_simple_env_loop_6d76
 22882                                  .L_lambda_simple_env_end_6d76:
 22883 00010568 5B                      	pop rbx
 22884 00010569 BE00000000              	mov rsi, 0
 22885                                  .L_lambda_simple_params_loop_6d76:	; copy params
 22886 0001056E 4883FE01                	cmp rsi, 1
 22887 00010572 740E                    	je .L_lambda_simple_params_end_6d76
 22888 00010574 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22889 00010579 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22890 0001057D 48FFC6                  	inc rsi
 22891 00010580 EBEC                    	jmp .L_lambda_simple_params_loop_6d76
 22892                                  .L_lambda_simple_params_end_6d76:
 22893 00010582 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22894 00010585 4889C3                  	mov rbx, rax
 22895 00010588 58                      	pop rax
 22896 00010589 C60004                  	mov byte [rax], T_closure
 22897 0001058C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22898 00010590 48C74009[9D050100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d76
 22899 00010598 E971020000              	jmp .L_lambda_simple_end_6d76
 22900                                  .L_lambda_simple_code_6d76:	; lambda-simple body
 22901 0001059D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22902 000105A3 740B                    	je .L_lambda_simple_arity_check_ok_6d76
 22903 000105A5 FF742410                	push qword [rsp + 8 * 2]
 22904 000105A9 6A02                    	push 2
 22905 000105AB E912510000              	jmp L_error_incorrect_arity_simple
 22906                                  .L_lambda_simple_arity_check_ok_6d76:
 22907 000105B0 C8000000                	enter 0, 0
 22908 000105B4 488B4520                	mov rax, PARAM(0)	; param s
 22909 000105B8 50                      	push rax
 22910 000105B9 6A01                    	push 1	; arg count
 22911 000105BB 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 22912 000105C3 803805                  	cmp byte [rax], T_undefined
 22913 000105C6 0F8410500000            	je L_error_fvar_undefined
 22914 000105CC 803804                  	cmp byte [rax], T_closure
 22915 000105CF 0F858B500000            	jne L_error_non_closure
 22916 000105D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22917 000105D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22918                                  
 22919 000105DB 483D[02000000]          	cmp rax, sob_boolean_false
 22920 000105E1 746D                    	je .L_if_else_772a
 22921                                  	; preparing a tail-call
 22922 000105E3 48B8-                   	mov rax, L_constants + 4
 22922 000105E5 [0400000000000000] 
 22923 000105ED 50                      	push rax
 22924 000105EE 488B4528                	mov rax, PARAM(1)	; param i
 22925 000105F2 50                      	push rax
 22926 000105F3 6A02                    	push 2	; arg count
 22927 000105F5 488B0425[82110000]      	mov rax, qword [free_var_58]	; free var make-string
 22928 000105FD 803805                  	cmp byte [rax], T_undefined
 22929 00010600 0F84D64F0000            	je L_error_fvar_undefined
 22930 00010606 803804                  	cmp byte [rax], T_closure
 22931 00010609 0F8551500000            	jne L_error_non_closure
 22932 0001060F FF7001                  	push SOB_CLOSURE_ENV(rax)
 22933                                  
 22934                                  	; recycling the current frame
 22935 00010612 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22936 00010615 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22937 00010618 B906000000              	mov rcx, 2 + 4
 22938 0001061D 488B5D18                	mov rbx, COUNT
 22939 00010621 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22940 00010626 488D55F8                	lea rdx, [rbp - 8 * 1]
 22941                                  .L_tc_recycle_frame_loop_8f6b:
 22942 0001062A 4883F900                	cmp rcx, 0
 22943 0001062E 7413                    	je .L_tc_recycle_frame_done_8f6b
 22944 00010630 488B32                  	mov rsi, qword [rdx]
 22945 00010633 488933                  	mov qword [rbx], rsi
 22946 00010636 48FFC9                  	dec rcx
 22947 00010639 4883EB08                	sub rbx, 8 * 1
 22948 0001063D 4883EA08                	sub rdx, 8 * 1
 22949 00010641 EBE7                    	jmp .L_tc_recycle_frame_loop_8f6b
 22950                                  .L_tc_recycle_frame_done_8f6b:
 22951 00010643 488D6308                	lea rsp, [rbx + 8 * 1]
 22952 00010647 5D                      	pop rbp	; the proc will restore it!
 22953 00010648 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22954                                  
 22955 0001064B E9BA010000              	jmp .L_if_end_772a
 22956                                  
 22957                                  	.L_if_else_772a:
 22958                                  	; preparing a tail-call
 22959 00010650 48B8-                   	mov rax, L_constants + 2158
 22959 00010652 [6E08000000000000] 
 22960 0001065A 50                      	push rax
 22961 0001065B 488B4528                	mov rax, PARAM(1)	; param i
 22962 0001065F 50                      	push rax
 22963 00010660 6A02                    	push 2	; arg count
 22964 00010662 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 22965 0001066A 803805                  	cmp byte [rax], T_undefined
 22966 0001066D 0F84694F0000            	je L_error_fvar_undefined
 22967 00010673 803804                  	cmp byte [rax], T_closure
 22968 00010676 0F85E44F0000            	jne L_error_non_closure
 22969 0001067C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22970 0001067F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22971 00010682 50                      	push rax
 22972 00010683 488B4520                	mov rax, PARAM(0)	; param s
 22973 00010687 50                      	push rax
 22974 00010688 6A01                    	push 1	; arg count
 22975 0001068A 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 22976 00010692 803805                  	cmp byte [rax], T_undefined
 22977 00010695 0F84414F0000            	je L_error_fvar_undefined
 22978 0001069B 803804                  	cmp byte [rax], T_closure
 22979 0001069E 0F85BC4F0000            	jne L_error_non_closure
 22980 000106A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22981 000106A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22982 000106AA 50                      	push rax
 22983 000106AB 6A02                    	push 2	; arg count
 22984 000106AD 488B4510                	mov rax, ENV
 22985 000106B1 488B00                  	mov rax, qword [rax + 8 * 0]
 22986 000106B4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22987 000106B7 488B00                  	mov rax, qword [rax]
 22988 000106BA 803804                  	cmp byte [rax], T_closure
 22989 000106BD 0F859D4F0000            	jne L_error_non_closure
 22990 000106C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22991 000106C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22992 000106C9 50                      	push rax
 22993 000106CA 6A01                    	push 1	; arg count
 22994 000106CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22995 000106D1 E833500000              	call malloc
 22996 000106D6 50                      	push rax
 22997 000106D7 BF10000000              	mov rdi, 8 * 2	; new rib
 22998 000106DC E828500000              	call malloc
 22999 000106E1 50                      	push rax
 23000 000106E2 BF18000000              	mov rdi, 8 * 3	; extended env
 23001 000106E7 E81D500000              	call malloc
 23002 000106EC 488B7D10                	mov rdi, ENV
 23003 000106F0 BE00000000              	mov rsi, 0
 23004 000106F5 BA01000000              	mov rdx, 1
 23005                                  .L_lambda_simple_env_loop_6d77:	; ext_env[i + 1] <-- env[i]
 23006 000106FA 4883FE02                	cmp rsi, 2
 23007 000106FE 7410                    	je .L_lambda_simple_env_end_6d77
 23008 00010700 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23009 00010704 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23010 00010708 48FFC6                  	inc rsi
 23011 0001070B 48FFC2                  	inc rdx
 23012 0001070E EBEA                    	jmp .L_lambda_simple_env_loop_6d77
 23013                                  .L_lambda_simple_env_end_6d77:
 23014 00010710 5B                      	pop rbx
 23015 00010711 BE00000000              	mov rsi, 0
 23016                                  .L_lambda_simple_params_loop_6d77:	; copy params
 23017 00010716 4883FE02                	cmp rsi, 2
 23018 0001071A 740E                    	je .L_lambda_simple_params_end_6d77
 23019 0001071C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23020 00010721 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23021 00010725 48FFC6                  	inc rsi
 23022 00010728 EBEC                    	jmp .L_lambda_simple_params_loop_6d77
 23023                                  .L_lambda_simple_params_end_6d77:
 23024 0001072A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23025 0001072D 4889C3                  	mov rbx, rax
 23026 00010730 58                      	pop rax
 23027 00010731 C60004                  	mov byte [rax], T_closure
 23028 00010734 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23029 00010738 48C74009[45070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d77
 23030 00010740 E980000000              	jmp .L_lambda_simple_end_6d77
 23031                                  .L_lambda_simple_code_6d77:	; lambda-simple body
 23032 00010745 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23033 0001074B 740B                    	je .L_lambda_simple_arity_check_ok_6d77
 23034 0001074D FF742410                	push qword [rsp + 8 * 2]
 23035 00010751 6A01                    	push 1
 23036 00010753 E96A4F0000              	jmp L_error_incorrect_arity_simple
 23037                                  .L_lambda_simple_arity_check_ok_6d77:
 23038 00010758 C8000000                	enter 0, 0
 23039 0001075C 488B4510                	mov rax, ENV
 23040 00010760 488B00                  	mov rax, qword [rax + 8 * 0]
 23041 00010763 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 23042 00010766 50                      	push rax
 23043 00010767 6A01                    	push 1	; arg count
 23044 00010769 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 23045 00010771 803805                  	cmp byte [rax], T_undefined
 23046 00010774 0F84624E0000            	je L_error_fvar_undefined
 23047 0001077A 803804                  	cmp byte [rax], T_closure
 23048 0001077D 0F85DD4E0000            	jne L_error_non_closure
 23049 00010783 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23050 00010786 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23051 00010789 50                      	push rax
 23052 0001078A 488B4510                	mov rax, ENV
 23053 0001078E 488B00                  	mov rax, qword [rax + 8 * 0]
 23054 00010791 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 23055 00010795 50                      	push rax
 23056 00010796 488B4520                	mov rax, PARAM(0)	; param str
 23057 0001079A 50                      	push rax
 23058 0001079B 6A03                    	push 3	; arg count
 23059 0001079D 488B0425[60110000]      	mov rax, qword [free_var_56]	; free var string-set!
 23060 000107A5 803805                  	cmp byte [rax], T_undefined
 23061 000107A8 0F842E4E0000            	je L_error_fvar_undefined
 23062 000107AE 803804                  	cmp byte [rax], T_closure
 23063 000107B1 0F85A94E0000            	jne L_error_non_closure
 23064 000107B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23065 000107BA FF5009                  	call SOB_CLOSURE_CODE(rax)
 23066                                  
 23067 000107BD 488B4520                	mov rax, PARAM(0)	; param str
 23068 000107C1 C9                      	leave
 23069 000107C2 C21800                  	ret AND_KILL_FRAME(1)
 23070                                  .L_lambda_simple_end_6d77:	; new closure is in rax
 23071 000107C5 803804                  	cmp byte [rax], T_closure
 23072 000107C8 0F85924E0000            	jne L_error_non_closure
 23073 000107CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 23074                                  
 23075                                  	; recycling the current frame
 23076 000107D1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23077 000107D4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23078 000107D7 B905000000              	mov rcx, 1 + 4
 23079 000107DC 488B5D18                	mov rbx, COUNT
 23080 000107E0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23081 000107E5 488D55F8                	lea rdx, [rbp - 8 * 1]
 23082                                  .L_tc_recycle_frame_loop_8f6c:
 23083 000107E9 4883F900                	cmp rcx, 0
 23084 000107ED 7413                    	je .L_tc_recycle_frame_done_8f6c
 23085 000107EF 488B32                  	mov rsi, qword [rdx]
 23086 000107F2 488933                  	mov qword [rbx], rsi
 23087 000107F5 48FFC9                  	dec rcx
 23088 000107F8 4883EB08                	sub rbx, 8 * 1
 23089 000107FC 4883EA08                	sub rdx, 8 * 1
 23090 00010800 EBE7                    	jmp .L_tc_recycle_frame_loop_8f6c
 23091                                  .L_tc_recycle_frame_done_8f6c:
 23092 00010802 488D6308                	lea rsp, [rbx + 8 * 1]
 23093 00010806 5D                      	pop rbp	; the proc will restore it!
 23094 00010807 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23095                                  
 23096                                  	.L_if_end_772a:
 23097 0001080A C9                      	leave
 23098 0001080B C22000                  	ret AND_KILL_FRAME(2)
 23099                                  .L_lambda_simple_end_6d76:	; new closure is in rax
 23100                                  
 23101 0001080E 50                      	push rax
 23102 0001080F 488B4520                	mov rax, PARAM(0)	; param run
 23103                                  
 23104 00010813 8F00                    	pop qword[rax]
 23105 00010815 48B8-                   	mov rax, sob_void
 23105 00010817 [0000000000000000] 
 23106                                  
 23107 0001081F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23108 00010824 E8E04E0000              	call malloc
 23109 00010829 50                      	push rax
 23110 0001082A BF08000000              	mov rdi, 8 * 1	; new rib
 23111 0001082F E8D54E0000              	call malloc
 23112 00010834 50                      	push rax
 23113 00010835 BF10000000              	mov rdi, 8 * 2	; extended env
 23114 0001083A E8CA4E0000              	call malloc
 23115 0001083F 488B7D10                	mov rdi, ENV
 23116 00010843 BE00000000              	mov rsi, 0
 23117 00010848 BA01000000              	mov rdx, 1
 23118                                  .L_lambda_simple_env_loop_6d78:	; ext_env[i + 1] <-- env[i]
 23119 0001084D 4883FE01                	cmp rsi, 1
 23120 00010851 7410                    	je .L_lambda_simple_env_end_6d78
 23121 00010853 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23122 00010857 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23123 0001085B 48FFC6                  	inc rsi
 23124 0001085E 48FFC2                  	inc rdx
 23125 00010861 EBEA                    	jmp .L_lambda_simple_env_loop_6d78
 23126                                  .L_lambda_simple_env_end_6d78:
 23127 00010863 5B                      	pop rbx
 23128 00010864 BE00000000              	mov rsi, 0
 23129                                  .L_lambda_simple_params_loop_6d78:	; copy params
 23130 00010869 4883FE01                	cmp rsi, 1
 23131 0001086D 740E                    	je .L_lambda_simple_params_end_6d78
 23132 0001086F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23133 00010874 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23134 00010878 48FFC6                  	inc rsi
 23135 0001087B EBEC                    	jmp .L_lambda_simple_params_loop_6d78
 23136                                  .L_lambda_simple_params_end_6d78:
 23137 0001087D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23138 00010880 4889C3                  	mov rbx, rax
 23139 00010883 58                      	pop rax
 23140 00010884 C60004                  	mov byte [rax], T_closure
 23141 00010887 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23142 0001088B 48C74009[98080100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d78
 23143 00010893 E97F000000              	jmp .L_lambda_simple_end_6d78
 23144                                  .L_lambda_simple_code_6d78:	; lambda-simple body
 23145 00010898 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23146 0001089E 740B                    	je .L_lambda_simple_arity_check_ok_6d78
 23147 000108A0 FF742410                	push qword [rsp + 8 * 2]
 23148 000108A4 6A01                    	push 1
 23149 000108A6 E9174E0000              	jmp L_error_incorrect_arity_simple
 23150                                  .L_lambda_simple_arity_check_ok_6d78:
 23151 000108AB C8000000                	enter 0, 0
 23152                                  	; preparing a tail-call
 23153 000108AF 48B8-                   	mov rax, L_constants + 2023
 23153 000108B1 [E707000000000000] 
 23154 000108B9 50                      	push rax
 23155 000108BA 488B4520                	mov rax, PARAM(0)	; param s
 23156 000108BE 50                      	push rax
 23157 000108BF 6A02                    	push 2	; arg count
 23158 000108C1 488B4510                	mov rax, ENV
 23159 000108C5 488B00                  	mov rax, qword [rax + 8 * 0]
 23160 000108C8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23161 000108CB 488B00                  	mov rax, qword [rax]
 23162 000108CE 803804                  	cmp byte [rax], T_closure
 23163 000108D1 0F85894D0000            	jne L_error_non_closure
 23164 000108D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23165                                  
 23166                                  	; recycling the current frame
 23167 000108DA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23168 000108DD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23169 000108E0 B906000000              	mov rcx, 2 + 4
 23170 000108E5 488B5D18                	mov rbx, COUNT
 23171 000108E9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23172 000108EE 488D55F8                	lea rdx, [rbp - 8 * 1]
 23173                                  .L_tc_recycle_frame_loop_8f6d:
 23174 000108F2 4883F900                	cmp rcx, 0
 23175 000108F6 7413                    	je .L_tc_recycle_frame_done_8f6d
 23176 000108F8 488B32                  	mov rsi, qword [rdx]
 23177 000108FB 488933                  	mov qword [rbx], rsi
 23178 000108FE 48FFC9                  	dec rcx
 23179 00010901 4883EB08                	sub rbx, 8 * 1
 23180 00010905 4883EA08                	sub rdx, 8 * 1
 23181 00010909 EBE7                    	jmp .L_tc_recycle_frame_loop_8f6d
 23182                                  .L_tc_recycle_frame_done_8f6d:
 23183 0001090B 488D6308                	lea rsp, [rbx + 8 * 1]
 23184 0001090F 5D                      	pop rbp	; the proc will restore it!
 23185 00010910 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23186 00010913 C9                      	leave
 23187 00010914 C21800                  	ret AND_KILL_FRAME(1)
 23188                                  .L_lambda_simple_end_6d78:	; new closure is in rax
 23189 00010917 C9                      	leave
 23190 00010918 C21800                  	ret AND_KILL_FRAME(1)
 23191                                  .L_lambda_simple_end_6d75:	; new closure is in rax
 23192 0001091B 803804                  	cmp byte [rax], T_closure
 23193 0001091E 0F853C4D0000            	jne L_error_non_closure
 23194 00010924 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23195 00010927 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23196 0001092A 48890425[16170000]      	mov qword [free_var_142], rax
 23197 00010932 48B8-                   	mov rax, sob_void
 23197 00010934 [0000000000000000] 
 23198                                  
 23199 0001093C 4889C7                  	mov rdi, rax
 23200 0001093F E8D74E0000              	call print_sexpr_if_not_void
 23201                                  
 23202 00010944 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23203 00010949 E8BB4D0000              	call malloc
 23204 0001094E 50                      	push rax
 23205 0001094F BF00000000              	mov rdi, 8 * 0	; new rib
 23206 00010954 E8B04D0000              	call malloc
 23207 00010959 50                      	push rax
 23208 0001095A BF08000000              	mov rdi, 8 * 1	; extended env
 23209 0001095F E8A54D0000              	call malloc
 23210 00010964 488B7D10                	mov rdi, ENV
 23211 00010968 BE00000000              	mov rsi, 0
 23212 0001096D BA01000000              	mov rdx, 1
 23213                                  .L_lambda_opt_env_loop_0f67:	; ext_env[i + 1] <-- env[i]
 23214 00010972 4883FE00                	cmp rsi, 0
 23215 00010976 7410                    	je .L_lambda_opt_env_end_0f67
 23216 00010978 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23217 0001097C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23218 00010980 48FFC6                  	inc rsi
 23219 00010983 48FFC2                  	inc rdx
 23220 00010986 EBEA                    	jmp .L_lambda_opt_env_loop_0f67
 23221                                  .L_lambda_opt_env_end_0f67:
 23222 00010988 5B                      	pop rbx
 23223 00010989 BE00000000              	mov rsi, 0
 23224                                  .L_lambda_opt_params_loop_0f67:	; copy params
 23225 0001098E 4883FE00                	cmp rsi, 0
 23226 00010992 740E                    	je .L_lambda_opt_params_end_0f67
 23227 00010994 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23228 00010999 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23229 0001099D 48FFC6                  	inc rsi
 23230 000109A0 EBEC                    	jmp .L_lambda_opt_params_loop_0f67
 23231                                  .L_lambda_opt_params_end_0f67:
 23232 000109A2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23233 000109A5 4889C3                  	mov rbx, rax
 23234 000109A8 58                      	pop rax
 23235 000109A9 C60004                  	mov byte [rax], T_closure
 23236 000109AC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23237 000109B0 48C74009[BD090100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f67
 23238 000109B8 E938010000              	jmp .L_lambda_opt_end_0f67
 23239                                  .L_lambda_opt_code_0f67:	; lambda-simple body
 23240 000109BD 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 23241 000109C3 740D                    	je .L_lambda_opt_arity_check_exact_0f67 ;	 if equal, go to exact arity
 23242 000109C5 7F42                    	jg .L_lambda_opt_arity_check_more_0f67 ;	 if greater than, go to arity more
 23243 000109C7 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 23244 000109CB 6A00                     	push 0
 23245 000109CD E9044D0000              	jmp L_error_incorrect_arity_opt
 23246                                  	.L_lambda_opt_arity_check_exact_0f67:
 23247 000109D2 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 23248 000109D7 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 23249 000109DC 4883EC08                	sub rsp, 8
 23250 000109E0 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 23251                                  	.L_lambda_opt_exact_shifting_loop_0f67:
 23252 000109E4 488B5108                	mov rdx, [rcx + 8]
 23253 000109E8 488911                  	mov [rcx], rdx
 23254 000109EB 4883C108                	add rcx, 8
 23255 000109EF 4839CB                  	cmp rbx, rcx
 23256 000109F2 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f67
 23257                                  	.L_lambda_opt_exact_shifting_loop_end_0f67:
 23258 000109F4 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 23259 000109FB 4883C001                	add rax, 1 ; 	arg count += 1
 23260 000109FF 4889442410              	mov qword [rsp + 8 * 2], rax
 23261 00010A04 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f67
 23262                                  	.L_lambda_opt_arity_check_more_0f67:
 23263 00010A09 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 23263 00010A0B [0100000000000000] 
 23264 00010A13 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 23265 00010A19 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f67
 23266                                  	.L_lambda_opt_stack_shrink_loop_0f67:
 23267 00010A1B BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 23268 00010A20 E8E44C0000              	call malloc ;	 allocated memory for the optional scheme list
 23269 00010A25 C60021                  	mov byte[rax], T_pair ;	 set type pair
 23270 00010A28 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 23271 00010A2C 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 23272 00010A2F 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 23273 00010A34 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 23274 00010A39 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 23275 00010A3D 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 23276                                  	.L_lambda_opt_more_shifting_loop_0f67:
 23277 00010A42 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 23278 00010A45 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 23279 00010A49 4883EB08                	sub rbx, 8 
 23280 00010A4D 4839DC                  	cmp rsp, rbx
 23281 00010A50 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f67
 23282                                  	.L_lambda_opt_more_shifting_loop_end_0f67:
 23283 00010A52 4883C408                	add rsp, 8 ;	 update rsp
 23284 00010A56 488B5C2410              	mov rbx, [rsp + 8 * 2]
 23285 00010A5B 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 23286 00010A5F 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 23287 00010A64 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23288 00010A6A 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f67
 23289                                  	.L_lambda_opt_stack_shrink_loop_exit_0f67:
 23290 00010A6C 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 23291 00010A71 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 23292 00010A76 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 23293 00010A7B E8894C0000              	call malloc ;	 allocated memory for the optional scheme list
 23294 00010A80 C60021                  	mov byte[rax], T_pair ;	 set type pair
 23295 00010A83 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 23296 00010A87 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 23297 00010A8B 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 23298                                  	.L_lambda_opt_stack_adjusted_0f67:
 23299 00010A90 C8000000                	enter 0, 0
 23300                                  	; preparing a tail-call
 23301 00010A94 488B4520                	mov rax, PARAM(0)	; param s
 23302 00010A98 50                      	push rax
 23303 00010A99 6A01                    	push 1	; arg count
 23304 00010A9B 488B0425[F3170000]      	mov rax, qword [free_var_155]	; free var list->vector
 23305 00010AA3 803805                  	cmp byte [rax], T_undefined
 23306 00010AA6 0F84304B0000            	je L_error_fvar_undefined
 23307 00010AAC 803804                  	cmp byte [rax], T_closure
 23308 00010AAF 0F85AB4B0000            	jne L_error_non_closure
 23309 00010AB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23310                                  
 23311                                  	; recycling the current frame
 23312 00010AB8 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23313 00010ABB FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23314 00010ABE B905000000              	mov rcx, 1 + 4
 23315 00010AC3 488B5D18                	mov rbx, COUNT
 23316 00010AC7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23317 00010ACC 488D55F8                	lea rdx, [rbp - 8 * 1]
 23318                                  .L_tc_recycle_frame_loop_8f6e:
 23319 00010AD0 4883F900                	cmp rcx, 0
 23320 00010AD4 7413                    	je .L_tc_recycle_frame_done_8f6e
 23321 00010AD6 488B32                  	mov rsi, qword [rdx]
 23322 00010AD9 488933                  	mov qword [rbx], rsi
 23323 00010ADC 48FFC9                  	dec rcx
 23324 00010ADF 4883EB08                	sub rbx, 8 * 1
 23325 00010AE3 4883EA08                	sub rdx, 8 * 1
 23326 00010AE7 EBE7                    	jmp .L_tc_recycle_frame_loop_8f6e
 23327                                  .L_tc_recycle_frame_done_8f6e:
 23328 00010AE9 488D6308                	lea rsp, [rbx + 8 * 1]
 23329 00010AED 5D                      	pop rbp	; the proc will restore it!
 23330 00010AEE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23331 00010AF1 C9                      	leave
 23332 00010AF2 C21800                  	ret AND_KILL_FRAME(1)
 23333                                  .L_lambda_opt_end_0f67:	; new closure is in rax
 23334 00010AF5 48890425[04180000]      	mov qword [free_var_156], rax
 23335 00010AFD 48B8-                   	mov rax, sob_void
 23335 00010AFF [0000000000000000] 
 23336                                  
 23337 00010B07 4889C7                  	mov rdi, rax
 23338 00010B0A E80C4D0000              	call print_sexpr_if_not_void
 23339                                  
 23340 00010B0F 48B8-                   	mov rax, L_constants + 1881
 23340 00010B11 [5907000000000000] 
 23341 00010B19 50                      	push rax
 23342 00010B1A 6A01                    	push 1	; arg count
 23343 00010B1C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23344 00010B21 E8E34B0000              	call malloc
 23345 00010B26 50                      	push rax
 23346 00010B27 BF00000000              	mov rdi, 8 * 0	; new rib
 23347 00010B2C E8D84B0000              	call malloc
 23348 00010B31 50                      	push rax
 23349 00010B32 BF08000000              	mov rdi, 8 * 1	; extended env
 23350 00010B37 E8CD4B0000              	call malloc
 23351 00010B3C 488B7D10                	mov rdi, ENV
 23352 00010B40 BE00000000              	mov rsi, 0
 23353 00010B45 BA01000000              	mov rdx, 1
 23354                                  .L_lambda_simple_env_loop_6d79:	; ext_env[i + 1] <-- env[i]
 23355 00010B4A 4883FE00                	cmp rsi, 0
 23356 00010B4E 7410                    	je .L_lambda_simple_env_end_6d79
 23357 00010B50 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23358 00010B54 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23359 00010B58 48FFC6                  	inc rsi
 23360 00010B5B 48FFC2                  	inc rdx
 23361 00010B5E EBEA                    	jmp .L_lambda_simple_env_loop_6d79
 23362                                  .L_lambda_simple_env_end_6d79:
 23363 00010B60 5B                      	pop rbx
 23364 00010B61 BE00000000              	mov rsi, 0
 23365                                  .L_lambda_simple_params_loop_6d79:	; copy params
 23366 00010B66 4883FE00                	cmp rsi, 0
 23367 00010B6A 740E                    	je .L_lambda_simple_params_end_6d79
 23368 00010B6C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23369 00010B71 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23370 00010B75 48FFC6                  	inc rsi
 23371 00010B78 EBEC                    	jmp .L_lambda_simple_params_loop_6d79
 23372                                  .L_lambda_simple_params_end_6d79:
 23373 00010B7A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23374 00010B7D 4889C3                  	mov rbx, rax
 23375 00010B80 58                      	pop rax
 23376 00010B81 C60004                  	mov byte [rax], T_closure
 23377 00010B84 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23378 00010B88 48C74009[950B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d79
 23379 00010B90 E924030000              	jmp .L_lambda_simple_end_6d79
 23380                                  .L_lambda_simple_code_6d79:	; lambda-simple body
 23381 00010B95 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23382 00010B9B 740B                    	je .L_lambda_simple_arity_check_ok_6d79
 23383 00010B9D FF742410                	push qword [rsp + 8 * 2]
 23384 00010BA1 6A01                    	push 1
 23385 00010BA3 E91A4B0000              	jmp L_error_incorrect_arity_simple
 23386                                  .L_lambda_simple_arity_check_ok_6d79:
 23387 00010BA8 C8000000                	enter 0, 0
 23388                                  
 23389 00010BAC BF08000000              	mov rdi, 8
 23390 00010BB1 E8534B0000              	call malloc
 23391 00010BB6 488B5D20                	mov rbx, PARAM(0)	; param run
 23392 00010BBA 488918                  	mov [rax], rbx	; box run
 23393 00010BBD 48894520                	mov PARAM(0), rax	;replace param run with box
 23394 00010BC1 48B8-                   	mov rax, sob_void
 23394 00010BC3 [0000000000000000] 
 23395                                  
 23396 00010BCB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23397 00010BD0 E8344B0000              	call malloc
 23398 00010BD5 50                      	push rax
 23399 00010BD6 BF08000000              	mov rdi, 8 * 1	; new rib
 23400 00010BDB E8294B0000              	call malloc
 23401 00010BE0 50                      	push rax
 23402 00010BE1 BF10000000              	mov rdi, 8 * 2	; extended env
 23403 00010BE6 E81E4B0000              	call malloc
 23404 00010BEB 488B7D10                	mov rdi, ENV
 23405 00010BEF BE00000000              	mov rsi, 0
 23406 00010BF4 BA01000000              	mov rdx, 1
 23407                                  .L_lambda_simple_env_loop_6d7a:	; ext_env[i + 1] <-- env[i]
 23408 00010BF9 4883FE01                	cmp rsi, 1
 23409 00010BFD 7410                    	je .L_lambda_simple_env_end_6d7a
 23410 00010BFF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23411 00010C03 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23412 00010C07 48FFC6                  	inc rsi
 23413 00010C0A 48FFC2                  	inc rdx
 23414 00010C0D EBEA                    	jmp .L_lambda_simple_env_loop_6d7a
 23415                                  .L_lambda_simple_env_end_6d7a:
 23416 00010C0F 5B                      	pop rbx
 23417 00010C10 BE00000000              	mov rsi, 0
 23418                                  .L_lambda_simple_params_loop_6d7a:	; copy params
 23419 00010C15 4883FE01                	cmp rsi, 1
 23420 00010C19 740E                    	je .L_lambda_simple_params_end_6d7a
 23421 00010C1B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23422 00010C20 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23423 00010C24 48FFC6                  	inc rsi
 23424 00010C27 EBEC                    	jmp .L_lambda_simple_params_loop_6d7a
 23425                                  .L_lambda_simple_params_end_6d7a:
 23426 00010C29 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23427 00010C2C 4889C3                  	mov rbx, rax
 23428 00010C2F 58                      	pop rax
 23429 00010C30 C60004                  	mov byte [rax], T_closure
 23430 00010C33 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23431 00010C37 48C74009[440C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d7a
 23432 00010C3F E940010000              	jmp .L_lambda_simple_end_6d7a
 23433                                  .L_lambda_simple_code_6d7a:	; lambda-simple body
 23434 00010C44 48837C241003            	cmp qword [rsp + 8 * 2], 3
 23435 00010C4A 740B                    	je .L_lambda_simple_arity_check_ok_6d7a
 23436 00010C4C FF742410                	push qword [rsp + 8 * 2]
 23437 00010C50 6A03                    	push 3
 23438 00010C52 E96B4A0000              	jmp L_error_incorrect_arity_simple
 23439                                  .L_lambda_simple_arity_check_ok_6d7a:
 23440 00010C57 C8000000                	enter 0, 0
 23441 00010C5B 488B4530                	mov rax, PARAM(2)	; param n
 23442 00010C5F 50                      	push rax
 23443 00010C60 488B4528                	mov rax, PARAM(1)	; param i
 23444 00010C64 50                      	push rax
 23445 00010C65 6A02                    	push 2	; arg count
 23446 00010C67 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 23447 00010C6F 803805                  	cmp byte [rax], T_undefined
 23448 00010C72 0F8464490000            	je L_error_fvar_undefined
 23449 00010C78 803804                  	cmp byte [rax], T_closure
 23450 00010C7B 0F85DF490000            	jne L_error_non_closure
 23451 00010C81 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23452 00010C84 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23453                                  
 23454 00010C87 483D[02000000]          	cmp rax, sob_boolean_false
 23455 00010C8D 0F84E3000000            	je .L_if_else_772b
 23456                                  	; preparing a tail-call
 23457 00010C93 488B4530                	mov rax, PARAM(2)	; param n
 23458 00010C97 50                      	push rax
 23459 00010C98 48B8-                   	mov rax, L_constants + 2158
 23459 00010C9A [6E08000000000000] 
 23460 00010CA2 50                      	push rax
 23461 00010CA3 488B4528                	mov rax, PARAM(1)	; param i
 23462 00010CA7 50                      	push rax
 23463 00010CA8 6A02                    	push 2	; arg count
 23464 00010CAA 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 23465 00010CB2 803805                  	cmp byte [rax], T_undefined
 23466 00010CB5 0F8421490000            	je L_error_fvar_undefined
 23467 00010CBB 803804                  	cmp byte [rax], T_closure
 23468 00010CBE 0F859C490000            	jne L_error_non_closure
 23469 00010CC4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23470 00010CC7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23471 00010CCA 50                      	push rax
 23472 00010CCB 488B4520                	mov rax, PARAM(0)	; param str
 23473 00010CCF 50                      	push rax
 23474 00010CD0 6A03                    	push 3	; arg count
 23475 00010CD2 488B4510                	mov rax, ENV
 23476 00010CD6 488B00                  	mov rax, qword [rax + 8 * 0]
 23477 00010CD9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23478 00010CDC 488B00                  	mov rax, qword [rax]
 23479 00010CDF 803804                  	cmp byte [rax], T_closure
 23480 00010CE2 0F8578490000            	jne L_error_non_closure
 23481 00010CE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23482 00010CEB FF5009                  	call SOB_CLOSURE_CODE(rax)
 23483 00010CEE 50                      	push rax
 23484 00010CEF 488B4528                	mov rax, PARAM(1)	; param i
 23485 00010CF3 50                      	push rax
 23486 00010CF4 488B4520                	mov rax, PARAM(0)	; param str
 23487 00010CF8 50                      	push rax
 23488 00010CF9 6A02                    	push 2	; arg count
 23489 00010CFB 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 23490 00010D03 803805                  	cmp byte [rax], T_undefined
 23491 00010D06 0F84D0480000            	je L_error_fvar_undefined
 23492 00010D0C 803804                  	cmp byte [rax], T_closure
 23493 00010D0F 0F854B490000            	jne L_error_non_closure
 23494 00010D15 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23495 00010D18 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23496 00010D1B 50                      	push rax
 23497 00010D1C 6A02                    	push 2	; arg count
 23498 00010D1E 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
 23499 00010D26 803805                  	cmp byte [rax], T_undefined
 23500 00010D29 0F84AD480000            	je L_error_fvar_undefined
 23501 00010D2F 803804                  	cmp byte [rax], T_closure
 23502 00010D32 0F8528490000            	jne L_error_non_closure
 23503 00010D38 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23504                                  
 23505                                  	; recycling the current frame
 23506 00010D3B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23507 00010D3E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23508 00010D41 B906000000              	mov rcx, 2 + 4
 23509 00010D46 488B5D18                	mov rbx, COUNT
 23510 00010D4A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23511 00010D4F 488D55F8                	lea rdx, [rbp - 8 * 1]
 23512                                  .L_tc_recycle_frame_loop_8f6f:
 23513 00010D53 4883F900                	cmp rcx, 0
 23514 00010D57 7413                    	je .L_tc_recycle_frame_done_8f6f
 23515 00010D59 488B32                  	mov rsi, qword [rdx]
 23516 00010D5C 488933                  	mov qword [rbx], rsi
 23517 00010D5F 48FFC9                  	dec rcx
 23518 00010D62 4883EB08                	sub rbx, 8 * 1
 23519 00010D66 4883EA08                	sub rdx, 8 * 1
 23520 00010D6A EBE7                    	jmp .L_tc_recycle_frame_loop_8f6f
 23521                                  .L_tc_recycle_frame_done_8f6f:
 23522 00010D6C 488D6308                	lea rsp, [rbx + 8 * 1]
 23523 00010D70 5D                      	pop rbp	; the proc will restore it!
 23524 00010D71 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23525                                  
 23526 00010D74 EB0A                    	jmp .L_if_end_772b
 23527                                  
 23528                                  	.L_if_else_772b:
 23529 00010D76 48B8-                   	mov rax, L_constants + 1
 23529 00010D78 [0100000000000000] 
 23530                                  
 23531                                  	.L_if_end_772b:
 23532 00010D80 C9                      	leave
 23533 00010D81 C22800                  	ret AND_KILL_FRAME(3)
 23534                                  .L_lambda_simple_end_6d7a:	; new closure is in rax
 23535                                  
 23536 00010D84 50                      	push rax
 23537 00010D85 488B4520                	mov rax, PARAM(0)	; param run
 23538                                  
 23539 00010D89 8F00                    	pop qword[rax]
 23540 00010D8B 48B8-                   	mov rax, sob_void
 23540 00010D8D [0000000000000000] 
 23541                                  
 23542 00010D95 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23543 00010D9A E86A490000              	call malloc
 23544 00010D9F 50                      	push rax
 23545 00010DA0 BF08000000              	mov rdi, 8 * 1	; new rib
 23546 00010DA5 E85F490000              	call malloc
 23547 00010DAA 50                      	push rax
 23548 00010DAB BF10000000              	mov rdi, 8 * 2	; extended env
 23549 00010DB0 E854490000              	call malloc
 23550 00010DB5 488B7D10                	mov rdi, ENV
 23551 00010DB9 BE00000000              	mov rsi, 0
 23552 00010DBE BA01000000              	mov rdx, 1
 23553                                  .L_lambda_simple_env_loop_6d7b:	; ext_env[i + 1] <-- env[i]
 23554 00010DC3 4883FE01                	cmp rsi, 1
 23555 00010DC7 7410                    	je .L_lambda_simple_env_end_6d7b
 23556 00010DC9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23557 00010DCD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23558 00010DD1 48FFC6                  	inc rsi
 23559 00010DD4 48FFC2                  	inc rdx
 23560 00010DD7 EBEA                    	jmp .L_lambda_simple_env_loop_6d7b
 23561                                  .L_lambda_simple_env_end_6d7b:
 23562 00010DD9 5B                      	pop rbx
 23563 00010DDA BE00000000              	mov rsi, 0
 23564                                  .L_lambda_simple_params_loop_6d7b:	; copy params
 23565 00010DDF 4883FE01                	cmp rsi, 1
 23566 00010DE3 740E                    	je .L_lambda_simple_params_end_6d7b
 23567 00010DE5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23568 00010DEA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23569 00010DEE 48FFC6                  	inc rsi
 23570 00010DF1 EBEC                    	jmp .L_lambda_simple_params_loop_6d7b
 23571                                  .L_lambda_simple_params_end_6d7b:
 23572 00010DF3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23573 00010DF6 4889C3                  	mov rbx, rax
 23574 00010DF9 58                      	pop rax
 23575 00010DFA C60004                  	mov byte [rax], T_closure
 23576 00010DFD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23577 00010E01 48C74009[0E0E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d7b
 23578 00010E09 E9A7000000              	jmp .L_lambda_simple_end_6d7b
 23579                                  .L_lambda_simple_code_6d7b:	; lambda-simple body
 23580 00010E0E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23581 00010E14 740B                    	je .L_lambda_simple_arity_check_ok_6d7b
 23582 00010E16 FF742410                	push qword [rsp + 8 * 2]
 23583 00010E1A 6A01                    	push 1
 23584 00010E1C E9A1480000              	jmp L_error_incorrect_arity_simple
 23585                                  .L_lambda_simple_arity_check_ok_6d7b:
 23586 00010E21 C8000000                	enter 0, 0
 23587                                  	; preparing a tail-call
 23588 00010E25 488B4520                	mov rax, PARAM(0)	; param str
 23589 00010E29 50                      	push rax
 23590 00010E2A 6A01                    	push 1	; arg count
 23591 00010E2C 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 23592 00010E34 803805                  	cmp byte [rax], T_undefined
 23593 00010E37 0F849F470000            	je L_error_fvar_undefined
 23594 00010E3D 803804                  	cmp byte [rax], T_closure
 23595 00010E40 0F851A480000            	jne L_error_non_closure
 23596 00010E46 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23597 00010E49 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23598 00010E4C 50                      	push rax
 23599 00010E4D 48B8-                   	mov rax, L_constants + 2023
 23599 00010E4F [E707000000000000] 
 23600 00010E57 50                      	push rax
 23601 00010E58 488B4520                	mov rax, PARAM(0)	; param str
 23602 00010E5C 50                      	push rax
 23603 00010E5D 6A03                    	push 3	; arg count
 23604 00010E5F 488B4510                	mov rax, ENV
 23605 00010E63 488B00                  	mov rax, qword [rax + 8 * 0]
 23606 00010E66 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23607 00010E69 488B00                  	mov rax, qword [rax]
 23608 00010E6C 803804                  	cmp byte [rax], T_closure
 23609 00010E6F 0F85EB470000            	jne L_error_non_closure
 23610 00010E75 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23611                                  
 23612                                  	; recycling the current frame
 23613 00010E78 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23614 00010E7B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23615 00010E7E B907000000              	mov rcx, 3 + 4
 23616 00010E83 488B5D18                	mov rbx, COUNT
 23617 00010E87 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23618 00010E8C 488D55F8                	lea rdx, [rbp - 8 * 1]
 23619                                  .L_tc_recycle_frame_loop_8f70:
 23620 00010E90 4883F900                	cmp rcx, 0
 23621 00010E94 7413                    	je .L_tc_recycle_frame_done_8f70
 23622 00010E96 488B32                  	mov rsi, qword [rdx]
 23623 00010E99 488933                  	mov qword [rbx], rsi
 23624 00010E9C 48FFC9                  	dec rcx
 23625 00010E9F 4883EB08                	sub rbx, 8 * 1
 23626 00010EA3 4883EA08                	sub rdx, 8 * 1
 23627 00010EA7 EBE7                    	jmp .L_tc_recycle_frame_loop_8f70
 23628                                  .L_tc_recycle_frame_done_8f70:
 23629 00010EA9 488D6308                	lea rsp, [rbx + 8 * 1]
 23630 00010EAD 5D                      	pop rbp	; the proc will restore it!
 23631 00010EAE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23632 00010EB1 C9                      	leave
 23633 00010EB2 C21800                  	ret AND_KILL_FRAME(1)
 23634                                  .L_lambda_simple_end_6d7b:	; new closure is in rax
 23635 00010EB5 C9                      	leave
 23636 00010EB6 C21800                  	ret AND_KILL_FRAME(1)
 23637                                  .L_lambda_simple_end_6d79:	; new closure is in rax
 23638 00010EB9 803804                  	cmp byte [rax], T_closure
 23639 00010EBC 0F859E470000            	jne L_error_non_closure
 23640 00010EC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23641 00010EC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23642 00010EC8 48890425[27170000]      	mov qword [free_var_143], rax
 23643 00010ED0 48B8-                   	mov rax, sob_void
 23643 00010ED2 [0000000000000000] 
 23644                                  
 23645 00010EDA 4889C7                  	mov rdi, rax
 23646 00010EDD E839490000              	call print_sexpr_if_not_void
 23647                                  
 23648 00010EE2 48B8-                   	mov rax, L_constants + 1881
 23648 00010EE4 [5907000000000000] 
 23649 00010EEC 50                      	push rax
 23650 00010EED 6A01                    	push 1	; arg count
 23651 00010EEF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23652 00010EF4 E810480000              	call malloc
 23653 00010EF9 50                      	push rax
 23654 00010EFA BF00000000              	mov rdi, 8 * 0	; new rib
 23655 00010EFF E805480000              	call malloc
 23656 00010F04 50                      	push rax
 23657 00010F05 BF08000000              	mov rdi, 8 * 1	; extended env
 23658 00010F0A E8FA470000              	call malloc
 23659 00010F0F 488B7D10                	mov rdi, ENV
 23660 00010F13 BE00000000              	mov rsi, 0
 23661 00010F18 BA01000000              	mov rdx, 1
 23662                                  .L_lambda_simple_env_loop_6d7c:	; ext_env[i + 1] <-- env[i]
 23663 00010F1D 4883FE00                	cmp rsi, 0
 23664 00010F21 7410                    	je .L_lambda_simple_env_end_6d7c
 23665 00010F23 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23666 00010F27 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23667 00010F2B 48FFC6                  	inc rsi
 23668 00010F2E 48FFC2                  	inc rdx
 23669 00010F31 EBEA                    	jmp .L_lambda_simple_env_loop_6d7c
 23670                                  .L_lambda_simple_env_end_6d7c:
 23671 00010F33 5B                      	pop rbx
 23672 00010F34 BE00000000              	mov rsi, 0
 23673                                  .L_lambda_simple_params_loop_6d7c:	; copy params
 23674 00010F39 4883FE00                	cmp rsi, 0
 23675 00010F3D 740E                    	je .L_lambda_simple_params_end_6d7c
 23676 00010F3F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23677 00010F44 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23678 00010F48 48FFC6                  	inc rsi
 23679 00010F4B EBEC                    	jmp .L_lambda_simple_params_loop_6d7c
 23680                                  .L_lambda_simple_params_end_6d7c:
 23681 00010F4D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23682 00010F50 4889C3                  	mov rbx, rax
 23683 00010F53 58                      	pop rax
 23684 00010F54 C60004                  	mov byte [rax], T_closure
 23685 00010F57 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23686 00010F5B 48C74009[680F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d7c
 23687 00010F63 E924030000              	jmp .L_lambda_simple_end_6d7c
 23688                                  .L_lambda_simple_code_6d7c:	; lambda-simple body
 23689 00010F68 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23690 00010F6E 740B                    	je .L_lambda_simple_arity_check_ok_6d7c
 23691 00010F70 FF742410                	push qword [rsp + 8 * 2]
 23692 00010F74 6A01                    	push 1
 23693 00010F76 E947470000              	jmp L_error_incorrect_arity_simple
 23694                                  .L_lambda_simple_arity_check_ok_6d7c:
 23695 00010F7B C8000000                	enter 0, 0
 23696                                  
 23697 00010F7F BF08000000              	mov rdi, 8
 23698 00010F84 E880470000              	call malloc
 23699 00010F89 488B5D20                	mov rbx, PARAM(0)	; param run
 23700 00010F8D 488918                  	mov [rax], rbx	; box run
 23701 00010F90 48894520                	mov PARAM(0), rax	;replace param run with box
 23702 00010F94 48B8-                   	mov rax, sob_void
 23702 00010F96 [0000000000000000] 
 23703                                  
 23704 00010F9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23705 00010FA3 E861470000              	call malloc
 23706 00010FA8 50                      	push rax
 23707 00010FA9 BF08000000              	mov rdi, 8 * 1	; new rib
 23708 00010FAE E856470000              	call malloc
 23709 00010FB3 50                      	push rax
 23710 00010FB4 BF10000000              	mov rdi, 8 * 2	; extended env
 23711 00010FB9 E84B470000              	call malloc
 23712 00010FBE 488B7D10                	mov rdi, ENV
 23713 00010FC2 BE00000000              	mov rsi, 0
 23714 00010FC7 BA01000000              	mov rdx, 1
 23715                                  .L_lambda_simple_env_loop_6d7d:	; ext_env[i + 1] <-- env[i]
 23716 00010FCC 4883FE01                	cmp rsi, 1
 23717 00010FD0 7410                    	je .L_lambda_simple_env_end_6d7d
 23718 00010FD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23719 00010FD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23720 00010FDA 48FFC6                  	inc rsi
 23721 00010FDD 48FFC2                  	inc rdx
 23722 00010FE0 EBEA                    	jmp .L_lambda_simple_env_loop_6d7d
 23723                                  .L_lambda_simple_env_end_6d7d:
 23724 00010FE2 5B                      	pop rbx
 23725 00010FE3 BE00000000              	mov rsi, 0
 23726                                  .L_lambda_simple_params_loop_6d7d:	; copy params
 23727 00010FE8 4883FE01                	cmp rsi, 1
 23728 00010FEC 740E                    	je .L_lambda_simple_params_end_6d7d
 23729 00010FEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23730 00010FF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23731 00010FF7 48FFC6                  	inc rsi
 23732 00010FFA EBEC                    	jmp .L_lambda_simple_params_loop_6d7d
 23733                                  .L_lambda_simple_params_end_6d7d:
 23734 00010FFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23735 00010FFF 4889C3                  	mov rbx, rax
 23736 00011002 58                      	pop rax
 23737 00011003 C60004                  	mov byte [rax], T_closure
 23738 00011006 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23739 0001100A 48C74009[17100100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d7d
 23740 00011012 E940010000              	jmp .L_lambda_simple_end_6d7d
 23741                                  .L_lambda_simple_code_6d7d:	; lambda-simple body
 23742 00011017 48837C241003            	cmp qword [rsp + 8 * 2], 3
 23743 0001101D 740B                    	je .L_lambda_simple_arity_check_ok_6d7d
 23744 0001101F FF742410                	push qword [rsp + 8 * 2]
 23745 00011023 6A03                    	push 3
 23746 00011025 E998460000              	jmp L_error_incorrect_arity_simple
 23747                                  .L_lambda_simple_arity_check_ok_6d7d:
 23748 0001102A C8000000                	enter 0, 0
 23749 0001102E 488B4530                	mov rax, PARAM(2)	; param n
 23750 00011032 50                      	push rax
 23751 00011033 488B4528                	mov rax, PARAM(1)	; param i
 23752 00011037 50                      	push rax
 23753 00011038 6A02                    	push 2	; arg count
 23754 0001103A 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 23755 00011042 803805                  	cmp byte [rax], T_undefined
 23756 00011045 0F8491450000            	je L_error_fvar_undefined
 23757 0001104B 803804                  	cmp byte [rax], T_closure
 23758 0001104E 0F850C460000            	jne L_error_non_closure
 23759 00011054 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23760 00011057 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23761                                  
 23762 0001105A 483D[02000000]          	cmp rax, sob_boolean_false
 23763 00011060 0F84E3000000            	je .L_if_else_772c
 23764                                  	; preparing a tail-call
 23765 00011066 488B4530                	mov rax, PARAM(2)	; param n
 23766 0001106A 50                      	push rax
 23767 0001106B 48B8-                   	mov rax, L_constants + 2158
 23767 0001106D [6E08000000000000] 
 23768 00011075 50                      	push rax
 23769 00011076 488B4528                	mov rax, PARAM(1)	; param i
 23770 0001107A 50                      	push rax
 23771 0001107B 6A02                    	push 2	; arg count
 23772 0001107D 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 23773 00011085 803805                  	cmp byte [rax], T_undefined
 23774 00011088 0F844E450000            	je L_error_fvar_undefined
 23775 0001108E 803804                  	cmp byte [rax], T_closure
 23776 00011091 0F85C9450000            	jne L_error_non_closure
 23777 00011097 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23778 0001109A FF5009                  	call SOB_CLOSURE_CODE(rax)
 23779 0001109D 50                      	push rax
 23780 0001109E 488B4520                	mov rax, PARAM(0)	; param v
 23781 000110A2 50                      	push rax
 23782 000110A3 6A03                    	push 3	; arg count
 23783 000110A5 488B4510                	mov rax, ENV
 23784 000110A9 488B00                  	mov rax, qword [rax + 8 * 0]
 23785 000110AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23786 000110AF 488B00                  	mov rax, qword [rax]
 23787 000110B2 803804                  	cmp byte [rax], T_closure
 23788 000110B5 0F85A5450000            	jne L_error_non_closure
 23789 000110BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 23790 000110BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 23791 000110C1 50                      	push rax
 23792 000110C2 488B4528                	mov rax, PARAM(1)	; param i
 23793 000110C6 50                      	push rax
 23794 000110C7 488B4520                	mov rax, PARAM(0)	; param v
 23795 000110CB 50                      	push rax
 23796 000110CC 6A02                    	push 2	; arg count
 23797 000110CE 488B0425[3E110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 23798 000110D6 803805                  	cmp byte [rax], T_undefined
 23799 000110D9 0F84FD440000            	je L_error_fvar_undefined
 23800 000110DF 803804                  	cmp byte [rax], T_closure
 23801 000110E2 0F8578450000            	jne L_error_non_closure
 23802 000110E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23803 000110EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 23804 000110EE 50                      	push rax
 23805 000110EF 6A02                    	push 2	; arg count
 23806 000110F1 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
 23807 000110F9 803805                  	cmp byte [rax], T_undefined
 23808 000110FC 0F84DA440000            	je L_error_fvar_undefined
 23809 00011102 803804                  	cmp byte [rax], T_closure
 23810 00011105 0F8555450000            	jne L_error_non_closure
 23811 0001110B FF7001                  	push SOB_CLOSURE_ENV(rax)
 23812                                  
 23813                                  	; recycling the current frame
 23814 0001110E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23815 00011111 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23816 00011114 B906000000              	mov rcx, 2 + 4
 23817 00011119 488B5D18                	mov rbx, COUNT
 23818 0001111D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23819 00011122 488D55F8                	lea rdx, [rbp - 8 * 1]
 23820                                  .L_tc_recycle_frame_loop_8f71:
 23821 00011126 4883F900                	cmp rcx, 0
 23822 0001112A 7413                    	je .L_tc_recycle_frame_done_8f71
 23823 0001112C 488B32                  	mov rsi, qword [rdx]
 23824 0001112F 488933                  	mov qword [rbx], rsi
 23825 00011132 48FFC9                  	dec rcx
 23826 00011135 4883EB08                	sub rbx, 8 * 1
 23827 00011139 4883EA08                	sub rdx, 8 * 1
 23828 0001113D EBE7                    	jmp .L_tc_recycle_frame_loop_8f71
 23829                                  .L_tc_recycle_frame_done_8f71:
 23830 0001113F 488D6308                	lea rsp, [rbx + 8 * 1]
 23831 00011143 5D                      	pop rbp	; the proc will restore it!
 23832 00011144 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23833                                  
 23834 00011147 EB0A                    	jmp .L_if_end_772c
 23835                                  
 23836                                  	.L_if_else_772c:
 23837 00011149 48B8-                   	mov rax, L_constants + 1
 23837 0001114B [0100000000000000] 
 23838                                  
 23839                                  	.L_if_end_772c:
 23840 00011153 C9                      	leave
 23841 00011154 C22800                  	ret AND_KILL_FRAME(3)
 23842                                  .L_lambda_simple_end_6d7d:	; new closure is in rax
 23843                                  
 23844 00011157 50                      	push rax
 23845 00011158 488B4520                	mov rax, PARAM(0)	; param run
 23846                                  
 23847 0001115C 8F00                    	pop qword[rax]
 23848 0001115E 48B8-                   	mov rax, sob_void
 23848 00011160 [0000000000000000] 
 23849                                  
 23850 00011168 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23851 0001116D E897450000              	call malloc
 23852 00011172 50                      	push rax
 23853 00011173 BF08000000              	mov rdi, 8 * 1	; new rib
 23854 00011178 E88C450000              	call malloc
 23855 0001117D 50                      	push rax
 23856 0001117E BF10000000              	mov rdi, 8 * 2	; extended env
 23857 00011183 E881450000              	call malloc
 23858 00011188 488B7D10                	mov rdi, ENV
 23859 0001118C BE00000000              	mov rsi, 0
 23860 00011191 BA01000000              	mov rdx, 1
 23861                                  .L_lambda_simple_env_loop_6d7e:	; ext_env[i + 1] <-- env[i]
 23862 00011196 4883FE01                	cmp rsi, 1
 23863 0001119A 7410                    	je .L_lambda_simple_env_end_6d7e
 23864 0001119C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23865 000111A0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23866 000111A4 48FFC6                  	inc rsi
 23867 000111A7 48FFC2                  	inc rdx
 23868 000111AA EBEA                    	jmp .L_lambda_simple_env_loop_6d7e
 23869                                  .L_lambda_simple_env_end_6d7e:
 23870 000111AC 5B                      	pop rbx
 23871 000111AD BE00000000              	mov rsi, 0
 23872                                  .L_lambda_simple_params_loop_6d7e:	; copy params
 23873 000111B2 4883FE01                	cmp rsi, 1
 23874 000111B6 740E                    	je .L_lambda_simple_params_end_6d7e
 23875 000111B8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23876 000111BD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23877 000111C1 48FFC6                  	inc rsi
 23878 000111C4 EBEC                    	jmp .L_lambda_simple_params_loop_6d7e
 23879                                  .L_lambda_simple_params_end_6d7e:
 23880 000111C6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23881 000111C9 4889C3                  	mov rbx, rax
 23882 000111CC 58                      	pop rax
 23883 000111CD C60004                  	mov byte [rax], T_closure
 23884 000111D0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23885 000111D4 48C74009[E1110100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d7e
 23886 000111DC E9A7000000              	jmp .L_lambda_simple_end_6d7e
 23887                                  .L_lambda_simple_code_6d7e:	; lambda-simple body
 23888 000111E1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23889 000111E7 740B                    	je .L_lambda_simple_arity_check_ok_6d7e
 23890 000111E9 FF742410                	push qword [rsp + 8 * 2]
 23891 000111ED 6A01                    	push 1
 23892 000111EF E9CE440000              	jmp L_error_incorrect_arity_simple
 23893                                  .L_lambda_simple_arity_check_ok_6d7e:
 23894 000111F4 C8000000                	enter 0, 0
 23895                                  	; preparing a tail-call
 23896 000111F8 488B4520                	mov rax, PARAM(0)	; param v
 23897 000111FC 50                      	push rax
 23898 000111FD 6A01                    	push 1	; arg count
 23899 000111FF 488B0425[EB0E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 23900 00011207 803805                  	cmp byte [rax], T_undefined
 23901 0001120A 0F84CC430000            	je L_error_fvar_undefined
 23902 00011210 803804                  	cmp byte [rax], T_closure
 23903 00011213 0F8547440000            	jne L_error_non_closure
 23904 00011219 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23905 0001121C FF5009                  	call SOB_CLOSURE_CODE(rax)
 23906 0001121F 50                      	push rax
 23907 00011220 48B8-                   	mov rax, L_constants + 2023
 23907 00011222 [E707000000000000] 
 23908 0001122A 50                      	push rax
 23909 0001122B 488B4520                	mov rax, PARAM(0)	; param v
 23910 0001122F 50                      	push rax
 23911 00011230 6A03                    	push 3	; arg count
 23912 00011232 488B4510                	mov rax, ENV
 23913 00011236 488B00                  	mov rax, qword [rax + 8 * 0]
 23914 00011239 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23915 0001123C 488B00                  	mov rax, qword [rax]
 23916 0001123F 803804                  	cmp byte [rax], T_closure
 23917 00011242 0F8518440000            	jne L_error_non_closure
 23918 00011248 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23919                                  
 23920                                  	; recycling the current frame
 23921 0001124B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23922 0001124E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23923 00011251 B907000000              	mov rcx, 3 + 4
 23924 00011256 488B5D18                	mov rbx, COUNT
 23925 0001125A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23926 0001125F 488D55F8                	lea rdx, [rbp - 8 * 1]
 23927                                  .L_tc_recycle_frame_loop_8f72:
 23928 00011263 4883F900                	cmp rcx, 0
 23929 00011267 7413                    	je .L_tc_recycle_frame_done_8f72
 23930 00011269 488B32                  	mov rsi, qword [rdx]
 23931 0001126C 488933                  	mov qword [rbx], rsi
 23932 0001126F 48FFC9                  	dec rcx
 23933 00011272 4883EB08                	sub rbx, 8 * 1
 23934 00011276 4883EA08                	sub rdx, 8 * 1
 23935 0001127A EBE7                    	jmp .L_tc_recycle_frame_loop_8f72
 23936                                  .L_tc_recycle_frame_done_8f72:
 23937 0001127C 488D6308                	lea rsp, [rbx + 8 * 1]
 23938 00011280 5D                      	pop rbp	; the proc will restore it!
 23939 00011281 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23940 00011284 C9                      	leave
 23941 00011285 C21800                  	ret AND_KILL_FRAME(1)
 23942                                  .L_lambda_simple_end_6d7e:	; new closure is in rax
 23943 00011288 C9                      	leave
 23944 00011289 C21800                  	ret AND_KILL_FRAME(1)
 23945                                  .L_lambda_simple_end_6d7c:	; new closure is in rax
 23946 0001128C 803804                  	cmp byte [rax], T_closure
 23947 0001128F 0F85CB430000            	jne L_error_non_closure
 23948 00011295 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23949 00011298 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23950 0001129B 48890425[15180000]      	mov qword [free_var_157], rax
 23951 000112A3 48B8-                   	mov rax, sob_void
 23951 000112A5 [0000000000000000] 
 23952                                  
 23953 000112AD 4889C7                  	mov rdi, rax
 23954 000112B0 E866450000              	call print_sexpr_if_not_void
 23955                                  
 23956 000112B5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23957 000112BA E84A440000              	call malloc
 23958 000112BF 50                      	push rax
 23959 000112C0 BF00000000              	mov rdi, 8 * 0	; new rib
 23960 000112C5 E83F440000              	call malloc
 23961 000112CA 50                      	push rax
 23962 000112CB BF08000000              	mov rdi, 8 * 1	; extended env
 23963 000112D0 E834440000              	call malloc
 23964 000112D5 488B7D10                	mov rdi, ENV
 23965 000112D9 BE00000000              	mov rsi, 0
 23966 000112DE BA01000000              	mov rdx, 1
 23967                                  .L_lambda_simple_env_loop_6d7f:	; ext_env[i + 1] <-- env[i]
 23968 000112E3 4883FE00                	cmp rsi, 0
 23969 000112E7 7410                    	je .L_lambda_simple_env_end_6d7f
 23970 000112E9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23971 000112ED 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23972 000112F1 48FFC6                  	inc rsi
 23973 000112F4 48FFC2                  	inc rdx
 23974 000112F7 EBEA                    	jmp .L_lambda_simple_env_loop_6d7f
 23975                                  .L_lambda_simple_env_end_6d7f:
 23976 000112F9 5B                      	pop rbx
 23977 000112FA BE00000000              	mov rsi, 0
 23978                                  .L_lambda_simple_params_loop_6d7f:	; copy params
 23979 000112FF 4883FE00                	cmp rsi, 0
 23980 00011303 740E                    	je .L_lambda_simple_params_end_6d7f
 23981 00011305 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23982 0001130A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23983 0001130E 48FFC6                  	inc rsi
 23984 00011311 EBEC                    	jmp .L_lambda_simple_params_loop_6d7f
 23985                                  .L_lambda_simple_params_end_6d7f:
 23986 00011313 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23987 00011316 4889C3                  	mov rbx, rax
 23988 00011319 58                      	pop rax
 23989 0001131A C60004                  	mov byte [rax], T_closure
 23990 0001131D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23991 00011321 48C74009[2E130100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d7f
 23992 00011329 E99B000000              	jmp .L_lambda_simple_end_6d7f
 23993                                  .L_lambda_simple_code_6d7f:	; lambda-simple body
 23994 0001132E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23995 00011334 740B                    	je .L_lambda_simple_arity_check_ok_6d7f
 23996 00011336 FF742410                	push qword [rsp + 8 * 2]
 23997 0001133A 6A01                    	push 1
 23998 0001133C E981430000              	jmp L_error_incorrect_arity_simple
 23999                                  .L_lambda_simple_arity_check_ok_6d7f:
 24000 00011341 C8000000                	enter 0, 0
 24001                                  	; preparing a tail-call
 24002 00011345 488B4520                	mov rax, PARAM(0)	; param n
 24003 00011349 50                      	push rax
 24004 0001134A 6A00                    	push 0	; arg count
 24005 0001134C 488B0425[620F0000]      	mov rax, qword [free_var_26]	; free var trng
 24006 00011354 803805                  	cmp byte [rax], T_undefined
 24007 00011357 0F847F420000            	je L_error_fvar_undefined
 24008 0001135D 803804                  	cmp byte [rax], T_closure
 24009 00011360 0F85FA420000            	jne L_error_non_closure
 24010 00011366 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24011 00011369 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24012 0001136C 50                      	push rax
 24013 0001136D 6A02                    	push 2	; arg count
 24014 0001136F 488B0425[FA100000]      	mov rax, qword [free_var_50]	; free var remainder
 24015 00011377 803805                  	cmp byte [rax], T_undefined
 24016 0001137A 0F845C420000            	je L_error_fvar_undefined
 24017 00011380 803804                  	cmp byte [rax], T_closure
 24018 00011383 0F85D7420000            	jne L_error_non_closure
 24019 00011389 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24020                                  
 24021                                  	; recycling the current frame
 24022 0001138C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24023 0001138F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24024 00011392 B906000000              	mov rcx, 2 + 4
 24025 00011397 488B5D18                	mov rbx, COUNT
 24026 0001139B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24027 000113A0 488D55F8                	lea rdx, [rbp - 8 * 1]
 24028                                  .L_tc_recycle_frame_loop_8f73:
 24029 000113A4 4883F900                	cmp rcx, 0
 24030 000113A8 7413                    	je .L_tc_recycle_frame_done_8f73
 24031 000113AA 488B32                  	mov rsi, qword [rdx]
 24032 000113AD 488933                  	mov qword [rbx], rsi
 24033 000113B0 48FFC9                  	dec rcx
 24034 000113B3 4883EB08                	sub rbx, 8 * 1
 24035 000113B7 4883EA08                	sub rdx, 8 * 1
 24036 000113BB EBE7                    	jmp .L_tc_recycle_frame_loop_8f73
 24037                                  .L_tc_recycle_frame_done_8f73:
 24038 000113BD 488D6308                	lea rsp, [rbx + 8 * 1]
 24039 000113C1 5D                      	pop rbp	; the proc will restore it!
 24040 000113C2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24041 000113C5 C9                      	leave
 24042 000113C6 C21800                  	ret AND_KILL_FRAME(1)
 24043                                  .L_lambda_simple_end_6d7f:	; new closure is in rax
 24044 000113C9 48890425[26180000]      	mov qword [free_var_158], rax
 24045 000113D1 48B8-                   	mov rax, sob_void
 24045 000113D3 [0000000000000000] 
 24046                                  
 24047 000113DB 4889C7                  	mov rdi, rax
 24048 000113DE E838440000              	call print_sexpr_if_not_void
 24049                                  
 24050 000113E3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24051 000113E8 E81C430000              	call malloc
 24052 000113ED 50                      	push rax
 24053 000113EE BF00000000              	mov rdi, 8 * 0	; new rib
 24054 000113F3 E811430000              	call malloc
 24055 000113F8 50                      	push rax
 24056 000113F9 BF08000000              	mov rdi, 8 * 1	; extended env
 24057 000113FE E806430000              	call malloc
 24058 00011403 488B7D10                	mov rdi, ENV
 24059 00011407 BE00000000              	mov rsi, 0
 24060 0001140C BA01000000              	mov rdx, 1
 24061                                  .L_lambda_simple_env_loop_6d80:	; ext_env[i + 1] <-- env[i]
 24062 00011411 4883FE00                	cmp rsi, 0
 24063 00011415 7410                    	je .L_lambda_simple_env_end_6d80
 24064 00011417 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24065 0001141B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24066 0001141F 48FFC6                  	inc rsi
 24067 00011422 48FFC2                  	inc rdx
 24068 00011425 EBEA                    	jmp .L_lambda_simple_env_loop_6d80
 24069                                  .L_lambda_simple_env_end_6d80:
 24070 00011427 5B                      	pop rbx
 24071 00011428 BE00000000              	mov rsi, 0
 24072                                  .L_lambda_simple_params_loop_6d80:	; copy params
 24073 0001142D 4883FE00                	cmp rsi, 0
 24074 00011431 740E                    	je .L_lambda_simple_params_end_6d80
 24075 00011433 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24076 00011438 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24077 0001143C 48FFC6                  	inc rsi
 24078 0001143F EBEC                    	jmp .L_lambda_simple_params_loop_6d80
 24079                                  .L_lambda_simple_params_end_6d80:
 24080 00011441 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24081 00011444 4889C3                  	mov rbx, rax
 24082 00011447 58                      	pop rax
 24083 00011448 C60004                  	mov byte [rax], T_closure
 24084 0001144B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24085 0001144F 48C74009[5C140100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d80
 24086 00011457 E983000000              	jmp .L_lambda_simple_end_6d80
 24087                                  .L_lambda_simple_code_6d80:	; lambda-simple body
 24088 0001145C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24089 00011462 740B                    	je .L_lambda_simple_arity_check_ok_6d80
 24090 00011464 FF742410                	push qword [rsp + 8 * 2]
 24091 00011468 6A01                    	push 1
 24092 0001146A E953420000              	jmp L_error_incorrect_arity_simple
 24093                                  .L_lambda_simple_arity_check_ok_6d80:
 24094 0001146F C8000000                	enter 0, 0
 24095                                  	; preparing a tail-call
 24096 00011473 488B4520                	mov rax, PARAM(0)	; param x
 24097 00011477 50                      	push rax
 24098 00011478 48B8-                   	mov rax, L_constants + 2023
 24098 0001147A [E707000000000000] 
 24099 00011482 50                      	push rax
 24100 00011483 6A02                    	push 2	; arg count
 24101 00011485 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 24102 0001148D 803805                  	cmp byte [rax], T_undefined
 24103 00011490 0F8446410000            	je L_error_fvar_undefined
 24104 00011496 803804                  	cmp byte [rax], T_closure
 24105 00011499 0F85C1410000            	jne L_error_non_closure
 24106 0001149F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24107                                  
 24108                                  	; recycling the current frame
 24109 000114A2 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24110 000114A5 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24111 000114A8 B906000000              	mov rcx, 2 + 4
 24112 000114AD 488B5D18                	mov rbx, COUNT
 24113 000114B1 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24114 000114B6 488D55F8                	lea rdx, [rbp - 8 * 1]
 24115                                  .L_tc_recycle_frame_loop_8f74:
 24116 000114BA 4883F900                	cmp rcx, 0
 24117 000114BE 7413                    	je .L_tc_recycle_frame_done_8f74
 24118 000114C0 488B32                  	mov rsi, qword [rdx]
 24119 000114C3 488933                  	mov qword [rbx], rsi
 24120 000114C6 48FFC9                  	dec rcx
 24121 000114C9 4883EB08                	sub rbx, 8 * 1
 24122 000114CD 4883EA08                	sub rdx, 8 * 1
 24123 000114D1 EBE7                    	jmp .L_tc_recycle_frame_loop_8f74
 24124                                  .L_tc_recycle_frame_done_8f74:
 24125 000114D3 488D6308                	lea rsp, [rbx + 8 * 1]
 24126 000114D7 5D                      	pop rbp	; the proc will restore it!
 24127 000114D8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24128 000114DB C9                      	leave
 24129 000114DC C21800                  	ret AND_KILL_FRAME(1)
 24130                                  .L_lambda_simple_end_6d80:	; new closure is in rax
 24131 000114DF 48890425[37180000]      	mov qword [free_var_159], rax
 24132 000114E7 48B8-                   	mov rax, sob_void
 24132 000114E9 [0000000000000000] 
 24133                                  
 24134 000114F1 4889C7                  	mov rdi, rax
 24135 000114F4 E822430000              	call print_sexpr_if_not_void
 24136                                  
 24137 000114F9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24138 000114FE E806420000              	call malloc
 24139 00011503 50                      	push rax
 24140 00011504 BF00000000              	mov rdi, 8 * 0	; new rib
 24141 00011509 E8FB410000              	call malloc
 24142 0001150E 50                      	push rax
 24143 0001150F BF08000000              	mov rdi, 8 * 1	; extended env
 24144 00011514 E8F0410000              	call malloc
 24145 00011519 488B7D10                	mov rdi, ENV
 24146 0001151D BE00000000              	mov rsi, 0
 24147 00011522 BA01000000              	mov rdx, 1
 24148                                  .L_lambda_simple_env_loop_6d81:	; ext_env[i + 1] <-- env[i]
 24149 00011527 4883FE00                	cmp rsi, 0
 24150 0001152B 7410                    	je .L_lambda_simple_env_end_6d81
 24151 0001152D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24152 00011531 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24153 00011535 48FFC6                  	inc rsi
 24154 00011538 48FFC2                  	inc rdx
 24155 0001153B EBEA                    	jmp .L_lambda_simple_env_loop_6d81
 24156                                  .L_lambda_simple_env_end_6d81:
 24157 0001153D 5B                      	pop rbx
 24158 0001153E BE00000000              	mov rsi, 0
 24159                                  .L_lambda_simple_params_loop_6d81:	; copy params
 24160 00011543 4883FE00                	cmp rsi, 0
 24161 00011547 740E                    	je .L_lambda_simple_params_end_6d81
 24162 00011549 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24163 0001154E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24164 00011552 48FFC6                  	inc rsi
 24165 00011555 EBEC                    	jmp .L_lambda_simple_params_loop_6d81
 24166                                  .L_lambda_simple_params_end_6d81:
 24167 00011557 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24168 0001155A 4889C3                  	mov rbx, rax
 24169 0001155D 58                      	pop rax
 24170 0001155E C60004                  	mov byte [rax], T_closure
 24171 00011561 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24172 00011565 48C74009[72150100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d81
 24173 0001156D E983000000              	jmp .L_lambda_simple_end_6d81
 24174                                  .L_lambda_simple_code_6d81:	; lambda-simple body
 24175 00011572 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24176 00011578 740B                    	je .L_lambda_simple_arity_check_ok_6d81
 24177 0001157A FF742410                	push qword [rsp + 8 * 2]
 24178 0001157E 6A01                    	push 1
 24179 00011580 E93D410000              	jmp L_error_incorrect_arity_simple
 24180                                  .L_lambda_simple_arity_check_ok_6d81:
 24181 00011585 C8000000                	enter 0, 0
 24182                                  	; preparing a tail-call
 24183 00011589 48B8-                   	mov rax, L_constants + 2023
 24183 0001158B [E707000000000000] 
 24184 00011593 50                      	push rax
 24185 00011594 488B4520                	mov rax, PARAM(0)	; param x
 24186 00011598 50                      	push rax
 24187 00011599 6A02                    	push 2	; arg count
 24188 0001159B 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 24189 000115A3 803805                  	cmp byte [rax], T_undefined
 24190 000115A6 0F8430400000            	je L_error_fvar_undefined
 24191 000115AC 803804                  	cmp byte [rax], T_closure
 24192 000115AF 0F85AB400000            	jne L_error_non_closure
 24193 000115B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24194                                  
 24195                                  	; recycling the current frame
 24196 000115B8 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24197 000115BB FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24198 000115BE B906000000              	mov rcx, 2 + 4
 24199 000115C3 488B5D18                	mov rbx, COUNT
 24200 000115C7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24201 000115CC 488D55F8                	lea rdx, [rbp - 8 * 1]
 24202                                  .L_tc_recycle_frame_loop_8f75:
 24203 000115D0 4883F900                	cmp rcx, 0
 24204 000115D4 7413                    	je .L_tc_recycle_frame_done_8f75
 24205 000115D6 488B32                  	mov rsi, qword [rdx]
 24206 000115D9 488933                  	mov qword [rbx], rsi
 24207 000115DC 48FFC9                  	dec rcx
 24208 000115DF 4883EB08                	sub rbx, 8 * 1
 24209 000115E3 4883EA08                	sub rdx, 8 * 1
 24210 000115E7 EBE7                    	jmp .L_tc_recycle_frame_loop_8f75
 24211                                  .L_tc_recycle_frame_done_8f75:
 24212 000115E9 488D6308                	lea rsp, [rbx + 8 * 1]
 24213 000115ED 5D                      	pop rbp	; the proc will restore it!
 24214 000115EE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24215 000115F1 C9                      	leave
 24216 000115F2 C21800                  	ret AND_KILL_FRAME(1)
 24217                                  .L_lambda_simple_end_6d81:	; new closure is in rax
 24218 000115F5 48890425[48180000]      	mov qword [free_var_160], rax
 24219 000115FD 48B8-                   	mov rax, sob_void
 24219 000115FF [0000000000000000] 
 24220                                  
 24221 00011607 4889C7                  	mov rdi, rax
 24222 0001160A E80C420000              	call print_sexpr_if_not_void
 24223                                  
 24224 0001160F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24225 00011614 E8F0400000              	call malloc
 24226 00011619 50                      	push rax
 24227 0001161A BF00000000              	mov rdi, 8 * 0	; new rib
 24228 0001161F E8E5400000              	call malloc
 24229 00011624 50                      	push rax
 24230 00011625 BF08000000              	mov rdi, 8 * 1	; extended env
 24231 0001162A E8DA400000              	call malloc
 24232 0001162F 488B7D10                	mov rdi, ENV
 24233 00011633 BE00000000              	mov rsi, 0
 24234 00011638 BA01000000              	mov rdx, 1
 24235                                  .L_lambda_simple_env_loop_6d82:	; ext_env[i + 1] <-- env[i]
 24236 0001163D 4883FE00                	cmp rsi, 0
 24237 00011641 7410                    	je .L_lambda_simple_env_end_6d82
 24238 00011643 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24239 00011647 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24240 0001164B 48FFC6                  	inc rsi
 24241 0001164E 48FFC2                  	inc rdx
 24242 00011651 EBEA                    	jmp .L_lambda_simple_env_loop_6d82
 24243                                  .L_lambda_simple_env_end_6d82:
 24244 00011653 5B                      	pop rbx
 24245 00011654 BE00000000              	mov rsi, 0
 24246                                  .L_lambda_simple_params_loop_6d82:	; copy params
 24247 00011659 4883FE00                	cmp rsi, 0
 24248 0001165D 740E                    	je .L_lambda_simple_params_end_6d82
 24249 0001165F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24250 00011664 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24251 00011668 48FFC6                  	inc rsi
 24252 0001166B EBEC                    	jmp .L_lambda_simple_params_loop_6d82
 24253                                  .L_lambda_simple_params_end_6d82:
 24254 0001166D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24255 00011670 4889C3                  	mov rbx, rax
 24256 00011673 58                      	pop rax
 24257 00011674 C60004                  	mov byte [rax], T_closure
 24258 00011677 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24259 0001167B 48C74009[88160100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d82
 24260 00011683 E9A6000000              	jmp .L_lambda_simple_end_6d82
 24261                                  .L_lambda_simple_code_6d82:	; lambda-simple body
 24262 00011688 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24263 0001168E 740B                    	je .L_lambda_simple_arity_check_ok_6d82
 24264 00011690 FF742410                	push qword [rsp + 8 * 2]
 24265 00011694 6A01                    	push 1
 24266 00011696 E927400000              	jmp L_error_incorrect_arity_simple
 24267                                  .L_lambda_simple_arity_check_ok_6d82:
 24268 0001169B C8000000                	enter 0, 0
 24269                                  	; preparing a tail-call
 24270 0001169F 48B8-                   	mov rax, L_constants + 3174
 24270 000116A1 [660C000000000000] 
 24271 000116A9 50                      	push rax
 24272 000116AA 488B4520                	mov rax, PARAM(0)	; param n
 24273 000116AE 50                      	push rax
 24274 000116AF 6A02                    	push 2	; arg count
 24275 000116B1 488B0425[FA100000]      	mov rax, qword [free_var_50]	; free var remainder
 24276 000116B9 803805                  	cmp byte [rax], T_undefined
 24277 000116BC 0F841A3F0000            	je L_error_fvar_undefined
 24278 000116C2 803804                  	cmp byte [rax], T_closure
 24279 000116C5 0F85953F0000            	jne L_error_non_closure
 24280 000116CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 24281 000116CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 24282 000116D1 50                      	push rax
 24283 000116D2 6A01                    	push 1	; arg count
 24284 000116D4 488B0425[730F0000]      	mov rax, qword [free_var_27]	; free var zero?
 24285 000116DC 803805                  	cmp byte [rax], T_undefined
 24286 000116DF 0F84F73E0000            	je L_error_fvar_undefined
 24287 000116E5 803804                  	cmp byte [rax], T_closure
 24288 000116E8 0F85723F0000            	jne L_error_non_closure
 24289 000116EE FF7001                  	push SOB_CLOSURE_ENV(rax)
 24290                                  
 24291                                  	; recycling the current frame
 24292 000116F1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24293 000116F4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24294 000116F7 B905000000              	mov rcx, 1 + 4
 24295 000116FC 488B5D18                	mov rbx, COUNT
 24296 00011700 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24297 00011705 488D55F8                	lea rdx, [rbp - 8 * 1]
 24298                                  .L_tc_recycle_frame_loop_8f76:
 24299 00011709 4883F900                	cmp rcx, 0
 24300 0001170D 7413                    	je .L_tc_recycle_frame_done_8f76
 24301 0001170F 488B32                  	mov rsi, qword [rdx]
 24302 00011712 488933                  	mov qword [rbx], rsi
 24303 00011715 48FFC9                  	dec rcx
 24304 00011718 4883EB08                	sub rbx, 8 * 1
 24305 0001171C 4883EA08                	sub rdx, 8 * 1
 24306 00011720 EBE7                    	jmp .L_tc_recycle_frame_loop_8f76
 24307                                  .L_tc_recycle_frame_done_8f76:
 24308 00011722 488D6308                	lea rsp, [rbx + 8 * 1]
 24309 00011726 5D                      	pop rbp	; the proc will restore it!
 24310 00011727 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24311 0001172A C9                      	leave
 24312 0001172B C21800                  	ret AND_KILL_FRAME(1)
 24313                                  .L_lambda_simple_end_6d82:	; new closure is in rax
 24314 0001172E 48890425[59180000]      	mov qword [free_var_161], rax
 24315 00011736 48B8-                   	mov rax, sob_void
 24315 00011738 [0000000000000000] 
 24316                                  
 24317 00011740 4889C7                  	mov rdi, rax
 24318 00011743 E8D3400000              	call print_sexpr_if_not_void
 24319                                  
 24320 00011748 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24321 0001174D E8B73F0000              	call malloc
 24322 00011752 50                      	push rax
 24323 00011753 BF00000000              	mov rdi, 8 * 0	; new rib
 24324 00011758 E8AC3F0000              	call malloc
 24325 0001175D 50                      	push rax
 24326 0001175E BF08000000              	mov rdi, 8 * 1	; extended env
 24327 00011763 E8A13F0000              	call malloc
 24328 00011768 488B7D10                	mov rdi, ENV
 24329 0001176C BE00000000              	mov rsi, 0
 24330 00011771 BA01000000              	mov rdx, 1
 24331                                  .L_lambda_simple_env_loop_6d83:	; ext_env[i + 1] <-- env[i]
 24332 00011776 4883FE00                	cmp rsi, 0
 24333 0001177A 7410                    	je .L_lambda_simple_env_end_6d83
 24334 0001177C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24335 00011780 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24336 00011784 48FFC6                  	inc rsi
 24337 00011787 48FFC2                  	inc rdx
 24338 0001178A EBEA                    	jmp .L_lambda_simple_env_loop_6d83
 24339                                  .L_lambda_simple_env_end_6d83:
 24340 0001178C 5B                      	pop rbx
 24341 0001178D BE00000000              	mov rsi, 0
 24342                                  .L_lambda_simple_params_loop_6d83:	; copy params
 24343 00011792 4883FE00                	cmp rsi, 0
 24344 00011796 740E                    	je .L_lambda_simple_params_end_6d83
 24345 00011798 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24346 0001179D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24347 000117A1 48FFC6                  	inc rsi
 24348 000117A4 EBEC                    	jmp .L_lambda_simple_params_loop_6d83
 24349                                  .L_lambda_simple_params_end_6d83:
 24350 000117A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24351 000117A9 4889C3                  	mov rbx, rax
 24352 000117AC 58                      	pop rax
 24353 000117AD C60004                  	mov byte [rax], T_closure
 24354 000117B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24355 000117B4 48C74009[C1170100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d83
 24356 000117BC E99B000000              	jmp .L_lambda_simple_end_6d83
 24357                                  .L_lambda_simple_code_6d83:	; lambda-simple body
 24358 000117C1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24359 000117C7 740B                    	je .L_lambda_simple_arity_check_ok_6d83
 24360 000117C9 FF742410                	push qword [rsp + 8 * 2]
 24361 000117CD 6A01                    	push 1
 24362 000117CF E9EE3E0000              	jmp L_error_incorrect_arity_simple
 24363                                  .L_lambda_simple_arity_check_ok_6d83:
 24364 000117D4 C8000000                	enter 0, 0
 24365                                  	; preparing a tail-call
 24366 000117D8 488B4520                	mov rax, PARAM(0)	; param n
 24367 000117DC 50                      	push rax
 24368 000117DD 6A01                    	push 1	; arg count
 24369 000117DF 488B0425[59180000]      	mov rax, qword [free_var_161]	; free var even?
 24370 000117E7 803805                  	cmp byte [rax], T_undefined
 24371 000117EA 0F84EC3D0000            	je L_error_fvar_undefined
 24372 000117F0 803804                  	cmp byte [rax], T_closure
 24373 000117F3 0F85673E0000            	jne L_error_non_closure
 24374 000117F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24375 000117FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 24376 000117FF 50                      	push rax
 24377 00011800 6A01                    	push 1	; arg count
 24378 00011802 488B0425[90140000]      	mov rax, qword [free_var_104]	; free var not
 24379 0001180A 803805                  	cmp byte [rax], T_undefined
 24380 0001180D 0F84C93D0000            	je L_error_fvar_undefined
 24381 00011813 803804                  	cmp byte [rax], T_closure
 24382 00011816 0F85443E0000            	jne L_error_non_closure
 24383 0001181C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24384                                  
 24385                                  	; recycling the current frame
 24386 0001181F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24387 00011822 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24388 00011825 B905000000              	mov rcx, 1 + 4
 24389 0001182A 488B5D18                	mov rbx, COUNT
 24390 0001182E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24391 00011833 488D55F8                	lea rdx, [rbp - 8 * 1]
 24392                                  .L_tc_recycle_frame_loop_8f77:
 24393 00011837 4883F900                	cmp rcx, 0
 24394 0001183B 7413                    	je .L_tc_recycle_frame_done_8f77
 24395 0001183D 488B32                  	mov rsi, qword [rdx]
 24396 00011840 488933                  	mov qword [rbx], rsi
 24397 00011843 48FFC9                  	dec rcx
 24398 00011846 4883EB08                	sub rbx, 8 * 1
 24399 0001184A 4883EA08                	sub rdx, 8 * 1
 24400 0001184E EBE7                    	jmp .L_tc_recycle_frame_loop_8f77
 24401                                  .L_tc_recycle_frame_done_8f77:
 24402 00011850 488D6308                	lea rsp, [rbx + 8 * 1]
 24403 00011854 5D                      	pop rbp	; the proc will restore it!
 24404 00011855 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24405 00011858 C9                      	leave
 24406 00011859 C21800                  	ret AND_KILL_FRAME(1)
 24407                                  .L_lambda_simple_end_6d83:	; new closure is in rax
 24408 0001185C 48890425[6A180000]      	mov qword [free_var_162], rax
 24409 00011864 48B8-                   	mov rax, sob_void
 24409 00011866 [0000000000000000] 
 24410                                  
 24411 0001186E 4889C7                  	mov rdi, rax
 24412 00011871 E8A53F0000              	call print_sexpr_if_not_void
 24413                                  
 24414 00011876 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24415 0001187B E8893E0000              	call malloc
 24416 00011880 50                      	push rax
 24417 00011881 BF00000000              	mov rdi, 8 * 0	; new rib
 24418 00011886 E87E3E0000              	call malloc
 24419 0001188B 50                      	push rax
 24420 0001188C BF08000000              	mov rdi, 8 * 1	; extended env
 24421 00011891 E8733E0000              	call malloc
 24422 00011896 488B7D10                	mov rdi, ENV
 24423 0001189A BE00000000              	mov rsi, 0
 24424 0001189F BA01000000              	mov rdx, 1
 24425                                  .L_lambda_simple_env_loop_6d84:	; ext_env[i + 1] <-- env[i]
 24426 000118A4 4883FE00                	cmp rsi, 0
 24427 000118A8 7410                    	je .L_lambda_simple_env_end_6d84
 24428 000118AA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24429 000118AE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24430 000118B2 48FFC6                  	inc rsi
 24431 000118B5 48FFC2                  	inc rdx
 24432 000118B8 EBEA                    	jmp .L_lambda_simple_env_loop_6d84
 24433                                  .L_lambda_simple_env_end_6d84:
 24434 000118BA 5B                      	pop rbx
 24435 000118BB BE00000000              	mov rsi, 0
 24436                                  .L_lambda_simple_params_loop_6d84:	; copy params
 24437 000118C0 4883FE00                	cmp rsi, 0
 24438 000118C4 740E                    	je .L_lambda_simple_params_end_6d84
 24439 000118C6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24440 000118CB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24441 000118CF 48FFC6                  	inc rsi
 24442 000118D2 EBEC                    	jmp .L_lambda_simple_params_loop_6d84
 24443                                  .L_lambda_simple_params_end_6d84:
 24444 000118D4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24445 000118D7 4889C3                  	mov rbx, rax
 24446 000118DA 58                      	pop rax
 24447 000118DB C60004                  	mov byte [rax], T_closure
 24448 000118DE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24449 000118E2 48C74009[EF180100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d84
 24450 000118EA E9AD000000              	jmp .L_lambda_simple_end_6d84
 24451                                  .L_lambda_simple_code_6d84:	; lambda-simple body
 24452 000118EF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24453 000118F5 740B                    	je .L_lambda_simple_arity_check_ok_6d84
 24454 000118F7 FF742410                	push qword [rsp + 8 * 2]
 24455 000118FB 6A01                    	push 1
 24456 000118FD E9C03D0000              	jmp L_error_incorrect_arity_simple
 24457                                  .L_lambda_simple_arity_check_ok_6d84:
 24458 00011902 C8000000                	enter 0, 0
 24459 00011906 488B4520                	mov rax, PARAM(0)	; param x
 24460 0001190A 50                      	push rax
 24461 0001190B 6A01                    	push 1	; arg count
 24462 0001190D 488B0425[48180000]      	mov rax, qword [free_var_160]	; free var negative?
 24463 00011915 803805                  	cmp byte [rax], T_undefined
 24464 00011918 0F84BE3C0000            	je L_error_fvar_undefined
 24465 0001191E 803804                  	cmp byte [rax], T_closure
 24466 00011921 0F85393D0000            	jne L_error_non_closure
 24467 00011927 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24468 0001192A FF5009                  	call SOB_CLOSURE_CODE(rax)
 24469                                  
 24470 0001192D 483D[02000000]          	cmp rax, sob_boolean_false
 24471 00011933 745F                    	je .L_if_else_772d
 24472                                  	; preparing a tail-call
 24473 00011935 488B4520                	mov rax, PARAM(0)	; param x
 24474 00011939 50                      	push rax
 24475 0001193A 6A01                    	push 1	; arg count
 24476 0001193C 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 24477 00011944 803805                  	cmp byte [rax], T_undefined
 24478 00011947 0F848F3C0000            	je L_error_fvar_undefined
 24479 0001194D 803804                  	cmp byte [rax], T_closure
 24480 00011950 0F850A3D0000            	jne L_error_non_closure
 24481 00011956 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24482                                  
 24483                                  	; recycling the current frame
 24484 00011959 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24485 0001195C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24486 0001195F B905000000              	mov rcx, 1 + 4
 24487 00011964 488B5D18                	mov rbx, COUNT
 24488 00011968 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24489 0001196D 488D55F8                	lea rdx, [rbp - 8 * 1]
 24490                                  .L_tc_recycle_frame_loop_8f78:
 24491 00011971 4883F900                	cmp rcx, 0
 24492 00011975 7413                    	je .L_tc_recycle_frame_done_8f78
 24493 00011977 488B32                  	mov rsi, qword [rdx]
 24494 0001197A 488933                  	mov qword [rbx], rsi
 24495 0001197D 48FFC9                  	dec rcx
 24496 00011980 4883EB08                	sub rbx, 8 * 1
 24497 00011984 4883EA08                	sub rdx, 8 * 1
 24498 00011988 EBE7                    	jmp .L_tc_recycle_frame_loop_8f78
 24499                                  .L_tc_recycle_frame_done_8f78:
 24500 0001198A 488D6308                	lea rsp, [rbx + 8 * 1]
 24501 0001198E 5D                      	pop rbp	; the proc will restore it!
 24502 0001198F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24503                                  
 24504 00011992 EB04                    	jmp .L_if_end_772d
 24505                                  
 24506                                  	.L_if_else_772d:
 24507 00011994 488B4520                	mov rax, PARAM(0)	; param x
 24508                                  
 24509                                  	.L_if_end_772d:
 24510 00011998 C9                      	leave
 24511 00011999 C21800                  	ret AND_KILL_FRAME(1)
 24512                                  .L_lambda_simple_end_6d84:	; new closure is in rax
 24513 0001199C 48890425[7B180000]      	mov qword [free_var_163], rax
 24514 000119A4 48B8-                   	mov rax, sob_void
 24514 000119A6 [0000000000000000] 
 24515                                  
 24516 000119AE 4889C7                  	mov rdi, rax
 24517 000119B1 E8653E0000              	call print_sexpr_if_not_void
 24518                                  
 24519 000119B6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24520 000119BB E8493D0000              	call malloc
 24521 000119C0 50                      	push rax
 24522 000119C1 BF00000000              	mov rdi, 8 * 0	; new rib
 24523 000119C6 E83E3D0000              	call malloc
 24524 000119CB 50                      	push rax
 24525 000119CC BF08000000              	mov rdi, 8 * 1	; extended env
 24526 000119D1 E8333D0000              	call malloc
 24527 000119D6 488B7D10                	mov rdi, ENV
 24528 000119DA BE00000000              	mov rsi, 0
 24529 000119DF BA01000000              	mov rdx, 1
 24530                                  .L_lambda_simple_env_loop_6d85:	; ext_env[i + 1] <-- env[i]
 24531 000119E4 4883FE00                	cmp rsi, 0
 24532 000119E8 7410                    	je .L_lambda_simple_env_end_6d85
 24533 000119EA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24534 000119EE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24535 000119F2 48FFC6                  	inc rsi
 24536 000119F5 48FFC2                  	inc rdx
 24537 000119F8 EBEA                    	jmp .L_lambda_simple_env_loop_6d85
 24538                                  .L_lambda_simple_env_end_6d85:
 24539 000119FA 5B                      	pop rbx
 24540 000119FB BE00000000              	mov rsi, 0
 24541                                  .L_lambda_simple_params_loop_6d85:	; copy params
 24542 00011A00 4883FE00                	cmp rsi, 0
 24543 00011A04 740E                    	je .L_lambda_simple_params_end_6d85
 24544 00011A06 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24545 00011A0B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24546 00011A0F 48FFC6                  	inc rsi
 24547 00011A12 EBEC                    	jmp .L_lambda_simple_params_loop_6d85
 24548                                  .L_lambda_simple_params_end_6d85:
 24549 00011A14 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24550 00011A17 4889C3                  	mov rbx, rax
 24551 00011A1A 58                      	pop rax
 24552 00011A1B C60004                  	mov byte [rax], T_closure
 24553 00011A1E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24554 00011A22 48C74009[2F1A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d85
 24555 00011A2A E9C1060000              	jmp .L_lambda_simple_end_6d85
 24556                                  .L_lambda_simple_code_6d85:	; lambda-simple body
 24557 00011A2F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24558 00011A35 740B                    	je .L_lambda_simple_arity_check_ok_6d85
 24559 00011A37 FF742410                	push qword [rsp + 8 * 2]
 24560 00011A3B 6A02                    	push 2
 24561 00011A3D E9803C0000              	jmp L_error_incorrect_arity_simple
 24562                                  .L_lambda_simple_arity_check_ok_6d85:
 24563 00011A42 C8000000                	enter 0, 0
 24564 00011A46 488B4520                	mov rax, PARAM(0)	; param e1
 24565 00011A4A 50                      	push rax
 24566 00011A4B 6A01                    	push 1	; arg count
 24567 00011A4D 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
 24568 00011A55 803805                  	cmp byte [rax], T_undefined
 24569 00011A58 0F847E3B0000            	je L_error_fvar_undefined
 24570 00011A5E 803804                  	cmp byte [rax], T_closure
 24571 00011A61 0F85F93B0000            	jne L_error_non_closure
 24572 00011A67 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24573 00011A6A FF5009                  	call SOB_CLOSURE_CODE(rax)
 24574                                  
 24575 00011A6D 483D[02000000]          	cmp rax, sob_boolean_false
 24576 00011A73 7429                    	je .L_if_else_772f
 24577 00011A75 488B4528                	mov rax, PARAM(1)	; param e2
 24578 00011A79 50                      	push rax
 24579 00011A7A 6A01                    	push 1	; arg count
 24580 00011A7C 488B0425[B90D0000]      	mov rax, qword [free_var_1]	; free var pair?
 24581 00011A84 803805                  	cmp byte [rax], T_undefined
 24582 00011A87 0F844F3B0000            	je L_error_fvar_undefined
 24583 00011A8D 803804                  	cmp byte [rax], T_closure
 24584 00011A90 0F85CA3B0000            	jne L_error_non_closure
 24585 00011A96 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24586 00011A99 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24587                                  
 24588 00011A9C EB0A                    	jmp .L_if_end_772f
 24589                                  
 24590                                  	.L_if_else_772f:
 24591 00011A9E 48B8-                   	mov rax, L_constants + 2
 24591 00011AA0 [0200000000000000] 
 24592                                  
 24593                                  	.L_if_end_772f:
 24594                                  
 24595 00011AA8 483D[02000000]          	cmp rax, sob_boolean_false
 24596 00011AAE 0F8437010000            	je .L_if_else_772e
 24597 00011AB4 488B4528                	mov rax, PARAM(1)	; param e2
 24598 00011AB8 50                      	push rax
 24599 00011AB9 6A01                    	push 1	; arg count
 24600 00011ABB 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 24601 00011AC3 803805                  	cmp byte [rax], T_undefined
 24602 00011AC6 0F84103B0000            	je L_error_fvar_undefined
 24603 00011ACC 803804                  	cmp byte [rax], T_closure
 24604 00011ACF 0F858B3B0000            	jne L_error_non_closure
 24605 00011AD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24606 00011AD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24607 00011ADB 50                      	push rax
 24608 00011ADC 488B4520                	mov rax, PARAM(0)	; param e1
 24609 00011AE0 50                      	push rax
 24610 00011AE1 6A01                    	push 1	; arg count
 24611 00011AE3 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 24612 00011AEB 803805                  	cmp byte [rax], T_undefined
 24613 00011AEE 0F84E83A0000            	je L_error_fvar_undefined
 24614 00011AF4 803804                  	cmp byte [rax], T_closure
 24615 00011AF7 0F85633B0000            	jne L_error_non_closure
 24616 00011AFD FF7001                  	push SOB_CLOSURE_ENV(rax)
 24617 00011B00 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24618 00011B03 50                      	push rax
 24619 00011B04 6A02                    	push 2	; arg count
 24620 00011B06 488B0425[8C180000]      	mov rax, qword [free_var_164]	; free var equal?
 24621 00011B0E 803805                  	cmp byte [rax], T_undefined
 24622 00011B11 0F84C53A0000            	je L_error_fvar_undefined
 24623 00011B17 803804                  	cmp byte [rax], T_closure
 24624 00011B1A 0F85403B0000            	jne L_error_non_closure
 24625 00011B20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24626 00011B23 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24627                                  
 24628 00011B26 483D[02000000]          	cmp rax, sob_boolean_false
 24629 00011B2C 0F84AA000000            	je .L_if_else_7730
 24630                                  	; preparing a tail-call
 24631 00011B32 488B4528                	mov rax, PARAM(1)	; param e2
 24632 00011B36 50                      	push rax
 24633 00011B37 6A01                    	push 1	; arg count
 24634 00011B39 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 24635 00011B41 803805                  	cmp byte [rax], T_undefined
 24636 00011B44 0F84923A0000            	je L_error_fvar_undefined
 24637 00011B4A 803804                  	cmp byte [rax], T_closure
 24638 00011B4D 0F850D3B0000            	jne L_error_non_closure
 24639 00011B53 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24640 00011B56 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24641 00011B59 50                      	push rax
 24642 00011B5A 488B4520                	mov rax, PARAM(0)	; param e1
 24643 00011B5E 50                      	push rax
 24644 00011B5F 6A01                    	push 1	; arg count
 24645 00011B61 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 24646 00011B69 803805                  	cmp byte [rax], T_undefined
 24647 00011B6C 0F846A3A0000            	je L_error_fvar_undefined
 24648 00011B72 803804                  	cmp byte [rax], T_closure
 24649 00011B75 0F85E53A0000            	jne L_error_non_closure
 24650 00011B7B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24651 00011B7E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24652 00011B81 50                      	push rax
 24653 00011B82 6A02                    	push 2	; arg count
 24654 00011B84 488B0425[8C180000]      	mov rax, qword [free_var_164]	; free var equal?
 24655 00011B8C 803805                  	cmp byte [rax], T_undefined
 24656 00011B8F 0F84473A0000            	je L_error_fvar_undefined
 24657 00011B95 803804                  	cmp byte [rax], T_closure
 24658 00011B98 0F85C23A0000            	jne L_error_non_closure
 24659 00011B9E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24660                                  
 24661                                  	; recycling the current frame
 24662 00011BA1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24663 00011BA4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24664 00011BA7 B906000000              	mov rcx, 2 + 4
 24665 00011BAC 488B5D18                	mov rbx, COUNT
 24666 00011BB0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24667 00011BB5 488D55F8                	lea rdx, [rbp - 8 * 1]
 24668                                  .L_tc_recycle_frame_loop_8f79:
 24669 00011BB9 4883F900                	cmp rcx, 0
 24670 00011BBD 7413                    	je .L_tc_recycle_frame_done_8f79
 24671 00011BBF 488B32                  	mov rsi, qword [rdx]
 24672 00011BC2 488933                  	mov qword [rbx], rsi
 24673 00011BC5 48FFC9                  	dec rcx
 24674 00011BC8 4883EB08                	sub rbx, 8 * 1
 24675 00011BCC 4883EA08                	sub rdx, 8 * 1
 24676 00011BD0 EBE7                    	jmp .L_tc_recycle_frame_loop_8f79
 24677                                  .L_tc_recycle_frame_done_8f79:
 24678 00011BD2 488D6308                	lea rsp, [rbx + 8 * 1]
 24679 00011BD6 5D                      	pop rbp	; the proc will restore it!
 24680 00011BD7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24681                                  
 24682 00011BDA EB0A                    	jmp .L_if_end_7730
 24683                                  
 24684                                  	.L_if_else_7730:
 24685 00011BDC 48B8-                   	mov rax, L_constants + 2
 24685 00011BDE [0200000000000000] 
 24686                                  
 24687                                  	.L_if_end_7730:
 24688                                  
 24689 00011BE6 E901050000              	jmp .L_if_end_772e
 24690                                  
 24691                                  	.L_if_else_772e:
 24692 00011BEB 488B4520                	mov rax, PARAM(0)	; param e1
 24693 00011BEF 50                      	push rax
 24694 00011BF0 6A01                    	push 1	; arg count
 24695 00011BF2 488B0425[0E0E0000]      	mov rax, qword [free_var_6]	; free var vector?
 24696 00011BFA 803805                  	cmp byte [rax], T_undefined
 24697 00011BFD 0F84D9390000            	je L_error_fvar_undefined
 24698 00011C03 803804                  	cmp byte [rax], T_closure
 24699 00011C06 0F85543A0000            	jne L_error_non_closure
 24700 00011C0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24701 00011C0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24702                                  
 24703 00011C12 483D[02000000]          	cmp rax, sob_boolean_false
 24704 00011C18 0F84AF000000            	je .L_if_else_7732
 24705 00011C1E 488B4528                	mov rax, PARAM(1)	; param e2
 24706 00011C22 50                      	push rax
 24707 00011C23 6A01                    	push 1	; arg count
 24708 00011C25 488B0425[0E0E0000]      	mov rax, qword [free_var_6]	; free var vector?
 24709 00011C2D 803805                  	cmp byte [rax], T_undefined
 24710 00011C30 0F84A6390000            	je L_error_fvar_undefined
 24711 00011C36 803804                  	cmp byte [rax], T_closure
 24712 00011C39 0F85213A0000            	jne L_error_non_closure
 24713 00011C3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24714 00011C42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24715                                  
 24716 00011C45 483D[02000000]          	cmp rax, sob_boolean_false
 24717 00011C4B 7474                    	je .L_if_else_7733
 24718 00011C4D 488B4528                	mov rax, PARAM(1)	; param e2
 24719 00011C51 50                      	push rax
 24720 00011C52 6A01                    	push 1	; arg count
 24721 00011C54 488B0425[EB0E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 24722 00011C5C 803805                  	cmp byte [rax], T_undefined
 24723 00011C5F 0F8477390000            	je L_error_fvar_undefined
 24724 00011C65 803804                  	cmp byte [rax], T_closure
 24725 00011C68 0F85F2390000            	jne L_error_non_closure
 24726 00011C6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24727 00011C71 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24728 00011C74 50                      	push rax
 24729 00011C75 488B4520                	mov rax, PARAM(0)	; param e1
 24730 00011C79 50                      	push rax
 24731 00011C7A 6A01                    	push 1	; arg count
 24732 00011C7C 488B0425[EB0E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 24733 00011C84 803805                  	cmp byte [rax], T_undefined
 24734 00011C87 0F844F390000            	je L_error_fvar_undefined
 24735 00011C8D 803804                  	cmp byte [rax], T_closure
 24736 00011C90 0F85CA390000            	jne L_error_non_closure
 24737 00011C96 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24738 00011C99 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24739 00011C9C 50                      	push rax
 24740 00011C9D 6A02                    	push 2	; arg count
 24741 00011C9F 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 24742 00011CA7 803805                  	cmp byte [rax], T_undefined
 24743 00011CAA 0F842C390000            	je L_error_fvar_undefined
 24744 00011CB0 803804                  	cmp byte [rax], T_closure
 24745 00011CB3 0F85A7390000            	jne L_error_non_closure
 24746 00011CB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24747 00011CBC FF5009                  	call SOB_CLOSURE_CODE(rax)
 24748                                  
 24749 00011CBF EB0A                    	jmp .L_if_end_7733
 24750                                  
 24751                                  	.L_if_else_7733:
 24752 00011CC1 48B8-                   	mov rax, L_constants + 2
 24752 00011CC3 [0200000000000000] 
 24753                                  
 24754                                  	.L_if_end_7733:
 24755                                  
 24756 00011CCB EB0A                    	jmp .L_if_end_7732
 24757                                  
 24758                                  	.L_if_else_7732:
 24759 00011CCD 48B8-                   	mov rax, L_constants + 2
 24759 00011CCF [0200000000000000] 
 24760                                  
 24761                                  	.L_if_end_7732:
 24762                                  
 24763 00011CD7 483D[02000000]          	cmp rax, sob_boolean_false
 24764 00011CDD 0F84AD000000            	je .L_if_else_7731
 24765                                  	; preparing a tail-call
 24766 00011CE3 488B4528                	mov rax, PARAM(1)	; param e2
 24767 00011CE7 50                      	push rax
 24768 00011CE8 6A01                    	push 1	; arg count
 24769 00011CEA 488B0425[15180000]      	mov rax, qword [free_var_157]	; free var vector->list
 24770 00011CF2 803805                  	cmp byte [rax], T_undefined
 24771 00011CF5 0F84E1380000            	je L_error_fvar_undefined
 24772 00011CFB 803804                  	cmp byte [rax], T_closure
 24773 00011CFE 0F855C390000            	jne L_error_non_closure
 24774 00011D04 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24775 00011D07 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24776 00011D0A 50                      	push rax
 24777 00011D0B 488B4520                	mov rax, PARAM(0)	; param e1
 24778 00011D0F 50                      	push rax
 24779 00011D10 6A01                    	push 1	; arg count
 24780 00011D12 488B0425[15180000]      	mov rax, qword [free_var_157]	; free var vector->list
 24781 00011D1A 803805                  	cmp byte [rax], T_undefined
 24782 00011D1D 0F84B9380000            	je L_error_fvar_undefined
 24783 00011D23 803804                  	cmp byte [rax], T_closure
 24784 00011D26 0F8534390000            	jne L_error_non_closure
 24785 00011D2C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24786 00011D2F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24787 00011D32 50                      	push rax
 24788 00011D33 6A02                    	push 2	; arg count
 24789 00011D35 488B0425[8C180000]      	mov rax, qword [free_var_164]	; free var equal?
 24790 00011D3D 803805                  	cmp byte [rax], T_undefined
 24791 00011D40 0F8496380000            	je L_error_fvar_undefined
 24792 00011D46 803804                  	cmp byte [rax], T_closure
 24793 00011D49 0F8511390000            	jne L_error_non_closure
 24794 00011D4F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24795                                  
 24796                                  	; recycling the current frame
 24797 00011D52 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24798 00011D55 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24799 00011D58 B906000000              	mov rcx, 2 + 4
 24800 00011D5D 488B5D18                	mov rbx, COUNT
 24801 00011D61 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24802 00011D66 488D55F8                	lea rdx, [rbp - 8 * 1]
 24803                                  .L_tc_recycle_frame_loop_8f7a:
 24804 00011D6A 4883F900                	cmp rcx, 0
 24805 00011D6E 7413                    	je .L_tc_recycle_frame_done_8f7a
 24806 00011D70 488B32                  	mov rsi, qword [rdx]
 24807 00011D73 488933                  	mov qword [rbx], rsi
 24808 00011D76 48FFC9                  	dec rcx
 24809 00011D79 4883EB08                	sub rbx, 8 * 1
 24810 00011D7D 4883EA08                	sub rdx, 8 * 1
 24811 00011D81 EBE7                    	jmp .L_tc_recycle_frame_loop_8f7a
 24812                                  .L_tc_recycle_frame_done_8f7a:
 24813 00011D83 488D6308                	lea rsp, [rbx + 8 * 1]
 24814 00011D87 5D                      	pop rbp	; the proc will restore it!
 24815 00011D88 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24816                                  
 24817 00011D8B E95C030000              	jmp .L_if_end_7731
 24818                                  
 24819                                  	.L_if_else_7731:
 24820 00011D90 488B4520                	mov rax, PARAM(0)	; param e1
 24821 00011D94 50                      	push rax
 24822 00011D95 6A01                    	push 1	; arg count
 24823 00011D97 488B0425[EC0D0000]      	mov rax, qword [free_var_4]	; free var string?
 24824 00011D9F 803805                  	cmp byte [rax], T_undefined
 24825 00011DA2 0F8434380000            	je L_error_fvar_undefined
 24826 00011DA8 803804                  	cmp byte [rax], T_closure
 24827 00011DAB 0F85AF380000            	jne L_error_non_closure
 24828 00011DB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24829 00011DB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24830                                  
 24831 00011DB7 483D[02000000]          	cmp rax, sob_boolean_false
 24832 00011DBD 0F84AF000000            	je .L_if_else_7735
 24833 00011DC3 488B4528                	mov rax, PARAM(1)	; param e2
 24834 00011DC7 50                      	push rax
 24835 00011DC8 6A01                    	push 1	; arg count
 24836 00011DCA 488B0425[EC0D0000]      	mov rax, qword [free_var_4]	; free var string?
 24837 00011DD2 803805                  	cmp byte [rax], T_undefined
 24838 00011DD5 0F8401380000            	je L_error_fvar_undefined
 24839 00011DDB 803804                  	cmp byte [rax], T_closure
 24840 00011DDE 0F857C380000            	jne L_error_non_closure
 24841 00011DE4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24842 00011DE7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24843                                  
 24844 00011DEA 483D[02000000]          	cmp rax, sob_boolean_false
 24845 00011DF0 7474                    	je .L_if_else_7736
 24846 00011DF2 488B4528                	mov rax, PARAM(1)	; param e2
 24847 00011DF6 50                      	push rax
 24848 00011DF7 6A01                    	push 1	; arg count
 24849 00011DF9 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 24850 00011E01 803805                  	cmp byte [rax], T_undefined
 24851 00011E04 0F84D2370000            	je L_error_fvar_undefined
 24852 00011E0A 803804                  	cmp byte [rax], T_closure
 24853 00011E0D 0F854D380000            	jne L_error_non_closure
 24854 00011E13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24855 00011E16 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24856 00011E19 50                      	push rax
 24857 00011E1A 488B4520                	mov rax, PARAM(0)	; param e1
 24858 00011E1E 50                      	push rax
 24859 00011E1F 6A01                    	push 1	; arg count
 24860 00011E21 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 24861 00011E29 803805                  	cmp byte [rax], T_undefined
 24862 00011E2C 0F84AA370000            	je L_error_fvar_undefined
 24863 00011E32 803804                  	cmp byte [rax], T_closure
 24864 00011E35 0F8525380000            	jne L_error_non_closure
 24865 00011E3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24866 00011E3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24867 00011E41 50                      	push rax
 24868 00011E42 6A02                    	push 2	; arg count
 24869 00011E44 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 24870 00011E4C 803805                  	cmp byte [rax], T_undefined
 24871 00011E4F 0F8487370000            	je L_error_fvar_undefined
 24872 00011E55 803804                  	cmp byte [rax], T_closure
 24873 00011E58 0F8502380000            	jne L_error_non_closure
 24874 00011E5E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24875 00011E61 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24876                                  
 24877 00011E64 EB0A                    	jmp .L_if_end_7736
 24878                                  
 24879                                  	.L_if_else_7736:
 24880 00011E66 48B8-                   	mov rax, L_constants + 2
 24880 00011E68 [0200000000000000] 
 24881                                  
 24882                                  	.L_if_end_7736:
 24883                                  
 24884 00011E70 EB0A                    	jmp .L_if_end_7735
 24885                                  
 24886                                  	.L_if_else_7735:
 24887 00011E72 48B8-                   	mov rax, L_constants + 2
 24887 00011E74 [0200000000000000] 
 24888                                  
 24889                                  	.L_if_end_7735:
 24890                                  
 24891 00011E7C 483D[02000000]          	cmp rax, sob_boolean_false
 24892 00011E82 7467                    	je .L_if_else_7734
 24893                                  	; preparing a tail-call
 24894 00011E84 488B4528                	mov rax, PARAM(1)	; param e2
 24895 00011E88 50                      	push rax
 24896 00011E89 488B4520                	mov rax, PARAM(0)	; param e1
 24897 00011E8D 50                      	push rax
 24898 00011E8E 6A02                    	push 2	; arg count
 24899 00011E90 488B0425[5A170000]      	mov rax, qword [free_var_146]	; free var string=?
 24900 00011E98 803805                  	cmp byte [rax], T_undefined
 24901 00011E9B 0F843B370000            	je L_error_fvar_undefined
 24902 00011EA1 803804                  	cmp byte [rax], T_closure
 24903 00011EA4 0F85B6370000            	jne L_error_non_closure
 24904 00011EAA FF7001                  	push SOB_CLOSURE_ENV(rax)
 24905                                  
 24906                                  	; recycling the current frame
 24907 00011EAD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24908 00011EB0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24909 00011EB3 B906000000              	mov rcx, 2 + 4
 24910 00011EB8 488B5D18                	mov rbx, COUNT
 24911 00011EBC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24912 00011EC1 488D55F8                	lea rdx, [rbp - 8 * 1]
 24913                                  .L_tc_recycle_frame_loop_8f7b:
 24914 00011EC5 4883F900                	cmp rcx, 0
 24915 00011EC9 7413                    	je .L_tc_recycle_frame_done_8f7b
 24916 00011ECB 488B32                  	mov rsi, qword [rdx]
 24917 00011ECE 488933                  	mov qword [rbx], rsi
 24918 00011ED1 48FFC9                  	dec rcx
 24919 00011ED4 4883EB08                	sub rbx, 8 * 1
 24920 00011ED8 4883EA08                	sub rdx, 8 * 1
 24921 00011EDC EBE7                    	jmp .L_tc_recycle_frame_loop_8f7b
 24922                                  .L_tc_recycle_frame_done_8f7b:
 24923 00011EDE 488D6308                	lea rsp, [rbx + 8 * 1]
 24924 00011EE2 5D                      	pop rbp	; the proc will restore it!
 24925 00011EE3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24926                                  
 24927 00011EE6 E901020000              	jmp .L_if_end_7734
 24928                                  
 24929                                  	.L_if_else_7734:
 24930 00011EEB 488B4520                	mov rax, PARAM(0)	; param e1
 24931 00011EEF 50                      	push rax
 24932 00011EF0 6A01                    	push 1	; arg count
 24933 00011EF2 488B0425[630E0000]      	mov rax, qword [free_var_11]	; free var number?
 24934 00011EFA 803805                  	cmp byte [rax], T_undefined
 24935 00011EFD 0F84D9360000            	je L_error_fvar_undefined
 24936 00011F03 803804                  	cmp byte [rax], T_closure
 24937 00011F06 0F8554370000            	jne L_error_non_closure
 24938 00011F0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24939 00011F0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24940                                  
 24941 00011F12 483D[02000000]          	cmp rax, sob_boolean_false
 24942 00011F18 7429                    	je .L_if_else_7738
 24943 00011F1A 488B4528                	mov rax, PARAM(1)	; param e2
 24944 00011F1E 50                      	push rax
 24945 00011F1F 6A01                    	push 1	; arg count
 24946 00011F21 488B0425[630E0000]      	mov rax, qword [free_var_11]	; free var number?
 24947 00011F29 803805                  	cmp byte [rax], T_undefined
 24948 00011F2C 0F84AA360000            	je L_error_fvar_undefined
 24949 00011F32 803804                  	cmp byte [rax], T_closure
 24950 00011F35 0F8525370000            	jne L_error_non_closure
 24951 00011F3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24952 00011F3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24953                                  
 24954 00011F41 EB0A                    	jmp .L_if_end_7738
 24955                                  
 24956                                  	.L_if_else_7738:
 24957 00011F43 48B8-                   	mov rax, L_constants + 2
 24957 00011F45 [0200000000000000] 
 24958                                  
 24959                                  	.L_if_end_7738:
 24960                                  
 24961 00011F4D 483D[02000000]          	cmp rax, sob_boolean_false
 24962 00011F53 7467                    	je .L_if_else_7737
 24963                                  	; preparing a tail-call
 24964 00011F55 488B4528                	mov rax, PARAM(1)	; param e2
 24965 00011F59 50                      	push rax
 24966 00011F5A 488B4520                	mov rax, PARAM(0)	; param e1
 24967 00011F5E 50                      	push rax
 24968 00011F5F 6A02                    	push 2	; arg count
 24969 00011F61 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 24970 00011F69 803805                  	cmp byte [rax], T_undefined
 24971 00011F6C 0F846A360000            	je L_error_fvar_undefined
 24972 00011F72 803804                  	cmp byte [rax], T_closure
 24973 00011F75 0F85E5360000            	jne L_error_non_closure
 24974 00011F7B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24975                                  
 24976                                  	; recycling the current frame
 24977 00011F7E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24978 00011F81 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24979 00011F84 B906000000              	mov rcx, 2 + 4
 24980 00011F89 488B5D18                	mov rbx, COUNT
 24981 00011F8D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24982 00011F92 488D55F8                	lea rdx, [rbp - 8 * 1]
 24983                                  .L_tc_recycle_frame_loop_8f7c:
 24984 00011F96 4883F900                	cmp rcx, 0
 24985 00011F9A 7413                    	je .L_tc_recycle_frame_done_8f7c
 24986 00011F9C 488B32                  	mov rsi, qword [rdx]
 24987 00011F9F 488933                  	mov qword [rbx], rsi
 24988 00011FA2 48FFC9                  	dec rcx
 24989 00011FA5 4883EB08                	sub rbx, 8 * 1
 24990 00011FA9 4883EA08                	sub rdx, 8 * 1
 24991 00011FAD EBE7                    	jmp .L_tc_recycle_frame_loop_8f7c
 24992                                  .L_tc_recycle_frame_done_8f7c:
 24993 00011FAF 488D6308                	lea rsp, [rbx + 8 * 1]
 24994 00011FB3 5D                      	pop rbp	; the proc will restore it!
 24995 00011FB4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24996                                  
 24997 00011FB7 E930010000              	jmp .L_if_end_7737
 24998                                  
 24999                                  	.L_if_else_7737:
 25000 00011FBC 488B4520                	mov rax, PARAM(0)	; param e1
 25001 00011FC0 50                      	push rax
 25002 00011FC1 6A01                    	push 1	; arg count
 25003 00011FC3 488B0425[DB0D0000]      	mov rax, qword [free_var_3]	; free var char?
 25004 00011FCB 803805                  	cmp byte [rax], T_undefined
 25005 00011FCE 0F8408360000            	je L_error_fvar_undefined
 25006 00011FD4 803804                  	cmp byte [rax], T_closure
 25007 00011FD7 0F8583360000            	jne L_error_non_closure
 25008 00011FDD FF7001                  	push SOB_CLOSURE_ENV(rax)
 25009 00011FE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25010                                  
 25011 00011FE3 483D[02000000]          	cmp rax, sob_boolean_false
 25012 00011FE9 7429                    	je .L_if_else_773a
 25013 00011FEB 488B4528                	mov rax, PARAM(1)	; param e2
 25014 00011FEF 50                      	push rax
 25015 00011FF0 6A01                    	push 1	; arg count
 25016 00011FF2 488B0425[DB0D0000]      	mov rax, qword [free_var_3]	; free var char?
 25017 00011FFA 803805                  	cmp byte [rax], T_undefined
 25018 00011FFD 0F84D9350000            	je L_error_fvar_undefined
 25019 00012003 803804                  	cmp byte [rax], T_closure
 25020 00012006 0F8554360000            	jne L_error_non_closure
 25021 0001200C FF7001                  	push SOB_CLOSURE_ENV(rax)
 25022 0001200F FF5009                  	call SOB_CLOSURE_CODE(rax)
 25023                                  
 25024 00012012 EB0A                    	jmp .L_if_end_773a
 25025                                  
 25026                                  	.L_if_else_773a:
 25027 00012014 48B8-                   	mov rax, L_constants + 2
 25027 00012016 [0200000000000000] 
 25028                                  
 25029                                  	.L_if_end_773a:
 25030                                  
 25031 0001201E 483D[02000000]          	cmp rax, sob_boolean_false
 25032 00012024 7464                    	je .L_if_else_7739
 25033                                  	; preparing a tail-call
 25034 00012026 488B4528                	mov rax, PARAM(1)	; param e2
 25035 0001202A 50                      	push rax
 25036 0001202B 488B4520                	mov rax, PARAM(0)	; param e1
 25037 0001202F 50                      	push rax
 25038 00012030 6A02                    	push 2	; arg count
 25039 00012032 488B0425[4A160000]      	mov rax, qword [free_var_130]	; free var char=?
 25040 0001203A 803805                  	cmp byte [rax], T_undefined
 25041 0001203D 0F8499350000            	je L_error_fvar_undefined
 25042 00012043 803804                  	cmp byte [rax], T_closure
 25043 00012046 0F8514360000            	jne L_error_non_closure
 25044 0001204C FF7001                  	push SOB_CLOSURE_ENV(rax)
 25045                                  
 25046                                  	; recycling the current frame
 25047 0001204F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25048 00012052 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25049 00012055 B906000000              	mov rcx, 2 + 4
 25050 0001205A 488B5D18                	mov rbx, COUNT
 25051 0001205E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25052 00012063 488D55F8                	lea rdx, [rbp - 8 * 1]
 25053                                  .L_tc_recycle_frame_loop_8f7d:
 25054 00012067 4883F900                	cmp rcx, 0
 25055 0001206B 7413                    	je .L_tc_recycle_frame_done_8f7d
 25056 0001206D 488B32                  	mov rsi, qword [rdx]
 25057 00012070 488933                  	mov qword [rbx], rsi
 25058 00012073 48FFC9                  	dec rcx
 25059 00012076 4883EB08                	sub rbx, 8 * 1
 25060 0001207A 4883EA08                	sub rdx, 8 * 1
 25061 0001207E EBE7                    	jmp .L_tc_recycle_frame_loop_8f7d
 25062                                  .L_tc_recycle_frame_done_8f7d:
 25063 00012080 488D6308                	lea rsp, [rbx + 8 * 1]
 25064 00012084 5D                      	pop rbp	; the proc will restore it!
 25065 00012085 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25066                                  
 25067 00012088 EB62                    	jmp .L_if_end_7739
 25068                                  
 25069                                  	.L_if_else_7739:
 25070                                  	; preparing a tail-call
 25071 0001208A 488B4528                	mov rax, PARAM(1)	; param e2
 25072 0001208E 50                      	push rax
 25073 0001208F 488B4520                	mov rax, PARAM(0)	; param e1
 25074 00012093 50                      	push rax
 25075 00012094 6A02                    	push 2	; arg count
 25076 00012096 488B0425[B5110000]      	mov rax, qword [free_var_61]	; free var eq?
 25077 0001209E 803805                  	cmp byte [rax], T_undefined
 25078 000120A1 0F8435350000            	je L_error_fvar_undefined
 25079 000120A7 803804                  	cmp byte [rax], T_closure
 25080 000120AA 0F85B0350000            	jne L_error_non_closure
 25081 000120B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25082                                  
 25083                                  	; recycling the current frame
 25084 000120B3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25085 000120B6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25086 000120B9 B906000000              	mov rcx, 2 + 4
 25087 000120BE 488B5D18                	mov rbx, COUNT
 25088 000120C2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25089 000120C7 488D55F8                	lea rdx, [rbp - 8 * 1]
 25090                                  .L_tc_recycle_frame_loop_8f7e:
 25091 000120CB 4883F900                	cmp rcx, 0
 25092 000120CF 7413                    	je .L_tc_recycle_frame_done_8f7e
 25093 000120D1 488B32                  	mov rsi, qword [rdx]
 25094 000120D4 488933                  	mov qword [rbx], rsi
 25095 000120D7 48FFC9                  	dec rcx
 25096 000120DA 4883EB08                	sub rbx, 8 * 1
 25097 000120DE 4883EA08                	sub rdx, 8 * 1
 25098 000120E2 EBE7                    	jmp .L_tc_recycle_frame_loop_8f7e
 25099                                  .L_tc_recycle_frame_done_8f7e:
 25100 000120E4 488D6308                	lea rsp, [rbx + 8 * 1]
 25101 000120E8 5D                      	pop rbp	; the proc will restore it!
 25102 000120E9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25103                                  
 25104                                  	.L_if_end_7739:
 25105                                  
 25106                                  	.L_if_end_7737:
 25107                                  
 25108                                  	.L_if_end_7734:
 25109                                  
 25110                                  	.L_if_end_7731:
 25111                                  
 25112                                  	.L_if_end_772e:
 25113 000120EC C9                      	leave
 25114 000120ED C22000                  	ret AND_KILL_FRAME(2)
 25115                                  .L_lambda_simple_end_6d85:	; new closure is in rax
 25116 000120F0 48890425[8C180000]      	mov qword [free_var_164], rax
 25117 000120F8 48B8-                   	mov rax, sob_void
 25117 000120FA [0000000000000000] 
 25118                                  
 25119 00012102 4889C7                  	mov rdi, rax
 25120 00012105 E811370000              	call print_sexpr_if_not_void
 25121                                  
 25122 0001210A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25123 0001210F E8F5350000              	call malloc
 25124 00012114 50                      	push rax
 25125 00012115 BF00000000              	mov rdi, 8 * 0	; new rib
 25126 0001211A E8EA350000              	call malloc
 25127 0001211F 50                      	push rax
 25128 00012120 BF08000000              	mov rdi, 8 * 1	; extended env
 25129 00012125 E8DF350000              	call malloc
 25130 0001212A 488B7D10                	mov rdi, ENV
 25131 0001212E BE00000000              	mov rsi, 0
 25132 00012133 BA01000000              	mov rdx, 1
 25133                                  .L_lambda_simple_env_loop_6d86:	; ext_env[i + 1] <-- env[i]
 25134 00012138 4883FE00                	cmp rsi, 0
 25135 0001213C 7410                    	je .L_lambda_simple_env_end_6d86
 25136 0001213E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25137 00012142 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25138 00012146 48FFC6                  	inc rsi
 25139 00012149 48FFC2                  	inc rdx
 25140 0001214C EBEA                    	jmp .L_lambda_simple_env_loop_6d86
 25141                                  .L_lambda_simple_env_end_6d86:
 25142 0001214E 5B                      	pop rbx
 25143 0001214F BE00000000              	mov rsi, 0
 25144                                  .L_lambda_simple_params_loop_6d86:	; copy params
 25145 00012154 4883FE00                	cmp rsi, 0
 25146 00012158 740E                    	je .L_lambda_simple_params_end_6d86
 25147 0001215A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25148 0001215F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25149 00012163 48FFC6                  	inc rsi
 25150 00012166 EBEC                    	jmp .L_lambda_simple_params_loop_6d86
 25151                                  .L_lambda_simple_params_end_6d86:
 25152 00012168 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25153 0001216B 4889C3                  	mov rbx, rax
 25154 0001216E 58                      	pop rax
 25155 0001216F C60004                  	mov byte [rax], T_closure
 25156 00012172 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25157 00012176 48C74009[83210100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d86
 25158 0001217E E997010000              	jmp .L_lambda_simple_end_6d86
 25159                                  .L_lambda_simple_code_6d86:	; lambda-simple body
 25160 00012183 48837C241002            	cmp qword [rsp + 8 * 2], 2
 25161 00012189 740B                    	je .L_lambda_simple_arity_check_ok_6d86
 25162 0001218B FF742410                	push qword [rsp + 8 * 2]
 25163 0001218F 6A02                    	push 2
 25164 00012191 E92C350000              	jmp L_error_incorrect_arity_simple
 25165                                  .L_lambda_simple_arity_check_ok_6d86:
 25166 00012196 C8000000                	enter 0, 0
 25167 0001219A 488B4528                	mov rax, PARAM(1)	; param s
 25168 0001219E 50                      	push rax
 25169 0001219F 6A01                    	push 1	; arg count
 25170 000121A1 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 25171 000121A9 803805                  	cmp byte [rax], T_undefined
 25172 000121AC 0F842A340000            	je L_error_fvar_undefined
 25173 000121B2 803804                  	cmp byte [rax], T_closure
 25174 000121B5 0F85A5340000            	jne L_error_non_closure
 25175 000121BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 25176 000121BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 25177                                  
 25178 000121C1 483D[02000000]          	cmp rax, sob_boolean_false
 25179 000121C7 740F                    	je .L_if_else_773b
 25180 000121C9 48B8-                   	mov rax, L_constants + 2
 25180 000121CB [0200000000000000] 
 25181                                  
 25182 000121D3 E93E010000              	jmp .L_if_end_773b
 25183                                  
 25184                                  	.L_if_else_773b:
 25185 000121D8 488B4520                	mov rax, PARAM(0)	; param a
 25186 000121DC 50                      	push rax
 25187 000121DD 488B4528                	mov rax, PARAM(1)	; param s
 25188 000121E1 50                      	push rax
 25189 000121E2 6A01                    	push 1	; arg count
 25190 000121E4 488B0425[92120000]      	mov rax, qword [free_var_74]	; free var caar
 25191 000121EC 803805                  	cmp byte [rax], T_undefined
 25192 000121EF 0F84E7330000            	je L_error_fvar_undefined
 25193 000121F5 803804                  	cmp byte [rax], T_closure
 25194 000121F8 0F8562340000            	jne L_error_non_closure
 25195 000121FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 25196 00012201 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25197 00012204 50                      	push rax
 25198 00012205 6A02                    	push 2	; arg count
 25199 00012207 488B0425[B5110000]      	mov rax, qword [free_var_61]	; free var eq?
 25200 0001220F 803805                  	cmp byte [rax], T_undefined
 25201 00012212 0F84C4330000            	je L_error_fvar_undefined
 25202 00012218 803804                  	cmp byte [rax], T_closure
 25203 0001221B 0F853F340000            	jne L_error_non_closure
 25204 00012221 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25205 00012224 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25206                                  
 25207 00012227 483D[02000000]          	cmp rax, sob_boolean_false
 25208 0001222D 7462                    	je .L_if_else_773c
 25209                                  	; preparing a tail-call
 25210 0001222F 488B4528                	mov rax, PARAM(1)	; param s
 25211 00012233 50                      	push rax
 25212 00012234 6A01                    	push 1	; arg count
 25213 00012236 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 25214 0001223E 803805                  	cmp byte [rax], T_undefined
 25215 00012241 0F8495330000            	je L_error_fvar_undefined
 25216 00012247 803804                  	cmp byte [rax], T_closure
 25217 0001224A 0F8510340000            	jne L_error_non_closure
 25218 00012250 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25219                                  
 25220                                  	; recycling the current frame
 25221 00012253 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25222 00012256 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25223 00012259 B905000000              	mov rcx, 1 + 4
 25224 0001225E 488B5D18                	mov rbx, COUNT
 25225 00012262 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25226 00012267 488D55F8                	lea rdx, [rbp - 8 * 1]
 25227                                  .L_tc_recycle_frame_loop_8f7f:
 25228 0001226B 4883F900                	cmp rcx, 0
 25229 0001226F 7413                    	je .L_tc_recycle_frame_done_8f7f
 25230 00012271 488B32                  	mov rsi, qword [rdx]
 25231 00012274 488933                  	mov qword [rbx], rsi
 25232 00012277 48FFC9                  	dec rcx
 25233 0001227A 4883EB08                	sub rbx, 8 * 1
 25234 0001227E 4883EA08                	sub rdx, 8 * 1
 25235 00012282 EBE7                    	jmp .L_tc_recycle_frame_loop_8f7f
 25236                                  .L_tc_recycle_frame_done_8f7f:
 25237 00012284 488D6308                	lea rsp, [rbx + 8 * 1]
 25238 00012288 5D                      	pop rbp	; the proc will restore it!
 25239 00012289 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25240                                  
 25241 0001228C E985000000              	jmp .L_if_end_773c
 25242                                  
 25243                                  	.L_if_else_773c:
 25244                                  	; preparing a tail-call
 25245 00012291 488B4528                	mov rax, PARAM(1)	; param s
 25246 00012295 50                      	push rax
 25247 00012296 6A01                    	push 1	; arg count
 25248 00012298 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 25249 000122A0 803805                  	cmp byte [rax], T_undefined
 25250 000122A3 0F8433330000            	je L_error_fvar_undefined
 25251 000122A9 803804                  	cmp byte [rax], T_closure
 25252 000122AC 0F85AE330000            	jne L_error_non_closure
 25253 000122B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25254 000122B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25255 000122B8 50                      	push rax
 25256 000122B9 488B4520                	mov rax, PARAM(0)	; param a
 25257 000122BD 50                      	push rax
 25258 000122BE 6A02                    	push 2	; arg count
 25259 000122C0 488B0425[9D180000]      	mov rax, qword [free_var_165]	; free var assoc
 25260 000122C8 803805                  	cmp byte [rax], T_undefined
 25261 000122CB 0F840B330000            	je L_error_fvar_undefined
 25262 000122D1 803804                  	cmp byte [rax], T_closure
 25263 000122D4 0F8586330000            	jne L_error_non_closure
 25264 000122DA FF7001                  	push SOB_CLOSURE_ENV(rax)
 25265                                  
 25266                                  	; recycling the current frame
 25267 000122DD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25268 000122E0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25269 000122E3 B906000000              	mov rcx, 2 + 4
 25270 000122E8 488B5D18                	mov rbx, COUNT
 25271 000122EC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25272 000122F1 488D55F8                	lea rdx, [rbp - 8 * 1]
 25273                                  .L_tc_recycle_frame_loop_8f80:
 25274 000122F5 4883F900                	cmp rcx, 0
 25275 000122F9 7413                    	je .L_tc_recycle_frame_done_8f80
 25276 000122FB 488B32                  	mov rsi, qword [rdx]
 25277 000122FE 488933                  	mov qword [rbx], rsi
 25278 00012301 48FFC9                  	dec rcx
 25279 00012304 4883EB08                	sub rbx, 8 * 1
 25280 00012308 4883EA08                	sub rdx, 8 * 1
 25281 0001230C EBE7                    	jmp .L_tc_recycle_frame_loop_8f80
 25282                                  .L_tc_recycle_frame_done_8f80:
 25283 0001230E 488D6308                	lea rsp, [rbx + 8 * 1]
 25284 00012312 5D                      	pop rbp	; the proc will restore it!
 25285 00012313 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25286                                  
 25287                                  	.L_if_end_773c:
 25288                                  
 25289                                  	.L_if_end_773b:
 25290 00012316 C9                      	leave
 25291 00012317 C22000                  	ret AND_KILL_FRAME(2)
 25292                                  .L_lambda_simple_end_6d86:	; new closure is in rax
 25293 0001231A 48890425[9D180000]      	mov qword [free_var_165], rax
 25294 00012322 48B8-                   	mov rax, sob_void
 25294 00012324 [0000000000000000] 
 25295                                  
 25296 0001232C 4889C7                  	mov rdi, rax
 25297 0001232F E8E7340000              	call print_sexpr_if_not_void
 25298                                  
 25299 00012334 48B8-                   	mov rax, L_constants + 1881
 25299 00012336 [5907000000000000] 
 25300 0001233E 50                      	push rax
 25301 0001233F 48B8-                   	mov rax, L_constants + 1881
 25301 00012341 [5907000000000000] 
 25302 00012349 50                      	push rax
 25303 0001234A 6A02                    	push 2	; arg count
 25304 0001234C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25305 00012351 E8B3330000              	call malloc
 25306 00012356 50                      	push rax
 25307 00012357 BF00000000              	mov rdi, 8 * 0	; new rib
 25308 0001235C E8A8330000              	call malloc
 25309 00012361 50                      	push rax
 25310 00012362 BF08000000              	mov rdi, 8 * 1	; extended env
 25311 00012367 E89D330000              	call malloc
 25312 0001236C 488B7D10                	mov rdi, ENV
 25313 00012370 BE00000000              	mov rsi, 0
 25314 00012375 BA01000000              	mov rdx, 1
 25315                                  .L_lambda_simple_env_loop_6d87:	; ext_env[i + 1] <-- env[i]
 25316 0001237A 4883FE00                	cmp rsi, 0
 25317 0001237E 7410                    	je .L_lambda_simple_env_end_6d87
 25318 00012380 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25319 00012384 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25320 00012388 48FFC6                  	inc rsi
 25321 0001238B 48FFC2                  	inc rdx
 25322 0001238E EBEA                    	jmp .L_lambda_simple_env_loop_6d87
 25323                                  .L_lambda_simple_env_end_6d87:
 25324 00012390 5B                      	pop rbx
 25325 00012391 BE00000000              	mov rsi, 0
 25326                                  .L_lambda_simple_params_loop_6d87:	; copy params
 25327 00012396 4883FE00                	cmp rsi, 0
 25328 0001239A 740E                    	je .L_lambda_simple_params_end_6d87
 25329 0001239C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25330 000123A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25331 000123A5 48FFC6                  	inc rsi
 25332 000123A8 EBEC                    	jmp .L_lambda_simple_params_loop_6d87
 25333                                  .L_lambda_simple_params_end_6d87:
 25334 000123AA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25335 000123AD 4889C3                  	mov rbx, rax
 25336 000123B0 58                      	pop rax
 25337 000123B1 C60004                  	mov byte [rax], T_closure
 25338 000123B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25339 000123B8 48C74009[C5230100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d87
 25340 000123C0 E99D070000              	jmp .L_lambda_simple_end_6d87
 25341                                  .L_lambda_simple_code_6d87:	; lambda-simple body
 25342 000123C5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 25343 000123CB 740B                    	je .L_lambda_simple_arity_check_ok_6d87
 25344 000123CD FF742410                	push qword [rsp + 8 * 2]
 25345 000123D1 6A02                    	push 2
 25346 000123D3 E9EA320000              	jmp L_error_incorrect_arity_simple
 25347                                  .L_lambda_simple_arity_check_ok_6d87:
 25348 000123D8 C8000000                	enter 0, 0
 25349                                  
 25350 000123DC BF08000000              	mov rdi, 8
 25351 000123E1 E823330000              	call malloc
 25352 000123E6 488B5D20                	mov rbx, PARAM(0)	; param run
 25353 000123EA 488918                  	mov [rax], rbx	; box run
 25354 000123ED 48894520                	mov PARAM(0), rax	;replace param run with box
 25355 000123F1 48B8-                   	mov rax, sob_void
 25355 000123F3 [0000000000000000] 
 25356                                  
 25357                                  
 25358 000123FB BF08000000              	mov rdi, 8
 25359 00012400 E804330000              	call malloc
 25360 00012405 488B5D28                	mov rbx, PARAM(1)	; param add
 25361 00012409 488918                  	mov [rax], rbx	; box add
 25362 0001240C 48894528                	mov PARAM(1), rax	;replace param add with box
 25363 00012410 48B8-                   	mov rax, sob_void
 25363 00012412 [0000000000000000] 
 25364                                  
 25365 0001241A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25366 0001241F E8E5320000              	call malloc
 25367 00012424 50                      	push rax
 25368 00012425 BF10000000              	mov rdi, 8 * 2	; new rib
 25369 0001242A E8DA320000              	call malloc
 25370 0001242F 50                      	push rax
 25371 00012430 BF10000000              	mov rdi, 8 * 2	; extended env
 25372 00012435 E8CF320000              	call malloc
 25373 0001243A 488B7D10                	mov rdi, ENV
 25374 0001243E BE00000000              	mov rsi, 0
 25375 00012443 BA01000000              	mov rdx, 1
 25376                                  .L_lambda_simple_env_loop_6d88:	; ext_env[i + 1] <-- env[i]
 25377 00012448 4883FE01                	cmp rsi, 1
 25378 0001244C 7410                    	je .L_lambda_simple_env_end_6d88
 25379 0001244E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25380 00012452 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25381 00012456 48FFC6                  	inc rsi
 25382 00012459 48FFC2                  	inc rdx
 25383 0001245C EBEA                    	jmp .L_lambda_simple_env_loop_6d88
 25384                                  .L_lambda_simple_env_end_6d88:
 25385 0001245E 5B                      	pop rbx
 25386 0001245F BE00000000              	mov rsi, 0
 25387                                  .L_lambda_simple_params_loop_6d88:	; copy params
 25388 00012464 4883FE02                	cmp rsi, 2
 25389 00012468 740E                    	je .L_lambda_simple_params_end_6d88
 25390 0001246A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25391 0001246F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25392 00012473 48FFC6                  	inc rsi
 25393 00012476 EBEC                    	jmp .L_lambda_simple_params_loop_6d88
 25394                                  .L_lambda_simple_params_end_6d88:
 25395 00012478 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25396 0001247B 4889C3                  	mov rbx, rax
 25397 0001247E 58                      	pop rax
 25398 0001247F C60004                  	mov byte [rax], T_closure
 25399 00012482 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25400 00012486 48C74009[93240100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d88
 25401 0001248E E96A020000              	jmp .L_lambda_simple_end_6d88
 25402                                  .L_lambda_simple_code_6d88:	; lambda-simple body
 25403 00012493 48837C241003            	cmp qword [rsp + 8 * 2], 3
 25404 00012499 740B                    	je .L_lambda_simple_arity_check_ok_6d88
 25405 0001249B FF742410                	push qword [rsp + 8 * 2]
 25406 0001249F 6A03                    	push 3
 25407 000124A1 E91C320000              	jmp L_error_incorrect_arity_simple
 25408                                  .L_lambda_simple_arity_check_ok_6d88:
 25409 000124A6 C8000000                	enter 0, 0
 25410 000124AA 488B4530                	mov rax, PARAM(2)	; param s
 25411 000124AE 50                      	push rax
 25412 000124AF 6A01                    	push 1	; arg count
 25413 000124B1 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 25414 000124B9 803805                  	cmp byte [rax], T_undefined
 25415 000124BC 0F841A310000            	je L_error_fvar_undefined
 25416 000124C2 803804                  	cmp byte [rax], T_closure
 25417 000124C5 0F8595310000            	jne L_error_non_closure
 25418 000124CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 25419 000124CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 25420                                  
 25421 000124D1 483D[02000000]          	cmp rax, sob_boolean_false
 25422 000124D7 7409                    	je .L_if_else_773d
 25423 000124D9 488B4520                	mov rax, PARAM(0)	; param target
 25424                                  
 25425 000124DD E917020000              	jmp .L_if_end_773d
 25426                                  
 25427                                  	.L_if_else_773d:
 25428                                  	; preparing a tail-call
 25429 000124E2 488B4530                	mov rax, PARAM(2)	; param s
 25430 000124E6 50                      	push rax
 25431 000124E7 6A01                    	push 1	; arg count
 25432 000124E9 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 25433 000124F1 803805                  	cmp byte [rax], T_undefined
 25434 000124F4 0F84E2300000            	je L_error_fvar_undefined
 25435 000124FA 803804                  	cmp byte [rax], T_closure
 25436 000124FD 0F855D310000            	jne L_error_non_closure
 25437 00012503 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25438 00012506 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25439 00012509 50                      	push rax
 25440 0001250A 6A01                    	push 1	; arg count
 25441 0001250C 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 25442 00012514 803805                  	cmp byte [rax], T_undefined
 25443 00012517 0F84BF300000            	je L_error_fvar_undefined
 25444 0001251D 803804                  	cmp byte [rax], T_closure
 25445 00012520 0F853A310000            	jne L_error_non_closure
 25446 00012526 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25447 00012529 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25448 0001252C 50                      	push rax
 25449 0001252D 48B8-                   	mov rax, L_constants + 2023
 25449 0001252F [E707000000000000] 
 25450 00012537 50                      	push rax
 25451 00012538 488B4530                	mov rax, PARAM(2)	; param s
 25452 0001253C 50                      	push rax
 25453 0001253D 6A01                    	push 1	; arg count
 25454 0001253F 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 25455 00012547 803805                  	cmp byte [rax], T_undefined
 25456 0001254A 0F848C300000            	je L_error_fvar_undefined
 25457 00012550 803804                  	cmp byte [rax], T_closure
 25458 00012553 0F8507310000            	jne L_error_non_closure
 25459 00012559 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25460 0001255C FF5009                  	call SOB_CLOSURE_CODE(rax)
 25461 0001255F 50                      	push rax
 25462 00012560 488B4528                	mov rax, PARAM(1)	; param i
 25463 00012564 50                      	push rax
 25464 00012565 488B4520                	mov rax, PARAM(0)	; param target
 25465 00012569 50                      	push rax
 25466 0001256A 6A05                    	push 5	; arg count
 25467 0001256C 488B4510                	mov rax, ENV
 25468 00012570 488B00                  	mov rax, qword [rax + 8 * 0]
 25469 00012573 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 25470 00012577 488B00                  	mov rax, qword [rax]
 25471 0001257A 803804                  	cmp byte [rax], T_closure
 25472 0001257D 0F85DD300000            	jne L_error_non_closure
 25473 00012583 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25474 00012586 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25475 00012589 50                      	push rax
 25476 0001258A 6A01                    	push 1	; arg count
 25477 0001258C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25478 00012591 E873310000              	call malloc
 25479 00012596 50                      	push rax
 25480 00012597 BF18000000              	mov rdi, 8 * 3	; new rib
 25481 0001259C E868310000              	call malloc
 25482 000125A1 50                      	push rax
 25483 000125A2 BF18000000              	mov rdi, 8 * 3	; extended env
 25484 000125A7 E85D310000              	call malloc
 25485 000125AC 488B7D10                	mov rdi, ENV
 25486 000125B0 BE00000000              	mov rsi, 0
 25487 000125B5 BA01000000              	mov rdx, 1
 25488                                  .L_lambda_simple_env_loop_6d89:	; ext_env[i + 1] <-- env[i]
 25489 000125BA 4883FE02                	cmp rsi, 2
 25490 000125BE 7410                    	je .L_lambda_simple_env_end_6d89
 25491 000125C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25492 000125C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25493 000125C8 48FFC6                  	inc rsi
 25494 000125CB 48FFC2                  	inc rdx
 25495 000125CE EBEA                    	jmp .L_lambda_simple_env_loop_6d89
 25496                                  .L_lambda_simple_env_end_6d89:
 25497 000125D0 5B                      	pop rbx
 25498 000125D1 BE00000000              	mov rsi, 0
 25499                                  .L_lambda_simple_params_loop_6d89:	; copy params
 25500 000125D6 4883FE03                	cmp rsi, 3
 25501 000125DA 740E                    	je .L_lambda_simple_params_end_6d89
 25502 000125DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25503 000125E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25504 000125E5 48FFC6                  	inc rsi
 25505 000125E8 EBEC                    	jmp .L_lambda_simple_params_loop_6d89
 25506                                  .L_lambda_simple_params_end_6d89:
 25507 000125EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25508 000125ED 4889C3                  	mov rbx, rax
 25509 000125F0 58                      	pop rax
 25510 000125F1 C60004                  	mov byte [rax], T_closure
 25511 000125F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25512 000125F8 48C74009[05260100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d89
 25513 00012600 E9AF000000              	jmp .L_lambda_simple_end_6d89
 25514                                  .L_lambda_simple_code_6d89:	; lambda-simple body
 25515 00012605 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25516 0001260B 740B                    	je .L_lambda_simple_arity_check_ok_6d89
 25517 0001260D FF742410                	push qword [rsp + 8 * 2]
 25518 00012611 6A01                    	push 1
 25519 00012613 E9AA300000              	jmp L_error_incorrect_arity_simple
 25520                                  .L_lambda_simple_arity_check_ok_6d89:
 25521 00012618 C8000000                	enter 0, 0
 25522                                  	; preparing a tail-call
 25523 0001261C 488B4510                	mov rax, ENV
 25524 00012620 488B00                  	mov rax, qword [rax + 8 * 0]
 25525 00012623 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 25526 00012627 50                      	push rax
 25527 00012628 6A01                    	push 1	; arg count
 25528 0001262A 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 25529 00012632 803805                  	cmp byte [rax], T_undefined
 25530 00012635 0F84A12F0000            	je L_error_fvar_undefined
 25531 0001263B 803804                  	cmp byte [rax], T_closure
 25532 0001263E 0F851C300000            	jne L_error_non_closure
 25533 00012644 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25534 00012647 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25535 0001264A 50                      	push rax
 25536 0001264B 488B4520                	mov rax, PARAM(0)	; param i
 25537 0001264F 50                      	push rax
 25538 00012650 488B4510                	mov rax, ENV
 25539 00012654 488B00                  	mov rax, qword [rax + 8 * 0]
 25540 00012657 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 25541 0001265A 50                      	push rax
 25542 0001265B 6A03                    	push 3	; arg count
 25543 0001265D 488B4510                	mov rax, ENV
 25544 00012661 488B4008                	mov rax, qword [rax + 8 * 1]
 25545 00012665 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25546 00012668 488B00                  	mov rax, qword [rax]
 25547 0001266B 803804                  	cmp byte [rax], T_closure
 25548 0001266E 0F85EC2F0000            	jne L_error_non_closure
 25549 00012674 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25550                                  
 25551                                  	; recycling the current frame
 25552 00012677 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25553 0001267A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25554 0001267D B907000000              	mov rcx, 3 + 4
 25555 00012682 488B5D18                	mov rbx, COUNT
 25556 00012686 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25557 0001268B 488D55F8                	lea rdx, [rbp - 8 * 1]
 25558                                  .L_tc_recycle_frame_loop_8f81:
 25559 0001268F 4883F900                	cmp rcx, 0
 25560 00012693 7413                    	je .L_tc_recycle_frame_done_8f81
 25561 00012695 488B32                  	mov rsi, qword [rdx]
 25562 00012698 488933                  	mov qword [rbx], rsi
 25563 0001269B 48FFC9                  	dec rcx
 25564 0001269E 4883EB08                	sub rbx, 8 * 1
 25565 000126A2 4883EA08                	sub rdx, 8 * 1
 25566 000126A6 EBE7                    	jmp .L_tc_recycle_frame_loop_8f81
 25567                                  .L_tc_recycle_frame_done_8f81:
 25568 000126A8 488D6308                	lea rsp, [rbx + 8 * 1]
 25569 000126AC 5D                      	pop rbp	; the proc will restore it!
 25570 000126AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25571 000126B0 C9                      	leave
 25572 000126B1 C21800                  	ret AND_KILL_FRAME(1)
 25573                                  .L_lambda_simple_end_6d89:	; new closure is in rax
 25574 000126B4 803804                  	cmp byte [rax], T_closure
 25575 000126B7 0F85A32F0000            	jne L_error_non_closure
 25576 000126BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 25577                                  
 25578                                  	; recycling the current frame
 25579 000126C0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25580 000126C3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25581 000126C6 B905000000              	mov rcx, 1 + 4
 25582 000126CB 488B5D18                	mov rbx, COUNT
 25583 000126CF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25584 000126D4 488D55F8                	lea rdx, [rbp - 8 * 1]
 25585                                  .L_tc_recycle_frame_loop_8f82:
 25586 000126D8 4883F900                	cmp rcx, 0
 25587 000126DC 7413                    	je .L_tc_recycle_frame_done_8f82
 25588 000126DE 488B32                  	mov rsi, qword [rdx]
 25589 000126E1 488933                  	mov qword [rbx], rsi
 25590 000126E4 48FFC9                  	dec rcx
 25591 000126E7 4883EB08                	sub rbx, 8 * 1
 25592 000126EB 4883EA08                	sub rdx, 8 * 1
 25593 000126EF EBE7                    	jmp .L_tc_recycle_frame_loop_8f82
 25594                                  .L_tc_recycle_frame_done_8f82:
 25595 000126F1 488D6308                	lea rsp, [rbx + 8 * 1]
 25596 000126F5 5D                      	pop rbp	; the proc will restore it!
 25597 000126F6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25598                                  
 25599                                  	.L_if_end_773d:
 25600 000126F9 C9                      	leave
 25601 000126FA C22800                  	ret AND_KILL_FRAME(3)
 25602                                  .L_lambda_simple_end_6d88:	; new closure is in rax
 25603                                  
 25604 000126FD 50                      	push rax
 25605 000126FE 488B4520                	mov rax, PARAM(0)	; param run
 25606                                  
 25607 00012702 8F00                    	pop qword[rax]
 25608 00012704 48B8-                   	mov rax, sob_void
 25608 00012706 [0000000000000000] 
 25609                                  
 25610 0001270E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25611 00012713 E8F12F0000              	call malloc
 25612 00012718 50                      	push rax
 25613 00012719 BF10000000              	mov rdi, 8 * 2	; new rib
 25614 0001271E E8E62F0000              	call malloc
 25615 00012723 50                      	push rax
 25616 00012724 BF10000000              	mov rdi, 8 * 2	; extended env
 25617 00012729 E8DB2F0000              	call malloc
 25618 0001272E 488B7D10                	mov rdi, ENV
 25619 00012732 BE00000000              	mov rsi, 0
 25620 00012737 BA01000000              	mov rdx, 1
 25621                                  .L_lambda_simple_env_loop_6d8a:	; ext_env[i + 1] <-- env[i]
 25622 0001273C 4883FE01                	cmp rsi, 1
 25623 00012740 7410                    	je .L_lambda_simple_env_end_6d8a
 25624 00012742 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25625 00012746 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25626 0001274A 48FFC6                  	inc rsi
 25627 0001274D 48FFC2                  	inc rdx
 25628 00012750 EBEA                    	jmp .L_lambda_simple_env_loop_6d8a
 25629                                  .L_lambda_simple_env_end_6d8a:
 25630 00012752 5B                      	pop rbx
 25631 00012753 BE00000000              	mov rsi, 0
 25632                                  .L_lambda_simple_params_loop_6d8a:	; copy params
 25633 00012758 4883FE02                	cmp rsi, 2
 25634 0001275C 740E                    	je .L_lambda_simple_params_end_6d8a
 25635 0001275E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25636 00012763 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25637 00012767 48FFC6                  	inc rsi
 25638 0001276A EBEC                    	jmp .L_lambda_simple_params_loop_6d8a
 25639                                  .L_lambda_simple_params_end_6d8a:
 25640 0001276C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25641 0001276F 4889C3                  	mov rbx, rax
 25642 00012772 58                      	pop rax
 25643 00012773 C60004                  	mov byte [rax], T_closure
 25644 00012776 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25645 0001277A 48C74009[87270100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d8a
 25646 00012782 E97C010000              	jmp .L_lambda_simple_end_6d8a
 25647                                  .L_lambda_simple_code_6d8a:	; lambda-simple body
 25648 00012787 48837C241005            	cmp qword [rsp + 8 * 2], 5
 25649 0001278D 740B                    	je .L_lambda_simple_arity_check_ok_6d8a
 25650 0001278F FF742410                	push qword [rsp + 8 * 2]
 25651 00012793 6A05                    	push 5
 25652 00012795 E9282F0000              	jmp L_error_incorrect_arity_simple
 25653                                  .L_lambda_simple_arity_check_ok_6d8a:
 25654 0001279A C8000000                	enter 0, 0
 25655 0001279E 488B4540                	mov rax, PARAM(4)	; param limit
 25656 000127A2 50                      	push rax
 25657 000127A3 488B4538                	mov rax, PARAM(3)	; param j
 25658 000127A7 50                      	push rax
 25659 000127A8 6A02                    	push 2	; arg count
 25660 000127AA 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 25661 000127B2 803805                  	cmp byte [rax], T_undefined
 25662 000127B5 0F84212E0000            	je L_error_fvar_undefined
 25663 000127BB 803804                  	cmp byte [rax], T_closure
 25664 000127BE 0F859C2E0000            	jne L_error_non_closure
 25665 000127C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25666 000127C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25667                                  
 25668 000127CA 483D[02000000]          	cmp rax, sob_boolean_false
 25669 000127D0 0F8425010000            	je .L_if_else_773e
 25670 000127D6 488B4538                	mov rax, PARAM(3)	; param j
 25671 000127DA 50                      	push rax
 25672 000127DB 488B4530                	mov rax, PARAM(2)	; param str
 25673 000127DF 50                      	push rax
 25674 000127E0 6A02                    	push 2	; arg count
 25675 000127E2 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 25676 000127EA 803805                  	cmp byte [rax], T_undefined
 25677 000127ED 0F84E92D0000            	je L_error_fvar_undefined
 25678 000127F3 803804                  	cmp byte [rax], T_closure
 25679 000127F6 0F85642E0000            	jne L_error_non_closure
 25680 000127FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 25681 000127FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 25682 00012802 50                      	push rax
 25683 00012803 488B4528                	mov rax, PARAM(1)	; param i
 25684 00012807 50                      	push rax
 25685 00012808 488B4520                	mov rax, PARAM(0)	; param target
 25686 0001280C 50                      	push rax
 25687 0001280D 6A03                    	push 3	; arg count
 25688 0001280F 488B0425[60110000]      	mov rax, qword [free_var_56]	; free var string-set!
 25689 00012817 803805                  	cmp byte [rax], T_undefined
 25690 0001281A 0F84BC2D0000            	je L_error_fvar_undefined
 25691 00012820 803804                  	cmp byte [rax], T_closure
 25692 00012823 0F85372E0000            	jne L_error_non_closure
 25693 00012829 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25694 0001282C FF5009                  	call SOB_CLOSURE_CODE(rax)
 25695                                  
 25696                                  	; preparing a tail-call
 25697 0001282F 488B4540                	mov rax, PARAM(4)	; param limit
 25698 00012833 50                      	push rax
 25699 00012834 48B8-                   	mov rax, L_constants + 2158
 25699 00012836 [6E08000000000000] 
 25700 0001283E 50                      	push rax
 25701 0001283F 488B4538                	mov rax, PARAM(3)	; param j
 25702 00012843 50                      	push rax
 25703 00012844 6A02                    	push 2	; arg count
 25704 00012846 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 25705 0001284E 803805                  	cmp byte [rax], T_undefined
 25706 00012851 0F84852D0000            	je L_error_fvar_undefined
 25707 00012857 803804                  	cmp byte [rax], T_closure
 25708 0001285A 0F85002E0000            	jne L_error_non_closure
 25709 00012860 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25710 00012863 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25711 00012866 50                      	push rax
 25712 00012867 488B4530                	mov rax, PARAM(2)	; param str
 25713 0001286B 50                      	push rax
 25714 0001286C 48B8-                   	mov rax, L_constants + 2158
 25714 0001286E [6E08000000000000] 
 25715 00012876 50                      	push rax
 25716 00012877 488B4528                	mov rax, PARAM(1)	; param i
 25717 0001287B 50                      	push rax
 25718 0001287C 6A02                    	push 2	; arg count
 25719 0001287E 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 25720 00012886 803805                  	cmp byte [rax], T_undefined
 25721 00012889 0F844D2D0000            	je L_error_fvar_undefined
 25722 0001288F 803804                  	cmp byte [rax], T_closure
 25723 00012892 0F85C82D0000            	jne L_error_non_closure
 25724 00012898 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25725 0001289B FF5009                  	call SOB_CLOSURE_CODE(rax)
 25726 0001289E 50                      	push rax
 25727 0001289F 488B4520                	mov rax, PARAM(0)	; param target
 25728 000128A3 50                      	push rax
 25729 000128A4 6A05                    	push 5	; arg count
 25730 000128A6 488B4510                	mov rax, ENV
 25731 000128AA 488B00                  	mov rax, qword [rax + 8 * 0]
 25732 000128AD 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 25733 000128B1 488B00                  	mov rax, qword [rax]
 25734 000128B4 803804                  	cmp byte [rax], T_closure
 25735 000128B7 0F85A32D0000            	jne L_error_non_closure
 25736 000128BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 25737                                  
 25738                                  	; recycling the current frame
 25739 000128C0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25740 000128C3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25741 000128C6 B909000000              	mov rcx, 5 + 4
 25742 000128CB 488B5D18                	mov rbx, COUNT
 25743 000128CF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25744 000128D4 488D55F8                	lea rdx, [rbp - 8 * 1]
 25745                                  .L_tc_recycle_frame_loop_8f83:
 25746 000128D8 4883F900                	cmp rcx, 0
 25747 000128DC 7413                    	je .L_tc_recycle_frame_done_8f83
 25748 000128DE 488B32                  	mov rsi, qword [rdx]
 25749 000128E1 488933                  	mov qword [rbx], rsi
 25750 000128E4 48FFC9                  	dec rcx
 25751 000128E7 4883EB08                	sub rbx, 8 * 1
 25752 000128EB 4883EA08                	sub rdx, 8 * 1
 25753 000128EF EBE7                    	jmp .L_tc_recycle_frame_loop_8f83
 25754                                  .L_tc_recycle_frame_done_8f83:
 25755 000128F1 488D6308                	lea rsp, [rbx + 8 * 1]
 25756 000128F5 5D                      	pop rbp	; the proc will restore it!
 25757 000128F6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25758                                  
 25759 000128F9 EB04                    	jmp .L_if_end_773e
 25760                                  
 25761                                  	.L_if_else_773e:
 25762 000128FB 488B4528                	mov rax, PARAM(1)	; param i
 25763                                  
 25764                                  	.L_if_end_773e:
 25765 000128FF C9                      	leave
 25766 00012900 C23800                  	ret AND_KILL_FRAME(5)
 25767                                  .L_lambda_simple_end_6d8a:	; new closure is in rax
 25768                                  
 25769 00012903 50                      	push rax
 25770 00012904 488B4528                	mov rax, PARAM(1)	; param add
 25771                                  
 25772 00012908 8F00                    	pop qword[rax]
 25773 0001290A 48B8-                   	mov rax, sob_void
 25773 0001290C [0000000000000000] 
 25774                                  
 25775 00012914 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25776 00012919 E8EB2D0000              	call malloc
 25777 0001291E 50                      	push rax
 25778 0001291F BF10000000              	mov rdi, 8 * 2	; new rib
 25779 00012924 E8E02D0000              	call malloc
 25780 00012929 50                      	push rax
 25781 0001292A BF10000000              	mov rdi, 8 * 2	; extended env
 25782 0001292F E8D52D0000              	call malloc
 25783 00012934 488B7D10                	mov rdi, ENV
 25784 00012938 BE00000000              	mov rsi, 0
 25785 0001293D BA01000000              	mov rdx, 1
 25786                                  .L_lambda_opt_env_loop_0f68:	; ext_env[i + 1] <-- env[i]
 25787 00012942 4883FE01                	cmp rsi, 1
 25788 00012946 7410                    	je .L_lambda_opt_env_end_0f68
 25789 00012948 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25790 0001294C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25791 00012950 48FFC6                  	inc rsi
 25792 00012953 48FFC2                  	inc rdx
 25793 00012956 EBEA                    	jmp .L_lambda_opt_env_loop_0f68
 25794                                  .L_lambda_opt_env_end_0f68:
 25795 00012958 5B                      	pop rbx
 25796 00012959 BE00000000              	mov rsi, 0
 25797                                  .L_lambda_opt_params_loop_0f68:	; copy params
 25798 0001295E 4883FE02                	cmp rsi, 2
 25799 00012962 740E                    	je .L_lambda_opt_params_end_0f68
 25800 00012964 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25801 00012969 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25802 0001296D 48FFC6                  	inc rsi
 25803 00012970 EBEC                    	jmp .L_lambda_opt_params_loop_0f68
 25804                                  .L_lambda_opt_params_end_0f68:
 25805 00012972 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25806 00012975 4889C3                  	mov rbx, rax
 25807 00012978 58                      	pop rax
 25808 00012979 C60004                  	mov byte [rax], T_closure
 25809 0001297C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25810 00012980 48C74009[8D290100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f68
 25811 00012988 E9D1010000              	jmp .L_lambda_opt_end_0f68
 25812                                  .L_lambda_opt_code_0f68:	; lambda-simple body
 25813 0001298D 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 25814 00012993 740D                    	je .L_lambda_opt_arity_check_exact_0f68 ;	 if equal, go to exact arity
 25815 00012995 7F42                    	jg .L_lambda_opt_arity_check_more_0f68 ;	 if greater than, go to arity more
 25816 00012997 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 25817 0001299B 6A00                     	push 0
 25818 0001299D E9342D0000              	jmp L_error_incorrect_arity_opt
 25819                                  	.L_lambda_opt_arity_check_exact_0f68:
 25820 000129A2 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 25821 000129A7 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 25822 000129AC 4883EC08                	sub rsp, 8
 25823 000129B0 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 25824                                  	.L_lambda_opt_exact_shifting_loop_0f68:
 25825 000129B4 488B5108                	mov rdx, [rcx + 8]
 25826 000129B8 488911                  	mov [rcx], rdx
 25827 000129BB 4883C108                	add rcx, 8
 25828 000129BF 4839CB                  	cmp rbx, rcx
 25829 000129C2 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f68
 25830                                  	.L_lambda_opt_exact_shifting_loop_end_0f68:
 25831 000129C4 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 25832 000129CB 4883C001                	add rax, 1 ; 	arg count += 1
 25833 000129CF 4889442410              	mov qword [rsp + 8 * 2], rax
 25834 000129D4 E987000000              	jmp .L_lambda_opt_stack_adjusted_0f68
 25835                                  	.L_lambda_opt_arity_check_more_0f68:
 25836 000129D9 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 25836 000129DB [0100000000000000] 
 25837 000129E3 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 25838 000129E9 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f68
 25839                                  	.L_lambda_opt_stack_shrink_loop_0f68:
 25840 000129EB BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 25841 000129F0 E8142D0000              	call malloc ;	 allocated memory for the optional scheme list
 25842 000129F5 C60021                  	mov byte[rax], T_pair ;	 set type pair
 25843 000129F8 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 25844 000129FC 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 25845 000129FF 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 25846 00012A04 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 25847 00012A09 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 25848 00012A0D 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 25849                                  	.L_lambda_opt_more_shifting_loop_0f68:
 25850 00012A12 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 25851 00012A15 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 25852 00012A19 4883EB08                	sub rbx, 8 
 25853 00012A1D 4839DC                  	cmp rsp, rbx
 25854 00012A20 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f68
 25855                                  	.L_lambda_opt_more_shifting_loop_end_0f68:
 25856 00012A22 4883C408                	add rsp, 8 ;	 update rsp
 25857 00012A26 488B5C2410              	mov rbx, [rsp + 8 * 2]
 25858 00012A2B 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 25859 00012A2F 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 25860 00012A34 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25861 00012A3A 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f68
 25862                                  	.L_lambda_opt_stack_shrink_loop_exit_0f68:
 25863 00012A3C 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 25864 00012A41 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 25865 00012A46 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 25866 00012A4B E8B92C0000              	call malloc ;	 allocated memory for the optional scheme list
 25867 00012A50 C60021                  	mov byte[rax], T_pair ;	 set type pair
 25868 00012A53 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 25869 00012A57 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 25870 00012A5B 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 25871                                  	.L_lambda_opt_stack_adjusted_0f68:
 25872 00012A60 C8000000                	enter 0, 0
 25873                                  	; preparing a tail-call
 25874 00012A64 488B4520                	mov rax, PARAM(0)	; param strings
 25875 00012A68 50                      	push rax
 25876 00012A69 48B8-                   	mov rax, L_constants + 2023
 25876 00012A6B [E707000000000000] 
 25877 00012A73 50                      	push rax
 25878 00012A74 488B4520                	mov rax, PARAM(0)	; param strings
 25879 00012A78 50                      	push rax
 25880 00012A79 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 25881 00012A81 803805                  	cmp byte [rax], T_undefined
 25882 00012A84 0F84522B0000            	je L_error_fvar_undefined
 25883 00012A8A 50                      	push rax
 25884 00012A8B 6A02                    	push 2	; arg count
 25885 00012A8D 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
 25886 00012A95 803805                  	cmp byte [rax], T_undefined
 25887 00012A98 0F843E2B0000            	je L_error_fvar_undefined
 25888 00012A9E 803804                  	cmp byte [rax], T_closure
 25889 00012AA1 0F85B92B0000            	jne L_error_non_closure
 25890 00012AA7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25891 00012AAA FF5009                  	call SOB_CLOSURE_CODE(rax)
 25892 00012AAD 50                      	push rax
 25893 00012AAE 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 25894 00012AB6 803805                  	cmp byte [rax], T_undefined
 25895 00012AB9 0F841D2B0000            	je L_error_fvar_undefined
 25896 00012ABF 50                      	push rax
 25897 00012AC0 6A02                    	push 2	; arg count
 25898 00012AC2 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
 25899 00012ACA 803805                  	cmp byte [rax], T_undefined
 25900 00012ACD 0F84092B0000            	je L_error_fvar_undefined
 25901 00012AD3 803804                  	cmp byte [rax], T_closure
 25902 00012AD6 0F85842B0000            	jne L_error_non_closure
 25903 00012ADC FF7001                  	push SOB_CLOSURE_ENV(rax)
 25904 00012ADF FF5009                  	call SOB_CLOSURE_CODE(rax)
 25905 00012AE2 50                      	push rax
 25906 00012AE3 6A01                    	push 1	; arg count
 25907 00012AE5 488B0425[82110000]      	mov rax, qword [free_var_58]	; free var make-string
 25908 00012AED 803805                  	cmp byte [rax], T_undefined
 25909 00012AF0 0F84E62A0000            	je L_error_fvar_undefined
 25910 00012AF6 803804                  	cmp byte [rax], T_closure
 25911 00012AF9 0F85612B0000            	jne L_error_non_closure
 25912 00012AFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 25913 00012B02 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25914 00012B05 50                      	push rax
 25915 00012B06 6A03                    	push 3	; arg count
 25916 00012B08 488B4510                	mov rax, ENV
 25917 00012B0C 488B00                  	mov rax, qword [rax + 8 * 0]
 25918 00012B0F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25919 00012B12 488B00                  	mov rax, qword [rax]
 25920 00012B15 803804                  	cmp byte [rax], T_closure
 25921 00012B18 0F85422B0000            	jne L_error_non_closure
 25922 00012B1E FF7001                  	push SOB_CLOSURE_ENV(rax)
 25923                                  
 25924                                  	; recycling the current frame
 25925 00012B21 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25926 00012B24 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25927 00012B27 B907000000              	mov rcx, 3 + 4
 25928 00012B2C 488B5D18                	mov rbx, COUNT
 25929 00012B30 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25930 00012B35 488D55F8                	lea rdx, [rbp - 8 * 1]
 25931                                  .L_tc_recycle_frame_loop_8f84:
 25932 00012B39 4883F900                	cmp rcx, 0
 25933 00012B3D 7413                    	je .L_tc_recycle_frame_done_8f84
 25934 00012B3F 488B32                  	mov rsi, qword [rdx]
 25935 00012B42 488933                  	mov qword [rbx], rsi
 25936 00012B45 48FFC9                  	dec rcx
 25937 00012B48 4883EB08                	sub rbx, 8 * 1
 25938 00012B4C 4883EA08                	sub rdx, 8 * 1
 25939 00012B50 EBE7                    	jmp .L_tc_recycle_frame_loop_8f84
 25940                                  .L_tc_recycle_frame_done_8f84:
 25941 00012B52 488D6308                	lea rsp, [rbx + 8 * 1]
 25942 00012B56 5D                      	pop rbp	; the proc will restore it!
 25943 00012B57 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25944 00012B5A C9                      	leave
 25945 00012B5B C21800                  	ret AND_KILL_FRAME(1)
 25946                                  .L_lambda_opt_end_0f68:	; new closure is in rax
 25947 00012B5E C9                      	leave
 25948 00012B5F C22000                  	ret AND_KILL_FRAME(2)
 25949                                  .L_lambda_simple_end_6d87:	; new closure is in rax
 25950 00012B62 803804                  	cmp byte [rax], T_closure
 25951 00012B65 0F85F52A0000            	jne L_error_non_closure
 25952 00012B6B FF7001                  	push SOB_CLOSURE_ENV(rax)
 25953 00012B6E FF5009                  	call SOB_CLOSURE_CODE(rax)
 25954 00012B71 48890425[AE180000]      	mov qword [free_var_166], rax
 25955 00012B79 48B8-                   	mov rax, sob_void
 25955 00012B7B [0000000000000000] 
 25956                                  
 25957 00012B83 4889C7                  	mov rdi, rax
 25958 00012B86 E8902C0000              	call print_sexpr_if_not_void
 25959                                  
 25960 00012B8B 48B8-                   	mov rax, L_constants + 1881
 25960 00012B8D [5907000000000000] 
 25961 00012B95 50                      	push rax
 25962 00012B96 48B8-                   	mov rax, L_constants + 1881
 25962 00012B98 [5907000000000000] 
 25963 00012BA0 50                      	push rax
 25964 00012BA1 6A02                    	push 2	; arg count
 25965 00012BA3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25966 00012BA8 E85C2B0000              	call malloc
 25967 00012BAD 50                      	push rax
 25968 00012BAE BF00000000              	mov rdi, 8 * 0	; new rib
 25969 00012BB3 E8512B0000              	call malloc
 25970 00012BB8 50                      	push rax
 25971 00012BB9 BF08000000              	mov rdi, 8 * 1	; extended env
 25972 00012BBE E8462B0000              	call malloc
 25973 00012BC3 488B7D10                	mov rdi, ENV
 25974 00012BC7 BE00000000              	mov rsi, 0
 25975 00012BCC BA01000000              	mov rdx, 1
 25976                                  .L_lambda_simple_env_loop_6d8b:	; ext_env[i + 1] <-- env[i]
 25977 00012BD1 4883FE00                	cmp rsi, 0
 25978 00012BD5 7410                    	je .L_lambda_simple_env_end_6d8b
 25979 00012BD7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25980 00012BDB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25981 00012BDF 48FFC6                  	inc rsi
 25982 00012BE2 48FFC2                  	inc rdx
 25983 00012BE5 EBEA                    	jmp .L_lambda_simple_env_loop_6d8b
 25984                                  .L_lambda_simple_env_end_6d8b:
 25985 00012BE7 5B                      	pop rbx
 25986 00012BE8 BE00000000              	mov rsi, 0
 25987                                  .L_lambda_simple_params_loop_6d8b:	; copy params
 25988 00012BED 4883FE00                	cmp rsi, 0
 25989 00012BF1 740E                    	je .L_lambda_simple_params_end_6d8b
 25990 00012BF3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25991 00012BF8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25992 00012BFC 48FFC6                  	inc rsi
 25993 00012BFF EBEC                    	jmp .L_lambda_simple_params_loop_6d8b
 25994                                  .L_lambda_simple_params_end_6d8b:
 25995 00012C01 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25996 00012C04 4889C3                  	mov rbx, rax
 25997 00012C07 58                      	pop rax
 25998 00012C08 C60004                  	mov byte [rax], T_closure
 25999 00012C0B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26000 00012C0F 48C74009[1C2C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d8b
 26001 00012C17 E99D070000              	jmp .L_lambda_simple_end_6d8b
 26002                                  .L_lambda_simple_code_6d8b:	; lambda-simple body
 26003 00012C1C 48837C241002            	cmp qword [rsp + 8 * 2], 2
 26004 00012C22 740B                    	je .L_lambda_simple_arity_check_ok_6d8b
 26005 00012C24 FF742410                	push qword [rsp + 8 * 2]
 26006 00012C28 6A02                    	push 2
 26007 00012C2A E9932A0000              	jmp L_error_incorrect_arity_simple
 26008                                  .L_lambda_simple_arity_check_ok_6d8b:
 26009 00012C2F C8000000                	enter 0, 0
 26010                                  
 26011 00012C33 BF08000000              	mov rdi, 8
 26012 00012C38 E8CC2A0000              	call malloc
 26013 00012C3D 488B5D20                	mov rbx, PARAM(0)	; param run
 26014 00012C41 488918                  	mov [rax], rbx	; box run
 26015 00012C44 48894520                	mov PARAM(0), rax	;replace param run with box
 26016 00012C48 48B8-                   	mov rax, sob_void
 26016 00012C4A [0000000000000000] 
 26017                                  
 26018                                  
 26019 00012C52 BF08000000              	mov rdi, 8
 26020 00012C57 E8AD2A0000              	call malloc
 26021 00012C5C 488B5D28                	mov rbx, PARAM(1)	; param add
 26022 00012C60 488918                  	mov [rax], rbx	; box add
 26023 00012C63 48894528                	mov PARAM(1), rax	;replace param add with box
 26024 00012C67 48B8-                   	mov rax, sob_void
 26024 00012C69 [0000000000000000] 
 26025                                  
 26026 00012C71 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26027 00012C76 E88E2A0000              	call malloc
 26028 00012C7B 50                      	push rax
 26029 00012C7C BF10000000              	mov rdi, 8 * 2	; new rib
 26030 00012C81 E8832A0000              	call malloc
 26031 00012C86 50                      	push rax
 26032 00012C87 BF10000000              	mov rdi, 8 * 2	; extended env
 26033 00012C8C E8782A0000              	call malloc
 26034 00012C91 488B7D10                	mov rdi, ENV
 26035 00012C95 BE00000000              	mov rsi, 0
 26036 00012C9A BA01000000              	mov rdx, 1
 26037                                  .L_lambda_simple_env_loop_6d8c:	; ext_env[i + 1] <-- env[i]
 26038 00012C9F 4883FE01                	cmp rsi, 1
 26039 00012CA3 7410                    	je .L_lambda_simple_env_end_6d8c
 26040 00012CA5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26041 00012CA9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26042 00012CAD 48FFC6                  	inc rsi
 26043 00012CB0 48FFC2                  	inc rdx
 26044 00012CB3 EBEA                    	jmp .L_lambda_simple_env_loop_6d8c
 26045                                  .L_lambda_simple_env_end_6d8c:
 26046 00012CB5 5B                      	pop rbx
 26047 00012CB6 BE00000000              	mov rsi, 0
 26048                                  .L_lambda_simple_params_loop_6d8c:	; copy params
 26049 00012CBB 4883FE02                	cmp rsi, 2
 26050 00012CBF 740E                    	je .L_lambda_simple_params_end_6d8c
 26051 00012CC1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26052 00012CC6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26053 00012CCA 48FFC6                  	inc rsi
 26054 00012CCD EBEC                    	jmp .L_lambda_simple_params_loop_6d8c
 26055                                  .L_lambda_simple_params_end_6d8c:
 26056 00012CCF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26057 00012CD2 4889C3                  	mov rbx, rax
 26058 00012CD5 58                      	pop rax
 26059 00012CD6 C60004                  	mov byte [rax], T_closure
 26060 00012CD9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26061 00012CDD 48C74009[EA2C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d8c
 26062 00012CE5 E96A020000              	jmp .L_lambda_simple_end_6d8c
 26063                                  .L_lambda_simple_code_6d8c:	; lambda-simple body
 26064 00012CEA 48837C241003            	cmp qword [rsp + 8 * 2], 3
 26065 00012CF0 740B                    	je .L_lambda_simple_arity_check_ok_6d8c
 26066 00012CF2 FF742410                	push qword [rsp + 8 * 2]
 26067 00012CF6 6A03                    	push 3
 26068 00012CF8 E9C5290000              	jmp L_error_incorrect_arity_simple
 26069                                  .L_lambda_simple_arity_check_ok_6d8c:
 26070 00012CFD C8000000                	enter 0, 0
 26071 00012D01 488B4530                	mov rax, PARAM(2)	; param s
 26072 00012D05 50                      	push rax
 26073 00012D06 6A01                    	push 1	; arg count
 26074 00012D08 488B0425[A80D0000]      	mov rax, qword [free_var_0]	; free var null?
 26075 00012D10 803805                  	cmp byte [rax], T_undefined
 26076 00012D13 0F84C3280000            	je L_error_fvar_undefined
 26077 00012D19 803804                  	cmp byte [rax], T_closure
 26078 00012D1C 0F853E290000            	jne L_error_non_closure
 26079 00012D22 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26080 00012D25 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26081                                  
 26082 00012D28 483D[02000000]          	cmp rax, sob_boolean_false
 26083 00012D2E 7409                    	je .L_if_else_773f
 26084 00012D30 488B4520                	mov rax, PARAM(0)	; param target
 26085                                  
 26086 00012D34 E917020000              	jmp .L_if_end_773f
 26087                                  
 26088                                  	.L_if_else_773f:
 26089                                  	; preparing a tail-call
 26090 00012D39 488B4530                	mov rax, PARAM(2)	; param s
 26091 00012D3D 50                      	push rax
 26092 00012D3E 6A01                    	push 1	; arg count
 26093 00012D40 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 26094 00012D48 803805                  	cmp byte [rax], T_undefined
 26095 00012D4B 0F848B280000            	je L_error_fvar_undefined
 26096 00012D51 803804                  	cmp byte [rax], T_closure
 26097 00012D54 0F8506290000            	jne L_error_non_closure
 26098 00012D5A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26099 00012D5D FF5009                  	call SOB_CLOSURE_CODE(rax)
 26100 00012D60 50                      	push rax
 26101 00012D61 6A01                    	push 1	; arg count
 26102 00012D63 488B0425[EB0E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 26103 00012D6B 803805                  	cmp byte [rax], T_undefined
 26104 00012D6E 0F8468280000            	je L_error_fvar_undefined
 26105 00012D74 803804                  	cmp byte [rax], T_closure
 26106 00012D77 0F85E3280000            	jne L_error_non_closure
 26107 00012D7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26108 00012D80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26109 00012D83 50                      	push rax
 26110 00012D84 48B8-                   	mov rax, L_constants + 2023
 26110 00012D86 [E707000000000000] 
 26111 00012D8E 50                      	push rax
 26112 00012D8F 488B4530                	mov rax, PARAM(2)	; param s
 26113 00012D93 50                      	push rax
 26114 00012D94 6A01                    	push 1	; arg count
 26115 00012D96 488B0425[B80E0000]      	mov rax, qword [free_var_16]	; free var car
 26116 00012D9E 803805                  	cmp byte [rax], T_undefined
 26117 00012DA1 0F8435280000            	je L_error_fvar_undefined
 26118 00012DA7 803804                  	cmp byte [rax], T_closure
 26119 00012DAA 0F85B0280000            	jne L_error_non_closure
 26120 00012DB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26121 00012DB3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26122 00012DB6 50                      	push rax
 26123 00012DB7 488B4528                	mov rax, PARAM(1)	; param i
 26124 00012DBB 50                      	push rax
 26125 00012DBC 488B4520                	mov rax, PARAM(0)	; param target
 26126 00012DC0 50                      	push rax
 26127 00012DC1 6A05                    	push 5	; arg count
 26128 00012DC3 488B4510                	mov rax, ENV
 26129 00012DC7 488B00                  	mov rax, qword [rax + 8 * 0]
 26130 00012DCA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 26131 00012DCE 488B00                  	mov rax, qword [rax]
 26132 00012DD1 803804                  	cmp byte [rax], T_closure
 26133 00012DD4 0F8586280000            	jne L_error_non_closure
 26134 00012DDA FF7001                  	push SOB_CLOSURE_ENV(rax)
 26135 00012DDD FF5009                  	call SOB_CLOSURE_CODE(rax)
 26136 00012DE0 50                      	push rax
 26137 00012DE1 6A01                    	push 1	; arg count
 26138 00012DE3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26139 00012DE8 E81C290000              	call malloc
 26140 00012DED 50                      	push rax
 26141 00012DEE BF18000000              	mov rdi, 8 * 3	; new rib
 26142 00012DF3 E811290000              	call malloc
 26143 00012DF8 50                      	push rax
 26144 00012DF9 BF18000000              	mov rdi, 8 * 3	; extended env
 26145 00012DFE E806290000              	call malloc
 26146 00012E03 488B7D10                	mov rdi, ENV
 26147 00012E07 BE00000000              	mov rsi, 0
 26148 00012E0C BA01000000              	mov rdx, 1
 26149                                  .L_lambda_simple_env_loop_6d8d:	; ext_env[i + 1] <-- env[i]
 26150 00012E11 4883FE02                	cmp rsi, 2
 26151 00012E15 7410                    	je .L_lambda_simple_env_end_6d8d
 26152 00012E17 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26153 00012E1B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26154 00012E1F 48FFC6                  	inc rsi
 26155 00012E22 48FFC2                  	inc rdx
 26156 00012E25 EBEA                    	jmp .L_lambda_simple_env_loop_6d8d
 26157                                  .L_lambda_simple_env_end_6d8d:
 26158 00012E27 5B                      	pop rbx
 26159 00012E28 BE00000000              	mov rsi, 0
 26160                                  .L_lambda_simple_params_loop_6d8d:	; copy params
 26161 00012E2D 4883FE03                	cmp rsi, 3
 26162 00012E31 740E                    	je .L_lambda_simple_params_end_6d8d
 26163 00012E33 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26164 00012E38 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26165 00012E3C 48FFC6                  	inc rsi
 26166 00012E3F EBEC                    	jmp .L_lambda_simple_params_loop_6d8d
 26167                                  .L_lambda_simple_params_end_6d8d:
 26168 00012E41 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26169 00012E44 4889C3                  	mov rbx, rax
 26170 00012E47 58                      	pop rax
 26171 00012E48 C60004                  	mov byte [rax], T_closure
 26172 00012E4B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26173 00012E4F 48C74009[5C2E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d8d
 26174 00012E57 E9AF000000              	jmp .L_lambda_simple_end_6d8d
 26175                                  .L_lambda_simple_code_6d8d:	; lambda-simple body
 26176 00012E5C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26177 00012E62 740B                    	je .L_lambda_simple_arity_check_ok_6d8d
 26178 00012E64 FF742410                	push qword [rsp + 8 * 2]
 26179 00012E68 6A01                    	push 1
 26180 00012E6A E953280000              	jmp L_error_incorrect_arity_simple
 26181                                  .L_lambda_simple_arity_check_ok_6d8d:
 26182 00012E6F C8000000                	enter 0, 0
 26183                                  	; preparing a tail-call
 26184 00012E73 488B4510                	mov rax, ENV
 26185 00012E77 488B00                  	mov rax, qword [rax + 8 * 0]
 26186 00012E7A 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 26187 00012E7E 50                      	push rax
 26188 00012E7F 6A01                    	push 1	; arg count
 26189 00012E81 488B0425[C90E0000]      	mov rax, qword [free_var_17]	; free var cdr
 26190 00012E89 803805                  	cmp byte [rax], T_undefined
 26191 00012E8C 0F844A270000            	je L_error_fvar_undefined
 26192 00012E92 803804                  	cmp byte [rax], T_closure
 26193 00012E95 0F85C5270000            	jne L_error_non_closure
 26194 00012E9B FF7001                  	push SOB_CLOSURE_ENV(rax)
 26195 00012E9E FF5009                  	call SOB_CLOSURE_CODE(rax)
 26196 00012EA1 50                      	push rax
 26197 00012EA2 488B4520                	mov rax, PARAM(0)	; param i
 26198 00012EA6 50                      	push rax
 26199 00012EA7 488B4510                	mov rax, ENV
 26200 00012EAB 488B00                  	mov rax, qword [rax + 8 * 0]
 26201 00012EAE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 26202 00012EB1 50                      	push rax
 26203 00012EB2 6A03                    	push 3	; arg count
 26204 00012EB4 488B4510                	mov rax, ENV
 26205 00012EB8 488B4008                	mov rax, qword [rax + 8 * 1]
 26206 00012EBC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 26207 00012EBF 488B00                  	mov rax, qword [rax]
 26208 00012EC2 803804                  	cmp byte [rax], T_closure
 26209 00012EC5 0F8595270000            	jne L_error_non_closure
 26210 00012ECB FF7001                  	push SOB_CLOSURE_ENV(rax)
 26211                                  
 26212                                  	; recycling the current frame
 26213 00012ECE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26214 00012ED1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26215 00012ED4 B907000000              	mov rcx, 3 + 4
 26216 00012ED9 488B5D18                	mov rbx, COUNT
 26217 00012EDD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26218 00012EE2 488D55F8                	lea rdx, [rbp - 8 * 1]
 26219                                  .L_tc_recycle_frame_loop_8f85:
 26220 00012EE6 4883F900                	cmp rcx, 0
 26221 00012EEA 7413                    	je .L_tc_recycle_frame_done_8f85
 26222 00012EEC 488B32                  	mov rsi, qword [rdx]
 26223 00012EEF 488933                  	mov qword [rbx], rsi
 26224 00012EF2 48FFC9                  	dec rcx
 26225 00012EF5 4883EB08                	sub rbx, 8 * 1
 26226 00012EF9 4883EA08                	sub rdx, 8 * 1
 26227 00012EFD EBE7                    	jmp .L_tc_recycle_frame_loop_8f85
 26228                                  .L_tc_recycle_frame_done_8f85:
 26229 00012EFF 488D6308                	lea rsp, [rbx + 8 * 1]
 26230 00012F03 5D                      	pop rbp	; the proc will restore it!
 26231 00012F04 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26232 00012F07 C9                      	leave
 26233 00012F08 C21800                  	ret AND_KILL_FRAME(1)
 26234                                  .L_lambda_simple_end_6d8d:	; new closure is in rax
 26235 00012F0B 803804                  	cmp byte [rax], T_closure
 26236 00012F0E 0F854C270000            	jne L_error_non_closure
 26237 00012F14 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26238                                  
 26239                                  	; recycling the current frame
 26240 00012F17 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26241 00012F1A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26242 00012F1D B905000000              	mov rcx, 1 + 4
 26243 00012F22 488B5D18                	mov rbx, COUNT
 26244 00012F26 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26245 00012F2B 488D55F8                	lea rdx, [rbp - 8 * 1]
 26246                                  .L_tc_recycle_frame_loop_8f86:
 26247 00012F2F 4883F900                	cmp rcx, 0
 26248 00012F33 7413                    	je .L_tc_recycle_frame_done_8f86
 26249 00012F35 488B32                  	mov rsi, qword [rdx]
 26250 00012F38 488933                  	mov qword [rbx], rsi
 26251 00012F3B 48FFC9                  	dec rcx
 26252 00012F3E 4883EB08                	sub rbx, 8 * 1
 26253 00012F42 4883EA08                	sub rdx, 8 * 1
 26254 00012F46 EBE7                    	jmp .L_tc_recycle_frame_loop_8f86
 26255                                  .L_tc_recycle_frame_done_8f86:
 26256 00012F48 488D6308                	lea rsp, [rbx + 8 * 1]
 26257 00012F4C 5D                      	pop rbp	; the proc will restore it!
 26258 00012F4D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26259                                  
 26260                                  	.L_if_end_773f:
 26261 00012F50 C9                      	leave
 26262 00012F51 C22800                  	ret AND_KILL_FRAME(3)
 26263                                  .L_lambda_simple_end_6d8c:	; new closure is in rax
 26264                                  
 26265 00012F54 50                      	push rax
 26266 00012F55 488B4520                	mov rax, PARAM(0)	; param run
 26267                                  
 26268 00012F59 8F00                    	pop qword[rax]
 26269 00012F5B 48B8-                   	mov rax, sob_void
 26269 00012F5D [0000000000000000] 
 26270                                  
 26271 00012F65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26272 00012F6A E89A270000              	call malloc
 26273 00012F6F 50                      	push rax
 26274 00012F70 BF10000000              	mov rdi, 8 * 2	; new rib
 26275 00012F75 E88F270000              	call malloc
 26276 00012F7A 50                      	push rax
 26277 00012F7B BF10000000              	mov rdi, 8 * 2	; extended env
 26278 00012F80 E884270000              	call malloc
 26279 00012F85 488B7D10                	mov rdi, ENV
 26280 00012F89 BE00000000              	mov rsi, 0
 26281 00012F8E BA01000000              	mov rdx, 1
 26282                                  .L_lambda_simple_env_loop_6d8e:	; ext_env[i + 1] <-- env[i]
 26283 00012F93 4883FE01                	cmp rsi, 1
 26284 00012F97 7410                    	je .L_lambda_simple_env_end_6d8e
 26285 00012F99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26286 00012F9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26287 00012FA1 48FFC6                  	inc rsi
 26288 00012FA4 48FFC2                  	inc rdx
 26289 00012FA7 EBEA                    	jmp .L_lambda_simple_env_loop_6d8e
 26290                                  .L_lambda_simple_env_end_6d8e:
 26291 00012FA9 5B                      	pop rbx
 26292 00012FAA BE00000000              	mov rsi, 0
 26293                                  .L_lambda_simple_params_loop_6d8e:	; copy params
 26294 00012FAF 4883FE02                	cmp rsi, 2
 26295 00012FB3 740E                    	je .L_lambda_simple_params_end_6d8e
 26296 00012FB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26297 00012FBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26298 00012FBE 48FFC6                  	inc rsi
 26299 00012FC1 EBEC                    	jmp .L_lambda_simple_params_loop_6d8e
 26300                                  .L_lambda_simple_params_end_6d8e:
 26301 00012FC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26302 00012FC6 4889C3                  	mov rbx, rax
 26303 00012FC9 58                      	pop rax
 26304 00012FCA C60004                  	mov byte [rax], T_closure
 26305 00012FCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26306 00012FD1 48C74009[DE2F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d8e
 26307 00012FD9 E97C010000              	jmp .L_lambda_simple_end_6d8e
 26308                                  .L_lambda_simple_code_6d8e:	; lambda-simple body
 26309 00012FDE 48837C241005            	cmp qword [rsp + 8 * 2], 5
 26310 00012FE4 740B                    	je .L_lambda_simple_arity_check_ok_6d8e
 26311 00012FE6 FF742410                	push qword [rsp + 8 * 2]
 26312 00012FEA 6A05                    	push 5
 26313 00012FEC E9D1260000              	jmp L_error_incorrect_arity_simple
 26314                                  .L_lambda_simple_arity_check_ok_6d8e:
 26315 00012FF1 C8000000                	enter 0, 0
 26316 00012FF5 488B4540                	mov rax, PARAM(4)	; param limit
 26317 00012FF9 50                      	push rax
 26318 00012FFA 488B4538                	mov rax, PARAM(3)	; param j
 26319 00012FFE 50                      	push rax
 26320 00012FFF 6A02                    	push 2	; arg count
 26321 00013001 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 26322 00013009 803805                  	cmp byte [rax], T_undefined
 26323 0001300C 0F84CA250000            	je L_error_fvar_undefined
 26324 00013012 803804                  	cmp byte [rax], T_closure
 26325 00013015 0F8545260000            	jne L_error_non_closure
 26326 0001301B FF7001                  	push SOB_CLOSURE_ENV(rax)
 26327 0001301E FF5009                  	call SOB_CLOSURE_CODE(rax)
 26328                                  
 26329 00013021 483D[02000000]          	cmp rax, sob_boolean_false
 26330 00013027 0F8425010000            	je .L_if_else_7740
 26331 0001302D 488B4538                	mov rax, PARAM(3)	; param j
 26332 00013031 50                      	push rax
 26333 00013032 488B4530                	mov rax, PARAM(2)	; param vec
 26334 00013036 50                      	push rax
 26335 00013037 6A02                    	push 2	; arg count
 26336 00013039 488B0425[3E110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 26337 00013041 803805                  	cmp byte [rax], T_undefined
 26338 00013044 0F8492250000            	je L_error_fvar_undefined
 26339 0001304A 803804                  	cmp byte [rax], T_closure
 26340 0001304D 0F850D260000            	jne L_error_non_closure
 26341 00013053 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26342 00013056 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26343 00013059 50                      	push rax
 26344 0001305A 488B4528                	mov rax, PARAM(1)	; param i
 26345 0001305E 50                      	push rax
 26346 0001305F 488B4520                	mov rax, PARAM(0)	; param target
 26347 00013063 50                      	push rax
 26348 00013064 6A03                    	push 3	; arg count
 26349 00013066 488B0425[4F110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 26350 0001306E 803805                  	cmp byte [rax], T_undefined
 26351 00013071 0F8465250000            	je L_error_fvar_undefined
 26352 00013077 803804                  	cmp byte [rax], T_closure
 26353 0001307A 0F85E0250000            	jne L_error_non_closure
 26354 00013080 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26355 00013083 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26356                                  
 26357                                  	; preparing a tail-call
 26358 00013086 488B4540                	mov rax, PARAM(4)	; param limit
 26359 0001308A 50                      	push rax
 26360 0001308B 48B8-                   	mov rax, L_constants + 2158
 26360 0001308D [6E08000000000000] 
 26361 00013095 50                      	push rax
 26362 00013096 488B4538                	mov rax, PARAM(3)	; param j
 26363 0001309A 50                      	push rax
 26364 0001309B 6A02                    	push 2	; arg count
 26365 0001309D 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 26366 000130A5 803805                  	cmp byte [rax], T_undefined
 26367 000130A8 0F842E250000            	je L_error_fvar_undefined
 26368 000130AE 803804                  	cmp byte [rax], T_closure
 26369 000130B1 0F85A9250000            	jne L_error_non_closure
 26370 000130B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26371 000130BA FF5009                  	call SOB_CLOSURE_CODE(rax)
 26372 000130BD 50                      	push rax
 26373 000130BE 488B4530                	mov rax, PARAM(2)	; param vec
 26374 000130C2 50                      	push rax
 26375 000130C3 48B8-                   	mov rax, L_constants + 2158
 26375 000130C5 [6E08000000000000] 
 26376 000130CD 50                      	push rax
 26377 000130CE 488B4528                	mov rax, PARAM(1)	; param i
 26378 000130D2 50                      	push rax
 26379 000130D3 6A02                    	push 2	; arg count
 26380 000130D5 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 26381 000130DD 803805                  	cmp byte [rax], T_undefined
 26382 000130E0 0F84F6240000            	je L_error_fvar_undefined
 26383 000130E6 803804                  	cmp byte [rax], T_closure
 26384 000130E9 0F8571250000            	jne L_error_non_closure
 26385 000130EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 26386 000130F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26387 000130F5 50                      	push rax
 26388 000130F6 488B4520                	mov rax, PARAM(0)	; param target
 26389 000130FA 50                      	push rax
 26390 000130FB 6A05                    	push 5	; arg count
 26391 000130FD 488B4510                	mov rax, ENV
 26392 00013101 488B00                  	mov rax, qword [rax + 8 * 0]
 26393 00013104 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 26394 00013108 488B00                  	mov rax, qword [rax]
 26395 0001310B 803804                  	cmp byte [rax], T_closure
 26396 0001310E 0F854C250000            	jne L_error_non_closure
 26397 00013114 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26398                                  
 26399                                  	; recycling the current frame
 26400 00013117 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26401 0001311A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26402 0001311D B909000000              	mov rcx, 5 + 4
 26403 00013122 488B5D18                	mov rbx, COUNT
 26404 00013126 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26405 0001312B 488D55F8                	lea rdx, [rbp - 8 * 1]
 26406                                  .L_tc_recycle_frame_loop_8f87:
 26407 0001312F 4883F900                	cmp rcx, 0
 26408 00013133 7413                    	je .L_tc_recycle_frame_done_8f87
 26409 00013135 488B32                  	mov rsi, qword [rdx]
 26410 00013138 488933                  	mov qword [rbx], rsi
 26411 0001313B 48FFC9                  	dec rcx
 26412 0001313E 4883EB08                	sub rbx, 8 * 1
 26413 00013142 4883EA08                	sub rdx, 8 * 1
 26414 00013146 EBE7                    	jmp .L_tc_recycle_frame_loop_8f87
 26415                                  .L_tc_recycle_frame_done_8f87:
 26416 00013148 488D6308                	lea rsp, [rbx + 8 * 1]
 26417 0001314C 5D                      	pop rbp	; the proc will restore it!
 26418 0001314D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26419                                  
 26420 00013150 EB04                    	jmp .L_if_end_7740
 26421                                  
 26422                                  	.L_if_else_7740:
 26423 00013152 488B4528                	mov rax, PARAM(1)	; param i
 26424                                  
 26425                                  	.L_if_end_7740:
 26426 00013156 C9                      	leave
 26427 00013157 C23800                  	ret AND_KILL_FRAME(5)
 26428                                  .L_lambda_simple_end_6d8e:	; new closure is in rax
 26429                                  
 26430 0001315A 50                      	push rax
 26431 0001315B 488B4528                	mov rax, PARAM(1)	; param add
 26432                                  
 26433 0001315F 8F00                    	pop qword[rax]
 26434 00013161 48B8-                   	mov rax, sob_void
 26434 00013163 [0000000000000000] 
 26435                                  
 26436 0001316B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26437 00013170 E894250000              	call malloc
 26438 00013175 50                      	push rax
 26439 00013176 BF10000000              	mov rdi, 8 * 2	; new rib
 26440 0001317B E889250000              	call malloc
 26441 00013180 50                      	push rax
 26442 00013181 BF10000000              	mov rdi, 8 * 2	; extended env
 26443 00013186 E87E250000              	call malloc
 26444 0001318B 488B7D10                	mov rdi, ENV
 26445 0001318F BE00000000              	mov rsi, 0
 26446 00013194 BA01000000              	mov rdx, 1
 26447                                  .L_lambda_opt_env_loop_0f69:	; ext_env[i + 1] <-- env[i]
 26448 00013199 4883FE01                	cmp rsi, 1
 26449 0001319D 7410                    	je .L_lambda_opt_env_end_0f69
 26450 0001319F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26451 000131A3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26452 000131A7 48FFC6                  	inc rsi
 26453 000131AA 48FFC2                  	inc rdx
 26454 000131AD EBEA                    	jmp .L_lambda_opt_env_loop_0f69
 26455                                  .L_lambda_opt_env_end_0f69:
 26456 000131AF 5B                      	pop rbx
 26457 000131B0 BE00000000              	mov rsi, 0
 26458                                  .L_lambda_opt_params_loop_0f69:	; copy params
 26459 000131B5 4883FE02                	cmp rsi, 2
 26460 000131B9 740E                    	je .L_lambda_opt_params_end_0f69
 26461 000131BB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26462 000131C0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26463 000131C4 48FFC6                  	inc rsi
 26464 000131C7 EBEC                    	jmp .L_lambda_opt_params_loop_0f69
 26465                                  .L_lambda_opt_params_end_0f69:
 26466 000131C9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26467 000131CC 4889C3                  	mov rbx, rax
 26468 000131CF 58                      	pop rax
 26469 000131D0 C60004                  	mov byte [rax], T_closure
 26470 000131D3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26471 000131D7 48C74009[E4310100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0f69
 26472 000131DF E9D1010000              	jmp .L_lambda_opt_end_0f69
 26473                                  .L_lambda_opt_code_0f69:	; lambda-simple body
 26474 000131E4 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 26475 000131EA 740D                    	je .L_lambda_opt_arity_check_exact_0f69 ;	 if equal, go to exact arity
 26476 000131EC 7F42                    	jg .L_lambda_opt_arity_check_more_0f69 ;	 if greater than, go to arity more
 26477 000131EE FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 26478 000131F2 6A00                     	push 0
 26479 000131F4 E9DD240000              	jmp L_error_incorrect_arity_opt
 26480                                  	.L_lambda_opt_arity_check_exact_0f69:
 26481 000131F9 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 26482 000131FE 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 26483 00013203 4883EC08                	sub rsp, 8
 26484 00013207 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 26485                                  	.L_lambda_opt_exact_shifting_loop_0f69:
 26486 0001320B 488B5108                	mov rdx, [rcx + 8]
 26487 0001320F 488911                  	mov [rcx], rdx
 26488 00013212 4883C108                	add rcx, 8
 26489 00013216 4839CB                  	cmp rbx, rcx
 26490 00013219 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0f69
 26491                                  	.L_lambda_opt_exact_shifting_loop_end_0f69:
 26492 0001321B 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 26493 00013222 4883C001                	add rax, 1 ; 	arg count += 1
 26494 00013226 4889442410              	mov qword [rsp + 8 * 2], rax
 26495 0001322B E987000000              	jmp .L_lambda_opt_stack_adjusted_0f69
 26496                                  	.L_lambda_opt_arity_check_more_0f69:
 26497 00013230 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 26497 00013232 [0100000000000000] 
 26498 0001323A 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 26499 00013240 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0f69
 26500                                  	.L_lambda_opt_stack_shrink_loop_0f69:
 26501 00013242 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 26502 00013247 E8BD240000              	call malloc ;	 allocated memory for the optional scheme list
 26503 0001324C C60021                  	mov byte[rax], T_pair ;	 set type pair
 26504 0001324F 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 26505 00013253 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 26506 00013256 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 26507 0001325B 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 26508 00013260 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 26509 00013264 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 26510                                  	.L_lambda_opt_more_shifting_loop_0f69:
 26511 00013269 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 26512 0001326C 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 26513 00013270 4883EB08                	sub rbx, 8 
 26514 00013274 4839DC                  	cmp rsp, rbx
 26515 00013277 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0f69
 26516                                  	.L_lambda_opt_more_shifting_loop_end_0f69:
 26517 00013279 4883C408                	add rsp, 8 ;	 update rsp
 26518 0001327D 488B5C2410              	mov rbx, [rsp + 8 * 2]
 26519 00013282 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 26520 00013286 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 26521 0001328B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26522 00013291 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0f69
 26523                                  	.L_lambda_opt_stack_shrink_loop_exit_0f69:
 26524 00013293 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 26525 00013298 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 26526 0001329D BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 26527 000132A2 E862240000              	call malloc ;	 allocated memory for the optional scheme list
 26528 000132A7 C60021                  	mov byte[rax], T_pair ;	 set type pair
 26529 000132AA 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 26530 000132AE 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 26531 000132B2 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 26532                                  	.L_lambda_opt_stack_adjusted_0f69:
 26533 000132B7 C8000000                	enter 0, 0
 26534                                  	; preparing a tail-call
 26535 000132BB 488B4520                	mov rax, PARAM(0)	; param vectors
 26536 000132BF 50                      	push rax
 26537 000132C0 48B8-                   	mov rax, L_constants + 2023
 26537 000132C2 [E707000000000000] 
 26538 000132CA 50                      	push rax
 26539 000132CB 488B4520                	mov rax, PARAM(0)	; param vectors
 26540 000132CF 50                      	push rax
 26541 000132D0 488B0425[EB0E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 26542 000132D8 803805                  	cmp byte [rax], T_undefined
 26543 000132DB 0F84FB220000            	je L_error_fvar_undefined
 26544 000132E1 50                      	push rax
 26545 000132E2 6A02                    	push 2	; arg count
 26546 000132E4 488B0425[E5140000]      	mov rax, qword [free_var_109]	; free var map
 26547 000132EC 803805                  	cmp byte [rax], T_undefined
 26548 000132EF 0F84E7220000            	je L_error_fvar_undefined
 26549 000132F5 803804                  	cmp byte [rax], T_closure
 26550 000132F8 0F8562230000            	jne L_error_non_closure
 26551 000132FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26552 00013301 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26553 00013304 50                      	push rax
 26554 00013305 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 26555 0001330D 803805                  	cmp byte [rax], T_undefined
 26556 00013310 0F84C6220000            	je L_error_fvar_undefined
 26557 00013316 50                      	push rax
 26558 00013317 6A02                    	push 2	; arg count
 26559 00013319 488B0425[C3140000]      	mov rax, qword [free_var_107]	; free var apply
 26560 00013321 803805                  	cmp byte [rax], T_undefined
 26561 00013324 0F84B2220000            	je L_error_fvar_undefined
 26562 0001332A 803804                  	cmp byte [rax], T_closure
 26563 0001332D 0F852D230000            	jne L_error_non_closure
 26564 00013333 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26565 00013336 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26566 00013339 50                      	push rax
 26567 0001333A 6A01                    	push 1	; arg count
 26568 0001333C 488B0425[71110000]      	mov rax, qword [free_var_57]	; free var make-vector
 26569 00013344 803805                  	cmp byte [rax], T_undefined
 26570 00013347 0F848F220000            	je L_error_fvar_undefined
 26571 0001334D 803804                  	cmp byte [rax], T_closure
 26572 00013350 0F850A230000            	jne L_error_non_closure
 26573 00013356 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26574 00013359 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26575 0001335C 50                      	push rax
 26576 0001335D 6A03                    	push 3	; arg count
 26577 0001335F 488B4510                	mov rax, ENV
 26578 00013363 488B00                  	mov rax, qword [rax + 8 * 0]
 26579 00013366 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 26580 00013369 488B00                  	mov rax, qword [rax]
 26581 0001336C 803804                  	cmp byte [rax], T_closure
 26582 0001336F 0F85EB220000            	jne L_error_non_closure
 26583 00013375 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26584                                  
 26585                                  	; recycling the current frame
 26586 00013378 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26587 0001337B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26588 0001337E B907000000              	mov rcx, 3 + 4
 26589 00013383 488B5D18                	mov rbx, COUNT
 26590 00013387 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26591 0001338C 488D55F8                	lea rdx, [rbp - 8 * 1]
 26592                                  .L_tc_recycle_frame_loop_8f88:
 26593 00013390 4883F900                	cmp rcx, 0
 26594 00013394 7413                    	je .L_tc_recycle_frame_done_8f88
 26595 00013396 488B32                  	mov rsi, qword [rdx]
 26596 00013399 488933                  	mov qword [rbx], rsi
 26597 0001339C 48FFC9                  	dec rcx
 26598 0001339F 4883EB08                	sub rbx, 8 * 1
 26599 000133A3 4883EA08                	sub rdx, 8 * 1
 26600 000133A7 EBE7                    	jmp .L_tc_recycle_frame_loop_8f88
 26601                                  .L_tc_recycle_frame_done_8f88:
 26602 000133A9 488D6308                	lea rsp, [rbx + 8 * 1]
 26603 000133AD 5D                      	pop rbp	; the proc will restore it!
 26604 000133AE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26605 000133B1 C9                      	leave
 26606 000133B2 C21800                  	ret AND_KILL_FRAME(1)
 26607                                  .L_lambda_opt_end_0f69:	; new closure is in rax
 26608 000133B5 C9                      	leave
 26609 000133B6 C22000                  	ret AND_KILL_FRAME(2)
 26610                                  .L_lambda_simple_end_6d8b:	; new closure is in rax
 26611 000133B9 803804                  	cmp byte [rax], T_closure
 26612 000133BC 0F859E220000            	jne L_error_non_closure
 26613 000133C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26614 000133C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26615 000133C8 48890425[BF180000]      	mov qword [free_var_167], rax
 26616 000133D0 48B8-                   	mov rax, sob_void
 26616 000133D2 [0000000000000000] 
 26617                                  
 26618 000133DA 4889C7                  	mov rdi, rax
 26619 000133DD E839240000              	call print_sexpr_if_not_void
 26620                                  
 26621 000133E2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26622 000133E7 E81D230000              	call malloc
 26623 000133EC 50                      	push rax
 26624 000133ED BF00000000              	mov rdi, 8 * 0	; new rib
 26625 000133F2 E812230000              	call malloc
 26626 000133F7 50                      	push rax
 26627 000133F8 BF08000000              	mov rdi, 8 * 1	; extended env
 26628 000133FD E807230000              	call malloc
 26629 00013402 488B7D10                	mov rdi, ENV
 26630 00013406 BE00000000              	mov rsi, 0
 26631 0001340B BA01000000              	mov rdx, 1
 26632                                  .L_lambda_simple_env_loop_6d8f:	; ext_env[i + 1] <-- env[i]
 26633 00013410 4883FE00                	cmp rsi, 0
 26634 00013414 7410                    	je .L_lambda_simple_env_end_6d8f
 26635 00013416 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26636 0001341A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26637 0001341E 48FFC6                  	inc rsi
 26638 00013421 48FFC2                  	inc rdx
 26639 00013424 EBEA                    	jmp .L_lambda_simple_env_loop_6d8f
 26640                                  .L_lambda_simple_env_end_6d8f:
 26641 00013426 5B                      	pop rbx
 26642 00013427 BE00000000              	mov rsi, 0
 26643                                  .L_lambda_simple_params_loop_6d8f:	; copy params
 26644 0001342C 4883FE00                	cmp rsi, 0
 26645 00013430 740E                    	je .L_lambda_simple_params_end_6d8f
 26646 00013432 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26647 00013437 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26648 0001343B 48FFC6                  	inc rsi
 26649 0001343E EBEC                    	jmp .L_lambda_simple_params_loop_6d8f
 26650                                  .L_lambda_simple_params_end_6d8f:
 26651 00013440 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26652 00013443 4889C3                  	mov rbx, rax
 26653 00013446 58                      	pop rax
 26654 00013447 C60004                  	mov byte [rax], T_closure
 26655 0001344A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26656 0001344E 48C74009[5B340100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d8f
 26657 00013456 E9BE000000              	jmp .L_lambda_simple_end_6d8f
 26658                                  .L_lambda_simple_code_6d8f:	; lambda-simple body
 26659 0001345B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26660 00013461 740B                    	je .L_lambda_simple_arity_check_ok_6d8f
 26661 00013463 FF742410                	push qword [rsp + 8 * 2]
 26662 00013467 6A01                    	push 1
 26663 00013469 E954220000              	jmp L_error_incorrect_arity_simple
 26664                                  .L_lambda_simple_arity_check_ok_6d8f:
 26665 0001346E C8000000                	enter 0, 0
 26666                                  	; preparing a tail-call
 26667 00013472 488B4520                	mov rax, PARAM(0)	; param str
 26668 00013476 50                      	push rax
 26669 00013477 6A01                    	push 1	; arg count
 26670 00013479 488B0425[27170000]      	mov rax, qword [free_var_143]	; free var string->list
 26671 00013481 803805                  	cmp byte [rax], T_undefined
 26672 00013484 0F8452210000            	je L_error_fvar_undefined
 26673 0001348A 803804                  	cmp byte [rax], T_closure
 26674 0001348D 0F85CD210000            	jne L_error_non_closure
 26675 00013493 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26676 00013496 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26677 00013499 50                      	push rax
 26678 0001349A 6A01                    	push 1	; arg count
 26679 0001349C 488B0425[07150000]      	mov rax, qword [free_var_111]	; free var reverse
 26680 000134A4 803805                  	cmp byte [rax], T_undefined
 26681 000134A7 0F842F210000            	je L_error_fvar_undefined
 26682 000134AD 803804                  	cmp byte [rax], T_closure
 26683 000134B0 0F85AA210000            	jne L_error_non_closure
 26684 000134B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26685 000134B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26686 000134BC 50                      	push rax
 26687 000134BD 6A01                    	push 1	; arg count
 26688 000134BF 488B0425[16170000]      	mov rax, qword [free_var_142]	; free var list->string
 26689 000134C7 803805                  	cmp byte [rax], T_undefined
 26690 000134CA 0F840C210000            	je L_error_fvar_undefined
 26691 000134D0 803804                  	cmp byte [rax], T_closure
 26692 000134D3 0F8587210000            	jne L_error_non_closure
 26693 000134D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26694                                  
 26695                                  	; recycling the current frame
 26696 000134DC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26697 000134DF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26698 000134E2 B905000000              	mov rcx, 1 + 4
 26699 000134E7 488B5D18                	mov rbx, COUNT
 26700 000134EB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26701 000134F0 488D55F8                	lea rdx, [rbp - 8 * 1]
 26702                                  .L_tc_recycle_frame_loop_8f89:
 26703 000134F4 4883F900                	cmp rcx, 0
 26704 000134F8 7413                    	je .L_tc_recycle_frame_done_8f89
 26705 000134FA 488B32                  	mov rsi, qword [rdx]
 26706 000134FD 488933                  	mov qword [rbx], rsi
 26707 00013500 48FFC9                  	dec rcx
 26708 00013503 4883EB08                	sub rbx, 8 * 1
 26709 00013507 4883EA08                	sub rdx, 8 * 1
 26710 0001350B EBE7                    	jmp .L_tc_recycle_frame_loop_8f89
 26711                                  .L_tc_recycle_frame_done_8f89:
 26712 0001350D 488D6308                	lea rsp, [rbx + 8 * 1]
 26713 00013511 5D                      	pop rbp	; the proc will restore it!
 26714 00013512 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26715 00013515 C9                      	leave
 26716 00013516 C21800                  	ret AND_KILL_FRAME(1)
 26717                                  .L_lambda_simple_end_6d8f:	; new closure is in rax
 26718 00013519 48890425[D0180000]      	mov qword [free_var_168], rax
 26719 00013521 48B8-                   	mov rax, sob_void
 26719 00013523 [0000000000000000] 
 26720                                  
 26721 0001352B 4889C7                  	mov rdi, rax
 26722 0001352E E8E8220000              	call print_sexpr_if_not_void
 26723                                  
 26724 00013533 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26725 00013538 E8CC210000              	call malloc
 26726 0001353D 50                      	push rax
 26727 0001353E BF00000000              	mov rdi, 8 * 0	; new rib
 26728 00013543 E8C1210000              	call malloc
 26729 00013548 50                      	push rax
 26730 00013549 BF08000000              	mov rdi, 8 * 1	; extended env
 26731 0001354E E8B6210000              	call malloc
 26732 00013553 488B7D10                	mov rdi, ENV
 26733 00013557 BE00000000              	mov rsi, 0
 26734 0001355C BA01000000              	mov rdx, 1
 26735                                  .L_lambda_simple_env_loop_6d90:	; ext_env[i + 1] <-- env[i]
 26736 00013561 4883FE00                	cmp rsi, 0
 26737 00013565 7410                    	je .L_lambda_simple_env_end_6d90
 26738 00013567 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26739 0001356B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26740 0001356F 48FFC6                  	inc rsi
 26741 00013572 48FFC2                  	inc rdx
 26742 00013575 EBEA                    	jmp .L_lambda_simple_env_loop_6d90
 26743                                  .L_lambda_simple_env_end_6d90:
 26744 00013577 5B                      	pop rbx
 26745 00013578 BE00000000              	mov rsi, 0
 26746                                  .L_lambda_simple_params_loop_6d90:	; copy params
 26747 0001357D 4883FE00                	cmp rsi, 0
 26748 00013581 740E                    	je .L_lambda_simple_params_end_6d90
 26749 00013583 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26750 00013588 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26751 0001358C 48FFC6                  	inc rsi
 26752 0001358F EBEC                    	jmp .L_lambda_simple_params_loop_6d90
 26753                                  .L_lambda_simple_params_end_6d90:
 26754 00013591 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26755 00013594 4889C3                  	mov rbx, rax
 26756 00013597 58                      	pop rax
 26757 00013598 C60004                  	mov byte [rax], T_closure
 26758 0001359B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26759 0001359F 48C74009[AC350100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d90
 26760 000135A7 E9BE000000              	jmp .L_lambda_simple_end_6d90
 26761                                  .L_lambda_simple_code_6d90:	; lambda-simple body
 26762 000135AC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26763 000135B2 740B                    	je .L_lambda_simple_arity_check_ok_6d90
 26764 000135B4 FF742410                	push qword [rsp + 8 * 2]
 26765 000135B8 6A01                    	push 1
 26766 000135BA E903210000              	jmp L_error_incorrect_arity_simple
 26767                                  .L_lambda_simple_arity_check_ok_6d90:
 26768 000135BF C8000000                	enter 0, 0
 26769                                  	; preparing a tail-call
 26770 000135C3 488B4520                	mov rax, PARAM(0)	; param vec
 26771 000135C7 50                      	push rax
 26772 000135C8 6A01                    	push 1	; arg count
 26773 000135CA 488B0425[15180000]      	mov rax, qword [free_var_157]	; free var vector->list
 26774 000135D2 803805                  	cmp byte [rax], T_undefined
 26775 000135D5 0F8401200000            	je L_error_fvar_undefined
 26776 000135DB 803804                  	cmp byte [rax], T_closure
 26777 000135DE 0F857C200000            	jne L_error_non_closure
 26778 000135E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26779 000135E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26780 000135EA 50                      	push rax
 26781 000135EB 6A01                    	push 1	; arg count
 26782 000135ED 488B0425[07150000]      	mov rax, qword [free_var_111]	; free var reverse
 26783 000135F5 803805                  	cmp byte [rax], T_undefined
 26784 000135F8 0F84DE1F0000            	je L_error_fvar_undefined
 26785 000135FE 803804                  	cmp byte [rax], T_closure
 26786 00013601 0F8559200000            	jne L_error_non_closure
 26787 00013607 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26788 0001360A FF5009                  	call SOB_CLOSURE_CODE(rax)
 26789 0001360D 50                      	push rax
 26790 0001360E 6A01                    	push 1	; arg count
 26791 00013610 488B0425[F3170000]      	mov rax, qword [free_var_155]	; free var list->vector
 26792 00013618 803805                  	cmp byte [rax], T_undefined
 26793 0001361B 0F84BB1F0000            	je L_error_fvar_undefined
 26794 00013621 803804                  	cmp byte [rax], T_closure
 26795 00013624 0F8536200000            	jne L_error_non_closure
 26796 0001362A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26797                                  
 26798                                  	; recycling the current frame
 26799 0001362D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26800 00013630 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26801 00013633 B905000000              	mov rcx, 1 + 4
 26802 00013638 488B5D18                	mov rbx, COUNT
 26803 0001363C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26804 00013641 488D55F8                	lea rdx, [rbp - 8 * 1]
 26805                                  .L_tc_recycle_frame_loop_8f8a:
 26806 00013645 4883F900                	cmp rcx, 0
 26807 00013649 7413                    	je .L_tc_recycle_frame_done_8f8a
 26808 0001364B 488B32                  	mov rsi, qword [rdx]
 26809 0001364E 488933                  	mov qword [rbx], rsi
 26810 00013651 48FFC9                  	dec rcx
 26811 00013654 4883EB08                	sub rbx, 8 * 1
 26812 00013658 4883EA08                	sub rdx, 8 * 1
 26813 0001365C EBE7                    	jmp .L_tc_recycle_frame_loop_8f8a
 26814                                  .L_tc_recycle_frame_done_8f8a:
 26815 0001365E 488D6308                	lea rsp, [rbx + 8 * 1]
 26816 00013662 5D                      	pop rbp	; the proc will restore it!
 26817 00013663 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26818 00013666 C9                      	leave
 26819 00013667 C21800                  	ret AND_KILL_FRAME(1)
 26820                                  .L_lambda_simple_end_6d90:	; new closure is in rax
 26821 0001366A 48890425[E1180000]      	mov qword [free_var_169], rax
 26822 00013672 48B8-                   	mov rax, sob_void
 26822 00013674 [0000000000000000] 
 26823                                  
 26824 0001367C 4889C7                  	mov rdi, rax
 26825 0001367F E897210000              	call print_sexpr_if_not_void
 26826                                  
 26827 00013684 48B8-                   	mov rax, L_constants + 1881
 26827 00013686 [5907000000000000] 
 26828 0001368E 50                      	push rax
 26829 0001368F 6A01                    	push 1	; arg count
 26830 00013691 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26831 00013696 E86E200000              	call malloc
 26832 0001369B 50                      	push rax
 26833 0001369C BF00000000              	mov rdi, 8 * 0	; new rib
 26834 000136A1 E863200000              	call malloc
 26835 000136A6 50                      	push rax
 26836 000136A7 BF08000000              	mov rdi, 8 * 1	; extended env
 26837 000136AC E858200000              	call malloc
 26838 000136B1 488B7D10                	mov rdi, ENV
 26839 000136B5 BE00000000              	mov rsi, 0
 26840 000136BA BA01000000              	mov rdx, 1
 26841                                  .L_lambda_simple_env_loop_6d91:	; ext_env[i + 1] <-- env[i]
 26842 000136BF 4883FE00                	cmp rsi, 0
 26843 000136C3 7410                    	je .L_lambda_simple_env_end_6d91
 26844 000136C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26845 000136C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26846 000136CD 48FFC6                  	inc rsi
 26847 000136D0 48FFC2                  	inc rdx
 26848 000136D3 EBEA                    	jmp .L_lambda_simple_env_loop_6d91
 26849                                  .L_lambda_simple_env_end_6d91:
 26850 000136D5 5B                      	pop rbx
 26851 000136D6 BE00000000              	mov rsi, 0
 26852                                  .L_lambda_simple_params_loop_6d91:	; copy params
 26853 000136DB 4883FE00                	cmp rsi, 0
 26854 000136DF 740E                    	je .L_lambda_simple_params_end_6d91
 26855 000136E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26856 000136E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26857 000136EA 48FFC6                  	inc rsi
 26858 000136ED EBEC                    	jmp .L_lambda_simple_params_loop_6d91
 26859                                  .L_lambda_simple_params_end_6d91:
 26860 000136EF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26861 000136F2 4889C3                  	mov rbx, rax
 26862 000136F5 58                      	pop rax
 26863 000136F6 C60004                  	mov byte [rax], T_closure
 26864 000136F9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26865 000136FD 48C74009[0A370100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d91
 26866 00013705 E91D060000              	jmp .L_lambda_simple_end_6d91
 26867                                  .L_lambda_simple_code_6d91:	; lambda-simple body
 26868 0001370A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26869 00013710 740B                    	je .L_lambda_simple_arity_check_ok_6d91
 26870 00013712 FF742410                	push qword [rsp + 8 * 2]
 26871 00013716 6A01                    	push 1
 26872 00013718 E9A51F0000              	jmp L_error_incorrect_arity_simple
 26873                                  .L_lambda_simple_arity_check_ok_6d91:
 26874 0001371D C8000000                	enter 0, 0
 26875                                  
 26876 00013721 BF08000000              	mov rdi, 8
 26877 00013726 E8DE1F0000              	call malloc
 26878 0001372B 488B5D20                	mov rbx, PARAM(0)	; param run
 26879 0001372F 488918                  	mov [rax], rbx	; box run
 26880 00013732 48894520                	mov PARAM(0), rax	;replace param run with box
 26881 00013736 48B8-                   	mov rax, sob_void
 26881 00013738 [0000000000000000] 
 26882                                  
 26883 00013740 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26884 00013745 E8BF1F0000              	call malloc
 26885 0001374A 50                      	push rax
 26886 0001374B BF08000000              	mov rdi, 8 * 1	; new rib
 26887 00013750 E8B41F0000              	call malloc
 26888 00013755 50                      	push rax
 26889 00013756 BF10000000              	mov rdi, 8 * 2	; extended env
 26890 0001375B E8A91F0000              	call malloc
 26891 00013760 488B7D10                	mov rdi, ENV
 26892 00013764 BE00000000              	mov rsi, 0
 26893 00013769 BA01000000              	mov rdx, 1
 26894                                  .L_lambda_simple_env_loop_6d92:	; ext_env[i + 1] <-- env[i]
 26895 0001376E 4883FE01                	cmp rsi, 1
 26896 00013772 7410                    	je .L_lambda_simple_env_end_6d92
 26897 00013774 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26898 00013778 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26899 0001377C 48FFC6                  	inc rsi
 26900 0001377F 48FFC2                  	inc rdx
 26901 00013782 EBEA                    	jmp .L_lambda_simple_env_loop_6d92
 26902                                  .L_lambda_simple_env_end_6d92:
 26903 00013784 5B                      	pop rbx
 26904 00013785 BE00000000              	mov rsi, 0
 26905                                  .L_lambda_simple_params_loop_6d92:	; copy params
 26906 0001378A 4883FE01                	cmp rsi, 1
 26907 0001378E 740E                    	je .L_lambda_simple_params_end_6d92
 26908 00013790 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26909 00013795 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26910 00013799 48FFC6                  	inc rsi
 26911 0001379C EBEC                    	jmp .L_lambda_simple_params_loop_6d92
 26912                                  .L_lambda_simple_params_end_6d92:
 26913 0001379E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26914 000137A1 4889C3                  	mov rbx, rax
 26915 000137A4 58                      	pop rax
 26916 000137A5 C60004                  	mov byte [rax], T_closure
 26917 000137A8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26918 000137AC 48C74009[B9370100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d92
 26919 000137B4 E9E6020000              	jmp .L_lambda_simple_end_6d92
 26920                                  .L_lambda_simple_code_6d92:	; lambda-simple body
 26921 000137B9 48837C241003            	cmp qword [rsp + 8 * 2], 3
 26922 000137BF 740B                    	je .L_lambda_simple_arity_check_ok_6d92
 26923 000137C1 FF742410                	push qword [rsp + 8 * 2]
 26924 000137C5 6A03                    	push 3
 26925 000137C7 E9F61E0000              	jmp L_error_incorrect_arity_simple
 26926                                  .L_lambda_simple_arity_check_ok_6d92:
 26927 000137CC C8000000                	enter 0, 0
 26928 000137D0 488B4530                	mov rax, PARAM(2)	; param j
 26929 000137D4 50                      	push rax
 26930 000137D5 488B4528                	mov rax, PARAM(1)	; param i
 26931 000137D9 50                      	push rax
 26932 000137DA 6A02                    	push 2	; arg count
 26933 000137DC 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 26934 000137E4 803805                  	cmp byte [rax], T_undefined
 26935 000137E7 0F84EF1D0000            	je L_error_fvar_undefined
 26936 000137ED 803804                  	cmp byte [rax], T_closure
 26937 000137F0 0F856A1E0000            	jne L_error_non_closure
 26938 000137F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26939 000137F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26940                                  
 26941 000137FC 483D[02000000]          	cmp rax, sob_boolean_false
 26942 00013802 0F848F020000            	je .L_if_else_7741
 26943                                  	; preparing a tail-call
 26944 00013808 488B4528                	mov rax, PARAM(1)	; param i
 26945 0001380C 50                      	push rax
 26946 0001380D 488B4520                	mov rax, PARAM(0)	; param str
 26947 00013811 50                      	push rax
 26948 00013812 6A02                    	push 2	; arg count
 26949 00013814 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 26950 0001381C 803805                  	cmp byte [rax], T_undefined
 26951 0001381F 0F84B71D0000            	je L_error_fvar_undefined
 26952 00013825 803804                  	cmp byte [rax], T_closure
 26953 00013828 0F85321E0000            	jne L_error_non_closure
 26954 0001382E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26955 00013831 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26956 00013834 50                      	push rax
 26957 00013835 6A01                    	push 1	; arg count
 26958 00013837 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26959 0001383C E8C81E0000              	call malloc
 26960 00013841 50                      	push rax
 26961 00013842 BF18000000              	mov rdi, 8 * 3	; new rib
 26962 00013847 E8BD1E0000              	call malloc
 26963 0001384C 50                      	push rax
 26964 0001384D BF18000000              	mov rdi, 8 * 3	; extended env
 26965 00013852 E8B21E0000              	call malloc
 26966 00013857 488B7D10                	mov rdi, ENV
 26967 0001385B BE00000000              	mov rsi, 0
 26968 00013860 BA01000000              	mov rdx, 1
 26969                                  .L_lambda_simple_env_loop_6d93:	; ext_env[i + 1] <-- env[i]
 26970 00013865 4883FE02                	cmp rsi, 2
 26971 00013869 7410                    	je .L_lambda_simple_env_end_6d93
 26972 0001386B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26973 0001386F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26974 00013873 48FFC6                  	inc rsi
 26975 00013876 48FFC2                  	inc rdx
 26976 00013879 EBEA                    	jmp .L_lambda_simple_env_loop_6d93
 26977                                  .L_lambda_simple_env_end_6d93:
 26978 0001387B 5B                      	pop rbx
 26979 0001387C BE00000000              	mov rsi, 0
 26980                                  .L_lambda_simple_params_loop_6d93:	; copy params
 26981 00013881 4883FE03                	cmp rsi, 3
 26982 00013885 740E                    	je .L_lambda_simple_params_end_6d93
 26983 00013887 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26984 0001388C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26985 00013890 48FFC6                  	inc rsi
 26986 00013893 EBEC                    	jmp .L_lambda_simple_params_loop_6d93
 26987                                  .L_lambda_simple_params_end_6d93:
 26988 00013895 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26989 00013898 4889C3                  	mov rbx, rax
 26990 0001389B 58                      	pop rax
 26991 0001389C C60004                  	mov byte [rax], T_closure
 26992 0001389F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26993 000138A3 48C74009[B0380100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d93
 26994 000138AB E9A0010000              	jmp .L_lambda_simple_end_6d93
 26995                                  .L_lambda_simple_code_6d93:	; lambda-simple body
 26996 000138B0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26997 000138B6 740B                    	je .L_lambda_simple_arity_check_ok_6d93
 26998 000138B8 FF742410                	push qword [rsp + 8 * 2]
 26999 000138BC 6A01                    	push 1
 27000 000138BE E9FF1D0000              	jmp L_error_incorrect_arity_simple
 27001                                  .L_lambda_simple_arity_check_ok_6d93:
 27002 000138C3 C8000000                	enter 0, 0
 27003 000138C7 488B4510                	mov rax, ENV
 27004 000138CB 488B00                  	mov rax, qword [rax + 8 * 0]
 27005 000138CE 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27006 000138D2 50                      	push rax
 27007 000138D3 488B4510                	mov rax, ENV
 27008 000138D7 488B00                  	mov rax, qword [rax + 8 * 0]
 27009 000138DA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27010 000138DD 50                      	push rax
 27011 000138DE 6A02                    	push 2	; arg count
 27012 000138E0 488B0425[2D110000]      	mov rax, qword [free_var_53]	; free var string-ref
 27013 000138E8 803805                  	cmp byte [rax], T_undefined
 27014 000138EB 0F84EB1C0000            	je L_error_fvar_undefined
 27015 000138F1 803804                  	cmp byte [rax], T_closure
 27016 000138F4 0F85661D0000            	jne L_error_non_closure
 27017 000138FA FF7001                  	push SOB_CLOSURE_ENV(rax)
 27018 000138FD FF5009                  	call SOB_CLOSURE_CODE(rax)
 27019 00013900 50                      	push rax
 27020 00013901 488B4510                	mov rax, ENV
 27021 00013905 488B00                  	mov rax, qword [rax + 8 * 0]
 27022 00013908 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27023 0001390C 50                      	push rax
 27024 0001390D 488B4510                	mov rax, ENV
 27025 00013911 488B00                  	mov rax, qword [rax + 8 * 0]
 27026 00013914 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27027 00013917 50                      	push rax
 27028 00013918 6A03                    	push 3	; arg count
 27029 0001391A 488B0425[60110000]      	mov rax, qword [free_var_56]	; free var string-set!
 27030 00013922 803805                  	cmp byte [rax], T_undefined
 27031 00013925 0F84B11C0000            	je L_error_fvar_undefined
 27032 0001392B 803804                  	cmp byte [rax], T_closure
 27033 0001392E 0F852C1D0000            	jne L_error_non_closure
 27034 00013934 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27035 00013937 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27036                                  
 27037 0001393A 488B4520                	mov rax, PARAM(0)	; param ch
 27038 0001393E 50                      	push rax
 27039 0001393F 488B4510                	mov rax, ENV
 27040 00013943 488B00                  	mov rax, qword [rax + 8 * 0]
 27041 00013946 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27042 0001394A 50                      	push rax
 27043 0001394B 488B4510                	mov rax, ENV
 27044 0001394F 488B00                  	mov rax, qword [rax + 8 * 0]
 27045 00013952 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27046 00013955 50                      	push rax
 27047 00013956 6A03                    	push 3	; arg count
 27048 00013958 488B0425[60110000]      	mov rax, qword [free_var_56]	; free var string-set!
 27049 00013960 803805                  	cmp byte [rax], T_undefined
 27050 00013963 0F84731C0000            	je L_error_fvar_undefined
 27051 00013969 803804                  	cmp byte [rax], T_closure
 27052 0001396C 0F85EE1C0000            	jne L_error_non_closure
 27053 00013972 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27054 00013975 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27055                                  
 27056                                  	; preparing a tail-call
 27057 00013978 48B8-                   	mov rax, L_constants + 2158
 27057 0001397A [6E08000000000000] 
 27058 00013982 50                      	push rax
 27059 00013983 488B4510                	mov rax, ENV
 27060 00013987 488B00                  	mov rax, qword [rax + 8 * 0]
 27061 0001398A 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27062 0001398E 50                      	push rax
 27063 0001398F 6A02                    	push 2	; arg count
 27064 00013991 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 27065 00013999 803805                  	cmp byte [rax], T_undefined
 27066 0001399C 0F843A1C0000            	je L_error_fvar_undefined
 27067 000139A2 803804                  	cmp byte [rax], T_closure
 27068 000139A5 0F85B51C0000            	jne L_error_non_closure
 27069 000139AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 27070 000139AE FF5009                  	call SOB_CLOSURE_CODE(rax)
 27071 000139B1 50                      	push rax
 27072 000139B2 48B8-                   	mov rax, L_constants + 2158
 27072 000139B4 [6E08000000000000] 
 27073 000139BC 50                      	push rax
 27074 000139BD 488B4510                	mov rax, ENV
 27075 000139C1 488B00                  	mov rax, qword [rax + 8 * 0]
 27076 000139C4 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27077 000139C8 50                      	push rax
 27078 000139C9 6A02                    	push 2	; arg count
 27079 000139CB 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 27080 000139D3 803805                  	cmp byte [rax], T_undefined
 27081 000139D6 0F84001C0000            	je L_error_fvar_undefined
 27082 000139DC 803804                  	cmp byte [rax], T_closure
 27083 000139DF 0F857B1C0000            	jne L_error_non_closure
 27084 000139E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27085 000139E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27086 000139EB 50                      	push rax
 27087 000139EC 488B4510                	mov rax, ENV
 27088 000139F0 488B00                  	mov rax, qword [rax + 8 * 0]
 27089 000139F3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27090 000139F6 50                      	push rax
 27091 000139F7 6A03                    	push 3	; arg count
 27092 000139F9 488B4510                	mov rax, ENV
 27093 000139FD 488B4008                	mov rax, qword [rax + 8 * 1]
 27094 00013A01 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27095 00013A04 488B00                  	mov rax, qword [rax]
 27096 00013A07 803804                  	cmp byte [rax], T_closure
 27097 00013A0A 0F85501C0000            	jne L_error_non_closure
 27098 00013A10 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27099                                  
 27100                                  	; recycling the current frame
 27101 00013A13 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27102 00013A16 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27103 00013A19 B907000000              	mov rcx, 3 + 4
 27104 00013A1E 488B5D18                	mov rbx, COUNT
 27105 00013A22 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27106 00013A27 488D55F8                	lea rdx, [rbp - 8 * 1]
 27107                                  .L_tc_recycle_frame_loop_8f8b:
 27108 00013A2B 4883F900                	cmp rcx, 0
 27109 00013A2F 7413                    	je .L_tc_recycle_frame_done_8f8b
 27110 00013A31 488B32                  	mov rsi, qword [rdx]
 27111 00013A34 488933                  	mov qword [rbx], rsi
 27112 00013A37 48FFC9                  	dec rcx
 27113 00013A3A 4883EB08                	sub rbx, 8 * 1
 27114 00013A3E 4883EA08                	sub rdx, 8 * 1
 27115 00013A42 EBE7                    	jmp .L_tc_recycle_frame_loop_8f8b
 27116                                  .L_tc_recycle_frame_done_8f8b:
 27117 00013A44 488D6308                	lea rsp, [rbx + 8 * 1]
 27118 00013A48 5D                      	pop rbp	; the proc will restore it!
 27119 00013A49 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27120 00013A4C C9                      	leave
 27121 00013A4D C21800                  	ret AND_KILL_FRAME(1)
 27122                                  .L_lambda_simple_end_6d93:	; new closure is in rax
 27123 00013A50 803804                  	cmp byte [rax], T_closure
 27124 00013A53 0F85071C0000            	jne L_error_non_closure
 27125 00013A59 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27126                                  
 27127                                  	; recycling the current frame
 27128 00013A5C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27129 00013A5F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27130 00013A62 B905000000              	mov rcx, 1 + 4
 27131 00013A67 488B5D18                	mov rbx, COUNT
 27132 00013A6B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27133 00013A70 488D55F8                	lea rdx, [rbp - 8 * 1]
 27134                                  .L_tc_recycle_frame_loop_8f8c:
 27135 00013A74 4883F900                	cmp rcx, 0
 27136 00013A78 7413                    	je .L_tc_recycle_frame_done_8f8c
 27137 00013A7A 488B32                  	mov rsi, qword [rdx]
 27138 00013A7D 488933                  	mov qword [rbx], rsi
 27139 00013A80 48FFC9                  	dec rcx
 27140 00013A83 4883EB08                	sub rbx, 8 * 1
 27141 00013A87 4883EA08                	sub rdx, 8 * 1
 27142 00013A8B EBE7                    	jmp .L_tc_recycle_frame_loop_8f8c
 27143                                  .L_tc_recycle_frame_done_8f8c:
 27144 00013A8D 488D6308                	lea rsp, [rbx + 8 * 1]
 27145 00013A91 5D                      	pop rbp	; the proc will restore it!
 27146 00013A92 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27147                                  
 27148 00013A95 EB04                    	jmp .L_if_end_7741
 27149                                  
 27150                                  	.L_if_else_7741:
 27151 00013A97 488B4520                	mov rax, PARAM(0)	; param str
 27152                                  
 27153                                  	.L_if_end_7741:
 27154 00013A9B C9                      	leave
 27155 00013A9C C22800                  	ret AND_KILL_FRAME(3)
 27156                                  .L_lambda_simple_end_6d92:	; new closure is in rax
 27157                                  
 27158 00013A9F 50                      	push rax
 27159 00013AA0 488B4520                	mov rax, PARAM(0)	; param run
 27160                                  
 27161 00013AA4 8F00                    	pop qword[rax]
 27162 00013AA6 48B8-                   	mov rax, sob_void
 27162 00013AA8 [0000000000000000] 
 27163                                  
 27164 00013AB0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27165 00013AB5 E84F1C0000              	call malloc
 27166 00013ABA 50                      	push rax
 27167 00013ABB BF08000000              	mov rdi, 8 * 1	; new rib
 27168 00013AC0 E8441C0000              	call malloc
 27169 00013AC5 50                      	push rax
 27170 00013AC6 BF10000000              	mov rdi, 8 * 2	; extended env
 27171 00013ACB E8391C0000              	call malloc
 27172 00013AD0 488B7D10                	mov rdi, ENV
 27173 00013AD4 BE00000000              	mov rsi, 0
 27174 00013AD9 BA01000000              	mov rdx, 1
 27175                                  .L_lambda_simple_env_loop_6d94:	; ext_env[i + 1] <-- env[i]
 27176 00013ADE 4883FE01                	cmp rsi, 1
 27177 00013AE2 7410                    	je .L_lambda_simple_env_end_6d94
 27178 00013AE4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27179 00013AE8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27180 00013AEC 48FFC6                  	inc rsi
 27181 00013AEF 48FFC2                  	inc rdx
 27182 00013AF2 EBEA                    	jmp .L_lambda_simple_env_loop_6d94
 27183                                  .L_lambda_simple_env_end_6d94:
 27184 00013AF4 5B                      	pop rbx
 27185 00013AF5 BE00000000              	mov rsi, 0
 27186                                  .L_lambda_simple_params_loop_6d94:	; copy params
 27187 00013AFA 4883FE01                	cmp rsi, 1
 27188 00013AFE 740E                    	je .L_lambda_simple_params_end_6d94
 27189 00013B00 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27190 00013B05 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27191 00013B09 48FFC6                  	inc rsi
 27192 00013B0C EBEC                    	jmp .L_lambda_simple_params_loop_6d94
 27193                                  .L_lambda_simple_params_end_6d94:
 27194 00013B0E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27195 00013B11 4889C3                  	mov rbx, rax
 27196 00013B14 58                      	pop rax
 27197 00013B15 C60004                  	mov byte [rax], T_closure
 27198 00013B18 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27199 00013B1C 48C74009[293B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d94
 27200 00013B24 E9FA010000              	jmp .L_lambda_simple_end_6d94
 27201                                  .L_lambda_simple_code_6d94:	; lambda-simple body
 27202 00013B29 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27203 00013B2F 740B                    	je .L_lambda_simple_arity_check_ok_6d94
 27204 00013B31 FF742410                	push qword [rsp + 8 * 2]
 27205 00013B35 6A01                    	push 1
 27206 00013B37 E9861B0000              	jmp L_error_incorrect_arity_simple
 27207                                  .L_lambda_simple_arity_check_ok_6d94:
 27208 00013B3C C8000000                	enter 0, 0
 27209                                  	; preparing a tail-call
 27210 00013B40 488B4520                	mov rax, PARAM(0)	; param str
 27211 00013B44 50                      	push rax
 27212 00013B45 6A01                    	push 1	; arg count
 27213 00013B47 488B0425[DA0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 27214 00013B4F 803805                  	cmp byte [rax], T_undefined
 27215 00013B52 0F84841A0000            	je L_error_fvar_undefined
 27216 00013B58 803804                  	cmp byte [rax], T_closure
 27217 00013B5B 0F85FF1A0000            	jne L_error_non_closure
 27218 00013B61 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27219 00013B64 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27220 00013B67 50                      	push rax
 27221 00013B68 6A01                    	push 1	; arg count
 27222 00013B6A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27223 00013B6F E8951B0000              	call malloc
 27224 00013B74 50                      	push rax
 27225 00013B75 BF08000000              	mov rdi, 8 * 1	; new rib
 27226 00013B7A E88A1B0000              	call malloc
 27227 00013B7F 50                      	push rax
 27228 00013B80 BF18000000              	mov rdi, 8 * 3	; extended env
 27229 00013B85 E87F1B0000              	call malloc
 27230 00013B8A 488B7D10                	mov rdi, ENV
 27231 00013B8E BE00000000              	mov rsi, 0
 27232 00013B93 BA01000000              	mov rdx, 1
 27233                                  .L_lambda_simple_env_loop_6d95:	; ext_env[i + 1] <-- env[i]
 27234 00013B98 4883FE02                	cmp rsi, 2
 27235 00013B9C 7410                    	je .L_lambda_simple_env_end_6d95
 27236 00013B9E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27237 00013BA2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27238 00013BA6 48FFC6                  	inc rsi
 27239 00013BA9 48FFC2                  	inc rdx
 27240 00013BAC EBEA                    	jmp .L_lambda_simple_env_loop_6d95
 27241                                  .L_lambda_simple_env_end_6d95:
 27242 00013BAE 5B                      	pop rbx
 27243 00013BAF BE00000000              	mov rsi, 0
 27244                                  .L_lambda_simple_params_loop_6d95:	; copy params
 27245 00013BB4 4883FE01                	cmp rsi, 1
 27246 00013BB8 740E                    	je .L_lambda_simple_params_end_6d95
 27247 00013BBA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27248 00013BBF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27249 00013BC3 48FFC6                  	inc rsi
 27250 00013BC6 EBEC                    	jmp .L_lambda_simple_params_loop_6d95
 27251                                  .L_lambda_simple_params_end_6d95:
 27252 00013BC8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27253 00013BCB 4889C3                  	mov rbx, rax
 27254 00013BCE 58                      	pop rax
 27255 00013BCF C60004                  	mov byte [rax], T_closure
 27256 00013BD2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27257 00013BD6 48C74009[E33B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d95
 27258 00013BDE E9F7000000              	jmp .L_lambda_simple_end_6d95
 27259                                  .L_lambda_simple_code_6d95:	; lambda-simple body
 27260 00013BE3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27261 00013BE9 740B                    	je .L_lambda_simple_arity_check_ok_6d95
 27262 00013BEB FF742410                	push qword [rsp + 8 * 2]
 27263 00013BEF 6A01                    	push 1
 27264 00013BF1 E9CC1A0000              	jmp L_error_incorrect_arity_simple
 27265                                  .L_lambda_simple_arity_check_ok_6d95:
 27266 00013BF6 C8000000                	enter 0, 0
 27267 00013BFA 488B4520                	mov rax, PARAM(0)	; param n
 27268 00013BFE 50                      	push rax
 27269 00013BFF 6A01                    	push 1	; arg count
 27270 00013C01 488B0425[730F0000]      	mov rax, qword [free_var_27]	; free var zero?
 27271 00013C09 803805                  	cmp byte [rax], T_undefined
 27272 00013C0C 0F84CA190000            	je L_error_fvar_undefined
 27273 00013C12 803804                  	cmp byte [rax], T_closure
 27274 00013C15 0F85451A0000            	jne L_error_non_closure
 27275 00013C1B FF7001                  	push SOB_CLOSURE_ENV(rax)
 27276 00013C1E FF5009                  	call SOB_CLOSURE_CODE(rax)
 27277                                  
 27278 00013C21 483D[02000000]          	cmp rax, sob_boolean_false
 27279 00013C27 740F                    	je .L_if_else_7742
 27280 00013C29 488B4510                	mov rax, ENV
 27281 00013C2D 488B00                  	mov rax, qword [rax + 8 * 0]
 27282 00013C30 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27283                                  
 27284 00013C33 E99E000000              	jmp .L_if_end_7742
 27285                                  
 27286                                  	.L_if_else_7742:
 27287                                  	; preparing a tail-call
 27288 00013C38 48B8-                   	mov rax, L_constants + 2158
 27288 00013C3A [6E08000000000000] 
 27289 00013C42 50                      	push rax
 27290 00013C43 488B4520                	mov rax, PARAM(0)	; param n
 27291 00013C47 50                      	push rax
 27292 00013C48 6A02                    	push 2	; arg count
 27293 00013C4A 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 27294 00013C52 803805                  	cmp byte [rax], T_undefined
 27295 00013C55 0F8481190000            	je L_error_fvar_undefined
 27296 00013C5B 803804                  	cmp byte [rax], T_closure
 27297 00013C5E 0F85FC190000            	jne L_error_non_closure
 27298 00013C64 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27299 00013C67 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27300 00013C6A 50                      	push rax
 27301 00013C6B 48B8-                   	mov rax, L_constants + 2023
 27301 00013C6D [E707000000000000] 
 27302 00013C75 50                      	push rax
 27303 00013C76 488B4510                	mov rax, ENV
 27304 00013C7A 488B00                  	mov rax, qword [rax + 8 * 0]
 27305 00013C7D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27306 00013C80 50                      	push rax
 27307 00013C81 6A03                    	push 3	; arg count
 27308 00013C83 488B4510                	mov rax, ENV
 27309 00013C87 488B4008                	mov rax, qword [rax + 8 * 1]
 27310 00013C8B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27311 00013C8E 488B00                  	mov rax, qword [rax]
 27312 00013C91 803804                  	cmp byte [rax], T_closure
 27313 00013C94 0F85C6190000            	jne L_error_non_closure
 27314 00013C9A FF7001                  	push SOB_CLOSURE_ENV(rax)
 27315                                  
 27316                                  	; recycling the current frame
 27317 00013C9D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27318 00013CA0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27319 00013CA3 B907000000              	mov rcx, 3 + 4
 27320 00013CA8 488B5D18                	mov rbx, COUNT
 27321 00013CAC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27322 00013CB1 488D55F8                	lea rdx, [rbp - 8 * 1]
 27323                                  .L_tc_recycle_frame_loop_8f8d:
 27324 00013CB5 4883F900                	cmp rcx, 0
 27325 00013CB9 7413                    	je .L_tc_recycle_frame_done_8f8d
 27326 00013CBB 488B32                  	mov rsi, qword [rdx]
 27327 00013CBE 488933                  	mov qword [rbx], rsi
 27328 00013CC1 48FFC9                  	dec rcx
 27329 00013CC4 4883EB08                	sub rbx, 8 * 1
 27330 00013CC8 4883EA08                	sub rdx, 8 * 1
 27331 00013CCC EBE7                    	jmp .L_tc_recycle_frame_loop_8f8d
 27332                                  .L_tc_recycle_frame_done_8f8d:
 27333 00013CCE 488D6308                	lea rsp, [rbx + 8 * 1]
 27334 00013CD2 5D                      	pop rbp	; the proc will restore it!
 27335 00013CD3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27336                                  
 27337                                  	.L_if_end_7742:
 27338 00013CD6 C9                      	leave
 27339 00013CD7 C21800                  	ret AND_KILL_FRAME(1)
 27340                                  .L_lambda_simple_end_6d95:	; new closure is in rax
 27341 00013CDA 803804                  	cmp byte [rax], T_closure
 27342 00013CDD 0F857D190000            	jne L_error_non_closure
 27343 00013CE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27344                                  
 27345                                  	; recycling the current frame
 27346 00013CE6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27347 00013CE9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27348 00013CEC B905000000              	mov rcx, 1 + 4
 27349 00013CF1 488B5D18                	mov rbx, COUNT
 27350 00013CF5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27351 00013CFA 488D55F8                	lea rdx, [rbp - 8 * 1]
 27352                                  .L_tc_recycle_frame_loop_8f8e:
 27353 00013CFE 4883F900                	cmp rcx, 0
 27354 00013D02 7413                    	je .L_tc_recycle_frame_done_8f8e
 27355 00013D04 488B32                  	mov rsi, qword [rdx]
 27356 00013D07 488933                  	mov qword [rbx], rsi
 27357 00013D0A 48FFC9                  	dec rcx
 27358 00013D0D 4883EB08                	sub rbx, 8 * 1
 27359 00013D11 4883EA08                	sub rdx, 8 * 1
 27360 00013D15 EBE7                    	jmp .L_tc_recycle_frame_loop_8f8e
 27361                                  .L_tc_recycle_frame_done_8f8e:
 27362 00013D17 488D6308                	lea rsp, [rbx + 8 * 1]
 27363 00013D1B 5D                      	pop rbp	; the proc will restore it!
 27364 00013D1C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27365 00013D1F C9                      	leave
 27366 00013D20 C21800                  	ret AND_KILL_FRAME(1)
 27367                                  .L_lambda_simple_end_6d94:	; new closure is in rax
 27368 00013D23 C9                      	leave
 27369 00013D24 C21800                  	ret AND_KILL_FRAME(1)
 27370                                  .L_lambda_simple_end_6d91:	; new closure is in rax
 27371 00013D27 803804                  	cmp byte [rax], T_closure
 27372 00013D2A 0F8530190000            	jne L_error_non_closure
 27373 00013D30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27374 00013D33 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27375 00013D36 48890425[F2180000]      	mov qword [free_var_170], rax
 27376 00013D3E 48B8-                   	mov rax, sob_void
 27376 00013D40 [0000000000000000] 
 27377                                  
 27378 00013D48 4889C7                  	mov rdi, rax
 27379 00013D4B E8CB1A0000              	call print_sexpr_if_not_void
 27380                                  
 27381 00013D50 48B8-                   	mov rax, L_constants + 1881
 27381 00013D52 [5907000000000000] 
 27382 00013D5A 50                      	push rax
 27383 00013D5B 6A01                    	push 1	; arg count
 27384 00013D5D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27385 00013D62 E8A2190000              	call malloc
 27386 00013D67 50                      	push rax
 27387 00013D68 BF00000000              	mov rdi, 8 * 0	; new rib
 27388 00013D6D E897190000              	call malloc
 27389 00013D72 50                      	push rax
 27390 00013D73 BF08000000              	mov rdi, 8 * 1	; extended env
 27391 00013D78 E88C190000              	call malloc
 27392 00013D7D 488B7D10                	mov rdi, ENV
 27393 00013D81 BE00000000              	mov rsi, 0
 27394 00013D86 BA01000000              	mov rdx, 1
 27395                                  .L_lambda_simple_env_loop_6d96:	; ext_env[i + 1] <-- env[i]
 27396 00013D8B 4883FE00                	cmp rsi, 0
 27397 00013D8F 7410                    	je .L_lambda_simple_env_end_6d96
 27398 00013D91 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27399 00013D95 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27400 00013D99 48FFC6                  	inc rsi
 27401 00013D9C 48FFC2                  	inc rdx
 27402 00013D9F EBEA                    	jmp .L_lambda_simple_env_loop_6d96
 27403                                  .L_lambda_simple_env_end_6d96:
 27404 00013DA1 5B                      	pop rbx
 27405 00013DA2 BE00000000              	mov rsi, 0
 27406                                  .L_lambda_simple_params_loop_6d96:	; copy params
 27407 00013DA7 4883FE00                	cmp rsi, 0
 27408 00013DAB 740E                    	je .L_lambda_simple_params_end_6d96
 27409 00013DAD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27410 00013DB2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27411 00013DB6 48FFC6                  	inc rsi
 27412 00013DB9 EBEC                    	jmp .L_lambda_simple_params_loop_6d96
 27413                                  .L_lambda_simple_params_end_6d96:
 27414 00013DBB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27415 00013DBE 4889C3                  	mov rbx, rax
 27416 00013DC1 58                      	pop rax
 27417 00013DC2 C60004                  	mov byte [rax], T_closure
 27418 00013DC5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27419 00013DC9 48C74009[D63D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d96
 27420 00013DD1 E91D060000              	jmp .L_lambda_simple_end_6d96
 27421                                  .L_lambda_simple_code_6d96:	; lambda-simple body
 27422 00013DD6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27423 00013DDC 740B                    	je .L_lambda_simple_arity_check_ok_6d96
 27424 00013DDE FF742410                	push qword [rsp + 8 * 2]
 27425 00013DE2 6A01                    	push 1
 27426 00013DE4 E9D9180000              	jmp L_error_incorrect_arity_simple
 27427                                  .L_lambda_simple_arity_check_ok_6d96:
 27428 00013DE9 C8000000                	enter 0, 0
 27429                                  
 27430 00013DED BF08000000              	mov rdi, 8
 27431 00013DF2 E812190000              	call malloc
 27432 00013DF7 488B5D20                	mov rbx, PARAM(0)	; param run
 27433 00013DFB 488918                  	mov [rax], rbx	; box run
 27434 00013DFE 48894520                	mov PARAM(0), rax	;replace param run with box
 27435 00013E02 48B8-                   	mov rax, sob_void
 27435 00013E04 [0000000000000000] 
 27436                                  
 27437 00013E0C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27438 00013E11 E8F3180000              	call malloc
 27439 00013E16 50                      	push rax
 27440 00013E17 BF08000000              	mov rdi, 8 * 1	; new rib
 27441 00013E1C E8E8180000              	call malloc
 27442 00013E21 50                      	push rax
 27443 00013E22 BF10000000              	mov rdi, 8 * 2	; extended env
 27444 00013E27 E8DD180000              	call malloc
 27445 00013E2C 488B7D10                	mov rdi, ENV
 27446 00013E30 BE00000000              	mov rsi, 0
 27447 00013E35 BA01000000              	mov rdx, 1
 27448                                  .L_lambda_simple_env_loop_6d97:	; ext_env[i + 1] <-- env[i]
 27449 00013E3A 4883FE01                	cmp rsi, 1
 27450 00013E3E 7410                    	je .L_lambda_simple_env_end_6d97
 27451 00013E40 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27452 00013E44 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27453 00013E48 48FFC6                  	inc rsi
 27454 00013E4B 48FFC2                  	inc rdx
 27455 00013E4E EBEA                    	jmp .L_lambda_simple_env_loop_6d97
 27456                                  .L_lambda_simple_env_end_6d97:
 27457 00013E50 5B                      	pop rbx
 27458 00013E51 BE00000000              	mov rsi, 0
 27459                                  .L_lambda_simple_params_loop_6d97:	; copy params
 27460 00013E56 4883FE01                	cmp rsi, 1
 27461 00013E5A 740E                    	je .L_lambda_simple_params_end_6d97
 27462 00013E5C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27463 00013E61 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27464 00013E65 48FFC6                  	inc rsi
 27465 00013E68 EBEC                    	jmp .L_lambda_simple_params_loop_6d97
 27466                                  .L_lambda_simple_params_end_6d97:
 27467 00013E6A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27468 00013E6D 4889C3                  	mov rbx, rax
 27469 00013E70 58                      	pop rax
 27470 00013E71 C60004                  	mov byte [rax], T_closure
 27471 00013E74 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27472 00013E78 48C74009[853E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d97
 27473 00013E80 E9E6020000              	jmp .L_lambda_simple_end_6d97
 27474                                  .L_lambda_simple_code_6d97:	; lambda-simple body
 27475 00013E85 48837C241003            	cmp qword [rsp + 8 * 2], 3
 27476 00013E8B 740B                    	je .L_lambda_simple_arity_check_ok_6d97
 27477 00013E8D FF742410                	push qword [rsp + 8 * 2]
 27478 00013E91 6A03                    	push 3
 27479 00013E93 E92A180000              	jmp L_error_incorrect_arity_simple
 27480                                  .L_lambda_simple_arity_check_ok_6d97:
 27481 00013E98 C8000000                	enter 0, 0
 27482 00013E9C 488B4530                	mov rax, PARAM(2)	; param j
 27483 00013EA0 50                      	push rax
 27484 00013EA1 488B4528                	mov rax, PARAM(1)	; param i
 27485 00013EA5 50                      	push rax
 27486 00013EA6 6A02                    	push 2	; arg count
 27487 00013EA8 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 27488 00013EB0 803805                  	cmp byte [rax], T_undefined
 27489 00013EB3 0F8423170000            	je L_error_fvar_undefined
 27490 00013EB9 803804                  	cmp byte [rax], T_closure
 27491 00013EBC 0F859E170000            	jne L_error_non_closure
 27492 00013EC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27493 00013EC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27494                                  
 27495 00013EC8 483D[02000000]          	cmp rax, sob_boolean_false
 27496 00013ECE 0F848F020000            	je .L_if_else_7743
 27497                                  	; preparing a tail-call
 27498 00013ED4 488B4528                	mov rax, PARAM(1)	; param i
 27499 00013ED8 50                      	push rax
 27500 00013ED9 488B4520                	mov rax, PARAM(0)	; param vec
 27501 00013EDD 50                      	push rax
 27502 00013EDE 6A02                    	push 2	; arg count
 27503 00013EE0 488B0425[3E110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 27504 00013EE8 803805                  	cmp byte [rax], T_undefined
 27505 00013EEB 0F84EB160000            	je L_error_fvar_undefined
 27506 00013EF1 803804                  	cmp byte [rax], T_closure
 27507 00013EF4 0F8566170000            	jne L_error_non_closure
 27508 00013EFA FF7001                  	push SOB_CLOSURE_ENV(rax)
 27509 00013EFD FF5009                  	call SOB_CLOSURE_CODE(rax)
 27510 00013F00 50                      	push rax
 27511 00013F01 6A01                    	push 1	; arg count
 27512 00013F03 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27513 00013F08 E8FC170000              	call malloc
 27514 00013F0D 50                      	push rax
 27515 00013F0E BF18000000              	mov rdi, 8 * 3	; new rib
 27516 00013F13 E8F1170000              	call malloc
 27517 00013F18 50                      	push rax
 27518 00013F19 BF18000000              	mov rdi, 8 * 3	; extended env
 27519 00013F1E E8E6170000              	call malloc
 27520 00013F23 488B7D10                	mov rdi, ENV
 27521 00013F27 BE00000000              	mov rsi, 0
 27522 00013F2C BA01000000              	mov rdx, 1
 27523                                  .L_lambda_simple_env_loop_6d98:	; ext_env[i + 1] <-- env[i]
 27524 00013F31 4883FE02                	cmp rsi, 2
 27525 00013F35 7410                    	je .L_lambda_simple_env_end_6d98
 27526 00013F37 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27527 00013F3B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27528 00013F3F 48FFC6                  	inc rsi
 27529 00013F42 48FFC2                  	inc rdx
 27530 00013F45 EBEA                    	jmp .L_lambda_simple_env_loop_6d98
 27531                                  .L_lambda_simple_env_end_6d98:
 27532 00013F47 5B                      	pop rbx
 27533 00013F48 BE00000000              	mov rsi, 0
 27534                                  .L_lambda_simple_params_loop_6d98:	; copy params
 27535 00013F4D 4883FE03                	cmp rsi, 3
 27536 00013F51 740E                    	je .L_lambda_simple_params_end_6d98
 27537 00013F53 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27538 00013F58 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27539 00013F5C 48FFC6                  	inc rsi
 27540 00013F5F EBEC                    	jmp .L_lambda_simple_params_loop_6d98
 27541                                  .L_lambda_simple_params_end_6d98:
 27542 00013F61 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27543 00013F64 4889C3                  	mov rbx, rax
 27544 00013F67 58                      	pop rax
 27545 00013F68 C60004                  	mov byte [rax], T_closure
 27546 00013F6B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27547 00013F6F 48C74009[7C3F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d98
 27548 00013F77 E9A0010000              	jmp .L_lambda_simple_end_6d98
 27549                                  .L_lambda_simple_code_6d98:	; lambda-simple body
 27550 00013F7C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27551 00013F82 740B                    	je .L_lambda_simple_arity_check_ok_6d98
 27552 00013F84 FF742410                	push qword [rsp + 8 * 2]
 27553 00013F88 6A01                    	push 1
 27554 00013F8A E933170000              	jmp L_error_incorrect_arity_simple
 27555                                  .L_lambda_simple_arity_check_ok_6d98:
 27556 00013F8F C8000000                	enter 0, 0
 27557 00013F93 488B4510                	mov rax, ENV
 27558 00013F97 488B00                  	mov rax, qword [rax + 8 * 0]
 27559 00013F9A 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27560 00013F9E 50                      	push rax
 27561 00013F9F 488B4510                	mov rax, ENV
 27562 00013FA3 488B00                  	mov rax, qword [rax + 8 * 0]
 27563 00013FA6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27564 00013FA9 50                      	push rax
 27565 00013FAA 6A02                    	push 2	; arg count
 27566 00013FAC 488B0425[3E110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 27567 00013FB4 803805                  	cmp byte [rax], T_undefined
 27568 00013FB7 0F841F160000            	je L_error_fvar_undefined
 27569 00013FBD 803804                  	cmp byte [rax], T_closure
 27570 00013FC0 0F859A160000            	jne L_error_non_closure
 27571 00013FC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27572 00013FC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27573 00013FCC 50                      	push rax
 27574 00013FCD 488B4510                	mov rax, ENV
 27575 00013FD1 488B00                  	mov rax, qword [rax + 8 * 0]
 27576 00013FD4 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27577 00013FD8 50                      	push rax
 27578 00013FD9 488B4510                	mov rax, ENV
 27579 00013FDD 488B00                  	mov rax, qword [rax + 8 * 0]
 27580 00013FE0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27581 00013FE3 50                      	push rax
 27582 00013FE4 6A03                    	push 3	; arg count
 27583 00013FE6 488B0425[4F110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 27584 00013FEE 803805                  	cmp byte [rax], T_undefined
 27585 00013FF1 0F84E5150000            	je L_error_fvar_undefined
 27586 00013FF7 803804                  	cmp byte [rax], T_closure
 27587 00013FFA 0F8560160000            	jne L_error_non_closure
 27588 00014000 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27589 00014003 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27590                                  
 27591 00014006 488B4520                	mov rax, PARAM(0)	; param ch
 27592 0001400A 50                      	push rax
 27593 0001400B 488B4510                	mov rax, ENV
 27594 0001400F 488B00                  	mov rax, qword [rax + 8 * 0]
 27595 00014012 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27596 00014016 50                      	push rax
 27597 00014017 488B4510                	mov rax, ENV
 27598 0001401B 488B00                  	mov rax, qword [rax + 8 * 0]
 27599 0001401E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27600 00014021 50                      	push rax
 27601 00014022 6A03                    	push 3	; arg count
 27602 00014024 488B0425[4F110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 27603 0001402C 803805                  	cmp byte [rax], T_undefined
 27604 0001402F 0F84A7150000            	je L_error_fvar_undefined
 27605 00014035 803804                  	cmp byte [rax], T_closure
 27606 00014038 0F8522160000            	jne L_error_non_closure
 27607 0001403E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27608 00014041 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27609                                  
 27610                                  	; preparing a tail-call
 27611 00014044 48B8-                   	mov rax, L_constants + 2158
 27611 00014046 [6E08000000000000] 
 27612 0001404E 50                      	push rax
 27613 0001404F 488B4510                	mov rax, ENV
 27614 00014053 488B00                  	mov rax, qword [rax + 8 * 0]
 27615 00014056 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27616 0001405A 50                      	push rax
 27617 0001405B 6A02                    	push 2	; arg count
 27618 0001405D 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 27619 00014065 803805                  	cmp byte [rax], T_undefined
 27620 00014068 0F846E150000            	je L_error_fvar_undefined
 27621 0001406E 803804                  	cmp byte [rax], T_closure
 27622 00014071 0F85E9150000            	jne L_error_non_closure
 27623 00014077 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27624 0001407A FF5009                  	call SOB_CLOSURE_CODE(rax)
 27625 0001407D 50                      	push rax
 27626 0001407E 48B8-                   	mov rax, L_constants + 2158
 27626 00014080 [6E08000000000000] 
 27627 00014088 50                      	push rax
 27628 00014089 488B4510                	mov rax, ENV
 27629 0001408D 488B00                  	mov rax, qword [rax + 8 * 0]
 27630 00014090 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27631 00014094 50                      	push rax
 27632 00014095 6A02                    	push 2	; arg count
 27633 00014097 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 27634 0001409F 803805                  	cmp byte [rax], T_undefined
 27635 000140A2 0F8434150000            	je L_error_fvar_undefined
 27636 000140A8 803804                  	cmp byte [rax], T_closure
 27637 000140AB 0F85AF150000            	jne L_error_non_closure
 27638 000140B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27639 000140B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27640 000140B7 50                      	push rax
 27641 000140B8 488B4510                	mov rax, ENV
 27642 000140BC 488B00                  	mov rax, qword [rax + 8 * 0]
 27643 000140BF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27644 000140C2 50                      	push rax
 27645 000140C3 6A03                    	push 3	; arg count
 27646 000140C5 488B4510                	mov rax, ENV
 27647 000140C9 488B4008                	mov rax, qword [rax + 8 * 1]
 27648 000140CD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27649 000140D0 488B00                  	mov rax, qword [rax]
 27650 000140D3 803804                  	cmp byte [rax], T_closure
 27651 000140D6 0F8584150000            	jne L_error_non_closure
 27652 000140DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 27653                                  
 27654                                  	; recycling the current frame
 27655 000140DF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27656 000140E2 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27657 000140E5 B907000000              	mov rcx, 3 + 4
 27658 000140EA 488B5D18                	mov rbx, COUNT
 27659 000140EE 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27660 000140F3 488D55F8                	lea rdx, [rbp - 8 * 1]
 27661                                  .L_tc_recycle_frame_loop_8f8f:
 27662 000140F7 4883F900                	cmp rcx, 0
 27663 000140FB 7413                    	je .L_tc_recycle_frame_done_8f8f
 27664 000140FD 488B32                  	mov rsi, qword [rdx]
 27665 00014100 488933                  	mov qword [rbx], rsi
 27666 00014103 48FFC9                  	dec rcx
 27667 00014106 4883EB08                	sub rbx, 8 * 1
 27668 0001410A 4883EA08                	sub rdx, 8 * 1
 27669 0001410E EBE7                    	jmp .L_tc_recycle_frame_loop_8f8f
 27670                                  .L_tc_recycle_frame_done_8f8f:
 27671 00014110 488D6308                	lea rsp, [rbx + 8 * 1]
 27672 00014114 5D                      	pop rbp	; the proc will restore it!
 27673 00014115 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27674 00014118 C9                      	leave
 27675 00014119 C21800                  	ret AND_KILL_FRAME(1)
 27676                                  .L_lambda_simple_end_6d98:	; new closure is in rax
 27677 0001411C 803804                  	cmp byte [rax], T_closure
 27678 0001411F 0F853B150000            	jne L_error_non_closure
 27679 00014125 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27680                                  
 27681                                  	; recycling the current frame
 27682 00014128 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27683 0001412B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27684 0001412E B905000000              	mov rcx, 1 + 4
 27685 00014133 488B5D18                	mov rbx, COUNT
 27686 00014137 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27687 0001413C 488D55F8                	lea rdx, [rbp - 8 * 1]
 27688                                  .L_tc_recycle_frame_loop_8f90:
 27689 00014140 4883F900                	cmp rcx, 0
 27690 00014144 7413                    	je .L_tc_recycle_frame_done_8f90
 27691 00014146 488B32                  	mov rsi, qword [rdx]
 27692 00014149 488933                  	mov qword [rbx], rsi
 27693 0001414C 48FFC9                  	dec rcx
 27694 0001414F 4883EB08                	sub rbx, 8 * 1
 27695 00014153 4883EA08                	sub rdx, 8 * 1
 27696 00014157 EBE7                    	jmp .L_tc_recycle_frame_loop_8f90
 27697                                  .L_tc_recycle_frame_done_8f90:
 27698 00014159 488D6308                	lea rsp, [rbx + 8 * 1]
 27699 0001415D 5D                      	pop rbp	; the proc will restore it!
 27700 0001415E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27701                                  
 27702 00014161 EB04                    	jmp .L_if_end_7743
 27703                                  
 27704                                  	.L_if_else_7743:
 27705 00014163 488B4520                	mov rax, PARAM(0)	; param vec
 27706                                  
 27707                                  	.L_if_end_7743:
 27708 00014167 C9                      	leave
 27709 00014168 C22800                  	ret AND_KILL_FRAME(3)
 27710                                  .L_lambda_simple_end_6d97:	; new closure is in rax
 27711                                  
 27712 0001416B 50                      	push rax
 27713 0001416C 488B4520                	mov rax, PARAM(0)	; param run
 27714                                  
 27715 00014170 8F00                    	pop qword[rax]
 27716 00014172 48B8-                   	mov rax, sob_void
 27716 00014174 [0000000000000000] 
 27717                                  
 27718 0001417C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27719 00014181 E883150000              	call malloc
 27720 00014186 50                      	push rax
 27721 00014187 BF08000000              	mov rdi, 8 * 1	; new rib
 27722 0001418C E878150000              	call malloc
 27723 00014191 50                      	push rax
 27724 00014192 BF10000000              	mov rdi, 8 * 2	; extended env
 27725 00014197 E86D150000              	call malloc
 27726 0001419C 488B7D10                	mov rdi, ENV
 27727 000141A0 BE00000000              	mov rsi, 0
 27728 000141A5 BA01000000              	mov rdx, 1
 27729                                  .L_lambda_simple_env_loop_6d99:	; ext_env[i + 1] <-- env[i]
 27730 000141AA 4883FE01                	cmp rsi, 1
 27731 000141AE 7410                    	je .L_lambda_simple_env_end_6d99
 27732 000141B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27733 000141B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27734 000141B8 48FFC6                  	inc rsi
 27735 000141BB 48FFC2                  	inc rdx
 27736 000141BE EBEA                    	jmp .L_lambda_simple_env_loop_6d99
 27737                                  .L_lambda_simple_env_end_6d99:
 27738 000141C0 5B                      	pop rbx
 27739 000141C1 BE00000000              	mov rsi, 0
 27740                                  .L_lambda_simple_params_loop_6d99:	; copy params
 27741 000141C6 4883FE01                	cmp rsi, 1
 27742 000141CA 740E                    	je .L_lambda_simple_params_end_6d99
 27743 000141CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27744 000141D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27745 000141D5 48FFC6                  	inc rsi
 27746 000141D8 EBEC                    	jmp .L_lambda_simple_params_loop_6d99
 27747                                  .L_lambda_simple_params_end_6d99:
 27748 000141DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27749 000141DD 4889C3                  	mov rbx, rax
 27750 000141E0 58                      	pop rax
 27751 000141E1 C60004                  	mov byte [rax], T_closure
 27752 000141E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27753 000141E8 48C74009[F5410100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d99
 27754 000141F0 E9FA010000              	jmp .L_lambda_simple_end_6d99
 27755                                  .L_lambda_simple_code_6d99:	; lambda-simple body
 27756 000141F5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27757 000141FB 740B                    	je .L_lambda_simple_arity_check_ok_6d99
 27758 000141FD FF742410                	push qword [rsp + 8 * 2]
 27759 00014201 6A01                    	push 1
 27760 00014203 E9BA140000              	jmp L_error_incorrect_arity_simple
 27761                                  .L_lambda_simple_arity_check_ok_6d99:
 27762 00014208 C8000000                	enter 0, 0
 27763                                  	; preparing a tail-call
 27764 0001420C 488B4520                	mov rax, PARAM(0)	; param vec
 27765 00014210 50                      	push rax
 27766 00014211 6A01                    	push 1	; arg count
 27767 00014213 488B0425[EB0E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 27768 0001421B 803805                  	cmp byte [rax], T_undefined
 27769 0001421E 0F84B8130000            	je L_error_fvar_undefined
 27770 00014224 803804                  	cmp byte [rax], T_closure
 27771 00014227 0F8533140000            	jne L_error_non_closure
 27772 0001422D FF7001                  	push SOB_CLOSURE_ENV(rax)
 27773 00014230 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27774 00014233 50                      	push rax
 27775 00014234 6A01                    	push 1	; arg count
 27776 00014236 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27777 0001423B E8C9140000              	call malloc
 27778 00014240 50                      	push rax
 27779 00014241 BF08000000              	mov rdi, 8 * 1	; new rib
 27780 00014246 E8BE140000              	call malloc
 27781 0001424B 50                      	push rax
 27782 0001424C BF18000000              	mov rdi, 8 * 3	; extended env
 27783 00014251 E8B3140000              	call malloc
 27784 00014256 488B7D10                	mov rdi, ENV
 27785 0001425A BE00000000              	mov rsi, 0
 27786 0001425F BA01000000              	mov rdx, 1
 27787                                  .L_lambda_simple_env_loop_6d9a:	; ext_env[i + 1] <-- env[i]
 27788 00014264 4883FE02                	cmp rsi, 2
 27789 00014268 7410                    	je .L_lambda_simple_env_end_6d9a
 27790 0001426A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27791 0001426E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27792 00014272 48FFC6                  	inc rsi
 27793 00014275 48FFC2                  	inc rdx
 27794 00014278 EBEA                    	jmp .L_lambda_simple_env_loop_6d9a
 27795                                  .L_lambda_simple_env_end_6d9a:
 27796 0001427A 5B                      	pop rbx
 27797 0001427B BE00000000              	mov rsi, 0
 27798                                  .L_lambda_simple_params_loop_6d9a:	; copy params
 27799 00014280 4883FE01                	cmp rsi, 1
 27800 00014284 740E                    	je .L_lambda_simple_params_end_6d9a
 27801 00014286 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27802 0001428B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27803 0001428F 48FFC6                  	inc rsi
 27804 00014292 EBEC                    	jmp .L_lambda_simple_params_loop_6d9a
 27805                                  .L_lambda_simple_params_end_6d9a:
 27806 00014294 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27807 00014297 4889C3                  	mov rbx, rax
 27808 0001429A 58                      	pop rax
 27809 0001429B C60004                  	mov byte [rax], T_closure
 27810 0001429E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27811 000142A2 48C74009[AF420100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d9a
 27812 000142AA E9F7000000              	jmp .L_lambda_simple_end_6d9a
 27813                                  .L_lambda_simple_code_6d9a:	; lambda-simple body
 27814 000142AF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27815 000142B5 740B                    	je .L_lambda_simple_arity_check_ok_6d9a
 27816 000142B7 FF742410                	push qword [rsp + 8 * 2]
 27817 000142BB 6A01                    	push 1
 27818 000142BD E900140000              	jmp L_error_incorrect_arity_simple
 27819                                  .L_lambda_simple_arity_check_ok_6d9a:
 27820 000142C2 C8000000                	enter 0, 0
 27821 000142C6 488B4520                	mov rax, PARAM(0)	; param n
 27822 000142CA 50                      	push rax
 27823 000142CB 6A01                    	push 1	; arg count
 27824 000142CD 488B0425[730F0000]      	mov rax, qword [free_var_27]	; free var zero?
 27825 000142D5 803805                  	cmp byte [rax], T_undefined
 27826 000142D8 0F84FE120000            	je L_error_fvar_undefined
 27827 000142DE 803804                  	cmp byte [rax], T_closure
 27828 000142E1 0F8579130000            	jne L_error_non_closure
 27829 000142E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27830 000142EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 27831                                  
 27832 000142ED 483D[02000000]          	cmp rax, sob_boolean_false
 27833 000142F3 740F                    	je .L_if_else_7744
 27834 000142F5 488B4510                	mov rax, ENV
 27835 000142F9 488B00                  	mov rax, qword [rax + 8 * 0]
 27836 000142FC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27837                                  
 27838 000142FF E99E000000              	jmp .L_if_end_7744
 27839                                  
 27840                                  	.L_if_else_7744:
 27841                                  	; preparing a tail-call
 27842 00014304 48B8-                   	mov rax, L_constants + 2158
 27842 00014306 [6E08000000000000] 
 27843 0001430E 50                      	push rax
 27844 0001430F 488B4520                	mov rax, PARAM(0)	; param n
 27845 00014313 50                      	push rax
 27846 00014314 6A02                    	push 2	; arg count
 27847 00014316 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 27848 0001431E 803805                  	cmp byte [rax], T_undefined
 27849 00014321 0F84B5120000            	je L_error_fvar_undefined
 27850 00014327 803804                  	cmp byte [rax], T_closure
 27851 0001432A 0F8530130000            	jne L_error_non_closure
 27852 00014330 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27853 00014333 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27854 00014336 50                      	push rax
 27855 00014337 48B8-                   	mov rax, L_constants + 2023
 27855 00014339 [E707000000000000] 
 27856 00014341 50                      	push rax
 27857 00014342 488B4510                	mov rax, ENV
 27858 00014346 488B00                  	mov rax, qword [rax + 8 * 0]
 27859 00014349 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27860 0001434C 50                      	push rax
 27861 0001434D 6A03                    	push 3	; arg count
 27862 0001434F 488B4510                	mov rax, ENV
 27863 00014353 488B4008                	mov rax, qword [rax + 8 * 1]
 27864 00014357 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27865 0001435A 488B00                  	mov rax, qword [rax]
 27866 0001435D 803804                  	cmp byte [rax], T_closure
 27867 00014360 0F85FA120000            	jne L_error_non_closure
 27868 00014366 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27869                                  
 27870                                  	; recycling the current frame
 27871 00014369 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27872 0001436C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27873 0001436F B907000000              	mov rcx, 3 + 4
 27874 00014374 488B5D18                	mov rbx, COUNT
 27875 00014378 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27876 0001437D 488D55F8                	lea rdx, [rbp - 8 * 1]
 27877                                  .L_tc_recycle_frame_loop_8f91:
 27878 00014381 4883F900                	cmp rcx, 0
 27879 00014385 7413                    	je .L_tc_recycle_frame_done_8f91
 27880 00014387 488B32                  	mov rsi, qword [rdx]
 27881 0001438A 488933                  	mov qword [rbx], rsi
 27882 0001438D 48FFC9                  	dec rcx
 27883 00014390 4883EB08                	sub rbx, 8 * 1
 27884 00014394 4883EA08                	sub rdx, 8 * 1
 27885 00014398 EBE7                    	jmp .L_tc_recycle_frame_loop_8f91
 27886                                  .L_tc_recycle_frame_done_8f91:
 27887 0001439A 488D6308                	lea rsp, [rbx + 8 * 1]
 27888 0001439E 5D                      	pop rbp	; the proc will restore it!
 27889 0001439F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27890                                  
 27891                                  	.L_if_end_7744:
 27892 000143A2 C9                      	leave
 27893 000143A3 C21800                  	ret AND_KILL_FRAME(1)
 27894                                  .L_lambda_simple_end_6d9a:	; new closure is in rax
 27895 000143A6 803804                  	cmp byte [rax], T_closure
 27896 000143A9 0F85B1120000            	jne L_error_non_closure
 27897 000143AF FF7001                  	push SOB_CLOSURE_ENV(rax)
 27898                                  
 27899                                  	; recycling the current frame
 27900 000143B2 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27901 000143B5 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27902 000143B8 B905000000              	mov rcx, 1 + 4
 27903 000143BD 488B5D18                	mov rbx, COUNT
 27904 000143C1 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27905 000143C6 488D55F8                	lea rdx, [rbp - 8 * 1]
 27906                                  .L_tc_recycle_frame_loop_8f92:
 27907 000143CA 4883F900                	cmp rcx, 0
 27908 000143CE 7413                    	je .L_tc_recycle_frame_done_8f92
 27909 000143D0 488B32                  	mov rsi, qword [rdx]
 27910 000143D3 488933                  	mov qword [rbx], rsi
 27911 000143D6 48FFC9                  	dec rcx
 27912 000143D9 4883EB08                	sub rbx, 8 * 1
 27913 000143DD 4883EA08                	sub rdx, 8 * 1
 27914 000143E1 EBE7                    	jmp .L_tc_recycle_frame_loop_8f92
 27915                                  .L_tc_recycle_frame_done_8f92:
 27916 000143E3 488D6308                	lea rsp, [rbx + 8 * 1]
 27917 000143E7 5D                      	pop rbp	; the proc will restore it!
 27918 000143E8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27919 000143EB C9                      	leave
 27920 000143EC C21800                  	ret AND_KILL_FRAME(1)
 27921                                  .L_lambda_simple_end_6d99:	; new closure is in rax
 27922 000143EF C9                      	leave
 27923 000143F0 C21800                  	ret AND_KILL_FRAME(1)
 27924                                  .L_lambda_simple_end_6d96:	; new closure is in rax
 27925 000143F3 803804                  	cmp byte [rax], T_closure
 27926 000143F6 0F8564120000            	jne L_error_non_closure
 27927 000143FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 27928 000143FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 27929 00014402 48890425[03190000]      	mov qword [free_var_171], rax
 27930 0001440A 48B8-                   	mov rax, sob_void
 27930 0001440C [0000000000000000] 
 27931                                  
 27932 00014414 4889C7                  	mov rdi, rax
 27933 00014417 E8FF130000              	call print_sexpr_if_not_void
 27934                                  
 27935 0001441C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27936 00014421 E8E3120000              	call malloc
 27937 00014426 50                      	push rax
 27938 00014427 BF00000000              	mov rdi, 8 * 0	; new rib
 27939 0001442C E8D8120000              	call malloc
 27940 00014431 50                      	push rax
 27941 00014432 BF08000000              	mov rdi, 8 * 1	; extended env
 27942 00014437 E8CD120000              	call malloc
 27943 0001443C 488B7D10                	mov rdi, ENV
 27944 00014440 BE00000000              	mov rsi, 0
 27945 00014445 BA01000000              	mov rdx, 1
 27946                                  .L_lambda_simple_env_loop_6d9b:	; ext_env[i + 1] <-- env[i]
 27947 0001444A 4883FE00                	cmp rsi, 0
 27948 0001444E 7410                    	je .L_lambda_simple_env_end_6d9b
 27949 00014450 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27950 00014454 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27951 00014458 48FFC6                  	inc rsi
 27952 0001445B 48FFC2                  	inc rdx
 27953 0001445E EBEA                    	jmp .L_lambda_simple_env_loop_6d9b
 27954                                  .L_lambda_simple_env_end_6d9b:
 27955 00014460 5B                      	pop rbx
 27956 00014461 BE00000000              	mov rsi, 0
 27957                                  .L_lambda_simple_params_loop_6d9b:	; copy params
 27958 00014466 4883FE00                	cmp rsi, 0
 27959 0001446A 740E                    	je .L_lambda_simple_params_end_6d9b
 27960 0001446C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27961 00014471 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27962 00014475 48FFC6                  	inc rsi
 27963 00014478 EBEC                    	jmp .L_lambda_simple_params_loop_6d9b
 27964                                  .L_lambda_simple_params_end_6d9b:
 27965 0001447A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27966 0001447D 4889C3                  	mov rbx, rax
 27967 00014480 58                      	pop rax
 27968 00014481 C60004                  	mov byte [rax], T_closure
 27969 00014484 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27970 00014488 48C74009[95440100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d9b
 27971 00014490 E936030000              	jmp .L_lambda_simple_end_6d9b
 27972                                  .L_lambda_simple_code_6d9b:	; lambda-simple body
 27973 00014495 48837C241002            	cmp qword [rsp + 8 * 2], 2
 27974 0001449B 740B                    	je .L_lambda_simple_arity_check_ok_6d9b
 27975 0001449D FF742410                	push qword [rsp + 8 * 2]
 27976 000144A1 6A02                    	push 2
 27977 000144A3 E91A120000              	jmp L_error_incorrect_arity_simple
 27978                                  .L_lambda_simple_arity_check_ok_6d9b:
 27979 000144A8 C8000000                	enter 0, 0
 27980                                  	; preparing a tail-call
 27981 000144AC 48B8-                   	mov rax, L_constants + 1881
 27981 000144AE [5907000000000000] 
 27982 000144B6 50                      	push rax
 27983 000144B7 6A01                    	push 1	; arg count
 27984 000144B9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27985 000144BE E846120000              	call malloc
 27986 000144C3 50                      	push rax
 27987 000144C4 BF10000000              	mov rdi, 8 * 2	; new rib
 27988 000144C9 E83B120000              	call malloc
 27989 000144CE 50                      	push rax
 27990 000144CF BF10000000              	mov rdi, 8 * 2	; extended env
 27991 000144D4 E830120000              	call malloc
 27992 000144D9 488B7D10                	mov rdi, ENV
 27993 000144DD BE00000000              	mov rsi, 0
 27994 000144E2 BA01000000              	mov rdx, 1
 27995                                  .L_lambda_simple_env_loop_6d9c:	; ext_env[i + 1] <-- env[i]
 27996 000144E7 4883FE01                	cmp rsi, 1
 27997 000144EB 7410                    	je .L_lambda_simple_env_end_6d9c
 27998 000144ED 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27999 000144F1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28000 000144F5 48FFC6                  	inc rsi
 28001 000144F8 48FFC2                  	inc rdx
 28002 000144FB EBEA                    	jmp .L_lambda_simple_env_loop_6d9c
 28003                                  .L_lambda_simple_env_end_6d9c:
 28004 000144FD 5B                      	pop rbx
 28005 000144FE BE00000000              	mov rsi, 0
 28006                                  .L_lambda_simple_params_loop_6d9c:	; copy params
 28007 00014503 4883FE02                	cmp rsi, 2
 28008 00014507 740E                    	je .L_lambda_simple_params_end_6d9c
 28009 00014509 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28010 0001450E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28011 00014512 48FFC6                  	inc rsi
 28012 00014515 EBEC                    	jmp .L_lambda_simple_params_loop_6d9c
 28013                                  .L_lambda_simple_params_end_6d9c:
 28014 00014517 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28015 0001451A 4889C3                  	mov rbx, rax
 28016 0001451D 58                      	pop rax
 28017 0001451E C60004                  	mov byte [rax], T_closure
 28018 00014521 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28019 00014525 48C74009[32450100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d9c
 28020 0001452D E950020000              	jmp .L_lambda_simple_end_6d9c
 28021                                  .L_lambda_simple_code_6d9c:	; lambda-simple body
 28022 00014532 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28023 00014538 740B                    	je .L_lambda_simple_arity_check_ok_6d9c
 28024 0001453A FF742410                	push qword [rsp + 8 * 2]
 28025 0001453E 6A01                    	push 1
 28026 00014540 E97D110000              	jmp L_error_incorrect_arity_simple
 28027                                  .L_lambda_simple_arity_check_ok_6d9c:
 28028 00014545 C8000000                	enter 0, 0
 28029                                  
 28030 00014549 BF08000000              	mov rdi, 8
 28031 0001454E E8B6110000              	call malloc
 28032 00014553 488B5D20                	mov rbx, PARAM(0)	; param run
 28033 00014557 488918                  	mov [rax], rbx	; box run
 28034 0001455A 48894520                	mov PARAM(0), rax	;replace param run with box
 28035 0001455E 48B8-                   	mov rax, sob_void
 28035 00014560 [0000000000000000] 
 28036                                  
 28037 00014568 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28038 0001456D E897110000              	call malloc
 28039 00014572 50                      	push rax
 28040 00014573 BF08000000              	mov rdi, 8 * 1	; new rib
 28041 00014578 E88C110000              	call malloc
 28042 0001457D 50                      	push rax
 28043 0001457E BF18000000              	mov rdi, 8 * 3	; extended env
 28044 00014583 E881110000              	call malloc
 28045 00014588 488B7D10                	mov rdi, ENV
 28046 0001458C BE00000000              	mov rsi, 0
 28047 00014591 BA01000000              	mov rdx, 1
 28048                                  .L_lambda_simple_env_loop_6d9d:	; ext_env[i + 1] <-- env[i]
 28049 00014596 4883FE02                	cmp rsi, 2
 28050 0001459A 7410                    	je .L_lambda_simple_env_end_6d9d
 28051 0001459C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28052 000145A0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28053 000145A4 48FFC6                  	inc rsi
 28054 000145A7 48FFC2                  	inc rdx
 28055 000145AA EBEA                    	jmp .L_lambda_simple_env_loop_6d9d
 28056                                  .L_lambda_simple_env_end_6d9d:
 28057 000145AC 5B                      	pop rbx
 28058 000145AD BE00000000              	mov rsi, 0
 28059                                  .L_lambda_simple_params_loop_6d9d:	; copy params
 28060 000145B2 4883FE01                	cmp rsi, 1
 28061 000145B6 740E                    	je .L_lambda_simple_params_end_6d9d
 28062 000145B8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28063 000145BD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28064 000145C1 48FFC6                  	inc rsi
 28065 000145C4 EBEC                    	jmp .L_lambda_simple_params_loop_6d9d
 28066                                  .L_lambda_simple_params_end_6d9d:
 28067 000145C6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28068 000145C9 4889C3                  	mov rbx, rax
 28069 000145CC 58                      	pop rax
 28070 000145CD C60004                  	mov byte [rax], T_closure
 28071 000145D0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28072 000145D4 48C74009[E1450100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d9d
 28073 000145DC E933010000              	jmp .L_lambda_simple_end_6d9d
 28074                                  .L_lambda_simple_code_6d9d:	; lambda-simple body
 28075 000145E1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28076 000145E7 740B                    	je .L_lambda_simple_arity_check_ok_6d9d
 28077 000145E9 FF742410                	push qword [rsp + 8 * 2]
 28078 000145ED 6A01                    	push 1
 28079 000145EF E9CE100000              	jmp L_error_incorrect_arity_simple
 28080                                  .L_lambda_simple_arity_check_ok_6d9d:
 28081 000145F4 C8000000                	enter 0, 0
 28082 000145F8 488B4510                	mov rax, ENV
 28083 000145FC 488B4008                	mov rax, qword [rax + 8 * 1]
 28084 00014600 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 28085 00014603 50                      	push rax
 28086 00014604 488B4520                	mov rax, PARAM(0)	; param i
 28087 00014608 50                      	push rax
 28088 00014609 6A02                    	push 2	; arg count
 28089 0001460B 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 28090 00014613 803805                  	cmp byte [rax], T_undefined
 28091 00014616 0F84C00F0000            	je L_error_fvar_undefined
 28092 0001461C 803804                  	cmp byte [rax], T_closure
 28093 0001461F 0F853B100000            	jne L_error_non_closure
 28094 00014625 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28095 00014628 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28096                                  
 28097 0001462B 483D[02000000]          	cmp rax, sob_boolean_false
 28098 00014631 0F84CF000000            	je .L_if_else_7745
 28099                                  	; preparing a tail-call
 28100 00014637 48B8-                   	mov rax, L_constants + 2158
 28100 00014639 [6E08000000000000] 
 28101 00014641 50                      	push rax
 28102 00014642 488B4520                	mov rax, PARAM(0)	; param i
 28103 00014646 50                      	push rax
 28104 00014647 6A02                    	push 2	; arg count
 28105 00014649 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 28106 00014651 803805                  	cmp byte [rax], T_undefined
 28107 00014654 0F84820F0000            	je L_error_fvar_undefined
 28108 0001465A 803804                  	cmp byte [rax], T_closure
 28109 0001465D 0F85FD0F0000            	jne L_error_non_closure
 28110 00014663 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28111 00014666 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28112 00014669 50                      	push rax
 28113 0001466A 6A01                    	push 1	; arg count
 28114 0001466C 488B4510                	mov rax, ENV
 28115 00014670 488B00                  	mov rax, qword [rax + 8 * 0]
 28116 00014673 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28117 00014676 488B00                  	mov rax, qword [rax]
 28118 00014679 803804                  	cmp byte [rax], T_closure
 28119 0001467C 0F85DE0F0000            	jne L_error_non_closure
 28120 00014682 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28121 00014685 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28122 00014688 50                      	push rax
 28123 00014689 488B4520                	mov rax, PARAM(0)	; param i
 28124 0001468D 50                      	push rax
 28125 0001468E 6A01                    	push 1	; arg count
 28126 00014690 488B4510                	mov rax, ENV
 28127 00014694 488B4008                	mov rax, qword [rax + 8 * 1]
 28128 00014698 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 28129 0001469C 803804                  	cmp byte [rax], T_closure
 28130 0001469F 0F85BB0F0000            	jne L_error_non_closure
 28131 000146A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28132 000146A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28133 000146AB 50                      	push rax
 28134 000146AC 6A02                    	push 2	; arg count
 28135 000146AE 488B0425[850E0000]      	mov rax, qword [free_var_13]	; free var cons
 28136 000146B6 803805                  	cmp byte [rax], T_undefined
 28137 000146B9 0F841D0F0000            	je L_error_fvar_undefined
 28138 000146BF 803804                  	cmp byte [rax], T_closure
 28139 000146C2 0F85980F0000            	jne L_error_non_closure
 28140 000146C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28141                                  
 28142                                  	; recycling the current frame
 28143 000146CB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28144 000146CE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28145 000146D1 B906000000              	mov rcx, 2 + 4
 28146 000146D6 488B5D18                	mov rbx, COUNT
 28147 000146DA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28148 000146DF 488D55F8                	lea rdx, [rbp - 8 * 1]
 28149                                  .L_tc_recycle_frame_loop_8f93:
 28150 000146E3 4883F900                	cmp rcx, 0
 28151 000146E7 7413                    	je .L_tc_recycle_frame_done_8f93
 28152 000146E9 488B32                  	mov rsi, qword [rdx]
 28153 000146EC 488933                  	mov qword [rbx], rsi
 28154 000146EF 48FFC9                  	dec rcx
 28155 000146F2 4883EB08                	sub rbx, 8 * 1
 28156 000146F6 4883EA08                	sub rdx, 8 * 1
 28157 000146FA EBE7                    	jmp .L_tc_recycle_frame_loop_8f93
 28158                                  .L_tc_recycle_frame_done_8f93:
 28159 000146FC 488D6308                	lea rsp, [rbx + 8 * 1]
 28160 00014700 5D                      	pop rbp	; the proc will restore it!
 28161 00014701 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28162                                  
 28163 00014704 EB0A                    	jmp .L_if_end_7745
 28164                                  
 28165                                  	.L_if_else_7745:
 28166 00014706 48B8-                   	mov rax, L_constants + 1
 28166 00014708 [0100000000000000] 
 28167                                  
 28168                                  	.L_if_end_7745:
 28169 00014710 C9                      	leave
 28170 00014711 C21800                  	ret AND_KILL_FRAME(1)
 28171                                  .L_lambda_simple_end_6d9d:	; new closure is in rax
 28172                                  
 28173 00014714 50                      	push rax
 28174 00014715 488B4520                	mov rax, PARAM(0)	; param run
 28175                                  
 28176 00014719 8F00                    	pop qword[rax]
 28177 0001471B 48B8-                   	mov rax, sob_void
 28177 0001471D [0000000000000000] 
 28178                                  
 28179                                  	; preparing a tail-call
 28180 00014725 48B8-                   	mov rax, L_constants + 2023
 28180 00014727 [E707000000000000] 
 28181 0001472F 50                      	push rax
 28182 00014730 6A01                    	push 1	; arg count
 28183 00014732 488B4520                	mov rax, PARAM(0)	; param run
 28184 00014736 488B00                  	mov rax, qword [rax]
 28185 00014739 803804                  	cmp byte [rax], T_closure
 28186 0001473C 0F851E0F0000            	jne L_error_non_closure
 28187 00014742 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28188                                  
 28189                                  	; recycling the current frame
 28190 00014745 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28191 00014748 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28192 0001474B B905000000              	mov rcx, 1 + 4
 28193 00014750 488B5D18                	mov rbx, COUNT
 28194 00014754 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28195 00014759 488D55F8                	lea rdx, [rbp - 8 * 1]
 28196                                  .L_tc_recycle_frame_loop_8f94:
 28197 0001475D 4883F900                	cmp rcx, 0
 28198 00014761 7413                    	je .L_tc_recycle_frame_done_8f94
 28199 00014763 488B32                  	mov rsi, qword [rdx]
 28200 00014766 488933                  	mov qword [rbx], rsi
 28201 00014769 48FFC9                  	dec rcx
 28202 0001476C 4883EB08                	sub rbx, 8 * 1
 28203 00014770 4883EA08                	sub rdx, 8 * 1
 28204 00014774 EBE7                    	jmp .L_tc_recycle_frame_loop_8f94
 28205                                  .L_tc_recycle_frame_done_8f94:
 28206 00014776 488D6308                	lea rsp, [rbx + 8 * 1]
 28207 0001477A 5D                      	pop rbp	; the proc will restore it!
 28208 0001477B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28209 0001477E C9                      	leave
 28210 0001477F C21800                  	ret AND_KILL_FRAME(1)
 28211                                  .L_lambda_simple_end_6d9c:	; new closure is in rax
 28212 00014782 803804                  	cmp byte [rax], T_closure
 28213 00014785 0F85D50E0000            	jne L_error_non_closure
 28214 0001478B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28215                                  
 28216                                  	; recycling the current frame
 28217 0001478E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28218 00014791 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28219 00014794 B905000000              	mov rcx, 1 + 4
 28220 00014799 488B5D18                	mov rbx, COUNT
 28221 0001479D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28222 000147A2 488D55F8                	lea rdx, [rbp - 8 * 1]
 28223                                  .L_tc_recycle_frame_loop_8f95:
 28224 000147A6 4883F900                	cmp rcx, 0
 28225 000147AA 7413                    	je .L_tc_recycle_frame_done_8f95
 28226 000147AC 488B32                  	mov rsi, qword [rdx]
 28227 000147AF 488933                  	mov qword [rbx], rsi
 28228 000147B2 48FFC9                  	dec rcx
 28229 000147B5 4883EB08                	sub rbx, 8 * 1
 28230 000147B9 4883EA08                	sub rdx, 8 * 1
 28231 000147BD EBE7                    	jmp .L_tc_recycle_frame_loop_8f95
 28232                                  .L_tc_recycle_frame_done_8f95:
 28233 000147BF 488D6308                	lea rsp, [rbx + 8 * 1]
 28234 000147C3 5D                      	pop rbp	; the proc will restore it!
 28235 000147C4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28236 000147C7 C9                      	leave
 28237 000147C8 C22000                  	ret AND_KILL_FRAME(2)
 28238                                  .L_lambda_simple_end_6d9b:	; new closure is in rax
 28239 000147CB 48890425[14190000]      	mov qword [free_var_172], rax
 28240 000147D3 48B8-                   	mov rax, sob_void
 28240 000147D5 [0000000000000000] 
 28241                                  
 28242 000147DD 4889C7                  	mov rdi, rax
 28243 000147E0 E836100000              	call print_sexpr_if_not_void
 28244                                  
 28245 000147E5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28246 000147EA E81A0F0000              	call malloc
 28247 000147EF 50                      	push rax
 28248 000147F0 BF00000000              	mov rdi, 8 * 0	; new rib
 28249 000147F5 E80F0F0000              	call malloc
 28250 000147FA 50                      	push rax
 28251 000147FB BF08000000              	mov rdi, 8 * 1	; extended env
 28252 00014800 E8040F0000              	call malloc
 28253 00014805 488B7D10                	mov rdi, ENV
 28254 00014809 BE00000000              	mov rsi, 0
 28255 0001480E BA01000000              	mov rdx, 1
 28256                                  .L_lambda_simple_env_loop_6d9e:	; ext_env[i + 1] <-- env[i]
 28257 00014813 4883FE00                	cmp rsi, 0
 28258 00014817 7410                    	je .L_lambda_simple_env_end_6d9e
 28259 00014819 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28260 0001481D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28261 00014821 48FFC6                  	inc rsi
 28262 00014824 48FFC2                  	inc rdx
 28263 00014827 EBEA                    	jmp .L_lambda_simple_env_loop_6d9e
 28264                                  .L_lambda_simple_env_end_6d9e:
 28265 00014829 5B                      	pop rbx
 28266 0001482A BE00000000              	mov rsi, 0
 28267                                  .L_lambda_simple_params_loop_6d9e:	; copy params
 28268 0001482F 4883FE00                	cmp rsi, 0
 28269 00014833 740E                    	je .L_lambda_simple_params_end_6d9e
 28270 00014835 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28271 0001483A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28272 0001483E 48FFC6                  	inc rsi
 28273 00014841 EBEC                    	jmp .L_lambda_simple_params_loop_6d9e
 28274                                  .L_lambda_simple_params_end_6d9e:
 28275 00014843 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28276 00014846 4889C3                  	mov rbx, rax
 28277 00014849 58                      	pop rax
 28278 0001484A C60004                  	mov byte [rax], T_closure
 28279 0001484D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28280 00014851 48C74009[5E480100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d9e
 28281 00014859 E94A040000              	jmp .L_lambda_simple_end_6d9e
 28282                                  .L_lambda_simple_code_6d9e:	; lambda-simple body
 28283 0001485E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 28284 00014864 740B                    	je .L_lambda_simple_arity_check_ok_6d9e
 28285 00014866 FF742410                	push qword [rsp + 8 * 2]
 28286 0001486A 6A02                    	push 2
 28287 0001486C E9510E0000              	jmp L_error_incorrect_arity_simple
 28288                                  .L_lambda_simple_arity_check_ok_6d9e:
 28289 00014871 C8000000                	enter 0, 0
 28290                                  	; preparing a tail-call
 28291 00014875 488B4520                	mov rax, PARAM(0)	; param n
 28292 00014879 50                      	push rax
 28293 0001487A 6A01                    	push 1	; arg count
 28294 0001487C 488B0425[82110000]      	mov rax, qword [free_var_58]	; free var make-string
 28295 00014884 803805                  	cmp byte [rax], T_undefined
 28296 00014887 0F844F0D0000            	je L_error_fvar_undefined
 28297 0001488D 803804                  	cmp byte [rax], T_closure
 28298 00014890 0F85CA0D0000            	jne L_error_non_closure
 28299 00014896 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28300 00014899 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28301 0001489C 50                      	push rax
 28302 0001489D 6A01                    	push 1	; arg count
 28303 0001489F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28304 000148A4 E8600E0000              	call malloc
 28305 000148A9 50                      	push rax
 28306 000148AA BF10000000              	mov rdi, 8 * 2	; new rib
 28307 000148AF E8550E0000              	call malloc
 28308 000148B4 50                      	push rax
 28309 000148B5 BF10000000              	mov rdi, 8 * 2	; extended env
 28310 000148BA E84A0E0000              	call malloc
 28311 000148BF 488B7D10                	mov rdi, ENV
 28312 000148C3 BE00000000              	mov rsi, 0
 28313 000148C8 BA01000000              	mov rdx, 1
 28314                                  .L_lambda_simple_env_loop_6d9f:	; ext_env[i + 1] <-- env[i]
 28315 000148CD 4883FE01                	cmp rsi, 1
 28316 000148D1 7410                    	je .L_lambda_simple_env_end_6d9f
 28317 000148D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28318 000148D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28319 000148DB 48FFC6                  	inc rsi
 28320 000148DE 48FFC2                  	inc rdx
 28321 000148E1 EBEA                    	jmp .L_lambda_simple_env_loop_6d9f
 28322                                  .L_lambda_simple_env_end_6d9f:
 28323 000148E3 5B                      	pop rbx
 28324 000148E4 BE00000000              	mov rsi, 0
 28325                                  .L_lambda_simple_params_loop_6d9f:	; copy params
 28326 000148E9 4883FE02                	cmp rsi, 2
 28327 000148ED 740E                    	je .L_lambda_simple_params_end_6d9f
 28328 000148EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28329 000148F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28330 000148F8 48FFC6                  	inc rsi
 28331 000148FB EBEC                    	jmp .L_lambda_simple_params_loop_6d9f
 28332                                  .L_lambda_simple_params_end_6d9f:
 28333 000148FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28334 00014900 4889C3                  	mov rbx, rax
 28335 00014903 58                      	pop rax
 28336 00014904 C60004                  	mov byte [rax], T_closure
 28337 00014907 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28338 0001490B 48C74009[18490100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6d9f
 28339 00014913 E947030000              	jmp .L_lambda_simple_end_6d9f
 28340                                  .L_lambda_simple_code_6d9f:	; lambda-simple body
 28341 00014918 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28342 0001491E 740B                    	je .L_lambda_simple_arity_check_ok_6d9f
 28343 00014920 FF742410                	push qword [rsp + 8 * 2]
 28344 00014924 6A01                    	push 1
 28345 00014926 E9970D0000              	jmp L_error_incorrect_arity_simple
 28346                                  .L_lambda_simple_arity_check_ok_6d9f:
 28347 0001492B C8000000                	enter 0, 0
 28348                                  	; preparing a tail-call
 28349 0001492F 48B8-                   	mov rax, L_constants + 1881
 28349 00014931 [5907000000000000] 
 28350 00014939 50                      	push rax
 28351 0001493A 6A01                    	push 1	; arg count
 28352 0001493C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28353 00014941 E8C30D0000              	call malloc
 28354 00014946 50                      	push rax
 28355 00014947 BF08000000              	mov rdi, 8 * 1	; new rib
 28356 0001494C E8B80D0000              	call malloc
 28357 00014951 50                      	push rax
 28358 00014952 BF18000000              	mov rdi, 8 * 3	; extended env
 28359 00014957 E8AD0D0000              	call malloc
 28360 0001495C 488B7D10                	mov rdi, ENV
 28361 00014960 BE00000000              	mov rsi, 0
 28362 00014965 BA01000000              	mov rdx, 1
 28363                                  .L_lambda_simple_env_loop_6da0:	; ext_env[i + 1] <-- env[i]
 28364 0001496A 4883FE02                	cmp rsi, 2
 28365 0001496E 7410                    	je .L_lambda_simple_env_end_6da0
 28366 00014970 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28367 00014974 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28368 00014978 48FFC6                  	inc rsi
 28369 0001497B 48FFC2                  	inc rdx
 28370 0001497E EBEA                    	jmp .L_lambda_simple_env_loop_6da0
 28371                                  .L_lambda_simple_env_end_6da0:
 28372 00014980 5B                      	pop rbx
 28373 00014981 BE00000000              	mov rsi, 0
 28374                                  .L_lambda_simple_params_loop_6da0:	; copy params
 28375 00014986 4883FE01                	cmp rsi, 1
 28376 0001498A 740E                    	je .L_lambda_simple_params_end_6da0
 28377 0001498C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28378 00014991 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28379 00014995 48FFC6                  	inc rsi
 28380 00014998 EBEC                    	jmp .L_lambda_simple_params_loop_6da0
 28381                                  .L_lambda_simple_params_end_6da0:
 28382 0001499A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28383 0001499D 4889C3                  	mov rbx, rax
 28384 000149A0 58                      	pop rax
 28385 000149A1 C60004                  	mov byte [rax], T_closure
 28386 000149A4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28387 000149A8 48C74009[B5490100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6da0
 28388 000149B0 E961020000              	jmp .L_lambda_simple_end_6da0
 28389                                  .L_lambda_simple_code_6da0:	; lambda-simple body
 28390 000149B5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28391 000149BB 740B                    	je .L_lambda_simple_arity_check_ok_6da0
 28392 000149BD FF742410                	push qword [rsp + 8 * 2]
 28393 000149C1 6A01                    	push 1
 28394 000149C3 E9FA0C0000              	jmp L_error_incorrect_arity_simple
 28395                                  .L_lambda_simple_arity_check_ok_6da0:
 28396 000149C8 C8000000                	enter 0, 0
 28397                                  
 28398 000149CC BF08000000              	mov rdi, 8
 28399 000149D1 E8330D0000              	call malloc
 28400 000149D6 488B5D20                	mov rbx, PARAM(0)	; param run
 28401 000149DA 488918                  	mov [rax], rbx	; box run
 28402 000149DD 48894520                	mov PARAM(0), rax	;replace param run with box
 28403 000149E1 48B8-                   	mov rax, sob_void
 28403 000149E3 [0000000000000000] 
 28404                                  
 28405 000149EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28406 000149F0 E8140D0000              	call malloc
 28407 000149F5 50                      	push rax
 28408 000149F6 BF08000000              	mov rdi, 8 * 1	; new rib
 28409 000149FB E8090D0000              	call malloc
 28410 00014A00 50                      	push rax
 28411 00014A01 BF20000000              	mov rdi, 8 * 4	; extended env
 28412 00014A06 E8FE0C0000              	call malloc
 28413 00014A0B 488B7D10                	mov rdi, ENV
 28414 00014A0F BE00000000              	mov rsi, 0
 28415 00014A14 BA01000000              	mov rdx, 1
 28416                                  .L_lambda_simple_env_loop_6da1:	; ext_env[i + 1] <-- env[i]
 28417 00014A19 4883FE03                	cmp rsi, 3
 28418 00014A1D 7410                    	je .L_lambda_simple_env_end_6da1
 28419 00014A1F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28420 00014A23 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28421 00014A27 48FFC6                  	inc rsi
 28422 00014A2A 48FFC2                  	inc rdx
 28423 00014A2D EBEA                    	jmp .L_lambda_simple_env_loop_6da1
 28424                                  .L_lambda_simple_env_end_6da1:
 28425 00014A2F 5B                      	pop rbx
 28426 00014A30 BE00000000              	mov rsi, 0
 28427                                  .L_lambda_simple_params_loop_6da1:	; copy params
 28428 00014A35 4883FE01                	cmp rsi, 1
 28429 00014A39 740E                    	je .L_lambda_simple_params_end_6da1
 28430 00014A3B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28431 00014A40 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28432 00014A44 48FFC6                  	inc rsi
 28433 00014A47 EBEC                    	jmp .L_lambda_simple_params_loop_6da1
 28434                                  .L_lambda_simple_params_end_6da1:
 28435 00014A49 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28436 00014A4C 4889C3                  	mov rbx, rax
 28437 00014A4F 58                      	pop rax
 28438 00014A50 C60004                  	mov byte [rax], T_closure
 28439 00014A53 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28440 00014A57 48C74009[644A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6da1
 28441 00014A5F E944010000              	jmp .L_lambda_simple_end_6da1
 28442                                  .L_lambda_simple_code_6da1:	; lambda-simple body
 28443 00014A64 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28444 00014A6A 740B                    	je .L_lambda_simple_arity_check_ok_6da1
 28445 00014A6C FF742410                	push qword [rsp + 8 * 2]
 28446 00014A70 6A01                    	push 1
 28447 00014A72 E94B0C0000              	jmp L_error_incorrect_arity_simple
 28448                                  .L_lambda_simple_arity_check_ok_6da1:
 28449 00014A77 C8000000                	enter 0, 0
 28450 00014A7B 488B4510                	mov rax, ENV
 28451 00014A7F 488B4010                	mov rax, qword [rax + 8 * 2]
 28452 00014A83 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 28453 00014A86 50                      	push rax
 28454 00014A87 488B4520                	mov rax, PARAM(0)	; param i
 28455 00014A8B 50                      	push rax
 28456 00014A8C 6A02                    	push 2	; arg count
 28457 00014A8E 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 28458 00014A96 803805                  	cmp byte [rax], T_undefined
 28459 00014A99 0F843D0B0000            	je L_error_fvar_undefined
 28460 00014A9F 803804                  	cmp byte [rax], T_closure
 28461 00014AA2 0F85B80B0000            	jne L_error_non_closure
 28462 00014AA8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28463 00014AAB FF5009                  	call SOB_CLOSURE_CODE(rax)
 28464                                  
 28465 00014AAE 483D[02000000]          	cmp rax, sob_boolean_false
 28466 00014AB4 0F84DF000000            	je .L_if_else_7746
 28467 00014ABA 488B4520                	mov rax, PARAM(0)	; param i
 28468 00014ABE 50                      	push rax
 28469 00014ABF 6A01                    	push 1	; arg count
 28470 00014AC1 488B4510                	mov rax, ENV
 28471 00014AC5 488B4010                	mov rax, qword [rax + 8 * 2]
 28472 00014AC9 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 28473 00014ACD 803804                  	cmp byte [rax], T_closure
 28474 00014AD0 0F858A0B0000            	jne L_error_non_closure
 28475 00014AD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28476 00014AD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28477 00014ADC 50                      	push rax
 28478 00014ADD 488B4520                	mov rax, PARAM(0)	; param i
 28479 00014AE1 50                      	push rax
 28480 00014AE2 488B4510                	mov rax, ENV
 28481 00014AE6 488B4008                	mov rax, qword [rax + 8 * 1]
 28482 00014AEA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28483 00014AED 50                      	push rax
 28484 00014AEE 6A03                    	push 3	; arg count
 28485 00014AF0 488B0425[60110000]      	mov rax, qword [free_var_56]	; free var string-set!
 28486 00014AF8 803805                  	cmp byte [rax], T_undefined
 28487 00014AFB 0F84DB0A0000            	je L_error_fvar_undefined
 28488 00014B01 803804                  	cmp byte [rax], T_closure
 28489 00014B04 0F85560B0000            	jne L_error_non_closure
 28490 00014B0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 28491 00014B0D FF5009                  	call SOB_CLOSURE_CODE(rax)
 28492                                  
 28493                                  	; preparing a tail-call
 28494 00014B10 48B8-                   	mov rax, L_constants + 2158
 28494 00014B12 [6E08000000000000] 
 28495 00014B1A 50                      	push rax
 28496 00014B1B 488B4520                	mov rax, PARAM(0)	; param i
 28497 00014B1F 50                      	push rax
 28498 00014B20 6A02                    	push 2	; arg count
 28499 00014B22 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 28500 00014B2A 803805                  	cmp byte [rax], T_undefined
 28501 00014B2D 0F84A90A0000            	je L_error_fvar_undefined
 28502 00014B33 803804                  	cmp byte [rax], T_closure
 28503 00014B36 0F85240B0000            	jne L_error_non_closure
 28504 00014B3C FF7001                  	push SOB_CLOSURE_ENV(rax)
 28505 00014B3F FF5009                  	call SOB_CLOSURE_CODE(rax)
 28506 00014B42 50                      	push rax
 28507 00014B43 6A01                    	push 1	; arg count
 28508 00014B45 488B4510                	mov rax, ENV
 28509 00014B49 488B00                  	mov rax, qword [rax + 8 * 0]
 28510 00014B4C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28511 00014B4F 488B00                  	mov rax, qword [rax]
 28512 00014B52 803804                  	cmp byte [rax], T_closure
 28513 00014B55 0F85050B0000            	jne L_error_non_closure
 28514 00014B5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28515                                  
 28516                                  	; recycling the current frame
 28517 00014B5E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28518 00014B61 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28519 00014B64 B905000000              	mov rcx, 1 + 4
 28520 00014B69 488B5D18                	mov rbx, COUNT
 28521 00014B6D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28522 00014B72 488D55F8                	lea rdx, [rbp - 8 * 1]
 28523                                  .L_tc_recycle_frame_loop_8f96:
 28524 00014B76 4883F900                	cmp rcx, 0
 28525 00014B7A 7413                    	je .L_tc_recycle_frame_done_8f96
 28526 00014B7C 488B32                  	mov rsi, qword [rdx]
 28527 00014B7F 488933                  	mov qword [rbx], rsi
 28528 00014B82 48FFC9                  	dec rcx
 28529 00014B85 4883EB08                	sub rbx, 8 * 1
 28530 00014B89 4883EA08                	sub rdx, 8 * 1
 28531 00014B8D EBE7                    	jmp .L_tc_recycle_frame_loop_8f96
 28532                                  .L_tc_recycle_frame_done_8f96:
 28533 00014B8F 488D6308                	lea rsp, [rbx + 8 * 1]
 28534 00014B93 5D                      	pop rbp	; the proc will restore it!
 28535 00014B94 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28536                                  
 28537 00014B97 EB0B                    	jmp .L_if_end_7746
 28538                                  
 28539                                  	.L_if_else_7746:
 28540 00014B99 488B4510                	mov rax, ENV
 28541 00014B9D 488B4008                	mov rax, qword [rax + 8 * 1]
 28542 00014BA1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28543                                  
 28544                                  	.L_if_end_7746:
 28545 00014BA4 C9                      	leave
 28546 00014BA5 C21800                  	ret AND_KILL_FRAME(1)
 28547                                  .L_lambda_simple_end_6da1:	; new closure is in rax
 28548                                  
 28549 00014BA8 50                      	push rax
 28550 00014BA9 488B4520                	mov rax, PARAM(0)	; param run
 28551                                  
 28552 00014BAD 8F00                    	pop qword[rax]
 28553 00014BAF 48B8-                   	mov rax, sob_void
 28553 00014BB1 [0000000000000000] 
 28554                                  
 28555                                  	; preparing a tail-call
 28556 00014BB9 48B8-                   	mov rax, L_constants + 2023
 28556 00014BBB [E707000000000000] 
 28557 00014BC3 50                      	push rax
 28558 00014BC4 6A01                    	push 1	; arg count
 28559 00014BC6 488B4520                	mov rax, PARAM(0)	; param run
 28560 00014BCA 488B00                  	mov rax, qword [rax]
 28561 00014BCD 803804                  	cmp byte [rax], T_closure
 28562 00014BD0 0F858A0A0000            	jne L_error_non_closure
 28563 00014BD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28564                                  
 28565                                  	; recycling the current frame
 28566 00014BD9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28567 00014BDC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28568 00014BDF B905000000              	mov rcx, 1 + 4
 28569 00014BE4 488B5D18                	mov rbx, COUNT
 28570 00014BE8 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28571 00014BED 488D55F8                	lea rdx, [rbp - 8 * 1]
 28572                                  .L_tc_recycle_frame_loop_8f97:
 28573 00014BF1 4883F900                	cmp rcx, 0
 28574 00014BF5 7413                    	je .L_tc_recycle_frame_done_8f97
 28575 00014BF7 488B32                  	mov rsi, qword [rdx]
 28576 00014BFA 488933                  	mov qword [rbx], rsi
 28577 00014BFD 48FFC9                  	dec rcx
 28578 00014C00 4883EB08                	sub rbx, 8 * 1
 28579 00014C04 4883EA08                	sub rdx, 8 * 1
 28580 00014C08 EBE7                    	jmp .L_tc_recycle_frame_loop_8f97
 28581                                  .L_tc_recycle_frame_done_8f97:
 28582 00014C0A 488D6308                	lea rsp, [rbx + 8 * 1]
 28583 00014C0E 5D                      	pop rbp	; the proc will restore it!
 28584 00014C0F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28585 00014C12 C9                      	leave
 28586 00014C13 C21800                  	ret AND_KILL_FRAME(1)
 28587                                  .L_lambda_simple_end_6da0:	; new closure is in rax
 28588 00014C16 803804                  	cmp byte [rax], T_closure
 28589 00014C19 0F85410A0000            	jne L_error_non_closure
 28590 00014C1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 28591                                  
 28592                                  	; recycling the current frame
 28593 00014C22 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28594 00014C25 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28595 00014C28 B905000000              	mov rcx, 1 + 4
 28596 00014C2D 488B5D18                	mov rbx, COUNT
 28597 00014C31 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28598 00014C36 488D55F8                	lea rdx, [rbp - 8 * 1]
 28599                                  .L_tc_recycle_frame_loop_8f98:
 28600 00014C3A 4883F900                	cmp rcx, 0
 28601 00014C3E 7413                    	je .L_tc_recycle_frame_done_8f98
 28602 00014C40 488B32                  	mov rsi, qword [rdx]
 28603 00014C43 488933                  	mov qword [rbx], rsi
 28604 00014C46 48FFC9                  	dec rcx
 28605 00014C49 4883EB08                	sub rbx, 8 * 1
 28606 00014C4D 4883EA08                	sub rdx, 8 * 1
 28607 00014C51 EBE7                    	jmp .L_tc_recycle_frame_loop_8f98
 28608                                  .L_tc_recycle_frame_done_8f98:
 28609 00014C53 488D6308                	lea rsp, [rbx + 8 * 1]
 28610 00014C57 5D                      	pop rbp	; the proc will restore it!
 28611 00014C58 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28612 00014C5B C9                      	leave
 28613 00014C5C C21800                  	ret AND_KILL_FRAME(1)
 28614                                  .L_lambda_simple_end_6d9f:	; new closure is in rax
 28615 00014C5F 803804                  	cmp byte [rax], T_closure
 28616 00014C62 0F85F8090000            	jne L_error_non_closure
 28617 00014C68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28618                                  
 28619                                  	; recycling the current frame
 28620 00014C6B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28621 00014C6E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28622 00014C71 B905000000              	mov rcx, 1 + 4
 28623 00014C76 488B5D18                	mov rbx, COUNT
 28624 00014C7A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28625 00014C7F 488D55F8                	lea rdx, [rbp - 8 * 1]
 28626                                  .L_tc_recycle_frame_loop_8f99:
 28627 00014C83 4883F900                	cmp rcx, 0
 28628 00014C87 7413                    	je .L_tc_recycle_frame_done_8f99
 28629 00014C89 488B32                  	mov rsi, qword [rdx]
 28630 00014C8C 488933                  	mov qword [rbx], rsi
 28631 00014C8F 48FFC9                  	dec rcx
 28632 00014C92 4883EB08                	sub rbx, 8 * 1
 28633 00014C96 4883EA08                	sub rdx, 8 * 1
 28634 00014C9A EBE7                    	jmp .L_tc_recycle_frame_loop_8f99
 28635                                  .L_tc_recycle_frame_done_8f99:
 28636 00014C9C 488D6308                	lea rsp, [rbx + 8 * 1]
 28637 00014CA0 5D                      	pop rbp	; the proc will restore it!
 28638 00014CA1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28639 00014CA4 C9                      	leave
 28640 00014CA5 C22000                  	ret AND_KILL_FRAME(2)
 28641                                  .L_lambda_simple_end_6d9e:	; new closure is in rax
 28642 00014CA8 48890425[25190000]      	mov qword [free_var_173], rax
 28643 00014CB0 48B8-                   	mov rax, sob_void
 28643 00014CB2 [0000000000000000] 
 28644                                  
 28645 00014CBA 4889C7                  	mov rdi, rax
 28646 00014CBD E8590B0000              	call print_sexpr_if_not_void
 28647                                  
 28648 00014CC2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28649 00014CC7 E83D0A0000              	call malloc
 28650 00014CCC 50                      	push rax
 28651 00014CCD BF00000000              	mov rdi, 8 * 0	; new rib
 28652 00014CD2 E8320A0000              	call malloc
 28653 00014CD7 50                      	push rax
 28654 00014CD8 BF08000000              	mov rdi, 8 * 1	; extended env
 28655 00014CDD E8270A0000              	call malloc
 28656 00014CE2 488B7D10                	mov rdi, ENV
 28657 00014CE6 BE00000000              	mov rsi, 0
 28658 00014CEB BA01000000              	mov rdx, 1
 28659                                  .L_lambda_simple_env_loop_6da2:	; ext_env[i + 1] <-- env[i]
 28660 00014CF0 4883FE00                	cmp rsi, 0
 28661 00014CF4 7410                    	je .L_lambda_simple_env_end_6da2
 28662 00014CF6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28663 00014CFA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28664 00014CFE 48FFC6                  	inc rsi
 28665 00014D01 48FFC2                  	inc rdx
 28666 00014D04 EBEA                    	jmp .L_lambda_simple_env_loop_6da2
 28667                                  .L_lambda_simple_env_end_6da2:
 28668 00014D06 5B                      	pop rbx
 28669 00014D07 BE00000000              	mov rsi, 0
 28670                                  .L_lambda_simple_params_loop_6da2:	; copy params
 28671 00014D0C 4883FE00                	cmp rsi, 0
 28672 00014D10 740E                    	je .L_lambda_simple_params_end_6da2
 28673 00014D12 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28674 00014D17 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28675 00014D1B 48FFC6                  	inc rsi
 28676 00014D1E EBEC                    	jmp .L_lambda_simple_params_loop_6da2
 28677                                  .L_lambda_simple_params_end_6da2:
 28678 00014D20 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28679 00014D23 4889C3                  	mov rbx, rax
 28680 00014D26 58                      	pop rax
 28681 00014D27 C60004                  	mov byte [rax], T_closure
 28682 00014D2A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28683 00014D2E 48C74009[3B4D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6da2
 28684 00014D36 E94A040000              	jmp .L_lambda_simple_end_6da2
 28685                                  .L_lambda_simple_code_6da2:	; lambda-simple body
 28686 00014D3B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 28687 00014D41 740B                    	je .L_lambda_simple_arity_check_ok_6da2
 28688 00014D43 FF742410                	push qword [rsp + 8 * 2]
 28689 00014D47 6A02                    	push 2
 28690 00014D49 E974090000              	jmp L_error_incorrect_arity_simple
 28691                                  .L_lambda_simple_arity_check_ok_6da2:
 28692 00014D4E C8000000                	enter 0, 0
 28693                                  	; preparing a tail-call
 28694 00014D52 488B4520                	mov rax, PARAM(0)	; param n
 28695 00014D56 50                      	push rax
 28696 00014D57 6A01                    	push 1	; arg count
 28697 00014D59 488B0425[71110000]      	mov rax, qword [free_var_57]	; free var make-vector
 28698 00014D61 803805                  	cmp byte [rax], T_undefined
 28699 00014D64 0F8472080000            	je L_error_fvar_undefined
 28700 00014D6A 803804                  	cmp byte [rax], T_closure
 28701 00014D6D 0F85ED080000            	jne L_error_non_closure
 28702 00014D73 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28703 00014D76 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28704 00014D79 50                      	push rax
 28705 00014D7A 6A01                    	push 1	; arg count
 28706 00014D7C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28707 00014D81 E883090000              	call malloc
 28708 00014D86 50                      	push rax
 28709 00014D87 BF10000000              	mov rdi, 8 * 2	; new rib
 28710 00014D8C E878090000              	call malloc
 28711 00014D91 50                      	push rax
 28712 00014D92 BF10000000              	mov rdi, 8 * 2	; extended env
 28713 00014D97 E86D090000              	call malloc
 28714 00014D9C 488B7D10                	mov rdi, ENV
 28715 00014DA0 BE00000000              	mov rsi, 0
 28716 00014DA5 BA01000000              	mov rdx, 1
 28717                                  .L_lambda_simple_env_loop_6da3:	; ext_env[i + 1] <-- env[i]
 28718 00014DAA 4883FE01                	cmp rsi, 1
 28719 00014DAE 7410                    	je .L_lambda_simple_env_end_6da3
 28720 00014DB0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28721 00014DB4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28722 00014DB8 48FFC6                  	inc rsi
 28723 00014DBB 48FFC2                  	inc rdx
 28724 00014DBE EBEA                    	jmp .L_lambda_simple_env_loop_6da3
 28725                                  .L_lambda_simple_env_end_6da3:
 28726 00014DC0 5B                      	pop rbx
 28727 00014DC1 BE00000000              	mov rsi, 0
 28728                                  .L_lambda_simple_params_loop_6da3:	; copy params
 28729 00014DC6 4883FE02                	cmp rsi, 2
 28730 00014DCA 740E                    	je .L_lambda_simple_params_end_6da3
 28731 00014DCC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28732 00014DD1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28733 00014DD5 48FFC6                  	inc rsi
 28734 00014DD8 EBEC                    	jmp .L_lambda_simple_params_loop_6da3
 28735                                  .L_lambda_simple_params_end_6da3:
 28736 00014DDA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28737 00014DDD 4889C3                  	mov rbx, rax
 28738 00014DE0 58                      	pop rax
 28739 00014DE1 C60004                  	mov byte [rax], T_closure
 28740 00014DE4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28741 00014DE8 48C74009[F54D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6da3
 28742 00014DF0 E947030000              	jmp .L_lambda_simple_end_6da3
 28743                                  .L_lambda_simple_code_6da3:	; lambda-simple body
 28744 00014DF5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28745 00014DFB 740B                    	je .L_lambda_simple_arity_check_ok_6da3
 28746 00014DFD FF742410                	push qword [rsp + 8 * 2]
 28747 00014E01 6A01                    	push 1
 28748 00014E03 E9BA080000              	jmp L_error_incorrect_arity_simple
 28749                                  .L_lambda_simple_arity_check_ok_6da3:
 28750 00014E08 C8000000                	enter 0, 0
 28751                                  	; preparing a tail-call
 28752 00014E0C 48B8-                   	mov rax, L_constants + 1881
 28752 00014E0E [5907000000000000] 
 28753 00014E16 50                      	push rax
 28754 00014E17 6A01                    	push 1	; arg count
 28755 00014E19 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28756 00014E1E E8E6080000              	call malloc
 28757 00014E23 50                      	push rax
 28758 00014E24 BF08000000              	mov rdi, 8 * 1	; new rib
 28759 00014E29 E8DB080000              	call malloc
 28760 00014E2E 50                      	push rax
 28761 00014E2F BF18000000              	mov rdi, 8 * 3	; extended env
 28762 00014E34 E8D0080000              	call malloc
 28763 00014E39 488B7D10                	mov rdi, ENV
 28764 00014E3D BE00000000              	mov rsi, 0
 28765 00014E42 BA01000000              	mov rdx, 1
 28766                                  .L_lambda_simple_env_loop_6da4:	; ext_env[i + 1] <-- env[i]
 28767 00014E47 4883FE02                	cmp rsi, 2
 28768 00014E4B 7410                    	je .L_lambda_simple_env_end_6da4
 28769 00014E4D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28770 00014E51 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28771 00014E55 48FFC6                  	inc rsi
 28772 00014E58 48FFC2                  	inc rdx
 28773 00014E5B EBEA                    	jmp .L_lambda_simple_env_loop_6da4
 28774                                  .L_lambda_simple_env_end_6da4:
 28775 00014E5D 5B                      	pop rbx
 28776 00014E5E BE00000000              	mov rsi, 0
 28777                                  .L_lambda_simple_params_loop_6da4:	; copy params
 28778 00014E63 4883FE01                	cmp rsi, 1
 28779 00014E67 740E                    	je .L_lambda_simple_params_end_6da4
 28780 00014E69 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28781 00014E6E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28782 00014E72 48FFC6                  	inc rsi
 28783 00014E75 EBEC                    	jmp .L_lambda_simple_params_loop_6da4
 28784                                  .L_lambda_simple_params_end_6da4:
 28785 00014E77 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28786 00014E7A 4889C3                  	mov rbx, rax
 28787 00014E7D 58                      	pop rax
 28788 00014E7E C60004                  	mov byte [rax], T_closure
 28789 00014E81 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28790 00014E85 48C74009[924E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6da4
 28791 00014E8D E961020000              	jmp .L_lambda_simple_end_6da4
 28792                                  .L_lambda_simple_code_6da4:	; lambda-simple body
 28793 00014E92 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28794 00014E98 740B                    	je .L_lambda_simple_arity_check_ok_6da4
 28795 00014E9A FF742410                	push qword [rsp + 8 * 2]
 28796 00014E9E 6A01                    	push 1
 28797 00014EA0 E91D080000              	jmp L_error_incorrect_arity_simple
 28798                                  .L_lambda_simple_arity_check_ok_6da4:
 28799 00014EA5 C8000000                	enter 0, 0
 28800                                  
 28801 00014EA9 BF08000000              	mov rdi, 8
 28802 00014EAE E856080000              	call malloc
 28803 00014EB3 488B5D20                	mov rbx, PARAM(0)	; param run
 28804 00014EB7 488918                  	mov [rax], rbx	; box run
 28805 00014EBA 48894520                	mov PARAM(0), rax	;replace param run with box
 28806 00014EBE 48B8-                   	mov rax, sob_void
 28806 00014EC0 [0000000000000000] 
 28807                                  
 28808 00014EC8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28809 00014ECD E837080000              	call malloc
 28810 00014ED2 50                      	push rax
 28811 00014ED3 BF08000000              	mov rdi, 8 * 1	; new rib
 28812 00014ED8 E82C080000              	call malloc
 28813 00014EDD 50                      	push rax
 28814 00014EDE BF20000000              	mov rdi, 8 * 4	; extended env
 28815 00014EE3 E821080000              	call malloc
 28816 00014EE8 488B7D10                	mov rdi, ENV
 28817 00014EEC BE00000000              	mov rsi, 0
 28818 00014EF1 BA01000000              	mov rdx, 1
 28819                                  .L_lambda_simple_env_loop_6da5:	; ext_env[i + 1] <-- env[i]
 28820 00014EF6 4883FE03                	cmp rsi, 3
 28821 00014EFA 7410                    	je .L_lambda_simple_env_end_6da5
 28822 00014EFC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28823 00014F00 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28824 00014F04 48FFC6                  	inc rsi
 28825 00014F07 48FFC2                  	inc rdx
 28826 00014F0A EBEA                    	jmp .L_lambda_simple_env_loop_6da5
 28827                                  .L_lambda_simple_env_end_6da5:
 28828 00014F0C 5B                      	pop rbx
 28829 00014F0D BE00000000              	mov rsi, 0
 28830                                  .L_lambda_simple_params_loop_6da5:	; copy params
 28831 00014F12 4883FE01                	cmp rsi, 1
 28832 00014F16 740E                    	je .L_lambda_simple_params_end_6da5
 28833 00014F18 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28834 00014F1D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28835 00014F21 48FFC6                  	inc rsi
 28836 00014F24 EBEC                    	jmp .L_lambda_simple_params_loop_6da5
 28837                                  .L_lambda_simple_params_end_6da5:
 28838 00014F26 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28839 00014F29 4889C3                  	mov rbx, rax
 28840 00014F2C 58                      	pop rax
 28841 00014F2D C60004                  	mov byte [rax], T_closure
 28842 00014F30 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28843 00014F34 48C74009[414F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6da5
 28844 00014F3C E944010000              	jmp .L_lambda_simple_end_6da5
 28845                                  .L_lambda_simple_code_6da5:	; lambda-simple body
 28846 00014F41 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28847 00014F47 740B                    	je .L_lambda_simple_arity_check_ok_6da5
 28848 00014F49 FF742410                	push qword [rsp + 8 * 2]
 28849 00014F4D 6A01                    	push 1
 28850 00014F4F E96E070000              	jmp L_error_incorrect_arity_simple
 28851                                  .L_lambda_simple_arity_check_ok_6da5:
 28852 00014F54 C8000000                	enter 0, 0
 28853 00014F58 488B4510                	mov rax, ENV
 28854 00014F5C 488B4010                	mov rax, qword [rax + 8 * 2]
 28855 00014F60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 28856 00014F63 50                      	push rax
 28857 00014F64 488B4520                	mov rax, PARAM(0)	; param i
 28858 00014F68 50                      	push rax
 28859 00014F69 6A02                    	push 2	; arg count
 28860 00014F6B 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 28861 00014F73 803805                  	cmp byte [rax], T_undefined
 28862 00014F76 0F8460060000            	je L_error_fvar_undefined
 28863 00014F7C 803804                  	cmp byte [rax], T_closure
 28864 00014F7F 0F85DB060000            	jne L_error_non_closure
 28865 00014F85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28866 00014F88 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28867                                  
 28868 00014F8B 483D[02000000]          	cmp rax, sob_boolean_false
 28869 00014F91 0F84DF000000            	je .L_if_else_7747
 28870 00014F97 488B4520                	mov rax, PARAM(0)	; param i
 28871 00014F9B 50                      	push rax
 28872 00014F9C 6A01                    	push 1	; arg count
 28873 00014F9E 488B4510                	mov rax, ENV
 28874 00014FA2 488B4010                	mov rax, qword [rax + 8 * 2]
 28875 00014FA6 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 28876 00014FAA 803804                  	cmp byte [rax], T_closure
 28877 00014FAD 0F85AD060000            	jne L_error_non_closure
 28878 00014FB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28879 00014FB6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28880 00014FB9 50                      	push rax
 28881 00014FBA 488B4520                	mov rax, PARAM(0)	; param i
 28882 00014FBE 50                      	push rax
 28883 00014FBF 488B4510                	mov rax, ENV
 28884 00014FC3 488B4008                	mov rax, qword [rax + 8 * 1]
 28885 00014FC7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28886 00014FCA 50                      	push rax
 28887 00014FCB 6A03                    	push 3	; arg count
 28888 00014FCD 488B0425[4F110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 28889 00014FD5 803805                  	cmp byte [rax], T_undefined
 28890 00014FD8 0F84FE050000            	je L_error_fvar_undefined
 28891 00014FDE 803804                  	cmp byte [rax], T_closure
 28892 00014FE1 0F8579060000            	jne L_error_non_closure
 28893 00014FE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28894 00014FEA FF5009                  	call SOB_CLOSURE_CODE(rax)
 28895                                  
 28896                                  	; preparing a tail-call
 28897 00014FED 48B8-                   	mov rax, L_constants + 2158
 28897 00014FEF [6E08000000000000] 
 28898 00014FF7 50                      	push rax
 28899 00014FF8 488B4520                	mov rax, PARAM(0)	; param i
 28900 00014FFC 50                      	push rax
 28901 00014FFD 6A02                    	push 2	; arg count
 28902 00014FFF 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 28903 00015007 803805                  	cmp byte [rax], T_undefined
 28904 0001500A 0F84CC050000            	je L_error_fvar_undefined
 28905 00015010 803804                  	cmp byte [rax], T_closure
 28906 00015013 0F8547060000            	jne L_error_non_closure
 28907 00015019 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28908 0001501C FF5009                  	call SOB_CLOSURE_CODE(rax)
 28909 0001501F 50                      	push rax
 28910 00015020 6A01                    	push 1	; arg count
 28911 00015022 488B4510                	mov rax, ENV
 28912 00015026 488B00                  	mov rax, qword [rax + 8 * 0]
 28913 00015029 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28914 0001502C 488B00                  	mov rax, qword [rax]
 28915 0001502F 803804                  	cmp byte [rax], T_closure
 28916 00015032 0F8528060000            	jne L_error_non_closure
 28917 00015038 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28918                                  
 28919                                  	; recycling the current frame
 28920 0001503B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28921 0001503E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28922 00015041 B905000000              	mov rcx, 1 + 4
 28923 00015046 488B5D18                	mov rbx, COUNT
 28924 0001504A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28925 0001504F 488D55F8                	lea rdx, [rbp - 8 * 1]
 28926                                  .L_tc_recycle_frame_loop_8f9a:
 28927 00015053 4883F900                	cmp rcx, 0
 28928 00015057 7413                    	je .L_tc_recycle_frame_done_8f9a
 28929 00015059 488B32                  	mov rsi, qword [rdx]
 28930 0001505C 488933                  	mov qword [rbx], rsi
 28931 0001505F 48FFC9                  	dec rcx
 28932 00015062 4883EB08                	sub rbx, 8 * 1
 28933 00015066 4883EA08                	sub rdx, 8 * 1
 28934 0001506A EBE7                    	jmp .L_tc_recycle_frame_loop_8f9a
 28935                                  .L_tc_recycle_frame_done_8f9a:
 28936 0001506C 488D6308                	lea rsp, [rbx + 8 * 1]
 28937 00015070 5D                      	pop rbp	; the proc will restore it!
 28938 00015071 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28939                                  
 28940 00015074 EB0B                    	jmp .L_if_end_7747
 28941                                  
 28942                                  	.L_if_else_7747:
 28943 00015076 488B4510                	mov rax, ENV
 28944 0001507A 488B4008                	mov rax, qword [rax + 8 * 1]
 28945 0001507E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28946                                  
 28947                                  	.L_if_end_7747:
 28948 00015081 C9                      	leave
 28949 00015082 C21800                  	ret AND_KILL_FRAME(1)
 28950                                  .L_lambda_simple_end_6da5:	; new closure is in rax
 28951                                  
 28952 00015085 50                      	push rax
 28953 00015086 488B4520                	mov rax, PARAM(0)	; param run
 28954                                  
 28955 0001508A 8F00                    	pop qword[rax]
 28956 0001508C 48B8-                   	mov rax, sob_void
 28956 0001508E [0000000000000000] 
 28957                                  
 28958                                  	; preparing a tail-call
 28959 00015096 48B8-                   	mov rax, L_constants + 2023
 28959 00015098 [E707000000000000] 
 28960 000150A0 50                      	push rax
 28961 000150A1 6A01                    	push 1	; arg count
 28962 000150A3 488B4520                	mov rax, PARAM(0)	; param run
 28963 000150A7 488B00                  	mov rax, qword [rax]
 28964 000150AA 803804                  	cmp byte [rax], T_closure
 28965 000150AD 0F85AD050000            	jne L_error_non_closure
 28966 000150B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28967                                  
 28968                                  	; recycling the current frame
 28969 000150B6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28970 000150B9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28971 000150BC B905000000              	mov rcx, 1 + 4
 28972 000150C1 488B5D18                	mov rbx, COUNT
 28973 000150C5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28974 000150CA 488D55F8                	lea rdx, [rbp - 8 * 1]
 28975                                  .L_tc_recycle_frame_loop_8f9b:
 28976 000150CE 4883F900                	cmp rcx, 0
 28977 000150D2 7413                    	je .L_tc_recycle_frame_done_8f9b
 28978 000150D4 488B32                  	mov rsi, qword [rdx]
 28979 000150D7 488933                  	mov qword [rbx], rsi
 28980 000150DA 48FFC9                  	dec rcx
 28981 000150DD 4883EB08                	sub rbx, 8 * 1
 28982 000150E1 4883EA08                	sub rdx, 8 * 1
 28983 000150E5 EBE7                    	jmp .L_tc_recycle_frame_loop_8f9b
 28984                                  .L_tc_recycle_frame_done_8f9b:
 28985 000150E7 488D6308                	lea rsp, [rbx + 8 * 1]
 28986 000150EB 5D                      	pop rbp	; the proc will restore it!
 28987 000150EC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28988 000150EF C9                      	leave
 28989 000150F0 C21800                  	ret AND_KILL_FRAME(1)
 28990                                  .L_lambda_simple_end_6da4:	; new closure is in rax
 28991 000150F3 803804                  	cmp byte [rax], T_closure
 28992 000150F6 0F8564050000            	jne L_error_non_closure
 28993 000150FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 28994                                  
 28995                                  	; recycling the current frame
 28996 000150FF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28997 00015102 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28998 00015105 B905000000              	mov rcx, 1 + 4
 28999 0001510A 488B5D18                	mov rbx, COUNT
 29000 0001510E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29001 00015113 488D55F8                	lea rdx, [rbp - 8 * 1]
 29002                                  .L_tc_recycle_frame_loop_8f9c:
 29003 00015117 4883F900                	cmp rcx, 0
 29004 0001511B 7413                    	je .L_tc_recycle_frame_done_8f9c
 29005 0001511D 488B32                  	mov rsi, qword [rdx]
 29006 00015120 488933                  	mov qword [rbx], rsi
 29007 00015123 48FFC9                  	dec rcx
 29008 00015126 4883EB08                	sub rbx, 8 * 1
 29009 0001512A 4883EA08                	sub rdx, 8 * 1
 29010 0001512E EBE7                    	jmp .L_tc_recycle_frame_loop_8f9c
 29011                                  .L_tc_recycle_frame_done_8f9c:
 29012 00015130 488D6308                	lea rsp, [rbx + 8 * 1]
 29013 00015134 5D                      	pop rbp	; the proc will restore it!
 29014 00015135 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29015 00015138 C9                      	leave
 29016 00015139 C21800                  	ret AND_KILL_FRAME(1)
 29017                                  .L_lambda_simple_end_6da3:	; new closure is in rax
 29018 0001513C 803804                  	cmp byte [rax], T_closure
 29019 0001513F 0F851B050000            	jne L_error_non_closure
 29020 00015145 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29021                                  
 29022                                  	; recycling the current frame
 29023 00015148 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29024 0001514B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29025 0001514E B905000000              	mov rcx, 1 + 4
 29026 00015153 488B5D18                	mov rbx, COUNT
 29027 00015157 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29028 0001515C 488D55F8                	lea rdx, [rbp - 8 * 1]
 29029                                  .L_tc_recycle_frame_loop_8f9d:
 29030 00015160 4883F900                	cmp rcx, 0
 29031 00015164 7413                    	je .L_tc_recycle_frame_done_8f9d
 29032 00015166 488B32                  	mov rsi, qword [rdx]
 29033 00015169 488933                  	mov qword [rbx], rsi
 29034 0001516C 48FFC9                  	dec rcx
 29035 0001516F 4883EB08                	sub rbx, 8 * 1
 29036 00015173 4883EA08                	sub rdx, 8 * 1
 29037 00015177 EBE7                    	jmp .L_tc_recycle_frame_loop_8f9d
 29038                                  .L_tc_recycle_frame_done_8f9d:
 29039 00015179 488D6308                	lea rsp, [rbx + 8 * 1]
 29040 0001517D 5D                      	pop rbp	; the proc will restore it!
 29041 0001517E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29042 00015181 C9                      	leave
 29043 00015182 C22000                  	ret AND_KILL_FRAME(2)
 29044                                  .L_lambda_simple_end_6da2:	; new closure is in rax
 29045 00015185 48890425[36190000]      	mov qword [free_var_174], rax
 29046 0001518D 48B8-                   	mov rax, sob_void
 29046 0001518F [0000000000000000] 
 29047                                  
 29048 00015197 4889C7                  	mov rdi, rax
 29049 0001519A E87C060000              	call print_sexpr_if_not_void
 29050                                  
 29051 0001519F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29052 000151A4 E860050000              	call malloc
 29053 000151A9 50                      	push rax
 29054 000151AA BF00000000              	mov rdi, 8 * 0	; new rib
 29055 000151AF E855050000              	call malloc
 29056 000151B4 50                      	push rax
 29057 000151B5 BF08000000              	mov rdi, 8 * 1	; extended env
 29058 000151BA E84A050000              	call malloc
 29059 000151BF 488B7D10                	mov rdi, ENV
 29060 000151C3 BE00000000              	mov rsi, 0
 29061 000151C8 BA01000000              	mov rdx, 1
 29062                                  .L_lambda_simple_env_loop_6da6:	; ext_env[i + 1] <-- env[i]
 29063 000151CD 4883FE00                	cmp rsi, 0
 29064 000151D1 7410                    	je .L_lambda_simple_env_end_6da6
 29065 000151D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29066 000151D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29067 000151DB 48FFC6                  	inc rsi
 29068 000151DE 48FFC2                  	inc rdx
 29069 000151E1 EBEA                    	jmp .L_lambda_simple_env_loop_6da6
 29070                                  .L_lambda_simple_env_end_6da6:
 29071 000151E3 5B                      	pop rbx
 29072 000151E4 BE00000000              	mov rsi, 0
 29073                                  .L_lambda_simple_params_loop_6da6:	; copy params
 29074 000151E9 4883FE00                	cmp rsi, 0
 29075 000151ED 740E                    	je .L_lambda_simple_params_end_6da6
 29076 000151EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29077 000151F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29078 000151F8 48FFC6                  	inc rsi
 29079 000151FB EBEC                    	jmp .L_lambda_simple_params_loop_6da6
 29080                                  .L_lambda_simple_params_end_6da6:
 29081 000151FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29082 00015200 4889C3                  	mov rbx, rax
 29083 00015203 58                      	pop rax
 29084 00015204 C60004                  	mov byte [rax], T_closure
 29085 00015207 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29086 0001520B 48C74009[18520100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6da6
 29087 00015213 E959020000              	jmp .L_lambda_simple_end_6da6
 29088                                  .L_lambda_simple_code_6da6:	; lambda-simple body
 29089 00015218 48837C241003            	cmp qword [rsp + 8 * 2], 3
 29090 0001521E 740B                    	je .L_lambda_simple_arity_check_ok_6da6
 29091 00015220 FF742410                	push qword [rsp + 8 * 2]
 29092 00015224 6A03                    	push 3
 29093 00015226 E997040000              	jmp L_error_incorrect_arity_simple
 29094                                  .L_lambda_simple_arity_check_ok_6da6:
 29095 0001522B C8000000                	enter 0, 0
 29096 0001522F 488B4530                	mov rax, PARAM(2)	; param n
 29097 00015233 50                      	push rax
 29098 00015234 6A01                    	push 1	; arg count
 29099 00015236 488B0425[730F0000]      	mov rax, qword [free_var_27]	; free var zero?
 29100 0001523E 803805                  	cmp byte [rax], T_undefined
 29101 00015241 0F8495030000            	je L_error_fvar_undefined
 29102 00015247 803804                  	cmp byte [rax], T_closure
 29103 0001524A 0F8510040000            	jne L_error_non_closure
 29104 00015250 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29105 00015253 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29106                                  
 29107 00015256 483D[02000000]          	cmp rax, sob_boolean_false
 29108 0001525C 740F                    	je .L_if_else_7748
 29109 0001525E 48B8-                   	mov rax, L_constants + 3469
 29109 00015260 [8D0D000000000000] 
 29110                                  
 29111 00015268 E900020000              	jmp .L_if_end_7748
 29112                                  
 29113                                  	.L_if_else_7748:
 29114 0001526D 488B4528                	mov rax, PARAM(1)	; param b
 29115 00015271 50                      	push rax
 29116 00015272 488B4520                	mov rax, PARAM(0)	; param a
 29117 00015276 50                      	push rax
 29118 00015277 6A02                    	push 2	; arg count
 29119 00015279 488B0425[C2150000]      	mov rax, qword [free_var_122]	; free var <
 29120 00015281 803805                  	cmp byte [rax], T_undefined
 29121 00015284 0F8452030000            	je L_error_fvar_undefined
 29122 0001528A 803804                  	cmp byte [rax], T_closure
 29123 0001528D 0F85CD030000            	jne L_error_non_closure
 29124 00015293 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29125 00015296 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29126                                  
 29127 00015299 483D[02000000]          	cmp rax, sob_boolean_false
 29128 0001529F 0F84C2000000            	je .L_if_else_7749
 29129                                  	; preparing a tail-call
 29130 000152A5 488B4530                	mov rax, PARAM(2)	; param n
 29131 000152A9 50                      	push rax
 29132 000152AA 488B4520                	mov rax, PARAM(0)	; param a
 29133 000152AE 50                      	push rax
 29134 000152AF 488B4528                	mov rax, PARAM(1)	; param b
 29135 000152B3 50                      	push rax
 29136 000152B4 6A02                    	push 2	; arg count
 29137 000152B6 488B0425[A0150000]      	mov rax, qword [free_var_120]	; free var /
 29138 000152BE 803805                  	cmp byte [rax], T_undefined
 29139 000152C1 0F8415030000            	je L_error_fvar_undefined
 29140 000152C7 803804                  	cmp byte [rax], T_closure
 29141 000152CA 0F8590030000            	jne L_error_non_closure
 29142 000152D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29143 000152D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29144 000152D6 50                      	push rax
 29145 000152D7 488B4520                	mov rax, PARAM(0)	; param a
 29146 000152DB 50                      	push rax
 29147 000152DC 6A03                    	push 3	; arg count
 29148 000152DE 488B0425[47190000]      	mov rax, qword [free_var_175]	; free var logarithm
 29149 000152E6 803805                  	cmp byte [rax], T_undefined
 29150 000152E9 0F84ED020000            	je L_error_fvar_undefined
 29151 000152EF 803804                  	cmp byte [rax], T_closure
 29152 000152F2 0F8568030000            	jne L_error_non_closure
 29153 000152F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29154 000152FB FF5009                  	call SOB_CLOSURE_CODE(rax)
 29155 000152FE 50                      	push rax
 29156 000152FF 48B8-                   	mov rax, L_constants + 3469
 29156 00015301 [8D0D000000000000] 
 29157 00015309 50                      	push rax
 29158 0001530A 6A02                    	push 2	; arg count
 29159 0001530C 488B0425[4B150000]      	mov rax, qword [free_var_115]	; free var +
 29160 00015314 803805                  	cmp byte [rax], T_undefined
 29161 00015317 0F84BF020000            	je L_error_fvar_undefined
 29162 0001531D 803804                  	cmp byte [rax], T_closure
 29163 00015320 0F853A030000            	jne L_error_non_closure
 29164 00015326 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29165                                  
 29166                                  	; recycling the current frame
 29167 00015329 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29168 0001532C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29169 0001532F B906000000              	mov rcx, 2 + 4
 29170 00015334 488B5D18                	mov rbx, COUNT
 29171 00015338 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29172 0001533D 488D55F8                	lea rdx, [rbp - 8 * 1]
 29173                                  .L_tc_recycle_frame_loop_8f9e:
 29174 00015341 4883F900                	cmp rcx, 0
 29175 00015345 7413                    	je .L_tc_recycle_frame_done_8f9e
 29176 00015347 488B32                  	mov rsi, qword [rdx]
 29177 0001534A 488933                  	mov qword [rbx], rsi
 29178 0001534D 48FFC9                  	dec rcx
 29179 00015350 4883EB08                	sub rbx, 8 * 1
 29180 00015354 4883EA08                	sub rdx, 8 * 1
 29181 00015358 EBE7                    	jmp .L_tc_recycle_frame_loop_8f9e
 29182                                  .L_tc_recycle_frame_done_8f9e:
 29183 0001535A 488D6308                	lea rsp, [rbx + 8 * 1]
 29184 0001535E 5D                      	pop rbp	; the proc will restore it!
 29185 0001535F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29186                                  
 29187 00015362 E906010000              	jmp .L_if_end_7749
 29188                                  
 29189                                  	.L_if_else_7749:
 29190 00015367 488B4528                	mov rax, PARAM(1)	; param b
 29191 0001536B 50                      	push rax
 29192 0001536C 488B4520                	mov rax, PARAM(0)	; param a
 29193 00015370 50                      	push rax
 29194 00015371 6A02                    	push 2	; arg count
 29195 00015373 488B0425[06160000]      	mov rax, qword [free_var_126]	; free var =
 29196 0001537B 803805                  	cmp byte [rax], T_undefined
 29197 0001537E 0F8458020000            	je L_error_fvar_undefined
 29198 00015384 803804                  	cmp byte [rax], T_closure
 29199 00015387 0F85D3020000            	jne L_error_non_closure
 29200 0001538D FF7001                  	push SOB_CLOSURE_ENV(rax)
 29201 00015390 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29202                                  
 29203 00015393 483D[02000000]          	cmp rax, sob_boolean_false
 29204 00015399 740F                    	je .L_if_else_774a
 29205 0001539B 48B8-                   	mov rax, L_constants + 3469
 29205 0001539D [8D0D000000000000] 
 29206                                  
 29207 000153A5 E9C3000000              	jmp .L_if_end_774a
 29208                                  
 29209                                  	.L_if_else_774a:
 29210                                  	; preparing a tail-call
 29211 000153AA 48B8-                   	mov rax, L_constants + 2158
 29211 000153AC [6E08000000000000] 
 29212 000153B4 50                      	push rax
 29213 000153B5 488B4530                	mov rax, PARAM(2)	; param n
 29214 000153B9 50                      	push rax
 29215 000153BA 6A02                    	push 2	; arg count
 29216 000153BC 488B0425[6D150000]      	mov rax, qword [free_var_117]	; free var -
 29217 000153C4 803805                  	cmp byte [rax], T_undefined
 29218 000153C7 0F840F020000            	je L_error_fvar_undefined
 29219 000153CD 803804                  	cmp byte [rax], T_closure
 29220 000153D0 0F858A020000            	jne L_error_non_closure
 29221 000153D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29222 000153D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29223 000153DC 50                      	push rax
 29224 000153DD 488B4520                	mov rax, PARAM(0)	; param a
 29225 000153E1 50                      	push rax
 29226 000153E2 488B4528                	mov rax, PARAM(1)	; param b
 29227 000153E6 50                      	push rax
 29228 000153E7 6A03                    	push 3	; arg count
 29229 000153E9 488B0425[47190000]      	mov rax, qword [free_var_175]	; free var logarithm
 29230 000153F1 803805                  	cmp byte [rax], T_undefined
 29231 000153F4 0F84E2010000            	je L_error_fvar_undefined
 29232 000153FA 803804                  	cmp byte [rax], T_closure
 29233 000153FD 0F855D020000            	jne L_error_non_closure
 29234 00015403 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29235 00015406 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29236 00015409 50                      	push rax
 29237 0001540A 48B8-                   	mov rax, L_constants + 3469
 29237 0001540C [8D0D000000000000] 
 29238 00015414 50                      	push rax
 29239 00015415 6A02                    	push 2	; arg count
 29240 00015417 488B0425[A0150000]      	mov rax, qword [free_var_120]	; free var /
 29241 0001541F 803805                  	cmp byte [rax], T_undefined
 29242 00015422 0F84B4010000            	je L_error_fvar_undefined
 29243 00015428 803804                  	cmp byte [rax], T_closure
 29244 0001542B 0F852F020000            	jne L_error_non_closure
 29245 00015431 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29246                                  
 29247                                  	; recycling the current frame
 29248 00015434 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29249 00015437 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29250 0001543A B906000000              	mov rcx, 2 + 4
 29251 0001543F 488B5D18                	mov rbx, COUNT
 29252 00015443 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29253 00015448 488D55F8                	lea rdx, [rbp - 8 * 1]
 29254                                  .L_tc_recycle_frame_loop_8f9f:
 29255 0001544C 4883F900                	cmp rcx, 0
 29256 00015450 7413                    	je .L_tc_recycle_frame_done_8f9f
 29257 00015452 488B32                  	mov rsi, qword [rdx]
 29258 00015455 488933                  	mov qword [rbx], rsi
 29259 00015458 48FFC9                  	dec rcx
 29260 0001545B 4883EB08                	sub rbx, 8 * 1
 29261 0001545F 4883EA08                	sub rdx, 8 * 1
 29262 00015463 EBE7                    	jmp .L_tc_recycle_frame_loop_8f9f
 29263                                  .L_tc_recycle_frame_done_8f9f:
 29264 00015465 488D6308                	lea rsp, [rbx + 8 * 1]
 29265 00015469 5D                      	pop rbp	; the proc will restore it!
 29266 0001546A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29267                                  
 29268                                  	.L_if_end_774a:
 29269                                  
 29270                                  	.L_if_end_7749:
 29271                                  
 29272                                  	.L_if_end_7748:
 29273 0001546D C9                      	leave
 29274 0001546E C22800                  	ret AND_KILL_FRAME(3)
 29275                                  .L_lambda_simple_end_6da6:	; new closure is in rax
 29276 00015471 48890425[47190000]      	mov qword [free_var_175], rax
 29277 00015479 48B8-                   	mov rax, sob_void
 29277 0001547B [0000000000000000] 
 29278                                  
 29279 00015483 4889C7                  	mov rdi, rax
 29280 00015486 E890030000              	call print_sexpr_if_not_void
 29281                                  
 29282 0001548B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29283 00015490 E874020000              	call malloc
 29284 00015495 50                      	push rax
 29285 00015496 BF00000000              	mov rdi, 8 * 0	; new rib
 29286 0001549B E869020000              	call malloc
 29287 000154A0 50                      	push rax
 29288 000154A1 BF08000000              	mov rdi, 8 * 1	; extended env
 29289 000154A6 E85E020000              	call malloc
 29290 000154AB 488B7D10                	mov rdi, ENV
 29291 000154AF BE00000000              	mov rsi, 0
 29292 000154B4 BA01000000              	mov rdx, 1
 29293                                  .L_lambda_simple_env_loop_6da7:	; ext_env[i + 1] <-- env[i]
 29294 000154B9 4883FE00                	cmp rsi, 0
 29295 000154BD 7410                    	je .L_lambda_simple_env_end_6da7
 29296 000154BF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29297 000154C3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29298 000154C7 48FFC6                  	inc rsi
 29299 000154CA 48FFC2                  	inc rdx
 29300 000154CD EBEA                    	jmp .L_lambda_simple_env_loop_6da7
 29301                                  .L_lambda_simple_env_end_6da7:
 29302 000154CF 5B                      	pop rbx
 29303 000154D0 BE00000000              	mov rsi, 0
 29304                                  .L_lambda_simple_params_loop_6da7:	; copy params
 29305 000154D5 4883FE00                	cmp rsi, 0
 29306 000154D9 740E                    	je .L_lambda_simple_params_end_6da7
 29307 000154DB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29308 000154E0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29309 000154E4 48FFC6                  	inc rsi
 29310 000154E7 EBEC                    	jmp .L_lambda_simple_params_loop_6da7
 29311                                  .L_lambda_simple_params_end_6da7:
 29312 000154E9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29313 000154EC 4889C3                  	mov rbx, rax
 29314 000154EF 58                      	pop rax
 29315 000154F0 C60004                  	mov byte [rax], T_closure
 29316 000154F3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29317 000154F7 48C74009[04550100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_6da7
 29318 000154FF E97E000000              	jmp .L_lambda_simple_end_6da7
 29319                                  .L_lambda_simple_code_6da7:	; lambda-simple body
 29320 00015504 48837C241000            	cmp qword [rsp + 8 * 2], 0
 29321 0001550A 740B                    	je .L_lambda_simple_arity_check_ok_6da7
 29322 0001550C FF742410                	push qword [rsp + 8 * 2]
 29323 00015510 6A00                    	push 0
 29324 00015512 E9AB010000              	jmp L_error_incorrect_arity_simple
 29325                                  .L_lambda_simple_arity_check_ok_6da7:
 29326 00015517 C8000000                	enter 0, 0
 29327                                  	; preparing a tail-call
 29328 0001551B 48B8-                   	mov rax, L_constants + 3494
 29328 0001551D [A60D000000000000] 
 29329 00015525 50                      	push rax
 29330 00015526 6A01                    	push 1	; arg count
 29331 00015528 488B0425[A70E0000]      	mov rax, qword [free_var_15]	; free var write-char
 29332 00015530 803805                  	cmp byte [rax], T_undefined
 29333 00015533 0F84A3000000            	je L_error_fvar_undefined
 29334 00015539 803804                  	cmp byte [rax], T_closure
 29335 0001553C 0F851E010000            	jne L_error_non_closure
 29336 00015542 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29337                                  
 29338                                  	; recycling the current frame
 29339 00015545 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29340 00015548 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29341 0001554B B905000000              	mov rcx, 1 + 4
 29342 00015550 488B5D18                	mov rbx, COUNT
 29343 00015554 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29344 00015559 488D55F8                	lea rdx, [rbp - 8 * 1]
 29345                                  .L_tc_recycle_frame_loop_8fa0:
 29346 0001555D 4883F900                	cmp rcx, 0
 29347 00015561 7413                    	je .L_tc_recycle_frame_done_8fa0
 29348 00015563 488B32                  	mov rsi, qword [rdx]
 29349 00015566 488933                  	mov qword [rbx], rsi
 29350 00015569 48FFC9                  	dec rcx
 29351 0001556C 4883EB08                	sub rbx, 8 * 1
 29352 00015570 4883EA08                	sub rdx, 8 * 1
 29353 00015574 EBE7                    	jmp .L_tc_recycle_frame_loop_8fa0
 29354                                  .L_tc_recycle_frame_done_8fa0:
 29355 00015576 488D6308                	lea rsp, [rbx + 8 * 1]
 29356 0001557A 5D                      	pop rbp	; the proc will restore it!
 29357 0001557B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29358 0001557E C9                      	leave
 29359 0001557F C21000                  	ret AND_KILL_FRAME(0)
 29360                                  .L_lambda_simple_end_6da7:	; new closure is in rax
 29361 00015582 48890425[58190000]      	mov qword [free_var_176], rax
 29362 0001558A 48B8-                   	mov rax, sob_void
 29362 0001558C [0000000000000000] 
 29363                                  
 29364 00015594 4889C7                  	mov rdi, rax
 29365 00015597 E87F020000              	call print_sexpr_if_not_void
 29366                                  
 29367 0001559C 48B8-                   	mov rax, L_constants + 1
 29367 0001559E [0100000000000000] 
 29368                                  
 29369 000155A6 4889C7                  	mov rdi, rax
 29370 000155A9 E86D020000              	call print_sexpr_if_not_void
 29371                                  
 29372 000155AE 48BF-                           mov rdi, fmt_memory_usage
 29372 000155B0 [011A000000000000] 
 29373 000155B8 488B3425[871A0000]              mov rsi, qword [top_of_memory]
 29374 000155C0 4881EE[00000000]                sub rsi, memory
 29375 000155C7 B800000000                      mov rax, 0
 29376                                          ENTER
    44 000155CC C8000000            <1>  enter 0, 0
    45 000155D0 4883E4F0            <1>  and rsp, ~15
 29377 000155D4 E8(00000000)                    call printf
 29378                                          LEAVE
    49 000155D9 C9                  <1>  leave
 29379 000155DA C9                      	leave
 29380 000155DB C3                      	ret
 29381                                  
 29382                                  L_error_fvar_undefined:
 29383 000155DC 50                              push rax
 29384 000155DD 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
 29385 000155E5 48BE-                           mov rsi, fmt_undefined_free_var_1
 29385 000155E7 [6919000000000000] 
 29386 000155EF B800000000                      mov rax, 0
 29387                                          ENTER
    44 000155F4 C8000000            <1>  enter 0, 0
    45 000155F8 4883E4F0            <1>  and rsp, ~15
 29388 000155FC E8(00000000)                    call fprintf
 29389                                          LEAVE
    49 00015601 C9                  <1>  leave
 29390 00015602 58                              pop rax
 29391 00015603 488B4001                        mov rax, qword [rax + 1] ; string
 29392 00015607 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 29393 0001560B BE01000000                      mov rsi, 1               ; sizeof(char)
 29394 00015610 488B5001                        mov rdx, qword [rax + 1] ; string-length
 29395 00015614 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
 29396 0001561C B800000000                      mov rax, 0
 29397                                          ENTER
    44 00015621 C8000000            <1>  enter 0, 0
    45 00015625 4883E4F0            <1>  and rsp, ~15
 29398 00015629 E8(00000000)                    call fwrite
 29399                                          LEAVE
    49 0001562E C9                  <1>  leave
 29400 0001562F 488B3C25[00000000]              mov rdi, [stderr]       ; destination
 29401 00015637 48BE-                           mov rsi, fmt_undefined_free_var_2
 29401 00015639 [8019000000000000] 
 29402 00015641 B800000000                      mov rax, 0
 29403                                          ENTER
    44 00015646 C8000000            <1>  enter 0, 0
    45 0001564A 4883E4F0            <1>  and rsp, ~15
 29404 0001564E E8(00000000)                    call fprintf
 29405                                          LEAVE
    49 00015653 C9                  <1>  leave
 29406 00015654 48C7C0F6FFFFFF                  mov rax, -10
 29407 0001565B E8(00000000)                    call exit
 29408                                  
 29409                                  L_error_non_closure:
 29410 00015660 488B3C25[00000000]              mov rdi, qword [stderr]
 29411 00015668 48BE-                           mov rsi, fmt_non_closure
 29411 0001566A [371A000000000000] 
 29412 00015672 B800000000                      mov rax, 0
 29413                                          ENTER
    44 00015677 C8000000            <1>  enter 0, 0
    45 0001567B 4883E4F0            <1>  and rsp, ~15
 29414 0001567F E8(00000000)                    call fprintf
 29415                                          LEAVE
    49 00015684 C9                  <1>  leave
 29416 00015685 48C7C0FEFFFFFF                  mov rax, -2
 29417 0001568C E8(00000000)                    call exit
 29418                                  
 29419                                  L_error_improper_list:
 29420 00015691 488B3C25[00000000]      	mov rdi, qword [stderr]
 29421 00015699 48BE-                   	mov rsi, fmt_error_improper_list
 29421 0001569B [5F1A000000000000] 
 29422 000156A3 B800000000              	mov rax, 0
 29423                                          ENTER
    44 000156A8 C8000000            <1>  enter 0, 0
    45 000156AC 4883E4F0            <1>  and rsp, ~15
 29424 000156B0 E8(00000000)            	call fprintf
 29425                                          LEAVE
    49 000156B5 C9                  <1>  leave
 29426 000156B6 48C7C0F9FFFFFF          	mov rax, -7
 29427 000156BD E8(00000000)            	call exit
 29428                                  
 29429                                  L_error_incorrect_arity_simple:
 29430 000156C2 488B3C25[00000000]              mov rdi, qword [stderr]
 29431 000156CA 48BE-                           mov rsi, fmt_incorrect_arity_simple
 29431 000156CC [A219000000000000] 
 29432 000156D4 EB12                            jmp L_error_incorrect_arity_common
 29433                                  L_error_incorrect_arity_opt:
 29434 000156D6 488B3C25[00000000]              mov rdi, qword [stderr]
 29435 000156DE 48BE-                           mov rsi, fmt_incorrect_arity_opt
 29435 000156E0 [CD19000000000000] 
 29436                                  L_error_incorrect_arity_common:
 29437 000156E8 5A                              pop rdx
 29438 000156E9 59                              pop rcx
 29439 000156EA B800000000                      mov rax, 0
 29440                                          ENTER
    44 000156EF C8000000            <1>  enter 0, 0
    45 000156F3 4883E4F0            <1>  and rsp, ~15
 29441 000156F7 E8(00000000)                    call fprintf
 29442                                          LEAVE
    49 000156FC C9                  <1>  leave
 29443 000156FD 48C7C0FAFFFFFF                  mov rax, -6
 29444 00015704 E8(00000000)                    call exit
 29445                                  
 29446                                  section .data
 29447                                  fmt_undefined_free_var_1:
 29448 00001969 212121205468652066-             db `!!! The free variable \0`
 29448 00001972 726565207661726961-
 29448 0000197B 626C652000         
 29449                                  fmt_undefined_free_var_2:
 29450 00001980 207761732075736564-             db ` was used before it was defined.\n\0`
 29450 00001989 206265666F72652069-
 29450 00001992 742077617320646566-
 29450 0000199B 696E65642E0A00     
 29451                                  fmt_incorrect_arity_simple:
 29452 000019A2 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 29452 000019AB 74656420256C642061-
 29452 000019B4 7267756D656E74732C-
 29452 000019BD 206275742067697665-
 29452 000019C6 6E20256C640A00     
 29453                                  fmt_incorrect_arity_opt:
 29454 000019CD 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 29454 000019D6 746564206174206C65-
 29454 000019DF 61737420256C642061-
 29454 000019E8 7267756D656E74732C-
 29454 000019F1 206275742067697665-
 29454 000019FA 6E20256C640A00     
 29455                                  fmt_memory_usage:
 29456 00001A01 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 29456 00001A0A 20256C642062797465-
 29456 00001A13 73206F662064796E61-
 29456 00001A1C 6D6963616C6C792D61-
 29456 00001A25 6C6C6F636174656420-
 29456 00001A2E 6D656D6F72790A0A00 
 29457                                  fmt_non_closure:
 29458 00001A37 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 29458 00001A40 7074696E6720746F20-
 29458 00001A49 6170706C792061206E-
 29458 00001A52 6F6E2D636C6F737572-
 29458 00001A5B 65210A00           
 29459                                  fmt_error_improper_list:
 29460 00001A5F 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 29460 00001A68 7267756D656E742069-
 29460 00001A71 73206E6F7420612070-
 29460 00001A7A 726F706572206C6973-
 29460 00001A83 74210A00           
 29461                                  
 29462                                  section .bss
 29463                                  memory:
 29464 00000000 <res 40000000h>         	resb gbytes(1)
 29465                                  
 29466                                  section .data
 29467                                  top_of_memory:
 29468 00001A87 [0000000000000000]              dq memory
 29469                                  
 29470                                  section .text
 29471                                  malloc:
 29472 00015709 488B0425[871A0000]              mov rax, qword [top_of_memory]
 29473 00015711 48013C25[871A0000]              add qword [top_of_memory], rdi
 29474 00015719 C3                              ret
 29475                                  
 29476                                  L_code_ptr_break:
 29477 0001571A 48837C241000                    cmp qword [rsp + 8 * 2], 0
 29478 00015720 0F85001B0000                    jne L_error_arg_count_0
 29479 00015726 CC                              int3
 29480 00015727 48B8-                           mov rax, sob_void
 29480 00015729 [0000000000000000] 
 29481 00015731 C21000                          ret AND_KILL_FRAME(0)        
 29482                                  
 29483                                  L_code_ptr_frame:
 29484 00015734 C8000000                        enter 0, 0
 29485 00015738 48837D1800                      cmp COUNT, 0
 29486 0001573D 0F85E31A0000                    jne L_error_arg_count_0
 29487                                  
 29488 00015743 48BF-                           mov rdi, fmt_frame
 29488 00015745 [8F1A000000000000] 
 29489 0001574D 488B7500                        mov rsi, qword [rbp]    ; old rbp
 29490 00015751 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
 29491 00015755 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
 29492 00015759 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
 29493 0001575D 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
 29494 00015761 6A00                            push 0
 29495 00015763 4151                            push r9
 29496 00015765 4150                            push r8                   ; we'll use it when printing the params
 29497 00015767 B800000000                      mov rax, 0
 29498                                          
 29499                                          ENTER
    44 0001576C C8000000            <1>  enter 0, 0
    45 00015770 4883E4F0            <1>  and rsp, ~15
 29500 00015774 E8(00000000)                    call printf
 29501                                          LEAVE
    49 00015779 C9                  <1>  leave
 29502                                  
 29503                                  .L:
 29504 0001577A 488B0C24                        mov rcx, qword [rsp]
 29505 0001577E 4883F900                        cmp rcx, 0
 29506 00015782 7467                            je .L_out
 29507 00015784 48BF-                           mov rdi, fmt_frame_param_prefix
 29507 00015786 [C81A000000000000] 
 29508 0001578E 488B742410                      mov rsi, qword [rsp + 8*2]
 29509 00015793 B800000000                      mov rax, 0
 29510                                          
 29511                                          ENTER
    44 00015798 C8000000            <1>  enter 0, 0
    45 0001579C 4883E4F0            <1>  and rsp, ~15
 29512 000157A0 E8(00000000)                    call printf
 29513                                          LEAVE
    49 000157A5 C9                  <1>  leave
 29514                                  
 29515 000157A6 488B0C24                        mov rcx, qword [rsp]
 29516 000157AA 48FFC9                          dec rcx
 29517 000157AD 48890C24                        mov qword [rsp], rcx    ; dec arg count
 29518 000157B1 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
 29519 000157B6 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
 29520 000157BB 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
 29521 000157BF 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
 29522 000157C4 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
 29523 000157C7 E87B000000                      call print_sexpr
 29524 000157CC 48BF-                           mov rdi, fmt_newline
 29524 000157CE [F41A000000000000] 
 29525 000157D6 B800000000                      mov rax, 0
 29526                                          ENTER
    44 000157DB C8000000            <1>  enter 0, 0
    45 000157DF 4883E4F0            <1>  and rsp, ~15
 29527 000157E3 E8(00000000)                    call printf
 29528                                          LEAVE
    49 000157E8 C9                  <1>  leave
 29529 000157E9 EB8F                            jmp .L
 29530                                  .L_out:
 29531 000157EB 48BF-                           mov rdi, fmt_frame_continue
 29531 000157ED [D91A000000000000] 
 29532 000157F5 B800000000                      mov rax, 0
 29533                                          ENTER
    44 000157FA C8000000            <1>  enter 0, 0
    45 000157FE 4883E4F0            <1>  and rsp, ~15
 29534 00015802 E8(00000000)                    call printf
 29535 00015807 E8(00000000)                    call getchar
 29536                                          LEAVE
    49 0001580C C9                  <1>  leave
 29537                                          
 29538 0001580D 48B8-                           mov rax, sob_void
 29538 0001580F [0000000000000000] 
 29539 00015817 C9                              leave
 29540 00015818 C21000                          ret AND_KILL_FRAME(0)
 29541                                          
 29542                                  print_sexpr_if_not_void:
 29543 0001581B 4881FF[00000000]        	cmp rdi, sob_void
 29544 00015822 7422                    	je .done
 29545 00015824 E81E000000              	call print_sexpr
 29546 00015829 48BF-                   	mov rdi, fmt_newline
 29546 0001582B [F41A000000000000] 
 29547 00015833 B800000000              	mov rax, 0
 29548                                  	ENTER
    44 00015838 C8000000            <1>  enter 0, 0
    45 0001583C 4883E4F0            <1>  and rsp, ~15
 29549 00015840 E8(00000000)            	call printf
 29550                                  	LEAVE
    49 00015845 C9                  <1>  leave
 29551                                  .done:
 29552 00015846 C3                      	ret
 29553                                  
 29554                                  section .data
 29555                                  fmt_frame:
 29556 00001A8F 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
 29556 00001A98 207265742061646472-
 29556 00001AA1 203D2025703B206C65-
 29556 00001AAA 7820656E76203D2025-
 29556 00001AB3 703B20706172616D20-
 29556 00001ABC 636F756E74203D2025-
 29556 00001AC5 640A00             
 29557                                  fmt_frame_param_prefix:
 29558 00001AC8 3D3D5B706172616D20-             db `==[param %d]==> \0`
 29558 00001AD1 25645D3D3D3E2000   
 29559                                  fmt_frame_continue:
 29560 00001AD9 486974203C456E7465-             db `Hit <Enter> to continue...\0`
 29560 00001AE2 723E20746F20636F6E-
 29560 00001AEB 74696E75652E2E2E00 
 29561                                  fmt_newline:
 29562 00001AF4 0A00                    	db `\n\0`
 29563                                  fmt_void:
 29564 00001AF6 233C766F69643E00        	db `#<void>\0`
 29565                                  fmt_nil:
 29566 00001AFE 282900                  	db `()\0`
 29567                                  fmt_boolean_false:
 29568 00001B01 236600                  	db `#f\0`
 29569                                  fmt_boolean_true:
 29570 00001B04 237400                  	db `#t\0`
 29571                                  fmt_char_backslash:
 29572 00001B07 235C5C00                	db `#\\\\\0`
 29573                                  fmt_char_dquote:
 29574 00001B0B 235C2200                	db `#\\"\0`
 29575                                  fmt_char_simple:
 29576 00001B0F 235C256300              	db `#\\%c\0`
 29577                                  fmt_char_null:
 29578 00001B14 235C6E756C00            	db `#\\nul\0`
 29579                                  fmt_char_bell:
 29580 00001B1A 235C62656C6C00          	db `#\\bell\0`
 29581                                  fmt_char_backspace:
 29582 00001B21 235C6261636B737061-     	db `#\\backspace\0`
 29582 00001B2A 636500             
 29583                                  fmt_char_tab:
 29584 00001B2D 235C74616200            	db `#\\tab\0`
 29585                                  fmt_char_newline:
 29586 00001B33 235C6E65776C696E65-     	db `#\\newline\0`
 29586 00001B3C 00                 
 29587                                  fmt_char_formfeed:
 29588 00001B3D 235C7061676500          	db `#\\page\0`
 29589                                  fmt_char_return:
 29590 00001B44 235C72657475726E00      	db `#\\return\0`
 29591                                  fmt_char_escape:
 29592 00001B4D 235C65736300            	db `#\\esc\0`
 29593                                  fmt_char_space:
 29594 00001B53 235C737061636500        	db `#\\space\0`
 29595                                  fmt_char_hex:
 29596 00001B5B 235C782530325800        	db `#\\x%02X\0`
 29597                                  fmt_gensym:
 29598 00001B63 47256C6400                      db `G%ld\0`
 29599                                  fmt_closure:
 29600 00001B68 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 29600 00001B71 206174203078253038-
 29600 00001B7A 5820656E763D307825-
 29600 00001B83 30385820636F64653D-
 29600 00001B8C 3078253038583E00   
 29601                                  fmt_lparen:
 29602 00001B94 2800                    	db `(\0`
 29603                                  fmt_dotted_pair:
 29604 00001B96 202E2000                	db ` . \0`
 29605                                  fmt_rparen:
 29606 00001B9A 2900                    	db `)\0`
 29607                                  fmt_space:
 29608 00001B9C 2000                    	db ` \0`
 29609                                  fmt_empty_vector:
 29610 00001B9E 23282900                	db `#()\0`
 29611                                  fmt_vector:
 29612 00001BA2 232800                  	db `#(\0`
 29613                                  fmt_real:
 29614 00001BA5 256600                  	db `%f\0`
 29615                                  fmt_fraction:
 29616 00001BA8 256C642F256C6400        	db `%ld/%ld\0`
 29617                                  fmt_zero:
 29618 00001BB0 3000                    	db `0\0`
 29619                                  fmt_int:
 29620 00001BB2 256C6400                	db `%ld\0`
 29621                                  fmt_unknown_scheme_object_error:
 29622 00001BB6 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
 29622 00001BBF 6F723A20556E6B6E6F-
 29622 00001BC8 776E20536368656D65-
 29622 00001BD1 2D6F626A6563742028-
 29622 00001BDA 525454492030782530-
 29622 00001BE3 32582920           
 29623 00001BE7 617420616464726573-     	db `at address 0x%08X\n\n\0`
 29623 00001BF0 73203078253038580A-
 29623 00001BF9 0A00               
 29624                                  fmt_dquote:
 29625 00001BFB 2200                    	db `\"\0`
 29626                                  fmt_string_char:
 29627 00001BFD 256300                          db `%c\0`
 29628                                  fmt_string_char_7:
 29629 00001C00 5C6100                          db `\\a\0`
 29630                                  fmt_string_char_8:
 29631 00001C03 5C6200                          db `\\b\0`
 29632                                  fmt_string_char_9:
 29633 00001C06 5C7400                          db `\\t\0`
 29634                                  fmt_string_char_10:
 29635 00001C09 5C6E00                          db `\\n\0`
 29636                                  fmt_string_char_11:
 29637 00001C0C 5C7600                          db `\\v\0`
 29638                                  fmt_string_char_12:
 29639 00001C0F 5C6600                          db `\\f\0`
 29640                                  fmt_string_char_13:
 29641 00001C12 5C7200                          db `\\r\0`
 29642                                  fmt_string_char_34:
 29643 00001C15 5C2200                          db `\\"\0`
 29644                                  fmt_string_char_92:
 29645 00001C18 5C5C00                          db `\\\\\0`
 29646                                  fmt_string_char_hex:
 29647 00001C1B 5C7825583B00                    db `\\x%X;\0`
 29648                                  
 29649                                  section .text
 29650                                  
 29651                                  print_sexpr:
 29652 00015847 C8000000                	enter 0, 0
 29653 0001584B 8A07                    	mov al, byte [rdi]
 29654 0001584D 3C00                    	cmp al, T_void
 29655 0001584F 7465                    	je .Lvoid
 29656 00015851 3C01                    	cmp al, T_nil
 29657 00015853 7470                    	je .Lnil
 29658 00015855 3C09                    	cmp al, T_boolean_false
 29659 00015857 747B                    	je .Lboolean_false
 29660 00015859 3C0A                    	cmp al, T_boolean_true
 29661 0001585B 0F8482000000            	je .Lboolean_true
 29662 00015861 3C02                    	cmp al, T_char
 29663 00015863 0F8489000000            	je .Lchar
 29664 00015869 3C41                    	cmp al, T_interned_symbol
 29665 0001586B 0F84CB010000            	je .Linterned_symbol
 29666 00015871 3C42                            cmp al, T_uninterned_symbol
 29667 00015873 0F84EF010000                    je .Luninterned_symbol
 29668 00015879 3C21                    	cmp al, T_pair
 29669 0001587B 0F84FA010000            	je .Lpair
 29670 00015881 3C22                    	cmp al, T_vector
 29671 00015883 0F84C3020000            	je .Lvector
 29672 00015889 3C04                    	cmp al, T_closure
 29673 0001588B 0F8491010000            	je .Lclosure
 29674 00015891 3C13                    	cmp al, T_real
 29675 00015893 0F8454030000            	je .Lreal
 29676 00015899 3C12                    	cmp al, T_fraction
 29677 0001589B 0F847A030000            	je .Lfraction
 29678 000158A1 3C11                    	cmp al, T_integer
 29679 000158A3 0F84B3030000            	je .Linteger
 29680 000158A9 3C03                    	cmp al, T_string
 29681 000158AB 0F84BE030000            	je .Lstring
 29682                                  
 29683 000158B1 E9F6040000              	jmp .Lunknown_sexpr_type
 29684                                  
 29685                                  .Lvoid:
 29686 000158B6 48BF-                   	mov rdi, fmt_void
 29686 000158B8 [F61A000000000000] 
 29687 000158C0 E91A050000              	jmp .Lemit
 29688                                  
 29689                                  .Lnil:
 29690 000158C5 48BF-                   	mov rdi, fmt_nil
 29690 000158C7 [FE1A000000000000] 
 29691 000158CF E90B050000              	jmp .Lemit
 29692                                  
 29693                                  .Lboolean_false:
 29694 000158D4 48BF-                   	mov rdi, fmt_boolean_false
 29694 000158D6 [011B000000000000] 
 29695 000158DE E9FC040000              	jmp .Lemit
 29696                                  
 29697                                  .Lboolean_true:
 29698 000158E3 48BF-                   	mov rdi, fmt_boolean_true
 29698 000158E5 [041B000000000000] 
 29699 000158ED E9ED040000              	jmp .Lemit
 29700                                  
 29701                                  .Lchar:
 29702 000158F2 8A4701                  	mov al, byte [rdi + 1]
 29703 000158F5 3C20                    	cmp al, ' '
 29704 000158F7 7E28                    	jle .Lchar_whitespace
 29705 000158F9 3C5C                    	cmp al, 92 		; backslash
 29706 000158FB 0F847C000000            	je .Lchar_backslash
 29707 00015901 3C22                    	cmp al, '"'
 29708 00015903 0F8483000000            	je .Lchar_dquote
 29709 00015909 4825FF000000            	and rax, 255
 29710 0001590F 48BF-                   	mov rdi, fmt_char_simple
 29710 00015911 [0F1B000000000000] 
 29711 00015919 4889C6                  	mov rsi, rax
 29712 0001591C E9BE040000              	jmp .Lemit
 29713                                  
 29714                                  .Lchar_whitespace:
 29715 00015921 3C00                    	cmp al, 0
 29716 00015923 7476                    	je .Lchar_null
 29717 00015925 3C07                    	cmp al, 7
 29718 00015927 0F847D000000            	je .Lchar_bell
 29719 0001592D 3C08                    	cmp al, 8
 29720 0001592F 0F8484000000            	je .Lchar_backspace
 29721 00015935 3C09                    	cmp al, 9
 29722 00015937 0F848B000000            	je .Lchar_tab
 29723 0001593D 3C0A                    	cmp al, 10
 29724 0001593F 0F8492000000            	je .Lchar_newline
 29725 00015945 3C0C                    	cmp al, 12
 29726 00015947 0F8499000000            	je .Lchar_formfeed
 29727 0001594D 3C0D                    	cmp al, 13
 29728 0001594F 0F84A0000000            	je .Lchar_return
 29729 00015955 3C1B                    	cmp al, 27
 29730 00015957 0F84A7000000            	je .Lchar_escape
 29731 0001595D 4825FF000000            	and rax, 255
 29732 00015963 3C20                    	cmp al, ' '
 29733 00015965 0F84A8000000            	je .Lchar_space
 29734 0001596B 48BF-                   	mov rdi, fmt_char_hex
 29734 0001596D [5B1B000000000000] 
 29735 00015975 4889C6                  	mov rsi, rax
 29736 00015978 E962040000              	jmp .Lemit	
 29737                                  
 29738                                  .Lchar_backslash:
 29739 0001597D 48BF-                   	mov rdi, fmt_char_backslash
 29739 0001597F [071B000000000000] 
 29740 00015987 E953040000              	jmp .Lemit
 29741                                  
 29742                                  .Lchar_dquote:
 29743 0001598C 48BF-                   	mov rdi, fmt_char_dquote
 29743 0001598E [0B1B000000000000] 
 29744 00015996 E944040000              	jmp .Lemit
 29745                                  
 29746                                  .Lchar_null:
 29747 0001599B 48BF-                   	mov rdi, fmt_char_null
 29747 0001599D [141B000000000000] 
 29748 000159A5 E935040000              	jmp .Lemit
 29749                                  
 29750                                  .Lchar_bell:
 29751 000159AA 48BF-                   	mov rdi, fmt_char_bell
 29751 000159AC [1A1B000000000000] 
 29752 000159B4 E926040000              	jmp .Lemit
 29753                                  
 29754                                  .Lchar_backspace:
 29755 000159B9 48BF-                   	mov rdi, fmt_char_backspace
 29755 000159BB [211B000000000000] 
 29756 000159C3 E917040000              	jmp .Lemit
 29757                                  
 29758                                  .Lchar_tab:
 29759 000159C8 48BF-                   	mov rdi, fmt_char_tab
 29759 000159CA [2D1B000000000000] 
 29760 000159D2 E908040000              	jmp .Lemit
 29761                                  
 29762                                  .Lchar_newline:
 29763 000159D7 48BF-                   	mov rdi, fmt_char_newline
 29763 000159D9 [331B000000000000] 
 29764 000159E1 E9F9030000              	jmp .Lemit
 29765                                  
 29766                                  .Lchar_formfeed:
 29767 000159E6 48BF-                   	mov rdi, fmt_char_formfeed
 29767 000159E8 [3D1B000000000000] 
 29768 000159F0 E9EA030000              	jmp .Lemit
 29769                                  
 29770                                  .Lchar_return:
 29771 000159F5 48BF-                   	mov rdi, fmt_char_return
 29771 000159F7 [441B000000000000] 
 29772 000159FF E9DB030000              	jmp .Lemit
 29773                                  
 29774                                  .Lchar_escape:
 29775 00015A04 48BF-                   	mov rdi, fmt_char_escape
 29775 00015A06 [4D1B000000000000] 
 29776 00015A0E E9CC030000              	jmp .Lemit
 29777                                  
 29778                                  .Lchar_space:
 29779 00015A13 48BF-                   	mov rdi, fmt_char_space
 29779 00015A15 [531B000000000000] 
 29780 00015A1D E9BD030000              	jmp .Lemit
 29781                                  
 29782                                  .Lclosure:
 29783 00015A22 4889FE                  	mov rsi, qword rdi
 29784 00015A25 48BF-                   	mov rdi, fmt_closure
 29784 00015A27 [681B000000000000] 
 29785 00015A2F 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 29786 00015A33 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 29787 00015A37 E9A3030000              	jmp .Lemit
 29788                                  
 29789                                  .Linterned_symbol:
 29790 00015A3C 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 29791 00015A40 BE01000000              	mov rsi, 1		 ; size = 1 byte
 29792 00015A45 488B5701                	mov rdx, qword [rdi + 1] ; length
 29793 00015A49 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 29794 00015A4D 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 29795                                  	ENTER
    44 00015A55 C8000000            <1>  enter 0, 0
    45 00015A59 4883E4F0            <1>  and rsp, ~15
 29796 00015A5D E8(00000000)            	call fwrite
 29797                                  	LEAVE
    49 00015A62 C9                  <1>  leave
 29798 00015A63 E98C030000              	jmp .Lend
 29799                                  
 29800                                  .Luninterned_symbol:
 29801 00015A68 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
 29802 00015A6C 48BF-                           mov rdi, fmt_gensym
 29802 00015A6E [631B000000000000] 
 29803 00015A76 E964030000                      jmp .Lemit
 29804                                  	
 29805                                  .Lpair:
 29806 00015A7B 57                      	push rdi
 29807 00015A7C 48BF-                   	mov rdi, fmt_lparen
 29807 00015A7E [941B000000000000] 
 29808 00015A86 B800000000              	mov rax, 0
 29809                                          ENTER
    44 00015A8B C8000000            <1>  enter 0, 0
    45 00015A8F 4883E4F0            <1>  and rsp, ~15
 29810 00015A93 E8(00000000)            	call printf
 29811                                          LEAVE
    49 00015A98 C9                  <1>  leave
 29812 00015A99 488B3C24                	mov rdi, qword [rsp] 	; pair
 29813 00015A9D 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 29814 00015AA1 E8A1FDFFFF              	call print_sexpr
 29815 00015AA6 5F                      	pop rdi 		; pair
 29816 00015AA7 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 29817                                  .Lcdr:
 29818 00015AAB 8A07                    	mov al, byte [rdi]
 29819 00015AAD 3C01                    	cmp al, T_nil
 29820 00015AAF 7447                    	je .Lcdr_nil
 29821 00015AB1 3C21                    	cmp al, T_pair
 29822 00015AB3 7462                    	je .Lcdr_pair
 29823 00015AB5 57                      	push rdi
 29824 00015AB6 48BF-                   	mov rdi, fmt_dotted_pair
 29824 00015AB8 [961B000000000000] 
 29825 00015AC0 B800000000              	mov rax, 0
 29826                                          ENTER
    44 00015AC5 C8000000            <1>  enter 0, 0
    45 00015AC9 4883E4F0            <1>  and rsp, ~15
 29827 00015ACD E8(00000000)            	call printf
 29828                                          LEAVE
    49 00015AD2 C9                  <1>  leave
 29829 00015AD3 5F                      	pop rdi
 29830 00015AD4 E86EFDFFFF              	call print_sexpr
 29831 00015AD9 48BF-                   	mov rdi, fmt_rparen
 29831 00015ADB [9A1B000000000000] 
 29832 00015AE3 B800000000              	mov rax, 0
 29833                                          ENTER
    44 00015AE8 C8000000            <1>  enter 0, 0
    45 00015AEC 4883E4F0            <1>  and rsp, ~15
 29834 00015AF0 E8(00000000)            	call printf
 29835                                          LEAVE
    49 00015AF5 C9                  <1>  leave
 29836 00015AF6 C9                      	leave
 29837 00015AF7 C3                      	ret
 29838                                  
 29839                                  .Lcdr_nil:
 29840 00015AF8 48BF-                   	mov rdi, fmt_rparen
 29840 00015AFA [9A1B000000000000] 
 29841 00015B02 B800000000              	mov rax, 0
 29842                                          ENTER
    44 00015B07 C8000000            <1>  enter 0, 0
    45 00015B0B 4883E4F0            <1>  and rsp, ~15
 29843 00015B0F E8(00000000)            	call printf
 29844                                          LEAVE
    49 00015B14 C9                  <1>  leave
 29845 00015B15 C9                      	leave
 29846 00015B16 C3                      	ret
 29847                                  
 29848                                  .Lcdr_pair:
 29849 00015B17 57                      	push rdi
 29850 00015B18 48BF-                   	mov rdi, fmt_space
 29850 00015B1A [9C1B000000000000] 
 29851 00015B22 B800000000              	mov rax, 0
 29852                                          ENTER
    44 00015B27 C8000000            <1>  enter 0, 0
    45 00015B2B 4883E4F0            <1>  and rsp, ~15
 29853 00015B2F E8(00000000)            	call printf
 29854                                          LEAVE
    49 00015B34 C9                  <1>  leave
 29855 00015B35 488B3C24                	mov rdi, qword [rsp]
 29856 00015B39 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 29857 00015B3D E805FDFFFF              	call print_sexpr
 29858 00015B42 5F                      	pop rdi
 29859 00015B43 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 29860 00015B47 E95FFFFFFF              	jmp .Lcdr
 29861                                  
 29862                                  .Lvector:
 29863 00015B4C 488B4701                	mov rax, qword [rdi + 1] ; length
 29864 00015B50 4883F800                	cmp rax, 0
 29865 00015B54 0F8484000000            	je .Lvector_empty
 29866 00015B5A 57                      	push rdi
 29867 00015B5B 48BF-                   	mov rdi, fmt_vector
 29867 00015B5D [A21B000000000000] 
 29868 00015B65 B800000000              	mov rax, 0
 29869                                          ENTER
    44 00015B6A C8000000            <1>  enter 0, 0
    45 00015B6E 4883E4F0            <1>  and rsp, ~15
 29870 00015B72 E8(00000000)            	call printf
 29871                                          LEAVE
    49 00015B77 C9                  <1>  leave
 29872 00015B78 488B3C24                	mov rdi, qword [rsp]
 29873 00015B7C FF7701                  	push qword [rdi + 1]
 29874 00015B7F 6A01                    	push 1
 29875 00015B81 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 29876 00015B85 E8BDFCFFFF              	call print_sexpr
 29877                                  .Lvector_loop:
 29878                                  	; [rsp] index
 29879                                  	; [rsp + 8*1] limit
 29880                                  	; [rsp + 8*2] vector
 29881 00015B8A 488B0424                	mov rax, qword [rsp]
 29882 00015B8E 483B442408              	cmp rax, qword [rsp + 8*1]
 29883 00015B93 7436                    	je .Lvector_end
 29884 00015B95 48BF-                   	mov rdi, fmt_space
 29884 00015B97 [9C1B000000000000] 
 29885 00015B9F B800000000              	mov rax, 0
 29886                                          ENTER
    44 00015BA4 C8000000            <1>  enter 0, 0
    45 00015BA8 4883E4F0            <1>  and rsp, ~15
 29887 00015BAC E8(00000000)            	call printf
 29888                                          LEAVE
    49 00015BB1 C9                  <1>  leave
 29889 00015BB2 488B0424                	mov rax, qword [rsp]
 29890 00015BB6 488B5C2410              	mov rbx, qword [rsp + 8*2]
 29891 00015BBB 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 29892 00015BC0 E882FCFFFF              	call print_sexpr
 29893 00015BC5 48FF0424                	inc qword [rsp]
 29894 00015BC9 EBBF                    	jmp .Lvector_loop
 29895                                  
 29896                                  .Lvector_end:
 29897 00015BCB 4883C418                	add rsp, 8*3
 29898 00015BCF 48BF-                   	mov rdi, fmt_rparen
 29898 00015BD1 [9A1B000000000000] 
 29899 00015BD9 E901020000              	jmp .Lemit	
 29900                                  
 29901                                  .Lvector_empty:
 29902 00015BDE 48BF-                   	mov rdi, fmt_empty_vector
 29902 00015BE0 [9E1B000000000000] 
 29903 00015BE8 E9F2010000              	jmp .Lemit
 29904                                  
 29905                                  .Lreal:
 29906 00015BED FF7701                  	push qword [rdi + 1]
 29907 00015BF0 F20F100424              	movsd xmm0, qword [rsp]
 29908 00015BF5 4883C408                	add rsp, 8*1
 29909 00015BF9 48BF-                   	mov rdi, fmt_real
 29909 00015BFB [A51B000000000000] 
 29910 00015C03 B801000000              	mov rax, 1
 29911                                  	ENTER
    44 00015C08 C8000000            <1>  enter 0, 0
    45 00015C0C 4883E4F0            <1>  and rsp, ~15
 29912 00015C10 E8(00000000)            	call printf
 29913                                  	LEAVE
    49 00015C15 C9                  <1>  leave
 29914 00015C16 E9D9010000              	jmp .Lend
 29915                                  
 29916                                  .Lfraction:
 29917 00015C1B 488B7701                	mov rsi, qword [rdi + 1]
 29918 00015C1F 488B5709                	mov rdx, qword [rdi + 1 + 8]
 29919 00015C23 4883FE00                	cmp rsi, 0
 29920 00015C27 7415                    	je .Lrat_zero
 29921 00015C29 4883FA01                	cmp rdx, 1
 29922 00015C2D 741E                    	je .Lrat_int
 29923 00015C2F 48BF-                   	mov rdi, fmt_fraction
 29923 00015C31 [A81B000000000000] 
 29924 00015C39 E9A1010000              	jmp .Lemit
 29925                                  
 29926                                  .Lrat_zero:
 29927 00015C3E 48BF-                   	mov rdi, fmt_zero
 29927 00015C40 [B01B000000000000] 
 29928 00015C48 E992010000              	jmp .Lemit
 29929                                  
 29930                                  .Lrat_int:
 29931 00015C4D 48BF-                   	mov rdi, fmt_int
 29931 00015C4F [B21B000000000000] 
 29932 00015C57 E983010000              	jmp .Lemit
 29933                                  
 29934                                  .Linteger:
 29935 00015C5C 488B7701                	mov rsi, qword [rdi + 1]
 29936 00015C60 48BF-                   	mov rdi, fmt_int
 29936 00015C62 [B21B000000000000] 
 29937 00015C6A E970010000              	jmp .Lemit
 29938                                  
 29939                                  .Lstring:
 29940 00015C6F 488D4709                	lea rax, [rdi + 1 + 8]
 29941 00015C73 50                      	push rax
 29942 00015C74 FF7701                  	push qword [rdi + 1]
 29943 00015C77 48BF-                   	mov rdi, fmt_dquote
 29943 00015C79 [FB1B000000000000] 
 29944 00015C81 B800000000              	mov rax, 0
 29945                                  	ENTER
    44 00015C86 C8000000            <1>  enter 0, 0
    45 00015C8A 4883E4F0            <1>  and rsp, ~15
 29946 00015C8E E8(00000000)            	call printf
 29947                                  	LEAVE
    49 00015C93 C9                  <1>  leave
 29948                                  .Lstring_loop:
 29949                                  	; qword [rsp]: limit
 29950                                  	; qword [rsp + 8*1]: char *
 29951 00015C94 48833C2400              	cmp qword [rsp], 0
 29952 00015C99 0F84FD000000            	je .Lstring_end
 29953 00015C9F 488B442408              	mov rax, qword [rsp + 8*1]
 29954 00015CA4 8A00                    	mov al, byte [rax]
 29955 00015CA6 4825FF000000            	and rax, 255
 29956 00015CAC 3C07                    	cmp al, 7
 29957 00015CAE 7468                            je .Lstring_char_7
 29958 00015CB0 3C08                            cmp al, 8
 29959 00015CB2 7470                            je .Lstring_char_8
 29960 00015CB4 3C09                            cmp al, 9
 29961 00015CB6 7478                            je .Lstring_char_9
 29962 00015CB8 3C0A                            cmp al, 10
 29963 00015CBA 0F847C000000                    je .Lstring_char_10
 29964 00015CC0 3C0B                            cmp al, 11
 29965 00015CC2 0F8480000000                    je .Lstring_char_11
 29966 00015CC8 3C0C                            cmp al, 12
 29967 00015CCA 0F8484000000                    je .Lstring_char_12
 29968 00015CD0 3C0D                            cmp al, 13
 29969 00015CD2 0F8488000000                    je .Lstring_char_13
 29970 00015CD8 3C22                            cmp al, 34
 29971 00015CDA 0F848C000000                    je .Lstring_char_34
 29972 00015CE0 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 29974 00015CE2 3C20                            cmp al, ' '
 29975 00015CE4 0F8CA0000000                    jl .Lstring_char_hex
 29976 00015CEA 48BF-                           mov rdi, fmt_string_char
 29976 00015CEC [FD1B000000000000] 
 29977 00015CF4 4889C6                          mov rsi, rax
 29978                                  .Lstring_char_emit:
 29979 00015CF7 B800000000                      mov rax, 0
 29980                                          ENTER
    44 00015CFC C8000000            <1>  enter 0, 0
    45 00015D00 4883E4F0            <1>  and rsp, ~15
 29981 00015D04 E8(00000000)                    call printf
 29982                                          LEAVE
    49 00015D09 C9                  <1>  leave
 29983 00015D0A 48FF0C24                        dec qword [rsp]
 29984 00015D0E 48FF442408                      inc qword [rsp + 8*1]
 29985 00015D13 E97CFFFFFF                      jmp .Lstring_loop
 29986                                  
 29987                                  .Lstring_char_7:
 29988 00015D18 48BF-                           mov rdi, fmt_string_char_7
 29988 00015D1A [001C000000000000] 
 29989 00015D22 EBD3                            jmp .Lstring_char_emit
 29990                                  
 29991                                  .Lstring_char_8:
 29992 00015D24 48BF-                           mov rdi, fmt_string_char_8
 29992 00015D26 [031C000000000000] 
 29993 00015D2E EBC7                            jmp .Lstring_char_emit
 29994                                          
 29995                                  .Lstring_char_9:
 29996 00015D30 48BF-                           mov rdi, fmt_string_char_9
 29996 00015D32 [061C000000000000] 
 29997 00015D3A EBBB                            jmp .Lstring_char_emit
 29998                                  
 29999                                  .Lstring_char_10:
 30000 00015D3C 48BF-                           mov rdi, fmt_string_char_10
 30000 00015D3E [091C000000000000] 
 30001 00015D46 EBAF                            jmp .Lstring_char_emit
 30002                                  
 30003                                  .Lstring_char_11:
 30004 00015D48 48BF-                           mov rdi, fmt_string_char_11
 30004 00015D4A [0C1C000000000000] 
 30005 00015D52 EBA3                            jmp .Lstring_char_emit
 30006                                  
 30007                                  .Lstring_char_12:
 30008 00015D54 48BF-                           mov rdi, fmt_string_char_12
 30008 00015D56 [0F1C000000000000] 
 30009 00015D5E EB97                            jmp .Lstring_char_emit
 30010                                  
 30011                                  .Lstring_char_13:
 30012 00015D60 48BF-                           mov rdi, fmt_string_char_13
 30012 00015D62 [121C000000000000] 
 30013 00015D6A EB8B                            jmp .Lstring_char_emit
 30014                                  
 30015                                  .Lstring_char_34:
 30016 00015D6C 48BF-                           mov rdi, fmt_string_char_34
 30016 00015D6E [151C000000000000] 
 30017 00015D76 E97CFFFFFF                      jmp .Lstring_char_emit
 30018                                  
 30019                                  .Lstring_char_92:
 30020 00015D7B 48BF-                           mov rdi, fmt_string_char_92
 30020 00015D7D [181C000000000000] 
 30021 00015D85 E96DFFFFFF                      jmp .Lstring_char_emit
 30022                                  
 30023                                  .Lstring_char_hex:
 30024 00015D8A 48BF-                           mov rdi, fmt_string_char_hex
 30024 00015D8C [1B1C000000000000] 
 30025 00015D94 4889C6                          mov rsi, rax
 30026 00015D97 E95BFFFFFF                      jmp .Lstring_char_emit        
 30027                                  
 30028                                  .Lstring_end:
 30029 00015D9C 4883C410                	add rsp, 8 * 2
 30030 00015DA0 48BF-                   	mov rdi, fmt_dquote
 30030 00015DA2 [FB1B000000000000] 
 30031 00015DAA EB33                    	jmp .Lemit
 30032                                  
 30033                                  .Lunknown_sexpr_type:
 30034 00015DAC 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
 30034 00015DAE [B61B000000000000] 
 30035 00015DB6 4825FF000000            	and rax, 255
 30036 00015DBC 4889C2                  	mov rdx, rax
 30037 00015DBF 4889F9                  	mov rcx, rdi
 30038 00015DC2 488B3C25[00000000]      	mov rdi, qword [stderr]
 30039 00015DCA B800000000              	mov rax, 0
 30040                                          ENTER
    44 00015DCF C8000000            <1>  enter 0, 0
    45 00015DD3 4883E4F0            <1>  and rsp, ~15
 30041 00015DD7 E8(00000000)            	call fprintf
 30042                                          LEAVE
    49 00015DDC C9                  <1>  leave
 30043 00015DDD C9                              leave
 30044 00015DDE C3                              ret
 30045                                  
 30046                                  .Lemit:
 30047 00015DDF B800000000              	mov rax, 0
 30048                                          ENTER
    44 00015DE4 C8000000            <1>  enter 0, 0
    45 00015DE8 4883E4F0            <1>  and rsp, ~15
 30049 00015DEC E8(00000000)            	call printf
 30050                                          LEAVE
    49 00015DF1 C9                  <1>  leave
 30051 00015DF2 EB00                    	jmp .Lend
 30052                                  
 30053                                  .Lend:
 30054                                  	LEAVE
    49 00015DF4 C9                  <1>  leave
 30055 00015DF5 C3                      	ret
 30056                                  
 30057                                  ;;; rdi: address of free variable
 30058                                  ;;; rsi: address of code-pointer
 30059                                  bind_primitive:
 30060 00015DF6 C8000000                        enter 0, 0
 30061 00015DFA 57                              push rdi
 30062 00015DFB BF11000000                      mov rdi, (1 + 8 + 8)
 30063 00015E00 E804F9FFFF                      call malloc
 30064 00015E05 5F                              pop rdi
 30065 00015E06 C60004                          mov byte [rax], T_closure
 30066 00015E09 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 30067 00015E11 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 30068 00015E15 488907                          mov qword [rdi], rax
 30069 00015E18 48B8-                           mov rax, sob_void
 30069 00015E1A [0000000000000000] 
 30070 00015E22 C9                              leave
 30071 00015E23 C3                              ret
 30072                                  
 30073                                  L_code_ptr_ash:
 30074 00015E24 C8000000                        enter 0, 0
 30075 00015E28 48837D1802                      cmp COUNT, 2
 30076 00015E2D 0F855D140000                    jne L_error_arg_count_2
 30077 00015E33 488B7D20                        mov rdi, PARAM(0)
 30078                                          assert_integer(rdi)
    53 00015E37 803F11              <1>  cmp byte [%1], %2
    54 00015E3A 0F85EF140000        <1>  jne L_error_incorrect_type
 30079 00015E40 488B4D28                        mov rcx, PARAM(1)
 30080                                          assert_integer(rcx)
    53 00015E44 803911              <1>  cmp byte [%1], %2
    54 00015E47 0F85E2140000        <1>  jne L_error_incorrect_type
 30081 00015E4D 488B7F01                        mov rdi, qword [rdi + 1]
 30082 00015E51 488B4901                        mov rcx, qword [rcx + 1]
 30083 00015E55 4883F900                        cmp rcx, 0
 30084 00015E59 7C0F                            jl .L_negative
 30085                                  .L_loop_positive:
 30086 00015E5B 4883F900                        cmp rcx, 0
 30087 00015E5F 741B                            je .L_exit
 30088 00015E61 48D3E7                          sal rdi, cl
 30089 00015E64 48C1E908                        shr rcx, 8
 30090 00015E68 EBF1                            jmp .L_loop_positive
 30091                                  .L_negative:
 30092 00015E6A 48F7D9                          neg rcx
 30093                                  .L_loop_negative:
 30094 00015E6D 4883F900                        cmp rcx, 0
 30095 00015E71 7409                            je .L_exit
 30096 00015E73 48D3FF                          sar rdi, cl
 30097 00015E76 48C1E908                        shr rcx, 8
 30098 00015E7A EBF1                            jmp .L_loop_negative
 30099                                  .L_exit:
 30100 00015E7C E85A130000                      call make_integer
 30101 00015E81 C9                              leave
 30102 00015E82 C22000                          ret AND_KILL_FRAME(2)
 30103                                  
 30104                                  L_code_ptr_logand:
 30105 00015E85 C8000000                        enter 0, 0
 30106 00015E89 48837D1802                      cmp COUNT, 2
 30107 00015E8E 0F85FC130000                    jne L_error_arg_count_2
 30108 00015E94 4C8B4520                        mov r8, PARAM(0)
 30109                                          assert_integer(r8)
    53 00015E98 41803811            <1>  cmp byte [%1], %2
    54 00015E9C 0F858D140000        <1>  jne L_error_incorrect_type
 30110 00015EA2 4C8B4D28                        mov r9, PARAM(1)
 30111                                          assert_integer(r9)
    53 00015EA6 41803911            <1>  cmp byte [%1], %2
    54 00015EAA 0F857F140000        <1>  jne L_error_incorrect_type
 30112 00015EB0 498B7801                        mov rdi, qword [r8 + 1]
 30113 00015EB4 49237901                        and rdi, qword [r9 + 1]
 30114 00015EB8 E81E130000                      call make_integer
 30115 00015EBD C9                              leave
 30116 00015EBE C22000                          ret AND_KILL_FRAME(2)
 30117                                  
 30118                                  L_code_ptr_logor:
 30119 00015EC1 C8000000                        enter 0, 0
 30120 00015EC5 48837D1802                      cmp COUNT, 2
 30121 00015ECA 0F85C0130000                    jne L_error_arg_count_2
 30122 00015ED0 4C8B4520                        mov r8, PARAM(0)
 30123                                          assert_integer(r8)
    53 00015ED4 41803811            <1>  cmp byte [%1], %2
    54 00015ED8 0F8551140000        <1>  jne L_error_incorrect_type
 30124 00015EDE 4C8B4D28                        mov r9, PARAM(1)
 30125                                          assert_integer(r9)
    53 00015EE2 41803911            <1>  cmp byte [%1], %2
    54 00015EE6 0F8543140000        <1>  jne L_error_incorrect_type
 30126 00015EEC 498B7801                        mov rdi, qword [r8 + 1]
 30127 00015EF0 490B7901                        or rdi, qword [r9 + 1]
 30128 00015EF4 E8E2120000                      call make_integer
 30129 00015EF9 C9                              leave
 30130 00015EFA C22000                          ret AND_KILL_FRAME(2)
 30131                                  
 30132                                  L_code_ptr_logxor:
 30133 00015EFD C8000000                        enter 0, 0
 30134 00015F01 48837D1802                      cmp COUNT, 2
 30135 00015F06 0F8584130000                    jne L_error_arg_count_2
 30136 00015F0C 4C8B4520                        mov r8, PARAM(0)
 30137                                          assert_integer(r8)
    53 00015F10 41803811            <1>  cmp byte [%1], %2
    54 00015F14 0F8515140000        <1>  jne L_error_incorrect_type
 30138 00015F1A 4C8B4D28                        mov r9, PARAM(1)
 30139                                          assert_integer(r9)
    53 00015F1E 41803911            <1>  cmp byte [%1], %2
    54 00015F22 0F8507140000        <1>  jne L_error_incorrect_type
 30140 00015F28 498B7801                        mov rdi, qword [r8 + 1]
 30141 00015F2C 49337901                        xor rdi, qword [r9 + 1]
 30142 00015F30 E8A6120000                      call make_integer
 30143                                          LEAVE
    49 00015F35 C9                  <1>  leave
 30144 00015F36 C22000                          ret AND_KILL_FRAME(2)
 30145                                  
 30146                                  L_code_ptr_lognot:
 30147 00015F39 C8000000                        enter 0, 0
 30148 00015F3D 48837D1801                      cmp COUNT, 1
 30149 00015F42 0F8513130000                    jne L_error_arg_count_1
 30150 00015F48 4C8B4520                        mov r8, PARAM(0)
 30151                                          assert_integer(r8)
    53 00015F4C 41803811            <1>  cmp byte [%1], %2
    54 00015F50 0F85D9130000        <1>  jne L_error_incorrect_type
 30152 00015F56 498B7801                        mov rdi, qword [r8 + 1]
 30153 00015F5A 48F7D7                          not rdi
 30154 00015F5D E879120000                      call make_integer
 30155 00015F62 C9                              leave
 30156 00015F63 C21800                          ret AND_KILL_FRAME(1)
 30157                                  
 30158                                  L_code_ptr_bin_apply:
 30159 00015F66 48837C241002                    cmp qword [rsp + 8 * 2], 2
 30160 00015F6C 0F851E130000                    jne L_error_arg_count_2
 30161 00015F72 4C8B642418                      mov r12, qword [rsp + 8 * 3]
 30162                                          assert_closure(r12)
    53 00015F77 41803C2404          <1>  cmp byte [%1], %2
    54 00015F7C 0F85AD130000        <1>  jne L_error_incorrect_type
 30163 00015F82 4C8D542420                      lea r10, [rsp + 8 * 4]
 30164 00015F87 4D8B1A                          mov r11, qword [r10]
 30165 00015F8A 4C8B0C24                        mov r9, qword [rsp]
 30166 00015F8E B900000000                      mov rcx, 0
 30167 00015F93 4C89DE                          mov rsi, r11
 30168                                  .L0:
 30169 00015F96 4881FE[01000000]                cmp rsi, sob_nil
 30170 00015F9D 7412                            je .L0_out
 30171                                          assert_pair(rsi)
    53 00015F9F 803E21              <1>  cmp byte [%1], %2
    54 00015FA2 0F8587130000        <1>  jne L_error_incorrect_type
 30172 00015FA8 48FFC1                          inc rcx
 30173 00015FAB 488B7609                        mov rsi, SOB_PAIR_CDR(rsi)
 30174 00015FAF EBE5                            jmp .L0
 30175                                  .L0_out:
 30176 00015FB1 488D1CCDF0FFFFFF                lea rbx, [8 * (rcx - 2)]
 30177 00015FB9 4829DC                          sub rsp, rbx
 30178 00015FBC 4889E7                          mov rdi, rsp
 30179 00015FBF FC                              cld
 30180                                          ; place ret addr
 30181 00015FC0 4C89C8                          mov rax, r9
 30182 00015FC3 48AB                            stosq
 30183                                          ; place env_f
 30184 00015FC5 498B442401                      mov rax, SOB_CLOSURE_ENV(r12)
 30185 00015FCA 48AB                            stosq
 30186                                          ; place COUNT = rcx
 30187 00015FCC 4889C8                          mov rax, rcx
 30188 00015FCF 48AB                            stosq
 30189                                  .L1:
 30190 00015FD1 4883F900                        cmp rcx, 0
 30191 00015FD5 740F                            je .L1_out
 30192 00015FD7 498B4301                        mov rax, SOB_PAIR_CAR(r11)
 30193 00015FDB 48AB                            stosq
 30194 00015FDD 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11)
 30195 00015FE1 48FFC9                          dec rcx
 30196 00015FE4 EBEB                            jmp .L1
 30197                                  .L1_out:
 30198 00015FE6 4883EF08                        sub rdi, 8*1
 30199 00015FEA 4939FA                          cmp r10, rdi
 30200 00015FED 7505                            jne .L_error_apply_stack_corrupted
 30201 00015FEF 41FF642409                      jmp SOB_CLOSURE_CODE(r12)
 30202                                  .L_error_apply_stack_corrupted:
 30203 00015FF4 CC                              int3
 30204                                  
 30205                                  L_code_ptr_is_null:
 30206 00015FF5 C8000000                        enter 0, 0
 30207 00015FF9 48837D1801                      cmp COUNT, 1
 30208 00015FFE 0F8557120000                    jne L_error_arg_count_1
 30209 00016004 488B4520                        mov rax, PARAM(0)
 30210 00016008 803801                          cmp byte [rax], T_nil
 30211 0001600B 750C                            jne .L_false
 30212 0001600D 48B8-                           mov rax, sob_boolean_true
 30212 0001600F [0300000000000000] 
 30213 00016017 EB0A                            jmp .L_end
 30214                                  .L_false:
 30215 00016019 48B8-                           mov rax, sob_boolean_false
 30215 0001601B [0200000000000000] 
 30216                                  .L_end:
 30217 00016023 C9                              leave
 30218 00016024 C21800                          ret AND_KILL_FRAME(1)
 30219                                  
 30220                                  L_code_ptr_is_pair:
 30221 00016027 C8000000                        enter 0, 0
 30222 0001602B 48837D1801                      cmp COUNT, 1
 30223 00016030 0F8525120000                    jne L_error_arg_count_1
 30224 00016036 488B4520                        mov rax, PARAM(0)
 30225 0001603A 803821                          cmp byte [rax], T_pair
 30226 0001603D 750C                            jne .L_false
 30227 0001603F 48B8-                           mov rax, sob_boolean_true
 30227 00016041 [0300000000000000] 
 30228 00016049 EB0A                            jmp .L_end
 30229                                  .L_false:
 30230 0001604B 48B8-                           mov rax, sob_boolean_false
 30230 0001604D [0200000000000000] 
 30231                                  .L_end:
 30232 00016055 C9                              leave
 30233 00016056 C21800                          ret AND_KILL_FRAME(1)
 30234                                          
 30235                                  L_code_ptr_is_void:
 30236 00016059 C8000000                        enter 0, 0
 30237 0001605D 48837D1801                      cmp COUNT, 1
 30238 00016062 0F85F3110000                    jne L_error_arg_count_1
 30239 00016068 488B4520                        mov rax, PARAM(0)
 30240 0001606C 803800                          cmp byte [rax], T_void
 30241 0001606F 750C                            jne .L_false
 30242 00016071 48B8-                           mov rax, sob_boolean_true
 30242 00016073 [0300000000000000] 
 30243 0001607B EB0A                            jmp .L_end
 30244                                  .L_false:
 30245 0001607D 48B8-                           mov rax, sob_boolean_false
 30245 0001607F [0200000000000000] 
 30246                                  .L_end:
 30247 00016087 C9                              leave
 30248 00016088 C21800                          ret AND_KILL_FRAME(1)
 30249                                  
 30250                                  L_code_ptr_is_char:
 30251 0001608B C8000000                        enter 0, 0
 30252 0001608F 48837D1801                      cmp COUNT, 1
 30253 00016094 0F85C1110000                    jne L_error_arg_count_1
 30254 0001609A 488B4520                        mov rax, PARAM(0)
 30255 0001609E 803802                          cmp byte [rax], T_char
 30256 000160A1 750C                            jne .L_false
 30257 000160A3 48B8-                           mov rax, sob_boolean_true
 30257 000160A5 [0300000000000000] 
 30258 000160AD EB0A                            jmp .L_end
 30259                                  .L_false:
 30260 000160AF 48B8-                           mov rax, sob_boolean_false
 30260 000160B1 [0200000000000000] 
 30261                                  .L_end:
 30262 000160B9 C9                              leave
 30263 000160BA C21800                          ret AND_KILL_FRAME(1)
 30264                                  
 30265                                  L_code_ptr_is_string:
 30266 000160BD C8000000                        enter 0, 0
 30267 000160C1 48837D1801                      cmp COUNT, 1
 30268 000160C6 0F858F110000                    jne L_error_arg_count_1
 30269 000160CC 488B4520                        mov rax, PARAM(0)
 30270 000160D0 803803                          cmp byte [rax], T_string
 30271 000160D3 750C                            jne .L_false
 30272 000160D5 48B8-                           mov rax, sob_boolean_true
 30272 000160D7 [0300000000000000] 
 30273 000160DF EB0A                            jmp .L_end
 30274                                  .L_false:
 30275 000160E1 48B8-                           mov rax, sob_boolean_false
 30275 000160E3 [0200000000000000] 
 30276                                  .L_end:
 30277 000160EB C9                              leave
 30278 000160EC C21800                          ret AND_KILL_FRAME(1)
 30279                                  
 30280                                  L_code_ptr_is_symbol:
 30281 000160EF C8000000                        enter 0, 0
 30282 000160F3 48837D1801                      cmp COUNT, 1
 30283 000160F8 0F855D110000                    jne L_error_arg_count_1
 30284 000160FE 4C8B4520                        mov r8, PARAM(0)
 30285 00016102 41802040                        and byte [r8], T_symbol
 30286 00016106 740C                            jz .L_false
 30287 00016108 48B8-                           mov rax, sob_boolean_true
 30287 0001610A [0300000000000000] 
 30288 00016112 EB0A                            jmp .L_exit
 30289                                  .L_false:
 30290 00016114 48B8-                           mov rax, sob_boolean_false
 30290 00016116 [0200000000000000] 
 30291                                  .L_exit:
 30292 0001611E C9                              leave
 30293 0001611F C21800                          ret AND_KILL_FRAME(1)
 30294                                  
 30295                                  L_code_ptr_is_uninterned_symbol:
 30296 00016122 C8000000                        enter 0, 0
 30297 00016126 48837D1801                      cmp COUNT, 1
 30298 0001612B 0F852A110000                    jne L_error_arg_count_1
 30299 00016131 4C8B4520                        mov r8, PARAM(0)
 30300 00016135 41803842                        cmp byte [r8], T_uninterned_symbol
 30301 00016139 750C                            jne .L_false
 30302 0001613B 48B8-                           mov rax, sob_boolean_true
 30302 0001613D [0300000000000000] 
 30303 00016145 EB0A                            jmp .L_exit
 30304                                  .L_false:
 30305 00016147 48B8-                           mov rax, sob_boolean_false
 30305 00016149 [0200000000000000] 
 30306                                  .L_exit:
 30307 00016151 C9                              leave
 30308 00016152 C21800                          ret AND_KILL_FRAME(1)
 30309                                  
 30310                                  L_code_ptr_is_interned_symbol:
 30311 00016155 C8000000                        enter 0, 0
 30312 00016159 48837D1801                      cmp COUNT, 1
 30313 0001615E 0F85F7100000                    jne L_error_arg_count_1
 30314 00016164 488B4520                        mov rax, PARAM(0)
 30315 00016168 803841                          cmp byte [rax], T_interned_symbol
 30316 0001616B 750C                            jne .L_false
 30317 0001616D 48B8-                           mov rax, sob_boolean_true
 30317 0001616F [0300000000000000] 
 30318 00016177 EB0A                            jmp .L_end
 30319                                  .L_false:
 30320 00016179 48B8-                           mov rax, sob_boolean_false
 30320 0001617B [0200000000000000] 
 30321                                  .L_end:
 30322 00016183 C9                              leave
 30323 00016184 C21800                          ret AND_KILL_FRAME(1)
 30324                                  
 30325                                  L_code_ptr_gensym:
 30326 00016187 C8000000                        enter 0, 0
 30327 0001618B 48837D1800                      cmp COUNT, 0
 30328 00016190 0F8590100000                    jne L_error_arg_count_0
 30329 00016196 48FF0425[211C0000]              inc qword [gensym_count]
 30330 0001619E BF09000000                      mov rdi, (1 + 8)
 30331 000161A3 E861F5FFFF                      call malloc
 30332 000161A8 C60042                          mov byte [rax], T_uninterned_symbol
 30333 000161AB 488B0C25[211C0000]              mov rcx, qword [gensym_count]
 30334 000161B3 48894801                        mov qword [rax + 1], rcx
 30335 000161B7 C9                              leave
 30336 000161B8 C21000                          ret AND_KILL_FRAME(0)
 30337                                  
 30338                                  L_code_ptr_is_vector:
 30339 000161BB C8000000                        enter 0, 0
 30340 000161BF 48837D1801                      cmp COUNT, 1
 30341 000161C4 0F8591100000                    jne L_error_arg_count_1
 30342 000161CA 488B4520                        mov rax, PARAM(0)
 30343 000161CE 803822                          cmp byte [rax], T_vector
 30344 000161D1 750C                            jne .L_false
 30345 000161D3 48B8-                           mov rax, sob_boolean_true
 30345 000161D5 [0300000000000000] 
 30346 000161DD EB0A                            jmp .L_end
 30347                                  .L_false:
 30348 000161DF 48B8-                           mov rax, sob_boolean_false
 30348 000161E1 [0200000000000000] 
 30349                                  .L_end:
 30350 000161E9 C9                              leave
 30351 000161EA C21800                          ret AND_KILL_FRAME(1)
 30352                                  
 30353                                  L_code_ptr_is_closure:
 30354 000161ED C8000000                        enter 0, 0
 30355 000161F1 48837D1801                      cmp COUNT, 1
 30356 000161F6 0F855F100000                    jne L_error_arg_count_1
 30357 000161FC 488B4520                        mov rax, PARAM(0)
 30358 00016200 803804                          cmp byte [rax], T_closure
 30359 00016203 750C                            jne .L_false
 30360 00016205 48B8-                           mov rax, sob_boolean_true
 30360 00016207 [0300000000000000] 
 30361 0001620F EB0A                            jmp .L_end
 30362                                  .L_false:
 30363 00016211 48B8-                           mov rax, sob_boolean_false
 30363 00016213 [0200000000000000] 
 30364                                  .L_end:
 30365 0001621B C9                              leave
 30366 0001621C C21800                          ret AND_KILL_FRAME(1)
 30367                                  
 30368                                  L_code_ptr_is_real:
 30369 0001621F C8000000                        enter 0, 0
 30370 00016223 48837D1801                      cmp COUNT, 1
 30371 00016228 0F852D100000                    jne L_error_arg_count_1
 30372 0001622E 488B4520                        mov rax, PARAM(0)
 30373 00016232 803813                          cmp byte [rax], T_real
 30374 00016235 750C                            jne .L_false
 30375 00016237 48B8-                           mov rax, sob_boolean_true
 30375 00016239 [0300000000000000] 
 30376 00016241 EB0A                            jmp .L_end
 30377                                  .L_false:
 30378 00016243 48B8-                           mov rax, sob_boolean_false
 30378 00016245 [0200000000000000] 
 30379                                  .L_end:
 30380 0001624D C9                              leave
 30381 0001624E C21800                          ret AND_KILL_FRAME(1)
 30382                                  
 30383                                  L_code_ptr_is_fraction:
 30384 00016251 C8000000                        enter 0, 0
 30385 00016255 48837D1801                      cmp COUNT, 1
 30386 0001625A 0F85FB0F0000                    jne L_error_arg_count_1
 30387 00016260 488B4520                        mov rax, PARAM(0)
 30388 00016264 803812                          cmp byte [rax], T_fraction
 30389 00016267 750C                            jne .L_false
 30390 00016269 48B8-                           mov rax, sob_boolean_true
 30390 0001626B [0300000000000000] 
 30391 00016273 EB0A                            jmp .L_end
 30392                                  .L_false:
 30393 00016275 48B8-                           mov rax, sob_boolean_false
 30393 00016277 [0200000000000000] 
 30394                                  .L_end:
 30395 0001627F C9                              leave
 30396 00016280 C21800                          ret AND_KILL_FRAME(1)
 30397                                  
 30398                                  L_code_ptr_is_boolean:
 30399 00016283 C8000000                        enter 0, 0
 30400 00016287 48837D1801                      cmp COUNT, 1
 30401 0001628C 0F85C90F0000                    jne L_error_arg_count_1
 30402 00016292 488B4520                        mov rax, PARAM(0)
 30403 00016296 8A18                            mov bl, byte [rax]
 30404 00016298 80E308                          and bl, T_boolean
 30405 0001629B 740C                            je .L_false
 30406 0001629D 48B8-                           mov rax, sob_boolean_true
 30406 0001629F [0300000000000000] 
 30407 000162A7 EB0A                            jmp .L_end
 30408                                  .L_false:
 30409 000162A9 48B8-                           mov rax, sob_boolean_false
 30409 000162AB [0200000000000000] 
 30410                                  .L_end:
 30411 000162B3 C9                              leave
 30412 000162B4 C21800                          ret AND_KILL_FRAME(1)
 30413                                          
 30414                                  L_code_ptr_is_boolean_false:
 30415 000162B7 C8000000                        enter 0, 0
 30416 000162BB 48837D1801                      cmp COUNT, 1
 30417 000162C0 0F85950F0000                    jne L_error_arg_count_1
 30418 000162C6 488B4520                        mov rax, PARAM(0)
 30419 000162CA 8A18                            mov bl, byte [rax]
 30420 000162CC 80FB09                          cmp bl, T_boolean_false
 30421 000162CF 750C                            jne .L_false
 30422 000162D1 48B8-                           mov rax, sob_boolean_true
 30422 000162D3 [0300000000000000] 
 30423 000162DB EB0A                            jmp .L_end
 30424                                  .L_false:
 30425 000162DD 48B8-                           mov rax, sob_boolean_false
 30425 000162DF [0200000000000000] 
 30426                                  .L_end:
 30427 000162E7 C9                              leave
 30428 000162E8 C21800                          ret AND_KILL_FRAME(1)
 30429                                  
 30430                                  L_code_ptr_is_boolean_true:
 30431 000162EB C8000000                        enter 0, 0
 30432 000162EF 48837D1801                      cmp COUNT, 1
 30433 000162F4 0F85610F0000                    jne L_error_arg_count_1
 30434 000162FA 488B4520                        mov rax, PARAM(0)
 30435 000162FE 8A18                            mov bl, byte [rax]
 30436 00016300 80FB0A                          cmp bl, T_boolean_true
 30437 00016303 750C                            jne .L_false
 30438 00016305 48B8-                           mov rax, sob_boolean_true
 30438 00016307 [0300000000000000] 
 30439 0001630F EB0A                            jmp .L_end
 30440                                  .L_false:
 30441 00016311 48B8-                           mov rax, sob_boolean_false
 30441 00016313 [0200000000000000] 
 30442                                  .L_end:
 30443 0001631B C9                              leave
 30444 0001631C C21800                          ret AND_KILL_FRAME(1)
 30445                                  
 30446                                  L_code_ptr_is_number:
 30447 0001631F C8000000                        enter 0, 0
 30448 00016323 48837D1801                      cmp COUNT, 1
 30449 00016328 0F852D0F0000                    jne L_error_arg_count_1
 30450 0001632E 488B4520                        mov rax, PARAM(0)
 30451 00016332 8A18                            mov bl, byte [rax]
 30452 00016334 80E310                          and bl, T_number
 30453 00016337 740C                            jz .L_false
 30454 00016339 48B8-                           mov rax, sob_boolean_true
 30454 0001633B [0300000000000000] 
 30455 00016343 EB0A                            jmp .L_end
 30456                                  .L_false:
 30457 00016345 48B8-                           mov rax, sob_boolean_false
 30457 00016347 [0200000000000000] 
 30458                                  .L_end:
 30459 0001634F C9                              leave
 30460 00016350 C21800                          ret AND_KILL_FRAME(1)
 30461                                          
 30462                                  L_code_ptr_is_collection:
 30463 00016353 C8000000                        enter 0, 0
 30464 00016357 48837D1801                      cmp COUNT, 1
 30465 0001635C 0F85F90E0000                    jne L_error_arg_count_1
 30466 00016362 488B4520                        mov rax, PARAM(0)
 30467 00016366 8A18                            mov bl, byte [rax]
 30468 00016368 80E320                          and bl, T_collection
 30469 0001636B 740C                            je .L_false
 30470 0001636D 48B8-                           mov rax, sob_boolean_true
 30470 0001636F [0300000000000000] 
 30471 00016377 EB0A                            jmp .L_end
 30472                                  .L_false:
 30473 00016379 48B8-                           mov rax, sob_boolean_false
 30473 0001637B [0200000000000000] 
 30474                                  .L_end:
 30475 00016383 C9                              leave
 30476 00016384 C21800                          ret AND_KILL_FRAME(1)
 30477                                  
 30478                                  L_code_ptr_cons:
 30479 00016387 C8000000                        enter 0, 0
 30480 0001638B 48837D1802                      cmp COUNT, 2
 30481 00016390 0F85FA0E0000                    jne L_error_arg_count_2
 30482 00016396 BF11000000                      mov rdi, (1 + 8 + 8)
 30483 0001639B E869F3FFFF                      call malloc
 30484 000163A0 C60021                          mov byte [rax], T_pair
 30485 000163A3 488B5D20                        mov rbx, PARAM(0)
 30486 000163A7 48895801                        mov SOB_PAIR_CAR(rax), rbx
 30487 000163AB 488B5D28                        mov rbx, PARAM(1)
 30488 000163AF 48895809                        mov SOB_PAIR_CDR(rax), rbx
 30489 000163B3 C9                              leave
 30490 000163B4 C22000                          ret AND_KILL_FRAME(2)
 30491                                  
 30492                                  L_code_ptr_display_sexpr:
 30493 000163B7 C8000000                        enter 0, 0
 30494 000163BB 48837D1801                      cmp COUNT, 1
 30495 000163C0 0F85950E0000                    jne L_error_arg_count_1
 30496 000163C6 488B7D20                        mov rdi, PARAM(0)
 30497 000163CA E878F4FFFF                      call print_sexpr
 30498 000163CF 48B8-                           mov rax, sob_void
 30498 000163D1 [0000000000000000] 
 30499 000163D9 C9                              leave
 30500 000163DA C21800                          ret AND_KILL_FRAME(1)
 30501                                  
 30502                                  L_code_ptr_write_char:
 30503 000163DD C8000000                        enter 0, 0
 30504 000163E1 48837D1801                      cmp COUNT, 1
 30505 000163E6 0F856F0E0000                    jne L_error_arg_count_1
 30506 000163EC 488B4520                        mov rax, PARAM(0)
 30507                                          assert_char(rax)
    53 000163F0 803802              <1>  cmp byte [%1], %2
    54 000163F3 0F85360F0000        <1>  jne L_error_incorrect_type
 30508 000163F9 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 30509 000163FC 4825FF000000                    and rax, 255
 30510 00016402 48BF-                           mov rdi, fmt_char
 30510 00016404 [291C000000000000] 
 30511 0001640C 4889C6                          mov rsi, rax
 30512 0001640F B800000000                      mov rax, 0
 30513                                          ENTER
    44 00016414 C8000000            <1>  enter 0, 0
    45 00016418 4883E4F0            <1>  and rsp, ~15
 30514 0001641C E8(00000000)                    call printf
 30515                                          LEAVE
    49 00016421 C9                  <1>  leave
 30516 00016422 48B8-                           mov rax, sob_void
 30516 00016424 [0000000000000000] 
 30517 0001642C C9                              leave
 30518 0001642D C21800                          ret AND_KILL_FRAME(1)
 30519                                  
 30520                                  L_code_ptr_car:
 30521 00016430 C8000000                        enter 0, 0
 30522 00016434 48837D1801                      cmp COUNT, 1
 30523 00016439 0F851C0E0000                    jne L_error_arg_count_1
 30524 0001643F 488B4520                        mov rax, PARAM(0)
 30525                                          assert_pair(rax)
    53 00016443 803821              <1>  cmp byte [%1], %2
    54 00016446 0F85E30E0000        <1>  jne L_error_incorrect_type
 30526 0001644C 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 30527 00016450 C9                              leave
 30528 00016451 C21800                          ret AND_KILL_FRAME(1)
 30529                                          
 30530                                  L_code_ptr_cdr:
 30531 00016454 C8000000                        enter 0, 0
 30532 00016458 48837D1801                      cmp COUNT, 1
 30533 0001645D 0F85F80D0000                    jne L_error_arg_count_1
 30534 00016463 488B4520                        mov rax, PARAM(0)
 30535                                          assert_pair(rax)
    53 00016467 803821              <1>  cmp byte [%1], %2
    54 0001646A 0F85BF0E0000        <1>  jne L_error_incorrect_type
 30536 00016470 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 30537 00016474 C9                              leave
 30538 00016475 C21800                          ret AND_KILL_FRAME(1)
 30539                                          
 30540                                  L_code_ptr_string_length:
 30541 00016478 C8000000                        enter 0, 0
 30542 0001647C 48837D1801                      cmp COUNT, 1
 30543 00016481 0F85D40D0000                    jne L_error_arg_count_1
 30544 00016487 488B4520                        mov rax, PARAM(0)
 30545                                          assert_string(rax)
    53 0001648B 803803              <1>  cmp byte [%1], %2
    54 0001648E 0F859B0E0000        <1>  jne L_error_incorrect_type
 30546 00016494 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 30547 00016498 E83E0D0000                      call make_integer
 30548 0001649D C9                              leave
 30549 0001649E C21800                          ret AND_KILL_FRAME(1)
 30550                                  
 30551                                  L_code_ptr_vector_length:
 30552 000164A1 C8000000                        enter 0, 0
 30553 000164A5 48837D1801                      cmp COUNT, 1
 30554 000164AA 0F85AB0D0000                    jne L_error_arg_count_1
 30555 000164B0 488B4520                        mov rax, PARAM(0)
 30556                                          assert_vector(rax)
    53 000164B4 803822              <1>  cmp byte [%1], %2
    54 000164B7 0F85720E0000        <1>  jne L_error_incorrect_type
 30557 000164BD 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 30558 000164C1 E8150D0000                      call make_integer
 30559 000164C6 C9                              leave
 30560 000164C7 C21800                          ret AND_KILL_FRAME(1)
 30561                                  
 30562                                  L_code_ptr_real_to_integer:
 30563 000164CA C8000000                        enter 0, 0
 30564 000164CE 48837D1801                      cmp COUNT, 1
 30565 000164D3 0F85820D0000                    jne L_error_arg_count_1
 30566 000164D9 488B5D20                        mov rbx, PARAM(0)
 30567                                          assert_real(rbx)
    53 000164DD 803B13              <1>  cmp byte [%1], %2
    54 000164E0 0F85490E0000        <1>  jne L_error_incorrect_type
 30568 000164E6 F20F104301                      movsd xmm0, qword [rbx + 1]
 30569 000164EB F2480F2CF8                      cvttsd2si rdi, xmm0
 30570 000164F0 E8E60C0000                      call make_integer
 30571 000164F5 C9                              leave
 30572 000164F6 C21800                          ret AND_KILL_FRAME(1)
 30573                                  
 30574                                  L_code_ptr_exit:
 30575 000164F9 C8000000                        enter 0, 0
 30576 000164FD 48837D1800                      cmp COUNT, 0
 30577 00016502 0F851E0D0000                    jne L_error_arg_count_0
 30578 00016508 B800000000                      mov rax, 0
 30579 0001650D E8(00000000)                    call exit
 30580                                  
 30581                                  L_code_ptr_integer_to_real:
 30582 00016512 C8000000                        enter 0, 0
 30583 00016516 48837D1801                      cmp COUNT, 1
 30584 0001651B 0F853A0D0000                    jne L_error_arg_count_1
 30585 00016521 488B4520                        mov rax, PARAM(0)
 30586                                          assert_integer(rax)
    53 00016525 803811              <1>  cmp byte [%1], %2
    54 00016528 0F85010E0000        <1>  jne L_error_incorrect_type
 30587 0001652E FF7001                          push qword [rax + 1]
 30588 00016531 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 30589 00016537 E8870C0000                      call make_real
 30590 0001653C C9                              leave
 30591 0001653D C21800                          ret AND_KILL_FRAME(1)
 30592                                  
 30593                                  L_code_ptr_fraction_to_real:
 30594 00016540 C8000000                        enter 0, 0
 30595 00016544 48837D1801                      cmp COUNT, 1
 30596 00016549 0F850C0D0000                    jne L_error_arg_count_1
 30597 0001654F 488B4520                        mov rax, PARAM(0)
 30598                                          assert_fraction(rax)
    53 00016553 803812              <1>  cmp byte [%1], %2
    54 00016556 0F85D30D0000        <1>  jne L_error_incorrect_type
 30599 0001655C FF7001                          push qword [rax + 1]
 30600 0001655F F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 30601 00016565 FF7009                          push qword [rax + 1 + 8]
 30602 00016568 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 30603 0001656E F20F5EC1                        divsd xmm0, xmm1
 30604 00016572 E84C0C0000                      call make_real
 30605 00016577 C9                              leave
 30606 00016578 C21800                          ret AND_KILL_FRAME(1)
 30607                                  
 30608                                  L_code_ptr_char_to_integer:
 30609 0001657B C8000000                        enter 0, 0
 30610 0001657F 48837D1801                      cmp COUNT, 1
 30611 00016584 0F85D10C0000                    jne L_error_arg_count_1
 30612 0001658A 488B4520                        mov rax, PARAM(0)
 30613                                          assert_char(rax)
    53 0001658E 803802              <1>  cmp byte [%1], %2
    54 00016591 0F85980D0000        <1>  jne L_error_incorrect_type
 30614 00016597 8A4001                          mov al, byte [rax + 1]
 30615 0001659A 4825FF000000                    and rax, 255
 30616 000165A0 4889C7                          mov rdi, rax
 30617 000165A3 E8330C0000                      call make_integer
 30618 000165A8 C9                              leave
 30619 000165A9 C21800                          ret AND_KILL_FRAME(1)
 30620                                  
 30621                                  L_code_ptr_integer_to_fraction:
 30622 000165AC C8000000                        enter 0, 0
 30623 000165B0 48837D1801                      cmp COUNT, 1
 30624 000165B5 0F85A00C0000                    jne L_error_arg_count_1
 30625 000165BB 4C8B4520                        mov r8, PARAM(0)
 30626                                          assert_integer(r8)
    53 000165BF 41803811            <1>  cmp byte [%1], %2
    54 000165C3 0F85660D0000        <1>  jne L_error_incorrect_type
 30627 000165C9 BF11000000                      mov rdi, (1 + 8 + 8)
 30628 000165CE E836F1FFFF                      call malloc
 30629 000165D3 498B5801                        mov rbx, qword [r8 + 1]
 30630 000165D7 C60012                          mov byte [rax], T_fraction
 30631 000165DA 48895801                        mov qword [rax + 1], rbx
 30632 000165DE 48C7400901000000                mov qword [rax + 1 + 8], 1
 30633 000165E6 C9                              leave
 30634 000165E7 C21800                          ret AND_KILL_FRAME(1)
 30635                                  
 30636                                  L_code_ptr_integer_to_char:
 30637 000165EA C8000000                        enter 0, 0
 30638 000165EE 48837D1801                      cmp COUNT, 1
 30639 000165F3 0F85620C0000                    jne L_error_arg_count_1
 30640 000165F9 488B4520                        mov rax, PARAM(0)
 30641                                          assert_integer(rax)
    53 000165FD 803811              <1>  cmp byte [%1], %2
    54 00016600 0F85290D0000        <1>  jne L_error_incorrect_type
 30642 00016606 488B5801                        mov rbx, qword [rax + 1]
 30643 0001660A 4883FB00                        cmp rbx, 0
 30644 0001660E 0F8EE10B0000                    jle L_error_integer_range
 30645 00016614 4881FB00010000                  cmp rbx, 256
 30646 0001661B 0F8DD40B0000                    jge L_error_integer_range
 30647 00016621 BF02000000                      mov rdi, (1 + 1)
 30648 00016626 E8DEF0FFFF                      call malloc
 30649 0001662B C60002                          mov byte [rax], T_char
 30650 0001662E 885801                          mov byte [rax + 1], bl
 30651 00016631 C9                              leave
 30652 00016632 C21800                          ret AND_KILL_FRAME(1)
 30653                                  
 30654                                  L_code_ptr_trng:
 30655 00016635 C8000000                        enter 0, 0
 30656 00016639 48837D1800                      cmp COUNT, 0
 30657 0001663E 0F85E20B0000                    jne L_error_arg_count_0
 30658 00016644 480FC7F7                        rdrand rdi
 30659 00016648 48D1EF                          shr rdi, 1
 30660 0001664B E88B0B0000                      call make_integer
 30661 00016650 C9                              leave
 30662 00016651 C21000                          ret AND_KILL_FRAME(0)
 30663                                  
 30664                                  L_code_ptr_is_zero:
 30665 00016654 C8000000                        enter 0, 0
 30666 00016658 48837D1801                      cmp COUNT, 1
 30667 0001665D 0F85F80B0000                    jne L_error_arg_count_1
 30668 00016663 488B4520                        mov rax, PARAM(0)
 30669 00016667 803811                          cmp byte [rax], T_integer
 30670 0001666A 740F                            je .L_integer
 30671 0001666C 803812                          cmp byte [rax], T_fraction
 30672 0001666F 7413                            je .L_fraction
 30673 00016671 803813                          cmp byte [rax], T_real
 30674 00016674 7417                            je .L_real
 30675 00016676 E9B40C0000                      jmp L_error_incorrect_type
 30676                                  .L_integer:
 30677 0001667B 4883780100                      cmp qword [rax + 1], 0
 30678 00016680 7429                            je .L_zero
 30679 00016682 EB1B                            jmp .L_not_zero
 30680                                  .L_fraction:
 30681 00016684 4883780100                      cmp qword [rax + 1], 0
 30682 00016689 7420                            je .L_zero
 30683 0001668B EB12                            jmp .L_not_zero
 30684                                  .L_real:
 30685 0001668D 660FEFC0                        pxor xmm0, xmm0
 30686 00016691 FF7001                          push qword [rax + 1]
 30687 00016694 F20F100C24                      movsd xmm1, qword [rsp]
 30688 00016699 660F2EC1                        ucomisd xmm0, xmm1
 30689 0001669D 740C                            je .L_zero
 30690                                  .L_not_zero:
 30691 0001669F 48B8-                           mov rax, sob_boolean_false
 30691 000166A1 [0200000000000000] 
 30692 000166A9 EB0A                            jmp .L_end
 30693                                  .L_zero:
 30694 000166AB 48B8-                           mov rax, sob_boolean_true
 30694 000166AD [0300000000000000] 
 30695                                  .L_end:
 30696 000166B5 C9                              leave
 30697 000166B6 C21800                          ret AND_KILL_FRAME(1)
 30698                                  
 30699                                  L_code_ptr_is_integer:
 30700 000166B9 C8000000                        enter 0, 0
 30701 000166BD 48837D1801                      cmp COUNT, 1
 30702 000166C2 0F85930B0000                    jne L_error_arg_count_1
 30703 000166C8 488B4520                        mov rax, PARAM(0)
 30704 000166CC 803811                          cmp byte [rax], T_integer
 30705 000166CF 750C                            jne .L_false
 30706 000166D1 48B8-                           mov rax, sob_boolean_true
 30706 000166D3 [0300000000000000] 
 30707 000166DB EB0A                            jmp .L_exit
 30708                                  .L_false:
 30709 000166DD 48B8-                           mov rax, sob_boolean_false
 30709 000166DF [0200000000000000] 
 30710                                  .L_exit:
 30711 000166E7 C9                              leave
 30712 000166E8 C21800                          ret AND_KILL_FRAME(1)
 30713                                  
 30714                                  L_code_ptr_raw_bin_add_rr:
 30715 000166EB C8000000                        enter 0, 0
 30716 000166EF 48837D1802                      cmp COUNT, 2
 30717 000166F4 0F85960B0000                    jne L_error_arg_count_2
 30718 000166FA 488B5D20                        mov rbx, PARAM(0)
 30719                                          assert_real(rbx)
    53 000166FE 803B13              <1>  cmp byte [%1], %2
    54 00016701 0F85280C0000        <1>  jne L_error_incorrect_type
 30720 00016707 488B4D28                        mov rcx, PARAM(1)
 30721                                          assert_real(rcx)
    53 0001670B 803913              <1>  cmp byte [%1], %2
    54 0001670E 0F851B0C0000        <1>  jne L_error_incorrect_type
 30722 00016714 F20F104301                      movsd xmm0, qword [rbx + 1]
 30723 00016719 F20F104901                      movsd xmm1, qword [rcx + 1]
 30724 0001671E F20F58C1                        addsd xmm0, xmm1
 30725 00016722 E89C0A0000                      call make_real
 30726 00016727 C9                              leave
 30727 00016728 C22000                          ret AND_KILL_FRAME(2)
 30728                                  
 30729                                  L_code_ptr_raw_bin_sub_rr:
 30730 0001672B C8000000                        enter 0, 0
 30731 0001672F 48837D1802                      cmp COUNT, 2
 30732 00016734 0F85560B0000                    jne L_error_arg_count_2
 30733 0001673A 488B5D20                        mov rbx, PARAM(0)
 30734                                          assert_real(rbx)
    53 0001673E 803B13              <1>  cmp byte [%1], %2
    54 00016741 0F85E80B0000        <1>  jne L_error_incorrect_type
 30735 00016747 488B4D28                        mov rcx, PARAM(1)
 30736                                          assert_real(rcx)
    53 0001674B 803913              <1>  cmp byte [%1], %2
    54 0001674E 0F85DB0B0000        <1>  jne L_error_incorrect_type
 30737 00016754 F20F104301                      movsd xmm0, qword [rbx + 1]
 30738 00016759 F20F104901                      movsd xmm1, qword [rcx + 1]
 30739 0001675E F20F5CC1                        subsd xmm0, xmm1
 30740 00016762 E85C0A0000                      call make_real
 30741 00016767 C9                              leave
 30742 00016768 C22000                          ret AND_KILL_FRAME(2)
 30743                                  
 30744                                  L_code_ptr_raw_bin_mul_rr:
 30745 0001676B C8000000                        enter 0, 0
 30746 0001676F 48837D1802                      cmp COUNT, 2
 30747 00016774 0F85160B0000                    jne L_error_arg_count_2
 30748 0001677A 488B5D20                        mov rbx, PARAM(0)
 30749                                          assert_real(rbx)
    53 0001677E 803B13              <1>  cmp byte [%1], %2
    54 00016781 0F85A80B0000        <1>  jne L_error_incorrect_type
 30750 00016787 488B4D28                        mov rcx, PARAM(1)
 30751                                          assert_real(rcx)
    53 0001678B 803913              <1>  cmp byte [%1], %2
    54 0001678E 0F859B0B0000        <1>  jne L_error_incorrect_type
 30752 00016794 F20F104301                      movsd xmm0, qword [rbx + 1]
 30753 00016799 F20F104901                      movsd xmm1, qword [rcx + 1]
 30754 0001679E F20F59C1                        mulsd xmm0, xmm1
 30755 000167A2 E81C0A0000                      call make_real
 30756 000167A7 C9                              leave
 30757 000167A8 C22000                          ret AND_KILL_FRAME(2)
 30758                                  
 30759                                  L_code_ptr_raw_bin_div_rr:
 30760 000167AB C8000000                        enter 0, 0
 30761 000167AF 48837D1802                      cmp COUNT, 2
 30762 000167B4 0F85D60A0000                    jne L_error_arg_count_2
 30763 000167BA 488B5D20                        mov rbx, PARAM(0)
 30764                                          assert_real(rbx)
    53 000167BE 803B13              <1>  cmp byte [%1], %2
    54 000167C1 0F85680B0000        <1>  jne L_error_incorrect_type
 30765 000167C7 488B4D28                        mov rcx, PARAM(1)
 30766                                          assert_real(rcx)
    53 000167CB 803913              <1>  cmp byte [%1], %2
    54 000167CE 0F855B0B0000        <1>  jne L_error_incorrect_type
 30767 000167D4 F20F104301                      movsd xmm0, qword [rbx + 1]
 30768 000167D9 F20F104901                      movsd xmm1, qword [rcx + 1]
 30769 000167DE 660FEFD2                        pxor xmm2, xmm2
 30770 000167E2 660F2ECA                        ucomisd xmm1, xmm2
 30771 000167E6 0F84740B0000                    je L_error_division_by_zero
 30772 000167EC F20F5EC1                        divsd xmm0, xmm1
 30773 000167F0 E8CE090000                      call make_real
 30774 000167F5 C9                              leave
 30775 000167F6 C22000                          ret AND_KILL_FRAME(2)
 30776                                  
 30777                                  L_code_ptr_raw_bin_add_zz:
 30778 000167F9 C8000000                	enter 0, 0
 30779 000167FD 48837D1802              	cmp COUNT, 2
 30780 00016802 0F85880A0000            	jne L_error_arg_count_2
 30781 00016808 4C8B4520                	mov r8, PARAM(0)
 30782                                  	assert_integer(r8)
    53 0001680C 41803811            <1>  cmp byte [%1], %2
    54 00016810 0F85190B0000        <1>  jne L_error_incorrect_type
 30783 00016816 4C8B4D28                	mov r9, PARAM(1)
 30784                                  	assert_integer(r9)
    53 0001681A 41803911            <1>  cmp byte [%1], %2
    54 0001681E 0F850B0B0000        <1>  jne L_error_incorrect_type
 30785 00016824 498B7801                	mov rdi, qword [r8 + 1]
 30786 00016828 49037901                	add rdi, qword [r9 + 1]
 30787 0001682C E8AA090000              	call make_integer
 30788 00016831 C9                      	leave
 30789 00016832 C22000                  	ret AND_KILL_FRAME(2)
 30790                                  	
 30791                                  L_code_ptr_raw_bin_add_qq:
 30792 00016835 C8000000                        enter 0, 0
 30793 00016839 48837D1802                      cmp COUNT, 2
 30794 0001683E 0F854C0A0000                    jne L_error_arg_count_2
 30795 00016844 4C8B4520                        mov r8, PARAM(0)
 30796                                          assert_fraction(r8)
    53 00016848 41803812            <1>  cmp byte [%1], %2
    54 0001684C 0F85DD0A0000        <1>  jne L_error_incorrect_type
 30797 00016852 4C8B4D28                        mov r9, PARAM(1)
 30798                                          assert_fraction(r9)
    53 00016856 41803912            <1>  cmp byte [%1], %2
    54 0001685A 0F85CF0A0000        <1>  jne L_error_incorrect_type
 30799 00016860 498B4001                        mov rax, qword [r8 + 1] ; num1
 30800 00016864 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 30801 00016868 4899                            cqo
 30802 0001686A 48F7EB                          imul rbx
 30803 0001686D 4889C6                          mov rsi, rax
 30804 00016870 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30805 00016874 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 30806 00016878 4899                            cqo
 30807 0001687A 48F7EB                          imul rbx
 30808 0001687D 4801C6                          add rsi, rax
 30809 00016880 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30810 00016884 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 30811 00016888 4899                            cqo
 30812 0001688A 48F7EB                          imul rbx
 30813 0001688D 4889C7                          mov rdi, rax
 30814 00016890 E8DE010000                      call normalize_fraction
 30815 00016895 C9                              leave
 30816 00016896 C22000                          ret AND_KILL_FRAME(2)
 30817                                  
 30818                                  L_code_ptr_raw_bin_sub_zz:
 30819 00016899 C8000000                	enter 0, 0
 30820 0001689D 48837D1802              	cmp COUNT, 2
 30821 000168A2 0F85E8090000            	jne L_error_arg_count_2
 30822 000168A8 4C8B4520                	mov r8, PARAM(0)
 30823                                  	assert_integer(r8)
    53 000168AC 41803811            <1>  cmp byte [%1], %2
    54 000168B0 0F85790A0000        <1>  jne L_error_incorrect_type
 30824 000168B6 4C8B4D28                	mov r9, PARAM(1)
 30825                                  	assert_integer(r9)
    53 000168BA 41803911            <1>  cmp byte [%1], %2
    54 000168BE 0F856B0A0000        <1>  jne L_error_incorrect_type
 30826 000168C4 498B7801                	mov rdi, qword [r8 + 1]
 30827 000168C8 492B7901                	sub rdi, qword [r9 + 1]
 30828 000168CC E80A090000              	call make_integer
 30829 000168D1 C9                      	leave
 30830 000168D2 C22000                  	ret AND_KILL_FRAME(2)
 30831                                  
 30832                                  L_code_ptr_raw_bin_sub_qq:
 30833 000168D5 C8000000                        enter 0, 0
 30834 000168D9 48837D1802                      cmp COUNT, 2
 30835 000168DE 0F85AC090000                    jne L_error_arg_count_2
 30836 000168E4 4C8B4520                        mov r8, PARAM(0)
 30837                                          assert_fraction(r8)
    53 000168E8 41803812            <1>  cmp byte [%1], %2
    54 000168EC 0F853D0A0000        <1>  jne L_error_incorrect_type
 30838 000168F2 4C8B4D28                        mov r9, PARAM(1)
 30839                                          assert_fraction(r9)
    53 000168F6 41803912            <1>  cmp byte [%1], %2
    54 000168FA 0F852F0A0000        <1>  jne L_error_incorrect_type
 30840 00016900 498B4001                        mov rax, qword [r8 + 1] ; num1
 30841 00016904 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 30842 00016908 4899                            cqo
 30843 0001690A 48F7EB                          imul rbx
 30844 0001690D 4889C6                          mov rsi, rax
 30845 00016910 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30846 00016914 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 30847 00016918 4899                            cqo
 30848 0001691A 48F7EB                          imul rbx
 30849 0001691D 4829C6                          sub rsi, rax
 30850 00016920 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30851 00016924 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 30852 00016928 4899                            cqo
 30853 0001692A 48F7EB                          imul rbx
 30854 0001692D 4889C7                          mov rdi, rax
 30855 00016930 E83E010000                      call normalize_fraction
 30856 00016935 C9                              leave
 30857 00016936 C22000                          ret AND_KILL_FRAME(2)
 30858                                  
 30859                                  L_code_ptr_raw_bin_mul_zz:
 30860 00016939 C8000000                	enter 0, 0
 30861 0001693D 48837D1802              	cmp COUNT, 2
 30862 00016942 0F8548090000            	jne L_error_arg_count_2
 30863 00016948 4C8B4520                	mov r8, PARAM(0)
 30864                                  	assert_integer(r8)
    53 0001694C 41803811            <1>  cmp byte [%1], %2
    54 00016950 0F85D9090000        <1>  jne L_error_incorrect_type
 30865 00016956 4C8B4D28                	mov r9, PARAM(1)
 30866                                  	assert_integer(r9)
    53 0001695A 41803911            <1>  cmp byte [%1], %2
    54 0001695E 0F85CB090000        <1>  jne L_error_incorrect_type
 30867 00016964 4899                    	cqo
 30868 00016966 498B4001                	mov rax, qword [r8 + 1]
 30869 0001696A 49F76101                	mul qword [r9 + 1]
 30870 0001696E 4889C7                  	mov rdi, rax
 30871 00016971 E865080000              	call make_integer
 30872 00016976 C9                      	leave
 30873 00016977 C22000                  	ret AND_KILL_FRAME(2)
 30874                                  
 30875                                  L_code_ptr_raw_bin_mul_qq:
 30876 0001697A C8000000                        enter 0, 0
 30877 0001697E 48837D1802                      cmp COUNT, 2
 30878 00016983 0F8507090000                    jne L_error_arg_count_2
 30879 00016989 4C8B4520                        mov r8, PARAM(0)
 30880                                          assert_fraction(r8)
    53 0001698D 41803812            <1>  cmp byte [%1], %2
    54 00016991 0F8598090000        <1>  jne L_error_incorrect_type
 30881 00016997 4C8B4D28                        mov r9, PARAM(1)
 30882                                          assert_fraction(r9)
    53 0001699B 41803912            <1>  cmp byte [%1], %2
    54 0001699F 0F858A090000        <1>  jne L_error_incorrect_type
 30883 000169A5 498B4001                        mov rax, qword [r8 + 1] ; num1
 30884 000169A9 498B5901                        mov rbx, qword [r9 + 1] ; num2
 30885 000169AD 4899                            cqo
 30886 000169AF 48F7EB                          imul rbx
 30887 000169B2 4889C6                          mov rsi, rax
 30888 000169B5 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30889 000169B9 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 30890 000169BD 4899                            cqo
 30891 000169BF 48F7EB                          imul rbx
 30892 000169C2 4889C7                          mov rdi, rax
 30893 000169C5 E8A9000000                      call normalize_fraction
 30894 000169CA C9                              leave
 30895 000169CB C22000                          ret AND_KILL_FRAME(2)
 30896                                          
 30897                                  L_code_ptr_raw_bin_div_zz:
 30898 000169CE C8000000                	enter 0, 0
 30899 000169D2 48837D1802              	cmp COUNT, 2
 30900 000169D7 0F85B3080000            	jne L_error_arg_count_2
 30901 000169DD 4C8B4520                	mov r8, PARAM(0)
 30902                                  	assert_integer(r8)
    53 000169E1 41803811            <1>  cmp byte [%1], %2
    54 000169E5 0F8544090000        <1>  jne L_error_incorrect_type
 30903 000169EB 4C8B4D28                	mov r9, PARAM(1)
 30904                                  	assert_integer(r9)
    53 000169EF 41803911            <1>  cmp byte [%1], %2
    54 000169F3 0F8536090000        <1>  jne L_error_incorrect_type
 30905 000169F9 498B7901                	mov rdi, qword [r9 + 1]
 30906 000169FD 4883FF00                	cmp rdi, 0
 30907 00016A01 0F8459090000            	je L_error_division_by_zero
 30908 00016A07 498B7001                	mov rsi, qword [r8 + 1]
 30909 00016A0B E863000000              	call normalize_fraction
 30910 00016A10 C9                      	leave
 30911 00016A11 C22000                  	ret AND_KILL_FRAME(2)
 30912                                  
 30913                                  L_code_ptr_raw_bin_div_qq:
 30914 00016A14 C8000000                        enter 0, 0
 30915 00016A18 48837D1802                      cmp COUNT, 2
 30916 00016A1D 0F856D080000                    jne L_error_arg_count_2
 30917 00016A23 4C8B4520                        mov r8, PARAM(0)
 30918                                          assert_fraction(r8)
    53 00016A27 41803812            <1>  cmp byte [%1], %2
    54 00016A2B 0F85FE080000        <1>  jne L_error_incorrect_type
 30919 00016A31 4C8B4D28                        mov r9, PARAM(1)
 30920                                          assert_fraction(r9)
    53 00016A35 41803912            <1>  cmp byte [%1], %2
    54 00016A39 0F85F0080000        <1>  jne L_error_incorrect_type
 30921 00016A3F 4983790100                      cmp qword [r9 + 1], 0
 30922 00016A44 0F8416090000                    je L_error_division_by_zero
 30923 00016A4A 498B4001                        mov rax, qword [r8 + 1] ; num1
 30924 00016A4E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 30925 00016A52 4899                            cqo
 30926 00016A54 48F7EB                          imul rbx
 30927 00016A57 4889C6                          mov rsi, rax
 30928 00016A5A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30929 00016A5E 498B5901                        mov rbx, qword [r9 + 1] ; num2
 30930 00016A62 4899                            cqo
 30931 00016A64 48F7EB                          imul rbx
 30932 00016A67 4889C7                          mov rdi, rax
 30933 00016A6A E804000000                      call normalize_fraction
 30934 00016A6F C9                              leave
 30935 00016A70 C22000                          ret AND_KILL_FRAME(2)
 30936                                          
 30937                                  normalize_fraction:
 30938 00016A73 56                              push rsi
 30939 00016A74 57                              push rdi
 30940 00016A75 E859000000                      call gcd
 30941 00016A7A 4889C3                          mov rbx, rax
 30942 00016A7D 58                              pop rax
 30943 00016A7E 4899                            cqo
 30944 00016A80 48F7FB                          idiv rbx
 30945 00016A83 4989C0                          mov r8, rax
 30946 00016A86 58                              pop rax
 30947 00016A87 4899                            cqo
 30948 00016A89 48F7FB                          idiv rbx
 30949 00016A8C 4989C1                          mov r9, rax
 30950 00016A8F 4983F900                        cmp r9, 0
 30951 00016A93 741C                            je .L_zero
 30952 00016A95 4983F801                        cmp r8, 1
 30953 00016A99 7421                            je .L_int
 30954 00016A9B BF11000000                      mov rdi, (1 + 8 + 8)
 30955 00016AA0 E864ECFFFF                      call malloc
 30956 00016AA5 C60012                          mov byte [rax], T_fraction
 30957 00016AA8 4C894801                        mov qword [rax + 1], r9
 30958 00016AAC 4C894009                        mov qword [rax + 1 + 8], r8
 30959 00016AB0 C3                              ret
 30960                                  .L_zero:
 30961 00016AB1 BF00000000                      mov rdi, 0
 30962 00016AB6 E820070000                      call make_integer
 30963 00016ABB C3                              ret
 30964                                  .L_int:
 30965 00016ABC 4C89CF                          mov rdi, r9
 30966 00016ABF E817070000                      call make_integer
 30967 00016AC4 C3                              ret
 30968                                  
 30969                                  iabs:
 30970 00016AC5 4889F8                          mov rax, rdi
 30971 00016AC8 4883F800                        cmp rax, 0
 30972 00016ACC 7C01                            jl .Lneg
 30973 00016ACE C3                              ret
 30974                                  .Lneg:
 30975 00016ACF 48F7D8                          neg rax
 30976 00016AD2 C3                              ret
 30977                                  
 30978                                  gcd:
 30979 00016AD3 E8EDFFFFFF                      call iabs
 30980 00016AD8 4889C3                          mov rbx, rax
 30981 00016ADB 4889F7                          mov rdi, rsi
 30982 00016ADE E8E2FFFFFF                      call iabs
 30983 00016AE3 4883F800                        cmp rax, 0
 30984 00016AE7 7502                            jne .L0
 30985 00016AE9 4893                            xchg rax, rbx
 30986                                  .L0:
 30987 00016AEB 4883FB00                        cmp rbx, 0
 30988 00016AEF 740C                            je .L1
 30989 00016AF1 4899                            cqo
 30990 00016AF3 48F7F3                          div rbx
 30991 00016AF6 4889D0                          mov rax, rdx
 30992 00016AF9 4893                            xchg rax, rbx
 30993 00016AFB EBEE                            jmp .L0
 30994                                  .L1:
 30995 00016AFD C3                              ret
 30996                                  
 30997                                  L_code_ptr_error:
 30998 00016AFE C8000000                        enter 0, 0
 30999 00016B02 48837D1802                      cmp COUNT, 2
 31000 00016B07 0F8583070000                    jne L_error_arg_count_2
 31001 00016B0D 488B7520                        mov rsi, PARAM(0)
 31002                                          assert_interned_symbol(rsi)
    53 00016B11 803E41              <1>  cmp byte [%1], %2
    54 00016B14 0F8515080000        <1>  jne L_error_incorrect_type
 31003 00016B1A 488B7528                        mov rsi, PARAM(1)
 31004                                          assert_string(rsi)
    53 00016B1E 803E03              <1>  cmp byte [%1], %2
    54 00016B21 0F8508080000        <1>  jne L_error_incorrect_type
 31005 00016B27 48BF-                           mov rdi, fmt_scheme_error_part_1
 31005 00016B29 [611D000000000000] 
 31006 00016B31 B800000000                      mov rax, 0
 31007                                          ENTER
    44 00016B36 C8000000            <1>  enter 0, 0
    45 00016B3A 4883E4F0            <1>  and rsp, ~15
 31008 00016B3E E8(00000000)                    call printf
 31009                                          LEAVE
    49 00016B43 C9                  <1>  leave
 31010 00016B44 488B7D20                        mov rdi, PARAM(0)
 31011 00016B48 E8FAECFFFF                      call print_sexpr
 31012 00016B4D 48BF-                           mov rdi, fmt_scheme_error_part_2
 31012 00016B4F [751D000000000000] 
 31013 00016B57 B800000000                      mov rax, 0
 31014                                          ENTER
    44 00016B5C C8000000            <1>  enter 0, 0
    45 00016B60 4883E4F0            <1>  and rsp, ~15
 31015 00016B64 E8(00000000)                    call printf
 31016                                          LEAVE
    49 00016B69 C9                  <1>  leave
 31017 00016B6A 488B4528                        mov rax, PARAM(1)       ; sob_string
 31018 00016B6E BE01000000                      mov rsi, 1              ; size = 1 byte
 31019 00016B73 488B5001                        mov rdx, qword [rax + 1] ; length
 31020 00016B77 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 31021 00016B7B 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 31022                                  	ENTER
    44 00016B83 C8000000            <1>  enter 0, 0
    45 00016B87 4883E4F0            <1>  and rsp, ~15
 31023 00016B8B E8(00000000)                    call fwrite
 31024                                  	LEAVE
    49 00016B90 C9                  <1>  leave
 31025 00016B91 48BF-                           mov rdi, fmt_scheme_error_part_3
 31025 00016B93 [B71D000000000000] 
 31026 00016B9B B800000000                      mov rax, 0
 31027                                          ENTER
    44 00016BA0 C8000000            <1>  enter 0, 0
    45 00016BA4 4883E4F0            <1>  and rsp, ~15
 31028 00016BA8 E8(00000000)                    call printf
 31029                                          LEAVE
    49 00016BAD C9                  <1>  leave
 31030 00016BAE 48C7C0F7FFFFFF                  mov rax, -9
 31031 00016BB5 E8(00000000)                    call exit
 31032                                  
 31033                                  L_code_ptr_raw_less_than_rr:
 31034 00016BBA C8000000                        enter 0, 0
 31035 00016BBE 48837D1802                      cmp COUNT, 2
 31036 00016BC3 0F85C7060000                    jne L_error_arg_count_2
 31037 00016BC9 488B7520                        mov rsi, PARAM(0)
 31038                                          assert_real(rsi)
    53 00016BCD 803E13              <1>  cmp byte [%1], %2
    54 00016BD0 0F8559070000        <1>  jne L_error_incorrect_type
 31039 00016BD6 488B7D28                        mov rdi, PARAM(1)
 31040                                          assert_real(rdi)
    53 00016BDA 803F13              <1>  cmp byte [%1], %2
    54 00016BDD 0F854C070000        <1>  jne L_error_incorrect_type
 31041 00016BE3 F20F104601                      movsd xmm0, qword [rsi + 1]
 31042 00016BE8 F20F104F01                      movsd xmm1, qword [rdi + 1]
 31043 00016BED 660F2FC1                        comisd xmm0, xmm1
 31044 00016BF1 730C                            jae .L_false
 31045 00016BF3 48B8-                           mov rax, sob_boolean_true
 31045 00016BF5 [0300000000000000] 
 31046 00016BFD EB0A                            jmp .L_exit
 31047                                  .L_false:
 31048 00016BFF 48B8-                           mov rax, sob_boolean_false
 31048 00016C01 [0200000000000000] 
 31049                                  .L_exit:
 31050 00016C09 C9                              leave
 31051 00016C0A C22000                          ret AND_KILL_FRAME(2)
 31052                                          
 31053                                  L_code_ptr_raw_less_than_zz:
 31054 00016C0D C8000000                	enter 0, 0
 31055 00016C11 48837D1802              	cmp COUNT, 2
 31056 00016C16 0F8574060000            	jne L_error_arg_count_2
 31057 00016C1C 4C8B4520                	mov r8, PARAM(0)
 31058                                  	assert_integer(r8)
    53 00016C20 41803811            <1>  cmp byte [%1], %2
    54 00016C24 0F8505070000        <1>  jne L_error_incorrect_type
 31059 00016C2A 4C8B4D28                	mov r9, PARAM(1)
 31060                                  	assert_integer(r9)
    53 00016C2E 41803911            <1>  cmp byte [%1], %2
    54 00016C32 0F85F7060000        <1>  jne L_error_incorrect_type
 31061 00016C38 498B7801                	mov rdi, qword [r8 + 1]
 31062 00016C3C 493B7901                	cmp rdi, qword [r9 + 1]
 31063 00016C40 7D0C                    	jge .L_false
 31064 00016C42 48B8-                   	mov rax, sob_boolean_true
 31064 00016C44 [0300000000000000] 
 31065 00016C4C EB0A                    	jmp .L_exit
 31066                                  .L_false:
 31067 00016C4E 48B8-                   	mov rax, sob_boolean_false
 31067 00016C50 [0200000000000000] 
 31068                                  .L_exit:
 31069 00016C58 C9                      	leave
 31070 00016C59 C22000                  	ret AND_KILL_FRAME(2)
 31071                                  
 31072                                  L_code_ptr_raw_less_than_qq:
 31073 00016C5C C8000000                        enter 0, 0
 31074 00016C60 48837D1802                      cmp COUNT, 2
 31075 00016C65 0F8525060000                    jne L_error_arg_count_2
 31076 00016C6B 488B7520                        mov rsi, PARAM(0)
 31077                                          assert_fraction(rsi)
    53 00016C6F 803E12              <1>  cmp byte [%1], %2
    54 00016C72 0F85B7060000        <1>  jne L_error_incorrect_type
 31078 00016C78 488B7D28                        mov rdi, PARAM(1)
 31079                                          assert_fraction(rdi)
    53 00016C7C 803F12              <1>  cmp byte [%1], %2
    54 00016C7F 0F85AA060000        <1>  jne L_error_incorrect_type
 31080 00016C85 488B4601                        mov rax, qword [rsi + 1] ; num1
 31081 00016C89 4899                            cqo
 31082 00016C8B 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 31083 00016C8F 4889C1                          mov rcx, rax
 31084 00016C92 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 31085 00016C96 4899                            cqo
 31086 00016C98 48F76F01                        imul qword [rdi + 1]          ; num2
 31087 00016C9C 4829C1                          sub rcx, rax
 31088 00016C9F 7D0C                            jge .L_false
 31089 00016CA1 48B8-                           mov rax, sob_boolean_true
 31089 00016CA3 [0300000000000000] 
 31090 00016CAB EB0A                            jmp .L_exit
 31091                                  .L_false:
 31092 00016CAD 48B8-                           mov rax, sob_boolean_false
 31092 00016CAF [0200000000000000] 
 31093                                  .L_exit:
 31094 00016CB7 C9                              leave
 31095 00016CB8 C22000                          ret AND_KILL_FRAME(2)
 31096                                  
 31097                                  L_code_ptr_raw_equal_rr:
 31098 00016CBB C8000000                        enter 0, 0
 31099 00016CBF 48837D1802                      cmp COUNT, 2
 31100 00016CC4 0F85C6050000                    jne L_error_arg_count_2
 31101 00016CCA 488B7520                        mov rsi, PARAM(0)
 31102                                          assert_real(rsi)
    53 00016CCE 803E13              <1>  cmp byte [%1], %2
    54 00016CD1 0F8558060000        <1>  jne L_error_incorrect_type
 31103 00016CD7 488B7D28                        mov rdi, PARAM(1)
 31104                                          assert_real(rdi)
    53 00016CDB 803F13              <1>  cmp byte [%1], %2
    54 00016CDE 0F854B060000        <1>  jne L_error_incorrect_type
 31105 00016CE4 F20F104601                      movsd xmm0, qword [rsi + 1]
 31106 00016CE9 F20F104F01                      movsd xmm1, qword [rdi + 1]
 31107 00016CEE 660F2FC1                        comisd xmm0, xmm1
 31108 00016CF2 750C                            jne .L_false
 31109 00016CF4 48B8-                           mov rax, sob_boolean_true
 31109 00016CF6 [0300000000000000] 
 31110 00016CFE EB0A                            jmp .L_exit
 31111                                  .L_false:
 31112 00016D00 48B8-                           mov rax, sob_boolean_false
 31112 00016D02 [0200000000000000] 
 31113                                  .L_exit:
 31114 00016D0A C9                              leave
 31115 00016D0B C22000                          ret AND_KILL_FRAME(2)
 31116                                          
 31117                                  L_code_ptr_raw_equal_zz:
 31118 00016D0E C8000000                	enter 0, 0
 31119 00016D12 48837D1802              	cmp COUNT, 2
 31120 00016D17 0F8573050000            	jne L_error_arg_count_2
 31121 00016D1D 4C8B4520                	mov r8, PARAM(0)
 31122                                  	assert_integer(r8)
    53 00016D21 41803811            <1>  cmp byte [%1], %2
    54 00016D25 0F8504060000        <1>  jne L_error_incorrect_type
 31123 00016D2B 4C8B4D28                	mov r9, PARAM(1)
 31124                                  	assert_integer(r9)
    53 00016D2F 41803911            <1>  cmp byte [%1], %2
    54 00016D33 0F85F6050000        <1>  jne L_error_incorrect_type
 31125 00016D39 498B7801                	mov rdi, qword [r8 + 1]
 31126 00016D3D 493B7901                	cmp rdi, qword [r9 + 1]
 31127 00016D41 750C                    	jne .L_false
 31128 00016D43 48B8-                   	mov rax, sob_boolean_true
 31128 00016D45 [0300000000000000] 
 31129 00016D4D EB0A                    	jmp .L_exit
 31130                                  .L_false:
 31131 00016D4F 48B8-                   	mov rax, sob_boolean_false
 31131 00016D51 [0200000000000000] 
 31132                                  .L_exit:
 31133 00016D59 C9                      	leave
 31134 00016D5A C22000                  	ret AND_KILL_FRAME(2)
 31135                                  
 31136                                  L_code_ptr_raw_equal_qq:
 31137 00016D5D C8000000                        enter 0, 0
 31138 00016D61 48837D1802                      cmp COUNT, 2
 31139 00016D66 0F8524050000                    jne L_error_arg_count_2
 31140 00016D6C 488B7520                        mov rsi, PARAM(0)
 31141                                          assert_fraction(rsi)
    53 00016D70 803E12              <1>  cmp byte [%1], %2
    54 00016D73 0F85B6050000        <1>  jne L_error_incorrect_type
 31142 00016D79 488B7D28                        mov rdi, PARAM(1)
 31143                                          assert_fraction(rdi)
    53 00016D7D 803F12              <1>  cmp byte [%1], %2
    54 00016D80 0F85A9050000        <1>  jne L_error_incorrect_type
 31144 00016D86 488B4601                        mov rax, qword [rsi + 1] ; num1
 31145 00016D8A 4899                            cqo
 31146 00016D8C 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 31147 00016D90 4889C1                          mov rcx, rax
 31148 00016D93 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 31149 00016D97 4899                            cqo
 31150 00016D99 48F76F01                        imul qword [rdi + 1]          ; num2
 31151 00016D9D 4829C1                          sub rcx, rax
 31152 00016DA0 750C                            jne .L_false
 31153 00016DA2 48B8-                           mov rax, sob_boolean_true
 31153 00016DA4 [0300000000000000] 
 31154 00016DAC EB0A                            jmp .L_exit
 31155                                  .L_false:
 31156 00016DAE 48B8-                           mov rax, sob_boolean_false
 31156 00016DB0 [0200000000000000] 
 31157                                  .L_exit:
 31158 00016DB8 C9                              leave
 31159 00016DB9 C22000                          ret AND_KILL_FRAME(2)
 31160                                  
 31161                                  L_code_ptr_quotient:
 31162 00016DBC C8000000                        enter 0, 0
 31163 00016DC0 48837D1802                      cmp COUNT, 2
 31164 00016DC5 0F85C5040000                    jne L_error_arg_count_2
 31165 00016DCB 488B7520                        mov rsi, PARAM(0)
 31166                                          assert_integer(rsi)
    53 00016DCF 803E11              <1>  cmp byte [%1], %2
    54 00016DD2 0F8557050000        <1>  jne L_error_incorrect_type
 31167 00016DD8 488B7D28                        mov rdi, PARAM(1)
 31168                                          assert_integer(rdi)
    53 00016DDC 803F11              <1>  cmp byte [%1], %2
    54 00016DDF 0F854A050000        <1>  jne L_error_incorrect_type
 31169 00016DE5 488B4601                        mov rax, qword [rsi + 1]
 31170 00016DE9 488B5F01                        mov rbx, qword [rdi + 1]
 31171 00016DED 4883FB00                        cmp rbx, 0
 31172 00016DF1 0F8469050000                    je L_error_division_by_zero
 31173 00016DF7 4899                            cqo
 31174 00016DF9 48F7FB                          idiv rbx
 31175 00016DFC 4889C7                          mov rdi, rax
 31176 00016DFF E8D7030000                      call make_integer
 31177 00016E04 C9                              leave
 31178 00016E05 C22000                          ret AND_KILL_FRAME(2)
 31179                                          
 31180                                  L_code_ptr_remainder:
 31181 00016E08 C8000000                        enter 0, 0
 31182 00016E0C 48837D1802                      cmp COUNT, 2
 31183 00016E11 0F8579040000                    jne L_error_arg_count_2
 31184 00016E17 488B7520                        mov rsi, PARAM(0)
 31185                                          assert_integer(rsi)
    53 00016E1B 803E11              <1>  cmp byte [%1], %2
    54 00016E1E 0F850B050000        <1>  jne L_error_incorrect_type
 31186 00016E24 488B7D28                        mov rdi, PARAM(1)
 31187                                          assert_integer(rdi)
    53 00016E28 803F11              <1>  cmp byte [%1], %2
    54 00016E2B 0F85FE040000        <1>  jne L_error_incorrect_type
 31188 00016E31 488B4601                        mov rax, qword [rsi + 1]
 31189 00016E35 488B5F01                        mov rbx, qword [rdi + 1]
 31190 00016E39 4883FB00                        cmp rbx, 0
 31191 00016E3D 0F841D050000                    je L_error_division_by_zero
 31192 00016E43 4899                            cqo
 31193 00016E45 48F7FB                          idiv rbx
 31194 00016E48 4889D7                          mov rdi, rdx
 31195 00016E4B E88B030000                      call make_integer
 31196 00016E50 C9                              leave
 31197 00016E51 C22000                          ret AND_KILL_FRAME(2)
 31198                                  
 31199                                  L_code_ptr_set_car:
 31200 00016E54 C8000000                        enter 0, 0
 31201 00016E58 48837D1802                      cmp COUNT, 2
 31202 00016E5D 0F852D040000                    jne L_error_arg_count_2
 31203 00016E63 488B4520                        mov rax, PARAM(0)
 31204                                          assert_pair(rax)
    53 00016E67 803821              <1>  cmp byte [%1], %2
    54 00016E6A 0F85BF040000        <1>  jne L_error_incorrect_type
 31205 00016E70 488B5D28                        mov rbx, PARAM(1)
 31206 00016E74 48895801                        mov SOB_PAIR_CAR(rax), rbx
 31207 00016E78 48B8-                           mov rax, sob_void
 31207 00016E7A [0000000000000000] 
 31208 00016E82 C9                              leave
 31209 00016E83 C22000                          ret AND_KILL_FRAME(2)
 31210                                  
 31211                                  L_code_ptr_set_cdr:
 31212 00016E86 C8000000                        enter 0, 0
 31213 00016E8A 48837D1802                      cmp COUNT, 2
 31214 00016E8F 0F85FB030000                    jne L_error_arg_count_2
 31215 00016E95 488B4520                        mov rax, PARAM(0)
 31216                                          assert_pair(rax)
    53 00016E99 803821              <1>  cmp byte [%1], %2
    54 00016E9C 0F858D040000        <1>  jne L_error_incorrect_type
 31217 00016EA2 488B5D28                        mov rbx, PARAM(1)
 31218 00016EA6 48895809                        mov SOB_PAIR_CDR(rax), rbx
 31219 00016EAA 48B8-                           mov rax, sob_void
 31219 00016EAC [0000000000000000] 
 31220 00016EB4 C9                              leave
 31221 00016EB5 C22000                          ret AND_KILL_FRAME(2)
 31222                                  
 31223                                  L_code_ptr_string_ref:
 31224 00016EB8 C8000000                        enter 0, 0
 31225 00016EBC 48837D1802                      cmp COUNT, 2
 31226 00016EC1 0F85C9030000                    jne L_error_arg_count_2
 31227 00016EC7 488B7D20                        mov rdi, PARAM(0)
 31228                                          assert_string(rdi)
    53 00016ECB 803F03              <1>  cmp byte [%1], %2
    54 00016ECE 0F855B040000        <1>  jne L_error_incorrect_type
 31229 00016ED4 488B7528                        mov rsi, PARAM(1)
 31230                                          assert_integer(rsi)
    53 00016ED8 803E11              <1>  cmp byte [%1], %2
    54 00016EDB 0F854E040000        <1>  jne L_error_incorrect_type
 31231 00016EE1 488B5701                        mov rdx, qword [rdi + 1]
 31232 00016EE5 488B4E01                        mov rcx, qword [rsi + 1]
 31233 00016EE9 4839D1                          cmp rcx, rdx
 31234 00016EEC 0F8D03030000                    jge L_error_integer_range
 31235 00016EF2 4883F900                        cmp rcx, 0
 31236 00016EF6 0F8CF9020000                    jl L_error_integer_range
 31237 00016EFC 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 31238 00016F00 BF02000000                      mov rdi, 2
 31239 00016F05 E8FFE7FFFF                      call malloc
 31240 00016F0A C60002                          mov byte [rax], T_char
 31241 00016F0D 885801                          mov byte [rax + 1], bl
 31242 00016F10 C9                              leave
 31243 00016F11 C22000                          ret AND_KILL_FRAME(2)
 31244                                  
 31245                                  L_code_ptr_vector_ref:
 31246 00016F14 C8000000                        enter 0, 0
 31247 00016F18 48837D1802                      cmp COUNT, 2
 31248 00016F1D 0F856D030000                    jne L_error_arg_count_2
 31249 00016F23 488B7D20                        mov rdi, PARAM(0)
 31250                                          assert_vector(rdi)
    53 00016F27 803F22              <1>  cmp byte [%1], %2
    54 00016F2A 0F85FF030000        <1>  jne L_error_incorrect_type
 31251 00016F30 488B7528                        mov rsi, PARAM(1)
 31252                                          assert_integer(rsi)
    53 00016F34 803E11              <1>  cmp byte [%1], %2
    54 00016F37 0F85F2030000        <1>  jne L_error_incorrect_type
 31253 00016F3D 488B5701                        mov rdx, qword [rdi + 1]
 31254 00016F41 488B4E01                        mov rcx, qword [rsi + 1]
 31255 00016F45 4839D1                          cmp rcx, rdx
 31256 00016F48 0F8DA7020000                    jge L_error_integer_range
 31257 00016F4E 4883F900                        cmp rcx, 0
 31258 00016F52 0F8C9D020000                    jl L_error_integer_range
 31259 00016F58 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 31260 00016F5D C9                              leave
 31261 00016F5E C22000                          ret AND_KILL_FRAME(2)
 31262                                  
 31263                                  L_code_ptr_vector_set:
 31264 00016F61 C8000000                        enter 0, 0
 31265 00016F65 48837D1803                      cmp COUNT, 3
 31266 00016F6A 0F858A030000                    jne L_error_arg_count_3
 31267 00016F70 488B7D20                        mov rdi, PARAM(0)
 31268                                          assert_vector(rdi)
    53 00016F74 803F22              <1>  cmp byte [%1], %2
    54 00016F77 0F85B2030000        <1>  jne L_error_incorrect_type
 31269 00016F7D 488B7528                        mov rsi, PARAM(1)
 31270                                          assert_integer(rsi)
    53 00016F81 803E11              <1>  cmp byte [%1], %2
    54 00016F84 0F85A5030000        <1>  jne L_error_incorrect_type
 31271 00016F8A 488B5701                        mov rdx, qword [rdi + 1]
 31272 00016F8E 488B4E01                        mov rcx, qword [rsi + 1]
 31273 00016F92 4839D1                          cmp rcx, rdx
 31274 00016F95 0F8D5A020000                    jge L_error_integer_range
 31275 00016F9B 4883F900                        cmp rcx, 0
 31276 00016F9F 0F8C50020000                    jl L_error_integer_range
 31277 00016FA5 488B4530                        mov rax, PARAM(2)
 31278 00016FA9 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 31279 00016FAE 48B8-                           mov rax, sob_void
 31279 00016FB0 [0000000000000000] 
 31280 00016FB8 C9                              leave
 31281 00016FB9 C22800                          ret AND_KILL_FRAME(3)
 31282                                  
 31283                                  L_code_ptr_string_set:
 31284 00016FBC C8000000                        enter 0, 0
 31285 00016FC0 48837D1803                      cmp COUNT, 3
 31286 00016FC5 0F852F030000                    jne L_error_arg_count_3
 31287 00016FCB 488B7D20                        mov rdi, PARAM(0)
 31288                                          assert_string(rdi)
    53 00016FCF 803F03              <1>  cmp byte [%1], %2
    54 00016FD2 0F8557030000        <1>  jne L_error_incorrect_type
 31289 00016FD8 488B7528                        mov rsi, PARAM(1)
 31290                                          assert_integer(rsi)
    53 00016FDC 803E11              <1>  cmp byte [%1], %2
    54 00016FDF 0F854A030000        <1>  jne L_error_incorrect_type
 31291 00016FE5 488B5701                        mov rdx, qword [rdi + 1]
 31292 00016FE9 488B4E01                        mov rcx, qword [rsi + 1]
 31293 00016FED 4839D1                          cmp rcx, rdx
 31294 00016FF0 0F8DFF010000                    jge L_error_integer_range
 31295 00016FF6 4883F900                        cmp rcx, 0
 31296 00016FFA 0F8CF5010000                    jl L_error_integer_range
 31297 00017000 488B4530                        mov rax, PARAM(2)
 31298                                          assert_char(rax)
    53 00017004 803802              <1>  cmp byte [%1], %2
    54 00017007 0F8522030000        <1>  jne L_error_incorrect_type
 31299 0001700D 8A4001                          mov al, byte [rax + 1]
 31300 00017010 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 31301 00017014 48B8-                           mov rax, sob_void
 31301 00017016 [0000000000000000] 
 31302 0001701E C9                              leave
 31303 0001701F C22800                          ret AND_KILL_FRAME(3)
 31304                                  
 31305                                  L_code_ptr_make_vector:
 31306 00017022 C8000000                        enter 0, 0
 31307 00017026 48837D1802                      cmp COUNT, 2
 31308 0001702B 0F855F020000                    jne L_error_arg_count_2
 31309 00017031 488B4D20                        mov rcx, PARAM(0)
 31310                                          assert_integer(rcx)
    53 00017035 803911              <1>  cmp byte [%1], %2
    54 00017038 0F85F1020000        <1>  jne L_error_incorrect_type
 31311 0001703E 488B4901                        mov rcx, qword [rcx + 1]
 31312 00017042 4883F900                        cmp rcx, 0
 31313 00017046 0F8CA9010000                    jl L_error_integer_range
 31314 0001704C 488B5528                        mov rdx, PARAM(1)
 31315 00017050 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 31316 00017058 E8ACE6FFFF                      call malloc
 31317 0001705D C60022                          mov byte [rax], T_vector
 31318 00017060 48894801                        mov qword [rax + 1], rcx
 31319 00017064 41B800000000                    mov r8, 0
 31320                                  .L0:
 31321 0001706A 4939C8                          cmp r8, rcx
 31322 0001706D 740A                            je .L1
 31323 0001706F 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 31324 00017074 49FFC0                          inc r8
 31325 00017077 EBF1                            jmp .L0
 31326                                  .L1:
 31327 00017079 C9                              leave
 31328 0001707A C22000                          ret AND_KILL_FRAME(2)
 31329                                          
 31330                                  L_code_ptr_make_string:
 31331 0001707D C8000000                        enter 0, 0
 31332 00017081 48837D1802                      cmp COUNT, 2
 31333 00017086 0F8504020000                    jne L_error_arg_count_2
 31334 0001708C 488B4D20                        mov rcx, PARAM(0)
 31335                                          assert_integer(rcx)
    53 00017090 803911              <1>  cmp byte [%1], %2
    54 00017093 0F8596020000        <1>  jne L_error_incorrect_type
 31336 00017099 488B4901                        mov rcx, qword [rcx + 1]
 31337 0001709D 4883F900                        cmp rcx, 0
 31338 000170A1 0F8C4E010000                    jl L_error_integer_range
 31339 000170A7 488B5528                        mov rdx, PARAM(1)
 31340                                          assert_char(rdx)
    53 000170AB 803A02              <1>  cmp byte [%1], %2
    54 000170AE 0F857B020000        <1>  jne L_error_incorrect_type
 31341 000170B4 8A5201                          mov dl, byte [rdx + 1]
 31342 000170B7 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 31343 000170BB E849E6FFFF                      call malloc
 31344 000170C0 C60003                          mov byte [rax], T_string
 31345 000170C3 48894801                        mov qword [rax + 1], rcx
 31346 000170C7 41B800000000                    mov r8, 0
 31347                                  .L0:
 31348 000170CD 4939C8                          cmp r8, rcx
 31349 000170D0 740A                            je .L1
 31350 000170D2 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 31351 000170D7 49FFC0                          inc r8
 31352 000170DA EBF1                            jmp .L0
 31353                                  .L1:
 31354 000170DC C9                              leave
 31355 000170DD C22000                          ret AND_KILL_FRAME(2)
 31356                                  
 31357                                  L_code_ptr_numerator:
 31358 000170E0 C8000000                        enter 0, 0
 31359 000170E4 48837D1801                      cmp COUNT, 1
 31360 000170E9 0F856C010000                    jne L_error_arg_count_1
 31361 000170EF 488B4520                        mov rax, PARAM(0)
 31362                                          assert_fraction(rax)
    53 000170F3 803812              <1>  cmp byte [%1], %2
    54 000170F6 0F8533020000        <1>  jne L_error_incorrect_type
 31363 000170FC 488B7801                        mov rdi, qword [rax + 1]
 31364 00017100 E8D6000000                      call make_integer
 31365 00017105 C9                              leave
 31366 00017106 C21800                          ret AND_KILL_FRAME(1)
 31367                                          
 31368                                  L_code_ptr_denominator:
 31369 00017109 C8000000                        enter 0, 0
 31370 0001710D 48837D1801                      cmp COUNT, 1
 31371 00017112 0F8543010000                    jne L_error_arg_count_1
 31372 00017118 488B4520                        mov rax, PARAM(0)
 31373                                          assert_fraction(rax)
    53 0001711C 803812              <1>  cmp byte [%1], %2
    54 0001711F 0F850A020000        <1>  jne L_error_incorrect_type
 31374 00017125 488B7809                        mov rdi, qword [rax + 1 + 8]
 31375 00017129 E8AD000000                      call make_integer
 31376 0001712E C9                              leave
 31377 0001712F C21800                          ret AND_KILL_FRAME(1)
 31378                                  
 31379                                  L_code_ptr_is_eq:
 31380 00017132 C8000000                	enter 0, 0
 31381 00017136 48837D1802              	cmp COUNT, 2
 31382 0001713B 0F854F010000            	jne L_error_arg_count_2
 31383 00017141 488B7D20                	mov rdi, PARAM(0)
 31384 00017145 488B7528                	mov rsi, PARAM(1)
 31385 00017149 4839F7                  	cmp rdi, rsi
 31386 0001714C 745B                    	je .L_eq_true
 31387 0001714E 8A17                    	mov dl, byte [rdi]
 31388 00017150 3A16                    	cmp dl, byte [rsi]
 31389 00017152 7561                    	jne .L_eq_false
 31390 00017154 80FA02                  	cmp dl, T_char
 31391 00017157 7448                    	je .L_char
 31392 00017159 80FA41                  	cmp dl, T_interned_symbol
 31393 0001715C 742F                    	je .L_interned_symbol
 31394 0001715E 80FA42                          cmp dl, T_uninterned_symbol
 31395 00017161 7432                            je .L_uninterned_symbol
 31396 00017163 80FA13                  	cmp dl, T_real
 31397 00017166 741D                    	je .L_real
 31398 00017168 80FA12                  	cmp dl, T_fraction
 31399 0001716B 7402                    	je .L_fraction
 31400 0001716D EB46                    	jmp .L_eq_false
 31401                                  .L_fraction:
 31402 0001716F 488B4601                	mov rax, qword [rsi + 1]
 31403 00017173 483B4701                	cmp rax, qword [rdi + 1]
 31404 00017177 753C                    	jne .L_eq_false
 31405 00017179 488B4609                	mov rax, qword [rsi + 1 + 8]
 31406 0001717D 483B4709                	cmp rax, qword [rdi + 1 + 8]
 31407 00017181 7532                    	jne .L_eq_false
 31408 00017183 EB24                    	jmp .L_eq_true
 31409                                  .L_real:
 31410 00017185 488B4601                	mov rax, qword [rsi + 1]
 31411 00017189 483B4701                	cmp rax, qword [rdi + 1]
 31412                                  .L_interned_symbol:
 31413                                  	; never reached, because interned_symbols are static!
 31414                                  	; but I'm keeping it in case, I'll ever change
 31415                                  	; the implementation
 31416 0001718D 488B4601                	mov rax, qword [rsi + 1]
 31417 00017191 483B4701                	cmp rax, qword [rdi + 1]
 31418                                  .L_uninterned_symbol:
 31419 00017195 4C8B4701                        mov r8, qword [rdi + 1]
 31420 00017199 4C3B4601                        cmp r8, qword [rsi + 1]
 31421 0001719D 7516                            jne .L_eq_false
 31422 0001719F EB08                            jmp .L_eq_true
 31423                                  .L_char:
 31424 000171A1 8A5E01                  	mov bl, byte [rsi + 1]
 31425 000171A4 3A5F01                  	cmp bl, byte [rdi + 1]
 31426 000171A7 750C                    	jne .L_eq_false
 31427                                  .L_eq_true:
 31428 000171A9 48B8-                   	mov rax, sob_boolean_true
 31428 000171AB [0300000000000000] 
 31429 000171B3 EB0A                    	jmp .L_eq_exit
 31430                                  .L_eq_false:
 31431 000171B5 48B8-                   	mov rax, sob_boolean_false
 31431 000171B7 [0200000000000000] 
 31432                                  .L_eq_exit:
 31433 000171BF C9                      	leave
 31434 000171C0 C22000                  	ret AND_KILL_FRAME(2)
 31435                                  
 31436                                  make_real:
 31437 000171C3 C8000000                        enter 0, 0
 31438 000171C7 BF09000000                      mov rdi, (1 + 8)
 31439 000171CC E838E5FFFF                      call malloc
 31440 000171D1 C60013                          mov byte [rax], T_real
 31441 000171D4 F20F114001                      movsd qword [rax + 1], xmm0
 31442 000171D9 C9                              leave 
 31443 000171DA C3                              ret
 31444                                          
 31445                                  make_integer:
 31446 000171DB C8000000                        enter 0, 0
 31447 000171DF 4889FE                          mov rsi, rdi
 31448 000171E2 BF09000000                      mov rdi, (1 + 8)
 31449 000171E7 E81DE5FFFF                      call malloc
 31450 000171EC C60011                          mov byte [rax], T_integer
 31451 000171EF 48897001                        mov qword [rax + 1], rsi
 31452 000171F3 C9                              leave
 31453 000171F4 C3                              ret
 31454                                          
 31455                                  L_error_integer_range:
 31456 000171F5 488B3C25[00000000]              mov rdi, qword [stderr]
 31457 000171FD 48BE-                           mov rsi, fmt_integer_range
 31457 000171FF [2E1D000000000000] 
 31458 00017207 B800000000                      mov rax, 0
 31459                                          ENTER
    44 0001720C C8000000            <1>  enter 0, 0
    45 00017210 4883E4F0            <1>  and rsp, ~15
 31460 00017214 E8(00000000)                    call fprintf
 31461                                          LEAVE
    49 00017219 C9                  <1>  leave
 31462 0001721A 48C7C0FBFFFFFF                  mov rax, -5
 31463 00017221 E8(00000000)                    call exit
 31464                                  
 31465                                  L_error_arg_count_0:
 31466 00017226 488B3C25[00000000]              mov rdi, qword [stderr]
 31467 0001722E 48BE-                           mov rsi, fmt_arg_count_0
 31467 00017230 [2C1C000000000000] 
 31468 00017238 488B5518                        mov rdx, COUNT
 31469 0001723C B800000000                      mov rax, 0
 31470                                          ENTER
    44 00017241 C8000000            <1>  enter 0, 0
    45 00017245 4883E4F0            <1>  and rsp, ~15
 31471 00017249 E8(00000000)                    call fprintf
 31472                                          LEAVE
    49 0001724E C9                  <1>  leave
 31473 0001724F 48C7C0FDFFFFFF                  mov rax, -3
 31474 00017256 E8(00000000)                    call exit
 31475                                  
 31476                                  L_error_arg_count_1:
 31477 0001725B 488B3C25[00000000]              mov rdi, qword [stderr]
 31478 00017263 48BE-                           mov rsi, fmt_arg_count_1
 31478 00017265 [541C000000000000] 
 31479 0001726D 488B5518                        mov rdx, COUNT
 31480 00017271 B800000000                      mov rax, 0
 31481                                          ENTER
    44 00017276 C8000000            <1>  enter 0, 0
    45 0001727A 4883E4F0            <1>  and rsp, ~15
 31482 0001727E E8(00000000)                    call fprintf
 31483                                          LEAVE
    49 00017283 C9                  <1>  leave
 31484 00017284 48C7C0FDFFFFFF                  mov rax, -3
 31485 0001728B E8(00000000)                    call exit
 31486                                  
 31487                                  L_error_arg_count_2:
 31488 00017290 488B3C25[00000000]              mov rdi, qword [stderr]
 31489 00017298 48BE-                           mov rsi, fmt_arg_count_2
 31489 0001729A [BA1C000000000000] 
 31490 000172A2 488B5518                        mov rdx, COUNT
 31491 000172A6 B800000000                      mov rax, 0
 31492                                          ENTER
    44 000172AB C8000000            <1>  enter 0, 0
    45 000172AF 4883E4F0            <1>  and rsp, ~15
 31493 000172B3 E8(00000000)                    call fprintf
 31494                                          LEAVE
    49 000172B8 C9                  <1>  leave
 31495 000172B9 48C7C0FDFFFFFF                  mov rax, -3
 31496 000172C0 E8(00000000)                    call exit
 31497                                  
 31498                                  L_error_arg_count_12:
 31499 000172C5 488B3C25[00000000]              mov rdi, qword [stderr]
 31500 000172CD 48BE-                           mov rsi, fmt_arg_count_12
 31500 000172CF [7A1C000000000000] 
 31501 000172D7 488B5518                        mov rdx, COUNT
 31502 000172DB B800000000                      mov rax, 0
 31503                                          ENTER
    44 000172E0 C8000000            <1>  enter 0, 0
    45 000172E4 4883E4F0            <1>  and rsp, ~15
 31504 000172E8 E8(00000000)                    call fprintf
 31505                                          LEAVE
    49 000172ED C9                  <1>  leave
 31506 000172EE 48C7C0FDFFFFFF                  mov rax, -3
 31507 000172F5 E8(00000000)                    call exit
 31508                                  
 31509                                  L_error_arg_count_3:
 31510 000172FA 488B3C25[00000000]              mov rdi, qword [stderr]
 31511 00017302 48BE-                           mov rsi, fmt_arg_count_3
 31511 00017304 [E11C000000000000] 
 31512 0001730C 488B5518                        mov rdx, COUNT
 31513 00017310 B800000000                      mov rax, 0
 31514                                          ENTER
    44 00017315 C8000000            <1>  enter 0, 0
    45 00017319 4883E4F0            <1>  and rsp, ~15
 31515 0001731D E8(00000000)                    call fprintf
 31516                                          LEAVE
    49 00017322 C9                  <1>  leave
 31517 00017323 48C7C0FDFFFFFF                  mov rax, -3
 31518 0001732A E8(00000000)                    call exit
 31519                                          
 31520                                  L_error_incorrect_type:
 31521 0001732F 488B3C25[00000000]              mov rdi, qword [stderr]
 31522 00017337 48BE-                           mov rsi, fmt_type
 31522 00017339 [0A1D000000000000] 
 31523 00017341 B800000000                      mov rax, 0
 31524                                          ENTER
    44 00017346 C8000000            <1>  enter 0, 0
    45 0001734A 4883E4F0            <1>  and rsp, ~15
 31525 0001734E E8(00000000)                    call fprintf
 31526                                          LEAVE
    49 00017353 C9                  <1>  leave
 31527 00017354 48C7C0FCFFFFFF                  mov rax, -4
 31528 0001735B E8(00000000)                    call exit
 31529                                  
 31530                                  L_error_division_by_zero:
 31531 00017360 488B3C25[00000000]              mov rdi, qword [stderr]
 31532 00017368 48BE-                           mov rsi, fmt_division_by_zero
 31532 0001736A [4B1D000000000000] 
 31533 00017372 B800000000                      mov rax, 0
 31534                                          ENTER
    44 00017377 C8000000            <1>  enter 0, 0
    45 0001737B 4883E4F0            <1>  and rsp, ~15
 31535 0001737F E8(00000000)                    call fprintf
 31536                                          LEAVE
    49 00017384 C9                  <1>  leave
 31537 00017385 48C7C0F8FFFFFF                  mov rax, -8
 31538 0001738C E8(00000000)                    call exit
 31539                                  
 31540                                  section .data
 31541                                  gensym_count:
 31542 00001C21 0000000000000000                dq 0
 31543                                  fmt_char:
 31544 00001C29 256300                          db `%c\0`
 31545                                  fmt_arg_count_0:
 31546 00001C2C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 31546 00001C35 74696E67207A65726F-
 31546 00001C3E 20617267756D656E74-
 31546 00001C47 732E20466F756E6420-
 31546 00001C50 25640A00           
 31547                                  fmt_arg_count_1:
 31548 00001C54 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 31548 00001C5D 74696E67206F6E6520-
 31548 00001C66 617267756D656E742E-
 31548 00001C6F 20466F756E64202564-
 31548 00001C78 0A00               
 31549                                  fmt_arg_count_12:
 31550 00001C7A 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 31550 00001C83 74696E67206F6E6520-
 31550 00001C8C 726571756972656420-
 31550 00001C95 616E64206F6E65206F-
 31550 00001C9E 7074696F6E616C2061-
 31550 00001CA7 7267756D656E742E20-
 31550 00001CB0 466F756E642025640A-
 31550 00001CB9 00                 
 31551                                  fmt_arg_count_2:
 31552 00001CBA 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 31552 00001CC3 74696E672074776F20-
 31552 00001CCC 617267756D656E7473-
 31552 00001CD5 2E20466F756E642025-
 31552 00001CDE 640A00             
 31553                                  fmt_arg_count_3:
 31554 00001CE1 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 31554 00001CEA 74696E672074687265-
 31554 00001CF3 6520617267756D656E-
 31554 00001CFC 74732E20466F756E64-
 31554 00001D05 2025640A00         
 31555                                  fmt_type:
 31556 00001D0A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 31556 00001D13 696F6E207061737365-
 31556 00001D1C 6420696E636F727265-
 31556 00001D25 637420747970650A00 
 31557                                  fmt_integer_range:
 31558 00001D2E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 31558 00001D37 7265637420696E7465-
 31558 00001D40 6765722072616E6765-
 31558 00001D49 0A00               
 31559                                  fmt_division_by_zero:
 31560 00001D4B 212121204469766973-             db `!!! Division by zero\n\0`
 31560 00001D54 696F6E206279207A65-
 31560 00001D5D 726F0A00           
 31561                                  fmt_scheme_error_part_1:
 31562 00001D61 0A2121212054686520-             db `\n!!! The procedure \0`
 31562 00001D6A 70726F636564757265-
 31562 00001D73 2000               
 31563                                  fmt_scheme_error_part_2:
 31564 00001D75 2061736B656420746F-             db ` asked to terminate the program\n`
 31564 00001D7E 207465726D696E6174-
 31564 00001D87 65207468652070726F-
 31564 00001D90 6772616D0A         
 31565 00001D95 202020207769746820-             db `    with the following message:\n\n\0`
 31565 00001D9E 74686520666F6C6C6F-
 31565 00001DA7 77696E67206D657373-
 31565 00001DB0 6167653A0A0A00     
 31566                                  fmt_scheme_error_part_3:
 31567 00001DB7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 31567 00001DC0 210A0A00           
