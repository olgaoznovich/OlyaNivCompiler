     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RDP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "caar"
   441 0000056E 0400000000000000        	dq 4
   442 00000576 63616172                	db 0x63, 0x61, 0x61, 0x72
   443                                  	; L_constants + 1402:
   444 0000057A 03                      	db T_string	; "cadr"
   445 0000057B 0400000000000000        	dq 4
   446 00000583 63616472                	db 0x63, 0x61, 0x64, 0x72
   447                                  	; L_constants + 1415:
   448 00000587 03                      	db T_string	; "cdar"
   449 00000588 0400000000000000        	dq 4
   450 00000590 63646172                	db 0x63, 0x64, 0x61, 0x72
   451                                  	; L_constants + 1428:
   452 00000594 03                      	db T_string	; "cddr"
   453 00000595 0400000000000000        	dq 4
   454 0000059D 63646472                	db 0x63, 0x64, 0x64, 0x72
   455                                  	; L_constants + 1441:
   456 000005A1 03                      	db T_string	; "caaar"
   457 000005A2 0500000000000000        	dq 5
   458 000005AA 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   459                                  	; L_constants + 1455:
   460 000005AF 03                      	db T_string	; "caadr"
   461 000005B0 0500000000000000        	dq 5
   462 000005B8 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   463                                  	; L_constants + 1469:
   464 000005BD 03                      	db T_string	; "cadar"
   465 000005BE 0500000000000000        	dq 5
   466 000005C6 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   467                                  	; L_constants + 1483:
   468 000005CB 03                      	db T_string	; "caddr"
   469 000005CC 0500000000000000        	dq 5
   470 000005D4 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   471                                  	; L_constants + 1497:
   472 000005D9 03                      	db T_string	; "cdaar"
   473 000005DA 0500000000000000        	dq 5
   474 000005E2 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   475                                  	; L_constants + 1511:
   476 000005E7 03                      	db T_string	; "cdadr"
   477 000005E8 0500000000000000        	dq 5
   478 000005F0 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   479                                  	; L_constants + 1525:
   480 000005F5 03                      	db T_string	; "cddar"
   481 000005F6 0500000000000000        	dq 5
   482 000005FE 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   483                                  	; L_constants + 1539:
   484 00000603 03                      	db T_string	; "cdddr"
   485 00000604 0500000000000000        	dq 5
   486 0000060C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   487                                  	; L_constants + 1553:
   488 00000611 03                      	db T_string	; "caaaar"
   489 00000612 0600000000000000        	dq 6
   490 0000061A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   491                                  	; L_constants + 1568:
   492 00000620 03                      	db T_string	; "caaadr"
   493 00000621 0600000000000000        	dq 6
   494 00000629 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   495                                  	; L_constants + 1583:
   496 0000062F 03                      	db T_string	; "caadar"
   497 00000630 0600000000000000        	dq 6
   498 00000638 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   499                                  	; L_constants + 1598:
   500 0000063E 03                      	db T_string	; "caaddr"
   501 0000063F 0600000000000000        	dq 6
   502 00000647 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   503                                  	; L_constants + 1613:
   504 0000064D 03                      	db T_string	; "cadaar"
   505 0000064E 0600000000000000        	dq 6
   506 00000656 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   507                                  	; L_constants + 1628:
   508 0000065C 03                      	db T_string	; "cadadr"
   509 0000065D 0600000000000000        	dq 6
   510 00000665 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   511                                  	; L_constants + 1643:
   512 0000066B 03                      	db T_string	; "caddar"
   513 0000066C 0600000000000000        	dq 6
   514 00000674 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   515                                  	; L_constants + 1658:
   516 0000067A 03                      	db T_string	; "cadddr"
   517 0000067B 0600000000000000        	dq 6
   518 00000683 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   519                                  	; L_constants + 1673:
   520 00000689 03                      	db T_string	; "cdaaar"
   521 0000068A 0600000000000000        	dq 6
   522 00000692 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   523                                  	; L_constants + 1688:
   524 00000698 03                      	db T_string	; "cdaadr"
   525 00000699 0600000000000000        	dq 6
   526 000006A1 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   527                                  	; L_constants + 1703:
   528 000006A7 03                      	db T_string	; "cdadar"
   529 000006A8 0600000000000000        	dq 6
   530 000006B0 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   531                                  	; L_constants + 1718:
   532 000006B6 03                      	db T_string	; "cdaddr"
   533 000006B7 0600000000000000        	dq 6
   534 000006BF 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   535                                  	; L_constants + 1733:
   536 000006C5 03                      	db T_string	; "cddaar"
   537 000006C6 0600000000000000        	dq 6
   538 000006CE 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   539                                  	; L_constants + 1748:
   540 000006D4 03                      	db T_string	; "cddadr"
   541 000006D5 0600000000000000        	dq 6
   542 000006DD 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   543                                  	; L_constants + 1763:
   544 000006E3 03                      	db T_string	; "cdddar"
   545 000006E4 0600000000000000        	dq 6
   546 000006EC 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   547                                  	; L_constants + 1778:
   548 000006F2 03                      	db T_string	; "cddddr"
   549 000006F3 0600000000000000        	dq 6
   550 000006FB 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   551                                  	; L_constants + 1793:
   552 00000701 03                      	db T_string	; "list?"
   553 00000702 0500000000000000        	dq 5
   554 0000070A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   555                                  	; L_constants + 1807:
   556 0000070F 03                      	db T_string	; "list"
   557 00000710 0400000000000000        	dq 4
   558 00000718 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   559                                  	; L_constants + 1820:
   560 0000071C 03                      	db T_string	; "not"
   561 0000071D 0300000000000000        	dq 3
   562 00000725 6E6F74                  	db 0x6E, 0x6F, 0x74
   563                                  	; L_constants + 1832:
   564 00000728 03                      	db T_string	; "rational?"
   565 00000729 0900000000000000        	dq 9
   566 00000731 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   567 00000739 3F                      	db 0x3F
   568                                  	; L_constants + 1850:
   569 0000073A 03                      	db T_string	; "list*"
   570 0000073B 0500000000000000        	dq 5
   571 00000743 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   572                                  	; L_constants + 1864:
   573 00000748 03                      	db T_string	; "whatever"
   574 00000749 0800000000000000        	dq 8
   575 00000751 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   576                                  	; L_constants + 1881:
   577 00000759 41                      	db T_interned_symbol	; whatever
   578 0000075A [4807000000000000]      	dq L_constants + 1864
   579                                  	; L_constants + 1890:
   580 00000762 03                      	db T_string	; "apply"
   581 00000763 0500000000000000        	dq 5
   582 0000076B 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   583                                  	; L_constants + 1904:
   584 00000770 03                      	db T_string	; "ormap"
   585 00000771 0500000000000000        	dq 5
   586 00000779 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   587                                  	; L_constants + 1918:
   588 0000077E 03                      	db T_string	; "map"
   589 0000077F 0300000000000000        	dq 3
   590 00000787 6D6170                  	db 0x6D, 0x61, 0x70
   591                                  	; L_constants + 1930:
   592 0000078A 03                      	db T_string	; "andmap"
   593 0000078B 0600000000000000        	dq 6
   594 00000793 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   595                                  	; L_constants + 1945:
   596 00000799 03                      	db T_string	; "reverse"
   597 0000079A 0700000000000000        	dq 7
   598 000007A2 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   599                                  	; L_constants + 1961:
   600 000007A9 03                      	db T_string	; "fold-left"
   601 000007AA 0900000000000000        	dq 9
   602 000007B2 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   603 000007BA 74                      	db 0x74
   604                                  	; L_constants + 1979:
   605 000007BB 03                      	db T_string	; "append"
   606 000007BC 0600000000000000        	dq 6
   607 000007C4 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   608                                  	; L_constants + 1994:
   609 000007CA 03                      	db T_string	; "fold-right"
   610 000007CB 0A00000000000000        	dq 10
   611 000007D3 666F6C642D726967        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x72, 0x69, 0x67
   612 000007DB 6874                    	db 0x68, 0x74
   613                                  	; L_constants + 2013:
   614 000007DD 03                      	db T_string	; "+"
   615 000007DE 0100000000000000        	dq 1
   616 000007E6 2B                      	db 0x2B
   617                                  	; L_constants + 2023:
   618 000007E7 11                      	db T_integer	; 0
   619 000007E8 0000000000000000        	dq 0
   620                                  	; L_constants + 2032:
   621 000007F0 03                      	db T_string	; "__bin_integer_to_fr...
   622 000007F1 1900000000000000        	dq 25
   623 000007F9 5F5F62696E5F696E        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x5F, 0x69, 0x6E
   624 00000801 74656765725F746F        	db 0x74, 0x65, 0x67, 0x65, 0x72, 0x5F, 0x74, 0x6F
   625 00000809 5F6672616374696F        	db 0x5F, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F
   626 00000811 6E                      	db 0x6E
   627                                  	; L_constants + 2066:
   628 00000812 41                      	db T_interned_symbol	; +
   629 00000813 [DD07000000000000]      	dq L_constants + 2013
   630                                  	; L_constants + 2075:
   631 0000081B 03                      	db T_string	; "all arguments need ...
   632 0000081C 2000000000000000        	dq 32
   633 00000824 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   634 0000082C 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   635 00000834 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   636 0000083C 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   637                                  	; L_constants + 2116:
   638 00000844 03                      	db T_string	; "-"
   639 00000845 0100000000000000        	dq 1
   640 0000084D 2D                      	db 0x2D
   641                                  	; L_constants + 2126:
   642 0000084E 03                      	db T_string	; "real"
   643 0000084F 0400000000000000        	dq 4
   644 00000857 7265616C                	db 0x72, 0x65, 0x61, 0x6C
   645                                  	; L_constants + 2139:
   646 0000085B 41                      	db T_interned_symbol	; -
   647 0000085C [4408000000000000]      	dq L_constants + 2116
   648                                  	; L_constants + 2148:
   649 00000864 03                      	db T_string	; "*"
   650 00000865 0100000000000000        	dq 1
   651 0000086D 2A                      	db 0x2A
   652                                  	; L_constants + 2158:
   653 0000086E 11                      	db T_integer	; 1
   654 0000086F 0100000000000000        	dq 1
   655                                  	; L_constants + 2167:
   656 00000877 41                      	db T_interned_symbol	; *
   657 00000878 [6408000000000000]      	dq L_constants + 2148
   658                                  	; L_constants + 2176:
   659 00000880 03                      	db T_string	; "/"
   660 00000881 0100000000000000        	dq 1
   661 00000889 2F                      	db 0x2F
   662                                  	; L_constants + 2186:
   663 0000088A 41                      	db T_interned_symbol	; /
   664 0000088B [8008000000000000]      	dq L_constants + 2176
   665                                  	; L_constants + 2195:
   666 00000893 03                      	db T_string	; "fact"
   667 00000894 0400000000000000        	dq 4
   668 0000089C 66616374                	db 0x66, 0x61, 0x63, 0x74
   669                                  	; L_constants + 2208:
   670 000008A0 03                      	db T_string	; "<"
   671 000008A1 0100000000000000        	dq 1
   672 000008A9 3C                      	db 0x3C
   673                                  	; L_constants + 2218:
   674 000008AA 03                      	db T_string	; "<="
   675 000008AB 0200000000000000        	dq 2
   676 000008B3 3C3D                    	db 0x3C, 0x3D
   677                                  	; L_constants + 2229:
   678 000008B5 03                      	db T_string	; ">"
   679 000008B6 0100000000000000        	dq 1
   680 000008BE 3E                      	db 0x3E
   681                                  	; L_constants + 2239:
   682 000008BF 03                      	db T_string	; ">="
   683 000008C0 0200000000000000        	dq 2
   684 000008C8 3E3D                    	db 0x3E, 0x3D
   685                                  	; L_constants + 2250:
   686 000008CA 03                      	db T_string	; "="
   687 000008CB 0100000000000000        	dq 1
   688 000008D3 3D                      	db 0x3D
   689                                  	; L_constants + 2260:
   690 000008D4 03                      	db T_string	; "generic-comparator"
   691 000008D5 1200000000000000        	dq 18
   692 000008DD 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   693 000008E5 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   694 000008ED 6F72                    	db 0x6F, 0x72
   695                                  	; L_constants + 2287:
   696 000008EF 41                      	db T_interned_symbol	; generic-comparator
   697 000008F0 [D408000000000000]      	dq L_constants + 2260
   698                                  	; L_constants + 2296:
   699 000008F8 03                      	db T_string	; "all the arguments m...
   700 000008F9 2100000000000000        	dq 33
   701 00000901 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   702 00000909 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   703 00000911 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   704 00000919 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   705 00000921 73                      	db 0x73
   706                                  	; L_constants + 2338:
   707 00000922 03                      	db T_string	; "make-list"
   708 00000923 0900000000000000        	dq 9
   709 0000092B 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   710 00000933 74                      	db 0x74
   711                                  	; L_constants + 2356:
   712 00000934 41                      	db T_interned_symbol	; make-list
   713 00000935 [2209000000000000]      	dq L_constants + 2338
   714                                  	; L_constants + 2365:
   715 0000093D 03                      	db T_string	; "Usage: (make-list l...
   716 0000093E 2D00000000000000        	dq 45
   717 00000946 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   718 0000094E 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   719 00000956 74206C656E677468        	db 0x74, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   720 0000095E 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   721 00000966 616C2D696E69742D        	db 0x61, 0x6C, 0x2D, 0x69, 0x6E, 0x69, 0x74, 0x2D
   722 0000096E 6368617229              	db 0x63, 0x68, 0x61, 0x72, 0x29
   723                                  	; L_constants + 2419:
   724 00000973 03                      	db T_string	; "char<?"
   725 00000974 0600000000000000        	dq 6
   726 0000097C 636861723C3F            	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3F
   727                                  	; L_constants + 2434:
   728 00000982 03                      	db T_string	; "char<=?"
   729 00000983 0700000000000000        	dq 7
   730 0000098B 636861723C3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3D, 0x3F
   731                                  	; L_constants + 2450:
   732 00000992 03                      	db T_string	; "char=?"
   733 00000993 0600000000000000        	dq 6
   734 0000099B 636861723D3F            	db 0x63, 0x68, 0x61, 0x72, 0x3D, 0x3F
   735                                  	; L_constants + 2465:
   736 000009A1 03                      	db T_string	; "char>?"
   737 000009A2 0600000000000000        	dq 6
   738 000009AA 636861723E3F            	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3F
   739                                  	; L_constants + 2480:
   740 000009B0 03                      	db T_string	; "char>=?"
   741 000009B1 0700000000000000        	dq 7
   742 000009B9 636861723E3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3D, 0x3F
   743                                  	; L_constants + 2496:
   744 000009C0 03                      	db T_string	; "char-downcase"
   745 000009C1 0D00000000000000        	dq 13
   746 000009C9 636861722D646F77        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x64, 0x6F, 0x77
   747 000009D1 6E63617365              	db 0x6E, 0x63, 0x61, 0x73, 0x65
   748                                  	; L_constants + 2518:
   749 000009D6 03                      	db T_string	; "char-upcase"
   750 000009D7 0B00000000000000        	dq 11
   751 000009DF 636861722D757063        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x75, 0x70, 0x63
   752 000009E7 617365                  	db 0x61, 0x73, 0x65
   753                                  	; L_constants + 2538:
   754 000009EA 0241                    	db T_char, 0x41	; #\A
   755                                  	; L_constants + 2540:
   756 000009EC 025A                    	db T_char, 0x5A	; #\Z
   757                                  	; L_constants + 2542:
   758 000009EE 0261                    	db T_char, 0x61	; #\a
   759                                  	; L_constants + 2544:
   760 000009F0 027A                    	db T_char, 0x7A	; #\z
   761                                  	; L_constants + 2546:
   762 000009F2 03                      	db T_string	; "char-ci<?"
   763 000009F3 0900000000000000        	dq 9
   764 000009FB 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   765 00000A03 3F                      	db 0x3F
   766                                  	; L_constants + 2564:
   767 00000A04 03                      	db T_string	; "char-ci<=?"
   768 00000A05 0A00000000000000        	dq 10
   769 00000A0D 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   770 00000A15 3D3F                    	db 0x3D, 0x3F
   771                                  	; L_constants + 2583:
   772 00000A17 03                      	db T_string	; "char-ci=?"
   773 00000A18 0900000000000000        	dq 9
   774 00000A20 636861722D63693D        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3D
   775 00000A28 3F                      	db 0x3F
   776                                  	; L_constants + 2601:
   777 00000A29 03                      	db T_string	; "char-ci>?"
   778 00000A2A 0900000000000000        	dq 9
   779 00000A32 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   780 00000A3A 3F                      	db 0x3F
   781                                  	; L_constants + 2619:
   782 00000A3B 03                      	db T_string	; "char-ci>=?"
   783 00000A3C 0A00000000000000        	dq 10
   784 00000A44 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   785 00000A4C 3D3F                    	db 0x3D, 0x3F
   786                                  	; L_constants + 2638:
   787 00000A4E 03                      	db T_string	; "string-downcase"
   788 00000A4F 0F00000000000000        	dq 15
   789 00000A57 737472696E672D64        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x64
   790 00000A5F 6F776E63617365          	db 0x6F, 0x77, 0x6E, 0x63, 0x61, 0x73, 0x65
   791                                  	; L_constants + 2662:
   792 00000A66 03                      	db T_string	; "string-upcase"
   793 00000A67 0D00000000000000        	dq 13
   794 00000A6F 737472696E672D75        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x75
   795 00000A77 7063617365              	db 0x70, 0x63, 0x61, 0x73, 0x65
   796                                  	; L_constants + 2684:
   797 00000A7C 03                      	db T_string	; "list->string"
   798 00000A7D 0C00000000000000        	dq 12
   799 00000A85 6C6973742D3E7374        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x73, 0x74
   800 00000A8D 72696E67                	db 0x72, 0x69, 0x6E, 0x67
   801                                  	; L_constants + 2705:
   802 00000A91 03                      	db T_string	; "string->list"
   803 00000A92 0C00000000000000        	dq 12
   804 00000A9A 737472696E672D3E        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x3E
   805 00000AA2 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   806                                  	; L_constants + 2726:
   807 00000AA6 03                      	db T_string	; "string<?"
   808 00000AA7 0800000000000000        	dq 8
   809 00000AAF 737472696E673C3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3F
   810                                  	; L_constants + 2743:
   811 00000AB7 03                      	db T_string	; "string<=?"
   812 00000AB8 0900000000000000        	dq 9
   813 00000AC0 737472696E673C3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3D
   814 00000AC8 3F                      	db 0x3F
   815                                  	; L_constants + 2761:
   816 00000AC9 03                      	db T_string	; "string=?"
   817 00000ACA 0800000000000000        	dq 8
   818 00000AD2 737472696E673D3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3D, 0x3F
   819                                  	; L_constants + 2778:
   820 00000ADA 03                      	db T_string	; "string>=?"
   821 00000ADB 0900000000000000        	dq 9
   822 00000AE3 737472696E673E3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3D
   823 00000AEB 3F                      	db 0x3F
   824                                  	; L_constants + 2796:
   825 00000AEC 03                      	db T_string	; "string>?"
   826 00000AED 0800000000000000        	dq 8
   827 00000AF5 737472696E673E3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3F
   828                                  	; L_constants + 2813:
   829 00000AFD 03                      	db T_string	; "string-ci<?"
   830 00000AFE 0B00000000000000        	dq 11
   831 00000B06 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   832 00000B0E 693C3F                  	db 0x69, 0x3C, 0x3F
   833                                  	; L_constants + 2833:
   834 00000B11 03                      	db T_string	; "string-ci<=?"
   835 00000B12 0C00000000000000        	dq 12
   836 00000B1A 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   837 00000B22 693C3D3F                	db 0x69, 0x3C, 0x3D, 0x3F
   838                                  	; L_constants + 2854:
   839 00000B26 03                      	db T_string	; "string-ci=?"
   840 00000B27 0B00000000000000        	dq 11
   841 00000B2F 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   842 00000B37 693D3F                  	db 0x69, 0x3D, 0x3F
   843                                  	; L_constants + 2874:
   844 00000B3A 03                      	db T_string	; "string-ci>=?"
   845 00000B3B 0C00000000000000        	dq 12
   846 00000B43 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   847 00000B4B 693E3D3F                	db 0x69, 0x3E, 0x3D, 0x3F
   848                                  	; L_constants + 2895:
   849 00000B4F 03                      	db T_string	; "string-ci>?"
   850 00000B50 0B00000000000000        	dq 11
   851 00000B58 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   852 00000B60 693E3F                  	db 0x69, 0x3E, 0x3F
   853                                  	; L_constants + 2915:
   854 00000B63 03                      	db T_string	; "length"
   855 00000B64 0600000000000000        	dq 6
   856 00000B6C 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   857                                  	; L_constants + 2930:
   858 00000B72 41                      	db T_interned_symbol	; make-vector
   859 00000B73 [4804000000000000]      	dq L_constants + 1096
   860                                  	; L_constants + 2939:
   861 00000B7B 03                      	db T_string	; "Usage: (make-vector...
   862 00000B7C 2B00000000000000        	dq 43
   863 00000B84 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   864 00000B8C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   865 00000B94 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   866 00000B9C 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   867 00000BA4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   868 00000BAC 6C7429                  	db 0x6C, 0x74, 0x29
   869                                  	; L_constants + 2991:
   870 00000BAF 41                      	db T_interned_symbol	; make-string
   871 00000BB0 [5C04000000000000]      	dq L_constants + 1116
   872                                  	; L_constants + 3000:
   873 00000BB8 03                      	db T_string	; "Usage: (make-string...
   874 00000BB9 2B00000000000000        	dq 43
   875 00000BC1 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   876 00000BC9 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   877 00000BD1 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   878 00000BD9 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   879 00000BE1 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   880 00000BE9 6C7429                  	db 0x6C, 0x74, 0x29
   881                                  	; L_constants + 3052:
   882 00000BEC 03                      	db T_string	; "list->vector"
   883 00000BED 0C00000000000000        	dq 12
   884 00000BF5 6C6973742D3E7665        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x76, 0x65
   885 00000BFD 63746F72                	db 0x63, 0x74, 0x6F, 0x72
   886                                  	; L_constants + 3073:
   887 00000C01 03                      	db T_string	; "vector"
   888 00000C02 0600000000000000        	dq 6
   889 00000C0A 766563746F72            	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72
   890                                  	; L_constants + 3088:
   891 00000C10 03                      	db T_string	; "vector->list"
   892 00000C11 0C00000000000000        	dq 12
   893 00000C19 766563746F722D3E        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x3E
   894 00000C21 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   895                                  	; L_constants + 3109:
   896 00000C25 03                      	db T_string	; "random"
   897 00000C26 0600000000000000        	dq 6
   898 00000C2E 72616E646F6D            	db 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D
   899                                  	; L_constants + 3124:
   900 00000C34 03                      	db T_string	; "positive?"
   901 00000C35 0900000000000000        	dq 9
   902 00000C3D 706F736974697665        	db 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65
   903 00000C45 3F                      	db 0x3F
   904                                  	; L_constants + 3142:
   905 00000C46 03                      	db T_string	; "negative?"
   906 00000C47 0900000000000000        	dq 9
   907 00000C4F 6E65676174697665        	db 0x6E, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65
   908 00000C57 3F                      	db 0x3F
   909                                  	; L_constants + 3160:
   910 00000C58 03                      	db T_string	; "even?"
   911 00000C59 0500000000000000        	dq 5
   912 00000C61 6576656E3F              	db 0x65, 0x76, 0x65, 0x6E, 0x3F
   913                                  	; L_constants + 3174:
   914 00000C66 11                      	db T_integer	; 2
   915 00000C67 0200000000000000        	dq 2
   916                                  	; L_constants + 3183:
   917 00000C6F 03                      	db T_string	; "odd?"
   918 00000C70 0400000000000000        	dq 4
   919 00000C78 6F64643F                	db 0x6F, 0x64, 0x64, 0x3F
   920                                  	; L_constants + 3196:
   921 00000C7C 03                      	db T_string	; "abs"
   922 00000C7D 0300000000000000        	dq 3
   923 00000C85 616273                  	db 0x61, 0x62, 0x73
   924                                  	; L_constants + 3208:
   925 00000C88 03                      	db T_string	; "equal?"
   926 00000C89 0600000000000000        	dq 6
   927 00000C91 657175616C3F            	db 0x65, 0x71, 0x75, 0x61, 0x6C, 0x3F
   928                                  	; L_constants + 3223:
   929 00000C97 03                      	db T_string	; "assoc"
   930 00000C98 0500000000000000        	dq 5
   931 00000CA0 6173736F63              	db 0x61, 0x73, 0x73, 0x6F, 0x63
   932                                  	; L_constants + 3237:
   933 00000CA5 03                      	db T_string	; "string-append"
   934 00000CA6 0D00000000000000        	dq 13
   935 00000CAE 737472696E672D61        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x61
   936 00000CB6 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   937                                  	; L_constants + 3259:
   938 00000CBB 03                      	db T_string	; "vector-append"
   939 00000CBC 0D00000000000000        	dq 13
   940 00000CC4 766563746F722D61        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x61
   941 00000CCC 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   942                                  	; L_constants + 3281:
   943 00000CD1 03                      	db T_string	; "string-reverse"
   944 00000CD2 0E00000000000000        	dq 14
   945 00000CDA 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   946 00000CE2 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   947                                  	; L_constants + 3304:
   948 00000CE8 03                      	db T_string	; "vector-reverse"
   949 00000CE9 0E00000000000000        	dq 14
   950 00000CF1 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   951 00000CF9 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   952                                  	; L_constants + 3327:
   953 00000CFF 03                      	db T_string	; "string-reverse!"
   954 00000D00 0F00000000000000        	dq 15
   955 00000D08 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   956 00000D10 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   957                                  	; L_constants + 3351:
   958 00000D17 03                      	db T_string	; "vector-reverse!"
   959 00000D18 0F00000000000000        	dq 15
   960 00000D20 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   961 00000D28 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   962                                  	; L_constants + 3375:
   963 00000D2F 03                      	db T_string	; "make-list-thunk"
   964 00000D30 0F00000000000000        	dq 15
   965 00000D38 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   966 00000D40 742D7468756E6B          	db 0x74, 0x2D, 0x74, 0x68, 0x75, 0x6E, 0x6B
   967                                  	; L_constants + 3399:
   968 00000D47 03                      	db T_string	; "make-string-thunk"
   969 00000D48 1100000000000000        	dq 17
   970 00000D50 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   971 00000D58 696E672D7468756E        	db 0x69, 0x6E, 0x67, 0x2D, 0x74, 0x68, 0x75, 0x6E
   972 00000D60 6B                      	db 0x6B
   973                                  	; L_constants + 3425:
   974 00000D61 03                      	db T_string	; "make-vector-thunk"
   975 00000D62 1100000000000000        	dq 17
   976 00000D6A 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   977 00000D72 746F722D7468756E        	db 0x74, 0x6F, 0x72, 0x2D, 0x74, 0x68, 0x75, 0x6E
   978 00000D7A 6B                      	db 0x6B
   979                                  	; L_constants + 3451:
   980 00000D7B 03                      	db T_string	; "logarithm"
   981 00000D7C 0900000000000000        	dq 9
   982 00000D84 6C6F676172697468        	db 0x6C, 0x6F, 0x67, 0x61, 0x72, 0x69, 0x74, 0x68
   983 00000D8C 6D                      	db 0x6D
   984                                  	; L_constants + 3469:
   985 00000D8D 13                      	db T_real	; 1.000000
   986 00000D8E 000000000000F03F        	dq 1.000000
   987                                  	; L_constants + 3478:
   988 00000D96 03                      	db T_string	; "newline"
   989 00000D97 0700000000000000        	dq 7
   990 00000D9F 6E65776C696E65          	db 0x6E, 0x65, 0x77, 0x6C, 0x69, 0x6E, 0x65
   991                                  	; L_constants + 3494:
   992 00000DA6 020A                    	db T_char, 0x0A	; #\newline
   993                                  	; L_constants + 3496:
   994 00000DA8 11                      	db T_integer	; 3
   995 00000DA9 0300000000000000        	dq 3
   996                                  free_var_0:	; location of null?
   997 00000DB1 [B90D000000000000]      	dq .undefined_object
   998                                  .undefined_object:
   999 00000DB9 05                      	db T_undefined
  1000 00000DBA [0600000000000000]      	dq L_constants + 6
  1001                                  
  1002                                  free_var_1:	; location of pair?
  1003 00000DC2 [CA0D000000000000]      	dq .undefined_object
  1004                                  .undefined_object:
  1005 00000DCA 05                      	db T_undefined
  1006 00000DCB [1400000000000000]      	dq L_constants + 20
  1007                                  
  1008                                  free_var_2:	; location of void?
  1009 00000DD3 [DB0D000000000000]      	dq .undefined_object
  1010                                  .undefined_object:
  1011 00000DDB 05                      	db T_undefined
  1012 00000DDC [2200000000000000]      	dq L_constants + 34
  1013                                  
  1014                                  free_var_3:	; location of char?
  1015 00000DE4 [EC0D000000000000]      	dq .undefined_object
  1016                                  .undefined_object:
  1017 00000DEC 05                      	db T_undefined
  1018 00000DED [3000000000000000]      	dq L_constants + 48
  1019                                  
  1020                                  free_var_4:	; location of string?
  1021 00000DF5 [FD0D000000000000]      	dq .undefined_object
  1022                                  .undefined_object:
  1023 00000DFD 05                      	db T_undefined
  1024 00000DFE [3E00000000000000]      	dq L_constants + 62
  1025                                  
  1026                                  free_var_5:	; location of interned-symbol?
  1027 00000E06 [0E0E000000000000]      	dq .undefined_object
  1028                                  .undefined_object:
  1029 00000E0E 05                      	db T_undefined
  1030 00000E0F [4E00000000000000]      	dq L_constants + 78
  1031                                  
  1032                                  free_var_6:	; location of vector?
  1033 00000E17 [1F0E000000000000]      	dq .undefined_object
  1034                                  .undefined_object:
  1035 00000E1F 05                      	db T_undefined
  1036 00000E20 [6700000000000000]      	dq L_constants + 103
  1037                                  
  1038                                  free_var_7:	; location of procedure?
  1039 00000E28 [300E000000000000]      	dq .undefined_object
  1040                                  .undefined_object:
  1041 00000E30 05                      	db T_undefined
  1042 00000E31 [7700000000000000]      	dq L_constants + 119
  1043                                  
  1044                                  free_var_8:	; location of real?
  1045 00000E39 [410E000000000000]      	dq .undefined_object
  1046                                  .undefined_object:
  1047 00000E41 05                      	db T_undefined
  1048 00000E42 [8A00000000000000]      	dq L_constants + 138
  1049                                  
  1050                                  free_var_9:	; location of fraction?
  1051 00000E4A [520E000000000000]      	dq .undefined_object
  1052                                  .undefined_object:
  1053 00000E52 05                      	db T_undefined
  1054 00000E53 [9800000000000000]      	dq L_constants + 152
  1055                                  
  1056                                  free_var_10:	; location of boolean?
  1057 00000E5B [630E000000000000]      	dq .undefined_object
  1058                                  .undefined_object:
  1059 00000E63 05                      	db T_undefined
  1060 00000E64 [AA00000000000000]      	dq L_constants + 170
  1061                                  
  1062                                  free_var_11:	; location of number?
  1063 00000E6C [740E000000000000]      	dq .undefined_object
  1064                                  .undefined_object:
  1065 00000E74 05                      	db T_undefined
  1066 00000E75 [BB00000000000000]      	dq L_constants + 187
  1067                                  
  1068                                  free_var_12:	; location of collection?
  1069 00000E7D [850E000000000000]      	dq .undefined_object
  1070                                  .undefined_object:
  1071 00000E85 05                      	db T_undefined
  1072 00000E86 [CB00000000000000]      	dq L_constants + 203
  1073                                  
  1074                                  free_var_13:	; location of cons
  1075 00000E8E [960E000000000000]      	dq .undefined_object
  1076                                  .undefined_object:
  1077 00000E96 05                      	db T_undefined
  1078 00000E97 [DF00000000000000]      	dq L_constants + 223
  1079                                  
  1080                                  free_var_14:	; location of display-sexpr
  1081 00000E9F [A70E000000000000]      	dq .undefined_object
  1082                                  .undefined_object:
  1083 00000EA7 05                      	db T_undefined
  1084 00000EA8 [EC00000000000000]      	dq L_constants + 236
  1085                                  
  1086                                  free_var_15:	; location of write-char
  1087 00000EB0 [B80E000000000000]      	dq .undefined_object
  1088                                  .undefined_object:
  1089 00000EB8 05                      	db T_undefined
  1090 00000EB9 [0201000000000000]      	dq L_constants + 258
  1091                                  
  1092                                  free_var_16:	; location of car
  1093 00000EC1 [C90E000000000000]      	dq .undefined_object
  1094                                  .undefined_object:
  1095 00000EC9 05                      	db T_undefined
  1096 00000ECA [1501000000000000]      	dq L_constants + 277
  1097                                  
  1098                                  free_var_17:	; location of cdr
  1099 00000ED2 [DA0E000000000000]      	dq .undefined_object
  1100                                  .undefined_object:
  1101 00000EDA 05                      	db T_undefined
  1102 00000EDB [2101000000000000]      	dq L_constants + 289
  1103                                  
  1104                                  free_var_18:	; location of string-length
  1105 00000EE3 [EB0E000000000000]      	dq .undefined_object
  1106                                  .undefined_object:
  1107 00000EEB 05                      	db T_undefined
  1108 00000EEC [2D01000000000000]      	dq L_constants + 301
  1109                                  
  1110                                  free_var_19:	; location of vector-length
  1111 00000EF4 [FC0E000000000000]      	dq .undefined_object
  1112                                  .undefined_object:
  1113 00000EFC 05                      	db T_undefined
  1114 00000EFD [4301000000000000]      	dq L_constants + 323
  1115                                  
  1116                                  free_var_20:	; location of real->integer
  1117 00000F05 [0D0F000000000000]      	dq .undefined_object
  1118                                  .undefined_object:
  1119 00000F0D 05                      	db T_undefined
  1120 00000F0E [5901000000000000]      	dq L_constants + 345
  1121                                  
  1122                                  free_var_21:	; location of exit
  1123 00000F16 [1E0F000000000000]      	dq .undefined_object
  1124                                  .undefined_object:
  1125 00000F1E 05                      	db T_undefined
  1126 00000F1F [6F01000000000000]      	dq L_constants + 367
  1127                                  
  1128                                  free_var_22:	; location of integer->real
  1129 00000F27 [2F0F000000000000]      	dq .undefined_object
  1130                                  .undefined_object:
  1131 00000F2F 05                      	db T_undefined
  1132 00000F30 [7C01000000000000]      	dq L_constants + 380
  1133                                  
  1134                                  free_var_23:	; location of fraction->real
  1135 00000F38 [400F000000000000]      	dq .undefined_object
  1136                                  .undefined_object:
  1137 00000F40 05                      	db T_undefined
  1138 00000F41 [9201000000000000]      	dq L_constants + 402
  1139                                  
  1140                                  free_var_24:	; location of char->integer
  1141 00000F49 [510F000000000000]      	dq .undefined_object
  1142                                  .undefined_object:
  1143 00000F51 05                      	db T_undefined
  1144 00000F52 [A901000000000000]      	dq L_constants + 425
  1145                                  
  1146                                  free_var_25:	; location of integer->char
  1147 00000F5A [620F000000000000]      	dq .undefined_object
  1148                                  .undefined_object:
  1149 00000F62 05                      	db T_undefined
  1150 00000F63 [BF01000000000000]      	dq L_constants + 447
  1151                                  
  1152                                  free_var_26:	; location of trng
  1153 00000F6B [730F000000000000]      	dq .undefined_object
  1154                                  .undefined_object:
  1155 00000F73 05                      	db T_undefined
  1156 00000F74 [D501000000000000]      	dq L_constants + 469
  1157                                  
  1158                                  free_var_27:	; location of zero?
  1159 00000F7C [840F000000000000]      	dq .undefined_object
  1160                                  .undefined_object:
  1161 00000F84 05                      	db T_undefined
  1162 00000F85 [E201000000000000]      	dq L_constants + 482
  1163                                  
  1164                                  free_var_28:	; location of integer?
  1165 00000F8D [950F000000000000]      	dq .undefined_object
  1166                                  .undefined_object:
  1167 00000F95 05                      	db T_undefined
  1168 00000F96 [F001000000000000]      	dq L_constants + 496
  1169                                  
  1170                                  free_var_29:	; location of __bin-apply
  1171 00000F9E [A60F000000000000]      	dq .undefined_object
  1172                                  .undefined_object:
  1173 00000FA6 05                      	db T_undefined
  1174 00000FA7 [0102000000000000]      	dq L_constants + 513
  1175                                  
  1176                                  free_var_30:	; location of __bin-add-rr
  1177 00000FAF [B70F000000000000]      	dq .undefined_object
  1178                                  .undefined_object:
  1179 00000FB7 05                      	db T_undefined
  1180 00000FB8 [1502000000000000]      	dq L_constants + 533
  1181                                  
  1182                                  free_var_31:	; location of __bin-sub-rr
  1183 00000FC0 [C80F000000000000]      	dq .undefined_object
  1184                                  .undefined_object:
  1185 00000FC8 05                      	db T_undefined
  1186 00000FC9 [2A02000000000000]      	dq L_constants + 554
  1187                                  
  1188                                  free_var_32:	; location of __bin-mul-rr
  1189 00000FD1 [D90F000000000000]      	dq .undefined_object
  1190                                  .undefined_object:
  1191 00000FD9 05                      	db T_undefined
  1192 00000FDA [3F02000000000000]      	dq L_constants + 575
  1193                                  
  1194                                  free_var_33:	; location of __bin-div-rr
  1195 00000FE2 [EA0F000000000000]      	dq .undefined_object
  1196                                  .undefined_object:
  1197 00000FEA 05                      	db T_undefined
  1198 00000FEB [5402000000000000]      	dq L_constants + 596
  1199                                  
  1200                                  free_var_34:	; location of __bin-add-qq
  1201 00000FF3 [FB0F000000000000]      	dq .undefined_object
  1202                                  .undefined_object:
  1203 00000FFB 05                      	db T_undefined
  1204 00000FFC [6902000000000000]      	dq L_constants + 617
  1205                                  
  1206                                  free_var_35:	; location of __bin-sub-qq
  1207 00001004 [0C10000000000000]      	dq .undefined_object
  1208                                  .undefined_object:
  1209 0000100C 05                      	db T_undefined
  1210 0000100D [7E02000000000000]      	dq L_constants + 638
  1211                                  
  1212                                  free_var_36:	; location of __bin-mul-qq
  1213 00001015 [1D10000000000000]      	dq .undefined_object
  1214                                  .undefined_object:
  1215 0000101D 05                      	db T_undefined
  1216 0000101E [9302000000000000]      	dq L_constants + 659
  1217                                  
  1218                                  free_var_37:	; location of __bin-div-qq
  1219 00001026 [2E10000000000000]      	dq .undefined_object
  1220                                  .undefined_object:
  1221 0000102E 05                      	db T_undefined
  1222 0000102F [A802000000000000]      	dq L_constants + 680
  1223                                  
  1224                                  free_var_38:	; location of __bin-add-zz
  1225 00001037 [3F10000000000000]      	dq .undefined_object
  1226                                  .undefined_object:
  1227 0000103F 05                      	db T_undefined
  1228 00001040 [BD02000000000000]      	dq L_constants + 701
  1229                                  
  1230                                  free_var_39:	; location of __bin-sub-zz
  1231 00001048 [5010000000000000]      	dq .undefined_object
  1232                                  .undefined_object:
  1233 00001050 05                      	db T_undefined
  1234 00001051 [D202000000000000]      	dq L_constants + 722
  1235                                  
  1236                                  free_var_40:	; location of __bin-mul-zz
  1237 00001059 [6110000000000000]      	dq .undefined_object
  1238                                  .undefined_object:
  1239 00001061 05                      	db T_undefined
  1240 00001062 [E702000000000000]      	dq L_constants + 743
  1241                                  
  1242                                  free_var_41:	; location of __bin-div-zz
  1243 0000106A [7210000000000000]      	dq .undefined_object
  1244                                  .undefined_object:
  1245 00001072 05                      	db T_undefined
  1246 00001073 [FC02000000000000]      	dq L_constants + 764
  1247                                  
  1248                                  free_var_42:	; location of error
  1249 0000107B [8310000000000000]      	dq .undefined_object
  1250                                  .undefined_object:
  1251 00001083 05                      	db T_undefined
  1252 00001084 [1103000000000000]      	dq L_constants + 785
  1253                                  
  1254                                  free_var_43:	; location of __bin-less-than-rr
  1255 0000108C [9410000000000000]      	dq .undefined_object
  1256                                  .undefined_object:
  1257 00001094 05                      	db T_undefined
  1258 00001095 [1F03000000000000]      	dq L_constants + 799
  1259                                  
  1260                                  free_var_44:	; location of __bin-less-than-qq
  1261 0000109D [A510000000000000]      	dq .undefined_object
  1262                                  .undefined_object:
  1263 000010A5 05                      	db T_undefined
  1264 000010A6 [3A03000000000000]      	dq L_constants + 826
  1265                                  
  1266                                  free_var_45:	; location of __bin-less-than-zz
  1267 000010AE [B610000000000000]      	dq .undefined_object
  1268                                  .undefined_object:
  1269 000010B6 05                      	db T_undefined
  1270 000010B7 [5503000000000000]      	dq L_constants + 853
  1271                                  
  1272                                  free_var_46:	; location of __bin-equal-rr
  1273 000010BF [C710000000000000]      	dq .undefined_object
  1274                                  .undefined_object:
  1275 000010C7 05                      	db T_undefined
  1276 000010C8 [7003000000000000]      	dq L_constants + 880
  1277                                  
  1278                                  free_var_47:	; location of __bin-equal-qq
  1279 000010D0 [D810000000000000]      	dq .undefined_object
  1280                                  .undefined_object:
  1281 000010D8 05                      	db T_undefined
  1282 000010D9 [8703000000000000]      	dq L_constants + 903
  1283                                  
  1284                                  free_var_48:	; location of __bin-equal-zz
  1285 000010E1 [E910000000000000]      	dq .undefined_object
  1286                                  .undefined_object:
  1287 000010E9 05                      	db T_undefined
  1288 000010EA [9E03000000000000]      	dq L_constants + 926
  1289                                  
  1290                                  free_var_49:	; location of quotient
  1291 000010F2 [FA10000000000000]      	dq .undefined_object
  1292                                  .undefined_object:
  1293 000010FA 05                      	db T_undefined
  1294 000010FB [B503000000000000]      	dq L_constants + 949
  1295                                  
  1296                                  free_var_50:	; location of remainder
  1297 00001103 [0B11000000000000]      	dq .undefined_object
  1298                                  .undefined_object:
  1299 0000110B 05                      	db T_undefined
  1300 0000110C [C603000000000000]      	dq L_constants + 966
  1301                                  
  1302                                  free_var_51:	; location of set-car!
  1303 00001114 [1C11000000000000]      	dq .undefined_object
  1304                                  .undefined_object:
  1305 0000111C 05                      	db T_undefined
  1306 0000111D [D803000000000000]      	dq L_constants + 984
  1307                                  
  1308                                  free_var_52:	; location of set-cdr!
  1309 00001125 [2D11000000000000]      	dq .undefined_object
  1310                                  .undefined_object:
  1311 0000112D 05                      	db T_undefined
  1312 0000112E [E903000000000000]      	dq L_constants + 1001
  1313                                  
  1314                                  free_var_53:	; location of string-ref
  1315 00001136 [3E11000000000000]      	dq .undefined_object
  1316                                  .undefined_object:
  1317 0000113E 05                      	db T_undefined
  1318 0000113F [FA03000000000000]      	dq L_constants + 1018
  1319                                  
  1320                                  free_var_54:	; location of vector-ref
  1321 00001147 [4F11000000000000]      	dq .undefined_object
  1322                                  .undefined_object:
  1323 0000114F 05                      	db T_undefined
  1324 00001150 [0D04000000000000]      	dq L_constants + 1037
  1325                                  
  1326                                  free_var_55:	; location of vector-set!
  1327 00001158 [6011000000000000]      	dq .undefined_object
  1328                                  .undefined_object:
  1329 00001160 05                      	db T_undefined
  1330 00001161 [2004000000000000]      	dq L_constants + 1056
  1331                                  
  1332                                  free_var_56:	; location of string-set!
  1333 00001169 [7111000000000000]      	dq .undefined_object
  1334                                  .undefined_object:
  1335 00001171 05                      	db T_undefined
  1336 00001172 [3404000000000000]      	dq L_constants + 1076
  1337                                  
  1338                                  free_var_57:	; location of make-vector
  1339 0000117A [8211000000000000]      	dq .undefined_object
  1340                                  .undefined_object:
  1341 00001182 05                      	db T_undefined
  1342 00001183 [4804000000000000]      	dq L_constants + 1096
  1343                                  
  1344                                  free_var_58:	; location of make-string
  1345 0000118B [9311000000000000]      	dq .undefined_object
  1346                                  .undefined_object:
  1347 00001193 05                      	db T_undefined
  1348 00001194 [5C04000000000000]      	dq L_constants + 1116
  1349                                  
  1350                                  free_var_59:	; location of numerator
  1351 0000119C [A411000000000000]      	dq .undefined_object
  1352                                  .undefined_object:
  1353 000011A4 05                      	db T_undefined
  1354 000011A5 [7004000000000000]      	dq L_constants + 1136
  1355                                  
  1356                                  free_var_60:	; location of denominator
  1357 000011AD [B511000000000000]      	dq .undefined_object
  1358                                  .undefined_object:
  1359 000011B5 05                      	db T_undefined
  1360 000011B6 [8204000000000000]      	dq L_constants + 1154
  1361                                  
  1362                                  free_var_61:	; location of eq?
  1363 000011BE [C611000000000000]      	dq .undefined_object
  1364                                  .undefined_object:
  1365 000011C6 05                      	db T_undefined
  1366 000011C7 [9604000000000000]      	dq L_constants + 1174
  1367                                  
  1368                                  free_var_62:	; location of __integer-to-fraction
  1369 000011CF [D711000000000000]      	dq .undefined_object
  1370                                  .undefined_object:
  1371 000011D7 05                      	db T_undefined
  1372 000011D8 [A204000000000000]      	dq L_constants + 1186
  1373                                  
  1374                                  free_var_63:	; location of logand
  1375 000011E0 [E811000000000000]      	dq .undefined_object
  1376                                  .undefined_object:
  1377 000011E8 05                      	db T_undefined
  1378 000011E9 [C004000000000000]      	dq L_constants + 1216
  1379                                  
  1380                                  free_var_64:	; location of logor
  1381 000011F1 [F911000000000000]      	dq .undefined_object
  1382                                  .undefined_object:
  1383 000011F9 05                      	db T_undefined
  1384 000011FA [CF04000000000000]      	dq L_constants + 1231
  1385                                  
  1386                                  free_var_65:	; location of logxor
  1387 00001202 [0A12000000000000]      	dq .undefined_object
  1388                                  .undefined_object:
  1389 0000120A 05                      	db T_undefined
  1390 0000120B [DD04000000000000]      	dq L_constants + 1245
  1391                                  
  1392                                  free_var_66:	; location of lognot
  1393 00001213 [1B12000000000000]      	dq .undefined_object
  1394                                  .undefined_object:
  1395 0000121B 05                      	db T_undefined
  1396 0000121C [EC04000000000000]      	dq L_constants + 1260
  1397                                  
  1398                                  free_var_67:	; location of ash
  1399 00001224 [2C12000000000000]      	dq .undefined_object
  1400                                  .undefined_object:
  1401 0000122C 05                      	db T_undefined
  1402 0000122D [FB04000000000000]      	dq L_constants + 1275
  1403                                  
  1404                                  free_var_68:	; location of symbol?
  1405 00001235 [3D12000000000000]      	dq .undefined_object
  1406                                  .undefined_object:
  1407 0000123D 05                      	db T_undefined
  1408 0000123E [0705000000000000]      	dq L_constants + 1287
  1409                                  
  1410                                  free_var_69:	; location of uninterned-symbol?
  1411 00001246 [4E12000000000000]      	dq .undefined_object
  1412                                  .undefined_object:
  1413 0000124E 05                      	db T_undefined
  1414 0000124F [1705000000000000]      	dq L_constants + 1303
  1415                                  
  1416                                  free_var_70:	; location of gensym?
  1417 00001257 [5F12000000000000]      	dq .undefined_object
  1418                                  .undefined_object:
  1419 0000125F 05                      	db T_undefined
  1420 00001260 [3205000000000000]      	dq L_constants + 1330
  1421                                  
  1422                                  free_var_71:	; location of gensym
  1423 00001268 [7012000000000000]      	dq .undefined_object
  1424                                  .undefined_object:
  1425 00001270 05                      	db T_undefined
  1426 00001271 [4205000000000000]      	dq L_constants + 1346
  1427                                  
  1428                                  free_var_72:	; location of frame
  1429 00001279 [8112000000000000]      	dq .undefined_object
  1430                                  .undefined_object:
  1431 00001281 05                      	db T_undefined
  1432 00001282 [5105000000000000]      	dq L_constants + 1361
  1433                                  
  1434                                  free_var_73:	; location of break
  1435 0000128A [9212000000000000]      	dq .undefined_object
  1436                                  .undefined_object:
  1437 00001292 05                      	db T_undefined
  1438 00001293 [5F05000000000000]      	dq L_constants + 1375
  1439                                  
  1440                                  free_var_74:	; location of caar
  1441 0000129B [A312000000000000]      	dq .undefined_object
  1442                                  .undefined_object:
  1443 000012A3 05                      	db T_undefined
  1444 000012A4 [6D05000000000000]      	dq L_constants + 1389
  1445                                  
  1446                                  free_var_75:	; location of cadr
  1447 000012AC [B412000000000000]      	dq .undefined_object
  1448                                  .undefined_object:
  1449 000012B4 05                      	db T_undefined
  1450 000012B5 [7A05000000000000]      	dq L_constants + 1402
  1451                                  
  1452                                  free_var_76:	; location of cdar
  1453 000012BD [C512000000000000]      	dq .undefined_object
  1454                                  .undefined_object:
  1455 000012C5 05                      	db T_undefined
  1456 000012C6 [8705000000000000]      	dq L_constants + 1415
  1457                                  
  1458                                  free_var_77:	; location of cddr
  1459 000012CE [D612000000000000]      	dq .undefined_object
  1460                                  .undefined_object:
  1461 000012D6 05                      	db T_undefined
  1462 000012D7 [9405000000000000]      	dq L_constants + 1428
  1463                                  
  1464                                  free_var_78:	; location of caaar
  1465 000012DF [E712000000000000]      	dq .undefined_object
  1466                                  .undefined_object:
  1467 000012E7 05                      	db T_undefined
  1468 000012E8 [A105000000000000]      	dq L_constants + 1441
  1469                                  
  1470                                  free_var_79:	; location of caadr
  1471 000012F0 [F812000000000000]      	dq .undefined_object
  1472                                  .undefined_object:
  1473 000012F8 05                      	db T_undefined
  1474 000012F9 [AF05000000000000]      	dq L_constants + 1455
  1475                                  
  1476                                  free_var_80:	; location of cadar
  1477 00001301 [0913000000000000]      	dq .undefined_object
  1478                                  .undefined_object:
  1479 00001309 05                      	db T_undefined
  1480 0000130A [BD05000000000000]      	dq L_constants + 1469
  1481                                  
  1482                                  free_var_81:	; location of caddr
  1483 00001312 [1A13000000000000]      	dq .undefined_object
  1484                                  .undefined_object:
  1485 0000131A 05                      	db T_undefined
  1486 0000131B [CB05000000000000]      	dq L_constants + 1483
  1487                                  
  1488                                  free_var_82:	; location of cdaar
  1489 00001323 [2B13000000000000]      	dq .undefined_object
  1490                                  .undefined_object:
  1491 0000132B 05                      	db T_undefined
  1492 0000132C [D905000000000000]      	dq L_constants + 1497
  1493                                  
  1494                                  free_var_83:	; location of cdadr
  1495 00001334 [3C13000000000000]      	dq .undefined_object
  1496                                  .undefined_object:
  1497 0000133C 05                      	db T_undefined
  1498 0000133D [E705000000000000]      	dq L_constants + 1511
  1499                                  
  1500                                  free_var_84:	; location of cddar
  1501 00001345 [4D13000000000000]      	dq .undefined_object
  1502                                  .undefined_object:
  1503 0000134D 05                      	db T_undefined
  1504 0000134E [F505000000000000]      	dq L_constants + 1525
  1505                                  
  1506                                  free_var_85:	; location of cdddr
  1507 00001356 [5E13000000000000]      	dq .undefined_object
  1508                                  .undefined_object:
  1509 0000135E 05                      	db T_undefined
  1510 0000135F [0306000000000000]      	dq L_constants + 1539
  1511                                  
  1512                                  free_var_86:	; location of caaaar
  1513 00001367 [6F13000000000000]      	dq .undefined_object
  1514                                  .undefined_object:
  1515 0000136F 05                      	db T_undefined
  1516 00001370 [1106000000000000]      	dq L_constants + 1553
  1517                                  
  1518                                  free_var_87:	; location of caaadr
  1519 00001378 [8013000000000000]      	dq .undefined_object
  1520                                  .undefined_object:
  1521 00001380 05                      	db T_undefined
  1522 00001381 [2006000000000000]      	dq L_constants + 1568
  1523                                  
  1524                                  free_var_88:	; location of caadar
  1525 00001389 [9113000000000000]      	dq .undefined_object
  1526                                  .undefined_object:
  1527 00001391 05                      	db T_undefined
  1528 00001392 [2F06000000000000]      	dq L_constants + 1583
  1529                                  
  1530                                  free_var_89:	; location of caaddr
  1531 0000139A [A213000000000000]      	dq .undefined_object
  1532                                  .undefined_object:
  1533 000013A2 05                      	db T_undefined
  1534 000013A3 [3E06000000000000]      	dq L_constants + 1598
  1535                                  
  1536                                  free_var_90:	; location of cadaar
  1537 000013AB [B313000000000000]      	dq .undefined_object
  1538                                  .undefined_object:
  1539 000013B3 05                      	db T_undefined
  1540 000013B4 [4D06000000000000]      	dq L_constants + 1613
  1541                                  
  1542                                  free_var_91:	; location of cadadr
  1543 000013BC [C413000000000000]      	dq .undefined_object
  1544                                  .undefined_object:
  1545 000013C4 05                      	db T_undefined
  1546 000013C5 [5C06000000000000]      	dq L_constants + 1628
  1547                                  
  1548                                  free_var_92:	; location of caddar
  1549 000013CD [D513000000000000]      	dq .undefined_object
  1550                                  .undefined_object:
  1551 000013D5 05                      	db T_undefined
  1552 000013D6 [6B06000000000000]      	dq L_constants + 1643
  1553                                  
  1554                                  free_var_93:	; location of cadddr
  1555 000013DE [E613000000000000]      	dq .undefined_object
  1556                                  .undefined_object:
  1557 000013E6 05                      	db T_undefined
  1558 000013E7 [7A06000000000000]      	dq L_constants + 1658
  1559                                  
  1560                                  free_var_94:	; location of cdaaar
  1561 000013EF [F713000000000000]      	dq .undefined_object
  1562                                  .undefined_object:
  1563 000013F7 05                      	db T_undefined
  1564 000013F8 [8906000000000000]      	dq L_constants + 1673
  1565                                  
  1566                                  free_var_95:	; location of cdaadr
  1567 00001400 [0814000000000000]      	dq .undefined_object
  1568                                  .undefined_object:
  1569 00001408 05                      	db T_undefined
  1570 00001409 [9806000000000000]      	dq L_constants + 1688
  1571                                  
  1572                                  free_var_96:	; location of cdadar
  1573 00001411 [1914000000000000]      	dq .undefined_object
  1574                                  .undefined_object:
  1575 00001419 05                      	db T_undefined
  1576 0000141A [A706000000000000]      	dq L_constants + 1703
  1577                                  
  1578                                  free_var_97:	; location of cdaddr
  1579 00001422 [2A14000000000000]      	dq .undefined_object
  1580                                  .undefined_object:
  1581 0000142A 05                      	db T_undefined
  1582 0000142B [B606000000000000]      	dq L_constants + 1718
  1583                                  
  1584                                  free_var_98:	; location of cddaar
  1585 00001433 [3B14000000000000]      	dq .undefined_object
  1586                                  .undefined_object:
  1587 0000143B 05                      	db T_undefined
  1588 0000143C [C506000000000000]      	dq L_constants + 1733
  1589                                  
  1590                                  free_var_99:	; location of cddadr
  1591 00001444 [4C14000000000000]      	dq .undefined_object
  1592                                  .undefined_object:
  1593 0000144C 05                      	db T_undefined
  1594 0000144D [D406000000000000]      	dq L_constants + 1748
  1595                                  
  1596                                  free_var_100:	; location of cdddar
  1597 00001455 [5D14000000000000]      	dq .undefined_object
  1598                                  .undefined_object:
  1599 0000145D 05                      	db T_undefined
  1600 0000145E [E306000000000000]      	dq L_constants + 1763
  1601                                  
  1602                                  free_var_101:	; location of cddddr
  1603 00001466 [6E14000000000000]      	dq .undefined_object
  1604                                  .undefined_object:
  1605 0000146E 05                      	db T_undefined
  1606 0000146F [F206000000000000]      	dq L_constants + 1778
  1607                                  
  1608                                  free_var_102:	; location of list?
  1609 00001477 [7F14000000000000]      	dq .undefined_object
  1610                                  .undefined_object:
  1611 0000147F 05                      	db T_undefined
  1612 00001480 [0107000000000000]      	dq L_constants + 1793
  1613                                  
  1614                                  free_var_103:	; location of list
  1615 00001488 [9014000000000000]      	dq .undefined_object
  1616                                  .undefined_object:
  1617 00001490 05                      	db T_undefined
  1618 00001491 [0F07000000000000]      	dq L_constants + 1807
  1619                                  
  1620                                  free_var_104:	; location of not
  1621 00001499 [A114000000000000]      	dq .undefined_object
  1622                                  .undefined_object:
  1623 000014A1 05                      	db T_undefined
  1624 000014A2 [1C07000000000000]      	dq L_constants + 1820
  1625                                  
  1626                                  free_var_105:	; location of rational?
  1627 000014AA [B214000000000000]      	dq .undefined_object
  1628                                  .undefined_object:
  1629 000014B2 05                      	db T_undefined
  1630 000014B3 [2807000000000000]      	dq L_constants + 1832
  1631                                  
  1632                                  free_var_106:	; location of list*
  1633 000014BB [C314000000000000]      	dq .undefined_object
  1634                                  .undefined_object:
  1635 000014C3 05                      	db T_undefined
  1636 000014C4 [3A07000000000000]      	dq L_constants + 1850
  1637                                  
  1638                                  free_var_107:	; location of apply
  1639 000014CC [D414000000000000]      	dq .undefined_object
  1640                                  .undefined_object:
  1641 000014D4 05                      	db T_undefined
  1642 000014D5 [6207000000000000]      	dq L_constants + 1890
  1643                                  
  1644                                  free_var_108:	; location of ormap
  1645 000014DD [E514000000000000]      	dq .undefined_object
  1646                                  .undefined_object:
  1647 000014E5 05                      	db T_undefined
  1648 000014E6 [7007000000000000]      	dq L_constants + 1904
  1649                                  
  1650                                  free_var_109:	; location of map
  1651 000014EE [F614000000000000]      	dq .undefined_object
  1652                                  .undefined_object:
  1653 000014F6 05                      	db T_undefined
  1654 000014F7 [7E07000000000000]      	dq L_constants + 1918
  1655                                  
  1656                                  free_var_110:	; location of andmap
  1657 000014FF [0715000000000000]      	dq .undefined_object
  1658                                  .undefined_object:
  1659 00001507 05                      	db T_undefined
  1660 00001508 [8A07000000000000]      	dq L_constants + 1930
  1661                                  
  1662                                  free_var_111:	; location of reverse
  1663 00001510 [1815000000000000]      	dq .undefined_object
  1664                                  .undefined_object:
  1665 00001518 05                      	db T_undefined
  1666 00001519 [9907000000000000]      	dq L_constants + 1945
  1667                                  
  1668                                  free_var_112:	; location of fold-left
  1669 00001521 [2915000000000000]      	dq .undefined_object
  1670                                  .undefined_object:
  1671 00001529 05                      	db T_undefined
  1672 0000152A [A907000000000000]      	dq L_constants + 1961
  1673                                  
  1674                                  free_var_113:	; location of append
  1675 00001532 [3A15000000000000]      	dq .undefined_object
  1676                                  .undefined_object:
  1677 0000153A 05                      	db T_undefined
  1678 0000153B [BB07000000000000]      	dq L_constants + 1979
  1679                                  
  1680                                  free_var_114:	; location of fold-right
  1681 00001543 [4B15000000000000]      	dq .undefined_object
  1682                                  .undefined_object:
  1683 0000154B 05                      	db T_undefined
  1684 0000154C [CA07000000000000]      	dq L_constants + 1994
  1685                                  
  1686                                  free_var_115:	; location of +
  1687 00001554 [5C15000000000000]      	dq .undefined_object
  1688                                  .undefined_object:
  1689 0000155C 05                      	db T_undefined
  1690 0000155D [DD07000000000000]      	dq L_constants + 2013
  1691                                  
  1692                                  free_var_116:	; location of __bin_integer_to_fraction
  1693 00001565 [6D15000000000000]      	dq .undefined_object
  1694                                  .undefined_object:
  1695 0000156D 05                      	db T_undefined
  1696 0000156E [F007000000000000]      	dq L_constants + 2032
  1697                                  
  1698                                  free_var_117:	; location of -
  1699 00001576 [7E15000000000000]      	dq .undefined_object
  1700                                  .undefined_object:
  1701 0000157E 05                      	db T_undefined
  1702 0000157F [4408000000000000]      	dq L_constants + 2116
  1703                                  
  1704                                  free_var_118:	; location of real
  1705 00001587 [8F15000000000000]      	dq .undefined_object
  1706                                  .undefined_object:
  1707 0000158F 05                      	db T_undefined
  1708 00001590 [4E08000000000000]      	dq L_constants + 2126
  1709                                  
  1710                                  free_var_119:	; location of *
  1711 00001598 [A015000000000000]      	dq .undefined_object
  1712                                  .undefined_object:
  1713 000015A0 05                      	db T_undefined
  1714 000015A1 [6408000000000000]      	dq L_constants + 2148
  1715                                  
  1716                                  free_var_120:	; location of /
  1717 000015A9 [B115000000000000]      	dq .undefined_object
  1718                                  .undefined_object:
  1719 000015B1 05                      	db T_undefined
  1720 000015B2 [8008000000000000]      	dq L_constants + 2176
  1721                                  
  1722                                  free_var_121:	; location of fact
  1723 000015BA [C215000000000000]      	dq .undefined_object
  1724                                  .undefined_object:
  1725 000015C2 05                      	db T_undefined
  1726 000015C3 [9308000000000000]      	dq L_constants + 2195
  1727                                  
  1728                                  free_var_122:	; location of <
  1729 000015CB [D315000000000000]      	dq .undefined_object
  1730                                  .undefined_object:
  1731 000015D3 05                      	db T_undefined
  1732 000015D4 [A008000000000000]      	dq L_constants + 2208
  1733                                  
  1734                                  free_var_123:	; location of <=
  1735 000015DC [E415000000000000]      	dq .undefined_object
  1736                                  .undefined_object:
  1737 000015E4 05                      	db T_undefined
  1738 000015E5 [AA08000000000000]      	dq L_constants + 2218
  1739                                  
  1740                                  free_var_124:	; location of >
  1741 000015ED [F515000000000000]      	dq .undefined_object
  1742                                  .undefined_object:
  1743 000015F5 05                      	db T_undefined
  1744 000015F6 [B508000000000000]      	dq L_constants + 2229
  1745                                  
  1746                                  free_var_125:	; location of >=
  1747 000015FE [0616000000000000]      	dq .undefined_object
  1748                                  .undefined_object:
  1749 00001606 05                      	db T_undefined
  1750 00001607 [BF08000000000000]      	dq L_constants + 2239
  1751                                  
  1752                                  free_var_126:	; location of =
  1753 0000160F [1716000000000000]      	dq .undefined_object
  1754                                  .undefined_object:
  1755 00001617 05                      	db T_undefined
  1756 00001618 [CA08000000000000]      	dq L_constants + 2250
  1757                                  
  1758                                  free_var_127:	; location of make-list
  1759 00001620 [2816000000000000]      	dq .undefined_object
  1760                                  .undefined_object:
  1761 00001628 05                      	db T_undefined
  1762 00001629 [2209000000000000]      	dq L_constants + 2338
  1763                                  
  1764                                  free_var_128:	; location of char<?
  1765 00001631 [3916000000000000]      	dq .undefined_object
  1766                                  .undefined_object:
  1767 00001639 05                      	db T_undefined
  1768 0000163A [7309000000000000]      	dq L_constants + 2419
  1769                                  
  1770                                  free_var_129:	; location of char<=?
  1771 00001642 [4A16000000000000]      	dq .undefined_object
  1772                                  .undefined_object:
  1773 0000164A 05                      	db T_undefined
  1774 0000164B [8209000000000000]      	dq L_constants + 2434
  1775                                  
  1776                                  free_var_130:	; location of char=?
  1777 00001653 [5B16000000000000]      	dq .undefined_object
  1778                                  .undefined_object:
  1779 0000165B 05                      	db T_undefined
  1780 0000165C [9209000000000000]      	dq L_constants + 2450
  1781                                  
  1782                                  free_var_131:	; location of char>?
  1783 00001664 [6C16000000000000]      	dq .undefined_object
  1784                                  .undefined_object:
  1785 0000166C 05                      	db T_undefined
  1786 0000166D [A109000000000000]      	dq L_constants + 2465
  1787                                  
  1788                                  free_var_132:	; location of char>=?
  1789 00001675 [7D16000000000000]      	dq .undefined_object
  1790                                  .undefined_object:
  1791 0000167D 05                      	db T_undefined
  1792 0000167E [B009000000000000]      	dq L_constants + 2480
  1793                                  
  1794                                  free_var_133:	; location of char-downcase
  1795 00001686 [8E16000000000000]      	dq .undefined_object
  1796                                  .undefined_object:
  1797 0000168E 05                      	db T_undefined
  1798 0000168F [C009000000000000]      	dq L_constants + 2496
  1799                                  
  1800                                  free_var_134:	; location of char-upcase
  1801 00001697 [9F16000000000000]      	dq .undefined_object
  1802                                  .undefined_object:
  1803 0000169F 05                      	db T_undefined
  1804 000016A0 [D609000000000000]      	dq L_constants + 2518
  1805                                  
  1806                                  free_var_135:	; location of char-ci<?
  1807 000016A8 [B016000000000000]      	dq .undefined_object
  1808                                  .undefined_object:
  1809 000016B0 05                      	db T_undefined
  1810 000016B1 [F209000000000000]      	dq L_constants + 2546
  1811                                  
  1812                                  free_var_136:	; location of char-ci<=?
  1813 000016B9 [C116000000000000]      	dq .undefined_object
  1814                                  .undefined_object:
  1815 000016C1 05                      	db T_undefined
  1816 000016C2 [040A000000000000]      	dq L_constants + 2564
  1817                                  
  1818                                  free_var_137:	; location of char-ci=?
  1819 000016CA [D216000000000000]      	dq .undefined_object
  1820                                  .undefined_object:
  1821 000016D2 05                      	db T_undefined
  1822 000016D3 [170A000000000000]      	dq L_constants + 2583
  1823                                  
  1824                                  free_var_138:	; location of char-ci>?
  1825 000016DB [E316000000000000]      	dq .undefined_object
  1826                                  .undefined_object:
  1827 000016E3 05                      	db T_undefined
  1828 000016E4 [290A000000000000]      	dq L_constants + 2601
  1829                                  
  1830                                  free_var_139:	; location of char-ci>=?
  1831 000016EC [F416000000000000]      	dq .undefined_object
  1832                                  .undefined_object:
  1833 000016F4 05                      	db T_undefined
  1834 000016F5 [3B0A000000000000]      	dq L_constants + 2619
  1835                                  
  1836                                  free_var_140:	; location of string-downcase
  1837 000016FD [0517000000000000]      	dq .undefined_object
  1838                                  .undefined_object:
  1839 00001705 05                      	db T_undefined
  1840 00001706 [4E0A000000000000]      	dq L_constants + 2638
  1841                                  
  1842                                  free_var_141:	; location of string-upcase
  1843 0000170E [1617000000000000]      	dq .undefined_object
  1844                                  .undefined_object:
  1845 00001716 05                      	db T_undefined
  1846 00001717 [660A000000000000]      	dq L_constants + 2662
  1847                                  
  1848                                  free_var_142:	; location of list->string
  1849 0000171F [2717000000000000]      	dq .undefined_object
  1850                                  .undefined_object:
  1851 00001727 05                      	db T_undefined
  1852 00001728 [7C0A000000000000]      	dq L_constants + 2684
  1853                                  
  1854                                  free_var_143:	; location of string->list
  1855 00001730 [3817000000000000]      	dq .undefined_object
  1856                                  .undefined_object:
  1857 00001738 05                      	db T_undefined
  1858 00001739 [910A000000000000]      	dq L_constants + 2705
  1859                                  
  1860                                  free_var_144:	; location of string<?
  1861 00001741 [4917000000000000]      	dq .undefined_object
  1862                                  .undefined_object:
  1863 00001749 05                      	db T_undefined
  1864 0000174A [A60A000000000000]      	dq L_constants + 2726
  1865                                  
  1866                                  free_var_145:	; location of string<=?
  1867 00001752 [5A17000000000000]      	dq .undefined_object
  1868                                  .undefined_object:
  1869 0000175A 05                      	db T_undefined
  1870 0000175B [B70A000000000000]      	dq L_constants + 2743
  1871                                  
  1872                                  free_var_146:	; location of string=?
  1873 00001763 [6B17000000000000]      	dq .undefined_object
  1874                                  .undefined_object:
  1875 0000176B 05                      	db T_undefined
  1876 0000176C [C90A000000000000]      	dq L_constants + 2761
  1877                                  
  1878                                  free_var_147:	; location of string>=?
  1879 00001774 [7C17000000000000]      	dq .undefined_object
  1880                                  .undefined_object:
  1881 0000177C 05                      	db T_undefined
  1882 0000177D [DA0A000000000000]      	dq L_constants + 2778
  1883                                  
  1884                                  free_var_148:	; location of string>?
  1885 00001785 [8D17000000000000]      	dq .undefined_object
  1886                                  .undefined_object:
  1887 0000178D 05                      	db T_undefined
  1888 0000178E [EC0A000000000000]      	dq L_constants + 2796
  1889                                  
  1890                                  free_var_149:	; location of string-ci<?
  1891 00001796 [9E17000000000000]      	dq .undefined_object
  1892                                  .undefined_object:
  1893 0000179E 05                      	db T_undefined
  1894 0000179F [FD0A000000000000]      	dq L_constants + 2813
  1895                                  
  1896                                  free_var_150:	; location of string-ci<=?
  1897 000017A7 [AF17000000000000]      	dq .undefined_object
  1898                                  .undefined_object:
  1899 000017AF 05                      	db T_undefined
  1900 000017B0 [110B000000000000]      	dq L_constants + 2833
  1901                                  
  1902                                  free_var_151:	; location of string-ci=?
  1903 000017B8 [C017000000000000]      	dq .undefined_object
  1904                                  .undefined_object:
  1905 000017C0 05                      	db T_undefined
  1906 000017C1 [260B000000000000]      	dq L_constants + 2854
  1907                                  
  1908                                  free_var_152:	; location of string-ci>=?
  1909 000017C9 [D117000000000000]      	dq .undefined_object
  1910                                  .undefined_object:
  1911 000017D1 05                      	db T_undefined
  1912 000017D2 [3A0B000000000000]      	dq L_constants + 2874
  1913                                  
  1914                                  free_var_153:	; location of string-ci>?
  1915 000017DA [E217000000000000]      	dq .undefined_object
  1916                                  .undefined_object:
  1917 000017E2 05                      	db T_undefined
  1918 000017E3 [4F0B000000000000]      	dq L_constants + 2895
  1919                                  
  1920                                  free_var_154:	; location of length
  1921 000017EB [F317000000000000]      	dq .undefined_object
  1922                                  .undefined_object:
  1923 000017F3 05                      	db T_undefined
  1924 000017F4 [630B000000000000]      	dq L_constants + 2915
  1925                                  
  1926                                  free_var_155:	; location of list->vector
  1927 000017FC [0418000000000000]      	dq .undefined_object
  1928                                  .undefined_object:
  1929 00001804 05                      	db T_undefined
  1930 00001805 [EC0B000000000000]      	dq L_constants + 3052
  1931                                  
  1932                                  free_var_156:	; location of vector
  1933 0000180D [1518000000000000]      	dq .undefined_object
  1934                                  .undefined_object:
  1935 00001815 05                      	db T_undefined
  1936 00001816 [010C000000000000]      	dq L_constants + 3073
  1937                                  
  1938                                  free_var_157:	; location of vector->list
  1939 0000181E [2618000000000000]      	dq .undefined_object
  1940                                  .undefined_object:
  1941 00001826 05                      	db T_undefined
  1942 00001827 [100C000000000000]      	dq L_constants + 3088
  1943                                  
  1944                                  free_var_158:	; location of random
  1945 0000182F [3718000000000000]      	dq .undefined_object
  1946                                  .undefined_object:
  1947 00001837 05                      	db T_undefined
  1948 00001838 [250C000000000000]      	dq L_constants + 3109
  1949                                  
  1950                                  free_var_159:	; location of positive?
  1951 00001840 [4818000000000000]      	dq .undefined_object
  1952                                  .undefined_object:
  1953 00001848 05                      	db T_undefined
  1954 00001849 [340C000000000000]      	dq L_constants + 3124
  1955                                  
  1956                                  free_var_160:	; location of negative?
  1957 00001851 [5918000000000000]      	dq .undefined_object
  1958                                  .undefined_object:
  1959 00001859 05                      	db T_undefined
  1960 0000185A [460C000000000000]      	dq L_constants + 3142
  1961                                  
  1962                                  free_var_161:	; location of even?
  1963 00001862 [6A18000000000000]      	dq .undefined_object
  1964                                  .undefined_object:
  1965 0000186A 05                      	db T_undefined
  1966 0000186B [580C000000000000]      	dq L_constants + 3160
  1967                                  
  1968                                  free_var_162:	; location of odd?
  1969 00001873 [7B18000000000000]      	dq .undefined_object
  1970                                  .undefined_object:
  1971 0000187B 05                      	db T_undefined
  1972 0000187C [6F0C000000000000]      	dq L_constants + 3183
  1973                                  
  1974                                  free_var_163:	; location of abs
  1975 00001884 [8C18000000000000]      	dq .undefined_object
  1976                                  .undefined_object:
  1977 0000188C 05                      	db T_undefined
  1978 0000188D [7C0C000000000000]      	dq L_constants + 3196
  1979                                  
  1980                                  free_var_164:	; location of equal?
  1981 00001895 [9D18000000000000]      	dq .undefined_object
  1982                                  .undefined_object:
  1983 0000189D 05                      	db T_undefined
  1984 0000189E [880C000000000000]      	dq L_constants + 3208
  1985                                  
  1986                                  free_var_165:	; location of assoc
  1987 000018A6 [AE18000000000000]      	dq .undefined_object
  1988                                  .undefined_object:
  1989 000018AE 05                      	db T_undefined
  1990 000018AF [970C000000000000]      	dq L_constants + 3223
  1991                                  
  1992                                  free_var_166:	; location of string-append
  1993 000018B7 [BF18000000000000]      	dq .undefined_object
  1994                                  .undefined_object:
  1995 000018BF 05                      	db T_undefined
  1996 000018C0 [A50C000000000000]      	dq L_constants + 3237
  1997                                  
  1998                                  free_var_167:	; location of vector-append
  1999 000018C8 [D018000000000000]      	dq .undefined_object
  2000                                  .undefined_object:
  2001 000018D0 05                      	db T_undefined
  2002 000018D1 [BB0C000000000000]      	dq L_constants + 3259
  2003                                  
  2004                                  free_var_168:	; location of string-reverse
  2005 000018D9 [E118000000000000]      	dq .undefined_object
  2006                                  .undefined_object:
  2007 000018E1 05                      	db T_undefined
  2008 000018E2 [D10C000000000000]      	dq L_constants + 3281
  2009                                  
  2010                                  free_var_169:	; location of vector-reverse
  2011 000018EA [F218000000000000]      	dq .undefined_object
  2012                                  .undefined_object:
  2013 000018F2 05                      	db T_undefined
  2014 000018F3 [E80C000000000000]      	dq L_constants + 3304
  2015                                  
  2016                                  free_var_170:	; location of string-reverse!
  2017 000018FB [0319000000000000]      	dq .undefined_object
  2018                                  .undefined_object:
  2019 00001903 05                      	db T_undefined
  2020 00001904 [FF0C000000000000]      	dq L_constants + 3327
  2021                                  
  2022                                  free_var_171:	; location of vector-reverse!
  2023 0000190C [1419000000000000]      	dq .undefined_object
  2024                                  .undefined_object:
  2025 00001914 05                      	db T_undefined
  2026 00001915 [170D000000000000]      	dq L_constants + 3351
  2027                                  
  2028                                  free_var_172:	; location of make-list-thunk
  2029 0000191D [2519000000000000]      	dq .undefined_object
  2030                                  .undefined_object:
  2031 00001925 05                      	db T_undefined
  2032 00001926 [2F0D000000000000]      	dq L_constants + 3375
  2033                                  
  2034                                  free_var_173:	; location of make-string-thunk
  2035 0000192E [3619000000000000]      	dq .undefined_object
  2036                                  .undefined_object:
  2037 00001936 05                      	db T_undefined
  2038 00001937 [470D000000000000]      	dq L_constants + 3399
  2039                                  
  2040                                  free_var_174:	; location of make-vector-thunk
  2041 0000193F [4719000000000000]      	dq .undefined_object
  2042                                  .undefined_object:
  2043 00001947 05                      	db T_undefined
  2044 00001948 [610D000000000000]      	dq L_constants + 3425
  2045                                  
  2046                                  free_var_175:	; location of logarithm
  2047 00001950 [5819000000000000]      	dq .undefined_object
  2048                                  .undefined_object:
  2049 00001958 05                      	db T_undefined
  2050 00001959 [7B0D000000000000]      	dq L_constants + 3451
  2051                                  
  2052                                  free_var_176:	; location of newline
  2053 00001961 [6919000000000000]      	dq .undefined_object
  2054                                  .undefined_object:
  2055 00001969 05                      	db T_undefined
  2056 0000196A [960D000000000000]      	dq L_constants + 3478
  2057                                  
  2058                                  
  2059                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
  2060                                  global main
  2061                                  section .text
  2062                                  main:
  2063 00000000 C8000000                        enter 0, 0
  2064                                          
  2065                                  	; building closure for null?
  2066 00000004 48BF-                   	mov rdi, free_var_0
  2066 00000006 [B10D000000000000] 
  2067 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
  2067 00000010 [6C61010000000000] 
  2068 00000018 E8505F0100              	call bind_primitive
  2069                                  
  2070                                  	; building closure for pair?
  2071 0000001D 48BF-                   	mov rdi, free_var_1
  2071 0000001F [C20D000000000000] 
  2072 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
  2072 00000029 [9E61010000000000] 
  2073 00000031 E8375F0100              	call bind_primitive
  2074                                  
  2075                                  	; building closure for void?
  2076 00000036 48BF-                   	mov rdi, free_var_2
  2076 00000038 [D30D000000000000] 
  2077 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
  2077 00000042 [D061010000000000] 
  2078 0000004A E81E5F0100              	call bind_primitive
  2079                                  
  2080                                  	; building closure for char?
  2081 0000004F 48BF-                   	mov rdi, free_var_3
  2081 00000051 [E40D000000000000] 
  2082 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
  2082 0000005B [0262010000000000] 
  2083 00000063 E8055F0100              	call bind_primitive
  2084                                  
  2085                                  	; building closure for string?
  2086 00000068 48BF-                   	mov rdi, free_var_4
  2086 0000006A [F50D000000000000] 
  2087 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
  2087 00000074 [3462010000000000] 
  2088 0000007C E8EC5E0100              	call bind_primitive
  2089                                  
  2090                                  	; building closure for interned-symbol?
  2091 00000081 48BF-                   	mov rdi, free_var_5
  2091 00000083 [060E000000000000] 
  2092 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
  2092 0000008D [6662010000000000] 
  2093 00000095 E8D35E0100              	call bind_primitive
  2094                                  
  2095                                  	; building closure for vector?
  2096 0000009A 48BF-                   	mov rdi, free_var_6
  2096 0000009C [170E000000000000] 
  2097 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
  2097 000000A6 [3263010000000000] 
  2098 000000AE E8BA5E0100              	call bind_primitive
  2099                                  
  2100                                  	; building closure for procedure?
  2101 000000B3 48BF-                   	mov rdi, free_var_7
  2101 000000B5 [280E000000000000] 
  2102 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
  2102 000000BF [6463010000000000] 
  2103 000000C7 E8A15E0100              	call bind_primitive
  2104                                  
  2105                                  	; building closure for real?
  2106 000000CC 48BF-                   	mov rdi, free_var_8
  2106 000000CE [390E000000000000] 
  2107 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
  2107 000000D8 [9663010000000000] 
  2108 000000E0 E8885E0100              	call bind_primitive
  2109                                  
  2110                                  	; building closure for fraction?
  2111 000000E5 48BF-                   	mov rdi, free_var_9
  2111 000000E7 [4A0E000000000000] 
  2112 000000EF 48BE-                   	mov rsi, L_code_ptr_is_fraction
  2112 000000F1 [C863010000000000] 
  2113 000000F9 E86F5E0100              	call bind_primitive
  2114                                  
  2115                                  	; building closure for boolean?
  2116 000000FE 48BF-                   	mov rdi, free_var_10
  2116 00000100 [5B0E000000000000] 
  2117 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
  2117 0000010A [FA63010000000000] 
  2118 00000112 E8565E0100              	call bind_primitive
  2119                                  
  2120                                  	; building closure for number?
  2121 00000117 48BF-                   	mov rdi, free_var_11
  2121 00000119 [6C0E000000000000] 
  2122 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
  2122 00000123 [2E64010000000000] 
  2123 0000012B E83D5E0100              	call bind_primitive
  2124                                  
  2125                                  	; building closure for collection?
  2126 00000130 48BF-                   	mov rdi, free_var_12
  2126 00000132 [7D0E000000000000] 
  2127 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
  2127 0000013C [6264010000000000] 
  2128 00000144 E8245E0100              	call bind_primitive
  2129                                  
  2130                                  	; building closure for cons
  2131 00000149 48BF-                   	mov rdi, free_var_13
  2131 0000014B [8E0E000000000000] 
  2132 00000153 48BE-                   	mov rsi, L_code_ptr_cons
  2132 00000155 [9664010000000000] 
  2133 0000015D E80B5E0100              	call bind_primitive
  2134                                  
  2135                                  	; building closure for display-sexpr
  2136 00000162 48BF-                   	mov rdi, free_var_14
  2136 00000164 [9F0E000000000000] 
  2137 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
  2137 0000016E [C664010000000000] 
  2138 00000176 E8F25D0100              	call bind_primitive
  2139                                  
  2140                                  	; building closure for write-char
  2141 0000017B 48BF-                   	mov rdi, free_var_15
  2141 0000017D [B00E000000000000] 
  2142 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
  2142 00000187 [EC64010000000000] 
  2143 0000018F E8D95D0100              	call bind_primitive
  2144                                  
  2145                                  	; building closure for car
  2146 00000194 48BF-                   	mov rdi, free_var_16
  2146 00000196 [C10E000000000000] 
  2147 0000019E 48BE-                   	mov rsi, L_code_ptr_car
  2147 000001A0 [3F65010000000000] 
  2148 000001A8 E8C05D0100              	call bind_primitive
  2149                                  
  2150                                  	; building closure for cdr
  2151 000001AD 48BF-                   	mov rdi, free_var_17
  2151 000001AF [D20E000000000000] 
  2152 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
  2152 000001B9 [6365010000000000] 
  2153 000001C1 E8A75D0100              	call bind_primitive
  2154                                  
  2155                                  	; building closure for string-length
  2156 000001C6 48BF-                   	mov rdi, free_var_18
  2156 000001C8 [E30E000000000000] 
  2157 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
  2157 000001D2 [8765010000000000] 
  2158 000001DA E88E5D0100              	call bind_primitive
  2159                                  
  2160                                  	; building closure for vector-length
  2161 000001DF 48BF-                   	mov rdi, free_var_19
  2161 000001E1 [F40E000000000000] 
  2162 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
  2162 000001EB [B065010000000000] 
  2163 000001F3 E8755D0100              	call bind_primitive
  2164                                  
  2165                                  	; building closure for real->integer
  2166 000001F8 48BF-                   	mov rdi, free_var_20
  2166 000001FA [050F000000000000] 
  2167 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
  2167 00000204 [D965010000000000] 
  2168 0000020C E85C5D0100              	call bind_primitive
  2169                                  
  2170                                  	; building closure for exit
  2171 00000211 48BF-                   	mov rdi, free_var_21
  2171 00000213 [160F000000000000] 
  2172 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
  2172 0000021D [0866010000000000] 
  2173 00000225 E8435D0100              	call bind_primitive
  2174                                  
  2175                                  	; building closure for integer->real
  2176 0000022A 48BF-                   	mov rdi, free_var_22
  2176 0000022C [270F000000000000] 
  2177 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  2177 00000236 [2166010000000000] 
  2178 0000023E E82A5D0100              	call bind_primitive
  2179                                  
  2180                                  	; building closure for fraction->real
  2181 00000243 48BF-                   	mov rdi, free_var_23
  2181 00000245 [380F000000000000] 
  2182 0000024D 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  2182 0000024F [4F66010000000000] 
  2183 00000257 E8115D0100              	call bind_primitive
  2184                                  
  2185                                  	; building closure for char->integer
  2186 0000025C 48BF-                   	mov rdi, free_var_24
  2186 0000025E [490F000000000000] 
  2187 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
  2187 00000268 [8A66010000000000] 
  2188 00000270 E8F85C0100              	call bind_primitive
  2189                                  
  2190                                  	; building closure for integer->char
  2191 00000275 48BF-                   	mov rdi, free_var_25
  2191 00000277 [5A0F000000000000] 
  2192 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
  2192 00000281 [F966010000000000] 
  2193 00000289 E8DF5C0100              	call bind_primitive
  2194                                  
  2195                                  	; building closure for trng
  2196 0000028E 48BF-                   	mov rdi, free_var_26
  2196 00000290 [6B0F000000000000] 
  2197 00000298 48BE-                   	mov rsi, L_code_ptr_trng
  2197 0000029A [4467010000000000] 
  2198 000002A2 E8C65C0100              	call bind_primitive
  2199                                  
  2200                                  	; building closure for zero?
  2201 000002A7 48BF-                   	mov rdi, free_var_27
  2201 000002A9 [7C0F000000000000] 
  2202 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
  2202 000002B3 [6367010000000000] 
  2203 000002BB E8AD5C0100              	call bind_primitive
  2204                                  
  2205                                  	; building closure for integer?
  2206 000002C0 48BF-                   	mov rdi, free_var_28
  2206 000002C2 [8D0F000000000000] 
  2207 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
  2207 000002CC [C867010000000000] 
  2208 000002D4 E8945C0100              	call bind_primitive
  2209                                  
  2210                                  	; building closure for __bin-apply
  2211 000002D9 48BF-                   	mov rdi, free_var_29
  2211 000002DB [9E0F000000000000] 
  2212 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
  2212 000002E5 [DD60010000000000] 
  2213 000002ED E87B5C0100              	call bind_primitive
  2214                                  
  2215                                  	; building closure for __bin-add-rr
  2216 000002F2 48BF-                   	mov rdi, free_var_30
  2216 000002F4 [AF0F000000000000] 
  2217 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  2217 000002FE [FA67010000000000] 
  2218 00000306 E8625C0100              	call bind_primitive
  2219                                  
  2220                                  	; building closure for __bin-sub-rr
  2221 0000030B 48BF-                   	mov rdi, free_var_31
  2221 0000030D [C00F000000000000] 
  2222 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
  2222 00000317 [3A68010000000000] 
  2223 0000031F E8495C0100              	call bind_primitive
  2224                                  
  2225                                  	; building closure for __bin-mul-rr
  2226 00000324 48BF-                   	mov rdi, free_var_32
  2226 00000326 [D10F000000000000] 
  2227 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
  2227 00000330 [7A68010000000000] 
  2228 00000338 E8305C0100              	call bind_primitive
  2229                                  
  2230                                  	; building closure for __bin-div-rr
  2231 0000033D 48BF-                   	mov rdi, free_var_33
  2231 0000033F [E20F000000000000] 
  2232 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
  2232 00000349 [BA68010000000000] 
  2233 00000351 E8175C0100              	call bind_primitive
  2234                                  
  2235                                  	; building closure for __bin-add-qq
  2236 00000356 48BF-                   	mov rdi, free_var_34
  2236 00000358 [F30F000000000000] 
  2237 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  2237 00000362 [4469010000000000] 
  2238 0000036A E8FE5B0100              	call bind_primitive
  2239                                  
  2240                                  	; building closure for __bin-sub-qq
  2241 0000036F 48BF-                   	mov rdi, free_var_35
  2241 00000371 [0410000000000000] 
  2242 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
  2242 0000037B [E469010000000000] 
  2243 00000383 E8E55B0100              	call bind_primitive
  2244                                  
  2245                                  	; building closure for __bin-mul-qq
  2246 00000388 48BF-                   	mov rdi, free_var_36
  2246 0000038A [1510000000000000] 
  2247 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
  2247 00000394 [896A010000000000] 
  2248 0000039C E8CC5B0100              	call bind_primitive
  2249                                  
  2250                                  	; building closure for __bin-div-qq
  2251 000003A1 48BF-                   	mov rdi, free_var_37
  2251 000003A3 [2610000000000000] 
  2252 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
  2252 000003AD [236B010000000000] 
  2253 000003B5 E8B35B0100              	call bind_primitive
  2254                                  
  2255                                  	; building closure for __bin-add-zz
  2256 000003BA 48BF-                   	mov rdi, free_var_38
  2256 000003BC [3710000000000000] 
  2257 000003C4 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  2257 000003C6 [0869010000000000] 
  2258 000003CE E89A5B0100              	call bind_primitive
  2259                                  
  2260                                  	; building closure for __bin-sub-zz
  2261 000003D3 48BF-                   	mov rdi, free_var_39
  2261 000003D5 [4810000000000000] 
  2262 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_zz
  2262 000003DF [A869010000000000] 
  2263 000003E7 E8815B0100              	call bind_primitive
  2264                                  
  2265                                  	; building closure for __bin-mul-zz
  2266 000003EC 48BF-                   	mov rdi, free_var_40
  2266 000003EE [5910000000000000] 
  2267 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_zz
  2267 000003F8 [486A010000000000] 
  2268 00000400 E8685B0100              	call bind_primitive
  2269                                  
  2270                                  	; building closure for __bin-div-zz
  2271 00000405 48BF-                   	mov rdi, free_var_41
  2271 00000407 [6A10000000000000] 
  2272 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_zz
  2272 00000411 [DD6A010000000000] 
  2273 00000419 E84F5B0100              	call bind_primitive
  2274                                  
  2275                                  	; building closure for error
  2276 0000041E 48BF-                   	mov rdi, free_var_42
  2276 00000420 [7B10000000000000] 
  2277 00000428 48BE-                   	mov rsi, L_code_ptr_error
  2277 0000042A [0D6C010000000000] 
  2278 00000432 E8365B0100              	call bind_primitive
  2279                                  
  2280                                  	; building closure for __bin-less-than-rr
  2281 00000437 48BF-                   	mov rdi, free_var_43
  2281 00000439 [8C10000000000000] 
  2282 00000441 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
  2282 00000443 [C06C010000000000] 
  2283 0000044B E81D5B0100              	call bind_primitive
  2284                                  
  2285                                  	; building closure for __bin-less-than-qq
  2286 00000450 48BF-                   	mov rdi, free_var_44
  2286 00000452 [9D10000000000000] 
  2287 0000045A 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
  2287 0000045C [626D010000000000] 
  2288 00000464 E8045B0100              	call bind_primitive
  2289                                  
  2290                                  	; building closure for __bin-less-than-zz
  2291 00000469 48BF-                   	mov rdi, free_var_45
  2291 0000046B [AE10000000000000] 
  2292 00000473 48BE-                   	mov rsi, L_code_ptr_raw_less_than_zz
  2292 00000475 [136D010000000000] 
  2293 0000047D E8EB5A0100              	call bind_primitive
  2294                                  
  2295                                  	; building closure for __bin-equal-rr
  2296 00000482 48BF-                   	mov rdi, free_var_46
  2296 00000484 [BF10000000000000] 
  2297 0000048C 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
  2297 0000048E [C16D010000000000] 
  2298 00000496 E8D25A0100              	call bind_primitive
  2299                                  
  2300                                  	; building closure for __bin-equal-qq
  2301 0000049B 48BF-                   	mov rdi, free_var_47
  2301 0000049D [D010000000000000] 
  2302 000004A5 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
  2302 000004A7 [636E010000000000] 
  2303 000004AF E8B95A0100              	call bind_primitive
  2304                                  
  2305                                  	; building closure for __bin-equal-zz
  2306 000004B4 48BF-                   	mov rdi, free_var_48
  2306 000004B6 [E110000000000000] 
  2307 000004BE 48BE-                   	mov rsi, L_code_ptr_raw_equal_zz
  2307 000004C0 [146E010000000000] 
  2308 000004C8 E8A05A0100              	call bind_primitive
  2309                                  
  2310                                  	; building closure for quotient
  2311 000004CD 48BF-                   	mov rdi, free_var_49
  2311 000004CF [F210000000000000] 
  2312 000004D7 48BE-                   	mov rsi, L_code_ptr_quotient
  2312 000004D9 [C26E010000000000] 
  2313 000004E1 E8875A0100              	call bind_primitive
  2314                                  
  2315                                  	; building closure for remainder
  2316 000004E6 48BF-                   	mov rdi, free_var_50
  2316 000004E8 [0311000000000000] 
  2317 000004F0 48BE-                   	mov rsi, L_code_ptr_remainder
  2317 000004F2 [0E6F010000000000] 
  2318 000004FA E86E5A0100              	call bind_primitive
  2319                                  
  2320                                  	; building closure for set-car!
  2321 000004FF 48BF-                   	mov rdi, free_var_51
  2321 00000501 [1411000000000000] 
  2322 00000509 48BE-                   	mov rsi, L_code_ptr_set_car
  2322 0000050B [5A6F010000000000] 
  2323 00000513 E8555A0100              	call bind_primitive
  2324                                  
  2325                                  	; building closure for set-cdr!
  2326 00000518 48BF-                   	mov rdi, free_var_52
  2326 0000051A [2511000000000000] 
  2327 00000522 48BE-                   	mov rsi, L_code_ptr_set_cdr
  2327 00000524 [8C6F010000000000] 
  2328 0000052C E83C5A0100              	call bind_primitive
  2329                                  
  2330                                  	; building closure for string-ref
  2331 00000531 48BF-                   	mov rdi, free_var_53
  2331 00000533 [3611000000000000] 
  2332 0000053B 48BE-                   	mov rsi, L_code_ptr_string_ref
  2332 0000053D [BE6F010000000000] 
  2333 00000545 E8235A0100              	call bind_primitive
  2334                                  
  2335                                  	; building closure for vector-ref
  2336 0000054A 48BF-                   	mov rdi, free_var_54
  2336 0000054C [4711000000000000] 
  2337 00000554 48BE-                   	mov rsi, L_code_ptr_vector_ref
  2337 00000556 [1A70010000000000] 
  2338 0000055E E80A5A0100              	call bind_primitive
  2339                                  
  2340                                  	; building closure for vector-set!
  2341 00000563 48BF-                   	mov rdi, free_var_55
  2341 00000565 [5811000000000000] 
  2342 0000056D 48BE-                   	mov rsi, L_code_ptr_vector_set
  2342 0000056F [6770010000000000] 
  2343 00000577 E8F1590100              	call bind_primitive
  2344                                  
  2345                                  	; building closure for string-set!
  2346 0000057C 48BF-                   	mov rdi, free_var_56
  2346 0000057E [6911000000000000] 
  2347 00000586 48BE-                   	mov rsi, L_code_ptr_string_set
  2347 00000588 [C270010000000000] 
  2348 00000590 E8D8590100              	call bind_primitive
  2349                                  
  2350                                  	; building closure for make-vector
  2351 00000595 48BF-                   	mov rdi, free_var_57
  2351 00000597 [7A11000000000000] 
  2352 0000059F 48BE-                   	mov rsi, L_code_ptr_make_vector
  2352 000005A1 [2871010000000000] 
  2353 000005A9 E8BF590100              	call bind_primitive
  2354                                  
  2355                                  	; building closure for make-string
  2356 000005AE 48BF-                   	mov rdi, free_var_58
  2356 000005B0 [8B11000000000000] 
  2357 000005B8 48BE-                   	mov rsi, L_code_ptr_make_string
  2357 000005BA [8371010000000000] 
  2358 000005C2 E8A6590100              	call bind_primitive
  2359                                  
  2360                                  	; building closure for numerator
  2361 000005C7 48BF-                   	mov rdi, free_var_59
  2361 000005C9 [9C11000000000000] 
  2362 000005D1 48BE-                   	mov rsi, L_code_ptr_numerator
  2362 000005D3 [E671010000000000] 
  2363 000005DB E88D590100              	call bind_primitive
  2364                                  
  2365                                  	; building closure for denominator
  2366 000005E0 48BF-                   	mov rdi, free_var_60
  2366 000005E2 [AD11000000000000] 
  2367 000005EA 48BE-                   	mov rsi, L_code_ptr_denominator
  2367 000005EC [0F72010000000000] 
  2368 000005F4 E874590100              	call bind_primitive
  2369                                  
  2370                                  	; building closure for eq?
  2371 000005F9 48BF-                   	mov rdi, free_var_61
  2371 000005FB [BE11000000000000] 
  2372 00000603 48BE-                   	mov rsi, L_code_ptr_is_eq
  2372 00000605 [3872010000000000] 
  2373 0000060D E85B590100              	call bind_primitive
  2374                                  
  2375                                  	; building closure for __integer-to-fraction
  2376 00000612 48BF-                   	mov rdi, free_var_62
  2376 00000614 [CF11000000000000] 
  2377 0000061C 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  2377 0000061E [BB66010000000000] 
  2378 00000626 E842590100              	call bind_primitive
  2379                                  
  2380                                  	; building closure for logand
  2381 0000062B 48BF-                   	mov rdi, free_var_63
  2381 0000062D [E011000000000000] 
  2382 00000635 48BE-                   	mov rsi, L_code_ptr_logand
  2382 00000637 [FC5F010000000000] 
  2383 0000063F E829590100              	call bind_primitive
  2384                                  
  2385                                  	; building closure for logor
  2386 00000644 48BF-                   	mov rdi, free_var_64
  2386 00000646 [F111000000000000] 
  2387 0000064E 48BE-                   	mov rsi, L_code_ptr_logor
  2387 00000650 [3860010000000000] 
  2388 00000658 E810590100              	call bind_primitive
  2389                                  
  2390                                  	; building closure for logxor
  2391 0000065D 48BF-                   	mov rdi, free_var_65
  2391 0000065F [0212000000000000] 
  2392 00000667 48BE-                   	mov rsi, L_code_ptr_logxor
  2392 00000669 [7460010000000000] 
  2393 00000671 E8F7580100              	call bind_primitive
  2394                                  
  2395                                  	; building closure for lognot
  2396 00000676 48BF-                   	mov rdi, free_var_66
  2396 00000678 [1312000000000000] 
  2397 00000680 48BE-                   	mov rsi, L_code_ptr_lognot
  2397 00000682 [B060010000000000] 
  2398 0000068A E8DE580100              	call bind_primitive
  2399                                  
  2400                                  	; building closure for ash
  2401 0000068F 48BF-                   	mov rdi, free_var_67
  2401 00000691 [2412000000000000] 
  2402 00000699 48BE-                   	mov rsi, L_code_ptr_ash
  2402 0000069B [9B5F010000000000] 
  2403 000006A3 E8C5580100              	call bind_primitive
  2404                                  
  2405                                  	; building closure for symbol?
  2406 000006A8 48BF-                   	mov rdi, free_var_68
  2406 000006AA [3512000000000000] 
  2407 000006B2 48BE-                   	mov rsi, L_code_ptr_is_symbol
  2407 000006B4 [6662010000000000] 
  2408 000006BC E8AC580100              	call bind_primitive
  2409                                  
  2410                                  	; building closure for uninterned-symbol?
  2411 000006C1 48BF-                   	mov rdi, free_var_69
  2411 000006C3 [4612000000000000] 
  2412 000006CB 48BE-                   	mov rsi, L_code_ptr_is_uninterned_symbol
  2412 000006CD [9962010000000000] 
  2413 000006D5 E893580100              	call bind_primitive
  2414                                  
  2415                                  	; building closure for gensym?
  2416 000006DA 48BF-                   	mov rdi, free_var_70
  2416 000006DC [5712000000000000] 
  2417 000006E4 48BE-                   	mov rsi, L_code_ptr_is_uninterned_symbol
  2417 000006E6 [9962010000000000] 
  2418 000006EE E87A580100              	call bind_primitive
  2419                                  
  2420                                  	; building closure for interned-symbol?
  2421 000006F3 48BF-                   	mov rdi, free_var_5
  2421 000006F5 [060E000000000000] 
  2422 000006FD 48BE-                   	mov rsi, L_code_ptr_is_interned_symbol
  2422 000006FF [CC62010000000000] 
  2423 00000707 E861580100              	call bind_primitive
  2424                                  
  2425                                  	; building closure for gensym
  2426 0000070C 48BF-                   	mov rdi, free_var_71
  2426 0000070E [6812000000000000] 
  2427 00000716 48BE-                   	mov rsi, L_code_ptr_gensym
  2427 00000718 [FE62010000000000] 
  2428 00000720 E848580100              	call bind_primitive
  2429                                  
  2430                                  	; building closure for frame
  2431 00000725 48BF-                   	mov rdi, free_var_72
  2431 00000727 [7912000000000000] 
  2432 0000072F 48BE-                   	mov rsi, L_code_ptr_frame
  2432 00000731 [B458010000000000] 
  2433 00000739 E82F580100              	call bind_primitive
  2434                                  
  2435                                  	; building closure for break
  2436 0000073E 48BF-                   	mov rdi, free_var_73
  2436 00000740 [8A12000000000000] 
  2437 00000748 48BE-                   	mov rsi, L_code_ptr_break
  2437 0000074A [9A58010000000000] 
  2438 00000752 E816580100              	call bind_primitive
  2439                                  
  2440 00000757 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2441 0000075C E828510100              	call malloc
  2442 00000761 50                      	push rax
  2443 00000762 BF00000000              	mov rdi, 8 * 0	; new rib
  2444 00000767 E81D510100              	call malloc
  2445 0000076C 50                      	push rax
  2446 0000076D BF08000000              	mov rdi, 8 * 1	; extended env
  2447 00000772 E812510100              	call malloc
  2448 00000777 488B7D10                	mov rdi, ENV
  2449 0000077B BE00000000              	mov rsi, 0
  2450 00000780 BA01000000              	mov rdx, 1
  2451                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  2452 00000785 4883FE00                	cmp rsi, 0
  2453 00000789 7410                    	je .L_lambda_simple_env_end_0001
  2454 0000078B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2455 0000078F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2456 00000793 48FFC6                  	inc rsi
  2457 00000796 48FFC2                  	inc rdx
  2458 00000799 EBEA                    	jmp .L_lambda_simple_env_loop_0001
  2459                                  .L_lambda_simple_env_end_0001:
  2460 0000079B 5B                      	pop rbx
  2461 0000079C BE00000000              	mov rsi, 0
  2462                                  .L_lambda_simple_params_loop_0001:	; copy params
  2463 000007A1 4883FE00                	cmp rsi, 0
  2464 000007A5 740E                    	je .L_lambda_simple_params_end_0001
  2465 000007A7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2466 000007AC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2467 000007B0 48FFC6                  	inc rsi
  2468 000007B3 EBEC                    	jmp .L_lambda_simple_params_loop_0001
  2469                                  .L_lambda_simple_params_end_0001:
  2470 000007B5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2471 000007B8 4889C3                  	mov rbx, rax
  2472 000007BB 58                      	pop rax
  2473 000007BC C60004                  	mov byte [rax], T_closure
  2474 000007BF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2475 000007C3 48C74009[D0070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
  2476 000007CB E99B000000              	jmp .L_lambda_simple_end_0001
  2477                                  .L_lambda_simple_code_0001:	; lambda-simple body
  2478 000007D0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2479 000007D6 740B                    	je .L_lambda_simple_arity_check_ok_0001
  2480 000007D8 FF742410                	push qword [rsp + 8 * 2]
  2481 000007DC 6A01                    	push 1
  2482 000007DE E95F500100              	jmp L_error_incorrect_arity_simple
  2483                                  .L_lambda_simple_arity_check_ok_0001:
  2484 000007E3 C8000000                	enter 0, 0
  2485                                  	; preparing a tail-call
  2486 000007E7 488B4520                	mov rax, PARAM(0)	; param x
  2487 000007EB 50                      	push rax
  2488 000007EC 6A01                    	push 1	; arg count
  2489 000007EE 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  2490 000007F6 803805                  	cmp byte [rax], T_undefined
  2491 000007F9 0F845D4F0100            	je L_error_fvar_undefined
  2492 000007FF 803804                  	cmp byte [rax], T_closure
  2493 00000802 0F85D84F0100            	jne L_error_non_closure
  2494 00000808 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2495 0000080B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2496 0000080E 50                      	push rax
  2497 0000080F 6A01                    	push 1	; arg count
  2498 00000811 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  2499 00000819 803805                  	cmp byte [rax], T_undefined
  2500 0000081C 0F843A4F0100            	je L_error_fvar_undefined
  2501 00000822 803804                  	cmp byte [rax], T_closure
  2502 00000825 0F85B54F0100            	jne L_error_non_closure
  2503 0000082B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2504                                  
  2505                                  	; recycling the current frame
  2506 0000082E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2507 00000831 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2508 00000834 B905000000              	mov rcx, 1 + 4
  2509 00000839 488B5D18                	mov rbx, COUNT
  2510 0000083D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2511 00000842 488D55F8                	lea rdx, [rbp - 8 * 1]
  2512                                  .L_tc_recycle_frame_loop_0001:
  2513 00000846 4883F900                	cmp rcx, 0
  2514 0000084A 7413                    	je .L_tc_recycle_frame_done_0001
  2515 0000084C 488B32                  	mov rsi, qword [rdx]
  2516 0000084F 488933                  	mov qword [rbx], rsi
  2517 00000852 48FFC9                  	dec rcx
  2518 00000855 4883EB08                	sub rbx, 8 * 1
  2519 00000859 4883EA08                	sub rdx, 8 * 1
  2520 0000085D EBE7                    	jmp .L_tc_recycle_frame_loop_0001
  2521                                  .L_tc_recycle_frame_done_0001:
  2522 0000085F 488D6308                	lea rsp, [rbx + 8 * 1]
  2523 00000863 5D                      	pop rbp	; the proc will restore it!
  2524 00000864 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2525 00000867 C9                      	leave
  2526 00000868 C21800                  	ret AND_KILL_FRAME(1)
  2527                                  .L_lambda_simple_end_0001:	; new closure is in rax
  2528 0000086B 48890425[9B120000]      	mov qword [free_var_74], rax
  2529 00000873 48B8-                   	mov rax, sob_void
  2529 00000875 [0000000000000000] 
  2530                                  
  2531 0000087D 4889C7                  	mov rdi, rax
  2532 00000880 E816510100              	call print_sexpr_if_not_void
  2533                                  
  2534 00000885 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2535 0000088A E8FA4F0100              	call malloc
  2536 0000088F 50                      	push rax
  2537 00000890 BF00000000              	mov rdi, 8 * 0	; new rib
  2538 00000895 E8EF4F0100              	call malloc
  2539 0000089A 50                      	push rax
  2540 0000089B BF08000000              	mov rdi, 8 * 1	; extended env
  2541 000008A0 E8E44F0100              	call malloc
  2542 000008A5 488B7D10                	mov rdi, ENV
  2543 000008A9 BE00000000              	mov rsi, 0
  2544 000008AE BA01000000              	mov rdx, 1
  2545                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  2546 000008B3 4883FE00                	cmp rsi, 0
  2547 000008B7 7410                    	je .L_lambda_simple_env_end_0002
  2548 000008B9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2549 000008BD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2550 000008C1 48FFC6                  	inc rsi
  2551 000008C4 48FFC2                  	inc rdx
  2552 000008C7 EBEA                    	jmp .L_lambda_simple_env_loop_0002
  2553                                  .L_lambda_simple_env_end_0002:
  2554 000008C9 5B                      	pop rbx
  2555 000008CA BE00000000              	mov rsi, 0
  2556                                  .L_lambda_simple_params_loop_0002:	; copy params
  2557 000008CF 4883FE00                	cmp rsi, 0
  2558 000008D3 740E                    	je .L_lambda_simple_params_end_0002
  2559 000008D5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2560 000008DA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2561 000008DE 48FFC6                  	inc rsi
  2562 000008E1 EBEC                    	jmp .L_lambda_simple_params_loop_0002
  2563                                  .L_lambda_simple_params_end_0002:
  2564 000008E3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2565 000008E6 4889C3                  	mov rbx, rax
  2566 000008E9 58                      	pop rax
  2567 000008EA C60004                  	mov byte [rax], T_closure
  2568 000008ED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2569 000008F1 48C74009[FE080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
  2570 000008F9 E99B000000              	jmp .L_lambda_simple_end_0002
  2571                                  .L_lambda_simple_code_0002:	; lambda-simple body
  2572 000008FE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2573 00000904 740B                    	je .L_lambda_simple_arity_check_ok_0002
  2574 00000906 FF742410                	push qword [rsp + 8 * 2]
  2575 0000090A 6A01                    	push 1
  2576 0000090C E9314F0100              	jmp L_error_incorrect_arity_simple
  2577                                  .L_lambda_simple_arity_check_ok_0002:
  2578 00000911 C8000000                	enter 0, 0
  2579                                  	; preparing a tail-call
  2580 00000915 488B4520                	mov rax, PARAM(0)	; param x
  2581 00000919 50                      	push rax
  2582 0000091A 6A01                    	push 1	; arg count
  2583 0000091C 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2584 00000924 803805                  	cmp byte [rax], T_undefined
  2585 00000927 0F842F4E0100            	je L_error_fvar_undefined
  2586 0000092D 803804                  	cmp byte [rax], T_closure
  2587 00000930 0F85AA4E0100            	jne L_error_non_closure
  2588 00000936 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2589 00000939 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2590 0000093C 50                      	push rax
  2591 0000093D 6A01                    	push 1	; arg count
  2592 0000093F 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  2593 00000947 803805                  	cmp byte [rax], T_undefined
  2594 0000094A 0F840C4E0100            	je L_error_fvar_undefined
  2595 00000950 803804                  	cmp byte [rax], T_closure
  2596 00000953 0F85874E0100            	jne L_error_non_closure
  2597 00000959 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2598                                  
  2599                                  	; recycling the current frame
  2600 0000095C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2601 0000095F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2602 00000962 B905000000              	mov rcx, 1 + 4
  2603 00000967 488B5D18                	mov rbx, COUNT
  2604 0000096B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2605 00000970 488D55F8                	lea rdx, [rbp - 8 * 1]
  2606                                  .L_tc_recycle_frame_loop_0002:
  2607 00000974 4883F900                	cmp rcx, 0
  2608 00000978 7413                    	je .L_tc_recycle_frame_done_0002
  2609 0000097A 488B32                  	mov rsi, qword [rdx]
  2610 0000097D 488933                  	mov qword [rbx], rsi
  2611 00000980 48FFC9                  	dec rcx
  2612 00000983 4883EB08                	sub rbx, 8 * 1
  2613 00000987 4883EA08                	sub rdx, 8 * 1
  2614 0000098B EBE7                    	jmp .L_tc_recycle_frame_loop_0002
  2615                                  .L_tc_recycle_frame_done_0002:
  2616 0000098D 488D6308                	lea rsp, [rbx + 8 * 1]
  2617 00000991 5D                      	pop rbp	; the proc will restore it!
  2618 00000992 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2619 00000995 C9                      	leave
  2620 00000996 C21800                  	ret AND_KILL_FRAME(1)
  2621                                  .L_lambda_simple_end_0002:	; new closure is in rax
  2622 00000999 48890425[AC120000]      	mov qword [free_var_75], rax
  2623 000009A1 48B8-                   	mov rax, sob_void
  2623 000009A3 [0000000000000000] 
  2624                                  
  2625 000009AB 4889C7                  	mov rdi, rax
  2626 000009AE E8E84F0100              	call print_sexpr_if_not_void
  2627                                  
  2628 000009B3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2629 000009B8 E8CC4E0100              	call malloc
  2630 000009BD 50                      	push rax
  2631 000009BE BF00000000              	mov rdi, 8 * 0	; new rib
  2632 000009C3 E8C14E0100              	call malloc
  2633 000009C8 50                      	push rax
  2634 000009C9 BF08000000              	mov rdi, 8 * 1	; extended env
  2635 000009CE E8B64E0100              	call malloc
  2636 000009D3 488B7D10                	mov rdi, ENV
  2637 000009D7 BE00000000              	mov rsi, 0
  2638 000009DC BA01000000              	mov rdx, 1
  2639                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  2640 000009E1 4883FE00                	cmp rsi, 0
  2641 000009E5 7410                    	je .L_lambda_simple_env_end_0003
  2642 000009E7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2643 000009EB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2644 000009EF 48FFC6                  	inc rsi
  2645 000009F2 48FFC2                  	inc rdx
  2646 000009F5 EBEA                    	jmp .L_lambda_simple_env_loop_0003
  2647                                  .L_lambda_simple_env_end_0003:
  2648 000009F7 5B                      	pop rbx
  2649 000009F8 BE00000000              	mov rsi, 0
  2650                                  .L_lambda_simple_params_loop_0003:	; copy params
  2651 000009FD 4883FE00                	cmp rsi, 0
  2652 00000A01 740E                    	je .L_lambda_simple_params_end_0003
  2653 00000A03 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2654 00000A08 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2655 00000A0C 48FFC6                  	inc rsi
  2656 00000A0F EBEC                    	jmp .L_lambda_simple_params_loop_0003
  2657                                  .L_lambda_simple_params_end_0003:
  2658 00000A11 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2659 00000A14 4889C3                  	mov rbx, rax
  2660 00000A17 58                      	pop rax
  2661 00000A18 C60004                  	mov byte [rax], T_closure
  2662 00000A1B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2663 00000A1F 48C74009[2C0A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
  2664 00000A27 E99B000000              	jmp .L_lambda_simple_end_0003
  2665                                  .L_lambda_simple_code_0003:	; lambda-simple body
  2666 00000A2C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2667 00000A32 740B                    	je .L_lambda_simple_arity_check_ok_0003
  2668 00000A34 FF742410                	push qword [rsp + 8 * 2]
  2669 00000A38 6A01                    	push 1
  2670 00000A3A E9034E0100              	jmp L_error_incorrect_arity_simple
  2671                                  .L_lambda_simple_arity_check_ok_0003:
  2672 00000A3F C8000000                	enter 0, 0
  2673                                  	; preparing a tail-call
  2674 00000A43 488B4520                	mov rax, PARAM(0)	; param x
  2675 00000A47 50                      	push rax
  2676 00000A48 6A01                    	push 1	; arg count
  2677 00000A4A 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  2678 00000A52 803805                  	cmp byte [rax], T_undefined
  2679 00000A55 0F84014D0100            	je L_error_fvar_undefined
  2680 00000A5B 803804                  	cmp byte [rax], T_closure
  2681 00000A5E 0F857C4D0100            	jne L_error_non_closure
  2682 00000A64 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2683 00000A67 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2684 00000A6A 50                      	push rax
  2685 00000A6B 6A01                    	push 1	; arg count
  2686 00000A6D 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2687 00000A75 803805                  	cmp byte [rax], T_undefined
  2688 00000A78 0F84DE4C0100            	je L_error_fvar_undefined
  2689 00000A7E 803804                  	cmp byte [rax], T_closure
  2690 00000A81 0F85594D0100            	jne L_error_non_closure
  2691 00000A87 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2692                                  
  2693                                  	; recycling the current frame
  2694 00000A8A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2695 00000A8D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2696 00000A90 B905000000              	mov rcx, 1 + 4
  2697 00000A95 488B5D18                	mov rbx, COUNT
  2698 00000A99 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2699 00000A9E 488D55F8                	lea rdx, [rbp - 8 * 1]
  2700                                  .L_tc_recycle_frame_loop_0003:
  2701 00000AA2 4883F900                	cmp rcx, 0
  2702 00000AA6 7413                    	je .L_tc_recycle_frame_done_0003
  2703 00000AA8 488B32                  	mov rsi, qword [rdx]
  2704 00000AAB 488933                  	mov qword [rbx], rsi
  2705 00000AAE 48FFC9                  	dec rcx
  2706 00000AB1 4883EB08                	sub rbx, 8 * 1
  2707 00000AB5 4883EA08                	sub rdx, 8 * 1
  2708 00000AB9 EBE7                    	jmp .L_tc_recycle_frame_loop_0003
  2709                                  .L_tc_recycle_frame_done_0003:
  2710 00000ABB 488D6308                	lea rsp, [rbx + 8 * 1]
  2711 00000ABF 5D                      	pop rbp	; the proc will restore it!
  2712 00000AC0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2713 00000AC3 C9                      	leave
  2714 00000AC4 C21800                  	ret AND_KILL_FRAME(1)
  2715                                  .L_lambda_simple_end_0003:	; new closure is in rax
  2716 00000AC7 48890425[BD120000]      	mov qword [free_var_76], rax
  2717 00000ACF 48B8-                   	mov rax, sob_void
  2717 00000AD1 [0000000000000000] 
  2718                                  
  2719 00000AD9 4889C7                  	mov rdi, rax
  2720 00000ADC E8BA4E0100              	call print_sexpr_if_not_void
  2721                                  
  2722 00000AE1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2723 00000AE6 E89E4D0100              	call malloc
  2724 00000AEB 50                      	push rax
  2725 00000AEC BF00000000              	mov rdi, 8 * 0	; new rib
  2726 00000AF1 E8934D0100              	call malloc
  2727 00000AF6 50                      	push rax
  2728 00000AF7 BF08000000              	mov rdi, 8 * 1	; extended env
  2729 00000AFC E8884D0100              	call malloc
  2730 00000B01 488B7D10                	mov rdi, ENV
  2731 00000B05 BE00000000              	mov rsi, 0
  2732 00000B0A BA01000000              	mov rdx, 1
  2733                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  2734 00000B0F 4883FE00                	cmp rsi, 0
  2735 00000B13 7410                    	je .L_lambda_simple_env_end_0004
  2736 00000B15 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2737 00000B19 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2738 00000B1D 48FFC6                  	inc rsi
  2739 00000B20 48FFC2                  	inc rdx
  2740 00000B23 EBEA                    	jmp .L_lambda_simple_env_loop_0004
  2741                                  .L_lambda_simple_env_end_0004:
  2742 00000B25 5B                      	pop rbx
  2743 00000B26 BE00000000              	mov rsi, 0
  2744                                  .L_lambda_simple_params_loop_0004:	; copy params
  2745 00000B2B 4883FE00                	cmp rsi, 0
  2746 00000B2F 740E                    	je .L_lambda_simple_params_end_0004
  2747 00000B31 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2748 00000B36 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2749 00000B3A 48FFC6                  	inc rsi
  2750 00000B3D EBEC                    	jmp .L_lambda_simple_params_loop_0004
  2751                                  .L_lambda_simple_params_end_0004:
  2752 00000B3F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2753 00000B42 4889C3                  	mov rbx, rax
  2754 00000B45 58                      	pop rax
  2755 00000B46 C60004                  	mov byte [rax], T_closure
  2756 00000B49 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2757 00000B4D 48C74009[5A0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
  2758 00000B55 E99B000000              	jmp .L_lambda_simple_end_0004
  2759                                  .L_lambda_simple_code_0004:	; lambda-simple body
  2760 00000B5A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2761 00000B60 740B                    	je .L_lambda_simple_arity_check_ok_0004
  2762 00000B62 FF742410                	push qword [rsp + 8 * 2]
  2763 00000B66 6A01                    	push 1
  2764 00000B68 E9D54C0100              	jmp L_error_incorrect_arity_simple
  2765                                  .L_lambda_simple_arity_check_ok_0004:
  2766 00000B6D C8000000                	enter 0, 0
  2767                                  	; preparing a tail-call
  2768 00000B71 488B4520                	mov rax, PARAM(0)	; param x
  2769 00000B75 50                      	push rax
  2770 00000B76 6A01                    	push 1	; arg count
  2771 00000B78 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2772 00000B80 803805                  	cmp byte [rax], T_undefined
  2773 00000B83 0F84D34B0100            	je L_error_fvar_undefined
  2774 00000B89 803804                  	cmp byte [rax], T_closure
  2775 00000B8C 0F854E4C0100            	jne L_error_non_closure
  2776 00000B92 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2777 00000B95 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2778 00000B98 50                      	push rax
  2779 00000B99 6A01                    	push 1	; arg count
  2780 00000B9B 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2781 00000BA3 803805                  	cmp byte [rax], T_undefined
  2782 00000BA6 0F84B04B0100            	je L_error_fvar_undefined
  2783 00000BAC 803804                  	cmp byte [rax], T_closure
  2784 00000BAF 0F852B4C0100            	jne L_error_non_closure
  2785 00000BB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2786                                  
  2787                                  	; recycling the current frame
  2788 00000BB8 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2789 00000BBB FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2790 00000BBE B905000000              	mov rcx, 1 + 4
  2791 00000BC3 488B5D18                	mov rbx, COUNT
  2792 00000BC7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2793 00000BCC 488D55F8                	lea rdx, [rbp - 8 * 1]
  2794                                  .L_tc_recycle_frame_loop_0004:
  2795 00000BD0 4883F900                	cmp rcx, 0
  2796 00000BD4 7413                    	je .L_tc_recycle_frame_done_0004
  2797 00000BD6 488B32                  	mov rsi, qword [rdx]
  2798 00000BD9 488933                  	mov qword [rbx], rsi
  2799 00000BDC 48FFC9                  	dec rcx
  2800 00000BDF 4883EB08                	sub rbx, 8 * 1
  2801 00000BE3 4883EA08                	sub rdx, 8 * 1
  2802 00000BE7 EBE7                    	jmp .L_tc_recycle_frame_loop_0004
  2803                                  .L_tc_recycle_frame_done_0004:
  2804 00000BE9 488D6308                	lea rsp, [rbx + 8 * 1]
  2805 00000BED 5D                      	pop rbp	; the proc will restore it!
  2806 00000BEE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2807 00000BF1 C9                      	leave
  2808 00000BF2 C21800                  	ret AND_KILL_FRAME(1)
  2809                                  .L_lambda_simple_end_0004:	; new closure is in rax
  2810 00000BF5 48890425[CE120000]      	mov qword [free_var_77], rax
  2811 00000BFD 48B8-                   	mov rax, sob_void
  2811 00000BFF [0000000000000000] 
  2812                                  
  2813 00000C07 4889C7                  	mov rdi, rax
  2814 00000C0A E88C4D0100              	call print_sexpr_if_not_void
  2815                                  
  2816 00000C0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2817 00000C14 E8704C0100              	call malloc
  2818 00000C19 50                      	push rax
  2819 00000C1A BF00000000              	mov rdi, 8 * 0	; new rib
  2820 00000C1F E8654C0100              	call malloc
  2821 00000C24 50                      	push rax
  2822 00000C25 BF08000000              	mov rdi, 8 * 1	; extended env
  2823 00000C2A E85A4C0100              	call malloc
  2824 00000C2F 488B7D10                	mov rdi, ENV
  2825 00000C33 BE00000000              	mov rsi, 0
  2826 00000C38 BA01000000              	mov rdx, 1
  2827                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  2828 00000C3D 4883FE00                	cmp rsi, 0
  2829 00000C41 7410                    	je .L_lambda_simple_env_end_0005
  2830 00000C43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2831 00000C47 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2832 00000C4B 48FFC6                  	inc rsi
  2833 00000C4E 48FFC2                  	inc rdx
  2834 00000C51 EBEA                    	jmp .L_lambda_simple_env_loop_0005
  2835                                  .L_lambda_simple_env_end_0005:
  2836 00000C53 5B                      	pop rbx
  2837 00000C54 BE00000000              	mov rsi, 0
  2838                                  .L_lambda_simple_params_loop_0005:	; copy params
  2839 00000C59 4883FE00                	cmp rsi, 0
  2840 00000C5D 740E                    	je .L_lambda_simple_params_end_0005
  2841 00000C5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2842 00000C64 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2843 00000C68 48FFC6                  	inc rsi
  2844 00000C6B EBEC                    	jmp .L_lambda_simple_params_loop_0005
  2845                                  .L_lambda_simple_params_end_0005:
  2846 00000C6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2847 00000C70 4889C3                  	mov rbx, rax
  2848 00000C73 58                      	pop rax
  2849 00000C74 C60004                  	mov byte [rax], T_closure
  2850 00000C77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2851 00000C7B 48C74009[880C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
  2852 00000C83 E99B000000              	jmp .L_lambda_simple_end_0005
  2853                                  .L_lambda_simple_code_0005:	; lambda-simple body
  2854 00000C88 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2855 00000C8E 740B                    	je .L_lambda_simple_arity_check_ok_0005
  2856 00000C90 FF742410                	push qword [rsp + 8 * 2]
  2857 00000C94 6A01                    	push 1
  2858 00000C96 E9A74B0100              	jmp L_error_incorrect_arity_simple
  2859                                  .L_lambda_simple_arity_check_ok_0005:
  2860 00000C9B C8000000                	enter 0, 0
  2861                                  	; preparing a tail-call
  2862 00000C9F 488B4520                	mov rax, PARAM(0)	; param x
  2863 00000CA3 50                      	push rax
  2864 00000CA4 6A01                    	push 1	; arg count
  2865 00000CA6 488B0425[9B120000]      	mov rax, qword [free_var_74]	; free var caar
  2866 00000CAE 803805                  	cmp byte [rax], T_undefined
  2867 00000CB1 0F84A54A0100            	je L_error_fvar_undefined
  2868 00000CB7 803804                  	cmp byte [rax], T_closure
  2869 00000CBA 0F85204B0100            	jne L_error_non_closure
  2870 00000CC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2871 00000CC3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2872 00000CC6 50                      	push rax
  2873 00000CC7 6A01                    	push 1	; arg count
  2874 00000CC9 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  2875 00000CD1 803805                  	cmp byte [rax], T_undefined
  2876 00000CD4 0F84824A0100            	je L_error_fvar_undefined
  2877 00000CDA 803804                  	cmp byte [rax], T_closure
  2878 00000CDD 0F85FD4A0100            	jne L_error_non_closure
  2879 00000CE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2880                                  
  2881                                  	; recycling the current frame
  2882 00000CE6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2883 00000CE9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2884 00000CEC B905000000              	mov rcx, 1 + 4
  2885 00000CF1 488B5D18                	mov rbx, COUNT
  2886 00000CF5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2887 00000CFA 488D55F8                	lea rdx, [rbp - 8 * 1]
  2888                                  .L_tc_recycle_frame_loop_0005:
  2889 00000CFE 4883F900                	cmp rcx, 0
  2890 00000D02 7413                    	je .L_tc_recycle_frame_done_0005
  2891 00000D04 488B32                  	mov rsi, qword [rdx]
  2892 00000D07 488933                  	mov qword [rbx], rsi
  2893 00000D0A 48FFC9                  	dec rcx
  2894 00000D0D 4883EB08                	sub rbx, 8 * 1
  2895 00000D11 4883EA08                	sub rdx, 8 * 1
  2896 00000D15 EBE7                    	jmp .L_tc_recycle_frame_loop_0005
  2897                                  .L_tc_recycle_frame_done_0005:
  2898 00000D17 488D6308                	lea rsp, [rbx + 8 * 1]
  2899 00000D1B 5D                      	pop rbp	; the proc will restore it!
  2900 00000D1C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2901 00000D1F C9                      	leave
  2902 00000D20 C21800                  	ret AND_KILL_FRAME(1)
  2903                                  .L_lambda_simple_end_0005:	; new closure is in rax
  2904 00000D23 48890425[DF120000]      	mov qword [free_var_78], rax
  2905 00000D2B 48B8-                   	mov rax, sob_void
  2905 00000D2D [0000000000000000] 
  2906                                  
  2907 00000D35 4889C7                  	mov rdi, rax
  2908 00000D38 E85E4C0100              	call print_sexpr_if_not_void
  2909                                  
  2910 00000D3D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2911 00000D42 E8424B0100              	call malloc
  2912 00000D47 50                      	push rax
  2913 00000D48 BF00000000              	mov rdi, 8 * 0	; new rib
  2914 00000D4D E8374B0100              	call malloc
  2915 00000D52 50                      	push rax
  2916 00000D53 BF08000000              	mov rdi, 8 * 1	; extended env
  2917 00000D58 E82C4B0100              	call malloc
  2918 00000D5D 488B7D10                	mov rdi, ENV
  2919 00000D61 BE00000000              	mov rsi, 0
  2920 00000D66 BA01000000              	mov rdx, 1
  2921                                  .L_lambda_simple_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  2922 00000D6B 4883FE00                	cmp rsi, 0
  2923 00000D6F 7410                    	je .L_lambda_simple_env_end_0006
  2924 00000D71 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2925 00000D75 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2926 00000D79 48FFC6                  	inc rsi
  2927 00000D7C 48FFC2                  	inc rdx
  2928 00000D7F EBEA                    	jmp .L_lambda_simple_env_loop_0006
  2929                                  .L_lambda_simple_env_end_0006:
  2930 00000D81 5B                      	pop rbx
  2931 00000D82 BE00000000              	mov rsi, 0
  2932                                  .L_lambda_simple_params_loop_0006:	; copy params
  2933 00000D87 4883FE00                	cmp rsi, 0
  2934 00000D8B 740E                    	je .L_lambda_simple_params_end_0006
  2935 00000D8D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2936 00000D92 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2937 00000D96 48FFC6                  	inc rsi
  2938 00000D99 EBEC                    	jmp .L_lambda_simple_params_loop_0006
  2939                                  .L_lambda_simple_params_end_0006:
  2940 00000D9B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2941 00000D9E 4889C3                  	mov rbx, rax
  2942 00000DA1 58                      	pop rax
  2943 00000DA2 C60004                  	mov byte [rax], T_closure
  2944 00000DA5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2945 00000DA9 48C74009[B60D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0006
  2946 00000DB1 E99B000000              	jmp .L_lambda_simple_end_0006
  2947                                  .L_lambda_simple_code_0006:	; lambda-simple body
  2948 00000DB6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2949 00000DBC 740B                    	je .L_lambda_simple_arity_check_ok_0006
  2950 00000DBE FF742410                	push qword [rsp + 8 * 2]
  2951 00000DC2 6A01                    	push 1
  2952 00000DC4 E9794A0100              	jmp L_error_incorrect_arity_simple
  2953                                  .L_lambda_simple_arity_check_ok_0006:
  2954 00000DC9 C8000000                	enter 0, 0
  2955                                  	; preparing a tail-call
  2956 00000DCD 488B4520                	mov rax, PARAM(0)	; param x
  2957 00000DD1 50                      	push rax
  2958 00000DD2 6A01                    	push 1	; arg count
  2959 00000DD4 488B0425[AC120000]      	mov rax, qword [free_var_75]	; free var cadr
  2960 00000DDC 803805                  	cmp byte [rax], T_undefined
  2961 00000DDF 0F8477490100            	je L_error_fvar_undefined
  2962 00000DE5 803804                  	cmp byte [rax], T_closure
  2963 00000DE8 0F85F2490100            	jne L_error_non_closure
  2964 00000DEE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2965 00000DF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2966 00000DF4 50                      	push rax
  2967 00000DF5 6A01                    	push 1	; arg count
  2968 00000DF7 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  2969 00000DFF 803805                  	cmp byte [rax], T_undefined
  2970 00000E02 0F8454490100            	je L_error_fvar_undefined
  2971 00000E08 803804                  	cmp byte [rax], T_closure
  2972 00000E0B 0F85CF490100            	jne L_error_non_closure
  2973 00000E11 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2974                                  
  2975                                  	; recycling the current frame
  2976 00000E14 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2977 00000E17 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2978 00000E1A B905000000              	mov rcx, 1 + 4
  2979 00000E1F 488B5D18                	mov rbx, COUNT
  2980 00000E23 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2981 00000E28 488D55F8                	lea rdx, [rbp - 8 * 1]
  2982                                  .L_tc_recycle_frame_loop_0006:
  2983 00000E2C 4883F900                	cmp rcx, 0
  2984 00000E30 7413                    	je .L_tc_recycle_frame_done_0006
  2985 00000E32 488B32                  	mov rsi, qword [rdx]
  2986 00000E35 488933                  	mov qword [rbx], rsi
  2987 00000E38 48FFC9                  	dec rcx
  2988 00000E3B 4883EB08                	sub rbx, 8 * 1
  2989 00000E3F 4883EA08                	sub rdx, 8 * 1
  2990 00000E43 EBE7                    	jmp .L_tc_recycle_frame_loop_0006
  2991                                  .L_tc_recycle_frame_done_0006:
  2992 00000E45 488D6308                	lea rsp, [rbx + 8 * 1]
  2993 00000E49 5D                      	pop rbp	; the proc will restore it!
  2994 00000E4A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2995 00000E4D C9                      	leave
  2996 00000E4E C21800                  	ret AND_KILL_FRAME(1)
  2997                                  .L_lambda_simple_end_0006:	; new closure is in rax
  2998 00000E51 48890425[F0120000]      	mov qword [free_var_79], rax
  2999 00000E59 48B8-                   	mov rax, sob_void
  2999 00000E5B [0000000000000000] 
  3000                                  
  3001 00000E63 4889C7                  	mov rdi, rax
  3002 00000E66 E8304B0100              	call print_sexpr_if_not_void
  3003                                  
  3004 00000E6B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3005 00000E70 E8144A0100              	call malloc
  3006 00000E75 50                      	push rax
  3007 00000E76 BF00000000              	mov rdi, 8 * 0	; new rib
  3008 00000E7B E8094A0100              	call malloc
  3009 00000E80 50                      	push rax
  3010 00000E81 BF08000000              	mov rdi, 8 * 1	; extended env
  3011 00000E86 E8FE490100              	call malloc
  3012 00000E8B 488B7D10                	mov rdi, ENV
  3013 00000E8F BE00000000              	mov rsi, 0
  3014 00000E94 BA01000000              	mov rdx, 1
  3015                                  .L_lambda_simple_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  3016 00000E99 4883FE00                	cmp rsi, 0
  3017 00000E9D 7410                    	je .L_lambda_simple_env_end_0007
  3018 00000E9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3019 00000EA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3020 00000EA7 48FFC6                  	inc rsi
  3021 00000EAA 48FFC2                  	inc rdx
  3022 00000EAD EBEA                    	jmp .L_lambda_simple_env_loop_0007
  3023                                  .L_lambda_simple_env_end_0007:
  3024 00000EAF 5B                      	pop rbx
  3025 00000EB0 BE00000000              	mov rsi, 0
  3026                                  .L_lambda_simple_params_loop_0007:	; copy params
  3027 00000EB5 4883FE00                	cmp rsi, 0
  3028 00000EB9 740E                    	je .L_lambda_simple_params_end_0007
  3029 00000EBB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3030 00000EC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3031 00000EC4 48FFC6                  	inc rsi
  3032 00000EC7 EBEC                    	jmp .L_lambda_simple_params_loop_0007
  3033                                  .L_lambda_simple_params_end_0007:
  3034 00000EC9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3035 00000ECC 4889C3                  	mov rbx, rax
  3036 00000ECF 58                      	pop rax
  3037 00000ED0 C60004                  	mov byte [rax], T_closure
  3038 00000ED3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3039 00000ED7 48C74009[E40E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0007
  3040 00000EDF E99B000000              	jmp .L_lambda_simple_end_0007
  3041                                  .L_lambda_simple_code_0007:	; lambda-simple body
  3042 00000EE4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3043 00000EEA 740B                    	je .L_lambda_simple_arity_check_ok_0007
  3044 00000EEC FF742410                	push qword [rsp + 8 * 2]
  3045 00000EF0 6A01                    	push 1
  3046 00000EF2 E94B490100              	jmp L_error_incorrect_arity_simple
  3047                                  .L_lambda_simple_arity_check_ok_0007:
  3048 00000EF7 C8000000                	enter 0, 0
  3049                                  	; preparing a tail-call
  3050 00000EFB 488B4520                	mov rax, PARAM(0)	; param x
  3051 00000EFF 50                      	push rax
  3052 00000F00 6A01                    	push 1	; arg count
  3053 00000F02 488B0425[BD120000]      	mov rax, qword [free_var_76]	; free var cdar
  3054 00000F0A 803805                  	cmp byte [rax], T_undefined
  3055 00000F0D 0F8449480100            	je L_error_fvar_undefined
  3056 00000F13 803804                  	cmp byte [rax], T_closure
  3057 00000F16 0F85C4480100            	jne L_error_non_closure
  3058 00000F1C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3059 00000F1F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3060 00000F22 50                      	push rax
  3061 00000F23 6A01                    	push 1	; arg count
  3062 00000F25 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  3063 00000F2D 803805                  	cmp byte [rax], T_undefined
  3064 00000F30 0F8426480100            	je L_error_fvar_undefined
  3065 00000F36 803804                  	cmp byte [rax], T_closure
  3066 00000F39 0F85A1480100            	jne L_error_non_closure
  3067 00000F3F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3068                                  
  3069                                  	; recycling the current frame
  3070 00000F42 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3071 00000F45 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3072 00000F48 B905000000              	mov rcx, 1 + 4
  3073 00000F4D 488B5D18                	mov rbx, COUNT
  3074 00000F51 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3075 00000F56 488D55F8                	lea rdx, [rbp - 8 * 1]
  3076                                  .L_tc_recycle_frame_loop_0007:
  3077 00000F5A 4883F900                	cmp rcx, 0
  3078 00000F5E 7413                    	je .L_tc_recycle_frame_done_0007
  3079 00000F60 488B32                  	mov rsi, qword [rdx]
  3080 00000F63 488933                  	mov qword [rbx], rsi
  3081 00000F66 48FFC9                  	dec rcx
  3082 00000F69 4883EB08                	sub rbx, 8 * 1
  3083 00000F6D 4883EA08                	sub rdx, 8 * 1
  3084 00000F71 EBE7                    	jmp .L_tc_recycle_frame_loop_0007
  3085                                  .L_tc_recycle_frame_done_0007:
  3086 00000F73 488D6308                	lea rsp, [rbx + 8 * 1]
  3087 00000F77 5D                      	pop rbp	; the proc will restore it!
  3088 00000F78 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3089 00000F7B C9                      	leave
  3090 00000F7C C21800                  	ret AND_KILL_FRAME(1)
  3091                                  .L_lambda_simple_end_0007:	; new closure is in rax
  3092 00000F7F 48890425[01130000]      	mov qword [free_var_80], rax
  3093 00000F87 48B8-                   	mov rax, sob_void
  3093 00000F89 [0000000000000000] 
  3094                                  
  3095 00000F91 4889C7                  	mov rdi, rax
  3096 00000F94 E8024A0100              	call print_sexpr_if_not_void
  3097                                  
  3098 00000F99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3099 00000F9E E8E6480100              	call malloc
  3100 00000FA3 50                      	push rax
  3101 00000FA4 BF00000000              	mov rdi, 8 * 0	; new rib
  3102 00000FA9 E8DB480100              	call malloc
  3103 00000FAE 50                      	push rax
  3104 00000FAF BF08000000              	mov rdi, 8 * 1	; extended env
  3105 00000FB4 E8D0480100              	call malloc
  3106 00000FB9 488B7D10                	mov rdi, ENV
  3107 00000FBD BE00000000              	mov rsi, 0
  3108 00000FC2 BA01000000              	mov rdx, 1
  3109                                  .L_lambda_simple_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  3110 00000FC7 4883FE00                	cmp rsi, 0
  3111 00000FCB 7410                    	je .L_lambda_simple_env_end_0008
  3112 00000FCD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3113 00000FD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3114 00000FD5 48FFC6                  	inc rsi
  3115 00000FD8 48FFC2                  	inc rdx
  3116 00000FDB EBEA                    	jmp .L_lambda_simple_env_loop_0008
  3117                                  .L_lambda_simple_env_end_0008:
  3118 00000FDD 5B                      	pop rbx
  3119 00000FDE BE00000000              	mov rsi, 0
  3120                                  .L_lambda_simple_params_loop_0008:	; copy params
  3121 00000FE3 4883FE00                	cmp rsi, 0
  3122 00000FE7 740E                    	je .L_lambda_simple_params_end_0008
  3123 00000FE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3124 00000FEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3125 00000FF2 48FFC6                  	inc rsi
  3126 00000FF5 EBEC                    	jmp .L_lambda_simple_params_loop_0008
  3127                                  .L_lambda_simple_params_end_0008:
  3128 00000FF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3129 00000FFA 4889C3                  	mov rbx, rax
  3130 00000FFD 58                      	pop rax
  3131 00000FFE C60004                  	mov byte [rax], T_closure
  3132 00001001 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3133 00001005 48C74009[12100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0008
  3134 0000100D E99B000000              	jmp .L_lambda_simple_end_0008
  3135                                  .L_lambda_simple_code_0008:	; lambda-simple body
  3136 00001012 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3137 00001018 740B                    	je .L_lambda_simple_arity_check_ok_0008
  3138 0000101A FF742410                	push qword [rsp + 8 * 2]
  3139 0000101E 6A01                    	push 1
  3140 00001020 E91D480100              	jmp L_error_incorrect_arity_simple
  3141                                  .L_lambda_simple_arity_check_ok_0008:
  3142 00001025 C8000000                	enter 0, 0
  3143                                  	; preparing a tail-call
  3144 00001029 488B4520                	mov rax, PARAM(0)	; param x
  3145 0000102D 50                      	push rax
  3146 0000102E 6A01                    	push 1	; arg count
  3147 00001030 488B0425[CE120000]      	mov rax, qword [free_var_77]	; free var cddr
  3148 00001038 803805                  	cmp byte [rax], T_undefined
  3149 0000103B 0F841B470100            	je L_error_fvar_undefined
  3150 00001041 803804                  	cmp byte [rax], T_closure
  3151 00001044 0F8596470100            	jne L_error_non_closure
  3152 0000104A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3153 0000104D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3154 00001050 50                      	push rax
  3155 00001051 6A01                    	push 1	; arg count
  3156 00001053 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  3157 0000105B 803805                  	cmp byte [rax], T_undefined
  3158 0000105E 0F84F8460100            	je L_error_fvar_undefined
  3159 00001064 803804                  	cmp byte [rax], T_closure
  3160 00001067 0F8573470100            	jne L_error_non_closure
  3161 0000106D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3162                                  
  3163                                  	; recycling the current frame
  3164 00001070 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3165 00001073 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3166 00001076 B905000000              	mov rcx, 1 + 4
  3167 0000107B 488B5D18                	mov rbx, COUNT
  3168 0000107F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3169 00001084 488D55F8                	lea rdx, [rbp - 8 * 1]
  3170                                  .L_tc_recycle_frame_loop_0008:
  3171 00001088 4883F900                	cmp rcx, 0
  3172 0000108C 7413                    	je .L_tc_recycle_frame_done_0008
  3173 0000108E 488B32                  	mov rsi, qword [rdx]
  3174 00001091 488933                  	mov qword [rbx], rsi
  3175 00001094 48FFC9                  	dec rcx
  3176 00001097 4883EB08                	sub rbx, 8 * 1
  3177 0000109B 4883EA08                	sub rdx, 8 * 1
  3178 0000109F EBE7                    	jmp .L_tc_recycle_frame_loop_0008
  3179                                  .L_tc_recycle_frame_done_0008:
  3180 000010A1 488D6308                	lea rsp, [rbx + 8 * 1]
  3181 000010A5 5D                      	pop rbp	; the proc will restore it!
  3182 000010A6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3183 000010A9 C9                      	leave
  3184 000010AA C21800                  	ret AND_KILL_FRAME(1)
  3185                                  .L_lambda_simple_end_0008:	; new closure is in rax
  3186 000010AD 48890425[12130000]      	mov qword [free_var_81], rax
  3187 000010B5 48B8-                   	mov rax, sob_void
  3187 000010B7 [0000000000000000] 
  3188                                  
  3189 000010BF 4889C7                  	mov rdi, rax
  3190 000010C2 E8D4480100              	call print_sexpr_if_not_void
  3191                                  
  3192 000010C7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3193 000010CC E8B8470100              	call malloc
  3194 000010D1 50                      	push rax
  3195 000010D2 BF00000000              	mov rdi, 8 * 0	; new rib
  3196 000010D7 E8AD470100              	call malloc
  3197 000010DC 50                      	push rax
  3198 000010DD BF08000000              	mov rdi, 8 * 1	; extended env
  3199 000010E2 E8A2470100              	call malloc
  3200 000010E7 488B7D10                	mov rdi, ENV
  3201 000010EB BE00000000              	mov rsi, 0
  3202 000010F0 BA01000000              	mov rdx, 1
  3203                                  .L_lambda_simple_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  3204 000010F5 4883FE00                	cmp rsi, 0
  3205 000010F9 7410                    	je .L_lambda_simple_env_end_0009
  3206 000010FB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3207 000010FF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3208 00001103 48FFC6                  	inc rsi
  3209 00001106 48FFC2                  	inc rdx
  3210 00001109 EBEA                    	jmp .L_lambda_simple_env_loop_0009
  3211                                  .L_lambda_simple_env_end_0009:
  3212 0000110B 5B                      	pop rbx
  3213 0000110C BE00000000              	mov rsi, 0
  3214                                  .L_lambda_simple_params_loop_0009:	; copy params
  3215 00001111 4883FE00                	cmp rsi, 0
  3216 00001115 740E                    	je .L_lambda_simple_params_end_0009
  3217 00001117 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3218 0000111C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3219 00001120 48FFC6                  	inc rsi
  3220 00001123 EBEC                    	jmp .L_lambda_simple_params_loop_0009
  3221                                  .L_lambda_simple_params_end_0009:
  3222 00001125 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3223 00001128 4889C3                  	mov rbx, rax
  3224 0000112B 58                      	pop rax
  3225 0000112C C60004                  	mov byte [rax], T_closure
  3226 0000112F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3227 00001133 48C74009[40110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0009
  3228 0000113B E99B000000              	jmp .L_lambda_simple_end_0009
  3229                                  .L_lambda_simple_code_0009:	; lambda-simple body
  3230 00001140 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3231 00001146 740B                    	je .L_lambda_simple_arity_check_ok_0009
  3232 00001148 FF742410                	push qword [rsp + 8 * 2]
  3233 0000114C 6A01                    	push 1
  3234 0000114E E9EF460100              	jmp L_error_incorrect_arity_simple
  3235                                  .L_lambda_simple_arity_check_ok_0009:
  3236 00001153 C8000000                	enter 0, 0
  3237                                  	; preparing a tail-call
  3238 00001157 488B4520                	mov rax, PARAM(0)	; param x
  3239 0000115B 50                      	push rax
  3240 0000115C 6A01                    	push 1	; arg count
  3241 0000115E 488B0425[9B120000]      	mov rax, qword [free_var_74]	; free var caar
  3242 00001166 803805                  	cmp byte [rax], T_undefined
  3243 00001169 0F84ED450100            	je L_error_fvar_undefined
  3244 0000116F 803804                  	cmp byte [rax], T_closure
  3245 00001172 0F8568460100            	jne L_error_non_closure
  3246 00001178 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3247 0000117B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3248 0000117E 50                      	push rax
  3249 0000117F 6A01                    	push 1	; arg count
  3250 00001181 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3251 00001189 803805                  	cmp byte [rax], T_undefined
  3252 0000118C 0F84CA450100            	je L_error_fvar_undefined
  3253 00001192 803804                  	cmp byte [rax], T_closure
  3254 00001195 0F8545460100            	jne L_error_non_closure
  3255 0000119B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3256                                  
  3257                                  	; recycling the current frame
  3258 0000119E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3259 000011A1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3260 000011A4 B905000000              	mov rcx, 1 + 4
  3261 000011A9 488B5D18                	mov rbx, COUNT
  3262 000011AD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3263 000011B2 488D55F8                	lea rdx, [rbp - 8 * 1]
  3264                                  .L_tc_recycle_frame_loop_0009:
  3265 000011B6 4883F900                	cmp rcx, 0
  3266 000011BA 7413                    	je .L_tc_recycle_frame_done_0009
  3267 000011BC 488B32                  	mov rsi, qword [rdx]
  3268 000011BF 488933                  	mov qword [rbx], rsi
  3269 000011C2 48FFC9                  	dec rcx
  3270 000011C5 4883EB08                	sub rbx, 8 * 1
  3271 000011C9 4883EA08                	sub rdx, 8 * 1
  3272 000011CD EBE7                    	jmp .L_tc_recycle_frame_loop_0009
  3273                                  .L_tc_recycle_frame_done_0009:
  3274 000011CF 488D6308                	lea rsp, [rbx + 8 * 1]
  3275 000011D3 5D                      	pop rbp	; the proc will restore it!
  3276 000011D4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3277 000011D7 C9                      	leave
  3278 000011D8 C21800                  	ret AND_KILL_FRAME(1)
  3279                                  .L_lambda_simple_end_0009:	; new closure is in rax
  3280 000011DB 48890425[23130000]      	mov qword [free_var_82], rax
  3281 000011E3 48B8-                   	mov rax, sob_void
  3281 000011E5 [0000000000000000] 
  3282                                  
  3283 000011ED 4889C7                  	mov rdi, rax
  3284 000011F0 E8A6470100              	call print_sexpr_if_not_void
  3285                                  
  3286 000011F5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3287 000011FA E88A460100              	call malloc
  3288 000011FF 50                      	push rax
  3289 00001200 BF00000000              	mov rdi, 8 * 0	; new rib
  3290 00001205 E87F460100              	call malloc
  3291 0000120A 50                      	push rax
  3292 0000120B BF08000000              	mov rdi, 8 * 1	; extended env
  3293 00001210 E874460100              	call malloc
  3294 00001215 488B7D10                	mov rdi, ENV
  3295 00001219 BE00000000              	mov rsi, 0
  3296 0000121E BA01000000              	mov rdx, 1
  3297                                  .L_lambda_simple_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  3298 00001223 4883FE00                	cmp rsi, 0
  3299 00001227 7410                    	je .L_lambda_simple_env_end_000a
  3300 00001229 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3301 0000122D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3302 00001231 48FFC6                  	inc rsi
  3303 00001234 48FFC2                  	inc rdx
  3304 00001237 EBEA                    	jmp .L_lambda_simple_env_loop_000a
  3305                                  .L_lambda_simple_env_end_000a:
  3306 00001239 5B                      	pop rbx
  3307 0000123A BE00000000              	mov rsi, 0
  3308                                  .L_lambda_simple_params_loop_000a:	; copy params
  3309 0000123F 4883FE00                	cmp rsi, 0
  3310 00001243 740E                    	je .L_lambda_simple_params_end_000a
  3311 00001245 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3312 0000124A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3313 0000124E 48FFC6                  	inc rsi
  3314 00001251 EBEC                    	jmp .L_lambda_simple_params_loop_000a
  3315                                  .L_lambda_simple_params_end_000a:
  3316 00001253 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3317 00001256 4889C3                  	mov rbx, rax
  3318 00001259 58                      	pop rax
  3319 0000125A C60004                  	mov byte [rax], T_closure
  3320 0000125D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3321 00001261 48C74009[6E120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000a
  3322 00001269 E99B000000              	jmp .L_lambda_simple_end_000a
  3323                                  .L_lambda_simple_code_000a:	; lambda-simple body
  3324 0000126E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3325 00001274 740B                    	je .L_lambda_simple_arity_check_ok_000a
  3326 00001276 FF742410                	push qword [rsp + 8 * 2]
  3327 0000127A 6A01                    	push 1
  3328 0000127C E9C1450100              	jmp L_error_incorrect_arity_simple
  3329                                  .L_lambda_simple_arity_check_ok_000a:
  3330 00001281 C8000000                	enter 0, 0
  3331                                  	; preparing a tail-call
  3332 00001285 488B4520                	mov rax, PARAM(0)	; param x
  3333 00001289 50                      	push rax
  3334 0000128A 6A01                    	push 1	; arg count
  3335 0000128C 488B0425[AC120000]      	mov rax, qword [free_var_75]	; free var cadr
  3336 00001294 803805                  	cmp byte [rax], T_undefined
  3337 00001297 0F84BF440100            	je L_error_fvar_undefined
  3338 0000129D 803804                  	cmp byte [rax], T_closure
  3339 000012A0 0F853A450100            	jne L_error_non_closure
  3340 000012A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3341 000012A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3342 000012AC 50                      	push rax
  3343 000012AD 6A01                    	push 1	; arg count
  3344 000012AF 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3345 000012B7 803805                  	cmp byte [rax], T_undefined
  3346 000012BA 0F849C440100            	je L_error_fvar_undefined
  3347 000012C0 803804                  	cmp byte [rax], T_closure
  3348 000012C3 0F8517450100            	jne L_error_non_closure
  3349 000012C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3350                                  
  3351                                  	; recycling the current frame
  3352 000012CC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3353 000012CF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3354 000012D2 B905000000              	mov rcx, 1 + 4
  3355 000012D7 488B5D18                	mov rbx, COUNT
  3356 000012DB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3357 000012E0 488D55F8                	lea rdx, [rbp - 8 * 1]
  3358                                  .L_tc_recycle_frame_loop_000a:
  3359 000012E4 4883F900                	cmp rcx, 0
  3360 000012E8 7413                    	je .L_tc_recycle_frame_done_000a
  3361 000012EA 488B32                  	mov rsi, qword [rdx]
  3362 000012ED 488933                  	mov qword [rbx], rsi
  3363 000012F0 48FFC9                  	dec rcx
  3364 000012F3 4883EB08                	sub rbx, 8 * 1
  3365 000012F7 4883EA08                	sub rdx, 8 * 1
  3366 000012FB EBE7                    	jmp .L_tc_recycle_frame_loop_000a
  3367                                  .L_tc_recycle_frame_done_000a:
  3368 000012FD 488D6308                	lea rsp, [rbx + 8 * 1]
  3369 00001301 5D                      	pop rbp	; the proc will restore it!
  3370 00001302 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3371 00001305 C9                      	leave
  3372 00001306 C21800                  	ret AND_KILL_FRAME(1)
  3373                                  .L_lambda_simple_end_000a:	; new closure is in rax
  3374 00001309 48890425[34130000]      	mov qword [free_var_83], rax
  3375 00001311 48B8-                   	mov rax, sob_void
  3375 00001313 [0000000000000000] 
  3376                                  
  3377 0000131B 4889C7                  	mov rdi, rax
  3378 0000131E E878460100              	call print_sexpr_if_not_void
  3379                                  
  3380 00001323 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3381 00001328 E85C450100              	call malloc
  3382 0000132D 50                      	push rax
  3383 0000132E BF00000000              	mov rdi, 8 * 0	; new rib
  3384 00001333 E851450100              	call malloc
  3385 00001338 50                      	push rax
  3386 00001339 BF08000000              	mov rdi, 8 * 1	; extended env
  3387 0000133E E846450100              	call malloc
  3388 00001343 488B7D10                	mov rdi, ENV
  3389 00001347 BE00000000              	mov rsi, 0
  3390 0000134C BA01000000              	mov rdx, 1
  3391                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  3392 00001351 4883FE00                	cmp rsi, 0
  3393 00001355 7410                    	je .L_lambda_simple_env_end_000b
  3394 00001357 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3395 0000135B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3396 0000135F 48FFC6                  	inc rsi
  3397 00001362 48FFC2                  	inc rdx
  3398 00001365 EBEA                    	jmp .L_lambda_simple_env_loop_000b
  3399                                  .L_lambda_simple_env_end_000b:
  3400 00001367 5B                      	pop rbx
  3401 00001368 BE00000000              	mov rsi, 0
  3402                                  .L_lambda_simple_params_loop_000b:	; copy params
  3403 0000136D 4883FE00                	cmp rsi, 0
  3404 00001371 740E                    	je .L_lambda_simple_params_end_000b
  3405 00001373 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3406 00001378 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3407 0000137C 48FFC6                  	inc rsi
  3408 0000137F EBEC                    	jmp .L_lambda_simple_params_loop_000b
  3409                                  .L_lambda_simple_params_end_000b:
  3410 00001381 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3411 00001384 4889C3                  	mov rbx, rax
  3412 00001387 58                      	pop rax
  3413 00001388 C60004                  	mov byte [rax], T_closure
  3414 0000138B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3415 0000138F 48C74009[9C130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
  3416 00001397 E99B000000              	jmp .L_lambda_simple_end_000b
  3417                                  .L_lambda_simple_code_000b:	; lambda-simple body
  3418 0000139C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3419 000013A2 740B                    	je .L_lambda_simple_arity_check_ok_000b
  3420 000013A4 FF742410                	push qword [rsp + 8 * 2]
  3421 000013A8 6A01                    	push 1
  3422 000013AA E993440100              	jmp L_error_incorrect_arity_simple
  3423                                  .L_lambda_simple_arity_check_ok_000b:
  3424 000013AF C8000000                	enter 0, 0
  3425                                  	; preparing a tail-call
  3426 000013B3 488B4520                	mov rax, PARAM(0)	; param x
  3427 000013B7 50                      	push rax
  3428 000013B8 6A01                    	push 1	; arg count
  3429 000013BA 488B0425[BD120000]      	mov rax, qword [free_var_76]	; free var cdar
  3430 000013C2 803805                  	cmp byte [rax], T_undefined
  3431 000013C5 0F8491430100            	je L_error_fvar_undefined
  3432 000013CB 803804                  	cmp byte [rax], T_closure
  3433 000013CE 0F850C440100            	jne L_error_non_closure
  3434 000013D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3435 000013D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3436 000013DA 50                      	push rax
  3437 000013DB 6A01                    	push 1	; arg count
  3438 000013DD 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3439 000013E5 803805                  	cmp byte [rax], T_undefined
  3440 000013E8 0F846E430100            	je L_error_fvar_undefined
  3441 000013EE 803804                  	cmp byte [rax], T_closure
  3442 000013F1 0F85E9430100            	jne L_error_non_closure
  3443 000013F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3444                                  
  3445                                  	; recycling the current frame
  3446 000013FA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3447 000013FD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3448 00001400 B905000000              	mov rcx, 1 + 4
  3449 00001405 488B5D18                	mov rbx, COUNT
  3450 00001409 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3451 0000140E 488D55F8                	lea rdx, [rbp - 8 * 1]
  3452                                  .L_tc_recycle_frame_loop_000b:
  3453 00001412 4883F900                	cmp rcx, 0
  3454 00001416 7413                    	je .L_tc_recycle_frame_done_000b
  3455 00001418 488B32                  	mov rsi, qword [rdx]
  3456 0000141B 488933                  	mov qword [rbx], rsi
  3457 0000141E 48FFC9                  	dec rcx
  3458 00001421 4883EB08                	sub rbx, 8 * 1
  3459 00001425 4883EA08                	sub rdx, 8 * 1
  3460 00001429 EBE7                    	jmp .L_tc_recycle_frame_loop_000b
  3461                                  .L_tc_recycle_frame_done_000b:
  3462 0000142B 488D6308                	lea rsp, [rbx + 8 * 1]
  3463 0000142F 5D                      	pop rbp	; the proc will restore it!
  3464 00001430 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3465 00001433 C9                      	leave
  3466 00001434 C21800                  	ret AND_KILL_FRAME(1)
  3467                                  .L_lambda_simple_end_000b:	; new closure is in rax
  3468 00001437 48890425[45130000]      	mov qword [free_var_84], rax
  3469 0000143F 48B8-                   	mov rax, sob_void
  3469 00001441 [0000000000000000] 
  3470                                  
  3471 00001449 4889C7                  	mov rdi, rax
  3472 0000144C E84A450100              	call print_sexpr_if_not_void
  3473                                  
  3474 00001451 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3475 00001456 E82E440100              	call malloc
  3476 0000145B 50                      	push rax
  3477 0000145C BF00000000              	mov rdi, 8 * 0	; new rib
  3478 00001461 E823440100              	call malloc
  3479 00001466 50                      	push rax
  3480 00001467 BF08000000              	mov rdi, 8 * 1	; extended env
  3481 0000146C E818440100              	call malloc
  3482 00001471 488B7D10                	mov rdi, ENV
  3483 00001475 BE00000000              	mov rsi, 0
  3484 0000147A BA01000000              	mov rdx, 1
  3485                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  3486 0000147F 4883FE00                	cmp rsi, 0
  3487 00001483 7410                    	je .L_lambda_simple_env_end_000c
  3488 00001485 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3489 00001489 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3490 0000148D 48FFC6                  	inc rsi
  3491 00001490 48FFC2                  	inc rdx
  3492 00001493 EBEA                    	jmp .L_lambda_simple_env_loop_000c
  3493                                  .L_lambda_simple_env_end_000c:
  3494 00001495 5B                      	pop rbx
  3495 00001496 BE00000000              	mov rsi, 0
  3496                                  .L_lambda_simple_params_loop_000c:	; copy params
  3497 0000149B 4883FE00                	cmp rsi, 0
  3498 0000149F 740E                    	je .L_lambda_simple_params_end_000c
  3499 000014A1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3500 000014A6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3501 000014AA 48FFC6                  	inc rsi
  3502 000014AD EBEC                    	jmp .L_lambda_simple_params_loop_000c
  3503                                  .L_lambda_simple_params_end_000c:
  3504 000014AF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3505 000014B2 4889C3                  	mov rbx, rax
  3506 000014B5 58                      	pop rax
  3507 000014B6 C60004                  	mov byte [rax], T_closure
  3508 000014B9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3509 000014BD 48C74009[CA140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
  3510 000014C5 E99B000000              	jmp .L_lambda_simple_end_000c
  3511                                  .L_lambda_simple_code_000c:	; lambda-simple body
  3512 000014CA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3513 000014D0 740B                    	je .L_lambda_simple_arity_check_ok_000c
  3514 000014D2 FF742410                	push qword [rsp + 8 * 2]
  3515 000014D6 6A01                    	push 1
  3516 000014D8 E965430100              	jmp L_error_incorrect_arity_simple
  3517                                  .L_lambda_simple_arity_check_ok_000c:
  3518 000014DD C8000000                	enter 0, 0
  3519                                  	; preparing a tail-call
  3520 000014E1 488B4520                	mov rax, PARAM(0)	; param x
  3521 000014E5 50                      	push rax
  3522 000014E6 6A01                    	push 1	; arg count
  3523 000014E8 488B0425[CE120000]      	mov rax, qword [free_var_77]	; free var cddr
  3524 000014F0 803805                  	cmp byte [rax], T_undefined
  3525 000014F3 0F8463420100            	je L_error_fvar_undefined
  3526 000014F9 803804                  	cmp byte [rax], T_closure
  3527 000014FC 0F85DE420100            	jne L_error_non_closure
  3528 00001502 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3529 00001505 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3530 00001508 50                      	push rax
  3531 00001509 6A01                    	push 1	; arg count
  3532 0000150B 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3533 00001513 803805                  	cmp byte [rax], T_undefined
  3534 00001516 0F8440420100            	je L_error_fvar_undefined
  3535 0000151C 803804                  	cmp byte [rax], T_closure
  3536 0000151F 0F85BB420100            	jne L_error_non_closure
  3537 00001525 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3538                                  
  3539                                  	; recycling the current frame
  3540 00001528 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3541 0000152B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3542 0000152E B905000000              	mov rcx, 1 + 4
  3543 00001533 488B5D18                	mov rbx, COUNT
  3544 00001537 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3545 0000153C 488D55F8                	lea rdx, [rbp - 8 * 1]
  3546                                  .L_tc_recycle_frame_loop_000c:
  3547 00001540 4883F900                	cmp rcx, 0
  3548 00001544 7413                    	je .L_tc_recycle_frame_done_000c
  3549 00001546 488B32                  	mov rsi, qword [rdx]
  3550 00001549 488933                  	mov qword [rbx], rsi
  3551 0000154C 48FFC9                  	dec rcx
  3552 0000154F 4883EB08                	sub rbx, 8 * 1
  3553 00001553 4883EA08                	sub rdx, 8 * 1
  3554 00001557 EBE7                    	jmp .L_tc_recycle_frame_loop_000c
  3555                                  .L_tc_recycle_frame_done_000c:
  3556 00001559 488D6308                	lea rsp, [rbx + 8 * 1]
  3557 0000155D 5D                      	pop rbp	; the proc will restore it!
  3558 0000155E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3559 00001561 C9                      	leave
  3560 00001562 C21800                  	ret AND_KILL_FRAME(1)
  3561                                  .L_lambda_simple_end_000c:	; new closure is in rax
  3562 00001565 48890425[56130000]      	mov qword [free_var_85], rax
  3563 0000156D 48B8-                   	mov rax, sob_void
  3563 0000156F [0000000000000000] 
  3564                                  
  3565 00001577 4889C7                  	mov rdi, rax
  3566 0000157A E81C440100              	call print_sexpr_if_not_void
  3567                                  
  3568 0000157F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3569 00001584 E800430100              	call malloc
  3570 00001589 50                      	push rax
  3571 0000158A BF00000000              	mov rdi, 8 * 0	; new rib
  3572 0000158F E8F5420100              	call malloc
  3573 00001594 50                      	push rax
  3574 00001595 BF08000000              	mov rdi, 8 * 1	; extended env
  3575 0000159A E8EA420100              	call malloc
  3576 0000159F 488B7D10                	mov rdi, ENV
  3577 000015A3 BE00000000              	mov rsi, 0
  3578 000015A8 BA01000000              	mov rdx, 1
  3579                                  .L_lambda_simple_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  3580 000015AD 4883FE00                	cmp rsi, 0
  3581 000015B1 7410                    	je .L_lambda_simple_env_end_000d
  3582 000015B3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3583 000015B7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3584 000015BB 48FFC6                  	inc rsi
  3585 000015BE 48FFC2                  	inc rdx
  3586 000015C1 EBEA                    	jmp .L_lambda_simple_env_loop_000d
  3587                                  .L_lambda_simple_env_end_000d:
  3588 000015C3 5B                      	pop rbx
  3589 000015C4 BE00000000              	mov rsi, 0
  3590                                  .L_lambda_simple_params_loop_000d:	; copy params
  3591 000015C9 4883FE00                	cmp rsi, 0
  3592 000015CD 740E                    	je .L_lambda_simple_params_end_000d
  3593 000015CF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3594 000015D4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3595 000015D8 48FFC6                  	inc rsi
  3596 000015DB EBEC                    	jmp .L_lambda_simple_params_loop_000d
  3597                                  .L_lambda_simple_params_end_000d:
  3598 000015DD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3599 000015E0 4889C3                  	mov rbx, rax
  3600 000015E3 58                      	pop rax
  3601 000015E4 C60004                  	mov byte [rax], T_closure
  3602 000015E7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3603 000015EB 48C74009[F8150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000d
  3604 000015F3 E99B000000              	jmp .L_lambda_simple_end_000d
  3605                                  .L_lambda_simple_code_000d:	; lambda-simple body
  3606 000015F8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3607 000015FE 740B                    	je .L_lambda_simple_arity_check_ok_000d
  3608 00001600 FF742410                	push qword [rsp + 8 * 2]
  3609 00001604 6A01                    	push 1
  3610 00001606 E937420100              	jmp L_error_incorrect_arity_simple
  3611                                  .L_lambda_simple_arity_check_ok_000d:
  3612 0000160B C8000000                	enter 0, 0
  3613                                  	; preparing a tail-call
  3614 0000160F 488B4520                	mov rax, PARAM(0)	; param x
  3615 00001613 50                      	push rax
  3616 00001614 6A01                    	push 1	; arg count
  3617 00001616 488B0425[9B120000]      	mov rax, qword [free_var_74]	; free var caar
  3618 0000161E 803805                  	cmp byte [rax], T_undefined
  3619 00001621 0F8435410100            	je L_error_fvar_undefined
  3620 00001627 803804                  	cmp byte [rax], T_closure
  3621 0000162A 0F85B0410100            	jne L_error_non_closure
  3622 00001630 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3623 00001633 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3624 00001636 50                      	push rax
  3625 00001637 6A01                    	push 1	; arg count
  3626 00001639 488B0425[9B120000]      	mov rax, qword [free_var_74]	; free var caar
  3627 00001641 803805                  	cmp byte [rax], T_undefined
  3628 00001644 0F8412410100            	je L_error_fvar_undefined
  3629 0000164A 803804                  	cmp byte [rax], T_closure
  3630 0000164D 0F858D410100            	jne L_error_non_closure
  3631 00001653 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3632                                  
  3633                                  	; recycling the current frame
  3634 00001656 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3635 00001659 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3636 0000165C B905000000              	mov rcx, 1 + 4
  3637 00001661 488B5D18                	mov rbx, COUNT
  3638 00001665 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3639 0000166A 488D55F8                	lea rdx, [rbp - 8 * 1]
  3640                                  .L_tc_recycle_frame_loop_000d:
  3641 0000166E 4883F900                	cmp rcx, 0
  3642 00001672 7413                    	je .L_tc_recycle_frame_done_000d
  3643 00001674 488B32                  	mov rsi, qword [rdx]
  3644 00001677 488933                  	mov qword [rbx], rsi
  3645 0000167A 48FFC9                  	dec rcx
  3646 0000167D 4883EB08                	sub rbx, 8 * 1
  3647 00001681 4883EA08                	sub rdx, 8 * 1
  3648 00001685 EBE7                    	jmp .L_tc_recycle_frame_loop_000d
  3649                                  .L_tc_recycle_frame_done_000d:
  3650 00001687 488D6308                	lea rsp, [rbx + 8 * 1]
  3651 0000168B 5D                      	pop rbp	; the proc will restore it!
  3652 0000168C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3653 0000168F C9                      	leave
  3654 00001690 C21800                  	ret AND_KILL_FRAME(1)
  3655                                  .L_lambda_simple_end_000d:	; new closure is in rax
  3656 00001693 48890425[67130000]      	mov qword [free_var_86], rax
  3657 0000169B 48B8-                   	mov rax, sob_void
  3657 0000169D [0000000000000000] 
  3658                                  
  3659 000016A5 4889C7                  	mov rdi, rax
  3660 000016A8 E8EE420100              	call print_sexpr_if_not_void
  3661                                  
  3662 000016AD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3663 000016B2 E8D2410100              	call malloc
  3664 000016B7 50                      	push rax
  3665 000016B8 BF00000000              	mov rdi, 8 * 0	; new rib
  3666 000016BD E8C7410100              	call malloc
  3667 000016C2 50                      	push rax
  3668 000016C3 BF08000000              	mov rdi, 8 * 1	; extended env
  3669 000016C8 E8BC410100              	call malloc
  3670 000016CD 488B7D10                	mov rdi, ENV
  3671 000016D1 BE00000000              	mov rsi, 0
  3672 000016D6 BA01000000              	mov rdx, 1
  3673                                  .L_lambda_simple_env_loop_000e:	; ext_env[i + 1] <-- env[i]
  3674 000016DB 4883FE00                	cmp rsi, 0
  3675 000016DF 7410                    	je .L_lambda_simple_env_end_000e
  3676 000016E1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3677 000016E5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3678 000016E9 48FFC6                  	inc rsi
  3679 000016EC 48FFC2                  	inc rdx
  3680 000016EF EBEA                    	jmp .L_lambda_simple_env_loop_000e
  3681                                  .L_lambda_simple_env_end_000e:
  3682 000016F1 5B                      	pop rbx
  3683 000016F2 BE00000000              	mov rsi, 0
  3684                                  .L_lambda_simple_params_loop_000e:	; copy params
  3685 000016F7 4883FE00                	cmp rsi, 0
  3686 000016FB 740E                    	je .L_lambda_simple_params_end_000e
  3687 000016FD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3688 00001702 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3689 00001706 48FFC6                  	inc rsi
  3690 00001709 EBEC                    	jmp .L_lambda_simple_params_loop_000e
  3691                                  .L_lambda_simple_params_end_000e:
  3692 0000170B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3693 0000170E 4889C3                  	mov rbx, rax
  3694 00001711 58                      	pop rax
  3695 00001712 C60004                  	mov byte [rax], T_closure
  3696 00001715 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3697 00001719 48C74009[26170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000e
  3698 00001721 E99B000000              	jmp .L_lambda_simple_end_000e
  3699                                  .L_lambda_simple_code_000e:	; lambda-simple body
  3700 00001726 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3701 0000172C 740B                    	je .L_lambda_simple_arity_check_ok_000e
  3702 0000172E FF742410                	push qword [rsp + 8 * 2]
  3703 00001732 6A01                    	push 1
  3704 00001734 E909410100              	jmp L_error_incorrect_arity_simple
  3705                                  .L_lambda_simple_arity_check_ok_000e:
  3706 00001739 C8000000                	enter 0, 0
  3707                                  	; preparing a tail-call
  3708 0000173D 488B4520                	mov rax, PARAM(0)	; param x
  3709 00001741 50                      	push rax
  3710 00001742 6A01                    	push 1	; arg count
  3711 00001744 488B0425[AC120000]      	mov rax, qword [free_var_75]	; free var cadr
  3712 0000174C 803805                  	cmp byte [rax], T_undefined
  3713 0000174F 0F8407400100            	je L_error_fvar_undefined
  3714 00001755 803804                  	cmp byte [rax], T_closure
  3715 00001758 0F8582400100            	jne L_error_non_closure
  3716 0000175E FF7001                  	push SOB_CLOSURE_ENV(rax)
  3717 00001761 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3718 00001764 50                      	push rax
  3719 00001765 6A01                    	push 1	; arg count
  3720 00001767 488B0425[9B120000]      	mov rax, qword [free_var_74]	; free var caar
  3721 0000176F 803805                  	cmp byte [rax], T_undefined
  3722 00001772 0F84E43F0100            	je L_error_fvar_undefined
  3723 00001778 803804                  	cmp byte [rax], T_closure
  3724 0000177B 0F855F400100            	jne L_error_non_closure
  3725 00001781 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3726                                  
  3727                                  	; recycling the current frame
  3728 00001784 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3729 00001787 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3730 0000178A B905000000              	mov rcx, 1 + 4
  3731 0000178F 488B5D18                	mov rbx, COUNT
  3732 00001793 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3733 00001798 488D55F8                	lea rdx, [rbp - 8 * 1]
  3734                                  .L_tc_recycle_frame_loop_000e:
  3735 0000179C 4883F900                	cmp rcx, 0
  3736 000017A0 7413                    	je .L_tc_recycle_frame_done_000e
  3737 000017A2 488B32                  	mov rsi, qword [rdx]
  3738 000017A5 488933                  	mov qword [rbx], rsi
  3739 000017A8 48FFC9                  	dec rcx
  3740 000017AB 4883EB08                	sub rbx, 8 * 1
  3741 000017AF 4883EA08                	sub rdx, 8 * 1
  3742 000017B3 EBE7                    	jmp .L_tc_recycle_frame_loop_000e
  3743                                  .L_tc_recycle_frame_done_000e:
  3744 000017B5 488D6308                	lea rsp, [rbx + 8 * 1]
  3745 000017B9 5D                      	pop rbp	; the proc will restore it!
  3746 000017BA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3747 000017BD C9                      	leave
  3748 000017BE C21800                  	ret AND_KILL_FRAME(1)
  3749                                  .L_lambda_simple_end_000e:	; new closure is in rax
  3750 000017C1 48890425[78130000]      	mov qword [free_var_87], rax
  3751 000017C9 48B8-                   	mov rax, sob_void
  3751 000017CB [0000000000000000] 
  3752                                  
  3753 000017D3 4889C7                  	mov rdi, rax
  3754 000017D6 E8C0410100              	call print_sexpr_if_not_void
  3755                                  
  3756 000017DB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3757 000017E0 E8A4400100              	call malloc
  3758 000017E5 50                      	push rax
  3759 000017E6 BF00000000              	mov rdi, 8 * 0	; new rib
  3760 000017EB E899400100              	call malloc
  3761 000017F0 50                      	push rax
  3762 000017F1 BF08000000              	mov rdi, 8 * 1	; extended env
  3763 000017F6 E88E400100              	call malloc
  3764 000017FB 488B7D10                	mov rdi, ENV
  3765 000017FF BE00000000              	mov rsi, 0
  3766 00001804 BA01000000              	mov rdx, 1
  3767                                  .L_lambda_simple_env_loop_000f:	; ext_env[i + 1] <-- env[i]
  3768 00001809 4883FE00                	cmp rsi, 0
  3769 0000180D 7410                    	je .L_lambda_simple_env_end_000f
  3770 0000180F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3771 00001813 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3772 00001817 48FFC6                  	inc rsi
  3773 0000181A 48FFC2                  	inc rdx
  3774 0000181D EBEA                    	jmp .L_lambda_simple_env_loop_000f
  3775                                  .L_lambda_simple_env_end_000f:
  3776 0000181F 5B                      	pop rbx
  3777 00001820 BE00000000              	mov rsi, 0
  3778                                  .L_lambda_simple_params_loop_000f:	; copy params
  3779 00001825 4883FE00                	cmp rsi, 0
  3780 00001829 740E                    	je .L_lambda_simple_params_end_000f
  3781 0000182B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3782 00001830 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3783 00001834 48FFC6                  	inc rsi
  3784 00001837 EBEC                    	jmp .L_lambda_simple_params_loop_000f
  3785                                  .L_lambda_simple_params_end_000f:
  3786 00001839 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3787 0000183C 4889C3                  	mov rbx, rax
  3788 0000183F 58                      	pop rax
  3789 00001840 C60004                  	mov byte [rax], T_closure
  3790 00001843 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3791 00001847 48C74009[54180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000f
  3792 0000184F E99B000000              	jmp .L_lambda_simple_end_000f
  3793                                  .L_lambda_simple_code_000f:	; lambda-simple body
  3794 00001854 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3795 0000185A 740B                    	je .L_lambda_simple_arity_check_ok_000f
  3796 0000185C FF742410                	push qword [rsp + 8 * 2]
  3797 00001860 6A01                    	push 1
  3798 00001862 E9DB3F0100              	jmp L_error_incorrect_arity_simple
  3799                                  .L_lambda_simple_arity_check_ok_000f:
  3800 00001867 C8000000                	enter 0, 0
  3801                                  	; preparing a tail-call
  3802 0000186B 488B4520                	mov rax, PARAM(0)	; param x
  3803 0000186F 50                      	push rax
  3804 00001870 6A01                    	push 1	; arg count
  3805 00001872 488B0425[BD120000]      	mov rax, qword [free_var_76]	; free var cdar
  3806 0000187A 803805                  	cmp byte [rax], T_undefined
  3807 0000187D 0F84D93E0100            	je L_error_fvar_undefined
  3808 00001883 803804                  	cmp byte [rax], T_closure
  3809 00001886 0F85543F0100            	jne L_error_non_closure
  3810 0000188C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3811 0000188F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3812 00001892 50                      	push rax
  3813 00001893 6A01                    	push 1	; arg count
  3814 00001895 488B0425[9B120000]      	mov rax, qword [free_var_74]	; free var caar
  3815 0000189D 803805                  	cmp byte [rax], T_undefined
  3816 000018A0 0F84B63E0100            	je L_error_fvar_undefined
  3817 000018A6 803804                  	cmp byte [rax], T_closure
  3818 000018A9 0F85313F0100            	jne L_error_non_closure
  3819 000018AF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3820                                  
  3821                                  	; recycling the current frame
  3822 000018B2 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3823 000018B5 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3824 000018B8 B905000000              	mov rcx, 1 + 4
  3825 000018BD 488B5D18                	mov rbx, COUNT
  3826 000018C1 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3827 000018C6 488D55F8                	lea rdx, [rbp - 8 * 1]
  3828                                  .L_tc_recycle_frame_loop_000f:
  3829 000018CA 4883F900                	cmp rcx, 0
  3830 000018CE 7413                    	je .L_tc_recycle_frame_done_000f
  3831 000018D0 488B32                  	mov rsi, qword [rdx]
  3832 000018D3 488933                  	mov qword [rbx], rsi
  3833 000018D6 48FFC9                  	dec rcx
  3834 000018D9 4883EB08                	sub rbx, 8 * 1
  3835 000018DD 4883EA08                	sub rdx, 8 * 1
  3836 000018E1 EBE7                    	jmp .L_tc_recycle_frame_loop_000f
  3837                                  .L_tc_recycle_frame_done_000f:
  3838 000018E3 488D6308                	lea rsp, [rbx + 8 * 1]
  3839 000018E7 5D                      	pop rbp	; the proc will restore it!
  3840 000018E8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3841 000018EB C9                      	leave
  3842 000018EC C21800                  	ret AND_KILL_FRAME(1)
  3843                                  .L_lambda_simple_end_000f:	; new closure is in rax
  3844 000018EF 48890425[89130000]      	mov qword [free_var_88], rax
  3845 000018F7 48B8-                   	mov rax, sob_void
  3845 000018F9 [0000000000000000] 
  3846                                  
  3847 00001901 4889C7                  	mov rdi, rax
  3848 00001904 E892400100              	call print_sexpr_if_not_void
  3849                                  
  3850 00001909 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3851 0000190E E8763F0100              	call malloc
  3852 00001913 50                      	push rax
  3853 00001914 BF00000000              	mov rdi, 8 * 0	; new rib
  3854 00001919 E86B3F0100              	call malloc
  3855 0000191E 50                      	push rax
  3856 0000191F BF08000000              	mov rdi, 8 * 1	; extended env
  3857 00001924 E8603F0100              	call malloc
  3858 00001929 488B7D10                	mov rdi, ENV
  3859 0000192D BE00000000              	mov rsi, 0
  3860 00001932 BA01000000              	mov rdx, 1
  3861                                  .L_lambda_simple_env_loop_0010:	; ext_env[i + 1] <-- env[i]
  3862 00001937 4883FE00                	cmp rsi, 0
  3863 0000193B 7410                    	je .L_lambda_simple_env_end_0010
  3864 0000193D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3865 00001941 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3866 00001945 48FFC6                  	inc rsi
  3867 00001948 48FFC2                  	inc rdx
  3868 0000194B EBEA                    	jmp .L_lambda_simple_env_loop_0010
  3869                                  .L_lambda_simple_env_end_0010:
  3870 0000194D 5B                      	pop rbx
  3871 0000194E BE00000000              	mov rsi, 0
  3872                                  .L_lambda_simple_params_loop_0010:	; copy params
  3873 00001953 4883FE00                	cmp rsi, 0
  3874 00001957 740E                    	je .L_lambda_simple_params_end_0010
  3875 00001959 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3876 0000195E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3877 00001962 48FFC6                  	inc rsi
  3878 00001965 EBEC                    	jmp .L_lambda_simple_params_loop_0010
  3879                                  .L_lambda_simple_params_end_0010:
  3880 00001967 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3881 0000196A 4889C3                  	mov rbx, rax
  3882 0000196D 58                      	pop rax
  3883 0000196E C60004                  	mov byte [rax], T_closure
  3884 00001971 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3885 00001975 48C74009[82190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0010
  3886 0000197D E99B000000              	jmp .L_lambda_simple_end_0010
  3887                                  .L_lambda_simple_code_0010:	; lambda-simple body
  3888 00001982 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3889 00001988 740B                    	je .L_lambda_simple_arity_check_ok_0010
  3890 0000198A FF742410                	push qword [rsp + 8 * 2]
  3891 0000198E 6A01                    	push 1
  3892 00001990 E9AD3E0100              	jmp L_error_incorrect_arity_simple
  3893                                  .L_lambda_simple_arity_check_ok_0010:
  3894 00001995 C8000000                	enter 0, 0
  3895                                  	; preparing a tail-call
  3896 00001999 488B4520                	mov rax, PARAM(0)	; param x
  3897 0000199D 50                      	push rax
  3898 0000199E 6A01                    	push 1	; arg count
  3899 000019A0 488B0425[CE120000]      	mov rax, qword [free_var_77]	; free var cddr
  3900 000019A8 803805                  	cmp byte [rax], T_undefined
  3901 000019AB 0F84AB3D0100            	je L_error_fvar_undefined
  3902 000019B1 803804                  	cmp byte [rax], T_closure
  3903 000019B4 0F85263E0100            	jne L_error_non_closure
  3904 000019BA FF7001                  	push SOB_CLOSURE_ENV(rax)
  3905 000019BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  3906 000019C0 50                      	push rax
  3907 000019C1 6A01                    	push 1	; arg count
  3908 000019C3 488B0425[9B120000]      	mov rax, qword [free_var_74]	; free var caar
  3909 000019CB 803805                  	cmp byte [rax], T_undefined
  3910 000019CE 0F84883D0100            	je L_error_fvar_undefined
  3911 000019D4 803804                  	cmp byte [rax], T_closure
  3912 000019D7 0F85033E0100            	jne L_error_non_closure
  3913 000019DD FF7001                  	push SOB_CLOSURE_ENV(rax)
  3914                                  
  3915                                  	; recycling the current frame
  3916 000019E0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3917 000019E3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3918 000019E6 B905000000              	mov rcx, 1 + 4
  3919 000019EB 488B5D18                	mov rbx, COUNT
  3920 000019EF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3921 000019F4 488D55F8                	lea rdx, [rbp - 8 * 1]
  3922                                  .L_tc_recycle_frame_loop_0010:
  3923 000019F8 4883F900                	cmp rcx, 0
  3924 000019FC 7413                    	je .L_tc_recycle_frame_done_0010
  3925 000019FE 488B32                  	mov rsi, qword [rdx]
  3926 00001A01 488933                  	mov qword [rbx], rsi
  3927 00001A04 48FFC9                  	dec rcx
  3928 00001A07 4883EB08                	sub rbx, 8 * 1
  3929 00001A0B 4883EA08                	sub rdx, 8 * 1
  3930 00001A0F EBE7                    	jmp .L_tc_recycle_frame_loop_0010
  3931                                  .L_tc_recycle_frame_done_0010:
  3932 00001A11 488D6308                	lea rsp, [rbx + 8 * 1]
  3933 00001A15 5D                      	pop rbp	; the proc will restore it!
  3934 00001A16 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3935 00001A19 C9                      	leave
  3936 00001A1A C21800                  	ret AND_KILL_FRAME(1)
  3937                                  .L_lambda_simple_end_0010:	; new closure is in rax
  3938 00001A1D 48890425[9A130000]      	mov qword [free_var_89], rax
  3939 00001A25 48B8-                   	mov rax, sob_void
  3939 00001A27 [0000000000000000] 
  3940                                  
  3941 00001A2F 4889C7                  	mov rdi, rax
  3942 00001A32 E8643F0100              	call print_sexpr_if_not_void
  3943                                  
  3944 00001A37 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3945 00001A3C E8483E0100              	call malloc
  3946 00001A41 50                      	push rax
  3947 00001A42 BF00000000              	mov rdi, 8 * 0	; new rib
  3948 00001A47 E83D3E0100              	call malloc
  3949 00001A4C 50                      	push rax
  3950 00001A4D BF08000000              	mov rdi, 8 * 1	; extended env
  3951 00001A52 E8323E0100              	call malloc
  3952 00001A57 488B7D10                	mov rdi, ENV
  3953 00001A5B BE00000000              	mov rsi, 0
  3954 00001A60 BA01000000              	mov rdx, 1
  3955                                  .L_lambda_simple_env_loop_0011:	; ext_env[i + 1] <-- env[i]
  3956 00001A65 4883FE00                	cmp rsi, 0
  3957 00001A69 7410                    	je .L_lambda_simple_env_end_0011
  3958 00001A6B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3959 00001A6F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3960 00001A73 48FFC6                  	inc rsi
  3961 00001A76 48FFC2                  	inc rdx
  3962 00001A79 EBEA                    	jmp .L_lambda_simple_env_loop_0011
  3963                                  .L_lambda_simple_env_end_0011:
  3964 00001A7B 5B                      	pop rbx
  3965 00001A7C BE00000000              	mov rsi, 0
  3966                                  .L_lambda_simple_params_loop_0011:	; copy params
  3967 00001A81 4883FE00                	cmp rsi, 0
  3968 00001A85 740E                    	je .L_lambda_simple_params_end_0011
  3969 00001A87 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3970 00001A8C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3971 00001A90 48FFC6                  	inc rsi
  3972 00001A93 EBEC                    	jmp .L_lambda_simple_params_loop_0011
  3973                                  .L_lambda_simple_params_end_0011:
  3974 00001A95 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3975 00001A98 4889C3                  	mov rbx, rax
  3976 00001A9B 58                      	pop rax
  3977 00001A9C C60004                  	mov byte [rax], T_closure
  3978 00001A9F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3979 00001AA3 48C74009[B01A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0011
  3980 00001AAB E99B000000              	jmp .L_lambda_simple_end_0011
  3981                                  .L_lambda_simple_code_0011:	; lambda-simple body
  3982 00001AB0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3983 00001AB6 740B                    	je .L_lambda_simple_arity_check_ok_0011
  3984 00001AB8 FF742410                	push qword [rsp + 8 * 2]
  3985 00001ABC 6A01                    	push 1
  3986 00001ABE E97F3D0100              	jmp L_error_incorrect_arity_simple
  3987                                  .L_lambda_simple_arity_check_ok_0011:
  3988 00001AC3 C8000000                	enter 0, 0
  3989                                  	; preparing a tail-call
  3990 00001AC7 488B4520                	mov rax, PARAM(0)	; param x
  3991 00001ACB 50                      	push rax
  3992 00001ACC 6A01                    	push 1	; arg count
  3993 00001ACE 488B0425[9B120000]      	mov rax, qword [free_var_74]	; free var caar
  3994 00001AD6 803805                  	cmp byte [rax], T_undefined
  3995 00001AD9 0F847D3C0100            	je L_error_fvar_undefined
  3996 00001ADF 803804                  	cmp byte [rax], T_closure
  3997 00001AE2 0F85F83C0100            	jne L_error_non_closure
  3998 00001AE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3999 00001AEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  4000 00001AEE 50                      	push rax
  4001 00001AEF 6A01                    	push 1	; arg count
  4002 00001AF1 488B0425[AC120000]      	mov rax, qword [free_var_75]	; free var cadr
  4003 00001AF9 803805                  	cmp byte [rax], T_undefined
  4004 00001AFC 0F845A3C0100            	je L_error_fvar_undefined
  4005 00001B02 803804                  	cmp byte [rax], T_closure
  4006 00001B05 0F85D53C0100            	jne L_error_non_closure
  4007 00001B0B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4008                                  
  4009                                  	; recycling the current frame
  4010 00001B0E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4011 00001B11 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4012 00001B14 B905000000              	mov rcx, 1 + 4
  4013 00001B19 488B5D18                	mov rbx, COUNT
  4014 00001B1D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4015 00001B22 488D55F8                	lea rdx, [rbp - 8 * 1]
  4016                                  .L_tc_recycle_frame_loop_0011:
  4017 00001B26 4883F900                	cmp rcx, 0
  4018 00001B2A 7413                    	je .L_tc_recycle_frame_done_0011
  4019 00001B2C 488B32                  	mov rsi, qword [rdx]
  4020 00001B2F 488933                  	mov qword [rbx], rsi
  4021 00001B32 48FFC9                  	dec rcx
  4022 00001B35 4883EB08                	sub rbx, 8 * 1
  4023 00001B39 4883EA08                	sub rdx, 8 * 1
  4024 00001B3D EBE7                    	jmp .L_tc_recycle_frame_loop_0011
  4025                                  .L_tc_recycle_frame_done_0011:
  4026 00001B3F 488D6308                	lea rsp, [rbx + 8 * 1]
  4027 00001B43 5D                      	pop rbp	; the proc will restore it!
  4028 00001B44 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4029 00001B47 C9                      	leave
  4030 00001B48 C21800                  	ret AND_KILL_FRAME(1)
  4031                                  .L_lambda_simple_end_0011:	; new closure is in rax
  4032 00001B4B 48890425[AB130000]      	mov qword [free_var_90], rax
  4033 00001B53 48B8-                   	mov rax, sob_void
  4033 00001B55 [0000000000000000] 
  4034                                  
  4035 00001B5D 4889C7                  	mov rdi, rax
  4036 00001B60 E8363E0100              	call print_sexpr_if_not_void
  4037                                  
  4038 00001B65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4039 00001B6A E81A3D0100              	call malloc
  4040 00001B6F 50                      	push rax
  4041 00001B70 BF00000000              	mov rdi, 8 * 0	; new rib
  4042 00001B75 E80F3D0100              	call malloc
  4043 00001B7A 50                      	push rax
  4044 00001B7B BF08000000              	mov rdi, 8 * 1	; extended env
  4045 00001B80 E8043D0100              	call malloc
  4046 00001B85 488B7D10                	mov rdi, ENV
  4047 00001B89 BE00000000              	mov rsi, 0
  4048 00001B8E BA01000000              	mov rdx, 1
  4049                                  .L_lambda_simple_env_loop_0012:	; ext_env[i + 1] <-- env[i]
  4050 00001B93 4883FE00                	cmp rsi, 0
  4051 00001B97 7410                    	je .L_lambda_simple_env_end_0012
  4052 00001B99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4053 00001B9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4054 00001BA1 48FFC6                  	inc rsi
  4055 00001BA4 48FFC2                  	inc rdx
  4056 00001BA7 EBEA                    	jmp .L_lambda_simple_env_loop_0012
  4057                                  .L_lambda_simple_env_end_0012:
  4058 00001BA9 5B                      	pop rbx
  4059 00001BAA BE00000000              	mov rsi, 0
  4060                                  .L_lambda_simple_params_loop_0012:	; copy params
  4061 00001BAF 4883FE00                	cmp rsi, 0
  4062 00001BB3 740E                    	je .L_lambda_simple_params_end_0012
  4063 00001BB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4064 00001BBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4065 00001BBE 48FFC6                  	inc rsi
  4066 00001BC1 EBEC                    	jmp .L_lambda_simple_params_loop_0012
  4067                                  .L_lambda_simple_params_end_0012:
  4068 00001BC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4069 00001BC6 4889C3                  	mov rbx, rax
  4070 00001BC9 58                      	pop rax
  4071 00001BCA C60004                  	mov byte [rax], T_closure
  4072 00001BCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4073 00001BD1 48C74009[DE1B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0012
  4074 00001BD9 E99B000000              	jmp .L_lambda_simple_end_0012
  4075                                  .L_lambda_simple_code_0012:	; lambda-simple body
  4076 00001BDE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4077 00001BE4 740B                    	je .L_lambda_simple_arity_check_ok_0012
  4078 00001BE6 FF742410                	push qword [rsp + 8 * 2]
  4079 00001BEA 6A01                    	push 1
  4080 00001BEC E9513C0100              	jmp L_error_incorrect_arity_simple
  4081                                  .L_lambda_simple_arity_check_ok_0012:
  4082 00001BF1 C8000000                	enter 0, 0
  4083                                  	; preparing a tail-call
  4084 00001BF5 488B4520                	mov rax, PARAM(0)	; param x
  4085 00001BF9 50                      	push rax
  4086 00001BFA 6A01                    	push 1	; arg count
  4087 00001BFC 488B0425[AC120000]      	mov rax, qword [free_var_75]	; free var cadr
  4088 00001C04 803805                  	cmp byte [rax], T_undefined
  4089 00001C07 0F844F3B0100            	je L_error_fvar_undefined
  4090 00001C0D 803804                  	cmp byte [rax], T_closure
  4091 00001C10 0F85CA3B0100            	jne L_error_non_closure
  4092 00001C16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4093 00001C19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4094 00001C1C 50                      	push rax
  4095 00001C1D 6A01                    	push 1	; arg count
  4096 00001C1F 488B0425[AC120000]      	mov rax, qword [free_var_75]	; free var cadr
  4097 00001C27 803805                  	cmp byte [rax], T_undefined
  4098 00001C2A 0F842C3B0100            	je L_error_fvar_undefined
  4099 00001C30 803804                  	cmp byte [rax], T_closure
  4100 00001C33 0F85A73B0100            	jne L_error_non_closure
  4101 00001C39 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4102                                  
  4103                                  	; recycling the current frame
  4104 00001C3C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4105 00001C3F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4106 00001C42 B905000000              	mov rcx, 1 + 4
  4107 00001C47 488B5D18                	mov rbx, COUNT
  4108 00001C4B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4109 00001C50 488D55F8                	lea rdx, [rbp - 8 * 1]
  4110                                  .L_tc_recycle_frame_loop_0012:
  4111 00001C54 4883F900                	cmp rcx, 0
  4112 00001C58 7413                    	je .L_tc_recycle_frame_done_0012
  4113 00001C5A 488B32                  	mov rsi, qword [rdx]
  4114 00001C5D 488933                  	mov qword [rbx], rsi
  4115 00001C60 48FFC9                  	dec rcx
  4116 00001C63 4883EB08                	sub rbx, 8 * 1
  4117 00001C67 4883EA08                	sub rdx, 8 * 1
  4118 00001C6B EBE7                    	jmp .L_tc_recycle_frame_loop_0012
  4119                                  .L_tc_recycle_frame_done_0012:
  4120 00001C6D 488D6308                	lea rsp, [rbx + 8 * 1]
  4121 00001C71 5D                      	pop rbp	; the proc will restore it!
  4122 00001C72 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4123 00001C75 C9                      	leave
  4124 00001C76 C21800                  	ret AND_KILL_FRAME(1)
  4125                                  .L_lambda_simple_end_0012:	; new closure is in rax
  4126 00001C79 48890425[BC130000]      	mov qword [free_var_91], rax
  4127 00001C81 48B8-                   	mov rax, sob_void
  4127 00001C83 [0000000000000000] 
  4128                                  
  4129 00001C8B 4889C7                  	mov rdi, rax
  4130 00001C8E E8083D0100              	call print_sexpr_if_not_void
  4131                                  
  4132 00001C93 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4133 00001C98 E8EC3B0100              	call malloc
  4134 00001C9D 50                      	push rax
  4135 00001C9E BF00000000              	mov rdi, 8 * 0	; new rib
  4136 00001CA3 E8E13B0100              	call malloc
  4137 00001CA8 50                      	push rax
  4138 00001CA9 BF08000000              	mov rdi, 8 * 1	; extended env
  4139 00001CAE E8D63B0100              	call malloc
  4140 00001CB3 488B7D10                	mov rdi, ENV
  4141 00001CB7 BE00000000              	mov rsi, 0
  4142 00001CBC BA01000000              	mov rdx, 1
  4143                                  .L_lambda_simple_env_loop_0013:	; ext_env[i + 1] <-- env[i]
  4144 00001CC1 4883FE00                	cmp rsi, 0
  4145 00001CC5 7410                    	je .L_lambda_simple_env_end_0013
  4146 00001CC7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4147 00001CCB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4148 00001CCF 48FFC6                  	inc rsi
  4149 00001CD2 48FFC2                  	inc rdx
  4150 00001CD5 EBEA                    	jmp .L_lambda_simple_env_loop_0013
  4151                                  .L_lambda_simple_env_end_0013:
  4152 00001CD7 5B                      	pop rbx
  4153 00001CD8 BE00000000              	mov rsi, 0
  4154                                  .L_lambda_simple_params_loop_0013:	; copy params
  4155 00001CDD 4883FE00                	cmp rsi, 0
  4156 00001CE1 740E                    	je .L_lambda_simple_params_end_0013
  4157 00001CE3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4158 00001CE8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4159 00001CEC 48FFC6                  	inc rsi
  4160 00001CEF EBEC                    	jmp .L_lambda_simple_params_loop_0013
  4161                                  .L_lambda_simple_params_end_0013:
  4162 00001CF1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4163 00001CF4 4889C3                  	mov rbx, rax
  4164 00001CF7 58                      	pop rax
  4165 00001CF8 C60004                  	mov byte [rax], T_closure
  4166 00001CFB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4167 00001CFF 48C74009[0C1D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0013
  4168 00001D07 E99B000000              	jmp .L_lambda_simple_end_0013
  4169                                  .L_lambda_simple_code_0013:	; lambda-simple body
  4170 00001D0C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4171 00001D12 740B                    	je .L_lambda_simple_arity_check_ok_0013
  4172 00001D14 FF742410                	push qword [rsp + 8 * 2]
  4173 00001D18 6A01                    	push 1
  4174 00001D1A E9233B0100              	jmp L_error_incorrect_arity_simple
  4175                                  .L_lambda_simple_arity_check_ok_0013:
  4176 00001D1F C8000000                	enter 0, 0
  4177                                  	; preparing a tail-call
  4178 00001D23 488B4520                	mov rax, PARAM(0)	; param x
  4179 00001D27 50                      	push rax
  4180 00001D28 6A01                    	push 1	; arg count
  4181 00001D2A 488B0425[BD120000]      	mov rax, qword [free_var_76]	; free var cdar
  4182 00001D32 803805                  	cmp byte [rax], T_undefined
  4183 00001D35 0F84213A0100            	je L_error_fvar_undefined
  4184 00001D3B 803804                  	cmp byte [rax], T_closure
  4185 00001D3E 0F859C3A0100            	jne L_error_non_closure
  4186 00001D44 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4187 00001D47 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4188 00001D4A 50                      	push rax
  4189 00001D4B 6A01                    	push 1	; arg count
  4190 00001D4D 488B0425[AC120000]      	mov rax, qword [free_var_75]	; free var cadr
  4191 00001D55 803805                  	cmp byte [rax], T_undefined
  4192 00001D58 0F84FE390100            	je L_error_fvar_undefined
  4193 00001D5E 803804                  	cmp byte [rax], T_closure
  4194 00001D61 0F85793A0100            	jne L_error_non_closure
  4195 00001D67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4196                                  
  4197                                  	; recycling the current frame
  4198 00001D6A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4199 00001D6D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4200 00001D70 B905000000              	mov rcx, 1 + 4
  4201 00001D75 488B5D18                	mov rbx, COUNT
  4202 00001D79 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4203 00001D7E 488D55F8                	lea rdx, [rbp - 8 * 1]
  4204                                  .L_tc_recycle_frame_loop_0013:
  4205 00001D82 4883F900                	cmp rcx, 0
  4206 00001D86 7413                    	je .L_tc_recycle_frame_done_0013
  4207 00001D88 488B32                  	mov rsi, qword [rdx]
  4208 00001D8B 488933                  	mov qword [rbx], rsi
  4209 00001D8E 48FFC9                  	dec rcx
  4210 00001D91 4883EB08                	sub rbx, 8 * 1
  4211 00001D95 4883EA08                	sub rdx, 8 * 1
  4212 00001D99 EBE7                    	jmp .L_tc_recycle_frame_loop_0013
  4213                                  .L_tc_recycle_frame_done_0013:
  4214 00001D9B 488D6308                	lea rsp, [rbx + 8 * 1]
  4215 00001D9F 5D                      	pop rbp	; the proc will restore it!
  4216 00001DA0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4217 00001DA3 C9                      	leave
  4218 00001DA4 C21800                  	ret AND_KILL_FRAME(1)
  4219                                  .L_lambda_simple_end_0013:	; new closure is in rax
  4220 00001DA7 48890425[CD130000]      	mov qword [free_var_92], rax
  4221 00001DAF 48B8-                   	mov rax, sob_void
  4221 00001DB1 [0000000000000000] 
  4222                                  
  4223 00001DB9 4889C7                  	mov rdi, rax
  4224 00001DBC E8DA3B0100              	call print_sexpr_if_not_void
  4225                                  
  4226 00001DC1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4227 00001DC6 E8BE3A0100              	call malloc
  4228 00001DCB 50                      	push rax
  4229 00001DCC BF00000000              	mov rdi, 8 * 0	; new rib
  4230 00001DD1 E8B33A0100              	call malloc
  4231 00001DD6 50                      	push rax
  4232 00001DD7 BF08000000              	mov rdi, 8 * 1	; extended env
  4233 00001DDC E8A83A0100              	call malloc
  4234 00001DE1 488B7D10                	mov rdi, ENV
  4235 00001DE5 BE00000000              	mov rsi, 0
  4236 00001DEA BA01000000              	mov rdx, 1
  4237                                  .L_lambda_simple_env_loop_0014:	; ext_env[i + 1] <-- env[i]
  4238 00001DEF 4883FE00                	cmp rsi, 0
  4239 00001DF3 7410                    	je .L_lambda_simple_env_end_0014
  4240 00001DF5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4241 00001DF9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4242 00001DFD 48FFC6                  	inc rsi
  4243 00001E00 48FFC2                  	inc rdx
  4244 00001E03 EBEA                    	jmp .L_lambda_simple_env_loop_0014
  4245                                  .L_lambda_simple_env_end_0014:
  4246 00001E05 5B                      	pop rbx
  4247 00001E06 BE00000000              	mov rsi, 0
  4248                                  .L_lambda_simple_params_loop_0014:	; copy params
  4249 00001E0B 4883FE00                	cmp rsi, 0
  4250 00001E0F 740E                    	je .L_lambda_simple_params_end_0014
  4251 00001E11 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4252 00001E16 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4253 00001E1A 48FFC6                  	inc rsi
  4254 00001E1D EBEC                    	jmp .L_lambda_simple_params_loop_0014
  4255                                  .L_lambda_simple_params_end_0014:
  4256 00001E1F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4257 00001E22 4889C3                  	mov rbx, rax
  4258 00001E25 58                      	pop rax
  4259 00001E26 C60004                  	mov byte [rax], T_closure
  4260 00001E29 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4261 00001E2D 48C74009[3A1E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0014
  4262 00001E35 E99B000000              	jmp .L_lambda_simple_end_0014
  4263                                  .L_lambda_simple_code_0014:	; lambda-simple body
  4264 00001E3A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4265 00001E40 740B                    	je .L_lambda_simple_arity_check_ok_0014
  4266 00001E42 FF742410                	push qword [rsp + 8 * 2]
  4267 00001E46 6A01                    	push 1
  4268 00001E48 E9F5390100              	jmp L_error_incorrect_arity_simple
  4269                                  .L_lambda_simple_arity_check_ok_0014:
  4270 00001E4D C8000000                	enter 0, 0
  4271                                  	; preparing a tail-call
  4272 00001E51 488B4520                	mov rax, PARAM(0)	; param x
  4273 00001E55 50                      	push rax
  4274 00001E56 6A01                    	push 1	; arg count
  4275 00001E58 488B0425[CE120000]      	mov rax, qword [free_var_77]	; free var cddr
  4276 00001E60 803805                  	cmp byte [rax], T_undefined
  4277 00001E63 0F84F3380100            	je L_error_fvar_undefined
  4278 00001E69 803804                  	cmp byte [rax], T_closure
  4279 00001E6C 0F856E390100            	jne L_error_non_closure
  4280 00001E72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4281 00001E75 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4282 00001E78 50                      	push rax
  4283 00001E79 6A01                    	push 1	; arg count
  4284 00001E7B 488B0425[AC120000]      	mov rax, qword [free_var_75]	; free var cadr
  4285 00001E83 803805                  	cmp byte [rax], T_undefined
  4286 00001E86 0F84D0380100            	je L_error_fvar_undefined
  4287 00001E8C 803804                  	cmp byte [rax], T_closure
  4288 00001E8F 0F854B390100            	jne L_error_non_closure
  4289 00001E95 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4290                                  
  4291                                  	; recycling the current frame
  4292 00001E98 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4293 00001E9B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4294 00001E9E B905000000              	mov rcx, 1 + 4
  4295 00001EA3 488B5D18                	mov rbx, COUNT
  4296 00001EA7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4297 00001EAC 488D55F8                	lea rdx, [rbp - 8 * 1]
  4298                                  .L_tc_recycle_frame_loop_0014:
  4299 00001EB0 4883F900                	cmp rcx, 0
  4300 00001EB4 7413                    	je .L_tc_recycle_frame_done_0014
  4301 00001EB6 488B32                  	mov rsi, qword [rdx]
  4302 00001EB9 488933                  	mov qword [rbx], rsi
  4303 00001EBC 48FFC9                  	dec rcx
  4304 00001EBF 4883EB08                	sub rbx, 8 * 1
  4305 00001EC3 4883EA08                	sub rdx, 8 * 1
  4306 00001EC7 EBE7                    	jmp .L_tc_recycle_frame_loop_0014
  4307                                  .L_tc_recycle_frame_done_0014:
  4308 00001EC9 488D6308                	lea rsp, [rbx + 8 * 1]
  4309 00001ECD 5D                      	pop rbp	; the proc will restore it!
  4310 00001ECE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4311 00001ED1 C9                      	leave
  4312 00001ED2 C21800                  	ret AND_KILL_FRAME(1)
  4313                                  .L_lambda_simple_end_0014:	; new closure is in rax
  4314 00001ED5 48890425[DE130000]      	mov qword [free_var_93], rax
  4315 00001EDD 48B8-                   	mov rax, sob_void
  4315 00001EDF [0000000000000000] 
  4316                                  
  4317 00001EE7 4889C7                  	mov rdi, rax
  4318 00001EEA E8AC3A0100              	call print_sexpr_if_not_void
  4319                                  
  4320 00001EEF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4321 00001EF4 E890390100              	call malloc
  4322 00001EF9 50                      	push rax
  4323 00001EFA BF00000000              	mov rdi, 8 * 0	; new rib
  4324 00001EFF E885390100              	call malloc
  4325 00001F04 50                      	push rax
  4326 00001F05 BF08000000              	mov rdi, 8 * 1	; extended env
  4327 00001F0A E87A390100              	call malloc
  4328 00001F0F 488B7D10                	mov rdi, ENV
  4329 00001F13 BE00000000              	mov rsi, 0
  4330 00001F18 BA01000000              	mov rdx, 1
  4331                                  .L_lambda_simple_env_loop_0015:	; ext_env[i + 1] <-- env[i]
  4332 00001F1D 4883FE00                	cmp rsi, 0
  4333 00001F21 7410                    	je .L_lambda_simple_env_end_0015
  4334 00001F23 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4335 00001F27 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4336 00001F2B 48FFC6                  	inc rsi
  4337 00001F2E 48FFC2                  	inc rdx
  4338 00001F31 EBEA                    	jmp .L_lambda_simple_env_loop_0015
  4339                                  .L_lambda_simple_env_end_0015:
  4340 00001F33 5B                      	pop rbx
  4341 00001F34 BE00000000              	mov rsi, 0
  4342                                  .L_lambda_simple_params_loop_0015:	; copy params
  4343 00001F39 4883FE00                	cmp rsi, 0
  4344 00001F3D 740E                    	je .L_lambda_simple_params_end_0015
  4345 00001F3F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4346 00001F44 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4347 00001F48 48FFC6                  	inc rsi
  4348 00001F4B EBEC                    	jmp .L_lambda_simple_params_loop_0015
  4349                                  .L_lambda_simple_params_end_0015:
  4350 00001F4D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4351 00001F50 4889C3                  	mov rbx, rax
  4352 00001F53 58                      	pop rax
  4353 00001F54 C60004                  	mov byte [rax], T_closure
  4354 00001F57 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4355 00001F5B 48C74009[681F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0015
  4356 00001F63 E99B000000              	jmp .L_lambda_simple_end_0015
  4357                                  .L_lambda_simple_code_0015:	; lambda-simple body
  4358 00001F68 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4359 00001F6E 740B                    	je .L_lambda_simple_arity_check_ok_0015
  4360 00001F70 FF742410                	push qword [rsp + 8 * 2]
  4361 00001F74 6A01                    	push 1
  4362 00001F76 E9C7380100              	jmp L_error_incorrect_arity_simple
  4363                                  .L_lambda_simple_arity_check_ok_0015:
  4364 00001F7B C8000000                	enter 0, 0
  4365                                  	; preparing a tail-call
  4366 00001F7F 488B4520                	mov rax, PARAM(0)	; param x
  4367 00001F83 50                      	push rax
  4368 00001F84 6A01                    	push 1	; arg count
  4369 00001F86 488B0425[9B120000]      	mov rax, qword [free_var_74]	; free var caar
  4370 00001F8E 803805                  	cmp byte [rax], T_undefined
  4371 00001F91 0F84C5370100            	je L_error_fvar_undefined
  4372 00001F97 803804                  	cmp byte [rax], T_closure
  4373 00001F9A 0F8540380100            	jne L_error_non_closure
  4374 00001FA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4375 00001FA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4376 00001FA6 50                      	push rax
  4377 00001FA7 6A01                    	push 1	; arg count
  4378 00001FA9 488B0425[BD120000]      	mov rax, qword [free_var_76]	; free var cdar
  4379 00001FB1 803805                  	cmp byte [rax], T_undefined
  4380 00001FB4 0F84A2370100            	je L_error_fvar_undefined
  4381 00001FBA 803804                  	cmp byte [rax], T_closure
  4382 00001FBD 0F851D380100            	jne L_error_non_closure
  4383 00001FC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4384                                  
  4385                                  	; recycling the current frame
  4386 00001FC6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4387 00001FC9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4388 00001FCC B905000000              	mov rcx, 1 + 4
  4389 00001FD1 488B5D18                	mov rbx, COUNT
  4390 00001FD5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4391 00001FDA 488D55F8                	lea rdx, [rbp - 8 * 1]
  4392                                  .L_tc_recycle_frame_loop_0015:
  4393 00001FDE 4883F900                	cmp rcx, 0
  4394 00001FE2 7413                    	je .L_tc_recycle_frame_done_0015
  4395 00001FE4 488B32                  	mov rsi, qword [rdx]
  4396 00001FE7 488933                  	mov qword [rbx], rsi
  4397 00001FEA 48FFC9                  	dec rcx
  4398 00001FED 4883EB08                	sub rbx, 8 * 1
  4399 00001FF1 4883EA08                	sub rdx, 8 * 1
  4400 00001FF5 EBE7                    	jmp .L_tc_recycle_frame_loop_0015
  4401                                  .L_tc_recycle_frame_done_0015:
  4402 00001FF7 488D6308                	lea rsp, [rbx + 8 * 1]
  4403 00001FFB 5D                      	pop rbp	; the proc will restore it!
  4404 00001FFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4405 00001FFF C9                      	leave
  4406 00002000 C21800                  	ret AND_KILL_FRAME(1)
  4407                                  .L_lambda_simple_end_0015:	; new closure is in rax
  4408 00002003 48890425[EF130000]      	mov qword [free_var_94], rax
  4409 0000200B 48B8-                   	mov rax, sob_void
  4409 0000200D [0000000000000000] 
  4410                                  
  4411 00002015 4889C7                  	mov rdi, rax
  4412 00002018 E87E390100              	call print_sexpr_if_not_void
  4413                                  
  4414 0000201D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4415 00002022 E862380100              	call malloc
  4416 00002027 50                      	push rax
  4417 00002028 BF00000000              	mov rdi, 8 * 0	; new rib
  4418 0000202D E857380100              	call malloc
  4419 00002032 50                      	push rax
  4420 00002033 BF08000000              	mov rdi, 8 * 1	; extended env
  4421 00002038 E84C380100              	call malloc
  4422 0000203D 488B7D10                	mov rdi, ENV
  4423 00002041 BE00000000              	mov rsi, 0
  4424 00002046 BA01000000              	mov rdx, 1
  4425                                  .L_lambda_simple_env_loop_0016:	; ext_env[i + 1] <-- env[i]
  4426 0000204B 4883FE00                	cmp rsi, 0
  4427 0000204F 7410                    	je .L_lambda_simple_env_end_0016
  4428 00002051 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4429 00002055 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4430 00002059 48FFC6                  	inc rsi
  4431 0000205C 48FFC2                  	inc rdx
  4432 0000205F EBEA                    	jmp .L_lambda_simple_env_loop_0016
  4433                                  .L_lambda_simple_env_end_0016:
  4434 00002061 5B                      	pop rbx
  4435 00002062 BE00000000              	mov rsi, 0
  4436                                  .L_lambda_simple_params_loop_0016:	; copy params
  4437 00002067 4883FE00                	cmp rsi, 0
  4438 0000206B 740E                    	je .L_lambda_simple_params_end_0016
  4439 0000206D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4440 00002072 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4441 00002076 48FFC6                  	inc rsi
  4442 00002079 EBEC                    	jmp .L_lambda_simple_params_loop_0016
  4443                                  .L_lambda_simple_params_end_0016:
  4444 0000207B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4445 0000207E 4889C3                  	mov rbx, rax
  4446 00002081 58                      	pop rax
  4447 00002082 C60004                  	mov byte [rax], T_closure
  4448 00002085 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4449 00002089 48C74009[96200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0016
  4450 00002091 E99B000000              	jmp .L_lambda_simple_end_0016
  4451                                  .L_lambda_simple_code_0016:	; lambda-simple body
  4452 00002096 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4453 0000209C 740B                    	je .L_lambda_simple_arity_check_ok_0016
  4454 0000209E FF742410                	push qword [rsp + 8 * 2]
  4455 000020A2 6A01                    	push 1
  4456 000020A4 E999370100              	jmp L_error_incorrect_arity_simple
  4457                                  .L_lambda_simple_arity_check_ok_0016:
  4458 000020A9 C8000000                	enter 0, 0
  4459                                  	; preparing a tail-call
  4460 000020AD 488B4520                	mov rax, PARAM(0)	; param x
  4461 000020B1 50                      	push rax
  4462 000020B2 6A01                    	push 1	; arg count
  4463 000020B4 488B0425[AC120000]      	mov rax, qword [free_var_75]	; free var cadr
  4464 000020BC 803805                  	cmp byte [rax], T_undefined
  4465 000020BF 0F8497360100            	je L_error_fvar_undefined
  4466 000020C5 803804                  	cmp byte [rax], T_closure
  4467 000020C8 0F8512370100            	jne L_error_non_closure
  4468 000020CE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4469 000020D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4470 000020D4 50                      	push rax
  4471 000020D5 6A01                    	push 1	; arg count
  4472 000020D7 488B0425[BD120000]      	mov rax, qword [free_var_76]	; free var cdar
  4473 000020DF 803805                  	cmp byte [rax], T_undefined
  4474 000020E2 0F8474360100            	je L_error_fvar_undefined
  4475 000020E8 803804                  	cmp byte [rax], T_closure
  4476 000020EB 0F85EF360100            	jne L_error_non_closure
  4477 000020F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4478                                  
  4479                                  	; recycling the current frame
  4480 000020F4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4481 000020F7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4482 000020FA B905000000              	mov rcx, 1 + 4
  4483 000020FF 488B5D18                	mov rbx, COUNT
  4484 00002103 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4485 00002108 488D55F8                	lea rdx, [rbp - 8 * 1]
  4486                                  .L_tc_recycle_frame_loop_0016:
  4487 0000210C 4883F900                	cmp rcx, 0
  4488 00002110 7413                    	je .L_tc_recycle_frame_done_0016
  4489 00002112 488B32                  	mov rsi, qword [rdx]
  4490 00002115 488933                  	mov qword [rbx], rsi
  4491 00002118 48FFC9                  	dec rcx
  4492 0000211B 4883EB08                	sub rbx, 8 * 1
  4493 0000211F 4883EA08                	sub rdx, 8 * 1
  4494 00002123 EBE7                    	jmp .L_tc_recycle_frame_loop_0016
  4495                                  .L_tc_recycle_frame_done_0016:
  4496 00002125 488D6308                	lea rsp, [rbx + 8 * 1]
  4497 00002129 5D                      	pop rbp	; the proc will restore it!
  4498 0000212A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4499 0000212D C9                      	leave
  4500 0000212E C21800                  	ret AND_KILL_FRAME(1)
  4501                                  .L_lambda_simple_end_0016:	; new closure is in rax
  4502 00002131 48890425[00140000]      	mov qword [free_var_95], rax
  4503 00002139 48B8-                   	mov rax, sob_void
  4503 0000213B [0000000000000000] 
  4504                                  
  4505 00002143 4889C7                  	mov rdi, rax
  4506 00002146 E850380100              	call print_sexpr_if_not_void
  4507                                  
  4508 0000214B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4509 00002150 E834370100              	call malloc
  4510 00002155 50                      	push rax
  4511 00002156 BF00000000              	mov rdi, 8 * 0	; new rib
  4512 0000215B E829370100              	call malloc
  4513 00002160 50                      	push rax
  4514 00002161 BF08000000              	mov rdi, 8 * 1	; extended env
  4515 00002166 E81E370100              	call malloc
  4516 0000216B 488B7D10                	mov rdi, ENV
  4517 0000216F BE00000000              	mov rsi, 0
  4518 00002174 BA01000000              	mov rdx, 1
  4519                                  .L_lambda_simple_env_loop_0017:	; ext_env[i + 1] <-- env[i]
  4520 00002179 4883FE00                	cmp rsi, 0
  4521 0000217D 7410                    	je .L_lambda_simple_env_end_0017
  4522 0000217F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4523 00002183 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4524 00002187 48FFC6                  	inc rsi
  4525 0000218A 48FFC2                  	inc rdx
  4526 0000218D EBEA                    	jmp .L_lambda_simple_env_loop_0017
  4527                                  .L_lambda_simple_env_end_0017:
  4528 0000218F 5B                      	pop rbx
  4529 00002190 BE00000000              	mov rsi, 0
  4530                                  .L_lambda_simple_params_loop_0017:	; copy params
  4531 00002195 4883FE00                	cmp rsi, 0
  4532 00002199 740E                    	je .L_lambda_simple_params_end_0017
  4533 0000219B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4534 000021A0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4535 000021A4 48FFC6                  	inc rsi
  4536 000021A7 EBEC                    	jmp .L_lambda_simple_params_loop_0017
  4537                                  .L_lambda_simple_params_end_0017:
  4538 000021A9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4539 000021AC 4889C3                  	mov rbx, rax
  4540 000021AF 58                      	pop rax
  4541 000021B0 C60004                  	mov byte [rax], T_closure
  4542 000021B3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4543 000021B7 48C74009[C4210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0017
  4544 000021BF E99B000000              	jmp .L_lambda_simple_end_0017
  4545                                  .L_lambda_simple_code_0017:	; lambda-simple body
  4546 000021C4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4547 000021CA 740B                    	je .L_lambda_simple_arity_check_ok_0017
  4548 000021CC FF742410                	push qword [rsp + 8 * 2]
  4549 000021D0 6A01                    	push 1
  4550 000021D2 E96B360100              	jmp L_error_incorrect_arity_simple
  4551                                  .L_lambda_simple_arity_check_ok_0017:
  4552 000021D7 C8000000                	enter 0, 0
  4553                                  	; preparing a tail-call
  4554 000021DB 488B4520                	mov rax, PARAM(0)	; param x
  4555 000021DF 50                      	push rax
  4556 000021E0 6A01                    	push 1	; arg count
  4557 000021E2 488B0425[BD120000]      	mov rax, qword [free_var_76]	; free var cdar
  4558 000021EA 803805                  	cmp byte [rax], T_undefined
  4559 000021ED 0F8469350100            	je L_error_fvar_undefined
  4560 000021F3 803804                  	cmp byte [rax], T_closure
  4561 000021F6 0F85E4350100            	jne L_error_non_closure
  4562 000021FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  4563 000021FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  4564 00002202 50                      	push rax
  4565 00002203 6A01                    	push 1	; arg count
  4566 00002205 488B0425[BD120000]      	mov rax, qword [free_var_76]	; free var cdar
  4567 0000220D 803805                  	cmp byte [rax], T_undefined
  4568 00002210 0F8446350100            	je L_error_fvar_undefined
  4569 00002216 803804                  	cmp byte [rax], T_closure
  4570 00002219 0F85C1350100            	jne L_error_non_closure
  4571 0000221F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4572                                  
  4573                                  	; recycling the current frame
  4574 00002222 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4575 00002225 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4576 00002228 B905000000              	mov rcx, 1 + 4
  4577 0000222D 488B5D18                	mov rbx, COUNT
  4578 00002231 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4579 00002236 488D55F8                	lea rdx, [rbp - 8 * 1]
  4580                                  .L_tc_recycle_frame_loop_0017:
  4581 0000223A 4883F900                	cmp rcx, 0
  4582 0000223E 7413                    	je .L_tc_recycle_frame_done_0017
  4583 00002240 488B32                  	mov rsi, qword [rdx]
  4584 00002243 488933                  	mov qword [rbx], rsi
  4585 00002246 48FFC9                  	dec rcx
  4586 00002249 4883EB08                	sub rbx, 8 * 1
  4587 0000224D 4883EA08                	sub rdx, 8 * 1
  4588 00002251 EBE7                    	jmp .L_tc_recycle_frame_loop_0017
  4589                                  .L_tc_recycle_frame_done_0017:
  4590 00002253 488D6308                	lea rsp, [rbx + 8 * 1]
  4591 00002257 5D                      	pop rbp	; the proc will restore it!
  4592 00002258 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4593 0000225B C9                      	leave
  4594 0000225C C21800                  	ret AND_KILL_FRAME(1)
  4595                                  .L_lambda_simple_end_0017:	; new closure is in rax
  4596 0000225F 48890425[11140000]      	mov qword [free_var_96], rax
  4597 00002267 48B8-                   	mov rax, sob_void
  4597 00002269 [0000000000000000] 
  4598                                  
  4599 00002271 4889C7                  	mov rdi, rax
  4600 00002274 E822370100              	call print_sexpr_if_not_void
  4601                                  
  4602 00002279 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4603 0000227E E806360100              	call malloc
  4604 00002283 50                      	push rax
  4605 00002284 BF00000000              	mov rdi, 8 * 0	; new rib
  4606 00002289 E8FB350100              	call malloc
  4607 0000228E 50                      	push rax
  4608 0000228F BF08000000              	mov rdi, 8 * 1	; extended env
  4609 00002294 E8F0350100              	call malloc
  4610 00002299 488B7D10                	mov rdi, ENV
  4611 0000229D BE00000000              	mov rsi, 0
  4612 000022A2 BA01000000              	mov rdx, 1
  4613                                  .L_lambda_simple_env_loop_0018:	; ext_env[i + 1] <-- env[i]
  4614 000022A7 4883FE00                	cmp rsi, 0
  4615 000022AB 7410                    	je .L_lambda_simple_env_end_0018
  4616 000022AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4617 000022B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4618 000022B5 48FFC6                  	inc rsi
  4619 000022B8 48FFC2                  	inc rdx
  4620 000022BB EBEA                    	jmp .L_lambda_simple_env_loop_0018
  4621                                  .L_lambda_simple_env_end_0018:
  4622 000022BD 5B                      	pop rbx
  4623 000022BE BE00000000              	mov rsi, 0
  4624                                  .L_lambda_simple_params_loop_0018:	; copy params
  4625 000022C3 4883FE00                	cmp rsi, 0
  4626 000022C7 740E                    	je .L_lambda_simple_params_end_0018
  4627 000022C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4628 000022CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4629 000022D2 48FFC6                  	inc rsi
  4630 000022D5 EBEC                    	jmp .L_lambda_simple_params_loop_0018
  4631                                  .L_lambda_simple_params_end_0018:
  4632 000022D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4633 000022DA 4889C3                  	mov rbx, rax
  4634 000022DD 58                      	pop rax
  4635 000022DE C60004                  	mov byte [rax], T_closure
  4636 000022E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4637 000022E5 48C74009[F2220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0018
  4638 000022ED E99B000000              	jmp .L_lambda_simple_end_0018
  4639                                  .L_lambda_simple_code_0018:	; lambda-simple body
  4640 000022F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4641 000022F8 740B                    	je .L_lambda_simple_arity_check_ok_0018
  4642 000022FA FF742410                	push qword [rsp + 8 * 2]
  4643 000022FE 6A01                    	push 1
  4644 00002300 E93D350100              	jmp L_error_incorrect_arity_simple
  4645                                  .L_lambda_simple_arity_check_ok_0018:
  4646 00002305 C8000000                	enter 0, 0
  4647                                  	; preparing a tail-call
  4648 00002309 488B4520                	mov rax, PARAM(0)	; param x
  4649 0000230D 50                      	push rax
  4650 0000230E 6A01                    	push 1	; arg count
  4651 00002310 488B0425[CE120000]      	mov rax, qword [free_var_77]	; free var cddr
  4652 00002318 803805                  	cmp byte [rax], T_undefined
  4653 0000231B 0F843B340100            	je L_error_fvar_undefined
  4654 00002321 803804                  	cmp byte [rax], T_closure
  4655 00002324 0F85B6340100            	jne L_error_non_closure
  4656 0000232A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4657 0000232D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4658 00002330 50                      	push rax
  4659 00002331 6A01                    	push 1	; arg count
  4660 00002333 488B0425[BD120000]      	mov rax, qword [free_var_76]	; free var cdar
  4661 0000233B 803805                  	cmp byte [rax], T_undefined
  4662 0000233E 0F8418340100            	je L_error_fvar_undefined
  4663 00002344 803804                  	cmp byte [rax], T_closure
  4664 00002347 0F8593340100            	jne L_error_non_closure
  4665 0000234D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4666                                  
  4667                                  	; recycling the current frame
  4668 00002350 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4669 00002353 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4670 00002356 B905000000              	mov rcx, 1 + 4
  4671 0000235B 488B5D18                	mov rbx, COUNT
  4672 0000235F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4673 00002364 488D55F8                	lea rdx, [rbp - 8 * 1]
  4674                                  .L_tc_recycle_frame_loop_0018:
  4675 00002368 4883F900                	cmp rcx, 0
  4676 0000236C 7413                    	je .L_tc_recycle_frame_done_0018
  4677 0000236E 488B32                  	mov rsi, qword [rdx]
  4678 00002371 488933                  	mov qword [rbx], rsi
  4679 00002374 48FFC9                  	dec rcx
  4680 00002377 4883EB08                	sub rbx, 8 * 1
  4681 0000237B 4883EA08                	sub rdx, 8 * 1
  4682 0000237F EBE7                    	jmp .L_tc_recycle_frame_loop_0018
  4683                                  .L_tc_recycle_frame_done_0018:
  4684 00002381 488D6308                	lea rsp, [rbx + 8 * 1]
  4685 00002385 5D                      	pop rbp	; the proc will restore it!
  4686 00002386 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4687 00002389 C9                      	leave
  4688 0000238A C21800                  	ret AND_KILL_FRAME(1)
  4689                                  .L_lambda_simple_end_0018:	; new closure is in rax
  4690 0000238D 48890425[22140000]      	mov qword [free_var_97], rax
  4691 00002395 48B8-                   	mov rax, sob_void
  4691 00002397 [0000000000000000] 
  4692                                  
  4693 0000239F 4889C7                  	mov rdi, rax
  4694 000023A2 E8F4350100              	call print_sexpr_if_not_void
  4695                                  
  4696 000023A7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4697 000023AC E8D8340100              	call malloc
  4698 000023B1 50                      	push rax
  4699 000023B2 BF00000000              	mov rdi, 8 * 0	; new rib
  4700 000023B7 E8CD340100              	call malloc
  4701 000023BC 50                      	push rax
  4702 000023BD BF08000000              	mov rdi, 8 * 1	; extended env
  4703 000023C2 E8C2340100              	call malloc
  4704 000023C7 488B7D10                	mov rdi, ENV
  4705 000023CB BE00000000              	mov rsi, 0
  4706 000023D0 BA01000000              	mov rdx, 1
  4707                                  .L_lambda_simple_env_loop_0019:	; ext_env[i + 1] <-- env[i]
  4708 000023D5 4883FE00                	cmp rsi, 0
  4709 000023D9 7410                    	je .L_lambda_simple_env_end_0019
  4710 000023DB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4711 000023DF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4712 000023E3 48FFC6                  	inc rsi
  4713 000023E6 48FFC2                  	inc rdx
  4714 000023E9 EBEA                    	jmp .L_lambda_simple_env_loop_0019
  4715                                  .L_lambda_simple_env_end_0019:
  4716 000023EB 5B                      	pop rbx
  4717 000023EC BE00000000              	mov rsi, 0
  4718                                  .L_lambda_simple_params_loop_0019:	; copy params
  4719 000023F1 4883FE00                	cmp rsi, 0
  4720 000023F5 740E                    	je .L_lambda_simple_params_end_0019
  4721 000023F7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4722 000023FC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4723 00002400 48FFC6                  	inc rsi
  4724 00002403 EBEC                    	jmp .L_lambda_simple_params_loop_0019
  4725                                  .L_lambda_simple_params_end_0019:
  4726 00002405 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4727 00002408 4889C3                  	mov rbx, rax
  4728 0000240B 58                      	pop rax
  4729 0000240C C60004                  	mov byte [rax], T_closure
  4730 0000240F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4731 00002413 48C74009[20240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0019
  4732 0000241B E99B000000              	jmp .L_lambda_simple_end_0019
  4733                                  .L_lambda_simple_code_0019:	; lambda-simple body
  4734 00002420 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4735 00002426 740B                    	je .L_lambda_simple_arity_check_ok_0019
  4736 00002428 FF742410                	push qword [rsp + 8 * 2]
  4737 0000242C 6A01                    	push 1
  4738 0000242E E90F340100              	jmp L_error_incorrect_arity_simple
  4739                                  .L_lambda_simple_arity_check_ok_0019:
  4740 00002433 C8000000                	enter 0, 0
  4741                                  	; preparing a tail-call
  4742 00002437 488B4520                	mov rax, PARAM(0)	; param x
  4743 0000243B 50                      	push rax
  4744 0000243C 6A01                    	push 1	; arg count
  4745 0000243E 488B0425[9B120000]      	mov rax, qword [free_var_74]	; free var caar
  4746 00002446 803805                  	cmp byte [rax], T_undefined
  4747 00002449 0F840D330100            	je L_error_fvar_undefined
  4748 0000244F 803804                  	cmp byte [rax], T_closure
  4749 00002452 0F8588330100            	jne L_error_non_closure
  4750 00002458 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4751 0000245B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4752 0000245E 50                      	push rax
  4753 0000245F 6A01                    	push 1	; arg count
  4754 00002461 488B0425[CE120000]      	mov rax, qword [free_var_77]	; free var cddr
  4755 00002469 803805                  	cmp byte [rax], T_undefined
  4756 0000246C 0F84EA320100            	je L_error_fvar_undefined
  4757 00002472 803804                  	cmp byte [rax], T_closure
  4758 00002475 0F8565330100            	jne L_error_non_closure
  4759 0000247B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4760                                  
  4761                                  	; recycling the current frame
  4762 0000247E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4763 00002481 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4764 00002484 B905000000              	mov rcx, 1 + 4
  4765 00002489 488B5D18                	mov rbx, COUNT
  4766 0000248D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4767 00002492 488D55F8                	lea rdx, [rbp - 8 * 1]
  4768                                  .L_tc_recycle_frame_loop_0019:
  4769 00002496 4883F900                	cmp rcx, 0
  4770 0000249A 7413                    	je .L_tc_recycle_frame_done_0019
  4771 0000249C 488B32                  	mov rsi, qword [rdx]
  4772 0000249F 488933                  	mov qword [rbx], rsi
  4773 000024A2 48FFC9                  	dec rcx
  4774 000024A5 4883EB08                	sub rbx, 8 * 1
  4775 000024A9 4883EA08                	sub rdx, 8 * 1
  4776 000024AD EBE7                    	jmp .L_tc_recycle_frame_loop_0019
  4777                                  .L_tc_recycle_frame_done_0019:
  4778 000024AF 488D6308                	lea rsp, [rbx + 8 * 1]
  4779 000024B3 5D                      	pop rbp	; the proc will restore it!
  4780 000024B4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4781 000024B7 C9                      	leave
  4782 000024B8 C21800                  	ret AND_KILL_FRAME(1)
  4783                                  .L_lambda_simple_end_0019:	; new closure is in rax
  4784 000024BB 48890425[33140000]      	mov qword [free_var_98], rax
  4785 000024C3 48B8-                   	mov rax, sob_void
  4785 000024C5 [0000000000000000] 
  4786                                  
  4787 000024CD 4889C7                  	mov rdi, rax
  4788 000024D0 E8C6340100              	call print_sexpr_if_not_void
  4789                                  
  4790 000024D5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4791 000024DA E8AA330100              	call malloc
  4792 000024DF 50                      	push rax
  4793 000024E0 BF00000000              	mov rdi, 8 * 0	; new rib
  4794 000024E5 E89F330100              	call malloc
  4795 000024EA 50                      	push rax
  4796 000024EB BF08000000              	mov rdi, 8 * 1	; extended env
  4797 000024F0 E894330100              	call malloc
  4798 000024F5 488B7D10                	mov rdi, ENV
  4799 000024F9 BE00000000              	mov rsi, 0
  4800 000024FE BA01000000              	mov rdx, 1
  4801                                  .L_lambda_simple_env_loop_001a:	; ext_env[i + 1] <-- env[i]
  4802 00002503 4883FE00                	cmp rsi, 0
  4803 00002507 7410                    	je .L_lambda_simple_env_end_001a
  4804 00002509 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4805 0000250D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4806 00002511 48FFC6                  	inc rsi
  4807 00002514 48FFC2                  	inc rdx
  4808 00002517 EBEA                    	jmp .L_lambda_simple_env_loop_001a
  4809                                  .L_lambda_simple_env_end_001a:
  4810 00002519 5B                      	pop rbx
  4811 0000251A BE00000000              	mov rsi, 0
  4812                                  .L_lambda_simple_params_loop_001a:	; copy params
  4813 0000251F 4883FE00                	cmp rsi, 0
  4814 00002523 740E                    	je .L_lambda_simple_params_end_001a
  4815 00002525 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4816 0000252A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4817 0000252E 48FFC6                  	inc rsi
  4818 00002531 EBEC                    	jmp .L_lambda_simple_params_loop_001a
  4819                                  .L_lambda_simple_params_end_001a:
  4820 00002533 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4821 00002536 4889C3                  	mov rbx, rax
  4822 00002539 58                      	pop rax
  4823 0000253A C60004                  	mov byte [rax], T_closure
  4824 0000253D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4825 00002541 48C74009[4E250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001a
  4826 00002549 E99B000000              	jmp .L_lambda_simple_end_001a
  4827                                  .L_lambda_simple_code_001a:	; lambda-simple body
  4828 0000254E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4829 00002554 740B                    	je .L_lambda_simple_arity_check_ok_001a
  4830 00002556 FF742410                	push qword [rsp + 8 * 2]
  4831 0000255A 6A01                    	push 1
  4832 0000255C E9E1320100              	jmp L_error_incorrect_arity_simple
  4833                                  .L_lambda_simple_arity_check_ok_001a:
  4834 00002561 C8000000                	enter 0, 0
  4835                                  	; preparing a tail-call
  4836 00002565 488B4520                	mov rax, PARAM(0)	; param x
  4837 00002569 50                      	push rax
  4838 0000256A 6A01                    	push 1	; arg count
  4839 0000256C 488B0425[AC120000]      	mov rax, qword [free_var_75]	; free var cadr
  4840 00002574 803805                  	cmp byte [rax], T_undefined
  4841 00002577 0F84DF310100            	je L_error_fvar_undefined
  4842 0000257D 803804                  	cmp byte [rax], T_closure
  4843 00002580 0F855A320100            	jne L_error_non_closure
  4844 00002586 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4845 00002589 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4846 0000258C 50                      	push rax
  4847 0000258D 6A01                    	push 1	; arg count
  4848 0000258F 488B0425[CE120000]      	mov rax, qword [free_var_77]	; free var cddr
  4849 00002597 803805                  	cmp byte [rax], T_undefined
  4850 0000259A 0F84BC310100            	je L_error_fvar_undefined
  4851 000025A0 803804                  	cmp byte [rax], T_closure
  4852 000025A3 0F8537320100            	jne L_error_non_closure
  4853 000025A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4854                                  
  4855                                  	; recycling the current frame
  4856 000025AC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4857 000025AF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4858 000025B2 B905000000              	mov rcx, 1 + 4
  4859 000025B7 488B5D18                	mov rbx, COUNT
  4860 000025BB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4861 000025C0 488D55F8                	lea rdx, [rbp - 8 * 1]
  4862                                  .L_tc_recycle_frame_loop_001a:
  4863 000025C4 4883F900                	cmp rcx, 0
  4864 000025C8 7413                    	je .L_tc_recycle_frame_done_001a
  4865 000025CA 488B32                  	mov rsi, qword [rdx]
  4866 000025CD 488933                  	mov qword [rbx], rsi
  4867 000025D0 48FFC9                  	dec rcx
  4868 000025D3 4883EB08                	sub rbx, 8 * 1
  4869 000025D7 4883EA08                	sub rdx, 8 * 1
  4870 000025DB EBE7                    	jmp .L_tc_recycle_frame_loop_001a
  4871                                  .L_tc_recycle_frame_done_001a:
  4872 000025DD 488D6308                	lea rsp, [rbx + 8 * 1]
  4873 000025E1 5D                      	pop rbp	; the proc will restore it!
  4874 000025E2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4875 000025E5 C9                      	leave
  4876 000025E6 C21800                  	ret AND_KILL_FRAME(1)
  4877                                  .L_lambda_simple_end_001a:	; new closure is in rax
  4878 000025E9 48890425[44140000]      	mov qword [free_var_99], rax
  4879 000025F1 48B8-                   	mov rax, sob_void
  4879 000025F3 [0000000000000000] 
  4880                                  
  4881 000025FB 4889C7                  	mov rdi, rax
  4882 000025FE E898330100              	call print_sexpr_if_not_void
  4883                                  
  4884 00002603 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4885 00002608 E87C320100              	call malloc
  4886 0000260D 50                      	push rax
  4887 0000260E BF00000000              	mov rdi, 8 * 0	; new rib
  4888 00002613 E871320100              	call malloc
  4889 00002618 50                      	push rax
  4890 00002619 BF08000000              	mov rdi, 8 * 1	; extended env
  4891 0000261E E866320100              	call malloc
  4892 00002623 488B7D10                	mov rdi, ENV
  4893 00002627 BE00000000              	mov rsi, 0
  4894 0000262C BA01000000              	mov rdx, 1
  4895                                  .L_lambda_simple_env_loop_001b:	; ext_env[i + 1] <-- env[i]
  4896 00002631 4883FE00                	cmp rsi, 0
  4897 00002635 7410                    	je .L_lambda_simple_env_end_001b
  4898 00002637 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4899 0000263B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4900 0000263F 48FFC6                  	inc rsi
  4901 00002642 48FFC2                  	inc rdx
  4902 00002645 EBEA                    	jmp .L_lambda_simple_env_loop_001b
  4903                                  .L_lambda_simple_env_end_001b:
  4904 00002647 5B                      	pop rbx
  4905 00002648 BE00000000              	mov rsi, 0
  4906                                  .L_lambda_simple_params_loop_001b:	; copy params
  4907 0000264D 4883FE00                	cmp rsi, 0
  4908 00002651 740E                    	je .L_lambda_simple_params_end_001b
  4909 00002653 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4910 00002658 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4911 0000265C 48FFC6                  	inc rsi
  4912 0000265F EBEC                    	jmp .L_lambda_simple_params_loop_001b
  4913                                  .L_lambda_simple_params_end_001b:
  4914 00002661 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4915 00002664 4889C3                  	mov rbx, rax
  4916 00002667 58                      	pop rax
  4917 00002668 C60004                  	mov byte [rax], T_closure
  4918 0000266B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4919 0000266F 48C74009[7C260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001b
  4920 00002677 E99B000000              	jmp .L_lambda_simple_end_001b
  4921                                  .L_lambda_simple_code_001b:	; lambda-simple body
  4922 0000267C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4923 00002682 740B                    	je .L_lambda_simple_arity_check_ok_001b
  4924 00002684 FF742410                	push qword [rsp + 8 * 2]
  4925 00002688 6A01                    	push 1
  4926 0000268A E9B3310100              	jmp L_error_incorrect_arity_simple
  4927                                  .L_lambda_simple_arity_check_ok_001b:
  4928 0000268F C8000000                	enter 0, 0
  4929                                  	; preparing a tail-call
  4930 00002693 488B4520                	mov rax, PARAM(0)	; param x
  4931 00002697 50                      	push rax
  4932 00002698 6A01                    	push 1	; arg count
  4933 0000269A 488B0425[BD120000]      	mov rax, qword [free_var_76]	; free var cdar
  4934 000026A2 803805                  	cmp byte [rax], T_undefined
  4935 000026A5 0F84B1300100            	je L_error_fvar_undefined
  4936 000026AB 803804                  	cmp byte [rax], T_closure
  4937 000026AE 0F852C310100            	jne L_error_non_closure
  4938 000026B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4939 000026B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4940 000026BA 50                      	push rax
  4941 000026BB 6A01                    	push 1	; arg count
  4942 000026BD 488B0425[CE120000]      	mov rax, qword [free_var_77]	; free var cddr
  4943 000026C5 803805                  	cmp byte [rax], T_undefined
  4944 000026C8 0F848E300100            	je L_error_fvar_undefined
  4945 000026CE 803804                  	cmp byte [rax], T_closure
  4946 000026D1 0F8509310100            	jne L_error_non_closure
  4947 000026D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4948                                  
  4949                                  	; recycling the current frame
  4950 000026DA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4951 000026DD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4952 000026E0 B905000000              	mov rcx, 1 + 4
  4953 000026E5 488B5D18                	mov rbx, COUNT
  4954 000026E9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4955 000026EE 488D55F8                	lea rdx, [rbp - 8 * 1]
  4956                                  .L_tc_recycle_frame_loop_001b:
  4957 000026F2 4883F900                	cmp rcx, 0
  4958 000026F6 7413                    	je .L_tc_recycle_frame_done_001b
  4959 000026F8 488B32                  	mov rsi, qword [rdx]
  4960 000026FB 488933                  	mov qword [rbx], rsi
  4961 000026FE 48FFC9                  	dec rcx
  4962 00002701 4883EB08                	sub rbx, 8 * 1
  4963 00002705 4883EA08                	sub rdx, 8 * 1
  4964 00002709 EBE7                    	jmp .L_tc_recycle_frame_loop_001b
  4965                                  .L_tc_recycle_frame_done_001b:
  4966 0000270B 488D6308                	lea rsp, [rbx + 8 * 1]
  4967 0000270F 5D                      	pop rbp	; the proc will restore it!
  4968 00002710 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4969 00002713 C9                      	leave
  4970 00002714 C21800                  	ret AND_KILL_FRAME(1)
  4971                                  .L_lambda_simple_end_001b:	; new closure is in rax
  4972 00002717 48890425[55140000]      	mov qword [free_var_100], rax
  4973 0000271F 48B8-                   	mov rax, sob_void
  4973 00002721 [0000000000000000] 
  4974                                  
  4975 00002729 4889C7                  	mov rdi, rax
  4976 0000272C E86A320100              	call print_sexpr_if_not_void
  4977                                  
  4978 00002731 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4979 00002736 E84E310100              	call malloc
  4980 0000273B 50                      	push rax
  4981 0000273C BF00000000              	mov rdi, 8 * 0	; new rib
  4982 00002741 E843310100              	call malloc
  4983 00002746 50                      	push rax
  4984 00002747 BF08000000              	mov rdi, 8 * 1	; extended env
  4985 0000274C E838310100              	call malloc
  4986 00002751 488B7D10                	mov rdi, ENV
  4987 00002755 BE00000000              	mov rsi, 0
  4988 0000275A BA01000000              	mov rdx, 1
  4989                                  .L_lambda_simple_env_loop_001c:	; ext_env[i + 1] <-- env[i]
  4990 0000275F 4883FE00                	cmp rsi, 0
  4991 00002763 7410                    	je .L_lambda_simple_env_end_001c
  4992 00002765 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4993 00002769 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4994 0000276D 48FFC6                  	inc rsi
  4995 00002770 48FFC2                  	inc rdx
  4996 00002773 EBEA                    	jmp .L_lambda_simple_env_loop_001c
  4997                                  .L_lambda_simple_env_end_001c:
  4998 00002775 5B                      	pop rbx
  4999 00002776 BE00000000              	mov rsi, 0
  5000                                  .L_lambda_simple_params_loop_001c:	; copy params
  5001 0000277B 4883FE00                	cmp rsi, 0
  5002 0000277F 740E                    	je .L_lambda_simple_params_end_001c
  5003 00002781 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5004 00002786 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5005 0000278A 48FFC6                  	inc rsi
  5006 0000278D EBEC                    	jmp .L_lambda_simple_params_loop_001c
  5007                                  .L_lambda_simple_params_end_001c:
  5008 0000278F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5009 00002792 4889C3                  	mov rbx, rax
  5010 00002795 58                      	pop rax
  5011 00002796 C60004                  	mov byte [rax], T_closure
  5012 00002799 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5013 0000279D 48C74009[AA270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001c
  5014 000027A5 E99B000000              	jmp .L_lambda_simple_end_001c
  5015                                  .L_lambda_simple_code_001c:	; lambda-simple body
  5016 000027AA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5017 000027B0 740B                    	je .L_lambda_simple_arity_check_ok_001c
  5018 000027B2 FF742410                	push qword [rsp + 8 * 2]
  5019 000027B6 6A01                    	push 1
  5020 000027B8 E985300100              	jmp L_error_incorrect_arity_simple
  5021                                  .L_lambda_simple_arity_check_ok_001c:
  5022 000027BD C8000000                	enter 0, 0
  5023                                  	; preparing a tail-call
  5024 000027C1 488B4520                	mov rax, PARAM(0)	; param x
  5025 000027C5 50                      	push rax
  5026 000027C6 6A01                    	push 1	; arg count
  5027 000027C8 488B0425[CE120000]      	mov rax, qword [free_var_77]	; free var cddr
  5028 000027D0 803805                  	cmp byte [rax], T_undefined
  5029 000027D3 0F84832F0100            	je L_error_fvar_undefined
  5030 000027D9 803804                  	cmp byte [rax], T_closure
  5031 000027DC 0F85FE2F0100            	jne L_error_non_closure
  5032 000027E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5033 000027E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5034 000027E8 50                      	push rax
  5035 000027E9 6A01                    	push 1	; arg count
  5036 000027EB 488B0425[CE120000]      	mov rax, qword [free_var_77]	; free var cddr
  5037 000027F3 803805                  	cmp byte [rax], T_undefined
  5038 000027F6 0F84602F0100            	je L_error_fvar_undefined
  5039 000027FC 803804                  	cmp byte [rax], T_closure
  5040 000027FF 0F85DB2F0100            	jne L_error_non_closure
  5041 00002805 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5042                                  
  5043                                  	; recycling the current frame
  5044 00002808 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5045 0000280B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5046 0000280E B905000000              	mov rcx, 1 + 4
  5047 00002813 488B5D18                	mov rbx, COUNT
  5048 00002817 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5049 0000281C 488D55F8                	lea rdx, [rbp - 8 * 1]
  5050                                  .L_tc_recycle_frame_loop_001c:
  5051 00002820 4883F900                	cmp rcx, 0
  5052 00002824 7413                    	je .L_tc_recycle_frame_done_001c
  5053 00002826 488B32                  	mov rsi, qword [rdx]
  5054 00002829 488933                  	mov qword [rbx], rsi
  5055 0000282C 48FFC9                  	dec rcx
  5056 0000282F 4883EB08                	sub rbx, 8 * 1
  5057 00002833 4883EA08                	sub rdx, 8 * 1
  5058 00002837 EBE7                    	jmp .L_tc_recycle_frame_loop_001c
  5059                                  .L_tc_recycle_frame_done_001c:
  5060 00002839 488D6308                	lea rsp, [rbx + 8 * 1]
  5061 0000283D 5D                      	pop rbp	; the proc will restore it!
  5062 0000283E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5063 00002841 C9                      	leave
  5064 00002842 C21800                  	ret AND_KILL_FRAME(1)
  5065                                  .L_lambda_simple_end_001c:	; new closure is in rax
  5066 00002845 48890425[66140000]      	mov qword [free_var_101], rax
  5067 0000284D 48B8-                   	mov rax, sob_void
  5067 0000284F [0000000000000000] 
  5068                                  
  5069 00002857 4889C7                  	mov rdi, rax
  5070 0000285A E83C310100              	call print_sexpr_if_not_void
  5071                                  
  5072 0000285F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5073 00002864 E820300100              	call malloc
  5074 00002869 50                      	push rax
  5075 0000286A BF00000000              	mov rdi, 8 * 0	; new rib
  5076 0000286F E815300100              	call malloc
  5077 00002874 50                      	push rax
  5078 00002875 BF08000000              	mov rdi, 8 * 1	; extended env
  5079 0000287A E80A300100              	call malloc
  5080 0000287F 488B7D10                	mov rdi, ENV
  5081 00002883 BE00000000              	mov rsi, 0
  5082 00002888 BA01000000              	mov rdx, 1
  5083                                  .L_lambda_simple_env_loop_001d:	; ext_env[i + 1] <-- env[i]
  5084 0000288D 4883FE00                	cmp rsi, 0
  5085 00002891 7410                    	je .L_lambda_simple_env_end_001d
  5086 00002893 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5087 00002897 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5088 0000289B 48FFC6                  	inc rsi
  5089 0000289E 48FFC2                  	inc rdx
  5090 000028A1 EBEA                    	jmp .L_lambda_simple_env_loop_001d
  5091                                  .L_lambda_simple_env_end_001d:
  5092 000028A3 5B                      	pop rbx
  5093 000028A4 BE00000000              	mov rsi, 0
  5094                                  .L_lambda_simple_params_loop_001d:	; copy params
  5095 000028A9 4883FE00                	cmp rsi, 0
  5096 000028AD 740E                    	je .L_lambda_simple_params_end_001d
  5097 000028AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5098 000028B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5099 000028B8 48FFC6                  	inc rsi
  5100 000028BB EBEC                    	jmp .L_lambda_simple_params_loop_001d
  5101                                  .L_lambda_simple_params_end_001d:
  5102 000028BD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5103 000028C0 4889C3                  	mov rbx, rax
  5104 000028C3 58                      	pop rax
  5105 000028C4 C60004                  	mov byte [rax], T_closure
  5106 000028C7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5107 000028CB 48C74009[D8280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001d
  5108 000028D3 E90D010000              	jmp .L_lambda_simple_end_001d
  5109                                  .L_lambda_simple_code_001d:	; lambda-simple body
  5110 000028D8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5111 000028DE 740B                    	je .L_lambda_simple_arity_check_ok_001d
  5112 000028E0 FF742410                	push qword [rsp + 8 * 2]
  5113 000028E4 6A01                    	push 1
  5114 000028E6 E9572F0100              	jmp L_error_incorrect_arity_simple
  5115                                  .L_lambda_simple_arity_check_ok_001d:
  5116 000028EB C8000000                	enter 0, 0
  5117 000028EF 488B4520                	mov rax, PARAM(0)	; param e
  5118 000028F3 50                      	push rax
  5119 000028F4 6A01                    	push 1	; arg count
  5120 000028F6 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
  5121 000028FE 803805                  	cmp byte [rax], T_undefined
  5122 00002901 0F84552E0100            	je L_error_fvar_undefined
  5123 00002907 803804                  	cmp byte [rax], T_closure
  5124 0000290A 0F85D02E0100            	jne L_error_non_closure
  5125 00002910 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5126 00002913 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5127 00002916 483D[02000000]          	cmp rax, sob_boolean_false
  5128 0000291C 0F85BF000000            	jne .L_or_end_0001
  5129 00002922 488B4520                	mov rax, PARAM(0)	; param e
  5130 00002926 50                      	push rax
  5131 00002927 6A01                    	push 1	; arg count
  5132 00002929 488B0425[C20D0000]      	mov rax, qword [free_var_1]	; free var pair?
  5133 00002931 803805                  	cmp byte [rax], T_undefined
  5134 00002934 0F84222E0100            	je L_error_fvar_undefined
  5135 0000293A 803804                  	cmp byte [rax], T_closure
  5136 0000293D 0F859D2E0100            	jne L_error_non_closure
  5137 00002943 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5138 00002946 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5139                                  
  5140 00002949 483D[02000000]          	cmp rax, sob_boolean_false
  5141 0000294F 0F8482000000            	je .L_if_else_0001
  5142                                  	; preparing a tail-call
  5143 00002955 488B4520                	mov rax, PARAM(0)	; param e
  5144 00002959 50                      	push rax
  5145 0000295A 6A01                    	push 1	; arg count
  5146 0000295C 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  5147 00002964 803805                  	cmp byte [rax], T_undefined
  5148 00002967 0F84EF2D0100            	je L_error_fvar_undefined
  5149 0000296D 803804                  	cmp byte [rax], T_closure
  5150 00002970 0F856A2E0100            	jne L_error_non_closure
  5151 00002976 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5152 00002979 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5153 0000297C 50                      	push rax
  5154 0000297D 6A01                    	push 1	; arg count
  5155 0000297F 488B0425[77140000]      	mov rax, qword [free_var_102]	; free var list?
  5156 00002987 803805                  	cmp byte [rax], T_undefined
  5157 0000298A 0F84CC2D0100            	je L_error_fvar_undefined
  5158 00002990 803804                  	cmp byte [rax], T_closure
  5159 00002993 0F85472E0100            	jne L_error_non_closure
  5160 00002999 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5161                                  
  5162                                  	; recycling the current frame
  5163 0000299C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5164 0000299F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5165 000029A2 B905000000              	mov rcx, 1 + 4
  5166 000029A7 488B5D18                	mov rbx, COUNT
  5167 000029AB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5168 000029B0 488D55F8                	lea rdx, [rbp - 8 * 1]
  5169                                  .L_tc_recycle_frame_loop_001d:
  5170 000029B4 4883F900                	cmp rcx, 0
  5171 000029B8 7413                    	je .L_tc_recycle_frame_done_001d
  5172 000029BA 488B32                  	mov rsi, qword [rdx]
  5173 000029BD 488933                  	mov qword [rbx], rsi
  5174 000029C0 48FFC9                  	dec rcx
  5175 000029C3 4883EB08                	sub rbx, 8 * 1
  5176 000029C7 4883EA08                	sub rdx, 8 * 1
  5177 000029CB EBE7                    	jmp .L_tc_recycle_frame_loop_001d
  5178                                  .L_tc_recycle_frame_done_001d:
  5179 000029CD 488D6308                	lea rsp, [rbx + 8 * 1]
  5180 000029D1 5D                      	pop rbp	; the proc will restore it!
  5181 000029D2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5182                                  
  5183 000029D5 EB0A                    	jmp .L_if_end_0001
  5184                                  
  5185                                  	.L_if_else_0001:
  5186 000029D7 48B8-                   	mov rax, L_constants + 2
  5186 000029D9 [0200000000000000] 
  5187                                  
  5188                                  	.L_if_end_0001:
  5189                                  .L_or_end_0001:
  5190 000029E1 C9                      	leave
  5191 000029E2 C21800                  	ret AND_KILL_FRAME(1)
  5192                                  .L_lambda_simple_end_001d:	; new closure is in rax
  5193 000029E5 48890425[77140000]      	mov qword [free_var_102], rax
  5194 000029ED 48B8-                   	mov rax, sob_void
  5194 000029EF [0000000000000000] 
  5195                                  
  5196 000029F7 4889C7                  	mov rdi, rax
  5197 000029FA E89C2F0100              	call print_sexpr_if_not_void
  5198                                  
  5199 000029FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5200 00002A04 E8802E0100              	call malloc
  5201 00002A09 50                      	push rax
  5202 00002A0A BF00000000              	mov rdi, 8 * 0	; new rib
  5203 00002A0F E8752E0100              	call malloc
  5204 00002A14 50                      	push rax
  5205 00002A15 BF08000000              	mov rdi, 8 * 1	; extended env
  5206 00002A1A E86A2E0100              	call malloc
  5207 00002A1F 488B7D10                	mov rdi, ENV
  5208 00002A23 BE00000000              	mov rsi, 0
  5209 00002A28 BA01000000              	mov rdx, 1
  5210                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  5211 00002A2D 4883FE00                	cmp rsi, 0
  5212 00002A31 7410                    	je .L_lambda_opt_env_end_0001
  5213 00002A33 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5214 00002A37 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5215 00002A3B 48FFC6                  	inc rsi
  5216 00002A3E 48FFC2                  	inc rdx
  5217 00002A41 EBEA                    	jmp .L_lambda_opt_env_loop_0001
  5218                                  .L_lambda_opt_env_end_0001:
  5219 00002A43 5B                      	pop rbx
  5220 00002A44 BE00000000              	mov rsi, 0
  5221                                  .L_lambda_opt_params_loop_0001:	; copy params
  5222 00002A49 4883FE00                	cmp rsi, 0
  5223 00002A4D 740E                    	je .L_lambda_opt_params_end_0001
  5224 00002A4F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5225 00002A54 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5226 00002A58 48FFC6                  	inc rsi
  5227 00002A5B EBEC                    	jmp .L_lambda_opt_params_loop_0001
  5228                                  .L_lambda_opt_params_end_0001:
  5229 00002A5D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5230 00002A60 4889C3                  	mov rbx, rax
  5231 00002A63 58                      	pop rax
  5232 00002A64 C60004                  	mov byte [rax], T_closure
  5233 00002A67 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5234 00002A6B 48C74009[782A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
  5235 00002A73 E9DF000000              	jmp .L_lambda_opt_end_0001
  5236                                  .L_lambda_opt_code_0001:	; lambda-simple body
  5237 00002A78 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
  5238 00002A7E 740D                    	je .L_lambda_opt_arity_check_exact_0001 ;	 if equal, go to exact arity
  5239 00002A80 7F42                    	jg .L_lambda_opt_arity_check_more_0001 ;	 if greater than, go to arity more
  5240 00002A82 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  5241 00002A86 6A00                     	push 0
  5242 00002A88 E9C92D0100              	jmp L_error_incorrect_arity_opt
  5243                                  	.L_lambda_opt_arity_check_exact_0001:
  5244 00002A8D 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  5245 00002A92 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  5246 00002A97 4883EC08                	sub rsp, 8
  5247 00002A9B 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  5248                                  	.L_lambda_opt_exact_shifting_loop_0001:
  5249 00002A9F 488B5108                	mov rdx, [rcx + 8]
  5250 00002AA3 488911                  	mov [rcx], rdx
  5251 00002AA6 4883C108                	add rcx, 8
  5252 00002AAA 4839CB                  	cmp rbx, rcx
  5253 00002AAD 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0001
  5254                                  	.L_lambda_opt_exact_shifting_loop_end_0001:
  5255 00002AAF 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  5256 00002AB6 4883C001                	add rax, 1 ; 	arg count += 1
  5257 00002ABA 4889442410              	mov qword [rsp + 8 * 2], rax
  5258 00002ABF E987000000              	jmp .L_lambda_opt_stack_adjusted_0001
  5259                                  	.L_lambda_opt_arity_check_more_0001:
  5260 00002AC4 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  5260 00002AC6 [0100000000000000] 
  5261 00002ACE 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
  5262 00002AD4 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0001
  5263                                  	.L_lambda_opt_stack_shrink_loop_0001:
  5264 00002AD6 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  5265 00002ADB E8A92D0100              	call malloc ;	 allocated memory for the optional scheme list
  5266 00002AE0 C60021                  	mov byte[rax], T_pair ;	 set type pair
  5267 00002AE3 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  5268 00002AE7 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  5269 00002AEA 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  5270 00002AEF 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  5271 00002AF4 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  5272 00002AF8 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  5273                                  	.L_lambda_opt_more_shifting_loop_0001:
  5274 00002AFD 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  5275 00002B00 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  5276 00002B04 4883EB08                	sub rbx, 8 
  5277 00002B08 4839DC                  	cmp rsp, rbx
  5278 00002B0B 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0001
  5279                                  	.L_lambda_opt_more_shifting_loop_end_0001:
  5280 00002B0D 4883C408                	add rsp, 8 ;	 update rsp
  5281 00002B11 488B5C2410              	mov rbx, [rsp + 8 * 2]
  5282 00002B16 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  5283 00002B1A 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  5284 00002B1F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5285 00002B25 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0001
  5286                                  	.L_lambda_opt_stack_shrink_loop_exit_0001:
  5287 00002B27 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  5288 00002B2C 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  5289 00002B31 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  5290 00002B36 E84E2D0100              	call malloc ;	 allocated memory for the optional scheme list
  5291 00002B3B C60021                  	mov byte[rax], T_pair ;	 set type pair
  5292 00002B3E 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  5293 00002B42 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  5294 00002B46 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  5295                                  	.L_lambda_opt_stack_adjusted_0001:
  5296 00002B4B C8000000                	enter 0, 0
  5297 00002B4F 488B4520                	mov rax, PARAM(0)	; param args
  5298 00002B53 C9                      	leave
  5299 00002B54 C21800                  	ret AND_KILL_FRAME(1)
  5300                                  .L_lambda_opt_end_0001:	; new closure is in rax
  5301 00002B57 48890425[88140000]      	mov qword [free_var_103], rax
  5302 00002B5F 48B8-                   	mov rax, sob_void
  5302 00002B61 [0000000000000000] 
  5303                                  
  5304 00002B69 4889C7                  	mov rdi, rax
  5305 00002B6C E82A2E0100              	call print_sexpr_if_not_void
  5306                                  
  5307 00002B71 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5308 00002B76 E80E2D0100              	call malloc
  5309 00002B7B 50                      	push rax
  5310 00002B7C BF00000000              	mov rdi, 8 * 0	; new rib
  5311 00002B81 E8032D0100              	call malloc
  5312 00002B86 50                      	push rax
  5313 00002B87 BF08000000              	mov rdi, 8 * 1	; extended env
  5314 00002B8C E8F82C0100              	call malloc
  5315 00002B91 488B7D10                	mov rdi, ENV
  5316 00002B95 BE00000000              	mov rsi, 0
  5317 00002B9A BA01000000              	mov rdx, 1
  5318                                  .L_lambda_simple_env_loop_001e:	; ext_env[i + 1] <-- env[i]
  5319 00002B9F 4883FE00                	cmp rsi, 0
  5320 00002BA3 7410                    	je .L_lambda_simple_env_end_001e
  5321 00002BA5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5322 00002BA9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5323 00002BAD 48FFC6                  	inc rsi
  5324 00002BB0 48FFC2                  	inc rdx
  5325 00002BB3 EBEA                    	jmp .L_lambda_simple_env_loop_001e
  5326                                  .L_lambda_simple_env_end_001e:
  5327 00002BB5 5B                      	pop rbx
  5328 00002BB6 BE00000000              	mov rsi, 0
  5329                                  .L_lambda_simple_params_loop_001e:	; copy params
  5330 00002BBB 4883FE00                	cmp rsi, 0
  5331 00002BBF 740E                    	je .L_lambda_simple_params_end_001e
  5332 00002BC1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5333 00002BC6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5334 00002BCA 48FFC6                  	inc rsi
  5335 00002BCD EBEC                    	jmp .L_lambda_simple_params_loop_001e
  5336                                  .L_lambda_simple_params_end_001e:
  5337 00002BCF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5338 00002BD2 4889C3                  	mov rbx, rax
  5339 00002BD5 58                      	pop rax
  5340 00002BD6 C60004                  	mov byte [rax], T_closure
  5341 00002BD9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5342 00002BDD 48C74009[E72B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001e
  5343 00002BE5 EB3D                    	jmp .L_lambda_simple_end_001e
  5344                                  .L_lambda_simple_code_001e:	; lambda-simple body
  5345 00002BE7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5346 00002BED 740B                    	je .L_lambda_simple_arity_check_ok_001e
  5347 00002BEF FF742410                	push qword [rsp + 8 * 2]
  5348 00002BF3 6A01                    	push 1
  5349 00002BF5 E9482C0100              	jmp L_error_incorrect_arity_simple
  5350                                  .L_lambda_simple_arity_check_ok_001e:
  5351 00002BFA C8000000                	enter 0, 0
  5352 00002BFE 488B4520                	mov rax, PARAM(0)	; param x
  5353                                  
  5354 00002C02 483D[02000000]          	cmp rax, sob_boolean_false
  5355 00002C08 740C                    	je .L_if_else_0002
  5356 00002C0A 48B8-                   	mov rax, L_constants + 2
  5356 00002C0C [0200000000000000] 
  5357                                  
  5358 00002C14 EB0A                    	jmp .L_if_end_0002
  5359                                  
  5360                                  	.L_if_else_0002:
  5361 00002C16 48B8-                   	mov rax, L_constants + 3
  5361 00002C18 [0300000000000000] 
  5362                                  
  5363                                  	.L_if_end_0002:
  5364 00002C20 C9                      	leave
  5365 00002C21 C21800                  	ret AND_KILL_FRAME(1)
  5366                                  .L_lambda_simple_end_001e:	; new closure is in rax
  5367 00002C24 48890425[99140000]      	mov qword [free_var_104], rax
  5368 00002C2C 48B8-                   	mov rax, sob_void
  5368 00002C2E [0000000000000000] 
  5369                                  
  5370 00002C36 4889C7                  	mov rdi, rax
  5371 00002C39 E85D2D0100              	call print_sexpr_if_not_void
  5372                                  
  5373 00002C3E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5374 00002C43 E8412C0100              	call malloc
  5375 00002C48 50                      	push rax
  5376 00002C49 BF00000000              	mov rdi, 8 * 0	; new rib
  5377 00002C4E E8362C0100              	call malloc
  5378 00002C53 50                      	push rax
  5379 00002C54 BF08000000              	mov rdi, 8 * 1	; extended env
  5380 00002C59 E82B2C0100              	call malloc
  5381 00002C5E 488B7D10                	mov rdi, ENV
  5382 00002C62 BE00000000              	mov rsi, 0
  5383 00002C67 BA01000000              	mov rdx, 1
  5384                                  .L_lambda_simple_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  5385 00002C6C 4883FE00                	cmp rsi, 0
  5386 00002C70 7410                    	je .L_lambda_simple_env_end_001f
  5387 00002C72 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5388 00002C76 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5389 00002C7A 48FFC6                  	inc rsi
  5390 00002C7D 48FFC2                  	inc rdx
  5391 00002C80 EBEA                    	jmp .L_lambda_simple_env_loop_001f
  5392                                  .L_lambda_simple_env_end_001f:
  5393 00002C82 5B                      	pop rbx
  5394 00002C83 BE00000000              	mov rsi, 0
  5395                                  .L_lambda_simple_params_loop_001f:	; copy params
  5396 00002C88 4883FE00                	cmp rsi, 0
  5397 00002C8C 740E                    	je .L_lambda_simple_params_end_001f
  5398 00002C8E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5399 00002C93 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5400 00002C97 48FFC6                  	inc rsi
  5401 00002C9A EBEC                    	jmp .L_lambda_simple_params_loop_001f
  5402                                  .L_lambda_simple_params_end_001f:
  5403 00002C9C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5404 00002C9F 4889C3                  	mov rbx, rax
  5405 00002CA2 58                      	pop rax
  5406 00002CA3 C60004                  	mov byte [rax], T_closure
  5407 00002CA6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5408 00002CAA 48C74009[B72C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001f
  5409 00002CB2 E9A7000000              	jmp .L_lambda_simple_end_001f
  5410                                  .L_lambda_simple_code_001f:	; lambda-simple body
  5411 00002CB7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5412 00002CBD 740B                    	je .L_lambda_simple_arity_check_ok_001f
  5413 00002CBF FF742410                	push qword [rsp + 8 * 2]
  5414 00002CC3 6A01                    	push 1
  5415 00002CC5 E9782B0100              	jmp L_error_incorrect_arity_simple
  5416                                  .L_lambda_simple_arity_check_ok_001f:
  5417 00002CCA C8000000                	enter 0, 0
  5418 00002CCE 488B4520                	mov rax, PARAM(0)	; param q
  5419 00002CD2 50                      	push rax
  5420 00002CD3 6A01                    	push 1	; arg count
  5421 00002CD5 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
  5422 00002CDD 803805                  	cmp byte [rax], T_undefined
  5423 00002CE0 0F84762A0100            	je L_error_fvar_undefined
  5424 00002CE6 803804                  	cmp byte [rax], T_closure
  5425 00002CE9 0F85F12A0100            	jne L_error_non_closure
  5426 00002CEF FF7001                  	push SOB_CLOSURE_ENV(rax)
  5427 00002CF2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5428 00002CF5 483D[02000000]          	cmp rax, sob_boolean_false
  5429 00002CFB 755D                    	jne .L_or_end_0002
  5430                                  	; preparing a tail-call
  5431 00002CFD 488B4520                	mov rax, PARAM(0)	; param q
  5432 00002D01 50                      	push rax
  5433 00002D02 6A01                    	push 1	; arg count
  5434 00002D04 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  5435 00002D0C 803805                  	cmp byte [rax], T_undefined
  5436 00002D0F 0F84472A0100            	je L_error_fvar_undefined
  5437 00002D15 803804                  	cmp byte [rax], T_closure
  5438 00002D18 0F85C22A0100            	jne L_error_non_closure
  5439 00002D1E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5440                                  
  5441                                  	; recycling the current frame
  5442 00002D21 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5443 00002D24 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5444 00002D27 B905000000              	mov rcx, 1 + 4
  5445 00002D2C 488B5D18                	mov rbx, COUNT
  5446 00002D30 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5447 00002D35 488D55F8                	lea rdx, [rbp - 8 * 1]
  5448                                  .L_tc_recycle_frame_loop_001e:
  5449 00002D39 4883F900                	cmp rcx, 0
  5450 00002D3D 7413                    	je .L_tc_recycle_frame_done_001e
  5451 00002D3F 488B32                  	mov rsi, qword [rdx]
  5452 00002D42 488933                  	mov qword [rbx], rsi
  5453 00002D45 48FFC9                  	dec rcx
  5454 00002D48 4883EB08                	sub rbx, 8 * 1
  5455 00002D4C 4883EA08                	sub rdx, 8 * 1
  5456 00002D50 EBE7                    	jmp .L_tc_recycle_frame_loop_001e
  5457                                  .L_tc_recycle_frame_done_001e:
  5458 00002D52 488D6308                	lea rsp, [rbx + 8 * 1]
  5459 00002D56 5D                      	pop rbp	; the proc will restore it!
  5460 00002D57 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5461                                  .L_or_end_0002:
  5462 00002D5A C9                      	leave
  5463 00002D5B C21800                  	ret AND_KILL_FRAME(1)
  5464                                  .L_lambda_simple_end_001f:	; new closure is in rax
  5465 00002D5E 48890425[AA140000]      	mov qword [free_var_105], rax
  5466 00002D66 48B8-                   	mov rax, sob_void
  5466 00002D68 [0000000000000000] 
  5467                                  
  5468 00002D70 4889C7                  	mov rdi, rax
  5469 00002D73 E8232C0100              	call print_sexpr_if_not_void
  5470                                  
  5471 00002D78 48B8-                   	mov rax, L_constants + 1881
  5471 00002D7A [5907000000000000] 
  5472 00002D82 50                      	push rax
  5473 00002D83 6A01                    	push 1	; arg count
  5474 00002D85 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5475 00002D8A E8FA2A0100              	call malloc
  5476 00002D8F 50                      	push rax
  5477 00002D90 BF00000000              	mov rdi, 8 * 0	; new rib
  5478 00002D95 E8EF2A0100              	call malloc
  5479 00002D9A 50                      	push rax
  5480 00002D9B BF08000000              	mov rdi, 8 * 1	; extended env
  5481 00002DA0 E8E42A0100              	call malloc
  5482 00002DA5 488B7D10                	mov rdi, ENV
  5483 00002DA9 BE00000000              	mov rsi, 0
  5484 00002DAE BA01000000              	mov rdx, 1
  5485                                  .L_lambda_simple_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  5486 00002DB3 4883FE00                	cmp rsi, 0
  5487 00002DB7 7410                    	je .L_lambda_simple_env_end_0020
  5488 00002DB9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5489 00002DBD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5490 00002DC1 48FFC6                  	inc rsi
  5491 00002DC4 48FFC2                  	inc rdx
  5492 00002DC7 EBEA                    	jmp .L_lambda_simple_env_loop_0020
  5493                                  .L_lambda_simple_env_end_0020:
  5494 00002DC9 5B                      	pop rbx
  5495 00002DCA BE00000000              	mov rsi, 0
  5496                                  .L_lambda_simple_params_loop_0020:	; copy params
  5497 00002DCF 4883FE00                	cmp rsi, 0
  5498 00002DD3 740E                    	je .L_lambda_simple_params_end_0020
  5499 00002DD5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5500 00002DDA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5501 00002DDE 48FFC6                  	inc rsi
  5502 00002DE1 EBEC                    	jmp .L_lambda_simple_params_loop_0020
  5503                                  .L_lambda_simple_params_end_0020:
  5504 00002DE3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5505 00002DE6 4889C3                  	mov rbx, rax
  5506 00002DE9 58                      	pop rax
  5507 00002DEA C60004                  	mov byte [rax], T_closure
  5508 00002DED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5509 00002DF1 48C74009[FE2D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0020
  5510 00002DF9 E995030000              	jmp .L_lambda_simple_end_0020
  5511                                  .L_lambda_simple_code_0020:	; lambda-simple body
  5512 00002DFE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5513 00002E04 740B                    	je .L_lambda_simple_arity_check_ok_0020
  5514 00002E06 FF742410                	push qword [rsp + 8 * 2]
  5515 00002E0A 6A01                    	push 1
  5516 00002E0C E9312A0100              	jmp L_error_incorrect_arity_simple
  5517                                  .L_lambda_simple_arity_check_ok_0020:
  5518 00002E11 C8000000                	enter 0, 0
  5519                                  
  5520 00002E15 BF08000000              	mov rdi, 8
  5521 00002E1A E86A2A0100              	call malloc
  5522 00002E1F 488B5D20                	mov rbx, PARAM(0)	; param run
  5523 00002E23 488918                  	mov [rax], rbx	; box run
  5524 00002E26 48894520                	mov PARAM(0), rax	;replace param run with box
  5525 00002E2A 48B8-                   	mov rax, sob_void
  5525 00002E2C [0000000000000000] 
  5526                                  
  5527 00002E34 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5528 00002E39 E84B2A0100              	call malloc
  5529 00002E3E 50                      	push rax
  5530 00002E3F BF08000000              	mov rdi, 8 * 1	; new rib
  5531 00002E44 E8402A0100              	call malloc
  5532 00002E49 50                      	push rax
  5533 00002E4A BF10000000              	mov rdi, 8 * 2	; extended env
  5534 00002E4F E8352A0100              	call malloc
  5535 00002E54 488B7D10                	mov rdi, ENV
  5536 00002E58 BE00000000              	mov rsi, 0
  5537 00002E5D BA01000000              	mov rdx, 1
  5538                                  .L_lambda_simple_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  5539 00002E62 4883FE01                	cmp rsi, 1
  5540 00002E66 7410                    	je .L_lambda_simple_env_end_0021
  5541 00002E68 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5542 00002E6C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5543 00002E70 48FFC6                  	inc rsi
  5544 00002E73 48FFC2                  	inc rdx
  5545 00002E76 EBEA                    	jmp .L_lambda_simple_env_loop_0021
  5546                                  .L_lambda_simple_env_end_0021:
  5547 00002E78 5B                      	pop rbx
  5548 00002E79 BE00000000              	mov rsi, 0
  5549                                  .L_lambda_simple_params_loop_0021:	; copy params
  5550 00002E7E 4883FE01                	cmp rsi, 1
  5551 00002E82 740E                    	je .L_lambda_simple_params_end_0021
  5552 00002E84 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5553 00002E89 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5554 00002E8D 48FFC6                  	inc rsi
  5555 00002E90 EBEC                    	jmp .L_lambda_simple_params_loop_0021
  5556                                  .L_lambda_simple_params_end_0021:
  5557 00002E92 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5558 00002E95 4889C3                  	mov rbx, rax
  5559 00002E98 58                      	pop rax
  5560 00002E99 C60004                  	mov byte [rax], T_closure
  5561 00002E9C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5562 00002EA0 48C74009[AD2E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0021
  5563 00002EA8 E91F010000              	jmp .L_lambda_simple_end_0021
  5564                                  .L_lambda_simple_code_0021:	; lambda-simple body
  5565 00002EAD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5566 00002EB3 740B                    	je .L_lambda_simple_arity_check_ok_0021
  5567 00002EB5 FF742410                	push qword [rsp + 8 * 2]
  5568 00002EB9 6A02                    	push 2
  5569 00002EBB E982290100              	jmp L_error_incorrect_arity_simple
  5570                                  .L_lambda_simple_arity_check_ok_0021:
  5571 00002EC0 C8000000                	enter 0, 0
  5572 00002EC4 488B4528                	mov rax, PARAM(1)	; param s
  5573 00002EC8 50                      	push rax
  5574 00002EC9 6A01                    	push 1	; arg count
  5575 00002ECB 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
  5576 00002ED3 803805                  	cmp byte [rax], T_undefined
  5577 00002ED6 0F8480280100            	je L_error_fvar_undefined
  5578 00002EDC 803804                  	cmp byte [rax], T_closure
  5579 00002EDF 0F85FB280100            	jne L_error_non_closure
  5580 00002EE5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5581 00002EE8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5582                                  
  5583 00002EEB 483D[02000000]          	cmp rax, sob_boolean_false
  5584 00002EF1 7409                    	je .L_if_else_0003
  5585 00002EF3 488B4520                	mov rax, PARAM(0)	; param a
  5586                                  
  5587 00002EF7 E9CC000000              	jmp .L_if_end_0003
  5588                                  
  5589                                  	.L_if_else_0003:
  5590                                  	; preparing a tail-call
  5591 00002EFC 488B4528                	mov rax, PARAM(1)	; param s
  5592 00002F00 50                      	push rax
  5593 00002F01 6A01                    	push 1	; arg count
  5594 00002F03 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  5595 00002F0B 803805                  	cmp byte [rax], T_undefined
  5596 00002F0E 0F8448280100            	je L_error_fvar_undefined
  5597 00002F14 803804                  	cmp byte [rax], T_closure
  5598 00002F17 0F85C3280100            	jne L_error_non_closure
  5599 00002F1D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5600 00002F20 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5601 00002F23 50                      	push rax
  5602 00002F24 488B4528                	mov rax, PARAM(1)	; param s
  5603 00002F28 50                      	push rax
  5604 00002F29 6A01                    	push 1	; arg count
  5605 00002F2B 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  5606 00002F33 803805                  	cmp byte [rax], T_undefined
  5607 00002F36 0F8420280100            	je L_error_fvar_undefined
  5608 00002F3C 803804                  	cmp byte [rax], T_closure
  5609 00002F3F 0F859B280100            	jne L_error_non_closure
  5610 00002F45 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5611 00002F48 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5612 00002F4B 50                      	push rax
  5613 00002F4C 6A02                    	push 2	; arg count
  5614 00002F4E 488B4510                	mov rax, ENV
  5615 00002F52 488B00                  	mov rax, qword [rax + 8 * 0]
  5616 00002F55 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5617 00002F58 488B00                  	mov rax, qword [rax]
  5618 00002F5B 803804                  	cmp byte [rax], T_closure
  5619 00002F5E 0F857C280100            	jne L_error_non_closure
  5620 00002F64 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5621 00002F67 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5622 00002F6A 50                      	push rax
  5623 00002F6B 488B4520                	mov rax, PARAM(0)	; param a
  5624 00002F6F 50                      	push rax
  5625 00002F70 6A02                    	push 2	; arg count
  5626 00002F72 488B0425[8E0E0000]      	mov rax, qword [free_var_13]	; free var cons
  5627 00002F7A 803805                  	cmp byte [rax], T_undefined
  5628 00002F7D 0F84D9270100            	je L_error_fvar_undefined
  5629 00002F83 803804                  	cmp byte [rax], T_closure
  5630 00002F86 0F8554280100            	jne L_error_non_closure
  5631 00002F8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5632                                  
  5633                                  	; recycling the current frame
  5634 00002F8F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5635 00002F92 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5636 00002F95 B906000000              	mov rcx, 2 + 4
  5637 00002F9A 488B5D18                	mov rbx, COUNT
  5638 00002F9E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5639 00002FA3 488D55F8                	lea rdx, [rbp - 8 * 1]
  5640                                  .L_tc_recycle_frame_loop_001f:
  5641 00002FA7 4883F900                	cmp rcx, 0
  5642 00002FAB 7413                    	je .L_tc_recycle_frame_done_001f
  5643 00002FAD 488B32                  	mov rsi, qword [rdx]
  5644 00002FB0 488933                  	mov qword [rbx], rsi
  5645 00002FB3 48FFC9                  	dec rcx
  5646 00002FB6 4883EB08                	sub rbx, 8 * 1
  5647 00002FBA 4883EA08                	sub rdx, 8 * 1
  5648 00002FBE EBE7                    	jmp .L_tc_recycle_frame_loop_001f
  5649                                  .L_tc_recycle_frame_done_001f:
  5650 00002FC0 488D6308                	lea rsp, [rbx + 8 * 1]
  5651 00002FC4 5D                      	pop rbp	; the proc will restore it!
  5652 00002FC5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5653                                  
  5654                                  	.L_if_end_0003:
  5655 00002FC8 C9                      	leave
  5656 00002FC9 C22000                  	ret AND_KILL_FRAME(2)
  5657                                  .L_lambda_simple_end_0021:	; new closure is in rax
  5658                                  
  5659 00002FCC 50                      	push rax
  5660 00002FCD 488B4520                	mov rax, PARAM(0)	; param run
  5661                                  
  5662 00002FD1 8F00                    	pop qword[rax]
  5663 00002FD3 48B8-                   	mov rax, sob_void
  5663 00002FD5 [0000000000000000] 
  5664                                  
  5665 00002FDD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5666 00002FE2 E8A2280100              	call malloc
  5667 00002FE7 50                      	push rax
  5668 00002FE8 BF08000000              	mov rdi, 8 * 1	; new rib
  5669 00002FED E897280100              	call malloc
  5670 00002FF2 50                      	push rax
  5671 00002FF3 BF10000000              	mov rdi, 8 * 2	; extended env
  5672 00002FF8 E88C280100              	call malloc
  5673 00002FFD 488B7D10                	mov rdi, ENV
  5674 00003001 BE00000000              	mov rsi, 0
  5675 00003006 BA01000000              	mov rdx, 1
  5676                                  .L_lambda_opt_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  5677 0000300B 4883FE01                	cmp rsi, 1
  5678 0000300F 7410                    	je .L_lambda_opt_env_end_0002
  5679 00003011 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5680 00003015 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5681 00003019 48FFC6                  	inc rsi
  5682 0000301C 48FFC2                  	inc rdx
  5683 0000301F EBEA                    	jmp .L_lambda_opt_env_loop_0002
  5684                                  .L_lambda_opt_env_end_0002:
  5685 00003021 5B                      	pop rbx
  5686 00003022 BE00000000              	mov rsi, 0
  5687                                  .L_lambda_opt_params_loop_0002:	; copy params
  5688 00003027 4883FE01                	cmp rsi, 1
  5689 0000302B 740E                    	je .L_lambda_opt_params_end_0002
  5690 0000302D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5691 00003032 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5692 00003036 48FFC6                  	inc rsi
  5693 00003039 EBEC                    	jmp .L_lambda_opt_params_loop_0002
  5694                                  .L_lambda_opt_params_end_0002:
  5695 0000303B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5696 0000303E 4889C3                  	mov rbx, rax
  5697 00003041 58                      	pop rax
  5698 00003042 C60004                  	mov byte [rax], T_closure
  5699 00003045 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5700 00003049 48C74009[56300000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0002
  5701 00003051 E939010000              	jmp .L_lambda_opt_end_0002
  5702                                  .L_lambda_opt_code_0002:	; lambda-simple body
  5703 00003056 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  5704 0000305C 740D                    	je .L_lambda_opt_arity_check_exact_0002 ;	 if equal, go to exact arity
  5705 0000305E 7F42                    	jg .L_lambda_opt_arity_check_more_0002 ;	 if greater than, go to arity more
  5706 00003060 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  5707 00003064 6A01                     	push 1
  5708 00003066 E9EB270100              	jmp L_error_incorrect_arity_opt
  5709                                  	.L_lambda_opt_arity_check_exact_0002:
  5710 0000306B 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  5711 00003070 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  5712 00003075 4883EC08                	sub rsp, 8
  5713 00003079 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  5714                                  	.L_lambda_opt_exact_shifting_loop_0002:
  5715 0000307D 488B5108                	mov rdx, [rcx + 8]
  5716 00003081 488911                  	mov [rcx], rdx
  5717 00003084 4883C108                	add rcx, 8
  5718 00003088 4839CB                  	cmp rbx, rcx
  5719 0000308B 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0002
  5720                                  	.L_lambda_opt_exact_shifting_loop_end_0002:
  5721 0000308D 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  5722 00003094 4883C001                	add rax, 1 ; 	arg count += 1
  5723 00003098 4889442410              	mov qword [rsp + 8 * 2], rax
  5724 0000309D E987000000              	jmp .L_lambda_opt_stack_adjusted_0002
  5725                                  	.L_lambda_opt_arity_check_more_0002:
  5726 000030A2 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  5726 000030A4 [0100000000000000] 
  5727 000030AC 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  5728 000030B2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0002
  5729                                  	.L_lambda_opt_stack_shrink_loop_0002:
  5730 000030B4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  5731 000030B9 E8CB270100              	call malloc ;	 allocated memory for the optional scheme list
  5732 000030BE C60021                  	mov byte[rax], T_pair ;	 set type pair
  5733 000030C1 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  5734 000030C5 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  5735 000030C8 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  5736 000030CD 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  5737 000030D2 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  5738 000030D6 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  5739                                  	.L_lambda_opt_more_shifting_loop_0002:
  5740 000030DB 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  5741 000030DE 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  5742 000030E2 4883EB08                	sub rbx, 8 
  5743 000030E6 4839DC                  	cmp rsp, rbx
  5744 000030E9 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0002
  5745                                  	.L_lambda_opt_more_shifting_loop_end_0002:
  5746 000030EB 4883C408                	add rsp, 8 ;	 update rsp
  5747 000030EF 488B5C2410              	mov rbx, [rsp + 8 * 2]
  5748 000030F4 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  5749 000030F8 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  5750 000030FD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5751 00003103 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0002
  5752                                  	.L_lambda_opt_stack_shrink_loop_exit_0002:
  5753 00003105 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  5754 0000310A 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  5755 0000310F BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  5756 00003114 E870270100              	call malloc ;	 allocated memory for the optional scheme list
  5757 00003119 C60021                  	mov byte[rax], T_pair ;	 set type pair
  5758 0000311C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  5759 00003120 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  5760 00003124 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  5761                                  	.L_lambda_opt_stack_adjusted_0002:
  5762 00003129 C8000000                	enter 0, 0
  5763                                  	; preparing a tail-call
  5764 0000312D 488B4528                	mov rax, PARAM(1)	; param s
  5765 00003131 50                      	push rax
  5766 00003132 488B4520                	mov rax, PARAM(0)	; param a
  5767 00003136 50                      	push rax
  5768 00003137 6A02                    	push 2	; arg count
  5769 00003139 488B4510                	mov rax, ENV
  5770 0000313D 488B00                  	mov rax, qword [rax + 8 * 0]
  5771 00003140 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5772 00003143 488B00                  	mov rax, qword [rax]
  5773 00003146 803804                  	cmp byte [rax], T_closure
  5774 00003149 0F8591260100            	jne L_error_non_closure
  5775 0000314F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5776                                  
  5777                                  	; recycling the current frame
  5778 00003152 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5779 00003155 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5780 00003158 B906000000              	mov rcx, 2 + 4
  5781 0000315D 488B5D18                	mov rbx, COUNT
  5782 00003161 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5783 00003166 488D55F8                	lea rdx, [rbp - 8 * 1]
  5784                                  .L_tc_recycle_frame_loop_0020:
  5785 0000316A 4883F900                	cmp rcx, 0
  5786 0000316E 7413                    	je .L_tc_recycle_frame_done_0020
  5787 00003170 488B32                  	mov rsi, qword [rdx]
  5788 00003173 488933                  	mov qword [rbx], rsi
  5789 00003176 48FFC9                  	dec rcx
  5790 00003179 4883EB08                	sub rbx, 8 * 1
  5791 0000317D 4883EA08                	sub rdx, 8 * 1
  5792 00003181 EBE7                    	jmp .L_tc_recycle_frame_loop_0020
  5793                                  .L_tc_recycle_frame_done_0020:
  5794 00003183 488D6308                	lea rsp, [rbx + 8 * 1]
  5795 00003187 5D                      	pop rbp	; the proc will restore it!
  5796 00003188 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5797 0000318B C9                      	leave
  5798 0000318C C22000                  	ret AND_KILL_FRAME(2)
  5799                                  .L_lambda_opt_end_0002:	; new closure is in rax
  5800 0000318F C9                      	leave
  5801 00003190 C21800                  	ret AND_KILL_FRAME(1)
  5802                                  .L_lambda_simple_end_0020:	; new closure is in rax
  5803 00003193 803804                  	cmp byte [rax], T_closure
  5804 00003196 0F8544260100            	jne L_error_non_closure
  5805 0000319C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5806 0000319F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5807 000031A2 48890425[BB140000]      	mov qword [free_var_106], rax
  5808 000031AA 48B8-                   	mov rax, sob_void
  5808 000031AC [0000000000000000] 
  5809                                  
  5810 000031B4 4889C7                  	mov rdi, rax
  5811 000031B7 E8DF270100              	call print_sexpr_if_not_void
  5812                                  
  5813 000031BC 48B8-                   	mov rax, L_constants + 1881
  5813 000031BE [5907000000000000] 
  5814 000031C6 50                      	push rax
  5815 000031C7 6A01                    	push 1	; arg count
  5816 000031C9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5817 000031CE E8B6260100              	call malloc
  5818 000031D3 50                      	push rax
  5819 000031D4 BF00000000              	mov rdi, 8 * 0	; new rib
  5820 000031D9 E8AB260100              	call malloc
  5821 000031DE 50                      	push rax
  5822 000031DF BF08000000              	mov rdi, 8 * 1	; extended env
  5823 000031E4 E8A0260100              	call malloc
  5824 000031E9 488B7D10                	mov rdi, ENV
  5825 000031ED BE00000000              	mov rsi, 0
  5826 000031F2 BA01000000              	mov rdx, 1
  5827                                  .L_lambda_simple_env_loop_0022:	; ext_env[i + 1] <-- env[i]
  5828 000031F7 4883FE00                	cmp rsi, 0
  5829 000031FB 7410                    	je .L_lambda_simple_env_end_0022
  5830 000031FD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5831 00003201 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5832 00003205 48FFC6                  	inc rsi
  5833 00003208 48FFC2                  	inc rdx
  5834 0000320B EBEA                    	jmp .L_lambda_simple_env_loop_0022
  5835                                  .L_lambda_simple_env_end_0022:
  5836 0000320D 5B                      	pop rbx
  5837 0000320E BE00000000              	mov rsi, 0
  5838                                  .L_lambda_simple_params_loop_0022:	; copy params
  5839 00003213 4883FE00                	cmp rsi, 0
  5840 00003217 740E                    	je .L_lambda_simple_params_end_0022
  5841 00003219 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5842 0000321E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5843 00003222 48FFC6                  	inc rsi
  5844 00003225 EBEC                    	jmp .L_lambda_simple_params_loop_0022
  5845                                  .L_lambda_simple_params_end_0022:
  5846 00003227 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5847 0000322A 4889C3                  	mov rbx, rax
  5848 0000322D 58                      	pop rax
  5849 0000322E C60004                  	mov byte [rax], T_closure
  5850 00003231 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5851 00003235 48C74009[42320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0022
  5852 0000323D E904040000              	jmp .L_lambda_simple_end_0022
  5853                                  .L_lambda_simple_code_0022:	; lambda-simple body
  5854 00003242 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5855 00003248 740B                    	je .L_lambda_simple_arity_check_ok_0022
  5856 0000324A FF742410                	push qword [rsp + 8 * 2]
  5857 0000324E 6A01                    	push 1
  5858 00003250 E9ED250100              	jmp L_error_incorrect_arity_simple
  5859                                  .L_lambda_simple_arity_check_ok_0022:
  5860 00003255 C8000000                	enter 0, 0
  5861                                  
  5862 00003259 BF08000000              	mov rdi, 8
  5863 0000325E E826260100              	call malloc
  5864 00003263 488B5D20                	mov rbx, PARAM(0)	; param run
  5865 00003267 488918                  	mov [rax], rbx	; box run
  5866 0000326A 48894520                	mov PARAM(0), rax	;replace param run with box
  5867 0000326E 48B8-                   	mov rax, sob_void
  5867 00003270 [0000000000000000] 
  5868                                  
  5869 00003278 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5870 0000327D E807260100              	call malloc
  5871 00003282 50                      	push rax
  5872 00003283 BF08000000              	mov rdi, 8 * 1	; new rib
  5873 00003288 E8FC250100              	call malloc
  5874 0000328D 50                      	push rax
  5875 0000328E BF10000000              	mov rdi, 8 * 2	; extended env
  5876 00003293 E8F1250100              	call malloc
  5877 00003298 488B7D10                	mov rdi, ENV
  5878 0000329C BE00000000              	mov rsi, 0
  5879 000032A1 BA01000000              	mov rdx, 1
  5880                                  .L_lambda_simple_env_loop_0023:	; ext_env[i + 1] <-- env[i]
  5881 000032A6 4883FE01                	cmp rsi, 1
  5882 000032AA 7410                    	je .L_lambda_simple_env_end_0023
  5883 000032AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5884 000032B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5885 000032B4 48FFC6                  	inc rsi
  5886 000032B7 48FFC2                  	inc rdx
  5887 000032BA EBEA                    	jmp .L_lambda_simple_env_loop_0023
  5888                                  .L_lambda_simple_env_end_0023:
  5889 000032BC 5B                      	pop rbx
  5890 000032BD BE00000000              	mov rsi, 0
  5891                                  .L_lambda_simple_params_loop_0023:	; copy params
  5892 000032C2 4883FE01                	cmp rsi, 1
  5893 000032C6 740E                    	je .L_lambda_simple_params_end_0023
  5894 000032C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5895 000032CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5896 000032D1 48FFC6                  	inc rsi
  5897 000032D4 EBEC                    	jmp .L_lambda_simple_params_loop_0023
  5898                                  .L_lambda_simple_params_end_0023:
  5899 000032D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5900 000032D9 4889C3                  	mov rbx, rax
  5901 000032DC 58                      	pop rax
  5902 000032DD C60004                  	mov byte [rax], T_closure
  5903 000032E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5904 000032E4 48C74009[F1320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0023
  5905 000032EC E920010000              	jmp .L_lambda_simple_end_0023
  5906                                  .L_lambda_simple_code_0023:	; lambda-simple body
  5907 000032F1 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5908 000032F7 740B                    	je .L_lambda_simple_arity_check_ok_0023
  5909 000032F9 FF742410                	push qword [rsp + 8 * 2]
  5910 000032FD 6A02                    	push 2
  5911 000032FF E93E250100              	jmp L_error_incorrect_arity_simple
  5912                                  .L_lambda_simple_arity_check_ok_0023:
  5913 00003304 C8000000                	enter 0, 0
  5914 00003308 488B4528                	mov rax, PARAM(1)	; param s
  5915 0000330C 50                      	push rax
  5916 0000330D 6A01                    	push 1	; arg count
  5917 0000330F 488B0425[C20D0000]      	mov rax, qword [free_var_1]	; free var pair?
  5918 00003317 803805                  	cmp byte [rax], T_undefined
  5919 0000331A 0F843C240100            	je L_error_fvar_undefined
  5920 00003320 803804                  	cmp byte [rax], T_closure
  5921 00003323 0F85B7240100            	jne L_error_non_closure
  5922 00003329 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5923 0000332C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5924                                  
  5925 0000332F 483D[02000000]          	cmp rax, sob_boolean_false
  5926 00003335 0F84CE000000            	je .L_if_else_0004
  5927                                  	; preparing a tail-call
  5928 0000333B 488B4528                	mov rax, PARAM(1)	; param s
  5929 0000333F 50                      	push rax
  5930 00003340 6A01                    	push 1	; arg count
  5931 00003342 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  5932 0000334A 803805                  	cmp byte [rax], T_undefined
  5933 0000334D 0F8409240100            	je L_error_fvar_undefined
  5934 00003353 803804                  	cmp byte [rax], T_closure
  5935 00003356 0F8584240100            	jne L_error_non_closure
  5936 0000335C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5937 0000335F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5938 00003362 50                      	push rax
  5939 00003363 488B4528                	mov rax, PARAM(1)	; param s
  5940 00003367 50                      	push rax
  5941 00003368 6A01                    	push 1	; arg count
  5942 0000336A 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  5943 00003372 803805                  	cmp byte [rax], T_undefined
  5944 00003375 0F84E1230100            	je L_error_fvar_undefined
  5945 0000337B 803804                  	cmp byte [rax], T_closure
  5946 0000337E 0F855C240100            	jne L_error_non_closure
  5947 00003384 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5948 00003387 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5949 0000338A 50                      	push rax
  5950 0000338B 6A02                    	push 2	; arg count
  5951 0000338D 488B4510                	mov rax, ENV
  5952 00003391 488B00                  	mov rax, qword [rax + 8 * 0]
  5953 00003394 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5954 00003397 488B00                  	mov rax, qword [rax]
  5955 0000339A 803804                  	cmp byte [rax], T_closure
  5956 0000339D 0F853D240100            	jne L_error_non_closure
  5957 000033A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5958 000033A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5959 000033A9 50                      	push rax
  5960 000033AA 488B4520                	mov rax, PARAM(0)	; param a
  5961 000033AE 50                      	push rax
  5962 000033AF 6A02                    	push 2	; arg count
  5963 000033B1 488B0425[8E0E0000]      	mov rax, qword [free_var_13]	; free var cons
  5964 000033B9 803805                  	cmp byte [rax], T_undefined
  5965 000033BC 0F849A230100            	je L_error_fvar_undefined
  5966 000033C2 803804                  	cmp byte [rax], T_closure
  5967 000033C5 0F8515240100            	jne L_error_non_closure
  5968 000033CB FF7001                  	push SOB_CLOSURE_ENV(rax)
  5969                                  
  5970                                  	; recycling the current frame
  5971 000033CE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5972 000033D1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5973 000033D4 B906000000              	mov rcx, 2 + 4
  5974 000033D9 488B5D18                	mov rbx, COUNT
  5975 000033DD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5976 000033E2 488D55F8                	lea rdx, [rbp - 8 * 1]
  5977                                  .L_tc_recycle_frame_loop_0021:
  5978 000033E6 4883F900                	cmp rcx, 0
  5979 000033EA 7413                    	je .L_tc_recycle_frame_done_0021
  5980 000033EC 488B32                  	mov rsi, qword [rdx]
  5981 000033EF 488933                  	mov qword [rbx], rsi
  5982 000033F2 48FFC9                  	dec rcx
  5983 000033F5 4883EB08                	sub rbx, 8 * 1
  5984 000033F9 4883EA08                	sub rdx, 8 * 1
  5985 000033FD EBE7                    	jmp .L_tc_recycle_frame_loop_0021
  5986                                  .L_tc_recycle_frame_done_0021:
  5987 000033FF 488D6308                	lea rsp, [rbx + 8 * 1]
  5988 00003403 5D                      	pop rbp	; the proc will restore it!
  5989 00003404 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5990                                  
  5991 00003407 EB04                    	jmp .L_if_end_0004
  5992                                  
  5993                                  	.L_if_else_0004:
  5994 00003409 488B4520                	mov rax, PARAM(0)	; param a
  5995                                  
  5996                                  	.L_if_end_0004:
  5997 0000340D C9                      	leave
  5998 0000340E C22000                  	ret AND_KILL_FRAME(2)
  5999                                  .L_lambda_simple_end_0023:	; new closure is in rax
  6000                                  
  6001 00003411 50                      	push rax
  6002 00003412 488B4520                	mov rax, PARAM(0)	; param run
  6003                                  
  6004 00003416 8F00                    	pop qword[rax]
  6005 00003418 48B8-                   	mov rax, sob_void
  6005 0000341A [0000000000000000] 
  6006                                  
  6007 00003422 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6008 00003427 E85D240100              	call malloc
  6009 0000342C 50                      	push rax
  6010 0000342D BF08000000              	mov rdi, 8 * 1	; new rib
  6011 00003432 E852240100              	call malloc
  6012 00003437 50                      	push rax
  6013 00003438 BF10000000              	mov rdi, 8 * 2	; extended env
  6014 0000343D E847240100              	call malloc
  6015 00003442 488B7D10                	mov rdi, ENV
  6016 00003446 BE00000000              	mov rsi, 0
  6017 0000344B BA01000000              	mov rdx, 1
  6018                                  .L_lambda_opt_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  6019 00003450 4883FE01                	cmp rsi, 1
  6020 00003454 7410                    	je .L_lambda_opt_env_end_0003
  6021 00003456 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6022 0000345A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6023 0000345E 48FFC6                  	inc rsi
  6024 00003461 48FFC2                  	inc rdx
  6025 00003464 EBEA                    	jmp .L_lambda_opt_env_loop_0003
  6026                                  .L_lambda_opt_env_end_0003:
  6027 00003466 5B                      	pop rbx
  6028 00003467 BE00000000              	mov rsi, 0
  6029                                  .L_lambda_opt_params_loop_0003:	; copy params
  6030 0000346C 4883FE01                	cmp rsi, 1
  6031 00003470 740E                    	je .L_lambda_opt_params_end_0003
  6032 00003472 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6033 00003477 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6034 0000347B 48FFC6                  	inc rsi
  6035 0000347E EBEC                    	jmp .L_lambda_opt_params_loop_0003
  6036                                  .L_lambda_opt_params_end_0003:
  6037 00003480 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6038 00003483 4889C3                  	mov rbx, rax
  6039 00003486 58                      	pop rax
  6040 00003487 C60004                  	mov byte [rax], T_closure
  6041 0000348A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6042 0000348E 48C74009[9B340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0003
  6043 00003496 E9A7010000              	jmp .L_lambda_opt_end_0003
  6044                                  .L_lambda_opt_code_0003:	; lambda-simple body
  6045 0000349B 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  6046 000034A1 740D                    	je .L_lambda_opt_arity_check_exact_0003 ;	 if equal, go to exact arity
  6047 000034A3 7F42                    	jg .L_lambda_opt_arity_check_more_0003 ;	 if greater than, go to arity more
  6048 000034A5 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  6049 000034A9 6A01                     	push 1
  6050 000034AB E9A6230100              	jmp L_error_incorrect_arity_opt
  6051                                  	.L_lambda_opt_arity_check_exact_0003:
  6052 000034B0 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  6053 000034B5 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  6054 000034BA 4883EC08                	sub rsp, 8
  6055 000034BE 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  6056                                  	.L_lambda_opt_exact_shifting_loop_0003:
  6057 000034C2 488B5108                	mov rdx, [rcx + 8]
  6058 000034C6 488911                  	mov [rcx], rdx
  6059 000034C9 4883C108                	add rcx, 8
  6060 000034CD 4839CB                  	cmp rbx, rcx
  6061 000034D0 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0003
  6062                                  	.L_lambda_opt_exact_shifting_loop_end_0003:
  6063 000034D2 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  6064 000034D9 4883C001                	add rax, 1 ; 	arg count += 1
  6065 000034DD 4889442410              	mov qword [rsp + 8 * 2], rax
  6066 000034E2 E987000000              	jmp .L_lambda_opt_stack_adjusted_0003
  6067                                  	.L_lambda_opt_arity_check_more_0003:
  6068 000034E7 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  6068 000034E9 [0100000000000000] 
  6069 000034F1 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  6070 000034F7 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0003
  6071                                  	.L_lambda_opt_stack_shrink_loop_0003:
  6072 000034F9 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6073 000034FE E886230100              	call malloc ;	 allocated memory for the optional scheme list
  6074 00003503 C60021                  	mov byte[rax], T_pair ;	 set type pair
  6075 00003506 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6076 0000350A 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  6077 0000350D 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  6078 00003512 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  6079 00003517 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  6080 0000351B 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  6081                                  	.L_lambda_opt_more_shifting_loop_0003:
  6082 00003520 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  6083 00003523 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  6084 00003527 4883EB08                	sub rbx, 8 
  6085 0000352B 4839DC                  	cmp rsp, rbx
  6086 0000352E 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0003
  6087                                  	.L_lambda_opt_more_shifting_loop_end_0003:
  6088 00003530 4883C408                	add rsp, 8 ;	 update rsp
  6089 00003534 488B5C2410              	mov rbx, [rsp + 8 * 2]
  6090 00003539 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  6091 0000353D 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  6092 00003542 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6093 00003548 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0003
  6094                                  	.L_lambda_opt_stack_shrink_loop_exit_0003:
  6095 0000354A 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  6096 0000354F 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  6097 00003554 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6098 00003559 E82B230100              	call malloc ;	 allocated memory for the optional scheme list
  6099 0000355E C60021                  	mov byte[rax], T_pair ;	 set type pair
  6100 00003561 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6101 00003565 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  6102 00003569 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  6103                                  	.L_lambda_opt_stack_adjusted_0003:
  6104 0000356E C8000000                	enter 0, 0
  6105                                  	; preparing a tail-call
  6106 00003572 488B4528                	mov rax, PARAM(1)	; param s
  6107 00003576 50                      	push rax
  6108 00003577 6A01                    	push 1	; arg count
  6109 00003579 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  6110 00003581 803805                  	cmp byte [rax], T_undefined
  6111 00003584 0F84D2210100            	je L_error_fvar_undefined
  6112 0000358A 803804                  	cmp byte [rax], T_closure
  6113 0000358D 0F854D220100            	jne L_error_non_closure
  6114 00003593 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6115 00003596 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6116 00003599 50                      	push rax
  6117 0000359A 488B4528                	mov rax, PARAM(1)	; param s
  6118 0000359E 50                      	push rax
  6119 0000359F 6A01                    	push 1	; arg count
  6120 000035A1 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  6121 000035A9 803805                  	cmp byte [rax], T_undefined
  6122 000035AC 0F84AA210100            	je L_error_fvar_undefined
  6123 000035B2 803804                  	cmp byte [rax], T_closure
  6124 000035B5 0F8525220100            	jne L_error_non_closure
  6125 000035BB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6126 000035BE FF5009                  	call SOB_CLOSURE_CODE(rax)
  6127 000035C1 50                      	push rax
  6128 000035C2 6A02                    	push 2	; arg count
  6129 000035C4 488B4510                	mov rax, ENV
  6130 000035C8 488B00                  	mov rax, qword [rax + 8 * 0]
  6131 000035CB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6132 000035CE 488B00                  	mov rax, qword [rax]
  6133 000035D1 803804                  	cmp byte [rax], T_closure
  6134 000035D4 0F8506220100            	jne L_error_non_closure
  6135 000035DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  6136 000035DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6137 000035E0 50                      	push rax
  6138 000035E1 488B4520                	mov rax, PARAM(0)	; param f
  6139 000035E5 50                      	push rax
  6140 000035E6 6A02                    	push 2	; arg count
  6141 000035E8 488B0425[9E0F0000]      	mov rax, qword [free_var_29]	; free var __bin-apply
  6142 000035F0 803805                  	cmp byte [rax], T_undefined
  6143 000035F3 0F8463210100            	je L_error_fvar_undefined
  6144 000035F9 803804                  	cmp byte [rax], T_closure
  6145 000035FC 0F85DE210100            	jne L_error_non_closure
  6146 00003602 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6147                                  
  6148                                  	; recycling the current frame
  6149 00003605 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6150 00003608 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6151 0000360B B906000000              	mov rcx, 2 + 4
  6152 00003610 488B5D18                	mov rbx, COUNT
  6153 00003614 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6154 00003619 488D55F8                	lea rdx, [rbp - 8 * 1]
  6155                                  .L_tc_recycle_frame_loop_0022:
  6156 0000361D 4883F900                	cmp rcx, 0
  6157 00003621 7413                    	je .L_tc_recycle_frame_done_0022
  6158 00003623 488B32                  	mov rsi, qword [rdx]
  6159 00003626 488933                  	mov qword [rbx], rsi
  6160 00003629 48FFC9                  	dec rcx
  6161 0000362C 4883EB08                	sub rbx, 8 * 1
  6162 00003630 4883EA08                	sub rdx, 8 * 1
  6163 00003634 EBE7                    	jmp .L_tc_recycle_frame_loop_0022
  6164                                  .L_tc_recycle_frame_done_0022:
  6165 00003636 488D6308                	lea rsp, [rbx + 8 * 1]
  6166 0000363A 5D                      	pop rbp	; the proc will restore it!
  6167 0000363B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6168 0000363E C9                      	leave
  6169 0000363F C22000                  	ret AND_KILL_FRAME(2)
  6170                                  .L_lambda_opt_end_0003:	; new closure is in rax
  6171 00003642 C9                      	leave
  6172 00003643 C21800                  	ret AND_KILL_FRAME(1)
  6173                                  .L_lambda_simple_end_0022:	; new closure is in rax
  6174 00003646 803804                  	cmp byte [rax], T_closure
  6175 00003649 0F8591210100            	jne L_error_non_closure
  6176 0000364F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6177 00003652 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6178 00003655 48890425[CC140000]      	mov qword [free_var_107], rax
  6179 0000365D 48B8-                   	mov rax, sob_void
  6179 0000365F [0000000000000000] 
  6180                                  
  6181 00003667 4889C7                  	mov rdi, rax
  6182 0000366A E82C230100              	call print_sexpr_if_not_void
  6183                                  
  6184 0000366F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6185 00003674 E810220100              	call malloc
  6186 00003679 50                      	push rax
  6187 0000367A BF00000000              	mov rdi, 8 * 0	; new rib
  6188 0000367F E805220100              	call malloc
  6189 00003684 50                      	push rax
  6190 00003685 BF08000000              	mov rdi, 8 * 1	; extended env
  6191 0000368A E8FA210100              	call malloc
  6192 0000368F 488B7D10                	mov rdi, ENV
  6193 00003693 BE00000000              	mov rsi, 0
  6194 00003698 BA01000000              	mov rdx, 1
  6195                                  .L_lambda_opt_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  6196 0000369D 4883FE00                	cmp rsi, 0
  6197 000036A1 7410                    	je .L_lambda_opt_env_end_0004
  6198 000036A3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6199 000036A7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6200 000036AB 48FFC6                  	inc rsi
  6201 000036AE 48FFC2                  	inc rdx
  6202 000036B1 EBEA                    	jmp .L_lambda_opt_env_loop_0004
  6203                                  .L_lambda_opt_env_end_0004:
  6204 000036B3 5B                      	pop rbx
  6205 000036B4 BE00000000              	mov rsi, 0
  6206                                  .L_lambda_opt_params_loop_0004:	; copy params
  6207 000036B9 4883FE00                	cmp rsi, 0
  6208 000036BD 740E                    	je .L_lambda_opt_params_end_0004
  6209 000036BF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6210 000036C4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6211 000036C8 48FFC6                  	inc rsi
  6212 000036CB EBEC                    	jmp .L_lambda_opt_params_loop_0004
  6213                                  .L_lambda_opt_params_end_0004:
  6214 000036CD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6215 000036D0 4889C3                  	mov rbx, rax
  6216 000036D3 58                      	pop rax
  6217 000036D4 C60004                  	mov byte [rax], T_closure
  6218 000036D7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6219 000036DB 48C74009[E8360000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0004
  6220 000036E3 E943040000              	jmp .L_lambda_opt_end_0004
  6221                                  .L_lambda_opt_code_0004:	; lambda-simple body
  6222 000036E8 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  6223 000036EE 740D                    	je .L_lambda_opt_arity_check_exact_0004 ;	 if equal, go to exact arity
  6224 000036F0 7F42                    	jg .L_lambda_opt_arity_check_more_0004 ;	 if greater than, go to arity more
  6225 000036F2 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  6226 000036F6 6A01                     	push 1
  6227 000036F8 E959210100              	jmp L_error_incorrect_arity_opt
  6228                                  	.L_lambda_opt_arity_check_exact_0004:
  6229 000036FD 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  6230 00003702 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  6231 00003707 4883EC08                	sub rsp, 8
  6232 0000370B 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  6233                                  	.L_lambda_opt_exact_shifting_loop_0004:
  6234 0000370F 488B5108                	mov rdx, [rcx + 8]
  6235 00003713 488911                  	mov [rcx], rdx
  6236 00003716 4883C108                	add rcx, 8
  6237 0000371A 4839CB                  	cmp rbx, rcx
  6238 0000371D 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0004
  6239                                  	.L_lambda_opt_exact_shifting_loop_end_0004:
  6240 0000371F 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  6241 00003726 4883C001                	add rax, 1 ; 	arg count += 1
  6242 0000372A 4889442410              	mov qword [rsp + 8 * 2], rax
  6243 0000372F E987000000              	jmp .L_lambda_opt_stack_adjusted_0004
  6244                                  	.L_lambda_opt_arity_check_more_0004:
  6245 00003734 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  6245 00003736 [0100000000000000] 
  6246 0000373E 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  6247 00003744 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0004
  6248                                  	.L_lambda_opt_stack_shrink_loop_0004:
  6249 00003746 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6250 0000374B E839210100              	call malloc ;	 allocated memory for the optional scheme list
  6251 00003750 C60021                  	mov byte[rax], T_pair ;	 set type pair
  6252 00003753 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6253 00003757 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  6254 0000375A 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  6255 0000375F 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  6256 00003764 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  6257 00003768 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  6258                                  	.L_lambda_opt_more_shifting_loop_0004:
  6259 0000376D 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  6260 00003770 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  6261 00003774 4883EB08                	sub rbx, 8 
  6262 00003778 4839DC                  	cmp rsp, rbx
  6263 0000377B 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0004
  6264                                  	.L_lambda_opt_more_shifting_loop_end_0004:
  6265 0000377D 4883C408                	add rsp, 8 ;	 update rsp
  6266 00003781 488B5C2410              	mov rbx, [rsp + 8 * 2]
  6267 00003786 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  6268 0000378A 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  6269 0000378F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6270 00003795 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0004
  6271                                  	.L_lambda_opt_stack_shrink_loop_exit_0004:
  6272 00003797 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  6273 0000379C 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  6274 000037A1 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6275 000037A6 E8DE200100              	call malloc ;	 allocated memory for the optional scheme list
  6276 000037AB C60021                  	mov byte[rax], T_pair ;	 set type pair
  6277 000037AE 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6278 000037B2 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  6279 000037B6 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  6280                                  	.L_lambda_opt_stack_adjusted_0004:
  6281 000037BB C8000000                	enter 0, 0
  6282                                  	; preparing a tail-call
  6283 000037BF 48B8-                   	mov rax, L_constants + 1881
  6283 000037C1 [5907000000000000] 
  6284 000037C9 50                      	push rax
  6285 000037CA 6A01                    	push 1	; arg count
  6286 000037CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6287 000037D1 E8B3200100              	call malloc
  6288 000037D6 50                      	push rax
  6289 000037D7 BF10000000              	mov rdi, 8 * 2	; new rib
  6290 000037DC E8A8200100              	call malloc
  6291 000037E1 50                      	push rax
  6292 000037E2 BF10000000              	mov rdi, 8 * 2	; extended env
  6293 000037E7 E89D200100              	call malloc
  6294 000037EC 488B7D10                	mov rdi, ENV
  6295 000037F0 BE00000000              	mov rsi, 0
  6296 000037F5 BA01000000              	mov rdx, 1
  6297                                  .L_lambda_simple_env_loop_0024:	; ext_env[i + 1] <-- env[i]
  6298 000037FA 4883FE01                	cmp rsi, 1
  6299 000037FE 7410                    	je .L_lambda_simple_env_end_0024
  6300 00003800 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6301 00003804 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6302 00003808 48FFC6                  	inc rsi
  6303 0000380B 48FFC2                  	inc rdx
  6304 0000380E EBEA                    	jmp .L_lambda_simple_env_loop_0024
  6305                                  .L_lambda_simple_env_end_0024:
  6306 00003810 5B                      	pop rbx
  6307 00003811 BE00000000              	mov rsi, 0
  6308                                  .L_lambda_simple_params_loop_0024:	; copy params
  6309 00003816 4883FE02                	cmp rsi, 2
  6310 0000381A 740E                    	je .L_lambda_simple_params_end_0024
  6311 0000381C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6312 00003821 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6313 00003825 48FFC6                  	inc rsi
  6314 00003828 EBEC                    	jmp .L_lambda_simple_params_loop_0024
  6315                                  .L_lambda_simple_params_end_0024:
  6316 0000382A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6317 0000382D 4889C3                  	mov rbx, rax
  6318 00003830 58                      	pop rax
  6319 00003831 C60004                  	mov byte [rax], T_closure
  6320 00003834 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6321 00003838 48C74009[45380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0024
  6322 00003840 E99D020000              	jmp .L_lambda_simple_end_0024
  6323                                  .L_lambda_simple_code_0024:	; lambda-simple body
  6324 00003845 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6325 0000384B 740B                    	je .L_lambda_simple_arity_check_ok_0024
  6326 0000384D FF742410                	push qword [rsp + 8 * 2]
  6327 00003851 6A01                    	push 1
  6328 00003853 E9EA1F0100              	jmp L_error_incorrect_arity_simple
  6329                                  .L_lambda_simple_arity_check_ok_0024:
  6330 00003858 C8000000                	enter 0, 0
  6331                                  
  6332 0000385C BF08000000              	mov rdi, 8
  6333 00003861 E823200100              	call malloc
  6334 00003866 488B5D20                	mov rbx, PARAM(0)	; param loop
  6335 0000386A 488918                  	mov [rax], rbx	; box loop
  6336 0000386D 48894520                	mov PARAM(0), rax	;replace param loop with box
  6337 00003871 48B8-                   	mov rax, sob_void
  6337 00003873 [0000000000000000] 
  6338                                  
  6339 0000387B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6340 00003880 E804200100              	call malloc
  6341 00003885 50                      	push rax
  6342 00003886 BF08000000              	mov rdi, 8 * 1	; new rib
  6343 0000388B E8F91F0100              	call malloc
  6344 00003890 50                      	push rax
  6345 00003891 BF18000000              	mov rdi, 8 * 3	; extended env
  6346 00003896 E8EE1F0100              	call malloc
  6347 0000389B 488B7D10                	mov rdi, ENV
  6348 0000389F BE00000000              	mov rsi, 0
  6349 000038A4 BA01000000              	mov rdx, 1
  6350                                  .L_lambda_simple_env_loop_0025:	; ext_env[i + 1] <-- env[i]
  6351 000038A9 4883FE02                	cmp rsi, 2
  6352 000038AD 7410                    	je .L_lambda_simple_env_end_0025
  6353 000038AF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6354 000038B3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6355 000038B7 48FFC6                  	inc rsi
  6356 000038BA 48FFC2                  	inc rdx
  6357 000038BD EBEA                    	jmp .L_lambda_simple_env_loop_0025
  6358                                  .L_lambda_simple_env_end_0025:
  6359 000038BF 5B                      	pop rbx
  6360 000038C0 BE00000000              	mov rsi, 0
  6361                                  .L_lambda_simple_params_loop_0025:	; copy params
  6362 000038C5 4883FE01                	cmp rsi, 1
  6363 000038C9 740E                    	je .L_lambda_simple_params_end_0025
  6364 000038CB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6365 000038D0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6366 000038D4 48FFC6                  	inc rsi
  6367 000038D7 EBEC                    	jmp .L_lambda_simple_params_loop_0025
  6368                                  .L_lambda_simple_params_end_0025:
  6369 000038D9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6370 000038DC 4889C3                  	mov rbx, rax
  6371 000038DF 58                      	pop rax
  6372 000038E0 C60004                  	mov byte [rax], T_closure
  6373 000038E3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6374 000038E7 48C74009[F4380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0025
  6375 000038EF E97F010000              	jmp .L_lambda_simple_end_0025
  6376                                  .L_lambda_simple_code_0025:	; lambda-simple body
  6377 000038F4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6378 000038FA 740B                    	je .L_lambda_simple_arity_check_ok_0025
  6379 000038FC FF742410                	push qword [rsp + 8 * 2]
  6380 00003900 6A01                    	push 1
  6381 00003902 E93B1F0100              	jmp L_error_incorrect_arity_simple
  6382                                  .L_lambda_simple_arity_check_ok_0025:
  6383 00003907 C8000000                	enter 0, 0
  6384 0000390B 488B4520                	mov rax, PARAM(0)	; param s
  6385 0000390F 50                      	push rax
  6386 00003910 6A01                    	push 1	; arg count
  6387 00003912 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  6388 0000391A 803805                  	cmp byte [rax], T_undefined
  6389 0000391D 0F84391E0100            	je L_error_fvar_undefined
  6390 00003923 803804                  	cmp byte [rax], T_closure
  6391 00003926 0F85B41E0100            	jne L_error_non_closure
  6392 0000392C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6393 0000392F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6394 00003932 50                      	push rax
  6395 00003933 6A01                    	push 1	; arg count
  6396 00003935 488B0425[C20D0000]      	mov rax, qword [free_var_1]	; free var pair?
  6397 0000393D 803805                  	cmp byte [rax], T_undefined
  6398 00003940 0F84161E0100            	je L_error_fvar_undefined
  6399 00003946 803804                  	cmp byte [rax], T_closure
  6400 00003949 0F85911E0100            	jne L_error_non_closure
  6401 0000394F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6402 00003952 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6403                                  
  6404 00003955 483D[02000000]          	cmp rax, sob_boolean_false
  6405 0000395B 0F8404010000            	je .L_if_else_0005
  6406 00003961 488B4520                	mov rax, PARAM(0)	; param s
  6407 00003965 50                      	push rax
  6408 00003966 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  6409 0000396E 803805                  	cmp byte [rax], T_undefined
  6410 00003971 0F84E51D0100            	je L_error_fvar_undefined
  6411 00003977 50                      	push rax
  6412 00003978 6A02                    	push 2	; arg count
  6413 0000397A 488B0425[EE140000]      	mov rax, qword [free_var_109]	; free var map
  6414 00003982 803805                  	cmp byte [rax], T_undefined
  6415 00003985 0F84D11D0100            	je L_error_fvar_undefined
  6416 0000398B 803804                  	cmp byte [rax], T_closure
  6417 0000398E 0F854C1E0100            	jne L_error_non_closure
  6418 00003994 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6419 00003997 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6420 0000399A 50                      	push rax
  6421 0000399B 488B4510                	mov rax, ENV
  6422 0000399F 488B4008                	mov rax, qword [rax + 8 * 1]
  6423 000039A3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6424 000039A6 50                      	push rax
  6425 000039A7 6A02                    	push 2	; arg count
  6426 000039A9 488B0425[CC140000]      	mov rax, qword [free_var_107]	; free var apply
  6427 000039B1 803805                  	cmp byte [rax], T_undefined
  6428 000039B4 0F84A21D0100            	je L_error_fvar_undefined
  6429 000039BA 803804                  	cmp byte [rax], T_closure
  6430 000039BD 0F851D1E0100            	jne L_error_non_closure
  6431 000039C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6432 000039C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6433 000039C9 483D[02000000]          	cmp rax, sob_boolean_false
  6434 000039CF 0F858E000000            	jne .L_or_end_0003
  6435                                  	; preparing a tail-call
  6436 000039D5 488B4520                	mov rax, PARAM(0)	; param s
  6437 000039D9 50                      	push rax
  6438 000039DA 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  6439 000039E2 803805                  	cmp byte [rax], T_undefined
  6440 000039E5 0F84711D0100            	je L_error_fvar_undefined
  6441 000039EB 50                      	push rax
  6442 000039EC 6A02                    	push 2	; arg count
  6443 000039EE 488B0425[EE140000]      	mov rax, qword [free_var_109]	; free var map
  6444 000039F6 803805                  	cmp byte [rax], T_undefined
  6445 000039F9 0F845D1D0100            	je L_error_fvar_undefined
  6446 000039FF 803804                  	cmp byte [rax], T_closure
  6447 00003A02 0F85D81D0100            	jne L_error_non_closure
  6448 00003A08 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6449 00003A0B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6450 00003A0E 50                      	push rax
  6451 00003A0F 6A01                    	push 1	; arg count
  6452 00003A11 488B4510                	mov rax, ENV
  6453 00003A15 488B00                  	mov rax, qword [rax + 8 * 0]
  6454 00003A18 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6455 00003A1B 488B00                  	mov rax, qword [rax]
  6456 00003A1E 803804                  	cmp byte [rax], T_closure
  6457 00003A21 0F85B91D0100            	jne L_error_non_closure
  6458 00003A27 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6459                                  
  6460                                  	; recycling the current frame
  6461 00003A2A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6462 00003A2D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6463 00003A30 B905000000              	mov rcx, 1 + 4
  6464 00003A35 488B5D18                	mov rbx, COUNT
  6465 00003A39 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6466 00003A3E 488D55F8                	lea rdx, [rbp - 8 * 1]
  6467                                  .L_tc_recycle_frame_loop_0023:
  6468 00003A42 4883F900                	cmp rcx, 0
  6469 00003A46 7413                    	je .L_tc_recycle_frame_done_0023
  6470 00003A48 488B32                  	mov rsi, qword [rdx]
  6471 00003A4B 488933                  	mov qword [rbx], rsi
  6472 00003A4E 48FFC9                  	dec rcx
  6473 00003A51 4883EB08                	sub rbx, 8 * 1
  6474 00003A55 4883EA08                	sub rdx, 8 * 1
  6475 00003A59 EBE7                    	jmp .L_tc_recycle_frame_loop_0023
  6476                                  .L_tc_recycle_frame_done_0023:
  6477 00003A5B 488D6308                	lea rsp, [rbx + 8 * 1]
  6478 00003A5F 5D                      	pop rbp	; the proc will restore it!
  6479 00003A60 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6480                                  .L_or_end_0003:
  6481                                  
  6482 00003A63 EB0A                    	jmp .L_if_end_0005
  6483                                  
  6484                                  	.L_if_else_0005:
  6485 00003A65 48B8-                   	mov rax, L_constants + 2
  6485 00003A67 [0200000000000000] 
  6486                                  
  6487                                  	.L_if_end_0005:
  6488 00003A6F C9                      	leave
  6489 00003A70 C21800                  	ret AND_KILL_FRAME(1)
  6490                                  .L_lambda_simple_end_0025:	; new closure is in rax
  6491                                  
  6492 00003A73 50                      	push rax
  6493 00003A74 488B4520                	mov rax, PARAM(0)	; param loop
  6494                                  
  6495 00003A78 8F00                    	pop qword[rax]
  6496 00003A7A 48B8-                   	mov rax, sob_void
  6496 00003A7C [0000000000000000] 
  6497                                  
  6498                                  	; preparing a tail-call
  6499 00003A84 488B4510                	mov rax, ENV
  6500 00003A88 488B00                  	mov rax, qword [rax + 8 * 0]
  6501 00003A8B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6502 00003A8F 50                      	push rax
  6503 00003A90 6A01                    	push 1	; arg count
  6504 00003A92 488B4520                	mov rax, PARAM(0)	; param loop
  6505 00003A96 488B00                  	mov rax, qword [rax]
  6506 00003A99 803804                  	cmp byte [rax], T_closure
  6507 00003A9C 0F853E1D0100            	jne L_error_non_closure
  6508 00003AA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6509                                  
  6510                                  	; recycling the current frame
  6511 00003AA5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6512 00003AA8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6513 00003AAB B905000000              	mov rcx, 1 + 4
  6514 00003AB0 488B5D18                	mov rbx, COUNT
  6515 00003AB4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6516 00003AB9 488D55F8                	lea rdx, [rbp - 8 * 1]
  6517                                  .L_tc_recycle_frame_loop_0024:
  6518 00003ABD 4883F900                	cmp rcx, 0
  6519 00003AC1 7413                    	je .L_tc_recycle_frame_done_0024
  6520 00003AC3 488B32                  	mov rsi, qword [rdx]
  6521 00003AC6 488933                  	mov qword [rbx], rsi
  6522 00003AC9 48FFC9                  	dec rcx
  6523 00003ACC 4883EB08                	sub rbx, 8 * 1
  6524 00003AD0 4883EA08                	sub rdx, 8 * 1
  6525 00003AD4 EBE7                    	jmp .L_tc_recycle_frame_loop_0024
  6526                                  .L_tc_recycle_frame_done_0024:
  6527 00003AD6 488D6308                	lea rsp, [rbx + 8 * 1]
  6528 00003ADA 5D                      	pop rbp	; the proc will restore it!
  6529 00003ADB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6530 00003ADE C9                      	leave
  6531 00003ADF C21800                  	ret AND_KILL_FRAME(1)
  6532                                  .L_lambda_simple_end_0024:	; new closure is in rax
  6533 00003AE2 803804                  	cmp byte [rax], T_closure
  6534 00003AE5 0F85F51C0100            	jne L_error_non_closure
  6535 00003AEB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6536                                  
  6537                                  	; recycling the current frame
  6538 00003AEE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6539 00003AF1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6540 00003AF4 B905000000              	mov rcx, 1 + 4
  6541 00003AF9 488B5D18                	mov rbx, COUNT
  6542 00003AFD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6543 00003B02 488D55F8                	lea rdx, [rbp - 8 * 1]
  6544                                  .L_tc_recycle_frame_loop_0025:
  6545 00003B06 4883F900                	cmp rcx, 0
  6546 00003B0A 7413                    	je .L_tc_recycle_frame_done_0025
  6547 00003B0C 488B32                  	mov rsi, qword [rdx]
  6548 00003B0F 488933                  	mov qword [rbx], rsi
  6549 00003B12 48FFC9                  	dec rcx
  6550 00003B15 4883EB08                	sub rbx, 8 * 1
  6551 00003B19 4883EA08                	sub rdx, 8 * 1
  6552 00003B1D EBE7                    	jmp .L_tc_recycle_frame_loop_0025
  6553                                  .L_tc_recycle_frame_done_0025:
  6554 00003B1F 488D6308                	lea rsp, [rbx + 8 * 1]
  6555 00003B23 5D                      	pop rbp	; the proc will restore it!
  6556 00003B24 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6557 00003B27 C9                      	leave
  6558 00003B28 C22000                  	ret AND_KILL_FRAME(2)
  6559                                  .L_lambda_opt_end_0004:	; new closure is in rax
  6560 00003B2B 48890425[DD140000]      	mov qword [free_var_108], rax
  6561 00003B33 48B8-                   	mov rax, sob_void
  6561 00003B35 [0000000000000000] 
  6562                                  
  6563 00003B3D 4889C7                  	mov rdi, rax
  6564 00003B40 E8561E0100              	call print_sexpr_if_not_void
  6565                                  
  6566 00003B45 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6567 00003B4A E83A1D0100              	call malloc
  6568 00003B4F 50                      	push rax
  6569 00003B50 BF00000000              	mov rdi, 8 * 0	; new rib
  6570 00003B55 E82F1D0100              	call malloc
  6571 00003B5A 50                      	push rax
  6572 00003B5B BF08000000              	mov rdi, 8 * 1	; extended env
  6573 00003B60 E8241D0100              	call malloc
  6574 00003B65 488B7D10                	mov rdi, ENV
  6575 00003B69 BE00000000              	mov rsi, 0
  6576 00003B6E BA01000000              	mov rdx, 1
  6577                                  .L_lambda_opt_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  6578 00003B73 4883FE00                	cmp rsi, 0
  6579 00003B77 7410                    	je .L_lambda_opt_env_end_0005
  6580 00003B79 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6581 00003B7D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6582 00003B81 48FFC6                  	inc rsi
  6583 00003B84 48FFC2                  	inc rdx
  6584 00003B87 EBEA                    	jmp .L_lambda_opt_env_loop_0005
  6585                                  .L_lambda_opt_env_end_0005:
  6586 00003B89 5B                      	pop rbx
  6587 00003B8A BE00000000              	mov rsi, 0
  6588                                  .L_lambda_opt_params_loop_0005:	; copy params
  6589 00003B8F 4883FE00                	cmp rsi, 0
  6590 00003B93 740E                    	je .L_lambda_opt_params_end_0005
  6591 00003B95 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6592 00003B9A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6593 00003B9E 48FFC6                  	inc rsi
  6594 00003BA1 EBEC                    	jmp .L_lambda_opt_params_loop_0005
  6595                                  .L_lambda_opt_params_end_0005:
  6596 00003BA3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6597 00003BA6 4889C3                  	mov rbx, rax
  6598 00003BA9 58                      	pop rax
  6599 00003BAA C60004                  	mov byte [rax], T_closure
  6600 00003BAD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6601 00003BB1 48C74009[BE3B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0005
  6602 00003BB9 E943040000              	jmp .L_lambda_opt_end_0005
  6603                                  .L_lambda_opt_code_0005:	; lambda-simple body
  6604 00003BBE 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  6605 00003BC4 740D                    	je .L_lambda_opt_arity_check_exact_0005 ;	 if equal, go to exact arity
  6606 00003BC6 7F42                    	jg .L_lambda_opt_arity_check_more_0005 ;	 if greater than, go to arity more
  6607 00003BC8 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  6608 00003BCC 6A01                     	push 1
  6609 00003BCE E9831C0100              	jmp L_error_incorrect_arity_opt
  6610                                  	.L_lambda_opt_arity_check_exact_0005:
  6611 00003BD3 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  6612 00003BD8 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  6613 00003BDD 4883EC08                	sub rsp, 8
  6614 00003BE1 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  6615                                  	.L_lambda_opt_exact_shifting_loop_0005:
  6616 00003BE5 488B5108                	mov rdx, [rcx + 8]
  6617 00003BE9 488911                  	mov [rcx], rdx
  6618 00003BEC 4883C108                	add rcx, 8
  6619 00003BF0 4839CB                  	cmp rbx, rcx
  6620 00003BF3 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0005
  6621                                  	.L_lambda_opt_exact_shifting_loop_end_0005:
  6622 00003BF5 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  6623 00003BFC 4883C001                	add rax, 1 ; 	arg count += 1
  6624 00003C00 4889442410              	mov qword [rsp + 8 * 2], rax
  6625 00003C05 E987000000              	jmp .L_lambda_opt_stack_adjusted_0005
  6626                                  	.L_lambda_opt_arity_check_more_0005:
  6627 00003C0A 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  6627 00003C0C [0100000000000000] 
  6628 00003C14 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  6629 00003C1A 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0005
  6630                                  	.L_lambda_opt_stack_shrink_loop_0005:
  6631 00003C1C BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6632 00003C21 E8631C0100              	call malloc ;	 allocated memory for the optional scheme list
  6633 00003C26 C60021                  	mov byte[rax], T_pair ;	 set type pair
  6634 00003C29 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6635 00003C2D 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  6636 00003C30 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  6637 00003C35 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  6638 00003C3A 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  6639 00003C3E 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  6640                                  	.L_lambda_opt_more_shifting_loop_0005:
  6641 00003C43 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  6642 00003C46 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  6643 00003C4A 4883EB08                	sub rbx, 8 
  6644 00003C4E 4839DC                  	cmp rsp, rbx
  6645 00003C51 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0005
  6646                                  	.L_lambda_opt_more_shifting_loop_end_0005:
  6647 00003C53 4883C408                	add rsp, 8 ;	 update rsp
  6648 00003C57 488B5C2410              	mov rbx, [rsp + 8 * 2]
  6649 00003C5C 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  6650 00003C60 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  6651 00003C65 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6652 00003C6B 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0005
  6653                                  	.L_lambda_opt_stack_shrink_loop_exit_0005:
  6654 00003C6D 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  6655 00003C72 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  6656 00003C77 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6657 00003C7C E8081C0100              	call malloc ;	 allocated memory for the optional scheme list
  6658 00003C81 C60021                  	mov byte[rax], T_pair ;	 set type pair
  6659 00003C84 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6660 00003C88 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  6661 00003C8C 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  6662                                  	.L_lambda_opt_stack_adjusted_0005:
  6663 00003C91 C8000000                	enter 0, 0
  6664                                  	; preparing a tail-call
  6665 00003C95 48B8-                   	mov rax, L_constants + 1881
  6665 00003C97 [5907000000000000] 
  6666 00003C9F 50                      	push rax
  6667 00003CA0 6A01                    	push 1	; arg count
  6668 00003CA2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6669 00003CA7 E8DD1B0100              	call malloc
  6670 00003CAC 50                      	push rax
  6671 00003CAD BF10000000              	mov rdi, 8 * 2	; new rib
  6672 00003CB2 E8D21B0100              	call malloc
  6673 00003CB7 50                      	push rax
  6674 00003CB8 BF10000000              	mov rdi, 8 * 2	; extended env
  6675 00003CBD E8C71B0100              	call malloc
  6676 00003CC2 488B7D10                	mov rdi, ENV
  6677 00003CC6 BE00000000              	mov rsi, 0
  6678 00003CCB BA01000000              	mov rdx, 1
  6679                                  .L_lambda_simple_env_loop_0026:	; ext_env[i + 1] <-- env[i]
  6680 00003CD0 4883FE01                	cmp rsi, 1
  6681 00003CD4 7410                    	je .L_lambda_simple_env_end_0026
  6682 00003CD6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6683 00003CDA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6684 00003CDE 48FFC6                  	inc rsi
  6685 00003CE1 48FFC2                  	inc rdx
  6686 00003CE4 EBEA                    	jmp .L_lambda_simple_env_loop_0026
  6687                                  .L_lambda_simple_env_end_0026:
  6688 00003CE6 5B                      	pop rbx
  6689 00003CE7 BE00000000              	mov rsi, 0
  6690                                  .L_lambda_simple_params_loop_0026:	; copy params
  6691 00003CEC 4883FE02                	cmp rsi, 2
  6692 00003CF0 740E                    	je .L_lambda_simple_params_end_0026
  6693 00003CF2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6694 00003CF7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6695 00003CFB 48FFC6                  	inc rsi
  6696 00003CFE EBEC                    	jmp .L_lambda_simple_params_loop_0026
  6697                                  .L_lambda_simple_params_end_0026:
  6698 00003D00 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6699 00003D03 4889C3                  	mov rbx, rax
  6700 00003D06 58                      	pop rax
  6701 00003D07 C60004                  	mov byte [rax], T_closure
  6702 00003D0A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6703 00003D0E 48C74009[1B3D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0026
  6704 00003D16 E99D020000              	jmp .L_lambda_simple_end_0026
  6705                                  .L_lambda_simple_code_0026:	; lambda-simple body
  6706 00003D1B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6707 00003D21 740B                    	je .L_lambda_simple_arity_check_ok_0026
  6708 00003D23 FF742410                	push qword [rsp + 8 * 2]
  6709 00003D27 6A01                    	push 1
  6710 00003D29 E9141B0100              	jmp L_error_incorrect_arity_simple
  6711                                  .L_lambda_simple_arity_check_ok_0026:
  6712 00003D2E C8000000                	enter 0, 0
  6713                                  
  6714 00003D32 BF08000000              	mov rdi, 8
  6715 00003D37 E84D1B0100              	call malloc
  6716 00003D3C 488B5D20                	mov rbx, PARAM(0)	; param loop
  6717 00003D40 488918                  	mov [rax], rbx	; box loop
  6718 00003D43 48894520                	mov PARAM(0), rax	;replace param loop with box
  6719 00003D47 48B8-                   	mov rax, sob_void
  6719 00003D49 [0000000000000000] 
  6720                                  
  6721 00003D51 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6722 00003D56 E82E1B0100              	call malloc
  6723 00003D5B 50                      	push rax
  6724 00003D5C BF08000000              	mov rdi, 8 * 1	; new rib
  6725 00003D61 E8231B0100              	call malloc
  6726 00003D66 50                      	push rax
  6727 00003D67 BF18000000              	mov rdi, 8 * 3	; extended env
  6728 00003D6C E8181B0100              	call malloc
  6729 00003D71 488B7D10                	mov rdi, ENV
  6730 00003D75 BE00000000              	mov rsi, 0
  6731 00003D7A BA01000000              	mov rdx, 1
  6732                                  .L_lambda_simple_env_loop_0027:	; ext_env[i + 1] <-- env[i]
  6733 00003D7F 4883FE02                	cmp rsi, 2
  6734 00003D83 7410                    	je .L_lambda_simple_env_end_0027
  6735 00003D85 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6736 00003D89 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6737 00003D8D 48FFC6                  	inc rsi
  6738 00003D90 48FFC2                  	inc rdx
  6739 00003D93 EBEA                    	jmp .L_lambda_simple_env_loop_0027
  6740                                  .L_lambda_simple_env_end_0027:
  6741 00003D95 5B                      	pop rbx
  6742 00003D96 BE00000000              	mov rsi, 0
  6743                                  .L_lambda_simple_params_loop_0027:	; copy params
  6744 00003D9B 4883FE01                	cmp rsi, 1
  6745 00003D9F 740E                    	je .L_lambda_simple_params_end_0027
  6746 00003DA1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6747 00003DA6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6748 00003DAA 48FFC6                  	inc rsi
  6749 00003DAD EBEC                    	jmp .L_lambda_simple_params_loop_0027
  6750                                  .L_lambda_simple_params_end_0027:
  6751 00003DAF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6752 00003DB2 4889C3                  	mov rbx, rax
  6753 00003DB5 58                      	pop rax
  6754 00003DB6 C60004                  	mov byte [rax], T_closure
  6755 00003DB9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6756 00003DBD 48C74009[CA3D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0027
  6757 00003DC5 E97F010000              	jmp .L_lambda_simple_end_0027
  6758                                  .L_lambda_simple_code_0027:	; lambda-simple body
  6759 00003DCA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6760 00003DD0 740B                    	je .L_lambda_simple_arity_check_ok_0027
  6761 00003DD2 FF742410                	push qword [rsp + 8 * 2]
  6762 00003DD6 6A01                    	push 1
  6763 00003DD8 E9651A0100              	jmp L_error_incorrect_arity_simple
  6764                                  .L_lambda_simple_arity_check_ok_0027:
  6765 00003DDD C8000000                	enter 0, 0
  6766 00003DE1 488B4520                	mov rax, PARAM(0)	; param s
  6767 00003DE5 50                      	push rax
  6768 00003DE6 6A01                    	push 1	; arg count
  6769 00003DE8 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  6770 00003DF0 803805                  	cmp byte [rax], T_undefined
  6771 00003DF3 0F8463190100            	je L_error_fvar_undefined
  6772 00003DF9 803804                  	cmp byte [rax], T_closure
  6773 00003DFC 0F85DE190100            	jne L_error_non_closure
  6774 00003E02 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6775 00003E05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6776 00003E08 50                      	push rax
  6777 00003E09 6A01                    	push 1	; arg count
  6778 00003E0B 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
  6779 00003E13 803805                  	cmp byte [rax], T_undefined
  6780 00003E16 0F8440190100            	je L_error_fvar_undefined
  6781 00003E1C 803804                  	cmp byte [rax], T_closure
  6782 00003E1F 0F85BB190100            	jne L_error_non_closure
  6783 00003E25 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6784 00003E28 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6785 00003E2B 483D[02000000]          	cmp rax, sob_boolean_false
  6786 00003E31 0F850E010000            	jne .L_or_end_0004
  6787 00003E37 488B4520                	mov rax, PARAM(0)	; param s
  6788 00003E3B 50                      	push rax
  6789 00003E3C 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  6790 00003E44 803805                  	cmp byte [rax], T_undefined
  6791 00003E47 0F840F190100            	je L_error_fvar_undefined
  6792 00003E4D 50                      	push rax
  6793 00003E4E 6A02                    	push 2	; arg count
  6794 00003E50 488B0425[EE140000]      	mov rax, qword [free_var_109]	; free var map
  6795 00003E58 803805                  	cmp byte [rax], T_undefined
  6796 00003E5B 0F84FB180100            	je L_error_fvar_undefined
  6797 00003E61 803804                  	cmp byte [rax], T_closure
  6798 00003E64 0F8576190100            	jne L_error_non_closure
  6799 00003E6A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6800 00003E6D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6801 00003E70 50                      	push rax
  6802 00003E71 488B4510                	mov rax, ENV
  6803 00003E75 488B4008                	mov rax, qword [rax + 8 * 1]
  6804 00003E79 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6805 00003E7C 50                      	push rax
  6806 00003E7D 6A02                    	push 2	; arg count
  6807 00003E7F 488B0425[CC140000]      	mov rax, qword [free_var_107]	; free var apply
  6808 00003E87 803805                  	cmp byte [rax], T_undefined
  6809 00003E8A 0F84CC180100            	je L_error_fvar_undefined
  6810 00003E90 803804                  	cmp byte [rax], T_closure
  6811 00003E93 0F8547190100            	jne L_error_non_closure
  6812 00003E99 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6813 00003E9C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6814                                  
  6815 00003E9F 483D[02000000]          	cmp rax, sob_boolean_false
  6816 00003EA5 0F8490000000            	je .L_if_else_0006
  6817                                  	; preparing a tail-call
  6818 00003EAB 488B4520                	mov rax, PARAM(0)	; param s
  6819 00003EAF 50                      	push rax
  6820 00003EB0 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  6821 00003EB8 803805                  	cmp byte [rax], T_undefined
  6822 00003EBB 0F849B180100            	je L_error_fvar_undefined
  6823 00003EC1 50                      	push rax
  6824 00003EC2 6A02                    	push 2	; arg count
  6825 00003EC4 488B0425[EE140000]      	mov rax, qword [free_var_109]	; free var map
  6826 00003ECC 803805                  	cmp byte [rax], T_undefined
  6827 00003ECF 0F8487180100            	je L_error_fvar_undefined
  6828 00003ED5 803804                  	cmp byte [rax], T_closure
  6829 00003ED8 0F8502190100            	jne L_error_non_closure
  6830 00003EDE FF7001                  	push SOB_CLOSURE_ENV(rax)
  6831 00003EE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6832 00003EE4 50                      	push rax
  6833 00003EE5 6A01                    	push 1	; arg count
  6834 00003EE7 488B4510                	mov rax, ENV
  6835 00003EEB 488B00                  	mov rax, qword [rax + 8 * 0]
  6836 00003EEE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6837 00003EF1 488B00                  	mov rax, qword [rax]
  6838 00003EF4 803804                  	cmp byte [rax], T_closure
  6839 00003EF7 0F85E3180100            	jne L_error_non_closure
  6840 00003EFD FF7001                  	push SOB_CLOSURE_ENV(rax)
  6841                                  
  6842                                  	; recycling the current frame
  6843 00003F00 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6844 00003F03 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6845 00003F06 B905000000              	mov rcx, 1 + 4
  6846 00003F0B 488B5D18                	mov rbx, COUNT
  6847 00003F0F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6848 00003F14 488D55F8                	lea rdx, [rbp - 8 * 1]
  6849                                  .L_tc_recycle_frame_loop_0026:
  6850 00003F18 4883F900                	cmp rcx, 0
  6851 00003F1C 7413                    	je .L_tc_recycle_frame_done_0026
  6852 00003F1E 488B32                  	mov rsi, qword [rdx]
  6853 00003F21 488933                  	mov qword [rbx], rsi
  6854 00003F24 48FFC9                  	dec rcx
  6855 00003F27 4883EB08                	sub rbx, 8 * 1
  6856 00003F2B 4883EA08                	sub rdx, 8 * 1
  6857 00003F2F EBE7                    	jmp .L_tc_recycle_frame_loop_0026
  6858                                  .L_tc_recycle_frame_done_0026:
  6859 00003F31 488D6308                	lea rsp, [rbx + 8 * 1]
  6860 00003F35 5D                      	pop rbp	; the proc will restore it!
  6861 00003F36 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6862                                  
  6863 00003F39 EB0A                    	jmp .L_if_end_0006
  6864                                  
  6865                                  	.L_if_else_0006:
  6866 00003F3B 48B8-                   	mov rax, L_constants + 2
  6866 00003F3D [0200000000000000] 
  6867                                  
  6868                                  	.L_if_end_0006:
  6869                                  .L_or_end_0004:
  6870 00003F45 C9                      	leave
  6871 00003F46 C21800                  	ret AND_KILL_FRAME(1)
  6872                                  .L_lambda_simple_end_0027:	; new closure is in rax
  6873                                  
  6874 00003F49 50                      	push rax
  6875 00003F4A 488B4520                	mov rax, PARAM(0)	; param loop
  6876                                  
  6877 00003F4E 8F00                    	pop qword[rax]
  6878 00003F50 48B8-                   	mov rax, sob_void
  6878 00003F52 [0000000000000000] 
  6879                                  
  6880                                  	; preparing a tail-call
  6881 00003F5A 488B4510                	mov rax, ENV
  6882 00003F5E 488B00                  	mov rax, qword [rax + 8 * 0]
  6883 00003F61 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6884 00003F65 50                      	push rax
  6885 00003F66 6A01                    	push 1	; arg count
  6886 00003F68 488B4520                	mov rax, PARAM(0)	; param loop
  6887 00003F6C 488B00                  	mov rax, qword [rax]
  6888 00003F6F 803804                  	cmp byte [rax], T_closure
  6889 00003F72 0F8568180100            	jne L_error_non_closure
  6890 00003F78 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6891                                  
  6892                                  	; recycling the current frame
  6893 00003F7B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6894 00003F7E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6895 00003F81 B905000000              	mov rcx, 1 + 4
  6896 00003F86 488B5D18                	mov rbx, COUNT
  6897 00003F8A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6898 00003F8F 488D55F8                	lea rdx, [rbp - 8 * 1]
  6899                                  .L_tc_recycle_frame_loop_0027:
  6900 00003F93 4883F900                	cmp rcx, 0
  6901 00003F97 7413                    	je .L_tc_recycle_frame_done_0027
  6902 00003F99 488B32                  	mov rsi, qword [rdx]
  6903 00003F9C 488933                  	mov qword [rbx], rsi
  6904 00003F9F 48FFC9                  	dec rcx
  6905 00003FA2 4883EB08                	sub rbx, 8 * 1
  6906 00003FA6 4883EA08                	sub rdx, 8 * 1
  6907 00003FAA EBE7                    	jmp .L_tc_recycle_frame_loop_0027
  6908                                  .L_tc_recycle_frame_done_0027:
  6909 00003FAC 488D6308                	lea rsp, [rbx + 8 * 1]
  6910 00003FB0 5D                      	pop rbp	; the proc will restore it!
  6911 00003FB1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6912 00003FB4 C9                      	leave
  6913 00003FB5 C21800                  	ret AND_KILL_FRAME(1)
  6914                                  .L_lambda_simple_end_0026:	; new closure is in rax
  6915 00003FB8 803804                  	cmp byte [rax], T_closure
  6916 00003FBB 0F851F180100            	jne L_error_non_closure
  6917 00003FC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6918                                  
  6919                                  	; recycling the current frame
  6920 00003FC4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6921 00003FC7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6922 00003FCA B905000000              	mov rcx, 1 + 4
  6923 00003FCF 488B5D18                	mov rbx, COUNT
  6924 00003FD3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6925 00003FD8 488D55F8                	lea rdx, [rbp - 8 * 1]
  6926                                  .L_tc_recycle_frame_loop_0028:
  6927 00003FDC 4883F900                	cmp rcx, 0
  6928 00003FE0 7413                    	je .L_tc_recycle_frame_done_0028
  6929 00003FE2 488B32                  	mov rsi, qword [rdx]
  6930 00003FE5 488933                  	mov qword [rbx], rsi
  6931 00003FE8 48FFC9                  	dec rcx
  6932 00003FEB 4883EB08                	sub rbx, 8 * 1
  6933 00003FEF 4883EA08                	sub rdx, 8 * 1
  6934 00003FF3 EBE7                    	jmp .L_tc_recycle_frame_loop_0028
  6935                                  .L_tc_recycle_frame_done_0028:
  6936 00003FF5 488D6308                	lea rsp, [rbx + 8 * 1]
  6937 00003FF9 5D                      	pop rbp	; the proc will restore it!
  6938 00003FFA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6939 00003FFD C9                      	leave
  6940 00003FFE C22000                  	ret AND_KILL_FRAME(2)
  6941                                  .L_lambda_opt_end_0005:	; new closure is in rax
  6942 00004001 48890425[FF140000]      	mov qword [free_var_110], rax
  6943 00004009 48B8-                   	mov rax, sob_void
  6943 0000400B [0000000000000000] 
  6944                                  
  6945 00004013 4889C7                  	mov rdi, rax
  6946 00004016 E880190100              	call print_sexpr_if_not_void
  6947                                  
  6948 0000401B 48B8-                   	mov rax, L_constants + 1881
  6948 0000401D [5907000000000000] 
  6949 00004025 50                      	push rax
  6950 00004026 48B8-                   	mov rax, L_constants + 1881
  6950 00004028 [5907000000000000] 
  6951 00004030 50                      	push rax
  6952 00004031 6A02                    	push 2	; arg count
  6953 00004033 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6954 00004038 E84C180100              	call malloc
  6955 0000403D 50                      	push rax
  6956 0000403E BF00000000              	mov rdi, 8 * 0	; new rib
  6957 00004043 E841180100              	call malloc
  6958 00004048 50                      	push rax
  6959 00004049 BF08000000              	mov rdi, 8 * 1	; extended env
  6960 0000404E E836180100              	call malloc
  6961 00004053 488B7D10                	mov rdi, ENV
  6962 00004057 BE00000000              	mov rsi, 0
  6963 0000405C BA01000000              	mov rdx, 1
  6964                                  .L_lambda_simple_env_loop_0028:	; ext_env[i + 1] <-- env[i]
  6965 00004061 4883FE00                	cmp rsi, 0
  6966 00004065 7410                    	je .L_lambda_simple_env_end_0028
  6967 00004067 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6968 0000406B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6969 0000406F 48FFC6                  	inc rsi
  6970 00004072 48FFC2                  	inc rdx
  6971 00004075 EBEA                    	jmp .L_lambda_simple_env_loop_0028
  6972                                  .L_lambda_simple_env_end_0028:
  6973 00004077 5B                      	pop rbx
  6974 00004078 BE00000000              	mov rsi, 0
  6975                                  .L_lambda_simple_params_loop_0028:	; copy params
  6976 0000407D 4883FE00                	cmp rsi, 0
  6977 00004081 740E                    	je .L_lambda_simple_params_end_0028
  6978 00004083 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6979 00004088 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6980 0000408C 48FFC6                  	inc rsi
  6981 0000408F EBEC                    	jmp .L_lambda_simple_params_loop_0028
  6982                                  .L_lambda_simple_params_end_0028:
  6983 00004091 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6984 00004094 4889C3                  	mov rbx, rax
  6985 00004097 58                      	pop rax
  6986 00004098 C60004                  	mov byte [rax], T_closure
  6987 0000409B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6988 0000409F 48C74009[AC400000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0028
  6989 000040A7 E923060000              	jmp .L_lambda_simple_end_0028
  6990                                  .L_lambda_simple_code_0028:	; lambda-simple body
  6991 000040AC 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6992 000040B2 740B                    	je .L_lambda_simple_arity_check_ok_0028
  6993 000040B4 FF742410                	push qword [rsp + 8 * 2]
  6994 000040B8 6A02                    	push 2
  6995 000040BA E983170100              	jmp L_error_incorrect_arity_simple
  6996                                  .L_lambda_simple_arity_check_ok_0028:
  6997 000040BF C8000000                	enter 0, 0
  6998                                  
  6999 000040C3 BF08000000              	mov rdi, 8
  7000 000040C8 E8BC170100              	call malloc
  7001 000040CD 488B5D20                	mov rbx, PARAM(0)	; param map1
  7002 000040D1 488918                  	mov [rax], rbx	; box map1
  7003 000040D4 48894520                	mov PARAM(0), rax	;replace param map1 with box
  7004 000040D8 48B8-                   	mov rax, sob_void
  7004 000040DA [0000000000000000] 
  7005                                  
  7006                                  
  7007 000040E2 BF08000000              	mov rdi, 8
  7008 000040E7 E89D170100              	call malloc
  7009 000040EC 488B5D28                	mov rbx, PARAM(1)	; param map-list
  7010 000040F0 488918                  	mov [rax], rbx	; box map-list
  7011 000040F3 48894528                	mov PARAM(1), rax	;replace param map-list with box
  7012 000040F7 48B8-                   	mov rax, sob_void
  7012 000040F9 [0000000000000000] 
  7013                                  
  7014 00004101 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7015 00004106 E87E170100              	call malloc
  7016 0000410B 50                      	push rax
  7017 0000410C BF10000000              	mov rdi, 8 * 2	; new rib
  7018 00004111 E873170100              	call malloc
  7019 00004116 50                      	push rax
  7020 00004117 BF10000000              	mov rdi, 8 * 2	; extended env
  7021 0000411C E868170100              	call malloc
  7022 00004121 488B7D10                	mov rdi, ENV
  7023 00004125 BE00000000              	mov rsi, 0
  7024 0000412A BA01000000              	mov rdx, 1
  7025                                  .L_lambda_simple_env_loop_0029:	; ext_env[i + 1] <-- env[i]
  7026 0000412F 4883FE01                	cmp rsi, 1
  7027 00004133 7410                    	je .L_lambda_simple_env_end_0029
  7028 00004135 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7029 00004139 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7030 0000413D 48FFC6                  	inc rsi
  7031 00004140 48FFC2                  	inc rdx
  7032 00004143 EBEA                    	jmp .L_lambda_simple_env_loop_0029
  7033                                  .L_lambda_simple_env_end_0029:
  7034 00004145 5B                      	pop rbx
  7035 00004146 BE00000000              	mov rsi, 0
  7036                                  .L_lambda_simple_params_loop_0029:	; copy params
  7037 0000414B 4883FE02                	cmp rsi, 2
  7038 0000414F 740E                    	je .L_lambda_simple_params_end_0029
  7039 00004151 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7040 00004156 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7041 0000415A 48FFC6                  	inc rsi
  7042 0000415D EBEC                    	jmp .L_lambda_simple_params_loop_0029
  7043                                  .L_lambda_simple_params_end_0029:
  7044 0000415F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7045 00004162 4889C3                  	mov rbx, rax
  7046 00004165 58                      	pop rax
  7047 00004166 C60004                  	mov byte [rax], T_closure
  7048 00004169 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7049 0000416D 48C74009[7A410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0029
  7050 00004175 E93B010000              	jmp .L_lambda_simple_end_0029
  7051                                  .L_lambda_simple_code_0029:	; lambda-simple body
  7052 0000417A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7053 00004180 740B                    	je .L_lambda_simple_arity_check_ok_0029
  7054 00004182 FF742410                	push qword [rsp + 8 * 2]
  7055 00004186 6A02                    	push 2
  7056 00004188 E9B5160100              	jmp L_error_incorrect_arity_simple
  7057                                  .L_lambda_simple_arity_check_ok_0029:
  7058 0000418D C8000000                	enter 0, 0
  7059 00004191 488B4528                	mov rax, PARAM(1)	; param s
  7060 00004195 50                      	push rax
  7061 00004196 6A01                    	push 1	; arg count
  7062 00004198 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
  7063 000041A0 803805                  	cmp byte [rax], T_undefined
  7064 000041A3 0F84B3150100            	je L_error_fvar_undefined
  7065 000041A9 803804                  	cmp byte [rax], T_closure
  7066 000041AC 0F852E160100            	jne L_error_non_closure
  7067 000041B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7068 000041B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7069                                  
  7070 000041B8 483D[02000000]          	cmp rax, sob_boolean_false
  7071 000041BE 740F                    	je .L_if_else_0007
  7072 000041C0 48B8-                   	mov rax, L_constants + 1
  7072 000041C2 [0100000000000000] 
  7073                                  
  7074 000041CA E9E2000000              	jmp .L_if_end_0007
  7075                                  
  7076                                  	.L_if_else_0007:
  7077                                  	; preparing a tail-call
  7078 000041CF 488B4528                	mov rax, PARAM(1)	; param s
  7079 000041D3 50                      	push rax
  7080 000041D4 6A01                    	push 1	; arg count
  7081 000041D6 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7082 000041DE 803805                  	cmp byte [rax], T_undefined
  7083 000041E1 0F8475150100            	je L_error_fvar_undefined
  7084 000041E7 803804                  	cmp byte [rax], T_closure
  7085 000041EA 0F85F0150100            	jne L_error_non_closure
  7086 000041F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7087 000041F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7088 000041F6 50                      	push rax
  7089 000041F7 488B4520                	mov rax, PARAM(0)	; param f
  7090 000041FB 50                      	push rax
  7091 000041FC 6A02                    	push 2	; arg count
  7092 000041FE 488B4510                	mov rax, ENV
  7093 00004202 488B00                  	mov rax, qword [rax + 8 * 0]
  7094 00004205 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7095 00004208 488B00                  	mov rax, qword [rax]
  7096 0000420B 803804                  	cmp byte [rax], T_closure
  7097 0000420E 0F85CC150100            	jne L_error_non_closure
  7098 00004214 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7099 00004217 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7100 0000421A 50                      	push rax
  7101 0000421B 488B4528                	mov rax, PARAM(1)	; param s
  7102 0000421F 50                      	push rax
  7103 00004220 6A01                    	push 1	; arg count
  7104 00004222 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  7105 0000422A 803805                  	cmp byte [rax], T_undefined
  7106 0000422D 0F8429150100            	je L_error_fvar_undefined
  7107 00004233 803804                  	cmp byte [rax], T_closure
  7108 00004236 0F85A4150100            	jne L_error_non_closure
  7109 0000423C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7110 0000423F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7111 00004242 50                      	push rax
  7112 00004243 6A01                    	push 1	; arg count
  7113 00004245 488B4520                	mov rax, PARAM(0)	; param f
  7114 00004249 803804                  	cmp byte [rax], T_closure
  7115 0000424C 0F858E150100            	jne L_error_non_closure
  7116 00004252 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7117 00004255 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7118 00004258 50                      	push rax
  7119 00004259 6A02                    	push 2	; arg count
  7120 0000425B 488B0425[8E0E0000]      	mov rax, qword [free_var_13]	; free var cons
  7121 00004263 803805                  	cmp byte [rax], T_undefined
  7122 00004266 0F84F0140100            	je L_error_fvar_undefined
  7123 0000426C 803804                  	cmp byte [rax], T_closure
  7124 0000426F 0F856B150100            	jne L_error_non_closure
  7125 00004275 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7126                                  
  7127                                  	; recycling the current frame
  7128 00004278 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7129 0000427B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7130 0000427E B906000000              	mov rcx, 2 + 4
  7131 00004283 488B5D18                	mov rbx, COUNT
  7132 00004287 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7133 0000428C 488D55F8                	lea rdx, [rbp - 8 * 1]
  7134                                  .L_tc_recycle_frame_loop_0029:
  7135 00004290 4883F900                	cmp rcx, 0
  7136 00004294 7413                    	je .L_tc_recycle_frame_done_0029
  7137 00004296 488B32                  	mov rsi, qword [rdx]
  7138 00004299 488933                  	mov qword [rbx], rsi
  7139 0000429C 48FFC9                  	dec rcx
  7140 0000429F 4883EB08                	sub rbx, 8 * 1
  7141 000042A3 4883EA08                	sub rdx, 8 * 1
  7142 000042A7 EBE7                    	jmp .L_tc_recycle_frame_loop_0029
  7143                                  .L_tc_recycle_frame_done_0029:
  7144 000042A9 488D6308                	lea rsp, [rbx + 8 * 1]
  7145 000042AD 5D                      	pop rbp	; the proc will restore it!
  7146 000042AE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7147                                  
  7148                                  	.L_if_end_0007:
  7149 000042B1 C9                      	leave
  7150 000042B2 C22000                  	ret AND_KILL_FRAME(2)
  7151                                  .L_lambda_simple_end_0029:	; new closure is in rax
  7152                                  
  7153 000042B5 50                      	push rax
  7154 000042B6 488B4520                	mov rax, PARAM(0)	; param map1
  7155                                  
  7156 000042BA 8F00                    	pop qword[rax]
  7157 000042BC 48B8-                   	mov rax, sob_void
  7157 000042BE [0000000000000000] 
  7158                                  
  7159 000042C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7160 000042CB E8B9150100              	call malloc
  7161 000042D0 50                      	push rax
  7162 000042D1 BF10000000              	mov rdi, 8 * 2	; new rib
  7163 000042D6 E8AE150100              	call malloc
  7164 000042DB 50                      	push rax
  7165 000042DC BF10000000              	mov rdi, 8 * 2	; extended env
  7166 000042E1 E8A3150100              	call malloc
  7167 000042E6 488B7D10                	mov rdi, ENV
  7168 000042EA BE00000000              	mov rsi, 0
  7169 000042EF BA01000000              	mov rdx, 1
  7170                                  .L_lambda_simple_env_loop_002a:	; ext_env[i + 1] <-- env[i]
  7171 000042F4 4883FE01                	cmp rsi, 1
  7172 000042F8 7410                    	je .L_lambda_simple_env_end_002a
  7173 000042FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7174 000042FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7175 00004302 48FFC6                  	inc rsi
  7176 00004305 48FFC2                  	inc rdx
  7177 00004308 EBEA                    	jmp .L_lambda_simple_env_loop_002a
  7178                                  .L_lambda_simple_env_end_002a:
  7179 0000430A 5B                      	pop rbx
  7180 0000430B BE00000000              	mov rsi, 0
  7181                                  .L_lambda_simple_params_loop_002a:	; copy params
  7182 00004310 4883FE02                	cmp rsi, 2
  7183 00004314 740E                    	je .L_lambda_simple_params_end_002a
  7184 00004316 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7185 0000431B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7186 0000431F 48FFC6                  	inc rsi
  7187 00004322 EBEC                    	jmp .L_lambda_simple_params_loop_002a
  7188                                  .L_lambda_simple_params_end_002a:
  7189 00004324 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7190 00004327 4889C3                  	mov rbx, rax
  7191 0000432A 58                      	pop rax
  7192 0000432B C60004                  	mov byte [rax], T_closure
  7193 0000432E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7194 00004332 48C74009[3F430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002a
  7195 0000433A E98D010000              	jmp .L_lambda_simple_end_002a
  7196                                  .L_lambda_simple_code_002a:	; lambda-simple body
  7197 0000433F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7198 00004345 740B                    	je .L_lambda_simple_arity_check_ok_002a
  7199 00004347 FF742410                	push qword [rsp + 8 * 2]
  7200 0000434B 6A02                    	push 2
  7201 0000434D E9F0140100              	jmp L_error_incorrect_arity_simple
  7202                                  .L_lambda_simple_arity_check_ok_002a:
  7203 00004352 C8000000                	enter 0, 0
  7204 00004356 488B4528                	mov rax, PARAM(1)	; param s
  7205 0000435A 50                      	push rax
  7206 0000435B 6A01                    	push 1	; arg count
  7207 0000435D 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  7208 00004365 803805                  	cmp byte [rax], T_undefined
  7209 00004368 0F84EE130100            	je L_error_fvar_undefined
  7210 0000436E 803804                  	cmp byte [rax], T_closure
  7211 00004371 0F8569140100            	jne L_error_non_closure
  7212 00004377 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7213 0000437A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7214 0000437D 50                      	push rax
  7215 0000437E 6A01                    	push 1	; arg count
  7216 00004380 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
  7217 00004388 803805                  	cmp byte [rax], T_undefined
  7218 0000438B 0F84CB130100            	je L_error_fvar_undefined
  7219 00004391 803804                  	cmp byte [rax], T_closure
  7220 00004394 0F8546140100            	jne L_error_non_closure
  7221 0000439A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7222 0000439D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7223                                  
  7224 000043A0 483D[02000000]          	cmp rax, sob_boolean_false
  7225 000043A6 740F                    	je .L_if_else_0008
  7226 000043A8 48B8-                   	mov rax, L_constants + 1
  7226 000043AA [0100000000000000] 
  7227                                  
  7228 000043B2 E911010000              	jmp .L_if_end_0008
  7229                                  
  7230                                  	.L_if_else_0008:
  7231                                  	; preparing a tail-call
  7232 000043B7 488B4528                	mov rax, PARAM(1)	; param s
  7233 000043BB 50                      	push rax
  7234 000043BC 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7235 000043C4 803805                  	cmp byte [rax], T_undefined
  7236 000043C7 0F848F130100            	je L_error_fvar_undefined
  7237 000043CD 50                      	push rax
  7238 000043CE 6A02                    	push 2	; arg count
  7239 000043D0 488B4510                	mov rax, ENV
  7240 000043D4 488B00                  	mov rax, qword [rax + 8 * 0]
  7241 000043D7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7242 000043DA 488B00                  	mov rax, qword [rax]
  7243 000043DD 803804                  	cmp byte [rax], T_closure
  7244 000043E0 0F85FA130100            	jne L_error_non_closure
  7245 000043E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7246 000043E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7247 000043EC 50                      	push rax
  7248 000043ED 488B4520                	mov rax, PARAM(0)	; param f
  7249 000043F1 50                      	push rax
  7250 000043F2 6A02                    	push 2	; arg count
  7251 000043F4 488B4510                	mov rax, ENV
  7252 000043F8 488B00                  	mov rax, qword [rax + 8 * 0]
  7253 000043FB 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7254 000043FF 488B00                  	mov rax, qword [rax]
  7255 00004402 803804                  	cmp byte [rax], T_closure
  7256 00004405 0F85D5130100            	jne L_error_non_closure
  7257 0000440B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7258 0000440E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7259 00004411 50                      	push rax
  7260 00004412 488B4528                	mov rax, PARAM(1)	; param s
  7261 00004416 50                      	push rax
  7262 00004417 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  7263 0000441F 803805                  	cmp byte [rax], T_undefined
  7264 00004422 0F8434130100            	je L_error_fvar_undefined
  7265 00004428 50                      	push rax
  7266 00004429 6A02                    	push 2	; arg count
  7267 0000442B 488B4510                	mov rax, ENV
  7268 0000442F 488B00                  	mov rax, qword [rax + 8 * 0]
  7269 00004432 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7270 00004435 488B00                  	mov rax, qword [rax]
  7271 00004438 803804                  	cmp byte [rax], T_closure
  7272 0000443B 0F859F130100            	jne L_error_non_closure
  7273 00004441 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7274 00004444 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7275 00004447 50                      	push rax
  7276 00004448 488B4520                	mov rax, PARAM(0)	; param f
  7277 0000444C 50                      	push rax
  7278 0000444D 6A02                    	push 2	; arg count
  7279 0000444F 488B0425[CC140000]      	mov rax, qword [free_var_107]	; free var apply
  7280 00004457 803805                  	cmp byte [rax], T_undefined
  7281 0000445A 0F84FC120100            	je L_error_fvar_undefined
  7282 00004460 803804                  	cmp byte [rax], T_closure
  7283 00004463 0F8577130100            	jne L_error_non_closure
  7284 00004469 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7285 0000446C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7286 0000446F 50                      	push rax
  7287 00004470 6A02                    	push 2	; arg count
  7288 00004472 488B0425[8E0E0000]      	mov rax, qword [free_var_13]	; free var cons
  7289 0000447A 803805                  	cmp byte [rax], T_undefined
  7290 0000447D 0F84D9120100            	je L_error_fvar_undefined
  7291 00004483 803804                  	cmp byte [rax], T_closure
  7292 00004486 0F8554130100            	jne L_error_non_closure
  7293 0000448C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7294                                  
  7295                                  	; recycling the current frame
  7296 0000448F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7297 00004492 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7298 00004495 B906000000              	mov rcx, 2 + 4
  7299 0000449A 488B5D18                	mov rbx, COUNT
  7300 0000449E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7301 000044A3 488D55F8                	lea rdx, [rbp - 8 * 1]
  7302                                  .L_tc_recycle_frame_loop_002a:
  7303 000044A7 4883F900                	cmp rcx, 0
  7304 000044AB 7413                    	je .L_tc_recycle_frame_done_002a
  7305 000044AD 488B32                  	mov rsi, qword [rdx]
  7306 000044B0 488933                  	mov qword [rbx], rsi
  7307 000044B3 48FFC9                  	dec rcx
  7308 000044B6 4883EB08                	sub rbx, 8 * 1
  7309 000044BA 4883EA08                	sub rdx, 8 * 1
  7310 000044BE EBE7                    	jmp .L_tc_recycle_frame_loop_002a
  7311                                  .L_tc_recycle_frame_done_002a:
  7312 000044C0 488D6308                	lea rsp, [rbx + 8 * 1]
  7313 000044C4 5D                      	pop rbp	; the proc will restore it!
  7314 000044C5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7315                                  
  7316                                  	.L_if_end_0008:
  7317 000044C8 C9                      	leave
  7318 000044C9 C22000                  	ret AND_KILL_FRAME(2)
  7319                                  .L_lambda_simple_end_002a:	; new closure is in rax
  7320                                  
  7321 000044CC 50                      	push rax
  7322 000044CD 488B4528                	mov rax, PARAM(1)	; param map-list
  7323                                  
  7324 000044D1 8F00                    	pop qword[rax]
  7325 000044D3 48B8-                   	mov rax, sob_void
  7325 000044D5 [0000000000000000] 
  7326                                  
  7327 000044DD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7328 000044E2 E8A2130100              	call malloc
  7329 000044E7 50                      	push rax
  7330 000044E8 BF10000000              	mov rdi, 8 * 2	; new rib
  7331 000044ED E897130100              	call malloc
  7332 000044F2 50                      	push rax
  7333 000044F3 BF10000000              	mov rdi, 8 * 2	; extended env
  7334 000044F8 E88C130100              	call malloc
  7335 000044FD 488B7D10                	mov rdi, ENV
  7336 00004501 BE00000000              	mov rsi, 0
  7337 00004506 BA01000000              	mov rdx, 1
  7338                                  .L_lambda_opt_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  7339 0000450B 4883FE01                	cmp rsi, 1
  7340 0000450F 7410                    	je .L_lambda_opt_env_end_0006
  7341 00004511 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7342 00004515 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7343 00004519 48FFC6                  	inc rsi
  7344 0000451C 48FFC2                  	inc rdx
  7345 0000451F EBEA                    	jmp .L_lambda_opt_env_loop_0006
  7346                                  .L_lambda_opt_env_end_0006:
  7347 00004521 5B                      	pop rbx
  7348 00004522 BE00000000              	mov rsi, 0
  7349                                  .L_lambda_opt_params_loop_0006:	; copy params
  7350 00004527 4883FE02                	cmp rsi, 2
  7351 0000452B 740E                    	je .L_lambda_opt_params_end_0006
  7352 0000452D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7353 00004532 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7354 00004536 48FFC6                  	inc rsi
  7355 00004539 EBEC                    	jmp .L_lambda_opt_params_loop_0006
  7356                                  .L_lambda_opt_params_end_0006:
  7357 0000453B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7358 0000453E 4889C3                  	mov rbx, rax
  7359 00004541 58                      	pop rax
  7360 00004542 C60004                  	mov byte [rax], T_closure
  7361 00004545 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7362 00004549 48C74009[56450000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0006
  7363 00004551 E975010000              	jmp .L_lambda_opt_end_0006
  7364                                  .L_lambda_opt_code_0006:	; lambda-simple body
  7365 00004556 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  7366 0000455C 740D                    	je .L_lambda_opt_arity_check_exact_0006 ;	 if equal, go to exact arity
  7367 0000455E 7F42                    	jg .L_lambda_opt_arity_check_more_0006 ;	 if greater than, go to arity more
  7368 00004560 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  7369 00004564 6A01                     	push 1
  7370 00004566 E9EB120100              	jmp L_error_incorrect_arity_opt
  7371                                  	.L_lambda_opt_arity_check_exact_0006:
  7372 0000456B 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  7373 00004570 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  7374 00004575 4883EC08                	sub rsp, 8
  7375 00004579 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  7376                                  	.L_lambda_opt_exact_shifting_loop_0006:
  7377 0000457D 488B5108                	mov rdx, [rcx + 8]
  7378 00004581 488911                  	mov [rcx], rdx
  7379 00004584 4883C108                	add rcx, 8
  7380 00004588 4839CB                  	cmp rbx, rcx
  7381 0000458B 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0006
  7382                                  	.L_lambda_opt_exact_shifting_loop_end_0006:
  7383 0000458D 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  7384 00004594 4883C001                	add rax, 1 ; 	arg count += 1
  7385 00004598 4889442410              	mov qword [rsp + 8 * 2], rax
  7386 0000459D E987000000              	jmp .L_lambda_opt_stack_adjusted_0006
  7387                                  	.L_lambda_opt_arity_check_more_0006:
  7388 000045A2 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  7388 000045A4 [0100000000000000] 
  7389 000045AC 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  7390 000045B2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0006
  7391                                  	.L_lambda_opt_stack_shrink_loop_0006:
  7392 000045B4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  7393 000045B9 E8CB120100              	call malloc ;	 allocated memory for the optional scheme list
  7394 000045BE C60021                  	mov byte[rax], T_pair ;	 set type pair
  7395 000045C1 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  7396 000045C5 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  7397 000045C8 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  7398 000045CD 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  7399 000045D2 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  7400 000045D6 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  7401                                  	.L_lambda_opt_more_shifting_loop_0006:
  7402 000045DB 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  7403 000045DE 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  7404 000045E2 4883EB08                	sub rbx, 8 
  7405 000045E6 4839DC                  	cmp rsp, rbx
  7406 000045E9 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0006
  7407                                  	.L_lambda_opt_more_shifting_loop_end_0006:
  7408 000045EB 4883C408                	add rsp, 8 ;	 update rsp
  7409 000045EF 488B5C2410              	mov rbx, [rsp + 8 * 2]
  7410 000045F4 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  7411 000045F8 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  7412 000045FD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7413 00004603 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0006
  7414                                  	.L_lambda_opt_stack_shrink_loop_exit_0006:
  7415 00004605 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  7416 0000460A 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  7417 0000460F BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  7418 00004614 E870120100              	call malloc ;	 allocated memory for the optional scheme list
  7419 00004619 C60021                  	mov byte[rax], T_pair ;	 set type pair
  7420 0000461C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  7421 00004620 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  7422 00004624 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  7423                                  	.L_lambda_opt_stack_adjusted_0006:
  7424 00004629 C8000000                	enter 0, 0
  7425 0000462D 488B4528                	mov rax, PARAM(1)	; param s
  7426 00004631 50                      	push rax
  7427 00004632 6A01                    	push 1	; arg count
  7428 00004634 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
  7429 0000463C 803805                  	cmp byte [rax], T_undefined
  7430 0000463F 0F8417110100            	je L_error_fvar_undefined
  7431 00004645 803804                  	cmp byte [rax], T_closure
  7432 00004648 0F8592110100            	jne L_error_non_closure
  7433 0000464E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7434 00004651 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7435                                  
  7436 00004654 483D[02000000]          	cmp rax, sob_boolean_false
  7437 0000465A 740C                    	je .L_if_else_0009
  7438 0000465C 48B8-                   	mov rax, L_constants + 1
  7438 0000465E [0100000000000000] 
  7439                                  
  7440 00004666 EB5F                    	jmp .L_if_end_0009
  7441                                  
  7442                                  	.L_if_else_0009:
  7443                                  	; preparing a tail-call
  7444 00004668 488B4528                	mov rax, PARAM(1)	; param s
  7445 0000466C 50                      	push rax
  7446 0000466D 488B4520                	mov rax, PARAM(0)	; param f
  7447 00004671 50                      	push rax
  7448 00004672 6A02                    	push 2	; arg count
  7449 00004674 488B4510                	mov rax, ENV
  7450 00004678 488B00                  	mov rax, qword [rax + 8 * 0]
  7451 0000467B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7452 0000467F 488B00                  	mov rax, qword [rax]
  7453 00004682 803804                  	cmp byte [rax], T_closure
  7454 00004685 0F8555110100            	jne L_error_non_closure
  7455 0000468B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7456                                  
  7457                                  	; recycling the current frame
  7458 0000468E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7459 00004691 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7460 00004694 B906000000              	mov rcx, 2 + 4
  7461 00004699 488B5D18                	mov rbx, COUNT
  7462 0000469D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7463 000046A2 488D55F8                	lea rdx, [rbp - 8 * 1]
  7464                                  .L_tc_recycle_frame_loop_002b:
  7465 000046A6 4883F900                	cmp rcx, 0
  7466 000046AA 7413                    	je .L_tc_recycle_frame_done_002b
  7467 000046AC 488B32                  	mov rsi, qword [rdx]
  7468 000046AF 488933                  	mov qword [rbx], rsi
  7469 000046B2 48FFC9                  	dec rcx
  7470 000046B5 4883EB08                	sub rbx, 8 * 1
  7471 000046B9 4883EA08                	sub rdx, 8 * 1
  7472 000046BD EBE7                    	jmp .L_tc_recycle_frame_loop_002b
  7473                                  .L_tc_recycle_frame_done_002b:
  7474 000046BF 488D6308                	lea rsp, [rbx + 8 * 1]
  7475 000046C3 5D                      	pop rbp	; the proc will restore it!
  7476 000046C4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7477                                  
  7478                                  	.L_if_end_0009:
  7479 000046C7 C9                      	leave
  7480 000046C8 C22000                  	ret AND_KILL_FRAME(2)
  7481                                  .L_lambda_opt_end_0006:	; new closure is in rax
  7482 000046CB C9                      	leave
  7483 000046CC C22000                  	ret AND_KILL_FRAME(2)
  7484                                  .L_lambda_simple_end_0028:	; new closure is in rax
  7485 000046CF 803804                  	cmp byte [rax], T_closure
  7486 000046D2 0F8508110100            	jne L_error_non_closure
  7487 000046D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7488 000046DB FF5009                  	call SOB_CLOSURE_CODE(rax)
  7489 000046DE 48890425[EE140000]      	mov qword [free_var_109], rax
  7490 000046E6 48B8-                   	mov rax, sob_void
  7490 000046E8 [0000000000000000] 
  7491                                  
  7492 000046F0 4889C7                  	mov rdi, rax
  7493 000046F3 E8A3120100              	call print_sexpr_if_not_void
  7494                                  
  7495 000046F8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7496 000046FD E887110100              	call malloc
  7497 00004702 50                      	push rax
  7498 00004703 BF00000000              	mov rdi, 8 * 0	; new rib
  7499 00004708 E87C110100              	call malloc
  7500 0000470D 50                      	push rax
  7501 0000470E BF08000000              	mov rdi, 8 * 1	; extended env
  7502 00004713 E871110100              	call malloc
  7503 00004718 488B7D10                	mov rdi, ENV
  7504 0000471C BE00000000              	mov rsi, 0
  7505 00004721 BA01000000              	mov rdx, 1
  7506                                  .L_lambda_simple_env_loop_002b:	; ext_env[i + 1] <-- env[i]
  7507 00004726 4883FE00                	cmp rsi, 0
  7508 0000472A 7410                    	je .L_lambda_simple_env_end_002b
  7509 0000472C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7510 00004730 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7511 00004734 48FFC6                  	inc rsi
  7512 00004737 48FFC2                  	inc rdx
  7513 0000473A EBEA                    	jmp .L_lambda_simple_env_loop_002b
  7514                                  .L_lambda_simple_env_end_002b:
  7515 0000473C 5B                      	pop rbx
  7516 0000473D BE00000000              	mov rsi, 0
  7517                                  .L_lambda_simple_params_loop_002b:	; copy params
  7518 00004742 4883FE00                	cmp rsi, 0
  7519 00004746 740E                    	je .L_lambda_simple_params_end_002b
  7520 00004748 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7521 0000474D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7522 00004751 48FFC6                  	inc rsi
  7523 00004754 EBEC                    	jmp .L_lambda_simple_params_loop_002b
  7524                                  .L_lambda_simple_params_end_002b:
  7525 00004756 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7526 00004759 4889C3                  	mov rbx, rax
  7527 0000475C 58                      	pop rax
  7528 0000475D C60004                  	mov byte [rax], T_closure
  7529 00004760 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7530 00004764 48C74009[71470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002b
  7531 0000476C E97A010000              	jmp .L_lambda_simple_end_002b
  7532                                  .L_lambda_simple_code_002b:	; lambda-simple body
  7533 00004771 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7534 00004777 740B                    	je .L_lambda_simple_arity_check_ok_002b
  7535 00004779 FF742410                	push qword [rsp + 8 * 2]
  7536 0000477D 6A01                    	push 1
  7537 0000477F E9BE100100              	jmp L_error_incorrect_arity_simple
  7538                                  .L_lambda_simple_arity_check_ok_002b:
  7539 00004784 C8000000                	enter 0, 0
  7540                                  	; preparing a tail-call
  7541 00004788 488B4520                	mov rax, PARAM(0)	; param s
  7542 0000478C 50                      	push rax
  7543 0000478D 48B8-                   	mov rax, L_constants + 1
  7543 0000478F [0100000000000000] 
  7544 00004797 50                      	push rax
  7545 00004798 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7546 0000479D E8E7100100              	call malloc
  7547 000047A2 50                      	push rax
  7548 000047A3 BF08000000              	mov rdi, 8 * 1	; new rib
  7549 000047A8 E8DC100100              	call malloc
  7550 000047AD 50                      	push rax
  7551 000047AE BF10000000              	mov rdi, 8 * 2	; extended env
  7552 000047B3 E8D1100100              	call malloc
  7553 000047B8 488B7D10                	mov rdi, ENV
  7554 000047BC BE00000000              	mov rsi, 0
  7555 000047C1 BA01000000              	mov rdx, 1
  7556                                  .L_lambda_simple_env_loop_002c:	; ext_env[i + 1] <-- env[i]
  7557 000047C6 4883FE01                	cmp rsi, 1
  7558 000047CA 7410                    	je .L_lambda_simple_env_end_002c
  7559 000047CC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7560 000047D0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7561 000047D4 48FFC6                  	inc rsi
  7562 000047D7 48FFC2                  	inc rdx
  7563 000047DA EBEA                    	jmp .L_lambda_simple_env_loop_002c
  7564                                  .L_lambda_simple_env_end_002c:
  7565 000047DC 5B                      	pop rbx
  7566 000047DD BE00000000              	mov rsi, 0
  7567                                  .L_lambda_simple_params_loop_002c:	; copy params
  7568 000047E2 4883FE01                	cmp rsi, 1
  7569 000047E6 740E                    	je .L_lambda_simple_params_end_002c
  7570 000047E8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7571 000047ED 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7572 000047F1 48FFC6                  	inc rsi
  7573 000047F4 EBEC                    	jmp .L_lambda_simple_params_loop_002c
  7574                                  .L_lambda_simple_params_end_002c:
  7575 000047F6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7576 000047F9 4889C3                  	mov rbx, rax
  7577 000047FC 58                      	pop rax
  7578 000047FD C60004                  	mov byte [rax], T_closure
  7579 00004800 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7580 00004804 48C74009[11480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002c
  7581 0000480C E97D000000              	jmp .L_lambda_simple_end_002c
  7582                                  .L_lambda_simple_code_002c:	; lambda-simple body
  7583 00004811 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7584 00004817 740B                    	je .L_lambda_simple_arity_check_ok_002c
  7585 00004819 FF742410                	push qword [rsp + 8 * 2]
  7586 0000481D 6A02                    	push 2
  7587 0000481F E91E100100              	jmp L_error_incorrect_arity_simple
  7588                                  .L_lambda_simple_arity_check_ok_002c:
  7589 00004824 C8000000                	enter 0, 0
  7590                                  	; preparing a tail-call
  7591 00004828 488B4520                	mov rax, PARAM(0)	; param r
  7592 0000482C 50                      	push rax
  7593 0000482D 488B4528                	mov rax, PARAM(1)	; param a
  7594 00004831 50                      	push rax
  7595 00004832 6A02                    	push 2	; arg count
  7596 00004834 488B0425[8E0E0000]      	mov rax, qword [free_var_13]	; free var cons
  7597 0000483C 803805                  	cmp byte [rax], T_undefined
  7598 0000483F 0F84170F0100            	je L_error_fvar_undefined
  7599 00004845 803804                  	cmp byte [rax], T_closure
  7600 00004848 0F85920F0100            	jne L_error_non_closure
  7601 0000484E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7602                                  
  7603                                  	; recycling the current frame
  7604 00004851 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7605 00004854 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7606 00004857 B906000000              	mov rcx, 2 + 4
  7607 0000485C 488B5D18                	mov rbx, COUNT
  7608 00004860 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7609 00004865 488D55F8                	lea rdx, [rbp - 8 * 1]
  7610                                  .L_tc_recycle_frame_loop_002c:
  7611 00004869 4883F900                	cmp rcx, 0
  7612 0000486D 7413                    	je .L_tc_recycle_frame_done_002c
  7613 0000486F 488B32                  	mov rsi, qword [rdx]
  7614 00004872 488933                  	mov qword [rbx], rsi
  7615 00004875 48FFC9                  	dec rcx
  7616 00004878 4883EB08                	sub rbx, 8 * 1
  7617 0000487C 4883EA08                	sub rdx, 8 * 1
  7618 00004880 EBE7                    	jmp .L_tc_recycle_frame_loop_002c
  7619                                  .L_tc_recycle_frame_done_002c:
  7620 00004882 488D6308                	lea rsp, [rbx + 8 * 1]
  7621 00004886 5D                      	pop rbp	; the proc will restore it!
  7622 00004887 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7623 0000488A C9                      	leave
  7624 0000488B C22000                  	ret AND_KILL_FRAME(2)
  7625                                  .L_lambda_simple_end_002c:	; new closure is in rax
  7626 0000488E 50                      	push rax
  7627 0000488F 6A03                    	push 3	; arg count
  7628 00004891 488B0425[21150000]      	mov rax, qword [free_var_112]	; free var fold-left
  7629 00004899 803805                  	cmp byte [rax], T_undefined
  7630 0000489C 0F84BA0E0100            	je L_error_fvar_undefined
  7631 000048A2 803804                  	cmp byte [rax], T_closure
  7632 000048A5 0F85350F0100            	jne L_error_non_closure
  7633 000048AB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7634                                  
  7635                                  	; recycling the current frame
  7636 000048AE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7637 000048B1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7638 000048B4 B907000000              	mov rcx, 3 + 4
  7639 000048B9 488B5D18                	mov rbx, COUNT
  7640 000048BD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7641 000048C2 488D55F8                	lea rdx, [rbp - 8 * 1]
  7642                                  .L_tc_recycle_frame_loop_002d:
  7643 000048C6 4883F900                	cmp rcx, 0
  7644 000048CA 7413                    	je .L_tc_recycle_frame_done_002d
  7645 000048CC 488B32                  	mov rsi, qword [rdx]
  7646 000048CF 488933                  	mov qword [rbx], rsi
  7647 000048D2 48FFC9                  	dec rcx
  7648 000048D5 4883EB08                	sub rbx, 8 * 1
  7649 000048D9 4883EA08                	sub rdx, 8 * 1
  7650 000048DD EBE7                    	jmp .L_tc_recycle_frame_loop_002d
  7651                                  .L_tc_recycle_frame_done_002d:
  7652 000048DF 488D6308                	lea rsp, [rbx + 8 * 1]
  7653 000048E3 5D                      	pop rbp	; the proc will restore it!
  7654 000048E4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7655 000048E7 C9                      	leave
  7656 000048E8 C21800                  	ret AND_KILL_FRAME(1)
  7657                                  .L_lambda_simple_end_002b:	; new closure is in rax
  7658 000048EB 48890425[10150000]      	mov qword [free_var_111], rax
  7659 000048F3 48B8-                   	mov rax, sob_void
  7659 000048F5 [0000000000000000] 
  7660                                  
  7661 000048FD 4889C7                  	mov rdi, rax
  7662 00004900 E896100100              	call print_sexpr_if_not_void
  7663                                  
  7664 00004905 48B8-                   	mov rax, L_constants + 1881
  7664 00004907 [5907000000000000] 
  7665 0000490F 50                      	push rax
  7666 00004910 48B8-                   	mov rax, L_constants + 1881
  7666 00004912 [5907000000000000] 
  7667 0000491A 50                      	push rax
  7668 0000491B 6A02                    	push 2	; arg count
  7669 0000491D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7670 00004922 E8620F0100              	call malloc
  7671 00004927 50                      	push rax
  7672 00004928 BF00000000              	mov rdi, 8 * 0	; new rib
  7673 0000492D E8570F0100              	call malloc
  7674 00004932 50                      	push rax
  7675 00004933 BF08000000              	mov rdi, 8 * 1	; extended env
  7676 00004938 E84C0F0100              	call malloc
  7677 0000493D 488B7D10                	mov rdi, ENV
  7678 00004941 BE00000000              	mov rsi, 0
  7679 00004946 BA01000000              	mov rdx, 1
  7680                                  .L_lambda_simple_env_loop_002d:	; ext_env[i + 1] <-- env[i]
  7681 0000494B 4883FE00                	cmp rsi, 0
  7682 0000494F 7410                    	je .L_lambda_simple_env_end_002d
  7683 00004951 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7684 00004955 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7685 00004959 48FFC6                  	inc rsi
  7686 0000495C 48FFC2                  	inc rdx
  7687 0000495F EBEA                    	jmp .L_lambda_simple_env_loop_002d
  7688                                  .L_lambda_simple_env_end_002d:
  7689 00004961 5B                      	pop rbx
  7690 00004962 BE00000000              	mov rsi, 0
  7691                                  .L_lambda_simple_params_loop_002d:	; copy params
  7692 00004967 4883FE00                	cmp rsi, 0
  7693 0000496B 740E                    	je .L_lambda_simple_params_end_002d
  7694 0000496D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7695 00004972 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7696 00004976 48FFC6                  	inc rsi
  7697 00004979 EBEC                    	jmp .L_lambda_simple_params_loop_002d
  7698                                  .L_lambda_simple_params_end_002d:
  7699 0000497B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7700 0000497E 4889C3                  	mov rbx, rax
  7701 00004981 58                      	pop rax
  7702 00004982 C60004                  	mov byte [rax], T_closure
  7703 00004985 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7704 00004989 48C74009[96490000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002d
  7705 00004991 E9DF050000              	jmp .L_lambda_simple_end_002d
  7706                                  .L_lambda_simple_code_002d:	; lambda-simple body
  7707 00004996 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7708 0000499C 740B                    	je .L_lambda_simple_arity_check_ok_002d
  7709 0000499E FF742410                	push qword [rsp + 8 * 2]
  7710 000049A2 6A02                    	push 2
  7711 000049A4 E9990E0100              	jmp L_error_incorrect_arity_simple
  7712                                  .L_lambda_simple_arity_check_ok_002d:
  7713 000049A9 C8000000                	enter 0, 0
  7714                                  
  7715 000049AD BF08000000              	mov rdi, 8
  7716 000049B2 E8D20E0100              	call malloc
  7717 000049B7 488B5D20                	mov rbx, PARAM(0)	; param run-1
  7718 000049BB 488918                  	mov [rax], rbx	; box run-1
  7719 000049BE 48894520                	mov PARAM(0), rax	;replace param run-1 with box
  7720 000049C2 48B8-                   	mov rax, sob_void
  7720 000049C4 [0000000000000000] 
  7721                                  
  7722                                  
  7723 000049CC BF08000000              	mov rdi, 8
  7724 000049D1 E8B30E0100              	call malloc
  7725 000049D6 488B5D28                	mov rbx, PARAM(1)	; param run-2
  7726 000049DA 488918                  	mov [rax], rbx	; box run-2
  7727 000049DD 48894528                	mov PARAM(1), rax	;replace param run-2 with box
  7728 000049E1 48B8-                   	mov rax, sob_void
  7728 000049E3 [0000000000000000] 
  7729                                  
  7730 000049EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7731 000049F0 E8940E0100              	call malloc
  7732 000049F5 50                      	push rax
  7733 000049F6 BF10000000              	mov rdi, 8 * 2	; new rib
  7734 000049FB E8890E0100              	call malloc
  7735 00004A00 50                      	push rax
  7736 00004A01 BF10000000              	mov rdi, 8 * 2	; extended env
  7737 00004A06 E87E0E0100              	call malloc
  7738 00004A0B 488B7D10                	mov rdi, ENV
  7739 00004A0F BE00000000              	mov rsi, 0
  7740 00004A14 BA01000000              	mov rdx, 1
  7741                                  .L_lambda_simple_env_loop_002e:	; ext_env[i + 1] <-- env[i]
  7742 00004A19 4883FE01                	cmp rsi, 1
  7743 00004A1D 7410                    	je .L_lambda_simple_env_end_002e
  7744 00004A1F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7745 00004A23 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7746 00004A27 48FFC6                  	inc rsi
  7747 00004A2A 48FFC2                  	inc rdx
  7748 00004A2D EBEA                    	jmp .L_lambda_simple_env_loop_002e
  7749                                  .L_lambda_simple_env_end_002e:
  7750 00004A2F 5B                      	pop rbx
  7751 00004A30 BE00000000              	mov rsi, 0
  7752                                  .L_lambda_simple_params_loop_002e:	; copy params
  7753 00004A35 4883FE02                	cmp rsi, 2
  7754 00004A39 740E                    	je .L_lambda_simple_params_end_002e
  7755 00004A3B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7756 00004A40 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7757 00004A44 48FFC6                  	inc rsi
  7758 00004A47 EBEC                    	jmp .L_lambda_simple_params_loop_002e
  7759                                  .L_lambda_simple_params_end_002e:
  7760 00004A49 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7761 00004A4C 4889C3                  	mov rbx, rax
  7762 00004A4F 58                      	pop rax
  7763 00004A50 C60004                  	mov byte [rax], T_closure
  7764 00004A53 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7765 00004A57 48C74009[644A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002e
  7766 00004A5F E91C010000              	jmp .L_lambda_simple_end_002e
  7767                                  .L_lambda_simple_code_002e:	; lambda-simple body
  7768 00004A64 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7769 00004A6A 740B                    	je .L_lambda_simple_arity_check_ok_002e
  7770 00004A6C FF742410                	push qword [rsp + 8 * 2]
  7771 00004A70 6A02                    	push 2
  7772 00004A72 E9CB0D0100              	jmp L_error_incorrect_arity_simple
  7773                                  .L_lambda_simple_arity_check_ok_002e:
  7774 00004A77 C8000000                	enter 0, 0
  7775 00004A7B 488B4528                	mov rax, PARAM(1)	; param sr
  7776 00004A7F 50                      	push rax
  7777 00004A80 6A01                    	push 1	; arg count
  7778 00004A82 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
  7779 00004A8A 803805                  	cmp byte [rax], T_undefined
  7780 00004A8D 0F84C90C0100            	je L_error_fvar_undefined
  7781 00004A93 803804                  	cmp byte [rax], T_closure
  7782 00004A96 0F85440D0100            	jne L_error_non_closure
  7783 00004A9C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7784 00004A9F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7785                                  
  7786 00004AA2 483D[02000000]          	cmp rax, sob_boolean_false
  7787 00004AA8 7409                    	je .L_if_else_000a
  7788 00004AAA 488B4520                	mov rax, PARAM(0)	; param s1
  7789                                  
  7790 00004AAE E9C9000000              	jmp .L_if_end_000a
  7791                                  
  7792                                  	.L_if_else_000a:
  7793                                  	; preparing a tail-call
  7794 00004AB3 488B4528                	mov rax, PARAM(1)	; param sr
  7795 00004AB7 50                      	push rax
  7796 00004AB8 6A01                    	push 1	; arg count
  7797 00004ABA 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7798 00004AC2 803805                  	cmp byte [rax], T_undefined
  7799 00004AC5 0F84910C0100            	je L_error_fvar_undefined
  7800 00004ACB 803804                  	cmp byte [rax], T_closure
  7801 00004ACE 0F850C0D0100            	jne L_error_non_closure
  7802 00004AD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7803 00004AD7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7804 00004ADA 50                      	push rax
  7805 00004ADB 488B4528                	mov rax, PARAM(1)	; param sr
  7806 00004ADF 50                      	push rax
  7807 00004AE0 6A01                    	push 1	; arg count
  7808 00004AE2 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  7809 00004AEA 803805                  	cmp byte [rax], T_undefined
  7810 00004AED 0F84690C0100            	je L_error_fvar_undefined
  7811 00004AF3 803804                  	cmp byte [rax], T_closure
  7812 00004AF6 0F85E40C0100            	jne L_error_non_closure
  7813 00004AFC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7814 00004AFF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7815 00004B02 50                      	push rax
  7816 00004B03 6A02                    	push 2	; arg count
  7817 00004B05 488B4510                	mov rax, ENV
  7818 00004B09 488B00                  	mov rax, qword [rax + 8 * 0]
  7819 00004B0C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  7820 00004B0F 488B00                  	mov rax, qword [rax]
  7821 00004B12 803804                  	cmp byte [rax], T_closure
  7822 00004B15 0F85C50C0100            	jne L_error_non_closure
  7823 00004B1B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7824 00004B1E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7825 00004B21 50                      	push rax
  7826 00004B22 488B4520                	mov rax, PARAM(0)	; param s1
  7827 00004B26 50                      	push rax
  7828 00004B27 6A02                    	push 2	; arg count
  7829 00004B29 488B4510                	mov rax, ENV
  7830 00004B2D 488B00                  	mov rax, qword [rax + 8 * 0]
  7831 00004B30 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  7832 00004B34 488B00                  	mov rax, qword [rax]
  7833 00004B37 803804                  	cmp byte [rax], T_closure
  7834 00004B3A 0F85A00C0100            	jne L_error_non_closure
  7835 00004B40 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7836                                  
  7837                                  	; recycling the current frame
  7838 00004B43 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7839 00004B46 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7840 00004B49 B906000000              	mov rcx, 2 + 4
  7841 00004B4E 488B5D18                	mov rbx, COUNT
  7842 00004B52 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7843 00004B57 488D55F8                	lea rdx, [rbp - 8 * 1]
  7844                                  .L_tc_recycle_frame_loop_002e:
  7845 00004B5B 4883F900                	cmp rcx, 0
  7846 00004B5F 7413                    	je .L_tc_recycle_frame_done_002e
  7847 00004B61 488B32                  	mov rsi, qword [rdx]
  7848 00004B64 488933                  	mov qword [rbx], rsi
  7849 00004B67 48FFC9                  	dec rcx
  7850 00004B6A 4883EB08                	sub rbx, 8 * 1
  7851 00004B6E 4883EA08                	sub rdx, 8 * 1
  7852 00004B72 EBE7                    	jmp .L_tc_recycle_frame_loop_002e
  7853                                  .L_tc_recycle_frame_done_002e:
  7854 00004B74 488D6308                	lea rsp, [rbx + 8 * 1]
  7855 00004B78 5D                      	pop rbp	; the proc will restore it!
  7856 00004B79 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7857                                  
  7858                                  	.L_if_end_000a:
  7859 00004B7C C9                      	leave
  7860 00004B7D C22000                  	ret AND_KILL_FRAME(2)
  7861                                  .L_lambda_simple_end_002e:	; new closure is in rax
  7862                                  
  7863 00004B80 50                      	push rax
  7864 00004B81 488B4520                	mov rax, PARAM(0)	; param run-1
  7865                                  
  7866 00004B85 8F00                    	pop qword[rax]
  7867 00004B87 48B8-                   	mov rax, sob_void
  7867 00004B89 [0000000000000000] 
  7868                                  
  7869 00004B91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7870 00004B96 E8EE0C0100              	call malloc
  7871 00004B9B 50                      	push rax
  7872 00004B9C BF10000000              	mov rdi, 8 * 2	; new rib
  7873 00004BA1 E8E30C0100              	call malloc
  7874 00004BA6 50                      	push rax
  7875 00004BA7 BF10000000              	mov rdi, 8 * 2	; extended env
  7876 00004BAC E8D80C0100              	call malloc
  7877 00004BB1 488B7D10                	mov rdi, ENV
  7878 00004BB5 BE00000000              	mov rsi, 0
  7879 00004BBA BA01000000              	mov rdx, 1
  7880                                  .L_lambda_simple_env_loop_002f:	; ext_env[i + 1] <-- env[i]
  7881 00004BBF 4883FE01                	cmp rsi, 1
  7882 00004BC3 7410                    	je .L_lambda_simple_env_end_002f
  7883 00004BC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7884 00004BC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7885 00004BCD 48FFC6                  	inc rsi
  7886 00004BD0 48FFC2                  	inc rdx
  7887 00004BD3 EBEA                    	jmp .L_lambda_simple_env_loop_002f
  7888                                  .L_lambda_simple_env_end_002f:
  7889 00004BD5 5B                      	pop rbx
  7890 00004BD6 BE00000000              	mov rsi, 0
  7891                                  .L_lambda_simple_params_loop_002f:	; copy params
  7892 00004BDB 4883FE02                	cmp rsi, 2
  7893 00004BDF 740E                    	je .L_lambda_simple_params_end_002f
  7894 00004BE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7895 00004BE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7896 00004BEA 48FFC6                  	inc rsi
  7897 00004BED EBEC                    	jmp .L_lambda_simple_params_loop_002f
  7898                                  .L_lambda_simple_params_end_002f:
  7899 00004BEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7900 00004BF2 4889C3                  	mov rbx, rax
  7901 00004BF5 58                      	pop rax
  7902 00004BF6 C60004                  	mov byte [rax], T_closure
  7903 00004BF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7904 00004BFD 48C74009[0A4C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002f
  7905 00004C05 E920010000              	jmp .L_lambda_simple_end_002f
  7906                                  .L_lambda_simple_code_002f:	; lambda-simple body
  7907 00004C0A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7908 00004C10 740B                    	je .L_lambda_simple_arity_check_ok_002f
  7909 00004C12 FF742410                	push qword [rsp + 8 * 2]
  7910 00004C16 6A02                    	push 2
  7911 00004C18 E9250C0100              	jmp L_error_incorrect_arity_simple
  7912                                  .L_lambda_simple_arity_check_ok_002f:
  7913 00004C1D C8000000                	enter 0, 0
  7914 00004C21 488B4520                	mov rax, PARAM(0)	; param s1
  7915 00004C25 50                      	push rax
  7916 00004C26 6A01                    	push 1	; arg count
  7917 00004C28 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
  7918 00004C30 803805                  	cmp byte [rax], T_undefined
  7919 00004C33 0F84230B0100            	je L_error_fvar_undefined
  7920 00004C39 803804                  	cmp byte [rax], T_closure
  7921 00004C3C 0F859E0B0100            	jne L_error_non_closure
  7922 00004C42 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7923 00004C45 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7924                                  
  7925 00004C48 483D[02000000]          	cmp rax, sob_boolean_false
  7926 00004C4E 7409                    	je .L_if_else_000b
  7927 00004C50 488B4528                	mov rax, PARAM(1)	; param s2
  7928                                  
  7929 00004C54 E9CD000000              	jmp .L_if_end_000b
  7930                                  
  7931                                  	.L_if_else_000b:
  7932                                  	; preparing a tail-call
  7933 00004C59 488B4528                	mov rax, PARAM(1)	; param s2
  7934 00004C5D 50                      	push rax
  7935 00004C5E 488B4520                	mov rax, PARAM(0)	; param s1
  7936 00004C62 50                      	push rax
  7937 00004C63 6A01                    	push 1	; arg count
  7938 00004C65 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7939 00004C6D 803805                  	cmp byte [rax], T_undefined
  7940 00004C70 0F84E60A0100            	je L_error_fvar_undefined
  7941 00004C76 803804                  	cmp byte [rax], T_closure
  7942 00004C79 0F85610B0100            	jne L_error_non_closure
  7943 00004C7F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7944 00004C82 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7945 00004C85 50                      	push rax
  7946 00004C86 6A02                    	push 2	; arg count
  7947 00004C88 488B4510                	mov rax, ENV
  7948 00004C8C 488B00                  	mov rax, qword [rax + 8 * 0]
  7949 00004C8F 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  7950 00004C93 488B00                  	mov rax, qword [rax]
  7951 00004C96 803804                  	cmp byte [rax], T_closure
  7952 00004C99 0F85410B0100            	jne L_error_non_closure
  7953 00004C9F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7954 00004CA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7955 00004CA5 50                      	push rax
  7956 00004CA6 488B4520                	mov rax, PARAM(0)	; param s1
  7957 00004CAA 50                      	push rax
  7958 00004CAB 6A01                    	push 1	; arg count
  7959 00004CAD 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  7960 00004CB5 803805                  	cmp byte [rax], T_undefined
  7961 00004CB8 0F849E0A0100            	je L_error_fvar_undefined
  7962 00004CBE 803804                  	cmp byte [rax], T_closure
  7963 00004CC1 0F85190B0100            	jne L_error_non_closure
  7964 00004CC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7965 00004CCA FF5009                  	call SOB_CLOSURE_CODE(rax)
  7966 00004CCD 50                      	push rax
  7967 00004CCE 6A02                    	push 2	; arg count
  7968 00004CD0 488B0425[8E0E0000]      	mov rax, qword [free_var_13]	; free var cons
  7969 00004CD8 803805                  	cmp byte [rax], T_undefined
  7970 00004CDB 0F847B0A0100            	je L_error_fvar_undefined
  7971 00004CE1 803804                  	cmp byte [rax], T_closure
  7972 00004CE4 0F85F60A0100            	jne L_error_non_closure
  7973 00004CEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7974                                  
  7975                                  	; recycling the current frame
  7976 00004CED FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7977 00004CF0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7978 00004CF3 B906000000              	mov rcx, 2 + 4
  7979 00004CF8 488B5D18                	mov rbx, COUNT
  7980 00004CFC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7981 00004D01 488D55F8                	lea rdx, [rbp - 8 * 1]
  7982                                  .L_tc_recycle_frame_loop_002f:
  7983 00004D05 4883F900                	cmp rcx, 0
  7984 00004D09 7413                    	je .L_tc_recycle_frame_done_002f
  7985 00004D0B 488B32                  	mov rsi, qword [rdx]
  7986 00004D0E 488933                  	mov qword [rbx], rsi
  7987 00004D11 48FFC9                  	dec rcx
  7988 00004D14 4883EB08                	sub rbx, 8 * 1
  7989 00004D18 4883EA08                	sub rdx, 8 * 1
  7990 00004D1C EBE7                    	jmp .L_tc_recycle_frame_loop_002f
  7991                                  .L_tc_recycle_frame_done_002f:
  7992 00004D1E 488D6308                	lea rsp, [rbx + 8 * 1]
  7993 00004D22 5D                      	pop rbp	; the proc will restore it!
  7994 00004D23 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7995                                  
  7996                                  	.L_if_end_000b:
  7997 00004D26 C9                      	leave
  7998 00004D27 C22000                  	ret AND_KILL_FRAME(2)
  7999                                  .L_lambda_simple_end_002f:	; new closure is in rax
  8000                                  
  8001 00004D2A 50                      	push rax
  8002 00004D2B 488B4528                	mov rax, PARAM(1)	; param run-2
  8003                                  
  8004 00004D2F 8F00                    	pop qword[rax]
  8005 00004D31 48B8-                   	mov rax, sob_void
  8005 00004D33 [0000000000000000] 
  8006                                  
  8007 00004D3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8008 00004D40 E8440B0100              	call malloc
  8009 00004D45 50                      	push rax
  8010 00004D46 BF10000000              	mov rdi, 8 * 2	; new rib
  8011 00004D4B E8390B0100              	call malloc
  8012 00004D50 50                      	push rax
  8013 00004D51 BF10000000              	mov rdi, 8 * 2	; extended env
  8014 00004D56 E82E0B0100              	call malloc
  8015 00004D5B 488B7D10                	mov rdi, ENV
  8016 00004D5F BE00000000              	mov rsi, 0
  8017 00004D64 BA01000000              	mov rdx, 1
  8018                                  .L_lambda_opt_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  8019 00004D69 4883FE01                	cmp rsi, 1
  8020 00004D6D 7410                    	je .L_lambda_opt_env_end_0007
  8021 00004D6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8022 00004D73 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8023 00004D77 48FFC6                  	inc rsi
  8024 00004D7A 48FFC2                  	inc rdx
  8025 00004D7D EBEA                    	jmp .L_lambda_opt_env_loop_0007
  8026                                  .L_lambda_opt_env_end_0007:
  8027 00004D7F 5B                      	pop rbx
  8028 00004D80 BE00000000              	mov rsi, 0
  8029                                  .L_lambda_opt_params_loop_0007:	; copy params
  8030 00004D85 4883FE02                	cmp rsi, 2
  8031 00004D89 740E                    	je .L_lambda_opt_params_end_0007
  8032 00004D8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8033 00004D90 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8034 00004D94 48FFC6                  	inc rsi
  8035 00004D97 EBEC                    	jmp .L_lambda_opt_params_loop_0007
  8036                                  .L_lambda_opt_params_end_0007:
  8037 00004D99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8038 00004D9C 4889C3                  	mov rbx, rax
  8039 00004D9F 58                      	pop rax
  8040 00004DA0 C60004                  	mov byte [rax], T_closure
  8041 00004DA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8042 00004DA7 48C74009[B44D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0007
  8043 00004DAF E9BD010000              	jmp .L_lambda_opt_end_0007
  8044                                  .L_lambda_opt_code_0007:	; lambda-simple body
  8045 00004DB4 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
  8046 00004DBA 740D                    	je .L_lambda_opt_arity_check_exact_0007 ;	 if equal, go to exact arity
  8047 00004DBC 7F42                    	jg .L_lambda_opt_arity_check_more_0007 ;	 if greater than, go to arity more
  8048 00004DBE FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  8049 00004DC2 6A00                     	push 0
  8050 00004DC4 E98D0A0100              	jmp L_error_incorrect_arity_opt
  8051                                  	.L_lambda_opt_arity_check_exact_0007:
  8052 00004DC9 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  8053 00004DCE 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  8054 00004DD3 4883EC08                	sub rsp, 8
  8055 00004DD7 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  8056                                  	.L_lambda_opt_exact_shifting_loop_0007:
  8057 00004DDB 488B5108                	mov rdx, [rcx + 8]
  8058 00004DDF 488911                  	mov [rcx], rdx
  8059 00004DE2 4883C108                	add rcx, 8
  8060 00004DE6 4839CB                  	cmp rbx, rcx
  8061 00004DE9 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0007
  8062                                  	.L_lambda_opt_exact_shifting_loop_end_0007:
  8063 00004DEB 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  8064 00004DF2 4883C001                	add rax, 1 ; 	arg count += 1
  8065 00004DF6 4889442410              	mov qword [rsp + 8 * 2], rax
  8066 00004DFB E987000000              	jmp .L_lambda_opt_stack_adjusted_0007
  8067                                  	.L_lambda_opt_arity_check_more_0007:
  8068 00004E00 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  8068 00004E02 [0100000000000000] 
  8069 00004E0A 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
  8070 00004E10 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0007
  8071                                  	.L_lambda_opt_stack_shrink_loop_0007:
  8072 00004E12 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8073 00004E17 E86D0A0100              	call malloc ;	 allocated memory for the optional scheme list
  8074 00004E1C C60021                  	mov byte[rax], T_pair ;	 set type pair
  8075 00004E1F 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8076 00004E23 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  8077 00004E26 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  8078 00004E2B 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  8079 00004E30 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  8080 00004E34 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  8081                                  	.L_lambda_opt_more_shifting_loop_0007:
  8082 00004E39 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  8083 00004E3C 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  8084 00004E40 4883EB08                	sub rbx, 8 
  8085 00004E44 4839DC                  	cmp rsp, rbx
  8086 00004E47 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0007
  8087                                  	.L_lambda_opt_more_shifting_loop_end_0007:
  8088 00004E49 4883C408                	add rsp, 8 ;	 update rsp
  8089 00004E4D 488B5C2410              	mov rbx, [rsp + 8 * 2]
  8090 00004E52 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  8091 00004E56 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  8092 00004E5B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8093 00004E61 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0007
  8094                                  	.L_lambda_opt_stack_shrink_loop_exit_0007:
  8095 00004E63 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  8096 00004E68 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  8097 00004E6D BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8098 00004E72 E8120A0100              	call malloc ;	 allocated memory for the optional scheme list
  8099 00004E77 C60021                  	mov byte[rax], T_pair ;	 set type pair
  8100 00004E7A 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8101 00004E7E 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  8102 00004E82 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  8103                                  	.L_lambda_opt_stack_adjusted_0007:
  8104 00004E87 C8000000                	enter 0, 0
  8105 00004E8B 488B4520                	mov rax, PARAM(0)	; param s
  8106 00004E8F 50                      	push rax
  8107 00004E90 6A01                    	push 1	; arg count
  8108 00004E92 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
  8109 00004E9A 803805                  	cmp byte [rax], T_undefined
  8110 00004E9D 0F84B9080100            	je L_error_fvar_undefined
  8111 00004EA3 803804                  	cmp byte [rax], T_closure
  8112 00004EA6 0F8534090100            	jne L_error_non_closure
  8113 00004EAC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8114 00004EAF FF5009                  	call SOB_CLOSURE_CODE(rax)
  8115                                  
  8116 00004EB2 483D[02000000]          	cmp rax, sob_boolean_false
  8117 00004EB8 740F                    	je .L_if_else_000c
  8118 00004EBA 48B8-                   	mov rax, L_constants + 1
  8118 00004EBC [0100000000000000] 
  8119                                  
  8120 00004EC4 E9A4000000              	jmp .L_if_end_000c
  8121                                  
  8122                                  	.L_if_else_000c:
  8123                                  	; preparing a tail-call
  8124 00004EC9 488B4520                	mov rax, PARAM(0)	; param s
  8125 00004ECD 50                      	push rax
  8126 00004ECE 6A01                    	push 1	; arg count
  8127 00004ED0 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  8128 00004ED8 803805                  	cmp byte [rax], T_undefined
  8129 00004EDB 0F847B080100            	je L_error_fvar_undefined
  8130 00004EE1 803804                  	cmp byte [rax], T_closure
  8131 00004EE4 0F85F6080100            	jne L_error_non_closure
  8132 00004EEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8133 00004EED FF5009                  	call SOB_CLOSURE_CODE(rax)
  8134 00004EF0 50                      	push rax
  8135 00004EF1 488B4520                	mov rax, PARAM(0)	; param s
  8136 00004EF5 50                      	push rax
  8137 00004EF6 6A01                    	push 1	; arg count
  8138 00004EF8 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  8139 00004F00 803805                  	cmp byte [rax], T_undefined
  8140 00004F03 0F8453080100            	je L_error_fvar_undefined
  8141 00004F09 803804                  	cmp byte [rax], T_closure
  8142 00004F0C 0F85CE080100            	jne L_error_non_closure
  8143 00004F12 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8144 00004F15 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8145 00004F18 50                      	push rax
  8146 00004F19 6A02                    	push 2	; arg count
  8147 00004F1B 488B4510                	mov rax, ENV
  8148 00004F1F 488B00                  	mov rax, qword [rax + 8 * 0]
  8149 00004F22 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8150 00004F25 488B00                  	mov rax, qword [rax]
  8151 00004F28 803804                  	cmp byte [rax], T_closure
  8152 00004F2B 0F85AF080100            	jne L_error_non_closure
  8153 00004F31 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8154                                  
  8155                                  	; recycling the current frame
  8156 00004F34 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8157 00004F37 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8158 00004F3A B906000000              	mov rcx, 2 + 4
  8159 00004F3F 488B5D18                	mov rbx, COUNT
  8160 00004F43 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8161 00004F48 488D55F8                	lea rdx, [rbp - 8 * 1]
  8162                                  .L_tc_recycle_frame_loop_0030:
  8163 00004F4C 4883F900                	cmp rcx, 0
  8164 00004F50 7413                    	je .L_tc_recycle_frame_done_0030
  8165 00004F52 488B32                  	mov rsi, qword [rdx]
  8166 00004F55 488933                  	mov qword [rbx], rsi
  8167 00004F58 48FFC9                  	dec rcx
  8168 00004F5B 4883EB08                	sub rbx, 8 * 1
  8169 00004F5F 4883EA08                	sub rdx, 8 * 1
  8170 00004F63 EBE7                    	jmp .L_tc_recycle_frame_loop_0030
  8171                                  .L_tc_recycle_frame_done_0030:
  8172 00004F65 488D6308                	lea rsp, [rbx + 8 * 1]
  8173 00004F69 5D                      	pop rbp	; the proc will restore it!
  8174 00004F6A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8175                                  
  8176                                  	.L_if_end_000c:
  8177 00004F6D C9                      	leave
  8178 00004F6E C21800                  	ret AND_KILL_FRAME(1)
  8179                                  .L_lambda_opt_end_0007:	; new closure is in rax
  8180 00004F71 C9                      	leave
  8181 00004F72 C22000                  	ret AND_KILL_FRAME(2)
  8182                                  .L_lambda_simple_end_002d:	; new closure is in rax
  8183 00004F75 803804                  	cmp byte [rax], T_closure
  8184 00004F78 0F8562080100            	jne L_error_non_closure
  8185 00004F7E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8186 00004F81 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8187 00004F84 48890425[32150000]      	mov qword [free_var_113], rax
  8188 00004F8C 48B8-                   	mov rax, sob_void
  8188 00004F8E [0000000000000000] 
  8189                                  
  8190 00004F96 4889C7                  	mov rdi, rax
  8191 00004F99 E8FD090100              	call print_sexpr_if_not_void
  8192                                  
  8193 00004F9E 48B8-                   	mov rax, L_constants + 1881
  8193 00004FA0 [5907000000000000] 
  8194 00004FA8 50                      	push rax
  8195 00004FA9 6A01                    	push 1	; arg count
  8196 00004FAB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8197 00004FB0 E8D4080100              	call malloc
  8198 00004FB5 50                      	push rax
  8199 00004FB6 BF00000000              	mov rdi, 8 * 0	; new rib
  8200 00004FBB E8C9080100              	call malloc
  8201 00004FC0 50                      	push rax
  8202 00004FC1 BF08000000              	mov rdi, 8 * 1	; extended env
  8203 00004FC6 E8BE080100              	call malloc
  8204 00004FCB 488B7D10                	mov rdi, ENV
  8205 00004FCF BE00000000              	mov rsi, 0
  8206 00004FD4 BA01000000              	mov rdx, 1
  8207                                  .L_lambda_simple_env_loop_0030:	; ext_env[i + 1] <-- env[i]
  8208 00004FD9 4883FE00                	cmp rsi, 0
  8209 00004FDD 7410                    	je .L_lambda_simple_env_end_0030
  8210 00004FDF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8211 00004FE3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8212 00004FE7 48FFC6                  	inc rsi
  8213 00004FEA 48FFC2                  	inc rdx
  8214 00004FED EBEA                    	jmp .L_lambda_simple_env_loop_0030
  8215                                  .L_lambda_simple_env_end_0030:
  8216 00004FEF 5B                      	pop rbx
  8217 00004FF0 BE00000000              	mov rsi, 0
  8218                                  .L_lambda_simple_params_loop_0030:	; copy params
  8219 00004FF5 4883FE00                	cmp rsi, 0
  8220 00004FF9 740E                    	je .L_lambda_simple_params_end_0030
  8221 00004FFB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8222 00005000 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8223 00005004 48FFC6                  	inc rsi
  8224 00005007 EBEC                    	jmp .L_lambda_simple_params_loop_0030
  8225                                  .L_lambda_simple_params_end_0030:
  8226 00005009 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8227 0000500C 4889C3                  	mov rbx, rax
  8228 0000500F 58                      	pop rax
  8229 00005010 C60004                  	mov byte [rax], T_closure
  8230 00005013 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8231 00005017 48C74009[24500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0030
  8232 0000501F E9DA030000              	jmp .L_lambda_simple_end_0030
  8233                                  .L_lambda_simple_code_0030:	; lambda-simple body
  8234 00005024 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8235 0000502A 740B                    	je .L_lambda_simple_arity_check_ok_0030
  8236 0000502C FF742410                	push qword [rsp + 8 * 2]
  8237 00005030 6A01                    	push 1
  8238 00005032 E90B080100              	jmp L_error_incorrect_arity_simple
  8239                                  .L_lambda_simple_arity_check_ok_0030:
  8240 00005037 C8000000                	enter 0, 0
  8241                                  
  8242 0000503B BF08000000              	mov rdi, 8
  8243 00005040 E844080100              	call malloc
  8244 00005045 488B5D20                	mov rbx, PARAM(0)	; param run
  8245 00005049 488918                  	mov [rax], rbx	; box run
  8246 0000504C 48894520                	mov PARAM(0), rax	;replace param run with box
  8247 00005050 48B8-                   	mov rax, sob_void
  8247 00005052 [0000000000000000] 
  8248                                  
  8249 0000505A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8250 0000505F E825080100              	call malloc
  8251 00005064 50                      	push rax
  8252 00005065 BF08000000              	mov rdi, 8 * 1	; new rib
  8253 0000506A E81A080100              	call malloc
  8254 0000506F 50                      	push rax
  8255 00005070 BF10000000              	mov rdi, 8 * 2	; extended env
  8256 00005075 E80F080100              	call malloc
  8257 0000507A 488B7D10                	mov rdi, ENV
  8258 0000507E BE00000000              	mov rsi, 0
  8259 00005083 BA01000000              	mov rdx, 1
  8260                                  .L_lambda_simple_env_loop_0031:	; ext_env[i + 1] <-- env[i]
  8261 00005088 4883FE01                	cmp rsi, 1
  8262 0000508C 7410                    	je .L_lambda_simple_env_end_0031
  8263 0000508E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8264 00005092 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8265 00005096 48FFC6                  	inc rsi
  8266 00005099 48FFC2                  	inc rdx
  8267 0000509C EBEA                    	jmp .L_lambda_simple_env_loop_0031
  8268                                  .L_lambda_simple_env_end_0031:
  8269 0000509E 5B                      	pop rbx
  8270 0000509F BE00000000              	mov rsi, 0
  8271                                  .L_lambda_simple_params_loop_0031:	; copy params
  8272 000050A4 4883FE01                	cmp rsi, 1
  8273 000050A8 740E                    	je .L_lambda_simple_params_end_0031
  8274 000050AA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8275 000050AF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8276 000050B3 48FFC6                  	inc rsi
  8277 000050B6 EBEC                    	jmp .L_lambda_simple_params_loop_0031
  8278                                  .L_lambda_simple_params_end_0031:
  8279 000050B8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8280 000050BB 4889C3                  	mov rbx, rax
  8281 000050BE 58                      	pop rax
  8282 000050BF C60004                  	mov byte [rax], T_closure
  8283 000050C2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8284 000050C6 48C74009[D3500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0031
  8285 000050CE E95F010000              	jmp .L_lambda_simple_end_0031
  8286                                  .L_lambda_simple_code_0031:	; lambda-simple body
  8287 000050D3 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8288 000050D9 740B                    	je .L_lambda_simple_arity_check_ok_0031
  8289 000050DB FF742410                	push qword [rsp + 8 * 2]
  8290 000050DF 6A03                    	push 3
  8291 000050E1 E95C070100              	jmp L_error_incorrect_arity_simple
  8292                                  .L_lambda_simple_arity_check_ok_0031:
  8293 000050E6 C8000000                	enter 0, 0
  8294 000050EA 488B4530                	mov rax, PARAM(2)	; param ss
  8295 000050EE 50                      	push rax
  8296 000050EF 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
  8297 000050F7 803805                  	cmp byte [rax], T_undefined
  8298 000050FA 0F845C060100            	je L_error_fvar_undefined
  8299 00005100 50                      	push rax
  8300 00005101 6A02                    	push 2	; arg count
  8301 00005103 488B0425[DD140000]      	mov rax, qword [free_var_108]	; free var ormap
  8302 0000510B 803805                  	cmp byte [rax], T_undefined
  8303 0000510E 0F8448060100            	je L_error_fvar_undefined
  8304 00005114 803804                  	cmp byte [rax], T_closure
  8305 00005117 0F85C3060100            	jne L_error_non_closure
  8306 0000511D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8307 00005120 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8308                                  
  8309 00005123 483D[02000000]          	cmp rax, sob_boolean_false
  8310 00005129 7409                    	je .L_if_else_000d
  8311 0000512B 488B4528                	mov rax, PARAM(1)	; param unit
  8312                                  
  8313 0000512F E9FA000000              	jmp .L_if_end_000d
  8314                                  
  8315                                  	.L_if_else_000d:
  8316                                  	; preparing a tail-call
  8317 00005134 488B4530                	mov rax, PARAM(2)	; param ss
  8318 00005138 50                      	push rax
  8319 00005139 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  8320 00005141 803805                  	cmp byte [rax], T_undefined
  8321 00005144 0F8412060100            	je L_error_fvar_undefined
  8322 0000514A 50                      	push rax
  8323 0000514B 6A02                    	push 2	; arg count
  8324 0000514D 488B0425[EE140000]      	mov rax, qword [free_var_109]	; free var map
  8325 00005155 803805                  	cmp byte [rax], T_undefined
  8326 00005158 0F84FE050100            	je L_error_fvar_undefined
  8327 0000515E 803804                  	cmp byte [rax], T_closure
  8328 00005161 0F8579060100            	jne L_error_non_closure
  8329 00005167 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8330 0000516A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8331 0000516D 50                      	push rax
  8332 0000516E 488B4530                	mov rax, PARAM(2)	; param ss
  8333 00005172 50                      	push rax
  8334 00005173 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  8335 0000517B 803805                  	cmp byte [rax], T_undefined
  8336 0000517E 0F84D8050100            	je L_error_fvar_undefined
  8337 00005184 50                      	push rax
  8338 00005185 6A02                    	push 2	; arg count
  8339 00005187 488B0425[EE140000]      	mov rax, qword [free_var_109]	; free var map
  8340 0000518F 803805                  	cmp byte [rax], T_undefined
  8341 00005192 0F84C4050100            	je L_error_fvar_undefined
  8342 00005198 803804                  	cmp byte [rax], T_closure
  8343 0000519B 0F853F060100            	jne L_error_non_closure
  8344 000051A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8345 000051A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8346 000051A7 50                      	push rax
  8347 000051A8 488B4528                	mov rax, PARAM(1)	; param unit
  8348 000051AC 50                      	push rax
  8349 000051AD 488B4520                	mov rax, PARAM(0)	; param f
  8350 000051B1 50                      	push rax
  8351 000051B2 6A03                    	push 3	; arg count
  8352 000051B4 488B0425[CC140000]      	mov rax, qword [free_var_107]	; free var apply
  8353 000051BC 803805                  	cmp byte [rax], T_undefined
  8354 000051BF 0F8497050100            	je L_error_fvar_undefined
  8355 000051C5 803804                  	cmp byte [rax], T_closure
  8356 000051C8 0F8512060100            	jne L_error_non_closure
  8357 000051CE FF7001                  	push SOB_CLOSURE_ENV(rax)
  8358 000051D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8359 000051D4 50                      	push rax
  8360 000051D5 488B4520                	mov rax, PARAM(0)	; param f
  8361 000051D9 50                      	push rax
  8362 000051DA 6A03                    	push 3	; arg count
  8363 000051DC 488B4510                	mov rax, ENV
  8364 000051E0 488B00                  	mov rax, qword [rax + 8 * 0]
  8365 000051E3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8366 000051E6 488B00                  	mov rax, qword [rax]
  8367 000051E9 803804                  	cmp byte [rax], T_closure
  8368 000051EC 0F85EE050100            	jne L_error_non_closure
  8369 000051F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8370                                  
  8371                                  	; recycling the current frame
  8372 000051F5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8373 000051F8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8374 000051FB B907000000              	mov rcx, 3 + 4
  8375 00005200 488B5D18                	mov rbx, COUNT
  8376 00005204 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8377 00005209 488D55F8                	lea rdx, [rbp - 8 * 1]
  8378                                  .L_tc_recycle_frame_loop_0031:
  8379 0000520D 4883F900                	cmp rcx, 0
  8380 00005211 7413                    	je .L_tc_recycle_frame_done_0031
  8381 00005213 488B32                  	mov rsi, qword [rdx]
  8382 00005216 488933                  	mov qword [rbx], rsi
  8383 00005219 48FFC9                  	dec rcx
  8384 0000521C 4883EB08                	sub rbx, 8 * 1
  8385 00005220 4883EA08                	sub rdx, 8 * 1
  8386 00005224 EBE7                    	jmp .L_tc_recycle_frame_loop_0031
  8387                                  .L_tc_recycle_frame_done_0031:
  8388 00005226 488D6308                	lea rsp, [rbx + 8 * 1]
  8389 0000522A 5D                      	pop rbp	; the proc will restore it!
  8390 0000522B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8391                                  
  8392                                  	.L_if_end_000d:
  8393 0000522E C9                      	leave
  8394 0000522F C22800                  	ret AND_KILL_FRAME(3)
  8395                                  .L_lambda_simple_end_0031:	; new closure is in rax
  8396                                  
  8397 00005232 50                      	push rax
  8398 00005233 488B4520                	mov rax, PARAM(0)	; param run
  8399                                  
  8400 00005237 8F00                    	pop qword[rax]
  8401 00005239 48B8-                   	mov rax, sob_void
  8401 0000523B [0000000000000000] 
  8402                                  
  8403 00005243 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8404 00005248 E83C060100              	call malloc
  8405 0000524D 50                      	push rax
  8406 0000524E BF08000000              	mov rdi, 8 * 1	; new rib
  8407 00005253 E831060100              	call malloc
  8408 00005258 50                      	push rax
  8409 00005259 BF10000000              	mov rdi, 8 * 2	; extended env
  8410 0000525E E826060100              	call malloc
  8411 00005263 488B7D10                	mov rdi, ENV
  8412 00005267 BE00000000              	mov rsi, 0
  8413 0000526C BA01000000              	mov rdx, 1
  8414                                  .L_lambda_opt_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  8415 00005271 4883FE01                	cmp rsi, 1
  8416 00005275 7410                    	je .L_lambda_opt_env_end_0008
  8417 00005277 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8418 0000527B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8419 0000527F 48FFC6                  	inc rsi
  8420 00005282 48FFC2                  	inc rdx
  8421 00005285 EBEA                    	jmp .L_lambda_opt_env_loop_0008
  8422                                  .L_lambda_opt_env_end_0008:
  8423 00005287 5B                      	pop rbx
  8424 00005288 BE00000000              	mov rsi, 0
  8425                                  .L_lambda_opt_params_loop_0008:	; copy params
  8426 0000528D 4883FE01                	cmp rsi, 1
  8427 00005291 740E                    	je .L_lambda_opt_params_end_0008
  8428 00005293 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8429 00005298 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8430 0000529C 48FFC6                  	inc rsi
  8431 0000529F EBEC                    	jmp .L_lambda_opt_params_loop_0008
  8432                                  .L_lambda_opt_params_end_0008:
  8433 000052A1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8434 000052A4 4889C3                  	mov rbx, rax
  8435 000052A7 58                      	pop rax
  8436 000052A8 C60004                  	mov byte [rax], T_closure
  8437 000052AB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8438 000052AF 48C74009[BC520000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0008
  8439 000052B7 E93E010000              	jmp .L_lambda_opt_end_0008
  8440                                  .L_lambda_opt_code_0008:	; lambda-simple body
  8441 000052BC 48837C241002            	cmp qword [rsp + 8 * 2], 2 ;	 check num of args
  8442 000052C2 740D                    	je .L_lambda_opt_arity_check_exact_0008 ;	 if equal, go to exact arity
  8443 000052C4 7F42                    	jg .L_lambda_opt_arity_check_more_0008 ;	 if greater than, go to arity more
  8444 000052C6 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  8445 000052CA 6A02                     	push 2
  8446 000052CC E985050100              	jmp L_error_incorrect_arity_opt
  8447                                  	.L_lambda_opt_arity_check_exact_0008:
  8448 000052D1 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  8449 000052D6 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  8450 000052DB 4883EC08                	sub rsp, 8
  8451 000052DF 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  8452                                  	.L_lambda_opt_exact_shifting_loop_0008:
  8453 000052E3 488B5108                	mov rdx, [rcx + 8]
  8454 000052E7 488911                  	mov [rcx], rdx
  8455 000052EA 4883C108                	add rcx, 8
  8456 000052EE 4839CB                  	cmp rbx, rcx
  8457 000052F1 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0008
  8458                                  	.L_lambda_opt_exact_shifting_loop_end_0008:
  8459 000052F3 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  8460 000052FA 4883C001                	add rax, 1 ; 	arg count += 1
  8461 000052FE 4889442410              	mov qword [rsp + 8 * 2], rax
  8462 00005303 E987000000              	jmp .L_lambda_opt_stack_adjusted_0008
  8463                                  	.L_lambda_opt_arity_check_more_0008:
  8464 00005308 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  8464 0000530A [0100000000000000] 
  8465 00005312 48837C241003            	cmp qword [rsp + 8 * 2], 3;	 compare count to params
  8466 00005318 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0008
  8467                                  	.L_lambda_opt_stack_shrink_loop_0008:
  8468 0000531A BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8469 0000531F E865050100              	call malloc ;	 allocated memory for the optional scheme list
  8470 00005324 C60021                  	mov byte[rax], T_pair ;	 set type pair
  8471 00005327 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8472 0000532B 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  8473 0000532E 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  8474 00005333 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  8475 00005338 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  8476 0000533C 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  8477                                  	.L_lambda_opt_more_shifting_loop_0008:
  8478 00005341 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  8479 00005344 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  8480 00005348 4883EB08                	sub rbx, 8 
  8481 0000534C 4839DC                  	cmp rsp, rbx
  8482 0000534F 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0008
  8483                                  	.L_lambda_opt_more_shifting_loop_end_0008:
  8484 00005351 4883C408                	add rsp, 8 ;	 update rsp
  8485 00005355 488B5C2410              	mov rbx, [rsp + 8 * 2]
  8486 0000535A 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  8487 0000535E 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  8488 00005363 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8489 00005369 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0008
  8490                                  	.L_lambda_opt_stack_shrink_loop_exit_0008:
  8491 0000536B 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  8492 00005370 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  8493 00005375 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8494 0000537A E80A050100              	call malloc ;	 allocated memory for the optional scheme list
  8495 0000537F C60021                  	mov byte[rax], T_pair ;	 set type pair
  8496 00005382 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8497 00005386 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  8498 0000538A 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  8499                                  	.L_lambda_opt_stack_adjusted_0008:
  8500 0000538F C8000000                	enter 0, 0
  8501                                  	; preparing a tail-call
  8502 00005393 488B4530                	mov rax, PARAM(2)	; param ss
  8503 00005397 50                      	push rax
  8504 00005398 488B4528                	mov rax, PARAM(1)	; param unit
  8505 0000539C 50                      	push rax
  8506 0000539D 488B4520                	mov rax, PARAM(0)	; param f
  8507 000053A1 50                      	push rax
  8508 000053A2 6A03                    	push 3	; arg count
  8509 000053A4 488B4510                	mov rax, ENV
  8510 000053A8 488B00                  	mov rax, qword [rax + 8 * 0]
  8511 000053AB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8512 000053AE 488B00                  	mov rax, qword [rax]
  8513 000053B1 803804                  	cmp byte [rax], T_closure
  8514 000053B4 0F8526040100            	jne L_error_non_closure
  8515 000053BA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8516                                  
  8517                                  	; recycling the current frame
  8518 000053BD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8519 000053C0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8520 000053C3 B907000000              	mov rcx, 3 + 4
  8521 000053C8 488B5D18                	mov rbx, COUNT
  8522 000053CC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8523 000053D1 488D55F8                	lea rdx, [rbp - 8 * 1]
  8524                                  .L_tc_recycle_frame_loop_0032:
  8525 000053D5 4883F900                	cmp rcx, 0
  8526 000053D9 7413                    	je .L_tc_recycle_frame_done_0032
  8527 000053DB 488B32                  	mov rsi, qword [rdx]
  8528 000053DE 488933                  	mov qword [rbx], rsi
  8529 000053E1 48FFC9                  	dec rcx
  8530 000053E4 4883EB08                	sub rbx, 8 * 1
  8531 000053E8 4883EA08                	sub rdx, 8 * 1
  8532 000053EC EBE7                    	jmp .L_tc_recycle_frame_loop_0032
  8533                                  .L_tc_recycle_frame_done_0032:
  8534 000053EE 488D6308                	lea rsp, [rbx + 8 * 1]
  8535 000053F2 5D                      	pop rbp	; the proc will restore it!
  8536 000053F3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8537 000053F6 C9                      	leave
  8538 000053F7 C22800                  	ret AND_KILL_FRAME(3)
  8539                                  .L_lambda_opt_end_0008:	; new closure is in rax
  8540 000053FA C9                      	leave
  8541 000053FB C21800                  	ret AND_KILL_FRAME(1)
  8542                                  .L_lambda_simple_end_0030:	; new closure is in rax
  8543 000053FE 803804                  	cmp byte [rax], T_closure
  8544 00005401 0F85D9030100            	jne L_error_non_closure
  8545 00005407 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8546 0000540A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8547 0000540D 48890425[21150000]      	mov qword [free_var_112], rax
  8548 00005415 48B8-                   	mov rax, sob_void
  8548 00005417 [0000000000000000] 
  8549                                  
  8550 0000541F 4889C7                  	mov rdi, rax
  8551 00005422 E874050100              	call print_sexpr_if_not_void
  8552                                  
  8553 00005427 48B8-                   	mov rax, L_constants + 1881
  8553 00005429 [5907000000000000] 
  8554 00005431 50                      	push rax
  8555 00005432 6A01                    	push 1	; arg count
  8556 00005434 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8557 00005439 E84B040100              	call malloc
  8558 0000543E 50                      	push rax
  8559 0000543F BF00000000              	mov rdi, 8 * 0	; new rib
  8560 00005444 E840040100              	call malloc
  8561 00005449 50                      	push rax
  8562 0000544A BF08000000              	mov rdi, 8 * 1	; extended env
  8563 0000544F E835040100              	call malloc
  8564 00005454 488B7D10                	mov rdi, ENV
  8565 00005458 BE00000000              	mov rsi, 0
  8566 0000545D BA01000000              	mov rdx, 1
  8567                                  .L_lambda_simple_env_loop_0032:	; ext_env[i + 1] <-- env[i]
  8568 00005462 4883FE00                	cmp rsi, 0
  8569 00005466 7410                    	je .L_lambda_simple_env_end_0032
  8570 00005468 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8571 0000546C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8572 00005470 48FFC6                  	inc rsi
  8573 00005473 48FFC2                  	inc rdx
  8574 00005476 EBEA                    	jmp .L_lambda_simple_env_loop_0032
  8575                                  .L_lambda_simple_env_end_0032:
  8576 00005478 5B                      	pop rbx
  8577 00005479 BE00000000              	mov rsi, 0
  8578                                  .L_lambda_simple_params_loop_0032:	; copy params
  8579 0000547E 4883FE00                	cmp rsi, 0
  8580 00005482 740E                    	je .L_lambda_simple_params_end_0032
  8581 00005484 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8582 00005489 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8583 0000548D 48FFC6                  	inc rsi
  8584 00005490 EBEC                    	jmp .L_lambda_simple_params_loop_0032
  8585                                  .L_lambda_simple_params_end_0032:
  8586 00005492 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8587 00005495 4889C3                  	mov rbx, rax
  8588 00005498 58                      	pop rax
  8589 00005499 C60004                  	mov byte [rax], T_closure
  8590 0000549C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8591 000054A0 48C74009[AD540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0032
  8592 000054A8 E92B040000              	jmp .L_lambda_simple_end_0032
  8593                                  .L_lambda_simple_code_0032:	; lambda-simple body
  8594 000054AD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8595 000054B3 740B                    	je .L_lambda_simple_arity_check_ok_0032
  8596 000054B5 FF742410                	push qword [rsp + 8 * 2]
  8597 000054B9 6A01                    	push 1
  8598 000054BB E982030100              	jmp L_error_incorrect_arity_simple
  8599                                  .L_lambda_simple_arity_check_ok_0032:
  8600 000054C0 C8000000                	enter 0, 0
  8601                                  
  8602 000054C4 BF08000000              	mov rdi, 8
  8603 000054C9 E8BB030100              	call malloc
  8604 000054CE 488B5D20                	mov rbx, PARAM(0)	; param run
  8605 000054D2 488918                  	mov [rax], rbx	; box run
  8606 000054D5 48894520                	mov PARAM(0), rax	;replace param run with box
  8607 000054D9 48B8-                   	mov rax, sob_void
  8607 000054DB [0000000000000000] 
  8608                                  
  8609 000054E3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8610 000054E8 E89C030100              	call malloc
  8611 000054ED 50                      	push rax
  8612 000054EE BF08000000              	mov rdi, 8 * 1	; new rib
  8613 000054F3 E891030100              	call malloc
  8614 000054F8 50                      	push rax
  8615 000054F9 BF10000000              	mov rdi, 8 * 2	; extended env
  8616 000054FE E886030100              	call malloc
  8617 00005503 488B7D10                	mov rdi, ENV
  8618 00005507 BE00000000              	mov rsi, 0
  8619 0000550C BA01000000              	mov rdx, 1
  8620                                  .L_lambda_simple_env_loop_0033:	; ext_env[i + 1] <-- env[i]
  8621 00005511 4883FE01                	cmp rsi, 1
  8622 00005515 7410                    	je .L_lambda_simple_env_end_0033
  8623 00005517 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8624 0000551B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8625 0000551F 48FFC6                  	inc rsi
  8626 00005522 48FFC2                  	inc rdx
  8627 00005525 EBEA                    	jmp .L_lambda_simple_env_loop_0033
  8628                                  .L_lambda_simple_env_end_0033:
  8629 00005527 5B                      	pop rbx
  8630 00005528 BE00000000              	mov rsi, 0
  8631                                  .L_lambda_simple_params_loop_0033:	; copy params
  8632 0000552D 4883FE01                	cmp rsi, 1
  8633 00005531 740E                    	je .L_lambda_simple_params_end_0033
  8634 00005533 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8635 00005538 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8636 0000553C 48FFC6                  	inc rsi
  8637 0000553F EBEC                    	jmp .L_lambda_simple_params_loop_0033
  8638                                  .L_lambda_simple_params_end_0033:
  8639 00005541 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8640 00005544 4889C3                  	mov rbx, rax
  8641 00005547 58                      	pop rax
  8642 00005548 C60004                  	mov byte [rax], T_closure
  8643 0000554B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8644 0000554F 48C74009[5C550000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0033
  8645 00005557 E9B0010000              	jmp .L_lambda_simple_end_0033
  8646                                  .L_lambda_simple_code_0033:	; lambda-simple body
  8647 0000555C 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8648 00005562 740B                    	je .L_lambda_simple_arity_check_ok_0033
  8649 00005564 FF742410                	push qword [rsp + 8 * 2]
  8650 00005568 6A03                    	push 3
  8651 0000556A E9D3020100              	jmp L_error_incorrect_arity_simple
  8652                                  .L_lambda_simple_arity_check_ok_0033:
  8653 0000556F C8000000                	enter 0, 0
  8654 00005573 488B4530                	mov rax, PARAM(2)	; param ss
  8655 00005577 50                      	push rax
  8656 00005578 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
  8657 00005580 803805                  	cmp byte [rax], T_undefined
  8658 00005583 0F84D3010100            	je L_error_fvar_undefined
  8659 00005589 50                      	push rax
  8660 0000558A 6A02                    	push 2	; arg count
  8661 0000558C 488B0425[DD140000]      	mov rax, qword [free_var_108]	; free var ormap
  8662 00005594 803805                  	cmp byte [rax], T_undefined
  8663 00005597 0F84BF010100            	je L_error_fvar_undefined
  8664 0000559D 803804                  	cmp byte [rax], T_closure
  8665 000055A0 0F853A020100            	jne L_error_non_closure
  8666 000055A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8667 000055A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8668                                  
  8669 000055AC 483D[02000000]          	cmp rax, sob_boolean_false
  8670 000055B2 7409                    	je .L_if_else_000e
  8671 000055B4 488B4528                	mov rax, PARAM(1)	; param unit
  8672                                  
  8673 000055B8 E94B010000              	jmp .L_if_end_000e
  8674                                  
  8675                                  	.L_if_else_000e:
  8676                                  	; preparing a tail-call
  8677 000055BD 48B8-                   	mov rax, L_constants + 1
  8677 000055BF [0100000000000000] 
  8678 000055C7 50                      	push rax
  8679 000055C8 488B4530                	mov rax, PARAM(2)	; param ss
  8680 000055CC 50                      	push rax
  8681 000055CD 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
  8682 000055D5 803805                  	cmp byte [rax], T_undefined
  8683 000055D8 0F847E010100            	je L_error_fvar_undefined
  8684 000055DE 50                      	push rax
  8685 000055DF 6A02                    	push 2	; arg count
  8686 000055E1 488B0425[EE140000]      	mov rax, qword [free_var_109]	; free var map
  8687 000055E9 803805                  	cmp byte [rax], T_undefined
  8688 000055EC 0F846A010100            	je L_error_fvar_undefined
  8689 000055F2 803804                  	cmp byte [rax], T_closure
  8690 000055F5 0F85E5010100            	jne L_error_non_closure
  8691 000055FB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8692 000055FE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8693 00005601 50                      	push rax
  8694 00005602 488B4528                	mov rax, PARAM(1)	; param unit
  8695 00005606 50                      	push rax
  8696 00005607 488B4520                	mov rax, PARAM(0)	; param f
  8697 0000560B 50                      	push rax
  8698 0000560C 6A03                    	push 3	; arg count
  8699 0000560E 488B4510                	mov rax, ENV
  8700 00005612 488B00                  	mov rax, qword [rax + 8 * 0]
  8701 00005615 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8702 00005618 488B00                  	mov rax, qword [rax]
  8703 0000561B 803804                  	cmp byte [rax], T_closure
  8704 0000561E 0F85BC010100            	jne L_error_non_closure
  8705 00005624 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8706 00005627 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8707 0000562A 50                      	push rax
  8708 0000562B 6A02                    	push 2	; arg count
  8709 0000562D 488B0425[8E0E0000]      	mov rax, qword [free_var_13]	; free var cons
  8710 00005635 803805                  	cmp byte [rax], T_undefined
  8711 00005638 0F841E010100            	je L_error_fvar_undefined
  8712 0000563E 803804                  	cmp byte [rax], T_closure
  8713 00005641 0F8599010100            	jne L_error_non_closure
  8714 00005647 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8715 0000564A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8716 0000564D 50                      	push rax
  8717 0000564E 488B4530                	mov rax, PARAM(2)	; param ss
  8718 00005652 50                      	push rax
  8719 00005653 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
  8720 0000565B 803805                  	cmp byte [rax], T_undefined
  8721 0000565E 0F84F8000100            	je L_error_fvar_undefined
  8722 00005664 50                      	push rax
  8723 00005665 6A02                    	push 2	; arg count
  8724 00005667 488B0425[EE140000]      	mov rax, qword [free_var_109]	; free var map
  8725 0000566F 803805                  	cmp byte [rax], T_undefined
  8726 00005672 0F84E4000100            	je L_error_fvar_undefined
  8727 00005678 803804                  	cmp byte [rax], T_closure
  8728 0000567B 0F855F010100            	jne L_error_non_closure
  8729 00005681 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8730 00005684 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8731 00005687 50                      	push rax
  8732 00005688 6A02                    	push 2	; arg count
  8733 0000568A 488B0425[32150000]      	mov rax, qword [free_var_113]	; free var append
  8734 00005692 803805                  	cmp byte [rax], T_undefined
  8735 00005695 0F84C1000100            	je L_error_fvar_undefined
  8736 0000569B 803804                  	cmp byte [rax], T_closure
  8737 0000569E 0F853C010100            	jne L_error_non_closure
  8738 000056A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8739 000056A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8740 000056AA 50                      	push rax
  8741 000056AB 488B4520                	mov rax, PARAM(0)	; param f
  8742 000056AF 50                      	push rax
  8743 000056B0 6A02                    	push 2	; arg count
  8744 000056B2 488B0425[CC140000]      	mov rax, qword [free_var_107]	; free var apply
  8745 000056BA 803805                  	cmp byte [rax], T_undefined
  8746 000056BD 0F8499000100            	je L_error_fvar_undefined
  8747 000056C3 803804                  	cmp byte [rax], T_closure
  8748 000056C6 0F8514010100            	jne L_error_non_closure
  8749 000056CC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8750                                  
  8751                                  	; recycling the current frame
  8752 000056CF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8753 000056D2 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8754 000056D5 B906000000              	mov rcx, 2 + 4
  8755 000056DA 488B5D18                	mov rbx, COUNT
  8756 000056DE 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8757 000056E3 488D55F8                	lea rdx, [rbp - 8 * 1]
  8758                                  .L_tc_recycle_frame_loop_0033:
  8759 000056E7 4883F900                	cmp rcx, 0
  8760 000056EB 7413                    	je .L_tc_recycle_frame_done_0033
  8761 000056ED 488B32                  	mov rsi, qword [rdx]
  8762 000056F0 488933                  	mov qword [rbx], rsi
  8763 000056F3 48FFC9                  	dec rcx
  8764 000056F6 4883EB08                	sub rbx, 8 * 1
  8765 000056FA 4883EA08                	sub rdx, 8 * 1
  8766 000056FE EBE7                    	jmp .L_tc_recycle_frame_loop_0033
  8767                                  .L_tc_recycle_frame_done_0033:
  8768 00005700 488D6308                	lea rsp, [rbx + 8 * 1]
  8769 00005704 5D                      	pop rbp	; the proc will restore it!
  8770 00005705 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8771                                  
  8772                                  	.L_if_end_000e:
  8773 00005708 C9                      	leave
  8774 00005709 C22800                  	ret AND_KILL_FRAME(3)
  8775                                  .L_lambda_simple_end_0033:	; new closure is in rax
  8776                                  
  8777 0000570C 50                      	push rax
  8778 0000570D 488B4520                	mov rax, PARAM(0)	; param run
  8779                                  
  8780 00005711 8F00                    	pop qword[rax]
  8781 00005713 48B8-                   	mov rax, sob_void
  8781 00005715 [0000000000000000] 
  8782                                  
  8783 0000571D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8784 00005722 E862010100              	call malloc
  8785 00005727 50                      	push rax
  8786 00005728 BF08000000              	mov rdi, 8 * 1	; new rib
  8787 0000572D E857010100              	call malloc
  8788 00005732 50                      	push rax
  8789 00005733 BF10000000              	mov rdi, 8 * 2	; extended env
  8790 00005738 E84C010100              	call malloc
  8791 0000573D 488B7D10                	mov rdi, ENV
  8792 00005741 BE00000000              	mov rsi, 0
  8793 00005746 BA01000000              	mov rdx, 1
  8794                                  .L_lambda_opt_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  8795 0000574B 4883FE01                	cmp rsi, 1
  8796 0000574F 7410                    	je .L_lambda_opt_env_end_0009
  8797 00005751 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8798 00005755 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8799 00005759 48FFC6                  	inc rsi
  8800 0000575C 48FFC2                  	inc rdx
  8801 0000575F EBEA                    	jmp .L_lambda_opt_env_loop_0009
  8802                                  .L_lambda_opt_env_end_0009:
  8803 00005761 5B                      	pop rbx
  8804 00005762 BE00000000              	mov rsi, 0
  8805                                  .L_lambda_opt_params_loop_0009:	; copy params
  8806 00005767 4883FE01                	cmp rsi, 1
  8807 0000576B 740E                    	je .L_lambda_opt_params_end_0009
  8808 0000576D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8809 00005772 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8810 00005776 48FFC6                  	inc rsi
  8811 00005779 EBEC                    	jmp .L_lambda_opt_params_loop_0009
  8812                                  .L_lambda_opt_params_end_0009:
  8813 0000577B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8814 0000577E 4889C3                  	mov rbx, rax
  8815 00005781 58                      	pop rax
  8816 00005782 C60004                  	mov byte [rax], T_closure
  8817 00005785 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8818 00005789 48C74009[96570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0009
  8819 00005791 E93E010000              	jmp .L_lambda_opt_end_0009
  8820                                  .L_lambda_opt_code_0009:	; lambda-simple body
  8821 00005796 48837C241002            	cmp qword [rsp + 8 * 2], 2 ;	 check num of args
  8822 0000579C 740D                    	je .L_lambda_opt_arity_check_exact_0009 ;	 if equal, go to exact arity
  8823 0000579E 7F42                    	jg .L_lambda_opt_arity_check_more_0009 ;	 if greater than, go to arity more
  8824 000057A0 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  8825 000057A4 6A02                     	push 2
  8826 000057A6 E9AB000100              	jmp L_error_incorrect_arity_opt
  8827                                  	.L_lambda_opt_arity_check_exact_0009:
  8828 000057AB 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  8829 000057B0 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  8830 000057B5 4883EC08                	sub rsp, 8
  8831 000057B9 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  8832                                  	.L_lambda_opt_exact_shifting_loop_0009:
  8833 000057BD 488B5108                	mov rdx, [rcx + 8]
  8834 000057C1 488911                  	mov [rcx], rdx
  8835 000057C4 4883C108                	add rcx, 8
  8836 000057C8 4839CB                  	cmp rbx, rcx
  8837 000057CB 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0009
  8838                                  	.L_lambda_opt_exact_shifting_loop_end_0009:
  8839 000057CD 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  8840 000057D4 4883C001                	add rax, 1 ; 	arg count += 1
  8841 000057D8 4889442410              	mov qword [rsp + 8 * 2], rax
  8842 000057DD E987000000              	jmp .L_lambda_opt_stack_adjusted_0009
  8843                                  	.L_lambda_opt_arity_check_more_0009:
  8844 000057E2 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  8844 000057E4 [0100000000000000] 
  8845 000057EC 48837C241003            	cmp qword [rsp + 8 * 2], 3;	 compare count to params
  8846 000057F2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0009
  8847                                  	.L_lambda_opt_stack_shrink_loop_0009:
  8848 000057F4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8849 000057F9 E88B000100              	call malloc ;	 allocated memory for the optional scheme list
  8850 000057FE C60021                  	mov byte[rax], T_pair ;	 set type pair
  8851 00005801 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8852 00005805 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  8853 00005808 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  8854 0000580D 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  8855 00005812 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  8856 00005816 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  8857                                  	.L_lambda_opt_more_shifting_loop_0009:
  8858 0000581B 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  8859 0000581E 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  8860 00005822 4883EB08                	sub rbx, 8 
  8861 00005826 4839DC                  	cmp rsp, rbx
  8862 00005829 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0009
  8863                                  	.L_lambda_opt_more_shifting_loop_end_0009:
  8864 0000582B 4883C408                	add rsp, 8 ;	 update rsp
  8865 0000582F 488B5C2410              	mov rbx, [rsp + 8 * 2]
  8866 00005834 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  8867 00005838 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  8868 0000583D 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8869 00005843 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0009
  8870                                  	.L_lambda_opt_stack_shrink_loop_exit_0009:
  8871 00005845 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  8872 0000584A 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  8873 0000584F BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8874 00005854 E830000100              	call malloc ;	 allocated memory for the optional scheme list
  8875 00005859 C60021                  	mov byte[rax], T_pair ;	 set type pair
  8876 0000585C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8877 00005860 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  8878 00005864 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  8879                                  	.L_lambda_opt_stack_adjusted_0009:
  8880 00005869 C8000000                	enter 0, 0
  8881                                  	; preparing a tail-call
  8882 0000586D 488B4530                	mov rax, PARAM(2)	; param ss
  8883 00005871 50                      	push rax
  8884 00005872 488B4528                	mov rax, PARAM(1)	; param unit
  8885 00005876 50                      	push rax
  8886 00005877 488B4520                	mov rax, PARAM(0)	; param f
  8887 0000587B 50                      	push rax
  8888 0000587C 6A03                    	push 3	; arg count
  8889 0000587E 488B4510                	mov rax, ENV
  8890 00005882 488B00                  	mov rax, qword [rax + 8 * 0]
  8891 00005885 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8892 00005888 488B00                  	mov rax, qword [rax]
  8893 0000588B 803804                  	cmp byte [rax], T_closure
  8894 0000588E 0F854CFF0000            	jne L_error_non_closure
  8895 00005894 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8896                                  
  8897                                  	; recycling the current frame
  8898 00005897 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8899 0000589A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8900 0000589D B907000000              	mov rcx, 3 + 4
  8901 000058A2 488B5D18                	mov rbx, COUNT
  8902 000058A6 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8903 000058AB 488D55F8                	lea rdx, [rbp - 8 * 1]
  8904                                  .L_tc_recycle_frame_loop_0034:
  8905 000058AF 4883F900                	cmp rcx, 0
  8906 000058B3 7413                    	je .L_tc_recycle_frame_done_0034
  8907 000058B5 488B32                  	mov rsi, qword [rdx]
  8908 000058B8 488933                  	mov qword [rbx], rsi
  8909 000058BB 48FFC9                  	dec rcx
  8910 000058BE 4883EB08                	sub rbx, 8 * 1
  8911 000058C2 4883EA08                	sub rdx, 8 * 1
  8912 000058C6 EBE7                    	jmp .L_tc_recycle_frame_loop_0034
  8913                                  .L_tc_recycle_frame_done_0034:
  8914 000058C8 488D6308                	lea rsp, [rbx + 8 * 1]
  8915 000058CC 5D                      	pop rbp	; the proc will restore it!
  8916 000058CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8917 000058D0 C9                      	leave
  8918 000058D1 C22800                  	ret AND_KILL_FRAME(3)
  8919                                  .L_lambda_opt_end_0009:	; new closure is in rax
  8920 000058D4 C9                      	leave
  8921 000058D5 C21800                  	ret AND_KILL_FRAME(1)
  8922                                  .L_lambda_simple_end_0032:	; new closure is in rax
  8923 000058D8 803804                  	cmp byte [rax], T_closure
  8924 000058DB 0F85FFFE0000            	jne L_error_non_closure
  8925 000058E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8926 000058E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8927 000058E7 48890425[43150000]      	mov qword [free_var_114], rax
  8928 000058EF 48B8-                   	mov rax, sob_void
  8928 000058F1 [0000000000000000] 
  8929                                  
  8930 000058F9 4889C7                  	mov rdi, rax
  8931 000058FC E89A000100              	call print_sexpr_if_not_void
  8932                                  
  8933 00005901 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8934 00005906 E87EFF0000              	call malloc
  8935 0000590B 50                      	push rax
  8936 0000590C BF00000000              	mov rdi, 8 * 0	; new rib
  8937 00005911 E873FF0000              	call malloc
  8938 00005916 50                      	push rax
  8939 00005917 BF08000000              	mov rdi, 8 * 1	; extended env
  8940 0000591C E868FF0000              	call malloc
  8941 00005921 488B7D10                	mov rdi, ENV
  8942 00005925 BE00000000              	mov rsi, 0
  8943 0000592A BA01000000              	mov rdx, 1
  8944                                  .L_lambda_simple_env_loop_0034:	; ext_env[i + 1] <-- env[i]
  8945 0000592F 4883FE00                	cmp rsi, 0
  8946 00005933 7410                    	je .L_lambda_simple_env_end_0034
  8947 00005935 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8948 00005939 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8949 0000593D 48FFC6                  	inc rsi
  8950 00005940 48FFC2                  	inc rdx
  8951 00005943 EBEA                    	jmp .L_lambda_simple_env_loop_0034
  8952                                  .L_lambda_simple_env_end_0034:
  8953 00005945 5B                      	pop rbx
  8954 00005946 BE00000000              	mov rsi, 0
  8955                                  .L_lambda_simple_params_loop_0034:	; copy params
  8956 0000594B 4883FE00                	cmp rsi, 0
  8957 0000594F 740E                    	je .L_lambda_simple_params_end_0034
  8958 00005951 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8959 00005956 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8960 0000595A 48FFC6                  	inc rsi
  8961 0000595D EBEC                    	jmp .L_lambda_simple_params_loop_0034
  8962                                  .L_lambda_simple_params_end_0034:
  8963 0000595F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8964 00005962 4889C3                  	mov rbx, rax
  8965 00005965 58                      	pop rax
  8966 00005966 C60004                  	mov byte [rax], T_closure
  8967 00005969 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8968 0000596D 48C74009[7A590000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0034
  8969 00005975 E989000000              	jmp .L_lambda_simple_end_0034
  8970                                  .L_lambda_simple_code_0034:	; lambda-simple body
  8971 0000597A 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8972 00005980 740B                    	je .L_lambda_simple_arity_check_ok_0034
  8973 00005982 FF742410                	push qword [rsp + 8 * 2]
  8974 00005986 6A00                    	push 0
  8975 00005988 E9B5FE0000              	jmp L_error_incorrect_arity_simple
  8976                                  .L_lambda_simple_arity_check_ok_0034:
  8977 0000598D C8000000                	enter 0, 0
  8978                                  	; preparing a tail-call
  8979 00005991 48B8-                   	mov rax, L_constants + 2075
  8979 00005993 [1B08000000000000] 
  8980 0000599B 50                      	push rax
  8981 0000599C 48B8-                   	mov rax, L_constants + 2066
  8981 0000599E [1208000000000000] 
  8982 000059A6 50                      	push rax
  8983 000059A7 6A02                    	push 2	; arg count
  8984 000059A9 488B0425[7B100000]      	mov rax, qword [free_var_42]	; free var error
  8985 000059B1 803805                  	cmp byte [rax], T_undefined
  8986 000059B4 0F84A2FD0000            	je L_error_fvar_undefined
  8987 000059BA 803804                  	cmp byte [rax], T_closure
  8988 000059BD 0F851DFE0000            	jne L_error_non_closure
  8989 000059C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8990                                  
  8991                                  	; recycling the current frame
  8992 000059C6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8993 000059C9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8994 000059CC B906000000              	mov rcx, 2 + 4
  8995 000059D1 488B5D18                	mov rbx, COUNT
  8996 000059D5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8997 000059DA 488D55F8                	lea rdx, [rbp - 8 * 1]
  8998                                  .L_tc_recycle_frame_loop_0035:
  8999 000059DE 4883F900                	cmp rcx, 0
  9000 000059E2 7413                    	je .L_tc_recycle_frame_done_0035
  9001 000059E4 488B32                  	mov rsi, qword [rdx]
  9002 000059E7 488933                  	mov qword [rbx], rsi
  9003 000059EA 48FFC9                  	dec rcx
  9004 000059ED 4883EB08                	sub rbx, 8 * 1
  9005 000059F1 4883EA08                	sub rdx, 8 * 1
  9006 000059F5 EBE7                    	jmp .L_tc_recycle_frame_loop_0035
  9007                                  .L_tc_recycle_frame_done_0035:
  9008 000059F7 488D6308                	lea rsp, [rbx + 8 * 1]
  9009 000059FB 5D                      	pop rbp	; the proc will restore it!
  9010 000059FC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9011 000059FF C9                      	leave
  9012 00005A00 C21000                  	ret AND_KILL_FRAME(0)
  9013                                  .L_lambda_simple_end_0034:	; new closure is in rax
  9014 00005A03 50                      	push rax
  9015 00005A04 6A01                    	push 1	; arg count
  9016 00005A06 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9017 00005A0B E879FE0000              	call malloc
  9018 00005A10 50                      	push rax
  9019 00005A11 BF00000000              	mov rdi, 8 * 0	; new rib
  9020 00005A16 E86EFE0000              	call malloc
  9021 00005A1B 50                      	push rax
  9022 00005A1C BF08000000              	mov rdi, 8 * 1	; extended env
  9023 00005A21 E863FE0000              	call malloc
  9024 00005A26 488B7D10                	mov rdi, ENV
  9025 00005A2A BE00000000              	mov rsi, 0
  9026 00005A2F BA01000000              	mov rdx, 1
  9027                                  .L_lambda_simple_env_loop_0035:	; ext_env[i + 1] <-- env[i]
  9028 00005A34 4883FE00                	cmp rsi, 0
  9029 00005A38 7410                    	je .L_lambda_simple_env_end_0035
  9030 00005A3A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9031 00005A3E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9032 00005A42 48FFC6                  	inc rsi
  9033 00005A45 48FFC2                  	inc rdx
  9034 00005A48 EBEA                    	jmp .L_lambda_simple_env_loop_0035
  9035                                  .L_lambda_simple_env_end_0035:
  9036 00005A4A 5B                      	pop rbx
  9037 00005A4B BE00000000              	mov rsi, 0
  9038                                  .L_lambda_simple_params_loop_0035:	; copy params
  9039 00005A50 4883FE00                	cmp rsi, 0
  9040 00005A54 740E                    	je .L_lambda_simple_params_end_0035
  9041 00005A56 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9042 00005A5B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9043 00005A5F 48FFC6                  	inc rsi
  9044 00005A62 EBEC                    	jmp .L_lambda_simple_params_loop_0035
  9045                                  .L_lambda_simple_params_end_0035:
  9046 00005A64 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9047 00005A67 4889C3                  	mov rbx, rax
  9048 00005A6A 58                      	pop rax
  9049 00005A6B C60004                  	mov byte [rax], T_closure
  9050 00005A6E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9051 00005A72 48C74009[7F5A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0035
  9052 00005A7A E9620B0000              	jmp .L_lambda_simple_end_0035
  9053                                  .L_lambda_simple_code_0035:	; lambda-simple body
  9054 00005A7F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9055 00005A85 740B                    	je .L_lambda_simple_arity_check_ok_0035
  9056 00005A87 FF742410                	push qword [rsp + 8 * 2]
  9057 00005A8B 6A01                    	push 1
  9058 00005A8D E9B0FD0000              	jmp L_error_incorrect_arity_simple
  9059                                  .L_lambda_simple_arity_check_ok_0035:
  9060 00005A92 C8000000                	enter 0, 0
  9061                                  	; preparing a tail-call
  9062 00005A96 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9063 00005A9B E8E9FD0000              	call malloc
  9064 00005AA0 50                      	push rax
  9065 00005AA1 BF08000000              	mov rdi, 8 * 1	; new rib
  9066 00005AA6 E8DEFD0000              	call malloc
  9067 00005AAB 50                      	push rax
  9068 00005AAC BF10000000              	mov rdi, 8 * 2	; extended env
  9069 00005AB1 E8D3FD0000              	call malloc
  9070 00005AB6 488B7D10                	mov rdi, ENV
  9071 00005ABA BE00000000              	mov rsi, 0
  9072 00005ABF BA01000000              	mov rdx, 1
  9073                                  .L_lambda_simple_env_loop_0036:	; ext_env[i + 1] <-- env[i]
  9074 00005AC4 4883FE01                	cmp rsi, 1
  9075 00005AC8 7410                    	je .L_lambda_simple_env_end_0036
  9076 00005ACA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9077 00005ACE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9078 00005AD2 48FFC6                  	inc rsi
  9079 00005AD5 48FFC2                  	inc rdx
  9080 00005AD8 EBEA                    	jmp .L_lambda_simple_env_loop_0036
  9081                                  .L_lambda_simple_env_end_0036:
  9082 00005ADA 5B                      	pop rbx
  9083 00005ADB BE00000000              	mov rsi, 0
  9084                                  .L_lambda_simple_params_loop_0036:	; copy params
  9085 00005AE0 4883FE01                	cmp rsi, 1
  9086 00005AE4 740E                    	je .L_lambda_simple_params_end_0036
  9087 00005AE6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9088 00005AEB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9089 00005AEF 48FFC6                  	inc rsi
  9090 00005AF2 EBEC                    	jmp .L_lambda_simple_params_loop_0036
  9091                                  .L_lambda_simple_params_end_0036:
  9092 00005AF4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9093 00005AF7 4889C3                  	mov rbx, rax
  9094 00005AFA 58                      	pop rax
  9095 00005AFB C60004                  	mov byte [rax], T_closure
  9096 00005AFE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9097 00005B02 48C74009[0F5B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0036
  9098 00005B0A E92B080000              	jmp .L_lambda_simple_end_0036
  9099                                  .L_lambda_simple_code_0036:	; lambda-simple body
  9100 00005B0F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9101 00005B15 740B                    	je .L_lambda_simple_arity_check_ok_0036
  9102 00005B17 FF742410                	push qword [rsp + 8 * 2]
  9103 00005B1B 6A02                    	push 2
  9104 00005B1D E920FD0000              	jmp L_error_incorrect_arity_simple
  9105                                  .L_lambda_simple_arity_check_ok_0036:
  9106 00005B22 C8000000                	enter 0, 0
  9107 00005B26 488B4520                	mov rax, PARAM(0)	; param a
  9108 00005B2A 50                      	push rax
  9109 00005B2B 6A01                    	push 1	; arg count
  9110 00005B2D 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9111 00005B35 803805                  	cmp byte [rax], T_undefined
  9112 00005B38 0F841EFC0000            	je L_error_fvar_undefined
  9113 00005B3E 803804                  	cmp byte [rax], T_closure
  9114 00005B41 0F8599FC0000            	jne L_error_non_closure
  9115 00005B47 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9116 00005B4A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9117                                  
  9118 00005B4D 483D[02000000]          	cmp rax, sob_boolean_false
  9119 00005B53 0F8463020000            	je .L_if_else_000f
  9120 00005B59 488B4528                	mov rax, PARAM(1)	; param b
  9121 00005B5D 50                      	push rax
  9122 00005B5E 6A01                    	push 1	; arg count
  9123 00005B60 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9124 00005B68 803805                  	cmp byte [rax], T_undefined
  9125 00005B6B 0F84EBFB0000            	je L_error_fvar_undefined
  9126 00005B71 803804                  	cmp byte [rax], T_closure
  9127 00005B74 0F8566FC0000            	jne L_error_non_closure
  9128 00005B7A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9129 00005B7D FF5009                  	call SOB_CLOSURE_CODE(rax)
  9130                                  
  9131 00005B80 483D[02000000]          	cmp rax, sob_boolean_false
  9132 00005B86 7467                    	je .L_if_else_0010
  9133                                  	; preparing a tail-call
  9134 00005B88 488B4528                	mov rax, PARAM(1)	; param b
  9135 00005B8C 50                      	push rax
  9136 00005B8D 488B4520                	mov rax, PARAM(0)	; param a
  9137 00005B91 50                      	push rax
  9138 00005B92 6A02                    	push 2	; arg count
  9139 00005B94 488B0425[37100000]      	mov rax, qword [free_var_38]	; free var __bin-add-zz
  9140 00005B9C 803805                  	cmp byte [rax], T_undefined
  9141 00005B9F 0F84B7FB0000            	je L_error_fvar_undefined
  9142 00005BA5 803804                  	cmp byte [rax], T_closure
  9143 00005BA8 0F8532FC0000            	jne L_error_non_closure
  9144 00005BAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9145                                  
  9146                                  	; recycling the current frame
  9147 00005BB1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9148 00005BB4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9149 00005BB7 B906000000              	mov rcx, 2 + 4
  9150 00005BBC 488B5D18                	mov rbx, COUNT
  9151 00005BC0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9152 00005BC5 488D55F8                	lea rdx, [rbp - 8 * 1]
  9153                                  .L_tc_recycle_frame_loop_0036:
  9154 00005BC9 4883F900                	cmp rcx, 0
  9155 00005BCD 7413                    	je .L_tc_recycle_frame_done_0036
  9156 00005BCF 488B32                  	mov rsi, qword [rdx]
  9157 00005BD2 488933                  	mov qword [rbx], rsi
  9158 00005BD5 48FFC9                  	dec rcx
  9159 00005BD8 4883EB08                	sub rbx, 8 * 1
  9160 00005BDC 4883EA08                	sub rdx, 8 * 1
  9161 00005BE0 EBE7                    	jmp .L_tc_recycle_frame_loop_0036
  9162                                  .L_tc_recycle_frame_done_0036:
  9163 00005BE2 488D6308                	lea rsp, [rbx + 8 * 1]
  9164 00005BE6 5D                      	pop rbp	; the proc will restore it!
  9165 00005BE7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9166                                  
  9167 00005BEA E9C8010000              	jmp .L_if_end_0010
  9168                                  
  9169                                  	.L_if_else_0010:
  9170 00005BEF 488B4528                	mov rax, PARAM(1)	; param b
  9171 00005BF3 50                      	push rax
  9172 00005BF4 6A01                    	push 1	; arg count
  9173 00005BF6 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9174 00005BFE 803805                  	cmp byte [rax], T_undefined
  9175 00005C01 0F8455FB0000            	je L_error_fvar_undefined
  9176 00005C07 803804                  	cmp byte [rax], T_closure
  9177 00005C0A 0F85D0FB0000            	jne L_error_non_closure
  9178 00005C10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9179 00005C13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9180                                  
  9181 00005C16 483D[02000000]          	cmp rax, sob_boolean_false
  9182 00005C1C 0F848A000000            	je .L_if_else_0011
  9183                                  	; preparing a tail-call
  9184 00005C22 488B4528                	mov rax, PARAM(1)	; param b
  9185 00005C26 50                      	push rax
  9186 00005C27 488B4520                	mov rax, PARAM(0)	; param a
  9187 00005C2B 50                      	push rax
  9188 00005C2C 6A01                    	push 1	; arg count
  9189 00005C2E 488B0425[CF110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
  9190 00005C36 803805                  	cmp byte [rax], T_undefined
  9191 00005C39 0F841DFB0000            	je L_error_fvar_undefined
  9192 00005C3F 803804                  	cmp byte [rax], T_closure
  9193 00005C42 0F8598FB0000            	jne L_error_non_closure
  9194 00005C48 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9195 00005C4B FF5009                  	call SOB_CLOSURE_CODE(rax)
  9196 00005C4E 50                      	push rax
  9197 00005C4F 6A02                    	push 2	; arg count
  9198 00005C51 488B0425[F30F0000]      	mov rax, qword [free_var_34]	; free var __bin-add-qq
  9199 00005C59 803805                  	cmp byte [rax], T_undefined
  9200 00005C5C 0F84FAFA0000            	je L_error_fvar_undefined
  9201 00005C62 803804                  	cmp byte [rax], T_closure
  9202 00005C65 0F8575FB0000            	jne L_error_non_closure
  9203 00005C6B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9204                                  
  9205                                  	; recycling the current frame
  9206 00005C6E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9207 00005C71 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9208 00005C74 B906000000              	mov rcx, 2 + 4
  9209 00005C79 488B5D18                	mov rbx, COUNT
  9210 00005C7D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9211 00005C82 488D55F8                	lea rdx, [rbp - 8 * 1]
  9212                                  .L_tc_recycle_frame_loop_0037:
  9213 00005C86 4883F900                	cmp rcx, 0
  9214 00005C8A 7413                    	je .L_tc_recycle_frame_done_0037
  9215 00005C8C 488B32                  	mov rsi, qword [rdx]
  9216 00005C8F 488933                  	mov qword [rbx], rsi
  9217 00005C92 48FFC9                  	dec rcx
  9218 00005C95 4883EB08                	sub rbx, 8 * 1
  9219 00005C99 4883EA08                	sub rdx, 8 * 1
  9220 00005C9D EBE7                    	jmp .L_tc_recycle_frame_loop_0037
  9221                                  .L_tc_recycle_frame_done_0037:
  9222 00005C9F 488D6308                	lea rsp, [rbx + 8 * 1]
  9223 00005CA3 5D                      	pop rbp	; the proc will restore it!
  9224 00005CA4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9225                                  
  9226 00005CA7 E90B010000              	jmp .L_if_end_0011
  9227                                  
  9228                                  	.L_if_else_0011:
  9229 00005CAC 488B4528                	mov rax, PARAM(1)	; param b
  9230 00005CB0 50                      	push rax
  9231 00005CB1 6A01                    	push 1	; arg count
  9232 00005CB3 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
  9233 00005CBB 803805                  	cmp byte [rax], T_undefined
  9234 00005CBE 0F8498FA0000            	je L_error_fvar_undefined
  9235 00005CC4 803804                  	cmp byte [rax], T_closure
  9236 00005CC7 0F8513FB0000            	jne L_error_non_closure
  9237 00005CCD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9238 00005CD0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9239                                  
  9240 00005CD3 483D[02000000]          	cmp rax, sob_boolean_false
  9241 00005CD9 0F8487000000            	je .L_if_else_0012
  9242                                  	; preparing a tail-call
  9243 00005CDF 488B4528                	mov rax, PARAM(1)	; param b
  9244 00005CE3 50                      	push rax
  9245 00005CE4 488B4520                	mov rax, PARAM(0)	; param a
  9246 00005CE8 50                      	push rax
  9247 00005CE9 6A01                    	push 1	; arg count
  9248 00005CEB 488B0425[270F0000]      	mov rax, qword [free_var_22]	; free var integer->real
  9249 00005CF3 803805                  	cmp byte [rax], T_undefined
  9250 00005CF6 0F8460FA0000            	je L_error_fvar_undefined
  9251 00005CFC 803804                  	cmp byte [rax], T_closure
  9252 00005CFF 0F85DBFA0000            	jne L_error_non_closure
  9253 00005D05 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9254 00005D08 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9255 00005D0B 50                      	push rax
  9256 00005D0C 6A02                    	push 2	; arg count
  9257 00005D0E 488B0425[AF0F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9258 00005D16 803805                  	cmp byte [rax], T_undefined
  9259 00005D19 0F843DFA0000            	je L_error_fvar_undefined
  9260 00005D1F 803804                  	cmp byte [rax], T_closure
  9261 00005D22 0F85B8FA0000            	jne L_error_non_closure
  9262 00005D28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9263                                  
  9264                                  	; recycling the current frame
  9265 00005D2B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9266 00005D2E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9267 00005D31 B906000000              	mov rcx, 2 + 4
  9268 00005D36 488B5D18                	mov rbx, COUNT
  9269 00005D3A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9270 00005D3F 488D55F8                	lea rdx, [rbp - 8 * 1]
  9271                                  .L_tc_recycle_frame_loop_0038:
  9272 00005D43 4883F900                	cmp rcx, 0
  9273 00005D47 7413                    	je .L_tc_recycle_frame_done_0038
  9274 00005D49 488B32                  	mov rsi, qword [rdx]
  9275 00005D4C 488933                  	mov qword [rbx], rsi
  9276 00005D4F 48FFC9                  	dec rcx
  9277 00005D52 4883EB08                	sub rbx, 8 * 1
  9278 00005D56 4883EA08                	sub rdx, 8 * 1
  9279 00005D5A EBE7                    	jmp .L_tc_recycle_frame_loop_0038
  9280                                  .L_tc_recycle_frame_done_0038:
  9281 00005D5C 488D6308                	lea rsp, [rbx + 8 * 1]
  9282 00005D60 5D                      	pop rbp	; the proc will restore it!
  9283 00005D61 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9284                                  
  9285 00005D64 EB51                    	jmp .L_if_end_0012
  9286                                  
  9287                                  	.L_if_else_0012:
  9288                                  	; preparing a tail-call
  9289 00005D66 6A00                    	push 0	; arg count
  9290 00005D68 488B4510                	mov rax, ENV
  9291 00005D6C 488B00                  	mov rax, qword [rax + 8 * 0]
  9292 00005D6F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9293 00005D72 803804                  	cmp byte [rax], T_closure
  9294 00005D75 0F8565FA0000            	jne L_error_non_closure
  9295 00005D7B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9296                                  
  9297                                  	; recycling the current frame
  9298 00005D7E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9299 00005D81 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9300 00005D84 B904000000              	mov rcx, 0 + 4
  9301 00005D89 488B5D18                	mov rbx, COUNT
  9302 00005D8D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9303 00005D92 488D55F8                	lea rdx, [rbp - 8 * 1]
  9304                                  .L_tc_recycle_frame_loop_0039:
  9305 00005D96 4883F900                	cmp rcx, 0
  9306 00005D9A 7413                    	je .L_tc_recycle_frame_done_0039
  9307 00005D9C 488B32                  	mov rsi, qword [rdx]
  9308 00005D9F 488933                  	mov qword [rbx], rsi
  9309 00005DA2 48FFC9                  	dec rcx
  9310 00005DA5 4883EB08                	sub rbx, 8 * 1
  9311 00005DA9 4883EA08                	sub rdx, 8 * 1
  9312 00005DAD EBE7                    	jmp .L_tc_recycle_frame_loop_0039
  9313                                  .L_tc_recycle_frame_done_0039:
  9314 00005DAF 488D6308                	lea rsp, [rbx + 8 * 1]
  9315 00005DB3 5D                      	pop rbp	; the proc will restore it!
  9316 00005DB4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9317                                  
  9318                                  	.L_if_end_0012:
  9319                                  
  9320                                  	.L_if_end_0011:
  9321                                  
  9322                                  	.L_if_end_0010:
  9323                                  
  9324 00005DB7 E97A050000              	jmp .L_if_end_000f
  9325                                  
  9326                                  	.L_if_else_000f:
  9327 00005DBC 488B4520                	mov rax, PARAM(0)	; param a
  9328 00005DC0 50                      	push rax
  9329 00005DC1 6A01                    	push 1	; arg count
  9330 00005DC3 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9331 00005DCB 803805                  	cmp byte [rax], T_undefined
  9332 00005DCE 0F8488F90000            	je L_error_fvar_undefined
  9333 00005DD4 803804                  	cmp byte [rax], T_closure
  9334 00005DD7 0F8503FA0000            	jne L_error_non_closure
  9335 00005DDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9336 00005DE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9337                                  
  9338 00005DE3 483D[02000000]          	cmp rax, sob_boolean_false
  9339 00005DE9 0F8463020000            	je .L_if_else_0013
  9340 00005DEF 488B4528                	mov rax, PARAM(1)	; param b
  9341 00005DF3 50                      	push rax
  9342 00005DF4 6A01                    	push 1	; arg count
  9343 00005DF6 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9344 00005DFE 803805                  	cmp byte [rax], T_undefined
  9345 00005E01 0F8455F90000            	je L_error_fvar_undefined
  9346 00005E07 803804                  	cmp byte [rax], T_closure
  9347 00005E0A 0F85D0F90000            	jne L_error_non_closure
  9348 00005E10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9349 00005E13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9350                                  
  9351 00005E16 483D[02000000]          	cmp rax, sob_boolean_false
  9352 00005E1C 0F848A000000            	je .L_if_else_0014
  9353                                  	; preparing a tail-call
  9354 00005E22 488B4528                	mov rax, PARAM(1)	; param b
  9355 00005E26 50                      	push rax
  9356 00005E27 6A01                    	push 1	; arg count
  9357 00005E29 488B0425[65150000]      	mov rax, qword [free_var_116]	; free var __bin_integer_to_fraction
  9358 00005E31 803805                  	cmp byte [rax], T_undefined
  9359 00005E34 0F8422F90000            	je L_error_fvar_undefined
  9360 00005E3A 803804                  	cmp byte [rax], T_closure
  9361 00005E3D 0F859DF90000            	jne L_error_non_closure
  9362 00005E43 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9363 00005E46 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9364 00005E49 50                      	push rax
  9365 00005E4A 488B4520                	mov rax, PARAM(0)	; param a
  9366 00005E4E 50                      	push rax
  9367 00005E4F 6A02                    	push 2	; arg count
  9368 00005E51 488B0425[F30F0000]      	mov rax, qword [free_var_34]	; free var __bin-add-qq
  9369 00005E59 803805                  	cmp byte [rax], T_undefined
  9370 00005E5C 0F84FAF80000            	je L_error_fvar_undefined
  9371 00005E62 803804                  	cmp byte [rax], T_closure
  9372 00005E65 0F8575F90000            	jne L_error_non_closure
  9373 00005E6B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9374                                  
  9375                                  	; recycling the current frame
  9376 00005E6E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9377 00005E71 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9378 00005E74 B906000000              	mov rcx, 2 + 4
  9379 00005E79 488B5D18                	mov rbx, COUNT
  9380 00005E7D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9381 00005E82 488D55F8                	lea rdx, [rbp - 8 * 1]
  9382                                  .L_tc_recycle_frame_loop_003a:
  9383 00005E86 4883F900                	cmp rcx, 0
  9384 00005E8A 7413                    	je .L_tc_recycle_frame_done_003a
  9385 00005E8C 488B32                  	mov rsi, qword [rdx]
  9386 00005E8F 488933                  	mov qword [rbx], rsi
  9387 00005E92 48FFC9                  	dec rcx
  9388 00005E95 4883EB08                	sub rbx, 8 * 1
  9389 00005E99 4883EA08                	sub rdx, 8 * 1
  9390 00005E9D EBE7                    	jmp .L_tc_recycle_frame_loop_003a
  9391                                  .L_tc_recycle_frame_done_003a:
  9392 00005E9F 488D6308                	lea rsp, [rbx + 8 * 1]
  9393 00005EA3 5D                      	pop rbp	; the proc will restore it!
  9394 00005EA4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9395                                  
  9396 00005EA7 E9A1010000              	jmp .L_if_end_0014
  9397                                  
  9398                                  	.L_if_else_0014:
  9399 00005EAC 488B4528                	mov rax, PARAM(1)	; param b
  9400 00005EB0 50                      	push rax
  9401 00005EB1 6A01                    	push 1	; arg count
  9402 00005EB3 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9403 00005EBB 803805                  	cmp byte [rax], T_undefined
  9404 00005EBE 0F8498F80000            	je L_error_fvar_undefined
  9405 00005EC4 803804                  	cmp byte [rax], T_closure
  9406 00005EC7 0F8513F90000            	jne L_error_non_closure
  9407 00005ECD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9408 00005ED0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9409                                  
  9410 00005ED3 483D[02000000]          	cmp rax, sob_boolean_false
  9411 00005ED9 7467                    	je .L_if_else_0015
  9412                                  	; preparing a tail-call
  9413 00005EDB 488B4528                	mov rax, PARAM(1)	; param b
  9414 00005EDF 50                      	push rax
  9415 00005EE0 488B4520                	mov rax, PARAM(0)	; param a
  9416 00005EE4 50                      	push rax
  9417 00005EE5 6A02                    	push 2	; arg count
  9418 00005EE7 488B0425[F30F0000]      	mov rax, qword [free_var_34]	; free var __bin-add-qq
  9419 00005EEF 803805                  	cmp byte [rax], T_undefined
  9420 00005EF2 0F8464F80000            	je L_error_fvar_undefined
  9421 00005EF8 803804                  	cmp byte [rax], T_closure
  9422 00005EFB 0F85DFF80000            	jne L_error_non_closure
  9423 00005F01 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9424                                  
  9425                                  	; recycling the current frame
  9426 00005F04 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9427 00005F07 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9428 00005F0A B906000000              	mov rcx, 2 + 4
  9429 00005F0F 488B5D18                	mov rbx, COUNT
  9430 00005F13 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9431 00005F18 488D55F8                	lea rdx, [rbp - 8 * 1]
  9432                                  .L_tc_recycle_frame_loop_003b:
  9433 00005F1C 4883F900                	cmp rcx, 0
  9434 00005F20 7413                    	je .L_tc_recycle_frame_done_003b
  9435 00005F22 488B32                  	mov rsi, qword [rdx]
  9436 00005F25 488933                  	mov qword [rbx], rsi
  9437 00005F28 48FFC9                  	dec rcx
  9438 00005F2B 4883EB08                	sub rbx, 8 * 1
  9439 00005F2F 4883EA08                	sub rdx, 8 * 1
  9440 00005F33 EBE7                    	jmp .L_tc_recycle_frame_loop_003b
  9441                                  .L_tc_recycle_frame_done_003b:
  9442 00005F35 488D6308                	lea rsp, [rbx + 8 * 1]
  9443 00005F39 5D                      	pop rbp	; the proc will restore it!
  9444 00005F3A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9445                                  
  9446 00005F3D E90B010000              	jmp .L_if_end_0015
  9447                                  
  9448                                  	.L_if_else_0015:
  9449 00005F42 488B4528                	mov rax, PARAM(1)	; param b
  9450 00005F46 50                      	push rax
  9451 00005F47 6A01                    	push 1	; arg count
  9452 00005F49 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
  9453 00005F51 803805                  	cmp byte [rax], T_undefined
  9454 00005F54 0F8402F80000            	je L_error_fvar_undefined
  9455 00005F5A 803804                  	cmp byte [rax], T_closure
  9456 00005F5D 0F857DF80000            	jne L_error_non_closure
  9457 00005F63 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9458 00005F66 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9459                                  
  9460 00005F69 483D[02000000]          	cmp rax, sob_boolean_false
  9461 00005F6F 0F8487000000            	je .L_if_else_0016
  9462                                  	; preparing a tail-call
  9463 00005F75 488B4528                	mov rax, PARAM(1)	; param b
  9464 00005F79 50                      	push rax
  9465 00005F7A 488B4520                	mov rax, PARAM(0)	; param a
  9466 00005F7E 50                      	push rax
  9467 00005F7F 6A01                    	push 1	; arg count
  9468 00005F81 488B0425[380F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
  9469 00005F89 803805                  	cmp byte [rax], T_undefined
  9470 00005F8C 0F84CAF70000            	je L_error_fvar_undefined
  9471 00005F92 803804                  	cmp byte [rax], T_closure
  9472 00005F95 0F8545F80000            	jne L_error_non_closure
  9473 00005F9B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9474 00005F9E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9475 00005FA1 50                      	push rax
  9476 00005FA2 6A02                    	push 2	; arg count
  9477 00005FA4 488B0425[AF0F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9478 00005FAC 803805                  	cmp byte [rax], T_undefined
  9479 00005FAF 0F84A7F70000            	je L_error_fvar_undefined
  9480 00005FB5 803804                  	cmp byte [rax], T_closure
  9481 00005FB8 0F8522F80000            	jne L_error_non_closure
  9482 00005FBE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9483                                  
  9484                                  	; recycling the current frame
  9485 00005FC1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9486 00005FC4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9487 00005FC7 B906000000              	mov rcx, 2 + 4
  9488 00005FCC 488B5D18                	mov rbx, COUNT
  9489 00005FD0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9490 00005FD5 488D55F8                	lea rdx, [rbp - 8 * 1]
  9491                                  .L_tc_recycle_frame_loop_003c:
  9492 00005FD9 4883F900                	cmp rcx, 0
  9493 00005FDD 7413                    	je .L_tc_recycle_frame_done_003c
  9494 00005FDF 488B32                  	mov rsi, qword [rdx]
  9495 00005FE2 488933                  	mov qword [rbx], rsi
  9496 00005FE5 48FFC9                  	dec rcx
  9497 00005FE8 4883EB08                	sub rbx, 8 * 1
  9498 00005FEC 4883EA08                	sub rdx, 8 * 1
  9499 00005FF0 EBE7                    	jmp .L_tc_recycle_frame_loop_003c
  9500                                  .L_tc_recycle_frame_done_003c:
  9501 00005FF2 488D6308                	lea rsp, [rbx + 8 * 1]
  9502 00005FF6 5D                      	pop rbp	; the proc will restore it!
  9503 00005FF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9504                                  
  9505 00005FFA EB51                    	jmp .L_if_end_0016
  9506                                  
  9507                                  	.L_if_else_0016:
  9508                                  	; preparing a tail-call
  9509 00005FFC 6A00                    	push 0	; arg count
  9510 00005FFE 488B4510                	mov rax, ENV
  9511 00006002 488B00                  	mov rax, qword [rax + 8 * 0]
  9512 00006005 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9513 00006008 803804                  	cmp byte [rax], T_closure
  9514 0000600B 0F85CFF70000            	jne L_error_non_closure
  9515 00006011 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9516                                  
  9517                                  	; recycling the current frame
  9518 00006014 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9519 00006017 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9520 0000601A B904000000              	mov rcx, 0 + 4
  9521 0000601F 488B5D18                	mov rbx, COUNT
  9522 00006023 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9523 00006028 488D55F8                	lea rdx, [rbp - 8 * 1]
  9524                                  .L_tc_recycle_frame_loop_003d:
  9525 0000602C 4883F900                	cmp rcx, 0
  9526 00006030 7413                    	je .L_tc_recycle_frame_done_003d
  9527 00006032 488B32                  	mov rsi, qword [rdx]
  9528 00006035 488933                  	mov qword [rbx], rsi
  9529 00006038 48FFC9                  	dec rcx
  9530 0000603B 4883EB08                	sub rbx, 8 * 1
  9531 0000603F 4883EA08                	sub rdx, 8 * 1
  9532 00006043 EBE7                    	jmp .L_tc_recycle_frame_loop_003d
  9533                                  .L_tc_recycle_frame_done_003d:
  9534 00006045 488D6308                	lea rsp, [rbx + 8 * 1]
  9535 00006049 5D                      	pop rbp	; the proc will restore it!
  9536 0000604A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9537                                  
  9538                                  	.L_if_end_0016:
  9539                                  
  9540                                  	.L_if_end_0015:
  9541                                  
  9542                                  	.L_if_end_0014:
  9543                                  
  9544 0000604D E9E4020000              	jmp .L_if_end_0013
  9545                                  
  9546                                  	.L_if_else_0013:
  9547 00006052 488B4520                	mov rax, PARAM(0)	; param a
  9548 00006056 50                      	push rax
  9549 00006057 6A01                    	push 1	; arg count
  9550 00006059 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
  9551 00006061 803805                  	cmp byte [rax], T_undefined
  9552 00006064 0F84F2F60000            	je L_error_fvar_undefined
  9553 0000606A 803804                  	cmp byte [rax], T_closure
  9554 0000606D 0F856DF70000            	jne L_error_non_closure
  9555 00006073 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9556 00006076 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9557                                  
  9558 00006079 483D[02000000]          	cmp rax, sob_boolean_false
  9559 0000607F 0F8460020000            	je .L_if_else_0017
  9560 00006085 488B4528                	mov rax, PARAM(1)	; param b
  9561 00006089 50                      	push rax
  9562 0000608A 6A01                    	push 1	; arg count
  9563 0000608C 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9564 00006094 803805                  	cmp byte [rax], T_undefined
  9565 00006097 0F84BFF60000            	je L_error_fvar_undefined
  9566 0000609D 803804                  	cmp byte [rax], T_closure
  9567 000060A0 0F853AF70000            	jne L_error_non_closure
  9568 000060A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9569 000060A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9570                                  
  9571 000060AC 483D[02000000]          	cmp rax, sob_boolean_false
  9572 000060B2 0F848A000000            	je .L_if_else_0018
  9573                                  	; preparing a tail-call
  9574 000060B8 488B4528                	mov rax, PARAM(1)	; param b
  9575 000060BC 50                      	push rax
  9576 000060BD 6A01                    	push 1	; arg count
  9577 000060BF 488B0425[270F0000]      	mov rax, qword [free_var_22]	; free var integer->real
  9578 000060C7 803805                  	cmp byte [rax], T_undefined
  9579 000060CA 0F848CF60000            	je L_error_fvar_undefined
  9580 000060D0 803804                  	cmp byte [rax], T_closure
  9581 000060D3 0F8507F70000            	jne L_error_non_closure
  9582 000060D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9583 000060DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  9584 000060DF 50                      	push rax
  9585 000060E0 488B4520                	mov rax, PARAM(0)	; param a
  9586 000060E4 50                      	push rax
  9587 000060E5 6A02                    	push 2	; arg count
  9588 000060E7 488B0425[AF0F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9589 000060EF 803805                  	cmp byte [rax], T_undefined
  9590 000060F2 0F8464F60000            	je L_error_fvar_undefined
  9591 000060F8 803804                  	cmp byte [rax], T_closure
  9592 000060FB 0F85DFF60000            	jne L_error_non_closure
  9593 00006101 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9594                                  
  9595                                  	; recycling the current frame
  9596 00006104 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9597 00006107 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9598 0000610A B906000000              	mov rcx, 2 + 4
  9599 0000610F 488B5D18                	mov rbx, COUNT
  9600 00006113 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9601 00006118 488D55F8                	lea rdx, [rbp - 8 * 1]
  9602                                  .L_tc_recycle_frame_loop_003e:
  9603 0000611C 4883F900                	cmp rcx, 0
  9604 00006120 7413                    	je .L_tc_recycle_frame_done_003e
  9605 00006122 488B32                  	mov rsi, qword [rdx]
  9606 00006125 488933                  	mov qword [rbx], rsi
  9607 00006128 48FFC9                  	dec rcx
  9608 0000612B 4883EB08                	sub rbx, 8 * 1
  9609 0000612F 4883EA08                	sub rdx, 8 * 1
  9610 00006133 EBE7                    	jmp .L_tc_recycle_frame_loop_003e
  9611                                  .L_tc_recycle_frame_done_003e:
  9612 00006135 488D6308                	lea rsp, [rbx + 8 * 1]
  9613 00006139 5D                      	pop rbp	; the proc will restore it!
  9614 0000613A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9615                                  
  9616 0000613D E9A1010000              	jmp .L_if_end_0018
  9617                                  
  9618                                  	.L_if_else_0018:
  9619 00006142 488B4528                	mov rax, PARAM(1)	; param b
  9620 00006146 50                      	push rax
  9621 00006147 6A01                    	push 1	; arg count
  9622 00006149 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9623 00006151 803805                  	cmp byte [rax], T_undefined
  9624 00006154 0F8402F60000            	je L_error_fvar_undefined
  9625 0000615A 803804                  	cmp byte [rax], T_closure
  9626 0000615D 0F857DF60000            	jne L_error_non_closure
  9627 00006163 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9628 00006166 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9629                                  
  9630 00006169 483D[02000000]          	cmp rax, sob_boolean_false
  9631 0000616F 0F848A000000            	je .L_if_else_0019
  9632                                  	; preparing a tail-call
  9633 00006175 488B4528                	mov rax, PARAM(1)	; param b
  9634 00006179 50                      	push rax
  9635 0000617A 6A01                    	push 1	; arg count
  9636 0000617C 488B0425[380F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
  9637 00006184 803805                  	cmp byte [rax], T_undefined
  9638 00006187 0F84CFF50000            	je L_error_fvar_undefined
  9639 0000618D 803804                  	cmp byte [rax], T_closure
  9640 00006190 0F854AF60000            	jne L_error_non_closure
  9641 00006196 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9642 00006199 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9643 0000619C 50                      	push rax
  9644 0000619D 488B4520                	mov rax, PARAM(0)	; param a
  9645 000061A1 50                      	push rax
  9646 000061A2 6A02                    	push 2	; arg count
  9647 000061A4 488B0425[AF0F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9648 000061AC 803805                  	cmp byte [rax], T_undefined
  9649 000061AF 0F84A7F50000            	je L_error_fvar_undefined
  9650 000061B5 803804                  	cmp byte [rax], T_closure
  9651 000061B8 0F8522F60000            	jne L_error_non_closure
  9652 000061BE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9653                                  
  9654                                  	; recycling the current frame
  9655 000061C1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9656 000061C4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9657 000061C7 B906000000              	mov rcx, 2 + 4
  9658 000061CC 488B5D18                	mov rbx, COUNT
  9659 000061D0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9660 000061D5 488D55F8                	lea rdx, [rbp - 8 * 1]
  9661                                  .L_tc_recycle_frame_loop_003f:
  9662 000061D9 4883F900                	cmp rcx, 0
  9663 000061DD 7413                    	je .L_tc_recycle_frame_done_003f
  9664 000061DF 488B32                  	mov rsi, qword [rdx]
  9665 000061E2 488933                  	mov qword [rbx], rsi
  9666 000061E5 48FFC9                  	dec rcx
  9667 000061E8 4883EB08                	sub rbx, 8 * 1
  9668 000061EC 4883EA08                	sub rdx, 8 * 1
  9669 000061F0 EBE7                    	jmp .L_tc_recycle_frame_loop_003f
  9670                                  .L_tc_recycle_frame_done_003f:
  9671 000061F2 488D6308                	lea rsp, [rbx + 8 * 1]
  9672 000061F6 5D                      	pop rbp	; the proc will restore it!
  9673 000061F7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9674                                  
  9675 000061FA E9E4000000              	jmp .L_if_end_0019
  9676                                  
  9677                                  	.L_if_else_0019:
  9678 000061FF 488B4528                	mov rax, PARAM(1)	; param b
  9679 00006203 50                      	push rax
  9680 00006204 6A01                    	push 1	; arg count
  9681 00006206 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
  9682 0000620E 803805                  	cmp byte [rax], T_undefined
  9683 00006211 0F8445F50000            	je L_error_fvar_undefined
  9684 00006217 803804                  	cmp byte [rax], T_closure
  9685 0000621A 0F85C0F50000            	jne L_error_non_closure
  9686 00006220 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9687 00006223 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9688                                  
  9689 00006226 483D[02000000]          	cmp rax, sob_boolean_false
  9690 0000622C 7464                    	je .L_if_else_001a
  9691                                  	; preparing a tail-call
  9692 0000622E 488B4528                	mov rax, PARAM(1)	; param b
  9693 00006232 50                      	push rax
  9694 00006233 488B4520                	mov rax, PARAM(0)	; param a
  9695 00006237 50                      	push rax
  9696 00006238 6A02                    	push 2	; arg count
  9697 0000623A 488B0425[AF0F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9698 00006242 803805                  	cmp byte [rax], T_undefined
  9699 00006245 0F8411F50000            	je L_error_fvar_undefined
  9700 0000624B 803804                  	cmp byte [rax], T_closure
  9701 0000624E 0F858CF50000            	jne L_error_non_closure
  9702 00006254 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9703                                  
  9704                                  	; recycling the current frame
  9705 00006257 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9706 0000625A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9707 0000625D B906000000              	mov rcx, 2 + 4
  9708 00006262 488B5D18                	mov rbx, COUNT
  9709 00006266 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9710 0000626B 488D55F8                	lea rdx, [rbp - 8 * 1]
  9711                                  .L_tc_recycle_frame_loop_0040:
  9712 0000626F 4883F900                	cmp rcx, 0
  9713 00006273 7413                    	je .L_tc_recycle_frame_done_0040
  9714 00006275 488B32                  	mov rsi, qword [rdx]
  9715 00006278 488933                  	mov qword [rbx], rsi
  9716 0000627B 48FFC9                  	dec rcx
  9717 0000627E 4883EB08                	sub rbx, 8 * 1
  9718 00006282 4883EA08                	sub rdx, 8 * 1
  9719 00006286 EBE7                    	jmp .L_tc_recycle_frame_loop_0040
  9720                                  .L_tc_recycle_frame_done_0040:
  9721 00006288 488D6308                	lea rsp, [rbx + 8 * 1]
  9722 0000628C 5D                      	pop rbp	; the proc will restore it!
  9723 0000628D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9724                                  
  9725 00006290 EB51                    	jmp .L_if_end_001a
  9726                                  
  9727                                  	.L_if_else_001a:
  9728                                  	; preparing a tail-call
  9729 00006292 6A00                    	push 0	; arg count
  9730 00006294 488B4510                	mov rax, ENV
  9731 00006298 488B00                  	mov rax, qword [rax + 8 * 0]
  9732 0000629B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9733 0000629E 803804                  	cmp byte [rax], T_closure
  9734 000062A1 0F8539F50000            	jne L_error_non_closure
  9735 000062A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9736                                  
  9737                                  	; recycling the current frame
  9738 000062AA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9739 000062AD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9740 000062B0 B904000000              	mov rcx, 0 + 4
  9741 000062B5 488B5D18                	mov rbx, COUNT
  9742 000062B9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9743 000062BE 488D55F8                	lea rdx, [rbp - 8 * 1]
  9744                                  .L_tc_recycle_frame_loop_0041:
  9745 000062C2 4883F900                	cmp rcx, 0
  9746 000062C6 7413                    	je .L_tc_recycle_frame_done_0041
  9747 000062C8 488B32                  	mov rsi, qword [rdx]
  9748 000062CB 488933                  	mov qword [rbx], rsi
  9749 000062CE 48FFC9                  	dec rcx
  9750 000062D1 4883EB08                	sub rbx, 8 * 1
  9751 000062D5 4883EA08                	sub rdx, 8 * 1
  9752 000062D9 EBE7                    	jmp .L_tc_recycle_frame_loop_0041
  9753                                  .L_tc_recycle_frame_done_0041:
  9754 000062DB 488D6308                	lea rsp, [rbx + 8 * 1]
  9755 000062DF 5D                      	pop rbp	; the proc will restore it!
  9756 000062E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9757                                  
  9758                                  	.L_if_end_001a:
  9759                                  
  9760                                  	.L_if_end_0019:
  9761                                  
  9762                                  	.L_if_end_0018:
  9763                                  
  9764 000062E3 EB51                    	jmp .L_if_end_0017
  9765                                  
  9766                                  	.L_if_else_0017:
  9767                                  	; preparing a tail-call
  9768 000062E5 6A00                    	push 0	; arg count
  9769 000062E7 488B4510                	mov rax, ENV
  9770 000062EB 488B00                  	mov rax, qword [rax + 8 * 0]
  9771 000062EE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9772 000062F1 803804                  	cmp byte [rax], T_closure
  9773 000062F4 0F85E6F40000            	jne L_error_non_closure
  9774 000062FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  9775                                  
  9776                                  	; recycling the current frame
  9777 000062FD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9778 00006300 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9779 00006303 B904000000              	mov rcx, 0 + 4
  9780 00006308 488B5D18                	mov rbx, COUNT
  9781 0000630C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9782 00006311 488D55F8                	lea rdx, [rbp - 8 * 1]
  9783                                  .L_tc_recycle_frame_loop_0042:
  9784 00006315 4883F900                	cmp rcx, 0
  9785 00006319 7413                    	je .L_tc_recycle_frame_done_0042
  9786 0000631B 488B32                  	mov rsi, qword [rdx]
  9787 0000631E 488933                  	mov qword [rbx], rsi
  9788 00006321 48FFC9                  	dec rcx
  9789 00006324 4883EB08                	sub rbx, 8 * 1
  9790 00006328 4883EA08                	sub rdx, 8 * 1
  9791 0000632C EBE7                    	jmp .L_tc_recycle_frame_loop_0042
  9792                                  .L_tc_recycle_frame_done_0042:
  9793 0000632E 488D6308                	lea rsp, [rbx + 8 * 1]
  9794 00006332 5D                      	pop rbp	; the proc will restore it!
  9795 00006333 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9796                                  
  9797                                  	.L_if_end_0017:
  9798                                  
  9799                                  	.L_if_end_0013:
  9800                                  
  9801                                  	.L_if_end_000f:
  9802 00006336 C9                      	leave
  9803 00006337 C22000                  	ret AND_KILL_FRAME(2)
  9804                                  .L_lambda_simple_end_0036:	; new closure is in rax
  9805 0000633A 50                      	push rax
  9806 0000633B 6A01                    	push 1	; arg count
  9807 0000633D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9808 00006342 E842F50000              	call malloc
  9809 00006347 50                      	push rax
  9810 00006348 BF08000000              	mov rdi, 8 * 1	; new rib
  9811 0000634D E837F50000              	call malloc
  9812 00006352 50                      	push rax
  9813 00006353 BF10000000              	mov rdi, 8 * 2	; extended env
  9814 00006358 E82CF50000              	call malloc
  9815 0000635D 488B7D10                	mov rdi, ENV
  9816 00006361 BE00000000              	mov rsi, 0
  9817 00006366 BA01000000              	mov rdx, 1
  9818                                  .L_lambda_simple_env_loop_0037:	; ext_env[i + 1] <-- env[i]
  9819 0000636B 4883FE01                	cmp rsi, 1
  9820 0000636F 7410                    	je .L_lambda_simple_env_end_0037
  9821 00006371 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9822 00006375 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9823 00006379 48FFC6                  	inc rsi
  9824 0000637C 48FFC2                  	inc rdx
  9825 0000637F EBEA                    	jmp .L_lambda_simple_env_loop_0037
  9826                                  .L_lambda_simple_env_end_0037:
  9827 00006381 5B                      	pop rbx
  9828 00006382 BE00000000              	mov rsi, 0
  9829                                  .L_lambda_simple_params_loop_0037:	; copy params
  9830 00006387 4883FE01                	cmp rsi, 1
  9831 0000638B 740E                    	je .L_lambda_simple_params_end_0037
  9832 0000638D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9833 00006392 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9834 00006396 48FFC6                  	inc rsi
  9835 00006399 EBEC                    	jmp .L_lambda_simple_params_loop_0037
  9836                                  .L_lambda_simple_params_end_0037:
  9837 0000639B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9838 0000639E 4889C3                  	mov rbx, rax
  9839 000063A1 58                      	pop rax
  9840 000063A2 C60004                  	mov byte [rax], T_closure
  9841 000063A5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9842 000063A9 48C74009[B6630000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0037
  9843 000063B1 E9E2010000              	jmp .L_lambda_simple_end_0037
  9844                                  .L_lambda_simple_code_0037:	; lambda-simple body
  9845 000063B6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9846 000063BC 740B                    	je .L_lambda_simple_arity_check_ok_0037
  9847 000063BE FF742410                	push qword [rsp + 8 * 2]
  9848 000063C2 6A01                    	push 1
  9849 000063C4 E979F40000              	jmp L_error_incorrect_arity_simple
  9850                                  .L_lambda_simple_arity_check_ok_0037:
  9851 000063C9 C8000000                	enter 0, 0
  9852 000063CD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9853 000063D2 E8B2F40000              	call malloc
  9854 000063D7 50                      	push rax
  9855 000063D8 BF08000000              	mov rdi, 8 * 1	; new rib
  9856 000063DD E8A7F40000              	call malloc
  9857 000063E2 50                      	push rax
  9858 000063E3 BF18000000              	mov rdi, 8 * 3	; extended env
  9859 000063E8 E89CF40000              	call malloc
  9860 000063ED 488B7D10                	mov rdi, ENV
  9861 000063F1 BE00000000              	mov rsi, 0
  9862 000063F6 BA01000000              	mov rdx, 1
  9863                                  .L_lambda_opt_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  9864 000063FB 4883FE02                	cmp rsi, 2
  9865 000063FF 7410                    	je .L_lambda_opt_env_end_000a
  9866 00006401 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9867 00006405 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9868 00006409 48FFC6                  	inc rsi
  9869 0000640C 48FFC2                  	inc rdx
  9870 0000640F EBEA                    	jmp .L_lambda_opt_env_loop_000a
  9871                                  .L_lambda_opt_env_end_000a:
  9872 00006411 5B                      	pop rbx
  9873 00006412 BE00000000              	mov rsi, 0
  9874                                  .L_lambda_opt_params_loop_000a:	; copy params
  9875 00006417 4883FE01                	cmp rsi, 1
  9876 0000641B 740E                    	je .L_lambda_opt_params_end_000a
  9877 0000641D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9878 00006422 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9879 00006426 48FFC6                  	inc rsi
  9880 00006429 EBEC                    	jmp .L_lambda_opt_params_loop_000a
  9881                                  .L_lambda_opt_params_end_000a:
  9882 0000642B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9883 0000642E 4889C3                  	mov rbx, rax
  9884 00006431 58                      	pop rax
  9885 00006432 C60004                  	mov byte [rax], T_closure
  9886 00006435 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9887 00006439 48C74009[46640000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000a
  9888 00006441 E94E010000              	jmp .L_lambda_opt_end_000a
  9889                                  .L_lambda_opt_code_000a:	; lambda-simple body
  9890 00006446 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
  9891 0000644C 740D                    	je .L_lambda_opt_arity_check_exact_000a ;	 if equal, go to exact arity
  9892 0000644E 7F42                    	jg .L_lambda_opt_arity_check_more_000a ;	 if greater than, go to arity more
  9893 00006450 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  9894 00006454 6A00                     	push 0
  9895 00006456 E9FBF30000              	jmp L_error_incorrect_arity_opt
  9896                                  	.L_lambda_opt_arity_check_exact_000a:
  9897 0000645B 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  9898 00006460 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  9899 00006465 4883EC08                	sub rsp, 8
  9900 00006469 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  9901                                  	.L_lambda_opt_exact_shifting_loop_000a:
  9902 0000646D 488B5108                	mov rdx, [rcx + 8]
  9903 00006471 488911                  	mov [rcx], rdx
  9904 00006474 4883C108                	add rcx, 8
  9905 00006478 4839CB                  	cmp rbx, rcx
  9906 0000647B 75F0                    	jne .L_lambda_opt_exact_shifting_loop_000a
  9907                                  	.L_lambda_opt_exact_shifting_loop_end_000a:
  9908 0000647D 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  9909 00006484 4883C001                	add rax, 1 ; 	arg count += 1
  9910 00006488 4889442410              	mov qword [rsp + 8 * 2], rax
  9911 0000648D E987000000              	jmp .L_lambda_opt_stack_adjusted_000a
  9912                                  	.L_lambda_opt_arity_check_more_000a:
  9913 00006492 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  9913 00006494 [0100000000000000] 
  9914 0000649C 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
  9915 000064A2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_000a
  9916                                  	.L_lambda_opt_stack_shrink_loop_000a:
  9917 000064A4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  9918 000064A9 E8DBF30000              	call malloc ;	 allocated memory for the optional scheme list
  9919 000064AE C60021                  	mov byte[rax], T_pair ;	 set type pair
  9920 000064B1 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  9921 000064B5 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  9922 000064B8 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  9923 000064BD 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  9924 000064C2 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  9925 000064C6 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  9926                                  	.L_lambda_opt_more_shifting_loop_000a:
  9927 000064CB 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  9928 000064CE 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  9929 000064D2 4883EB08                	sub rbx, 8 
  9930 000064D6 4839DC                  	cmp rsp, rbx
  9931 000064D9 7EF0                    	jle .L_lambda_opt_more_shifting_loop_000a
  9932                                  	.L_lambda_opt_more_shifting_loop_end_000a:
  9933 000064DB 4883C408                	add rsp, 8 ;	 update rsp
  9934 000064DF 488B5C2410              	mov rbx, [rsp + 8 * 2]
  9935 000064E4 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  9936 000064E8 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  9937 000064ED 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9938 000064F3 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_000a
  9939                                  	.L_lambda_opt_stack_shrink_loop_exit_000a:
  9940 000064F5 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  9941 000064FA 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  9942 000064FF BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  9943 00006504 E880F30000              	call malloc ;	 allocated memory for the optional scheme list
  9944 00006509 C60021                  	mov byte[rax], T_pair ;	 set type pair
  9945 0000650C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  9946 00006510 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  9947 00006514 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  9948                                  	.L_lambda_opt_stack_adjusted_000a:
  9949 00006519 C8000000                	enter 0, 0
  9950                                  	; preparing a tail-call
  9951 0000651D 488B4520                	mov rax, PARAM(0)	; param s
  9952 00006521 50                      	push rax
  9953 00006522 48B8-                   	mov rax, L_constants + 2023
  9953 00006524 [E707000000000000] 
  9954 0000652C 50                      	push rax
  9955 0000652D 488B4510                	mov rax, ENV
  9956 00006531 488B00                  	mov rax, qword [rax + 8 * 0]
  9957 00006534 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
  9958 00006537 50                      	push rax
  9959 00006538 6A03                    	push 3	; arg count
  9960 0000653A 488B0425[21150000]      	mov rax, qword [free_var_112]	; free var fold-left
  9961 00006542 803805                  	cmp byte [rax], T_undefined
  9962 00006545 0F8411F20000            	je L_error_fvar_undefined
  9963 0000654B 803804                  	cmp byte [rax], T_closure
  9964 0000654E 0F858CF20000            	jne L_error_non_closure
  9965 00006554 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9966                                  
  9967                                  	; recycling the current frame
  9968 00006557 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9969 0000655A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9970 0000655D B907000000              	mov rcx, 3 + 4
  9971 00006562 488B5D18                	mov rbx, COUNT
  9972 00006566 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9973 0000656B 488D55F8                	lea rdx, [rbp - 8 * 1]
  9974                                  .L_tc_recycle_frame_loop_0043:
  9975 0000656F 4883F900                	cmp rcx, 0
  9976 00006573 7413                    	je .L_tc_recycle_frame_done_0043
  9977 00006575 488B32                  	mov rsi, qword [rdx]
  9978 00006578 488933                  	mov qword [rbx], rsi
  9979 0000657B 48FFC9                  	dec rcx
  9980 0000657E 4883EB08                	sub rbx, 8 * 1
  9981 00006582 4883EA08                	sub rdx, 8 * 1
  9982 00006586 EBE7                    	jmp .L_tc_recycle_frame_loop_0043
  9983                                  .L_tc_recycle_frame_done_0043:
  9984 00006588 488D6308                	lea rsp, [rbx + 8 * 1]
  9985 0000658C 5D                      	pop rbp	; the proc will restore it!
  9986 0000658D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9987 00006590 C9                      	leave
  9988 00006591 C21800                  	ret AND_KILL_FRAME(1)
  9989                                  .L_lambda_opt_end_000a:	; new closure is in rax
  9990 00006594 C9                      	leave
  9991 00006595 C21800                  	ret AND_KILL_FRAME(1)
  9992                                  .L_lambda_simple_end_0037:	; new closure is in rax
  9993 00006598 803804                  	cmp byte [rax], T_closure
  9994 0000659B 0F853FF20000            	jne L_error_non_closure
  9995 000065A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9996                                  
  9997                                  	; recycling the current frame
  9998 000065A4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9999 000065A7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10000 000065AA B905000000              	mov rcx, 1 + 4
 10001 000065AF 488B5D18                	mov rbx, COUNT
 10002 000065B3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10003 000065B8 488D55F8                	lea rdx, [rbp - 8 * 1]
 10004                                  .L_tc_recycle_frame_loop_0044:
 10005 000065BC 4883F900                	cmp rcx, 0
 10006 000065C0 7413                    	je .L_tc_recycle_frame_done_0044
 10007 000065C2 488B32                  	mov rsi, qword [rdx]
 10008 000065C5 488933                  	mov qword [rbx], rsi
 10009 000065C8 48FFC9                  	dec rcx
 10010 000065CB 4883EB08                	sub rbx, 8 * 1
 10011 000065CF 4883EA08                	sub rdx, 8 * 1
 10012 000065D3 EBE7                    	jmp .L_tc_recycle_frame_loop_0044
 10013                                  .L_tc_recycle_frame_done_0044:
 10014 000065D5 488D6308                	lea rsp, [rbx + 8 * 1]
 10015 000065D9 5D                      	pop rbp	; the proc will restore it!
 10016 000065DA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10017 000065DD C9                      	leave
 10018 000065DE C21800                  	ret AND_KILL_FRAME(1)
 10019                                  .L_lambda_simple_end_0035:	; new closure is in rax
 10020 000065E1 803804                  	cmp byte [rax], T_closure
 10021 000065E4 0F85F6F10000            	jne L_error_non_closure
 10022 000065EA FF7001                  	push SOB_CLOSURE_ENV(rax)
 10023 000065ED FF5009                  	call SOB_CLOSURE_CODE(rax)
 10024 000065F0 48890425[54150000]      	mov qword [free_var_115], rax
 10025 000065F8 48B8-                   	mov rax, sob_void
 10025 000065FA [0000000000000000] 
 10026                                  
 10027 00006602 4889C7                  	mov rdi, rax
 10028 00006605 E891F30000              	call print_sexpr_if_not_void
 10029                                  
 10030 0000660A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10031 0000660F E875F20000              	call malloc
 10032 00006614 50                      	push rax
 10033 00006615 BF00000000              	mov rdi, 8 * 0	; new rib
 10034 0000661A E86AF20000              	call malloc
 10035 0000661F 50                      	push rax
 10036 00006620 BF08000000              	mov rdi, 8 * 1	; extended env
 10037 00006625 E85FF20000              	call malloc
 10038 0000662A 488B7D10                	mov rdi, ENV
 10039 0000662E BE00000000              	mov rsi, 0
 10040 00006633 BA01000000              	mov rdx, 1
 10041                                  .L_lambda_simple_env_loop_0038:	; ext_env[i + 1] <-- env[i]
 10042 00006638 4883FE00                	cmp rsi, 0
 10043 0000663C 7410                    	je .L_lambda_simple_env_end_0038
 10044 0000663E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10045 00006642 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10046 00006646 48FFC6                  	inc rsi
 10047 00006649 48FFC2                  	inc rdx
 10048 0000664C EBEA                    	jmp .L_lambda_simple_env_loop_0038
 10049                                  .L_lambda_simple_env_end_0038:
 10050 0000664E 5B                      	pop rbx
 10051 0000664F BE00000000              	mov rsi, 0
 10052                                  .L_lambda_simple_params_loop_0038:	; copy params
 10053 00006654 4883FE00                	cmp rsi, 0
 10054 00006658 740E                    	je .L_lambda_simple_params_end_0038
 10055 0000665A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10056 0000665F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10057 00006663 48FFC6                  	inc rsi
 10058 00006666 EBEC                    	jmp .L_lambda_simple_params_loop_0038
 10059                                  .L_lambda_simple_params_end_0038:
 10060 00006668 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10061 0000666B 4889C3                  	mov rbx, rax
 10062 0000666E 58                      	pop rax
 10063 0000666F C60004                  	mov byte [rax], T_closure
 10064 00006672 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10065 00006676 48C74009[83660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0038
 10066 0000667E E989000000              	jmp .L_lambda_simple_end_0038
 10067                                  .L_lambda_simple_code_0038:	; lambda-simple body
 10068 00006683 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10069 00006689 740B                    	je .L_lambda_simple_arity_check_ok_0038
 10070 0000668B FF742410                	push qword [rsp + 8 * 2]
 10071 0000668F 6A00                    	push 0
 10072 00006691 E9ACF10000              	jmp L_error_incorrect_arity_simple
 10073                                  .L_lambda_simple_arity_check_ok_0038:
 10074 00006696 C8000000                	enter 0, 0
 10075                                  	; preparing a tail-call
 10076 0000669A 48B8-                   	mov rax, L_constants + 2075
 10076 0000669C [1B08000000000000] 
 10077 000066A4 50                      	push rax
 10078 000066A5 48B8-                   	mov rax, L_constants + 2139
 10078 000066A7 [5B08000000000000] 
 10079 000066AF 50                      	push rax
 10080 000066B0 6A02                    	push 2	; arg count
 10081 000066B2 488B0425[7B100000]      	mov rax, qword [free_var_42]	; free var error
 10082 000066BA 803805                  	cmp byte [rax], T_undefined
 10083 000066BD 0F8499F00000            	je L_error_fvar_undefined
 10084 000066C3 803804                  	cmp byte [rax], T_closure
 10085 000066C6 0F8514F10000            	jne L_error_non_closure
 10086 000066CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 10087                                  
 10088                                  	; recycling the current frame
 10089 000066CF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10090 000066D2 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10091 000066D5 B906000000              	mov rcx, 2 + 4
 10092 000066DA 488B5D18                	mov rbx, COUNT
 10093 000066DE 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10094 000066E3 488D55F8                	lea rdx, [rbp - 8 * 1]
 10095                                  .L_tc_recycle_frame_loop_0045:
 10096 000066E7 4883F900                	cmp rcx, 0
 10097 000066EB 7413                    	je .L_tc_recycle_frame_done_0045
 10098 000066ED 488B32                  	mov rsi, qword [rdx]
 10099 000066F0 488933                  	mov qword [rbx], rsi
 10100 000066F3 48FFC9                  	dec rcx
 10101 000066F6 4883EB08                	sub rbx, 8 * 1
 10102 000066FA 4883EA08                	sub rdx, 8 * 1
 10103 000066FE EBE7                    	jmp .L_tc_recycle_frame_loop_0045
 10104                                  .L_tc_recycle_frame_done_0045:
 10105 00006700 488D6308                	lea rsp, [rbx + 8 * 1]
 10106 00006704 5D                      	pop rbp	; the proc will restore it!
 10107 00006705 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10108 00006708 C9                      	leave
 10109 00006709 C21000                  	ret AND_KILL_FRAME(0)
 10110                                  .L_lambda_simple_end_0038:	; new closure is in rax
 10111 0000670C 50                      	push rax
 10112 0000670D 6A01                    	push 1	; arg count
 10113 0000670F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10114 00006714 E870F10000              	call malloc
 10115 00006719 50                      	push rax
 10116 0000671A BF00000000              	mov rdi, 8 * 0	; new rib
 10117 0000671F E865F10000              	call malloc
 10118 00006724 50                      	push rax
 10119 00006725 BF08000000              	mov rdi, 8 * 1	; extended env
 10120 0000672A E85AF10000              	call malloc
 10121 0000672F 488B7D10                	mov rdi, ENV
 10122 00006733 BE00000000              	mov rsi, 0
 10123 00006738 BA01000000              	mov rdx, 1
 10124                                  .L_lambda_simple_env_loop_0039:	; ext_env[i + 1] <-- env[i]
 10125 0000673D 4883FE00                	cmp rsi, 0
 10126 00006741 7410                    	je .L_lambda_simple_env_end_0039
 10127 00006743 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10128 00006747 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10129 0000674B 48FFC6                  	inc rsi
 10130 0000674E 48FFC2                  	inc rdx
 10131 00006751 EBEA                    	jmp .L_lambda_simple_env_loop_0039
 10132                                  .L_lambda_simple_env_end_0039:
 10133 00006753 5B                      	pop rbx
 10134 00006754 BE00000000              	mov rsi, 0
 10135                                  .L_lambda_simple_params_loop_0039:	; copy params
 10136 00006759 4883FE00                	cmp rsi, 0
 10137 0000675D 740E                    	je .L_lambda_simple_params_end_0039
 10138 0000675F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10139 00006764 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10140 00006768 48FFC6                  	inc rsi
 10141 0000676B EBEC                    	jmp .L_lambda_simple_params_loop_0039
 10142                                  .L_lambda_simple_params_end_0039:
 10143 0000676D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10144 00006770 4889C3                  	mov rbx, rax
 10145 00006773 58                      	pop rax
 10146 00006774 C60004                  	mov byte [rax], T_closure
 10147 00006777 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10148 0000677B 48C74009[88670000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0039
 10149 00006783 E9060D0000              	jmp .L_lambda_simple_end_0039
 10150                                  .L_lambda_simple_code_0039:	; lambda-simple body
 10151 00006788 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10152 0000678E 740B                    	je .L_lambda_simple_arity_check_ok_0039
 10153 00006790 FF742410                	push qword [rsp + 8 * 2]
 10154 00006794 6A01                    	push 1
 10155 00006796 E9A7F00000              	jmp L_error_incorrect_arity_simple
 10156                                  .L_lambda_simple_arity_check_ok_0039:
 10157 0000679B C8000000                	enter 0, 0
 10158                                  	; preparing a tail-call
 10159 0000679F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10160 000067A4 E8E0F00000              	call malloc
 10161 000067A9 50                      	push rax
 10162 000067AA BF08000000              	mov rdi, 8 * 1	; new rib
 10163 000067AF E8D5F00000              	call malloc
 10164 000067B4 50                      	push rax
 10165 000067B5 BF10000000              	mov rdi, 8 * 2	; extended env
 10166 000067BA E8CAF00000              	call malloc
 10167 000067BF 488B7D10                	mov rdi, ENV
 10168 000067C3 BE00000000              	mov rsi, 0
 10169 000067C8 BA01000000              	mov rdx, 1
 10170                                  .L_lambda_simple_env_loop_003a:	; ext_env[i + 1] <-- env[i]
 10171 000067CD 4883FE01                	cmp rsi, 1
 10172 000067D1 7410                    	je .L_lambda_simple_env_end_003a
 10173 000067D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10174 000067D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10175 000067DB 48FFC6                  	inc rsi
 10176 000067DE 48FFC2                  	inc rdx
 10177 000067E1 EBEA                    	jmp .L_lambda_simple_env_loop_003a
 10178                                  .L_lambda_simple_env_end_003a:
 10179 000067E3 5B                      	pop rbx
 10180 000067E4 BE00000000              	mov rsi, 0
 10181                                  .L_lambda_simple_params_loop_003a:	; copy params
 10182 000067E9 4883FE01                	cmp rsi, 1
 10183 000067ED 740E                    	je .L_lambda_simple_params_end_003a
 10184 000067EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10185 000067F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10186 000067F8 48FFC6                  	inc rsi
 10187 000067FB EBEC                    	jmp .L_lambda_simple_params_loop_003a
 10188                                  .L_lambda_simple_params_end_003a:
 10189 000067FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10190 00006800 4889C3                  	mov rbx, rax
 10191 00006803 58                      	pop rax
 10192 00006804 C60004                  	mov byte [rax], T_closure
 10193 00006807 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10194 0000680B 48C74009[18680000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003a
 10195 00006813 E92B080000              	jmp .L_lambda_simple_end_003a
 10196                                  .L_lambda_simple_code_003a:	; lambda-simple body
 10197 00006818 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10198 0000681E 740B                    	je .L_lambda_simple_arity_check_ok_003a
 10199 00006820 FF742410                	push qword [rsp + 8 * 2]
 10200 00006824 6A02                    	push 2
 10201 00006826 E917F00000              	jmp L_error_incorrect_arity_simple
 10202                                  .L_lambda_simple_arity_check_ok_003a:
 10203 0000682B C8000000                	enter 0, 0
 10204 0000682F 488B4520                	mov rax, PARAM(0)	; param a
 10205 00006833 50                      	push rax
 10206 00006834 6A01                    	push 1	; arg count
 10207 00006836 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10208 0000683E 803805                  	cmp byte [rax], T_undefined
 10209 00006841 0F8415EF0000            	je L_error_fvar_undefined
 10210 00006847 803804                  	cmp byte [rax], T_closure
 10211 0000684A 0F8590EF0000            	jne L_error_non_closure
 10212 00006850 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10213 00006853 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10214                                  
 10215 00006856 483D[02000000]          	cmp rax, sob_boolean_false
 10216 0000685C 0F8463020000            	je .L_if_else_001b
 10217 00006862 488B4528                	mov rax, PARAM(1)	; param b
 10218 00006866 50                      	push rax
 10219 00006867 6A01                    	push 1	; arg count
 10220 00006869 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10221 00006871 803805                  	cmp byte [rax], T_undefined
 10222 00006874 0F84E2EE0000            	je L_error_fvar_undefined
 10223 0000687A 803804                  	cmp byte [rax], T_closure
 10224 0000687D 0F855DEF0000            	jne L_error_non_closure
 10225 00006883 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10226 00006886 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10227                                  
 10228 00006889 483D[02000000]          	cmp rax, sob_boolean_false
 10229 0000688F 7467                    	je .L_if_else_001c
 10230                                  	; preparing a tail-call
 10231 00006891 488B4528                	mov rax, PARAM(1)	; param b
 10232 00006895 50                      	push rax
 10233 00006896 488B4520                	mov rax, PARAM(0)	; param a
 10234 0000689A 50                      	push rax
 10235 0000689B 6A02                    	push 2	; arg count
 10236 0000689D 488B0425[48100000]      	mov rax, qword [free_var_39]	; free var __bin-sub-zz
 10237 000068A5 803805                  	cmp byte [rax], T_undefined
 10238 000068A8 0F84AEEE0000            	je L_error_fvar_undefined
 10239 000068AE 803804                  	cmp byte [rax], T_closure
 10240 000068B1 0F8529EF0000            	jne L_error_non_closure
 10241 000068B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10242                                  
 10243                                  	; recycling the current frame
 10244 000068BA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10245 000068BD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10246 000068C0 B906000000              	mov rcx, 2 + 4
 10247 000068C5 488B5D18                	mov rbx, COUNT
 10248 000068C9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10249 000068CE 488D55F8                	lea rdx, [rbp - 8 * 1]
 10250                                  .L_tc_recycle_frame_loop_0046:
 10251 000068D2 4883F900                	cmp rcx, 0
 10252 000068D6 7413                    	je .L_tc_recycle_frame_done_0046
 10253 000068D8 488B32                  	mov rsi, qword [rdx]
 10254 000068DB 488933                  	mov qword [rbx], rsi
 10255 000068DE 48FFC9                  	dec rcx
 10256 000068E1 4883EB08                	sub rbx, 8 * 1
 10257 000068E5 4883EA08                	sub rdx, 8 * 1
 10258 000068E9 EBE7                    	jmp .L_tc_recycle_frame_loop_0046
 10259                                  .L_tc_recycle_frame_done_0046:
 10260 000068EB 488D6308                	lea rsp, [rbx + 8 * 1]
 10261 000068EF 5D                      	pop rbp	; the proc will restore it!
 10262 000068F0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10263                                  
 10264 000068F3 E9C8010000              	jmp .L_if_end_001c
 10265                                  
 10266                                  	.L_if_else_001c:
 10267 000068F8 488B4528                	mov rax, PARAM(1)	; param b
 10268 000068FC 50                      	push rax
 10269 000068FD 6A01                    	push 1	; arg count
 10270 000068FF 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10271 00006907 803805                  	cmp byte [rax], T_undefined
 10272 0000690A 0F844CEE0000            	je L_error_fvar_undefined
 10273 00006910 803804                  	cmp byte [rax], T_closure
 10274 00006913 0F85C7EE0000            	jne L_error_non_closure
 10275 00006919 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10276 0000691C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10277                                  
 10278 0000691F 483D[02000000]          	cmp rax, sob_boolean_false
 10279 00006925 0F848A000000            	je .L_if_else_001d
 10280                                  	; preparing a tail-call
 10281 0000692B 488B4528                	mov rax, PARAM(1)	; param b
 10282 0000692F 50                      	push rax
 10283 00006930 488B4520                	mov rax, PARAM(0)	; param a
 10284 00006934 50                      	push rax
 10285 00006935 6A01                    	push 1	; arg count
 10286 00006937 488B0425[CF110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 10287 0000693F 803805                  	cmp byte [rax], T_undefined
 10288 00006942 0F8414EE0000            	je L_error_fvar_undefined
 10289 00006948 803804                  	cmp byte [rax], T_closure
 10290 0000694B 0F858FEE0000            	jne L_error_non_closure
 10291 00006951 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10292 00006954 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10293 00006957 50                      	push rax
 10294 00006958 6A02                    	push 2	; arg count
 10295 0000695A 488B0425[04100000]      	mov rax, qword [free_var_35]	; free var __bin-sub-qq
 10296 00006962 803805                  	cmp byte [rax], T_undefined
 10297 00006965 0F84F1ED0000            	je L_error_fvar_undefined
 10298 0000696B 803804                  	cmp byte [rax], T_closure
 10299 0000696E 0F856CEE0000            	jne L_error_non_closure
 10300 00006974 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10301                                  
 10302                                  	; recycling the current frame
 10303 00006977 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10304 0000697A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10305 0000697D B906000000              	mov rcx, 2 + 4
 10306 00006982 488B5D18                	mov rbx, COUNT
 10307 00006986 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10308 0000698B 488D55F8                	lea rdx, [rbp - 8 * 1]
 10309                                  .L_tc_recycle_frame_loop_0047:
 10310 0000698F 4883F900                	cmp rcx, 0
 10311 00006993 7413                    	je .L_tc_recycle_frame_done_0047
 10312 00006995 488B32                  	mov rsi, qword [rdx]
 10313 00006998 488933                  	mov qword [rbx], rsi
 10314 0000699B 48FFC9                  	dec rcx
 10315 0000699E 4883EB08                	sub rbx, 8 * 1
 10316 000069A2 4883EA08                	sub rdx, 8 * 1
 10317 000069A6 EBE7                    	jmp .L_tc_recycle_frame_loop_0047
 10318                                  .L_tc_recycle_frame_done_0047:
 10319 000069A8 488D6308                	lea rsp, [rbx + 8 * 1]
 10320 000069AC 5D                      	pop rbp	; the proc will restore it!
 10321 000069AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10322                                  
 10323 000069B0 E90B010000              	jmp .L_if_end_001d
 10324                                  
 10325                                  	.L_if_else_001d:
 10326 000069B5 488B4528                	mov rax, PARAM(1)	; param b
 10327 000069B9 50                      	push rax
 10328 000069BA 6A01                    	push 1	; arg count
 10329 000069BC 488B0425[87150000]      	mov rax, qword [free_var_118]	; free var real
 10330 000069C4 803805                  	cmp byte [rax], T_undefined
 10331 000069C7 0F848FED0000            	je L_error_fvar_undefined
 10332 000069CD 803804                  	cmp byte [rax], T_closure
 10333 000069D0 0F850AEE0000            	jne L_error_non_closure
 10334 000069D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10335 000069D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10336                                  
 10337 000069DC 483D[02000000]          	cmp rax, sob_boolean_false
 10338 000069E2 0F8487000000            	je .L_if_else_001e
 10339                                  	; preparing a tail-call
 10340 000069E8 488B4528                	mov rax, PARAM(1)	; param b
 10341 000069EC 50                      	push rax
 10342 000069ED 488B4520                	mov rax, PARAM(0)	; param a
 10343 000069F1 50                      	push rax
 10344 000069F2 6A01                    	push 1	; arg count
 10345 000069F4 488B0425[270F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 10346 000069FC 803805                  	cmp byte [rax], T_undefined
 10347 000069FF 0F8457ED0000            	je L_error_fvar_undefined
 10348 00006A05 803804                  	cmp byte [rax], T_closure
 10349 00006A08 0F85D2ED0000            	jne L_error_non_closure
 10350 00006A0E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10351 00006A11 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10352 00006A14 50                      	push rax
 10353 00006A15 6A02                    	push 2	; arg count
 10354 00006A17 488B0425[C00F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10355 00006A1F 803805                  	cmp byte [rax], T_undefined
 10356 00006A22 0F8434ED0000            	je L_error_fvar_undefined
 10357 00006A28 803804                  	cmp byte [rax], T_closure
 10358 00006A2B 0F85AFED0000            	jne L_error_non_closure
 10359 00006A31 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10360                                  
 10361                                  	; recycling the current frame
 10362 00006A34 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10363 00006A37 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10364 00006A3A B906000000              	mov rcx, 2 + 4
 10365 00006A3F 488B5D18                	mov rbx, COUNT
 10366 00006A43 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10367 00006A48 488D55F8                	lea rdx, [rbp - 8 * 1]
 10368                                  .L_tc_recycle_frame_loop_0048:
 10369 00006A4C 4883F900                	cmp rcx, 0
 10370 00006A50 7413                    	je .L_tc_recycle_frame_done_0048
 10371 00006A52 488B32                  	mov rsi, qword [rdx]
 10372 00006A55 488933                  	mov qword [rbx], rsi
 10373 00006A58 48FFC9                  	dec rcx
 10374 00006A5B 4883EB08                	sub rbx, 8 * 1
 10375 00006A5F 4883EA08                	sub rdx, 8 * 1
 10376 00006A63 EBE7                    	jmp .L_tc_recycle_frame_loop_0048
 10377                                  .L_tc_recycle_frame_done_0048:
 10378 00006A65 488D6308                	lea rsp, [rbx + 8 * 1]
 10379 00006A69 5D                      	pop rbp	; the proc will restore it!
 10380 00006A6A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10381                                  
 10382 00006A6D EB51                    	jmp .L_if_end_001e
 10383                                  
 10384                                  	.L_if_else_001e:
 10385                                  	; preparing a tail-call
 10386 00006A6F 6A00                    	push 0	; arg count
 10387 00006A71 488B4510                	mov rax, ENV
 10388 00006A75 488B00                  	mov rax, qword [rax + 8 * 0]
 10389 00006A78 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10390 00006A7B 803804                  	cmp byte [rax], T_closure
 10391 00006A7E 0F855CED0000            	jne L_error_non_closure
 10392 00006A84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10393                                  
 10394                                  	; recycling the current frame
 10395 00006A87 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10396 00006A8A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10397 00006A8D B904000000              	mov rcx, 0 + 4
 10398 00006A92 488B5D18                	mov rbx, COUNT
 10399 00006A96 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10400 00006A9B 488D55F8                	lea rdx, [rbp - 8 * 1]
 10401                                  .L_tc_recycle_frame_loop_0049:
 10402 00006A9F 4883F900                	cmp rcx, 0
 10403 00006AA3 7413                    	je .L_tc_recycle_frame_done_0049
 10404 00006AA5 488B32                  	mov rsi, qword [rdx]
 10405 00006AA8 488933                  	mov qword [rbx], rsi
 10406 00006AAB 48FFC9                  	dec rcx
 10407 00006AAE 4883EB08                	sub rbx, 8 * 1
 10408 00006AB2 4883EA08                	sub rdx, 8 * 1
 10409 00006AB6 EBE7                    	jmp .L_tc_recycle_frame_loop_0049
 10410                                  .L_tc_recycle_frame_done_0049:
 10411 00006AB8 488D6308                	lea rsp, [rbx + 8 * 1]
 10412 00006ABC 5D                      	pop rbp	; the proc will restore it!
 10413 00006ABD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10414                                  
 10415                                  	.L_if_end_001e:
 10416                                  
 10417                                  	.L_if_end_001d:
 10418                                  
 10419                                  	.L_if_end_001c:
 10420                                  
 10421 00006AC0 E97A050000              	jmp .L_if_end_001b
 10422                                  
 10423                                  	.L_if_else_001b:
 10424 00006AC5 488B4520                	mov rax, PARAM(0)	; param a
 10425 00006AC9 50                      	push rax
 10426 00006ACA 6A01                    	push 1	; arg count
 10427 00006ACC 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10428 00006AD4 803805                  	cmp byte [rax], T_undefined
 10429 00006AD7 0F847FEC0000            	je L_error_fvar_undefined
 10430 00006ADD 803804                  	cmp byte [rax], T_closure
 10431 00006AE0 0F85FAEC0000            	jne L_error_non_closure
 10432 00006AE6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10433 00006AE9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10434                                  
 10435 00006AEC 483D[02000000]          	cmp rax, sob_boolean_false
 10436 00006AF2 0F8463020000            	je .L_if_else_001f
 10437 00006AF8 488B4528                	mov rax, PARAM(1)	; param b
 10438 00006AFC 50                      	push rax
 10439 00006AFD 6A01                    	push 1	; arg count
 10440 00006AFF 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10441 00006B07 803805                  	cmp byte [rax], T_undefined
 10442 00006B0A 0F844CEC0000            	je L_error_fvar_undefined
 10443 00006B10 803804                  	cmp byte [rax], T_closure
 10444 00006B13 0F85C7EC0000            	jne L_error_non_closure
 10445 00006B19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10446 00006B1C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10447                                  
 10448 00006B1F 483D[02000000]          	cmp rax, sob_boolean_false
 10449 00006B25 0F848A000000            	je .L_if_else_0020
 10450                                  	; preparing a tail-call
 10451 00006B2B 488B4528                	mov rax, PARAM(1)	; param b
 10452 00006B2F 50                      	push rax
 10453 00006B30 6A01                    	push 1	; arg count
 10454 00006B32 488B0425[CF110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 10455 00006B3A 803805                  	cmp byte [rax], T_undefined
 10456 00006B3D 0F8419EC0000            	je L_error_fvar_undefined
 10457 00006B43 803804                  	cmp byte [rax], T_closure
 10458 00006B46 0F8594EC0000            	jne L_error_non_closure
 10459 00006B4C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10460 00006B4F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10461 00006B52 50                      	push rax
 10462 00006B53 488B4520                	mov rax, PARAM(0)	; param a
 10463 00006B57 50                      	push rax
 10464 00006B58 6A02                    	push 2	; arg count
 10465 00006B5A 488B0425[04100000]      	mov rax, qword [free_var_35]	; free var __bin-sub-qq
 10466 00006B62 803805                  	cmp byte [rax], T_undefined
 10467 00006B65 0F84F1EB0000            	je L_error_fvar_undefined
 10468 00006B6B 803804                  	cmp byte [rax], T_closure
 10469 00006B6E 0F856CEC0000            	jne L_error_non_closure
 10470 00006B74 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10471                                  
 10472                                  	; recycling the current frame
 10473 00006B77 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10474 00006B7A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10475 00006B7D B906000000              	mov rcx, 2 + 4
 10476 00006B82 488B5D18                	mov rbx, COUNT
 10477 00006B86 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10478 00006B8B 488D55F8                	lea rdx, [rbp - 8 * 1]
 10479                                  .L_tc_recycle_frame_loop_004a:
 10480 00006B8F 4883F900                	cmp rcx, 0
 10481 00006B93 7413                    	je .L_tc_recycle_frame_done_004a
 10482 00006B95 488B32                  	mov rsi, qword [rdx]
 10483 00006B98 488933                  	mov qword [rbx], rsi
 10484 00006B9B 48FFC9                  	dec rcx
 10485 00006B9E 4883EB08                	sub rbx, 8 * 1
 10486 00006BA2 4883EA08                	sub rdx, 8 * 1
 10487 00006BA6 EBE7                    	jmp .L_tc_recycle_frame_loop_004a
 10488                                  .L_tc_recycle_frame_done_004a:
 10489 00006BA8 488D6308                	lea rsp, [rbx + 8 * 1]
 10490 00006BAC 5D                      	pop rbp	; the proc will restore it!
 10491 00006BAD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10492                                  
 10493 00006BB0 E9A1010000              	jmp .L_if_end_0020
 10494                                  
 10495                                  	.L_if_else_0020:
 10496 00006BB5 488B4528                	mov rax, PARAM(1)	; param b
 10497 00006BB9 50                      	push rax
 10498 00006BBA 6A01                    	push 1	; arg count
 10499 00006BBC 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10500 00006BC4 803805                  	cmp byte [rax], T_undefined
 10501 00006BC7 0F848FEB0000            	je L_error_fvar_undefined
 10502 00006BCD 803804                  	cmp byte [rax], T_closure
 10503 00006BD0 0F850AEC0000            	jne L_error_non_closure
 10504 00006BD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10505 00006BD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10506                                  
 10507 00006BDC 483D[02000000]          	cmp rax, sob_boolean_false
 10508 00006BE2 7467                    	je .L_if_else_0021
 10509                                  	; preparing a tail-call
 10510 00006BE4 488B4528                	mov rax, PARAM(1)	; param b
 10511 00006BE8 50                      	push rax
 10512 00006BE9 488B4520                	mov rax, PARAM(0)	; param a
 10513 00006BED 50                      	push rax
 10514 00006BEE 6A02                    	push 2	; arg count
 10515 00006BF0 488B0425[04100000]      	mov rax, qword [free_var_35]	; free var __bin-sub-qq
 10516 00006BF8 803805                  	cmp byte [rax], T_undefined
 10517 00006BFB 0F845BEB0000            	je L_error_fvar_undefined
 10518 00006C01 803804                  	cmp byte [rax], T_closure
 10519 00006C04 0F85D6EB0000            	jne L_error_non_closure
 10520 00006C0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10521                                  
 10522                                  	; recycling the current frame
 10523 00006C0D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10524 00006C10 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10525 00006C13 B906000000              	mov rcx, 2 + 4
 10526 00006C18 488B5D18                	mov rbx, COUNT
 10527 00006C1C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10528 00006C21 488D55F8                	lea rdx, [rbp - 8 * 1]
 10529                                  .L_tc_recycle_frame_loop_004b:
 10530 00006C25 4883F900                	cmp rcx, 0
 10531 00006C29 7413                    	je .L_tc_recycle_frame_done_004b
 10532 00006C2B 488B32                  	mov rsi, qword [rdx]
 10533 00006C2E 488933                  	mov qword [rbx], rsi
 10534 00006C31 48FFC9                  	dec rcx
 10535 00006C34 4883EB08                	sub rbx, 8 * 1
 10536 00006C38 4883EA08                	sub rdx, 8 * 1
 10537 00006C3C EBE7                    	jmp .L_tc_recycle_frame_loop_004b
 10538                                  .L_tc_recycle_frame_done_004b:
 10539 00006C3E 488D6308                	lea rsp, [rbx + 8 * 1]
 10540 00006C42 5D                      	pop rbp	; the proc will restore it!
 10541 00006C43 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10542                                  
 10543 00006C46 E90B010000              	jmp .L_if_end_0021
 10544                                  
 10545                                  	.L_if_else_0021:
 10546 00006C4B 488B4528                	mov rax, PARAM(1)	; param b
 10547 00006C4F 50                      	push rax
 10548 00006C50 6A01                    	push 1	; arg count
 10549 00006C52 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 10550 00006C5A 803805                  	cmp byte [rax], T_undefined
 10551 00006C5D 0F84F9EA0000            	je L_error_fvar_undefined
 10552 00006C63 803804                  	cmp byte [rax], T_closure
 10553 00006C66 0F8574EB0000            	jne L_error_non_closure
 10554 00006C6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10555 00006C6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10556                                  
 10557 00006C72 483D[02000000]          	cmp rax, sob_boolean_false
 10558 00006C78 0F8487000000            	je .L_if_else_0022
 10559                                  	; preparing a tail-call
 10560 00006C7E 488B4528                	mov rax, PARAM(1)	; param b
 10561 00006C82 50                      	push rax
 10562 00006C83 488B4520                	mov rax, PARAM(0)	; param a
 10563 00006C87 50                      	push rax
 10564 00006C88 6A01                    	push 1	; arg count
 10565 00006C8A 488B0425[380F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 10566 00006C92 803805                  	cmp byte [rax], T_undefined
 10567 00006C95 0F84C1EA0000            	je L_error_fvar_undefined
 10568 00006C9B 803804                  	cmp byte [rax], T_closure
 10569 00006C9E 0F853CEB0000            	jne L_error_non_closure
 10570 00006CA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10571 00006CA7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10572 00006CAA 50                      	push rax
 10573 00006CAB 6A02                    	push 2	; arg count
 10574 00006CAD 488B0425[C00F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10575 00006CB5 803805                  	cmp byte [rax], T_undefined
 10576 00006CB8 0F849EEA0000            	je L_error_fvar_undefined
 10577 00006CBE 803804                  	cmp byte [rax], T_closure
 10578 00006CC1 0F8519EB0000            	jne L_error_non_closure
 10579 00006CC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10580                                  
 10581                                  	; recycling the current frame
 10582 00006CCA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10583 00006CCD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10584 00006CD0 B906000000              	mov rcx, 2 + 4
 10585 00006CD5 488B5D18                	mov rbx, COUNT
 10586 00006CD9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10587 00006CDE 488D55F8                	lea rdx, [rbp - 8 * 1]
 10588                                  .L_tc_recycle_frame_loop_004c:
 10589 00006CE2 4883F900                	cmp rcx, 0
 10590 00006CE6 7413                    	je .L_tc_recycle_frame_done_004c
 10591 00006CE8 488B32                  	mov rsi, qword [rdx]
 10592 00006CEB 488933                  	mov qword [rbx], rsi
 10593 00006CEE 48FFC9                  	dec rcx
 10594 00006CF1 4883EB08                	sub rbx, 8 * 1
 10595 00006CF5 4883EA08                	sub rdx, 8 * 1
 10596 00006CF9 EBE7                    	jmp .L_tc_recycle_frame_loop_004c
 10597                                  .L_tc_recycle_frame_done_004c:
 10598 00006CFB 488D6308                	lea rsp, [rbx + 8 * 1]
 10599 00006CFF 5D                      	pop rbp	; the proc will restore it!
 10600 00006D00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10601                                  
 10602 00006D03 EB51                    	jmp .L_if_end_0022
 10603                                  
 10604                                  	.L_if_else_0022:
 10605                                  	; preparing a tail-call
 10606 00006D05 6A00                    	push 0	; arg count
 10607 00006D07 488B4510                	mov rax, ENV
 10608 00006D0B 488B00                  	mov rax, qword [rax + 8 * 0]
 10609 00006D0E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10610 00006D11 803804                  	cmp byte [rax], T_closure
 10611 00006D14 0F85C6EA0000            	jne L_error_non_closure
 10612 00006D1A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10613                                  
 10614                                  	; recycling the current frame
 10615 00006D1D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10616 00006D20 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10617 00006D23 B904000000              	mov rcx, 0 + 4
 10618 00006D28 488B5D18                	mov rbx, COUNT
 10619 00006D2C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10620 00006D31 488D55F8                	lea rdx, [rbp - 8 * 1]
 10621                                  .L_tc_recycle_frame_loop_004d:
 10622 00006D35 4883F900                	cmp rcx, 0
 10623 00006D39 7413                    	je .L_tc_recycle_frame_done_004d
 10624 00006D3B 488B32                  	mov rsi, qword [rdx]
 10625 00006D3E 488933                  	mov qword [rbx], rsi
 10626 00006D41 48FFC9                  	dec rcx
 10627 00006D44 4883EB08                	sub rbx, 8 * 1
 10628 00006D48 4883EA08                	sub rdx, 8 * 1
 10629 00006D4C EBE7                    	jmp .L_tc_recycle_frame_loop_004d
 10630                                  .L_tc_recycle_frame_done_004d:
 10631 00006D4E 488D6308                	lea rsp, [rbx + 8 * 1]
 10632 00006D52 5D                      	pop rbp	; the proc will restore it!
 10633 00006D53 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10634                                  
 10635                                  	.L_if_end_0022:
 10636                                  
 10637                                  	.L_if_end_0021:
 10638                                  
 10639                                  	.L_if_end_0020:
 10640                                  
 10641 00006D56 E9E4020000              	jmp .L_if_end_001f
 10642                                  
 10643                                  	.L_if_else_001f:
 10644 00006D5B 488B4520                	mov rax, PARAM(0)	; param a
 10645 00006D5F 50                      	push rax
 10646 00006D60 6A01                    	push 1	; arg count
 10647 00006D62 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 10648 00006D6A 803805                  	cmp byte [rax], T_undefined
 10649 00006D6D 0F84E9E90000            	je L_error_fvar_undefined
 10650 00006D73 803804                  	cmp byte [rax], T_closure
 10651 00006D76 0F8564EA0000            	jne L_error_non_closure
 10652 00006D7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10653 00006D7F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10654                                  
 10655 00006D82 483D[02000000]          	cmp rax, sob_boolean_false
 10656 00006D88 0F8460020000            	je .L_if_else_0023
 10657 00006D8E 488B4528                	mov rax, PARAM(1)	; param b
 10658 00006D92 50                      	push rax
 10659 00006D93 6A01                    	push 1	; arg count
 10660 00006D95 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10661 00006D9D 803805                  	cmp byte [rax], T_undefined
 10662 00006DA0 0F84B6E90000            	je L_error_fvar_undefined
 10663 00006DA6 803804                  	cmp byte [rax], T_closure
 10664 00006DA9 0F8531EA0000            	jne L_error_non_closure
 10665 00006DAF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10666 00006DB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10667                                  
 10668 00006DB5 483D[02000000]          	cmp rax, sob_boolean_false
 10669 00006DBB 0F848A000000            	je .L_if_else_0024
 10670                                  	; preparing a tail-call
 10671 00006DC1 488B4528                	mov rax, PARAM(1)	; param b
 10672 00006DC5 50                      	push rax
 10673 00006DC6 6A01                    	push 1	; arg count
 10674 00006DC8 488B0425[270F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 10675 00006DD0 803805                  	cmp byte [rax], T_undefined
 10676 00006DD3 0F8483E90000            	je L_error_fvar_undefined
 10677 00006DD9 803804                  	cmp byte [rax], T_closure
 10678 00006DDC 0F85FEE90000            	jne L_error_non_closure
 10679 00006DE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10680 00006DE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10681 00006DE8 50                      	push rax
 10682 00006DE9 488B4520                	mov rax, PARAM(0)	; param a
 10683 00006DED 50                      	push rax
 10684 00006DEE 6A02                    	push 2	; arg count
 10685 00006DF0 488B0425[C00F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10686 00006DF8 803805                  	cmp byte [rax], T_undefined
 10687 00006DFB 0F845BE90000            	je L_error_fvar_undefined
 10688 00006E01 803804                  	cmp byte [rax], T_closure
 10689 00006E04 0F85D6E90000            	jne L_error_non_closure
 10690 00006E0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10691                                  
 10692                                  	; recycling the current frame
 10693 00006E0D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10694 00006E10 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10695 00006E13 B906000000              	mov rcx, 2 + 4
 10696 00006E18 488B5D18                	mov rbx, COUNT
 10697 00006E1C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10698 00006E21 488D55F8                	lea rdx, [rbp - 8 * 1]
 10699                                  .L_tc_recycle_frame_loop_004e:
 10700 00006E25 4883F900                	cmp rcx, 0
 10701 00006E29 7413                    	je .L_tc_recycle_frame_done_004e
 10702 00006E2B 488B32                  	mov rsi, qword [rdx]
 10703 00006E2E 488933                  	mov qword [rbx], rsi
 10704 00006E31 48FFC9                  	dec rcx
 10705 00006E34 4883EB08                	sub rbx, 8 * 1
 10706 00006E38 4883EA08                	sub rdx, 8 * 1
 10707 00006E3C EBE7                    	jmp .L_tc_recycle_frame_loop_004e
 10708                                  .L_tc_recycle_frame_done_004e:
 10709 00006E3E 488D6308                	lea rsp, [rbx + 8 * 1]
 10710 00006E42 5D                      	pop rbp	; the proc will restore it!
 10711 00006E43 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10712                                  
 10713 00006E46 E9A1010000              	jmp .L_if_end_0024
 10714                                  
 10715                                  	.L_if_else_0024:
 10716 00006E4B 488B4528                	mov rax, PARAM(1)	; param b
 10717 00006E4F 50                      	push rax
 10718 00006E50 6A01                    	push 1	; arg count
 10719 00006E52 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10720 00006E5A 803805                  	cmp byte [rax], T_undefined
 10721 00006E5D 0F84F9E80000            	je L_error_fvar_undefined
 10722 00006E63 803804                  	cmp byte [rax], T_closure
 10723 00006E66 0F8574E90000            	jne L_error_non_closure
 10724 00006E6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10725 00006E6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10726                                  
 10727 00006E72 483D[02000000]          	cmp rax, sob_boolean_false
 10728 00006E78 0F848A000000            	je .L_if_else_0025
 10729                                  	; preparing a tail-call
 10730 00006E7E 488B4528                	mov rax, PARAM(1)	; param b
 10731 00006E82 50                      	push rax
 10732 00006E83 6A01                    	push 1	; arg count
 10733 00006E85 488B0425[380F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 10734 00006E8D 803805                  	cmp byte [rax], T_undefined
 10735 00006E90 0F84C6E80000            	je L_error_fvar_undefined
 10736 00006E96 803804                  	cmp byte [rax], T_closure
 10737 00006E99 0F8541E90000            	jne L_error_non_closure
 10738 00006E9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10739 00006EA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10740 00006EA5 50                      	push rax
 10741 00006EA6 488B4520                	mov rax, PARAM(0)	; param a
 10742 00006EAA 50                      	push rax
 10743 00006EAB 6A02                    	push 2	; arg count
 10744 00006EAD 488B0425[C00F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10745 00006EB5 803805                  	cmp byte [rax], T_undefined
 10746 00006EB8 0F849EE80000            	je L_error_fvar_undefined
 10747 00006EBE 803804                  	cmp byte [rax], T_closure
 10748 00006EC1 0F8519E90000            	jne L_error_non_closure
 10749 00006EC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10750                                  
 10751                                  	; recycling the current frame
 10752 00006ECA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10753 00006ECD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10754 00006ED0 B906000000              	mov rcx, 2 + 4
 10755 00006ED5 488B5D18                	mov rbx, COUNT
 10756 00006ED9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10757 00006EDE 488D55F8                	lea rdx, [rbp - 8 * 1]
 10758                                  .L_tc_recycle_frame_loop_004f:
 10759 00006EE2 4883F900                	cmp rcx, 0
 10760 00006EE6 7413                    	je .L_tc_recycle_frame_done_004f
 10761 00006EE8 488B32                  	mov rsi, qword [rdx]
 10762 00006EEB 488933                  	mov qword [rbx], rsi
 10763 00006EEE 48FFC9                  	dec rcx
 10764 00006EF1 4883EB08                	sub rbx, 8 * 1
 10765 00006EF5 4883EA08                	sub rdx, 8 * 1
 10766 00006EF9 EBE7                    	jmp .L_tc_recycle_frame_loop_004f
 10767                                  .L_tc_recycle_frame_done_004f:
 10768 00006EFB 488D6308                	lea rsp, [rbx + 8 * 1]
 10769 00006EFF 5D                      	pop rbp	; the proc will restore it!
 10770 00006F00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10771                                  
 10772 00006F03 E9E4000000              	jmp .L_if_end_0025
 10773                                  
 10774                                  	.L_if_else_0025:
 10775 00006F08 488B4528                	mov rax, PARAM(1)	; param b
 10776 00006F0C 50                      	push rax
 10777 00006F0D 6A01                    	push 1	; arg count
 10778 00006F0F 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 10779 00006F17 803805                  	cmp byte [rax], T_undefined
 10780 00006F1A 0F843CE80000            	je L_error_fvar_undefined
 10781 00006F20 803804                  	cmp byte [rax], T_closure
 10782 00006F23 0F85B7E80000            	jne L_error_non_closure
 10783 00006F29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10784 00006F2C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10785                                  
 10786 00006F2F 483D[02000000]          	cmp rax, sob_boolean_false
 10787 00006F35 7464                    	je .L_if_else_0026
 10788                                  	; preparing a tail-call
 10789 00006F37 488B4528                	mov rax, PARAM(1)	; param b
 10790 00006F3B 50                      	push rax
 10791 00006F3C 488B4520                	mov rax, PARAM(0)	; param a
 10792 00006F40 50                      	push rax
 10793 00006F41 6A02                    	push 2	; arg count
 10794 00006F43 488B0425[C00F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10795 00006F4B 803805                  	cmp byte [rax], T_undefined
 10796 00006F4E 0F8408E80000            	je L_error_fvar_undefined
 10797 00006F54 803804                  	cmp byte [rax], T_closure
 10798 00006F57 0F8583E80000            	jne L_error_non_closure
 10799 00006F5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10800                                  
 10801                                  	; recycling the current frame
 10802 00006F60 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10803 00006F63 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10804 00006F66 B906000000              	mov rcx, 2 + 4
 10805 00006F6B 488B5D18                	mov rbx, COUNT
 10806 00006F6F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10807 00006F74 488D55F8                	lea rdx, [rbp - 8 * 1]
 10808                                  .L_tc_recycle_frame_loop_0050:
 10809 00006F78 4883F900                	cmp rcx, 0
 10810 00006F7C 7413                    	je .L_tc_recycle_frame_done_0050
 10811 00006F7E 488B32                  	mov rsi, qword [rdx]
 10812 00006F81 488933                  	mov qword [rbx], rsi
 10813 00006F84 48FFC9                  	dec rcx
 10814 00006F87 4883EB08                	sub rbx, 8 * 1
 10815 00006F8B 4883EA08                	sub rdx, 8 * 1
 10816 00006F8F EBE7                    	jmp .L_tc_recycle_frame_loop_0050
 10817                                  .L_tc_recycle_frame_done_0050:
 10818 00006F91 488D6308                	lea rsp, [rbx + 8 * 1]
 10819 00006F95 5D                      	pop rbp	; the proc will restore it!
 10820 00006F96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10821                                  
 10822 00006F99 EB51                    	jmp .L_if_end_0026
 10823                                  
 10824                                  	.L_if_else_0026:
 10825                                  	; preparing a tail-call
 10826 00006F9B 6A00                    	push 0	; arg count
 10827 00006F9D 488B4510                	mov rax, ENV
 10828 00006FA1 488B00                  	mov rax, qword [rax + 8 * 0]
 10829 00006FA4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10830 00006FA7 803804                  	cmp byte [rax], T_closure
 10831 00006FAA 0F8530E80000            	jne L_error_non_closure
 10832 00006FB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10833                                  
 10834                                  	; recycling the current frame
 10835 00006FB3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10836 00006FB6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10837 00006FB9 B904000000              	mov rcx, 0 + 4
 10838 00006FBE 488B5D18                	mov rbx, COUNT
 10839 00006FC2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10840 00006FC7 488D55F8                	lea rdx, [rbp - 8 * 1]
 10841                                  .L_tc_recycle_frame_loop_0051:
 10842 00006FCB 4883F900                	cmp rcx, 0
 10843 00006FCF 7413                    	je .L_tc_recycle_frame_done_0051
 10844 00006FD1 488B32                  	mov rsi, qword [rdx]
 10845 00006FD4 488933                  	mov qword [rbx], rsi
 10846 00006FD7 48FFC9                  	dec rcx
 10847 00006FDA 4883EB08                	sub rbx, 8 * 1
 10848 00006FDE 4883EA08                	sub rdx, 8 * 1
 10849 00006FE2 EBE7                    	jmp .L_tc_recycle_frame_loop_0051
 10850                                  .L_tc_recycle_frame_done_0051:
 10851 00006FE4 488D6308                	lea rsp, [rbx + 8 * 1]
 10852 00006FE8 5D                      	pop rbp	; the proc will restore it!
 10853 00006FE9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10854                                  
 10855                                  	.L_if_end_0026:
 10856                                  
 10857                                  	.L_if_end_0025:
 10858                                  
 10859                                  	.L_if_end_0024:
 10860                                  
 10861 00006FEC EB51                    	jmp .L_if_end_0023
 10862                                  
 10863                                  	.L_if_else_0023:
 10864                                  	; preparing a tail-call
 10865 00006FEE 6A00                    	push 0	; arg count
 10866 00006FF0 488B4510                	mov rax, ENV
 10867 00006FF4 488B00                  	mov rax, qword [rax + 8 * 0]
 10868 00006FF7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10869 00006FFA 803804                  	cmp byte [rax], T_closure
 10870 00006FFD 0F85DDE70000            	jne L_error_non_closure
 10871 00007003 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10872                                  
 10873                                  	; recycling the current frame
 10874 00007006 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10875 00007009 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10876 0000700C B904000000              	mov rcx, 0 + 4
 10877 00007011 488B5D18                	mov rbx, COUNT
 10878 00007015 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10879 0000701A 488D55F8                	lea rdx, [rbp - 8 * 1]
 10880                                  .L_tc_recycle_frame_loop_0052:
 10881 0000701E 4883F900                	cmp rcx, 0
 10882 00007022 7413                    	je .L_tc_recycle_frame_done_0052
 10883 00007024 488B32                  	mov rsi, qword [rdx]
 10884 00007027 488933                  	mov qword [rbx], rsi
 10885 0000702A 48FFC9                  	dec rcx
 10886 0000702D 4883EB08                	sub rbx, 8 * 1
 10887 00007031 4883EA08                	sub rdx, 8 * 1
 10888 00007035 EBE7                    	jmp .L_tc_recycle_frame_loop_0052
 10889                                  .L_tc_recycle_frame_done_0052:
 10890 00007037 488D6308                	lea rsp, [rbx + 8 * 1]
 10891 0000703B 5D                      	pop rbp	; the proc will restore it!
 10892 0000703C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10893                                  
 10894                                  	.L_if_end_0023:
 10895                                  
 10896                                  	.L_if_end_001f:
 10897                                  
 10898                                  	.L_if_end_001b:
 10899 0000703F C9                      	leave
 10900 00007040 C22000                  	ret AND_KILL_FRAME(2)
 10901                                  .L_lambda_simple_end_003a:	; new closure is in rax
 10902 00007043 50                      	push rax
 10903 00007044 6A01                    	push 1	; arg count
 10904 00007046 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10905 0000704B E839E80000              	call malloc
 10906 00007050 50                      	push rax
 10907 00007051 BF08000000              	mov rdi, 8 * 1	; new rib
 10908 00007056 E82EE80000              	call malloc
 10909 0000705B 50                      	push rax
 10910 0000705C BF10000000              	mov rdi, 8 * 2	; extended env
 10911 00007061 E823E80000              	call malloc
 10912 00007066 488B7D10                	mov rdi, ENV
 10913 0000706A BE00000000              	mov rsi, 0
 10914 0000706F BA01000000              	mov rdx, 1
 10915                                  .L_lambda_simple_env_loop_003b:	; ext_env[i + 1] <-- env[i]
 10916 00007074 4883FE01                	cmp rsi, 1
 10917 00007078 7410                    	je .L_lambda_simple_env_end_003b
 10918 0000707A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10919 0000707E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10920 00007082 48FFC6                  	inc rsi
 10921 00007085 48FFC2                  	inc rdx
 10922 00007088 EBEA                    	jmp .L_lambda_simple_env_loop_003b
 10923                                  .L_lambda_simple_env_end_003b:
 10924 0000708A 5B                      	pop rbx
 10925 0000708B BE00000000              	mov rsi, 0
 10926                                  .L_lambda_simple_params_loop_003b:	; copy params
 10927 00007090 4883FE01                	cmp rsi, 1
 10928 00007094 740E                    	je .L_lambda_simple_params_end_003b
 10929 00007096 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10930 0000709B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10931 0000709F 48FFC6                  	inc rsi
 10932 000070A2 EBEC                    	jmp .L_lambda_simple_params_loop_003b
 10933                                  .L_lambda_simple_params_end_003b:
 10934 000070A4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10935 000070A7 4889C3                  	mov rbx, rax
 10936 000070AA 58                      	pop rax
 10937 000070AB C60004                  	mov byte [rax], T_closure
 10938 000070AE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10939 000070B2 48C74009[BF700000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003b
 10940 000070BA E986030000              	jmp .L_lambda_simple_end_003b
 10941                                  .L_lambda_simple_code_003b:	; lambda-simple body
 10942 000070BF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10943 000070C5 740B                    	je .L_lambda_simple_arity_check_ok_003b
 10944 000070C7 FF742410                	push qword [rsp + 8 * 2]
 10945 000070CB 6A01                    	push 1
 10946 000070CD E970E70000              	jmp L_error_incorrect_arity_simple
 10947                                  .L_lambda_simple_arity_check_ok_003b:
 10948 000070D2 C8000000                	enter 0, 0
 10949 000070D6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10950 000070DB E8A9E70000              	call malloc
 10951 000070E0 50                      	push rax
 10952 000070E1 BF08000000              	mov rdi, 8 * 1	; new rib
 10953 000070E6 E89EE70000              	call malloc
 10954 000070EB 50                      	push rax
 10955 000070EC BF18000000              	mov rdi, 8 * 3	; extended env
 10956 000070F1 E893E70000              	call malloc
 10957 000070F6 488B7D10                	mov rdi, ENV
 10958 000070FA BE00000000              	mov rsi, 0
 10959 000070FF BA01000000              	mov rdx, 1
 10960                                  .L_lambda_opt_env_loop_000b:	; ext_env[i + 1] <-- env[i]
 10961 00007104 4883FE02                	cmp rsi, 2
 10962 00007108 7410                    	je .L_lambda_opt_env_end_000b
 10963 0000710A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10964 0000710E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10965 00007112 48FFC6                  	inc rsi
 10966 00007115 48FFC2                  	inc rdx
 10967 00007118 EBEA                    	jmp .L_lambda_opt_env_loop_000b
 10968                                  .L_lambda_opt_env_end_000b:
 10969 0000711A 5B                      	pop rbx
 10970 0000711B BE00000000              	mov rsi, 0
 10971                                  .L_lambda_opt_params_loop_000b:	; copy params
 10972 00007120 4883FE01                	cmp rsi, 1
 10973 00007124 740E                    	je .L_lambda_opt_params_end_000b
 10974 00007126 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10975 0000712B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10976 0000712F 48FFC6                  	inc rsi
 10977 00007132 EBEC                    	jmp .L_lambda_opt_params_loop_000b
 10978                                  .L_lambda_opt_params_end_000b:
 10979 00007134 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10980 00007137 4889C3                  	mov rbx, rax
 10981 0000713A 58                      	pop rax
 10982 0000713B C60004                  	mov byte [rax], T_closure
 10983 0000713E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10984 00007142 48C74009[4F710000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000b
 10985 0000714A E9F2020000              	jmp .L_lambda_opt_end_000b
 10986                                  .L_lambda_opt_code_000b:	; lambda-simple body
 10987 0000714F 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 10988 00007155 740D                    	je .L_lambda_opt_arity_check_exact_000b ;	 if equal, go to exact arity
 10989 00007157 7F42                    	jg .L_lambda_opt_arity_check_more_000b ;	 if greater than, go to arity more
 10990 00007159 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 10991 0000715D 6A01                     	push 1
 10992 0000715F E9F2E60000              	jmp L_error_incorrect_arity_opt
 10993                                  	.L_lambda_opt_arity_check_exact_000b:
 10994 00007164 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 10995 00007169 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 10996 0000716E 4883EC08                	sub rsp, 8
 10997 00007172 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 10998                                  	.L_lambda_opt_exact_shifting_loop_000b:
 10999 00007176 488B5108                	mov rdx, [rcx + 8]
 11000 0000717A 488911                  	mov [rcx], rdx
 11001 0000717D 4883C108                	add rcx, 8
 11002 00007181 4839CB                  	cmp rbx, rcx
 11003 00007184 75F0                    	jne .L_lambda_opt_exact_shifting_loop_000b
 11004                                  	.L_lambda_opt_exact_shifting_loop_end_000b:
 11005 00007186 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 11006 0000718D 4883C001                	add rax, 1 ; 	arg count += 1
 11007 00007191 4889442410              	mov qword [rsp + 8 * 2], rax
 11008 00007196 E987000000              	jmp .L_lambda_opt_stack_adjusted_000b
 11009                                  	.L_lambda_opt_arity_check_more_000b:
 11010 0000719B 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 11010 0000719D [0100000000000000] 
 11011 000071A5 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 11012 000071AB 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_000b
 11013                                  	.L_lambda_opt_stack_shrink_loop_000b:
 11014 000071AD BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 11015 000071B2 E8D2E60000              	call malloc ;	 allocated memory for the optional scheme list
 11016 000071B7 C60021                  	mov byte[rax], T_pair ;	 set type pair
 11017 000071BA 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 11018 000071BE 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 11019 000071C1 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 11020 000071C6 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 11021 000071CB 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 11022 000071CF 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 11023                                  	.L_lambda_opt_more_shifting_loop_000b:
 11024 000071D4 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 11025 000071D7 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 11026 000071DB 4883EB08                	sub rbx, 8 
 11027 000071DF 4839DC                  	cmp rsp, rbx
 11028 000071E2 7EF0                    	jle .L_lambda_opt_more_shifting_loop_000b
 11029                                  	.L_lambda_opt_more_shifting_loop_end_000b:
 11030 000071E4 4883C408                	add rsp, 8 ;	 update rsp
 11031 000071E8 488B5C2410              	mov rbx, [rsp + 8 * 2]
 11032 000071ED 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 11033 000071F1 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 11034 000071F6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11035 000071FC 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_000b
 11036                                  	.L_lambda_opt_stack_shrink_loop_exit_000b:
 11037 000071FE 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 11038 00007203 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 11039 00007208 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 11040 0000720D E877E60000              	call malloc ;	 allocated memory for the optional scheme list
 11041 00007212 C60021                  	mov byte[rax], T_pair ;	 set type pair
 11042 00007215 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 11043 00007219 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 11044 0000721D 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 11045                                  	.L_lambda_opt_stack_adjusted_000b:
 11046 00007222 C8000000                	enter 0, 0
 11047 00007226 488B4528                	mov rax, PARAM(1)	; param s
 11048 0000722A 50                      	push rax
 11049 0000722B 6A01                    	push 1	; arg count
 11050 0000722D 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 11051 00007235 803805                  	cmp byte [rax], T_undefined
 11052 00007238 0F841EE50000            	je L_error_fvar_undefined
 11053 0000723E 803804                  	cmp byte [rax], T_closure
 11054 00007241 0F8599E50000            	jne L_error_non_closure
 11055 00007247 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11056 0000724A FF5009                  	call SOB_CLOSURE_CODE(rax)
 11057                                  
 11058 0000724D 483D[02000000]          	cmp rax, sob_boolean_false
 11059 00007253 7466                    	je .L_if_else_0027
 11060                                  	; preparing a tail-call
 11061 00007255 488B4520                	mov rax, PARAM(0)	; param a
 11062 00007259 50                      	push rax
 11063 0000725A 48B8-                   	mov rax, L_constants + 2023
 11063 0000725C [E707000000000000] 
 11064 00007264 50                      	push rax
 11065 00007265 6A02                    	push 2	; arg count
 11066 00007267 488B4510                	mov rax, ENV
 11067 0000726B 488B00                  	mov rax, qword [rax + 8 * 0]
 11068 0000726E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 11069 00007271 803804                  	cmp byte [rax], T_closure
 11070 00007274 0F8566E50000            	jne L_error_non_closure
 11071 0000727A FF7001                  	push SOB_CLOSURE_ENV(rax)
 11072                                  
 11073                                  	; recycling the current frame
 11074 0000727D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11075 00007280 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11076 00007283 B906000000              	mov rcx, 2 + 4
 11077 00007288 488B5D18                	mov rbx, COUNT
 11078 0000728C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11079 00007291 488D55F8                	lea rdx, [rbp - 8 * 1]
 11080                                  .L_tc_recycle_frame_loop_0053:
 11081 00007295 4883F900                	cmp rcx, 0
 11082 00007299 7413                    	je .L_tc_recycle_frame_done_0053
 11083 0000729B 488B32                  	mov rsi, qword [rdx]
 11084 0000729E 488933                  	mov qword [rbx], rsi
 11085 000072A1 48FFC9                  	dec rcx
 11086 000072A4 4883EB08                	sub rbx, 8 * 1
 11087 000072A8 4883EA08                	sub rdx, 8 * 1
 11088 000072AC EBE7                    	jmp .L_tc_recycle_frame_loop_0053
 11089                                  .L_tc_recycle_frame_done_0053:
 11090 000072AE 488D6308                	lea rsp, [rbx + 8 * 1]
 11091 000072B2 5D                      	pop rbp	; the proc will restore it!
 11092 000072B3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11093                                  
 11094 000072B6 E982010000              	jmp .L_if_end_0027
 11095                                  
 11096                                  	.L_if_else_0027:
 11097                                  	; preparing a tail-call
 11098 000072BB 488B4528                	mov rax, PARAM(1)	; param s
 11099 000072BF 50                      	push rax
 11100 000072C0 48B8-                   	mov rax, L_constants + 2023
 11100 000072C2 [E707000000000000] 
 11101 000072CA 50                      	push rax
 11102 000072CB 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 11103 000072D3 803805                  	cmp byte [rax], T_undefined
 11104 000072D6 0F8480E40000            	je L_error_fvar_undefined
 11105 000072DC 50                      	push rax
 11106 000072DD 6A03                    	push 3	; arg count
 11107 000072DF 488B0425[21150000]      	mov rax, qword [free_var_112]	; free var fold-left
 11108 000072E7 803805                  	cmp byte [rax], T_undefined
 11109 000072EA 0F846CE40000            	je L_error_fvar_undefined
 11110 000072F0 803804                  	cmp byte [rax], T_closure
 11111 000072F3 0F85E7E40000            	jne L_error_non_closure
 11112 000072F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11113 000072FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 11114 000072FF 50                      	push rax
 11115 00007300 6A01                    	push 1	; arg count
 11116 00007302 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11117 00007307 E87DE50000              	call malloc
 11118 0000730C 50                      	push rax
 11119 0000730D BF10000000              	mov rdi, 8 * 2	; new rib
 11120 00007312 E872E50000              	call malloc
 11121 00007317 50                      	push rax
 11122 00007318 BF20000000              	mov rdi, 8 * 4	; extended env
 11123 0000731D E867E50000              	call malloc
 11124 00007322 488B7D10                	mov rdi, ENV
 11125 00007326 BE00000000              	mov rsi, 0
 11126 0000732B BA01000000              	mov rdx, 1
 11127                                  .L_lambda_simple_env_loop_003c:	; ext_env[i + 1] <-- env[i]
 11128 00007330 4883FE03                	cmp rsi, 3
 11129 00007334 7410                    	je .L_lambda_simple_env_end_003c
 11130 00007336 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11131 0000733A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11132 0000733E 48FFC6                  	inc rsi
 11133 00007341 48FFC2                  	inc rdx
 11134 00007344 EBEA                    	jmp .L_lambda_simple_env_loop_003c
 11135                                  .L_lambda_simple_env_end_003c:
 11136 00007346 5B                      	pop rbx
 11137 00007347 BE00000000              	mov rsi, 0
 11138                                  .L_lambda_simple_params_loop_003c:	; copy params
 11139 0000734C 4883FE02                	cmp rsi, 2
 11140 00007350 740E                    	je .L_lambda_simple_params_end_003c
 11141 00007352 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11142 00007357 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11143 0000735B 48FFC6                  	inc rsi
 11144 0000735E EBEC                    	jmp .L_lambda_simple_params_loop_003c
 11145                                  .L_lambda_simple_params_end_003c:
 11146 00007360 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11147 00007363 4889C3                  	mov rbx, rax
 11148 00007366 58                      	pop rax
 11149 00007367 C60004                  	mov byte [rax], T_closure
 11150 0000736A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11151 0000736E 48C74009[7B730000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003c
 11152 00007376 E97D000000              	jmp .L_lambda_simple_end_003c
 11153                                  .L_lambda_simple_code_003c:	; lambda-simple body
 11154 0000737B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11155 00007381 740B                    	je .L_lambda_simple_arity_check_ok_003c
 11156 00007383 FF742410                	push qword [rsp + 8 * 2]
 11157 00007387 6A01                    	push 1
 11158 00007389 E9B4E40000              	jmp L_error_incorrect_arity_simple
 11159                                  .L_lambda_simple_arity_check_ok_003c:
 11160 0000738E C8000000                	enter 0, 0
 11161                                  	; preparing a tail-call
 11162 00007392 488B4520                	mov rax, PARAM(0)	; param b
 11163 00007396 50                      	push rax
 11164 00007397 488B4510                	mov rax, ENV
 11165 0000739B 488B00                  	mov rax, qword [rax + 8 * 0]
 11166 0000739E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 11167 000073A1 50                      	push rax
 11168 000073A2 6A02                    	push 2	; arg count
 11169 000073A4 488B4510                	mov rax, ENV
 11170 000073A8 488B4008                	mov rax, qword [rax + 8 * 1]
 11171 000073AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 11172 000073AF 803804                  	cmp byte [rax], T_closure
 11173 000073B2 0F8528E40000            	jne L_error_non_closure
 11174 000073B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11175                                  
 11176                                  	; recycling the current frame
 11177 000073BB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11178 000073BE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11179 000073C1 B906000000              	mov rcx, 2 + 4
 11180 000073C6 488B5D18                	mov rbx, COUNT
 11181 000073CA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11182 000073CF 488D55F8                	lea rdx, [rbp - 8 * 1]
 11183                                  .L_tc_recycle_frame_loop_0054:
 11184 000073D3 4883F900                	cmp rcx, 0
 11185 000073D7 7413                    	je .L_tc_recycle_frame_done_0054
 11186 000073D9 488B32                  	mov rsi, qword [rdx]
 11187 000073DC 488933                  	mov qword [rbx], rsi
 11188 000073DF 48FFC9                  	dec rcx
 11189 000073E2 4883EB08                	sub rbx, 8 * 1
 11190 000073E6 4883EA08                	sub rdx, 8 * 1
 11191 000073EA EBE7                    	jmp .L_tc_recycle_frame_loop_0054
 11192                                  .L_tc_recycle_frame_done_0054:
 11193 000073EC 488D6308                	lea rsp, [rbx + 8 * 1]
 11194 000073F0 5D                      	pop rbp	; the proc will restore it!
 11195 000073F1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11196 000073F4 C9                      	leave
 11197 000073F5 C21800                  	ret AND_KILL_FRAME(1)
 11198                                  .L_lambda_simple_end_003c:	; new closure is in rax
 11199 000073F8 803804                  	cmp byte [rax], T_closure
 11200 000073FB 0F85DFE30000            	jne L_error_non_closure
 11201 00007401 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11202                                  
 11203                                  	; recycling the current frame
 11204 00007404 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11205 00007407 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11206 0000740A B905000000              	mov rcx, 1 + 4
 11207 0000740F 488B5D18                	mov rbx, COUNT
 11208 00007413 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11209 00007418 488D55F8                	lea rdx, [rbp - 8 * 1]
 11210                                  .L_tc_recycle_frame_loop_0055:
 11211 0000741C 4883F900                	cmp rcx, 0
 11212 00007420 7413                    	je .L_tc_recycle_frame_done_0055
 11213 00007422 488B32                  	mov rsi, qword [rdx]
 11214 00007425 488933                  	mov qword [rbx], rsi
 11215 00007428 48FFC9                  	dec rcx
 11216 0000742B 4883EB08                	sub rbx, 8 * 1
 11217 0000742F 4883EA08                	sub rdx, 8 * 1
 11218 00007433 EBE7                    	jmp .L_tc_recycle_frame_loop_0055
 11219                                  .L_tc_recycle_frame_done_0055:
 11220 00007435 488D6308                	lea rsp, [rbx + 8 * 1]
 11221 00007439 5D                      	pop rbp	; the proc will restore it!
 11222 0000743A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11223                                  
 11224                                  	.L_if_end_0027:
 11225 0000743D C9                      	leave
 11226 0000743E C22000                  	ret AND_KILL_FRAME(2)
 11227                                  .L_lambda_opt_end_000b:	; new closure is in rax
 11228 00007441 C9                      	leave
 11229 00007442 C21800                  	ret AND_KILL_FRAME(1)
 11230                                  .L_lambda_simple_end_003b:	; new closure is in rax
 11231 00007445 803804                  	cmp byte [rax], T_closure
 11232 00007448 0F8592E30000            	jne L_error_non_closure
 11233 0000744E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11234                                  
 11235                                  	; recycling the current frame
 11236 00007451 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11237 00007454 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11238 00007457 B905000000              	mov rcx, 1 + 4
 11239 0000745C 488B5D18                	mov rbx, COUNT
 11240 00007460 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11241 00007465 488D55F8                	lea rdx, [rbp - 8 * 1]
 11242                                  .L_tc_recycle_frame_loop_0056:
 11243 00007469 4883F900                	cmp rcx, 0
 11244 0000746D 7413                    	je .L_tc_recycle_frame_done_0056
 11245 0000746F 488B32                  	mov rsi, qword [rdx]
 11246 00007472 488933                  	mov qword [rbx], rsi
 11247 00007475 48FFC9                  	dec rcx
 11248 00007478 4883EB08                	sub rbx, 8 * 1
 11249 0000747C 4883EA08                	sub rdx, 8 * 1
 11250 00007480 EBE7                    	jmp .L_tc_recycle_frame_loop_0056
 11251                                  .L_tc_recycle_frame_done_0056:
 11252 00007482 488D6308                	lea rsp, [rbx + 8 * 1]
 11253 00007486 5D                      	pop rbp	; the proc will restore it!
 11254 00007487 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11255 0000748A C9                      	leave
 11256 0000748B C21800                  	ret AND_KILL_FRAME(1)
 11257                                  .L_lambda_simple_end_0039:	; new closure is in rax
 11258 0000748E 803804                  	cmp byte [rax], T_closure
 11259 00007491 0F8549E30000            	jne L_error_non_closure
 11260 00007497 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11261 0000749A FF5009                  	call SOB_CLOSURE_CODE(rax)
 11262 0000749D 48890425[76150000]      	mov qword [free_var_117], rax
 11263 000074A5 48B8-                   	mov rax, sob_void
 11263 000074A7 [0000000000000000] 
 11264                                  
 11265 000074AF 4889C7                  	mov rdi, rax
 11266 000074B2 E8E4E40000              	call print_sexpr_if_not_void
 11267                                  
 11268 000074B7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11269 000074BC E8C8E30000              	call malloc
 11270 000074C1 50                      	push rax
 11271 000074C2 BF00000000              	mov rdi, 8 * 0	; new rib
 11272 000074C7 E8BDE30000              	call malloc
 11273 000074CC 50                      	push rax
 11274 000074CD BF08000000              	mov rdi, 8 * 1	; extended env
 11275 000074D2 E8B2E30000              	call malloc
 11276 000074D7 488B7D10                	mov rdi, ENV
 11277 000074DB BE00000000              	mov rsi, 0
 11278 000074E0 BA01000000              	mov rdx, 1
 11279                                  .L_lambda_simple_env_loop_003d:	; ext_env[i + 1] <-- env[i]
 11280 000074E5 4883FE00                	cmp rsi, 0
 11281 000074E9 7410                    	je .L_lambda_simple_env_end_003d
 11282 000074EB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11283 000074EF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11284 000074F3 48FFC6                  	inc rsi
 11285 000074F6 48FFC2                  	inc rdx
 11286 000074F9 EBEA                    	jmp .L_lambda_simple_env_loop_003d
 11287                                  .L_lambda_simple_env_end_003d:
 11288 000074FB 5B                      	pop rbx
 11289 000074FC BE00000000              	mov rsi, 0
 11290                                  .L_lambda_simple_params_loop_003d:	; copy params
 11291 00007501 4883FE00                	cmp rsi, 0
 11292 00007505 740E                    	je .L_lambda_simple_params_end_003d
 11293 00007507 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11294 0000750C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11295 00007510 48FFC6                  	inc rsi
 11296 00007513 EBEC                    	jmp .L_lambda_simple_params_loop_003d
 11297                                  .L_lambda_simple_params_end_003d:
 11298 00007515 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11299 00007518 4889C3                  	mov rbx, rax
 11300 0000751B 58                      	pop rax
 11301 0000751C C60004                  	mov byte [rax], T_closure
 11302 0000751F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11303 00007523 48C74009[30750000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003d
 11304 0000752B E989000000              	jmp .L_lambda_simple_end_003d
 11305                                  .L_lambda_simple_code_003d:	; lambda-simple body
 11306 00007530 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11307 00007536 740B                    	je .L_lambda_simple_arity_check_ok_003d
 11308 00007538 FF742410                	push qword [rsp + 8 * 2]
 11309 0000753C 6A00                    	push 0
 11310 0000753E E9FFE20000              	jmp L_error_incorrect_arity_simple
 11311                                  .L_lambda_simple_arity_check_ok_003d:
 11312 00007543 C8000000                	enter 0, 0
 11313                                  	; preparing a tail-call
 11314 00007547 48B8-                   	mov rax, L_constants + 2075
 11314 00007549 [1B08000000000000] 
 11315 00007551 50                      	push rax
 11316 00007552 48B8-                   	mov rax, L_constants + 2167
 11316 00007554 [7708000000000000] 
 11317 0000755C 50                      	push rax
 11318 0000755D 6A02                    	push 2	; arg count
 11319 0000755F 488B0425[7B100000]      	mov rax, qword [free_var_42]	; free var error
 11320 00007567 803805                  	cmp byte [rax], T_undefined
 11321 0000756A 0F84ECE10000            	je L_error_fvar_undefined
 11322 00007570 803804                  	cmp byte [rax], T_closure
 11323 00007573 0F8567E20000            	jne L_error_non_closure
 11324 00007579 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11325                                  
 11326                                  	; recycling the current frame
 11327 0000757C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11328 0000757F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11329 00007582 B906000000              	mov rcx, 2 + 4
 11330 00007587 488B5D18                	mov rbx, COUNT
 11331 0000758B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11332 00007590 488D55F8                	lea rdx, [rbp - 8 * 1]
 11333                                  .L_tc_recycle_frame_loop_0057:
 11334 00007594 4883F900                	cmp rcx, 0
 11335 00007598 7413                    	je .L_tc_recycle_frame_done_0057
 11336 0000759A 488B32                  	mov rsi, qword [rdx]
 11337 0000759D 488933                  	mov qword [rbx], rsi
 11338 000075A0 48FFC9                  	dec rcx
 11339 000075A3 4883EB08                	sub rbx, 8 * 1
 11340 000075A7 4883EA08                	sub rdx, 8 * 1
 11341 000075AB EBE7                    	jmp .L_tc_recycle_frame_loop_0057
 11342                                  .L_tc_recycle_frame_done_0057:
 11343 000075AD 488D6308                	lea rsp, [rbx + 8 * 1]
 11344 000075B1 5D                      	pop rbp	; the proc will restore it!
 11345 000075B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11346 000075B5 C9                      	leave
 11347 000075B6 C21000                  	ret AND_KILL_FRAME(0)
 11348                                  .L_lambda_simple_end_003d:	; new closure is in rax
 11349 000075B9 50                      	push rax
 11350 000075BA 6A01                    	push 1	; arg count
 11351 000075BC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11352 000075C1 E8C3E20000              	call malloc
 11353 000075C6 50                      	push rax
 11354 000075C7 BF00000000              	mov rdi, 8 * 0	; new rib
 11355 000075CC E8B8E20000              	call malloc
 11356 000075D1 50                      	push rax
 11357 000075D2 BF08000000              	mov rdi, 8 * 1	; extended env
 11358 000075D7 E8ADE20000              	call malloc
 11359 000075DC 488B7D10                	mov rdi, ENV
 11360 000075E0 BE00000000              	mov rsi, 0
 11361 000075E5 BA01000000              	mov rdx, 1
 11362                                  .L_lambda_simple_env_loop_003e:	; ext_env[i + 1] <-- env[i]
 11363 000075EA 4883FE00                	cmp rsi, 0
 11364 000075EE 7410                    	je .L_lambda_simple_env_end_003e
 11365 000075F0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11366 000075F4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11367 000075F8 48FFC6                  	inc rsi
 11368 000075FB 48FFC2                  	inc rdx
 11369 000075FE EBEA                    	jmp .L_lambda_simple_env_loop_003e
 11370                                  .L_lambda_simple_env_end_003e:
 11371 00007600 5B                      	pop rbx
 11372 00007601 BE00000000              	mov rsi, 0
 11373                                  .L_lambda_simple_params_loop_003e:	; copy params
 11374 00007606 4883FE00                	cmp rsi, 0
 11375 0000760A 740E                    	je .L_lambda_simple_params_end_003e
 11376 0000760C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11377 00007611 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11378 00007615 48FFC6                  	inc rsi
 11379 00007618 EBEC                    	jmp .L_lambda_simple_params_loop_003e
 11380                                  .L_lambda_simple_params_end_003e:
 11381 0000761A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11382 0000761D 4889C3                  	mov rbx, rax
 11383 00007620 58                      	pop rax
 11384 00007621 C60004                  	mov byte [rax], T_closure
 11385 00007624 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11386 00007628 48C74009[35760000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003e
 11387 00007630 E9620B0000              	jmp .L_lambda_simple_end_003e
 11388                                  .L_lambda_simple_code_003e:	; lambda-simple body
 11389 00007635 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11390 0000763B 740B                    	je .L_lambda_simple_arity_check_ok_003e
 11391 0000763D FF742410                	push qword [rsp + 8 * 2]
 11392 00007641 6A01                    	push 1
 11393 00007643 E9FAE10000              	jmp L_error_incorrect_arity_simple
 11394                                  .L_lambda_simple_arity_check_ok_003e:
 11395 00007648 C8000000                	enter 0, 0
 11396                                  	; preparing a tail-call
 11397 0000764C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11398 00007651 E833E20000              	call malloc
 11399 00007656 50                      	push rax
 11400 00007657 BF08000000              	mov rdi, 8 * 1	; new rib
 11401 0000765C E828E20000              	call malloc
 11402 00007661 50                      	push rax
 11403 00007662 BF10000000              	mov rdi, 8 * 2	; extended env
 11404 00007667 E81DE20000              	call malloc
 11405 0000766C 488B7D10                	mov rdi, ENV
 11406 00007670 BE00000000              	mov rsi, 0
 11407 00007675 BA01000000              	mov rdx, 1
 11408                                  .L_lambda_simple_env_loop_003f:	; ext_env[i + 1] <-- env[i]
 11409 0000767A 4883FE01                	cmp rsi, 1
 11410 0000767E 7410                    	je .L_lambda_simple_env_end_003f
 11411 00007680 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11412 00007684 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11413 00007688 48FFC6                  	inc rsi
 11414 0000768B 48FFC2                  	inc rdx
 11415 0000768E EBEA                    	jmp .L_lambda_simple_env_loop_003f
 11416                                  .L_lambda_simple_env_end_003f:
 11417 00007690 5B                      	pop rbx
 11418 00007691 BE00000000              	mov rsi, 0
 11419                                  .L_lambda_simple_params_loop_003f:	; copy params
 11420 00007696 4883FE01                	cmp rsi, 1
 11421 0000769A 740E                    	je .L_lambda_simple_params_end_003f
 11422 0000769C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11423 000076A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11424 000076A5 48FFC6                  	inc rsi
 11425 000076A8 EBEC                    	jmp .L_lambda_simple_params_loop_003f
 11426                                  .L_lambda_simple_params_end_003f:
 11427 000076AA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11428 000076AD 4889C3                  	mov rbx, rax
 11429 000076B0 58                      	pop rax
 11430 000076B1 C60004                  	mov byte [rax], T_closure
 11431 000076B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11432 000076B8 48C74009[C5760000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003f
 11433 000076C0 E92B080000              	jmp .L_lambda_simple_end_003f
 11434                                  .L_lambda_simple_code_003f:	; lambda-simple body
 11435 000076C5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11436 000076CB 740B                    	je .L_lambda_simple_arity_check_ok_003f
 11437 000076CD FF742410                	push qword [rsp + 8 * 2]
 11438 000076D1 6A02                    	push 2
 11439 000076D3 E96AE10000              	jmp L_error_incorrect_arity_simple
 11440                                  .L_lambda_simple_arity_check_ok_003f:
 11441 000076D8 C8000000                	enter 0, 0
 11442 000076DC 488B4520                	mov rax, PARAM(0)	; param a
 11443 000076E0 50                      	push rax
 11444 000076E1 6A01                    	push 1	; arg count
 11445 000076E3 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11446 000076EB 803805                  	cmp byte [rax], T_undefined
 11447 000076EE 0F8468E00000            	je L_error_fvar_undefined
 11448 000076F4 803804                  	cmp byte [rax], T_closure
 11449 000076F7 0F85E3E00000            	jne L_error_non_closure
 11450 000076FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 11451 00007700 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11452                                  
 11453 00007703 483D[02000000]          	cmp rax, sob_boolean_false
 11454 00007709 0F8463020000            	je .L_if_else_0028
 11455 0000770F 488B4528                	mov rax, PARAM(1)	; param b
 11456 00007713 50                      	push rax
 11457 00007714 6A01                    	push 1	; arg count
 11458 00007716 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11459 0000771E 803805                  	cmp byte [rax], T_undefined
 11460 00007721 0F8435E00000            	je L_error_fvar_undefined
 11461 00007727 803804                  	cmp byte [rax], T_closure
 11462 0000772A 0F85B0E00000            	jne L_error_non_closure
 11463 00007730 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11464 00007733 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11465                                  
 11466 00007736 483D[02000000]          	cmp rax, sob_boolean_false
 11467 0000773C 7467                    	je .L_if_else_0029
 11468                                  	; preparing a tail-call
 11469 0000773E 488B4528                	mov rax, PARAM(1)	; param b
 11470 00007742 50                      	push rax
 11471 00007743 488B4520                	mov rax, PARAM(0)	; param a
 11472 00007747 50                      	push rax
 11473 00007748 6A02                    	push 2	; arg count
 11474 0000774A 488B0425[59100000]      	mov rax, qword [free_var_40]	; free var __bin-mul-zz
 11475 00007752 803805                  	cmp byte [rax], T_undefined
 11476 00007755 0F8401E00000            	je L_error_fvar_undefined
 11477 0000775B 803804                  	cmp byte [rax], T_closure
 11478 0000775E 0F857CE00000            	jne L_error_non_closure
 11479 00007764 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11480                                  
 11481                                  	; recycling the current frame
 11482 00007767 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11483 0000776A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11484 0000776D B906000000              	mov rcx, 2 + 4
 11485 00007772 488B5D18                	mov rbx, COUNT
 11486 00007776 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11487 0000777B 488D55F8                	lea rdx, [rbp - 8 * 1]
 11488                                  .L_tc_recycle_frame_loop_0058:
 11489 0000777F 4883F900                	cmp rcx, 0
 11490 00007783 7413                    	je .L_tc_recycle_frame_done_0058
 11491 00007785 488B32                  	mov rsi, qword [rdx]
 11492 00007788 488933                  	mov qword [rbx], rsi
 11493 0000778B 48FFC9                  	dec rcx
 11494 0000778E 4883EB08                	sub rbx, 8 * 1
 11495 00007792 4883EA08                	sub rdx, 8 * 1
 11496 00007796 EBE7                    	jmp .L_tc_recycle_frame_loop_0058
 11497                                  .L_tc_recycle_frame_done_0058:
 11498 00007798 488D6308                	lea rsp, [rbx + 8 * 1]
 11499 0000779C 5D                      	pop rbp	; the proc will restore it!
 11500 0000779D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11501                                  
 11502 000077A0 E9C8010000              	jmp .L_if_end_0029
 11503                                  
 11504                                  	.L_if_else_0029:
 11505 000077A5 488B4528                	mov rax, PARAM(1)	; param b
 11506 000077A9 50                      	push rax
 11507 000077AA 6A01                    	push 1	; arg count
 11508 000077AC 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11509 000077B4 803805                  	cmp byte [rax], T_undefined
 11510 000077B7 0F849FDF0000            	je L_error_fvar_undefined
 11511 000077BD 803804                  	cmp byte [rax], T_closure
 11512 000077C0 0F851AE00000            	jne L_error_non_closure
 11513 000077C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11514 000077C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11515                                  
 11516 000077CC 483D[02000000]          	cmp rax, sob_boolean_false
 11517 000077D2 0F848A000000            	je .L_if_else_002a
 11518                                  	; preparing a tail-call
 11519 000077D8 488B4528                	mov rax, PARAM(1)	; param b
 11520 000077DC 50                      	push rax
 11521 000077DD 488B4520                	mov rax, PARAM(0)	; param a
 11522 000077E1 50                      	push rax
 11523 000077E2 6A01                    	push 1	; arg count
 11524 000077E4 488B0425[CF110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 11525 000077EC 803805                  	cmp byte [rax], T_undefined
 11526 000077EF 0F8467DF0000            	je L_error_fvar_undefined
 11527 000077F5 803804                  	cmp byte [rax], T_closure
 11528 000077F8 0F85E2DF0000            	jne L_error_non_closure
 11529 000077FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 11530 00007801 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11531 00007804 50                      	push rax
 11532 00007805 6A02                    	push 2	; arg count
 11533 00007807 488B0425[15100000]      	mov rax, qword [free_var_36]	; free var __bin-mul-qq
 11534 0000780F 803805                  	cmp byte [rax], T_undefined
 11535 00007812 0F8444DF0000            	je L_error_fvar_undefined
 11536 00007818 803804                  	cmp byte [rax], T_closure
 11537 0000781B 0F85BFDF0000            	jne L_error_non_closure
 11538 00007821 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11539                                  
 11540                                  	; recycling the current frame
 11541 00007824 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11542 00007827 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11543 0000782A B906000000              	mov rcx, 2 + 4
 11544 0000782F 488B5D18                	mov rbx, COUNT
 11545 00007833 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11546 00007838 488D55F8                	lea rdx, [rbp - 8 * 1]
 11547                                  .L_tc_recycle_frame_loop_0059:
 11548 0000783C 4883F900                	cmp rcx, 0
 11549 00007840 7413                    	je .L_tc_recycle_frame_done_0059
 11550 00007842 488B32                  	mov rsi, qword [rdx]
 11551 00007845 488933                  	mov qword [rbx], rsi
 11552 00007848 48FFC9                  	dec rcx
 11553 0000784B 4883EB08                	sub rbx, 8 * 1
 11554 0000784F 4883EA08                	sub rdx, 8 * 1
 11555 00007853 EBE7                    	jmp .L_tc_recycle_frame_loop_0059
 11556                                  .L_tc_recycle_frame_done_0059:
 11557 00007855 488D6308                	lea rsp, [rbx + 8 * 1]
 11558 00007859 5D                      	pop rbp	; the proc will restore it!
 11559 0000785A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11560                                  
 11561 0000785D E90B010000              	jmp .L_if_end_002a
 11562                                  
 11563                                  	.L_if_else_002a:
 11564 00007862 488B4528                	mov rax, PARAM(1)	; param b
 11565 00007866 50                      	push rax
 11566 00007867 6A01                    	push 1	; arg count
 11567 00007869 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 11568 00007871 803805                  	cmp byte [rax], T_undefined
 11569 00007874 0F84E2DE0000            	je L_error_fvar_undefined
 11570 0000787A 803804                  	cmp byte [rax], T_closure
 11571 0000787D 0F855DDF0000            	jne L_error_non_closure
 11572 00007883 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11573 00007886 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11574                                  
 11575 00007889 483D[02000000]          	cmp rax, sob_boolean_false
 11576 0000788F 0F8487000000            	je .L_if_else_002b
 11577                                  	; preparing a tail-call
 11578 00007895 488B4528                	mov rax, PARAM(1)	; param b
 11579 00007899 50                      	push rax
 11580 0000789A 488B4520                	mov rax, PARAM(0)	; param a
 11581 0000789E 50                      	push rax
 11582 0000789F 6A01                    	push 1	; arg count
 11583 000078A1 488B0425[270F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 11584 000078A9 803805                  	cmp byte [rax], T_undefined
 11585 000078AC 0F84AADE0000            	je L_error_fvar_undefined
 11586 000078B2 803804                  	cmp byte [rax], T_closure
 11587 000078B5 0F8525DF0000            	jne L_error_non_closure
 11588 000078BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 11589 000078BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 11590 000078C1 50                      	push rax
 11591 000078C2 6A02                    	push 2	; arg count
 11592 000078C4 488B0425[D10F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 11593 000078CC 803805                  	cmp byte [rax], T_undefined
 11594 000078CF 0F8487DE0000            	je L_error_fvar_undefined
 11595 000078D5 803804                  	cmp byte [rax], T_closure
 11596 000078D8 0F8502DF0000            	jne L_error_non_closure
 11597 000078DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 11598                                  
 11599                                  	; recycling the current frame
 11600 000078E1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11601 000078E4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11602 000078E7 B906000000              	mov rcx, 2 + 4
 11603 000078EC 488B5D18                	mov rbx, COUNT
 11604 000078F0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11605 000078F5 488D55F8                	lea rdx, [rbp - 8 * 1]
 11606                                  .L_tc_recycle_frame_loop_005a:
 11607 000078F9 4883F900                	cmp rcx, 0
 11608 000078FD 7413                    	je .L_tc_recycle_frame_done_005a
 11609 000078FF 488B32                  	mov rsi, qword [rdx]
 11610 00007902 488933                  	mov qword [rbx], rsi
 11611 00007905 48FFC9                  	dec rcx
 11612 00007908 4883EB08                	sub rbx, 8 * 1
 11613 0000790C 4883EA08                	sub rdx, 8 * 1
 11614 00007910 EBE7                    	jmp .L_tc_recycle_frame_loop_005a
 11615                                  .L_tc_recycle_frame_done_005a:
 11616 00007912 488D6308                	lea rsp, [rbx + 8 * 1]
 11617 00007916 5D                      	pop rbp	; the proc will restore it!
 11618 00007917 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11619                                  
 11620 0000791A EB51                    	jmp .L_if_end_002b
 11621                                  
 11622                                  	.L_if_else_002b:
 11623                                  	; preparing a tail-call
 11624 0000791C 6A00                    	push 0	; arg count
 11625 0000791E 488B4510                	mov rax, ENV
 11626 00007922 488B00                  	mov rax, qword [rax + 8 * 0]
 11627 00007925 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11628 00007928 803804                  	cmp byte [rax], T_closure
 11629 0000792B 0F85AFDE0000            	jne L_error_non_closure
 11630 00007931 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11631                                  
 11632                                  	; recycling the current frame
 11633 00007934 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11634 00007937 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11635 0000793A B904000000              	mov rcx, 0 + 4
 11636 0000793F 488B5D18                	mov rbx, COUNT
 11637 00007943 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11638 00007948 488D55F8                	lea rdx, [rbp - 8 * 1]
 11639                                  .L_tc_recycle_frame_loop_005b:
 11640 0000794C 4883F900                	cmp rcx, 0
 11641 00007950 7413                    	je .L_tc_recycle_frame_done_005b
 11642 00007952 488B32                  	mov rsi, qword [rdx]
 11643 00007955 488933                  	mov qword [rbx], rsi
 11644 00007958 48FFC9                  	dec rcx
 11645 0000795B 4883EB08                	sub rbx, 8 * 1
 11646 0000795F 4883EA08                	sub rdx, 8 * 1
 11647 00007963 EBE7                    	jmp .L_tc_recycle_frame_loop_005b
 11648                                  .L_tc_recycle_frame_done_005b:
 11649 00007965 488D6308                	lea rsp, [rbx + 8 * 1]
 11650 00007969 5D                      	pop rbp	; the proc will restore it!
 11651 0000796A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11652                                  
 11653                                  	.L_if_end_002b:
 11654                                  
 11655                                  	.L_if_end_002a:
 11656                                  
 11657                                  	.L_if_end_0029:
 11658                                  
 11659 0000796D E97A050000              	jmp .L_if_end_0028
 11660                                  
 11661                                  	.L_if_else_0028:
 11662 00007972 488B4520                	mov rax, PARAM(0)	; param a
 11663 00007976 50                      	push rax
 11664 00007977 6A01                    	push 1	; arg count
 11665 00007979 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11666 00007981 803805                  	cmp byte [rax], T_undefined
 11667 00007984 0F84D2DD0000            	je L_error_fvar_undefined
 11668 0000798A 803804                  	cmp byte [rax], T_closure
 11669 0000798D 0F854DDE0000            	jne L_error_non_closure
 11670 00007993 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11671 00007996 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11672                                  
 11673 00007999 483D[02000000]          	cmp rax, sob_boolean_false
 11674 0000799F 0F8463020000            	je .L_if_else_002c
 11675 000079A5 488B4528                	mov rax, PARAM(1)	; param b
 11676 000079A9 50                      	push rax
 11677 000079AA 6A01                    	push 1	; arg count
 11678 000079AC 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11679 000079B4 803805                  	cmp byte [rax], T_undefined
 11680 000079B7 0F849FDD0000            	je L_error_fvar_undefined
 11681 000079BD 803804                  	cmp byte [rax], T_closure
 11682 000079C0 0F851ADE0000            	jne L_error_non_closure
 11683 000079C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11684 000079C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11685                                  
 11686 000079CC 483D[02000000]          	cmp rax, sob_boolean_false
 11687 000079D2 0F848A000000            	je .L_if_else_002d
 11688                                  	; preparing a tail-call
 11689 000079D8 488B4528                	mov rax, PARAM(1)	; param b
 11690 000079DC 50                      	push rax
 11691 000079DD 6A01                    	push 1	; arg count
 11692 000079DF 488B0425[CF110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 11693 000079E7 803805                  	cmp byte [rax], T_undefined
 11694 000079EA 0F846CDD0000            	je L_error_fvar_undefined
 11695 000079F0 803804                  	cmp byte [rax], T_closure
 11696 000079F3 0F85E7DD0000            	jne L_error_non_closure
 11697 000079F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11698 000079FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 11699 000079FF 50                      	push rax
 11700 00007A00 488B4520                	mov rax, PARAM(0)	; param a
 11701 00007A04 50                      	push rax
 11702 00007A05 6A02                    	push 2	; arg count
 11703 00007A07 488B0425[15100000]      	mov rax, qword [free_var_36]	; free var __bin-mul-qq
 11704 00007A0F 803805                  	cmp byte [rax], T_undefined
 11705 00007A12 0F8444DD0000            	je L_error_fvar_undefined
 11706 00007A18 803804                  	cmp byte [rax], T_closure
 11707 00007A1B 0F85BFDD0000            	jne L_error_non_closure
 11708 00007A21 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11709                                  
 11710                                  	; recycling the current frame
 11711 00007A24 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11712 00007A27 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11713 00007A2A B906000000              	mov rcx, 2 + 4
 11714 00007A2F 488B5D18                	mov rbx, COUNT
 11715 00007A33 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11716 00007A38 488D55F8                	lea rdx, [rbp - 8 * 1]
 11717                                  .L_tc_recycle_frame_loop_005c:
 11718 00007A3C 4883F900                	cmp rcx, 0
 11719 00007A40 7413                    	je .L_tc_recycle_frame_done_005c
 11720 00007A42 488B32                  	mov rsi, qword [rdx]
 11721 00007A45 488933                  	mov qword [rbx], rsi
 11722 00007A48 48FFC9                  	dec rcx
 11723 00007A4B 4883EB08                	sub rbx, 8 * 1
 11724 00007A4F 4883EA08                	sub rdx, 8 * 1
 11725 00007A53 EBE7                    	jmp .L_tc_recycle_frame_loop_005c
 11726                                  .L_tc_recycle_frame_done_005c:
 11727 00007A55 488D6308                	lea rsp, [rbx + 8 * 1]
 11728 00007A59 5D                      	pop rbp	; the proc will restore it!
 11729 00007A5A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11730                                  
 11731 00007A5D E9A1010000              	jmp .L_if_end_002d
 11732                                  
 11733                                  	.L_if_else_002d:
 11734 00007A62 488B4528                	mov rax, PARAM(1)	; param b
 11735 00007A66 50                      	push rax
 11736 00007A67 6A01                    	push 1	; arg count
 11737 00007A69 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11738 00007A71 803805                  	cmp byte [rax], T_undefined
 11739 00007A74 0F84E2DC0000            	je L_error_fvar_undefined
 11740 00007A7A 803804                  	cmp byte [rax], T_closure
 11741 00007A7D 0F855DDD0000            	jne L_error_non_closure
 11742 00007A83 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11743 00007A86 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11744                                  
 11745 00007A89 483D[02000000]          	cmp rax, sob_boolean_false
 11746 00007A8F 7467                    	je .L_if_else_002e
 11747                                  	; preparing a tail-call
 11748 00007A91 488B4528                	mov rax, PARAM(1)	; param b
 11749 00007A95 50                      	push rax
 11750 00007A96 488B4520                	mov rax, PARAM(0)	; param a
 11751 00007A9A 50                      	push rax
 11752 00007A9B 6A02                    	push 2	; arg count
 11753 00007A9D 488B0425[15100000]      	mov rax, qword [free_var_36]	; free var __bin-mul-qq
 11754 00007AA5 803805                  	cmp byte [rax], T_undefined
 11755 00007AA8 0F84AEDC0000            	je L_error_fvar_undefined
 11756 00007AAE 803804                  	cmp byte [rax], T_closure
 11757 00007AB1 0F8529DD0000            	jne L_error_non_closure
 11758 00007AB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11759                                  
 11760                                  	; recycling the current frame
 11761 00007ABA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11762 00007ABD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11763 00007AC0 B906000000              	mov rcx, 2 + 4
 11764 00007AC5 488B5D18                	mov rbx, COUNT
 11765 00007AC9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11766 00007ACE 488D55F8                	lea rdx, [rbp - 8 * 1]
 11767                                  .L_tc_recycle_frame_loop_005d:
 11768 00007AD2 4883F900                	cmp rcx, 0
 11769 00007AD6 7413                    	je .L_tc_recycle_frame_done_005d
 11770 00007AD8 488B32                  	mov rsi, qword [rdx]
 11771 00007ADB 488933                  	mov qword [rbx], rsi
 11772 00007ADE 48FFC9                  	dec rcx
 11773 00007AE1 4883EB08                	sub rbx, 8 * 1
 11774 00007AE5 4883EA08                	sub rdx, 8 * 1
 11775 00007AE9 EBE7                    	jmp .L_tc_recycle_frame_loop_005d
 11776                                  .L_tc_recycle_frame_done_005d:
 11777 00007AEB 488D6308                	lea rsp, [rbx + 8 * 1]
 11778 00007AEF 5D                      	pop rbp	; the proc will restore it!
 11779 00007AF0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11780                                  
 11781 00007AF3 E90B010000              	jmp .L_if_end_002e
 11782                                  
 11783                                  	.L_if_else_002e:
 11784 00007AF8 488B4528                	mov rax, PARAM(1)	; param b
 11785 00007AFC 50                      	push rax
 11786 00007AFD 6A01                    	push 1	; arg count
 11787 00007AFF 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 11788 00007B07 803805                  	cmp byte [rax], T_undefined
 11789 00007B0A 0F844CDC0000            	je L_error_fvar_undefined
 11790 00007B10 803804                  	cmp byte [rax], T_closure
 11791 00007B13 0F85C7DC0000            	jne L_error_non_closure
 11792 00007B19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11793 00007B1C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11794                                  
 11795 00007B1F 483D[02000000]          	cmp rax, sob_boolean_false
 11796 00007B25 0F8487000000            	je .L_if_else_002f
 11797                                  	; preparing a tail-call
 11798 00007B2B 488B4528                	mov rax, PARAM(1)	; param b
 11799 00007B2F 50                      	push rax
 11800 00007B30 488B4520                	mov rax, PARAM(0)	; param a
 11801 00007B34 50                      	push rax
 11802 00007B35 6A01                    	push 1	; arg count
 11803 00007B37 488B0425[380F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 11804 00007B3F 803805                  	cmp byte [rax], T_undefined
 11805 00007B42 0F8414DC0000            	je L_error_fvar_undefined
 11806 00007B48 803804                  	cmp byte [rax], T_closure
 11807 00007B4B 0F858FDC0000            	jne L_error_non_closure
 11808 00007B51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11809 00007B54 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11810 00007B57 50                      	push rax
 11811 00007B58 6A02                    	push 2	; arg count
 11812 00007B5A 488B0425[D10F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 11813 00007B62 803805                  	cmp byte [rax], T_undefined
 11814 00007B65 0F84F1DB0000            	je L_error_fvar_undefined
 11815 00007B6B 803804                  	cmp byte [rax], T_closure
 11816 00007B6E 0F856CDC0000            	jne L_error_non_closure
 11817 00007B74 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11818                                  
 11819                                  	; recycling the current frame
 11820 00007B77 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11821 00007B7A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11822 00007B7D B906000000              	mov rcx, 2 + 4
 11823 00007B82 488B5D18                	mov rbx, COUNT
 11824 00007B86 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11825 00007B8B 488D55F8                	lea rdx, [rbp - 8 * 1]
 11826                                  .L_tc_recycle_frame_loop_005e:
 11827 00007B8F 4883F900                	cmp rcx, 0
 11828 00007B93 7413                    	je .L_tc_recycle_frame_done_005e
 11829 00007B95 488B32                  	mov rsi, qword [rdx]
 11830 00007B98 488933                  	mov qword [rbx], rsi
 11831 00007B9B 48FFC9                  	dec rcx
 11832 00007B9E 4883EB08                	sub rbx, 8 * 1
 11833 00007BA2 4883EA08                	sub rdx, 8 * 1
 11834 00007BA6 EBE7                    	jmp .L_tc_recycle_frame_loop_005e
 11835                                  .L_tc_recycle_frame_done_005e:
 11836 00007BA8 488D6308                	lea rsp, [rbx + 8 * 1]
 11837 00007BAC 5D                      	pop rbp	; the proc will restore it!
 11838 00007BAD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11839                                  
 11840 00007BB0 EB51                    	jmp .L_if_end_002f
 11841                                  
 11842                                  	.L_if_else_002f:
 11843                                  	; preparing a tail-call
 11844 00007BB2 6A00                    	push 0	; arg count
 11845 00007BB4 488B4510                	mov rax, ENV
 11846 00007BB8 488B00                  	mov rax, qword [rax + 8 * 0]
 11847 00007BBB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11848 00007BBE 803804                  	cmp byte [rax], T_closure
 11849 00007BC1 0F8519DC0000            	jne L_error_non_closure
 11850 00007BC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11851                                  
 11852                                  	; recycling the current frame
 11853 00007BCA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11854 00007BCD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11855 00007BD0 B904000000              	mov rcx, 0 + 4
 11856 00007BD5 488B5D18                	mov rbx, COUNT
 11857 00007BD9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11858 00007BDE 488D55F8                	lea rdx, [rbp - 8 * 1]
 11859                                  .L_tc_recycle_frame_loop_005f:
 11860 00007BE2 4883F900                	cmp rcx, 0
 11861 00007BE6 7413                    	je .L_tc_recycle_frame_done_005f
 11862 00007BE8 488B32                  	mov rsi, qword [rdx]
 11863 00007BEB 488933                  	mov qword [rbx], rsi
 11864 00007BEE 48FFC9                  	dec rcx
 11865 00007BF1 4883EB08                	sub rbx, 8 * 1
 11866 00007BF5 4883EA08                	sub rdx, 8 * 1
 11867 00007BF9 EBE7                    	jmp .L_tc_recycle_frame_loop_005f
 11868                                  .L_tc_recycle_frame_done_005f:
 11869 00007BFB 488D6308                	lea rsp, [rbx + 8 * 1]
 11870 00007BFF 5D                      	pop rbp	; the proc will restore it!
 11871 00007C00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11872                                  
 11873                                  	.L_if_end_002f:
 11874                                  
 11875                                  	.L_if_end_002e:
 11876                                  
 11877                                  	.L_if_end_002d:
 11878                                  
 11879 00007C03 E9E4020000              	jmp .L_if_end_002c
 11880                                  
 11881                                  	.L_if_else_002c:
 11882 00007C08 488B4520                	mov rax, PARAM(0)	; param a
 11883 00007C0C 50                      	push rax
 11884 00007C0D 6A01                    	push 1	; arg count
 11885 00007C0F 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 11886 00007C17 803805                  	cmp byte [rax], T_undefined
 11887 00007C1A 0F843CDB0000            	je L_error_fvar_undefined
 11888 00007C20 803804                  	cmp byte [rax], T_closure
 11889 00007C23 0F85B7DB0000            	jne L_error_non_closure
 11890 00007C29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11891 00007C2C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11892                                  
 11893 00007C2F 483D[02000000]          	cmp rax, sob_boolean_false
 11894 00007C35 0F8460020000            	je .L_if_else_0030
 11895 00007C3B 488B4528                	mov rax, PARAM(1)	; param b
 11896 00007C3F 50                      	push rax
 11897 00007C40 6A01                    	push 1	; arg count
 11898 00007C42 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11899 00007C4A 803805                  	cmp byte [rax], T_undefined
 11900 00007C4D 0F8409DB0000            	je L_error_fvar_undefined
 11901 00007C53 803804                  	cmp byte [rax], T_closure
 11902 00007C56 0F8584DB0000            	jne L_error_non_closure
 11903 00007C5C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11904 00007C5F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11905                                  
 11906 00007C62 483D[02000000]          	cmp rax, sob_boolean_false
 11907 00007C68 0F848A000000            	je .L_if_else_0031
 11908                                  	; preparing a tail-call
 11909 00007C6E 488B4528                	mov rax, PARAM(1)	; param b
 11910 00007C72 50                      	push rax
 11911 00007C73 6A01                    	push 1	; arg count
 11912 00007C75 488B0425[270F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 11913 00007C7D 803805                  	cmp byte [rax], T_undefined
 11914 00007C80 0F84D6DA0000            	je L_error_fvar_undefined
 11915 00007C86 803804                  	cmp byte [rax], T_closure
 11916 00007C89 0F8551DB0000            	jne L_error_non_closure
 11917 00007C8F FF7001                  	push SOB_CLOSURE_ENV(rax)
 11918 00007C92 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11919 00007C95 50                      	push rax
 11920 00007C96 488B4520                	mov rax, PARAM(0)	; param a
 11921 00007C9A 50                      	push rax
 11922 00007C9B 6A02                    	push 2	; arg count
 11923 00007C9D 488B0425[D10F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 11924 00007CA5 803805                  	cmp byte [rax], T_undefined
 11925 00007CA8 0F84AEDA0000            	je L_error_fvar_undefined
 11926 00007CAE 803804                  	cmp byte [rax], T_closure
 11927 00007CB1 0F8529DB0000            	jne L_error_non_closure
 11928 00007CB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11929                                  
 11930                                  	; recycling the current frame
 11931 00007CBA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11932 00007CBD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11933 00007CC0 B906000000              	mov rcx, 2 + 4
 11934 00007CC5 488B5D18                	mov rbx, COUNT
 11935 00007CC9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11936 00007CCE 488D55F8                	lea rdx, [rbp - 8 * 1]
 11937                                  .L_tc_recycle_frame_loop_0060:
 11938 00007CD2 4883F900                	cmp rcx, 0
 11939 00007CD6 7413                    	je .L_tc_recycle_frame_done_0060
 11940 00007CD8 488B32                  	mov rsi, qword [rdx]
 11941 00007CDB 488933                  	mov qword [rbx], rsi
 11942 00007CDE 48FFC9                  	dec rcx
 11943 00007CE1 4883EB08                	sub rbx, 8 * 1
 11944 00007CE5 4883EA08                	sub rdx, 8 * 1
 11945 00007CE9 EBE7                    	jmp .L_tc_recycle_frame_loop_0060
 11946                                  .L_tc_recycle_frame_done_0060:
 11947 00007CEB 488D6308                	lea rsp, [rbx + 8 * 1]
 11948 00007CEF 5D                      	pop rbp	; the proc will restore it!
 11949 00007CF0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11950                                  
 11951 00007CF3 E9A1010000              	jmp .L_if_end_0031
 11952                                  
 11953                                  	.L_if_else_0031:
 11954 00007CF8 488B4528                	mov rax, PARAM(1)	; param b
 11955 00007CFC 50                      	push rax
 11956 00007CFD 6A01                    	push 1	; arg count
 11957 00007CFF 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11958 00007D07 803805                  	cmp byte [rax], T_undefined
 11959 00007D0A 0F844CDA0000            	je L_error_fvar_undefined
 11960 00007D10 803804                  	cmp byte [rax], T_closure
 11961 00007D13 0F85C7DA0000            	jne L_error_non_closure
 11962 00007D19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11963 00007D1C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11964                                  
 11965 00007D1F 483D[02000000]          	cmp rax, sob_boolean_false
 11966 00007D25 0F848A000000            	je .L_if_else_0032
 11967                                  	; preparing a tail-call
 11968 00007D2B 488B4528                	mov rax, PARAM(1)	; param b
 11969 00007D2F 50                      	push rax
 11970 00007D30 6A01                    	push 1	; arg count
 11971 00007D32 488B0425[380F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 11972 00007D3A 803805                  	cmp byte [rax], T_undefined
 11973 00007D3D 0F8419DA0000            	je L_error_fvar_undefined
 11974 00007D43 803804                  	cmp byte [rax], T_closure
 11975 00007D46 0F8594DA0000            	jne L_error_non_closure
 11976 00007D4C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11977 00007D4F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11978 00007D52 50                      	push rax
 11979 00007D53 488B4520                	mov rax, PARAM(0)	; param a
 11980 00007D57 50                      	push rax
 11981 00007D58 6A02                    	push 2	; arg count
 11982 00007D5A 488B0425[D10F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 11983 00007D62 803805                  	cmp byte [rax], T_undefined
 11984 00007D65 0F84F1D90000            	je L_error_fvar_undefined
 11985 00007D6B 803804                  	cmp byte [rax], T_closure
 11986 00007D6E 0F856CDA0000            	jne L_error_non_closure
 11987 00007D74 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11988                                  
 11989                                  	; recycling the current frame
 11990 00007D77 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11991 00007D7A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11992 00007D7D B906000000              	mov rcx, 2 + 4
 11993 00007D82 488B5D18                	mov rbx, COUNT
 11994 00007D86 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11995 00007D8B 488D55F8                	lea rdx, [rbp - 8 * 1]
 11996                                  .L_tc_recycle_frame_loop_0061:
 11997 00007D8F 4883F900                	cmp rcx, 0
 11998 00007D93 7413                    	je .L_tc_recycle_frame_done_0061
 11999 00007D95 488B32                  	mov rsi, qword [rdx]
 12000 00007D98 488933                  	mov qword [rbx], rsi
 12001 00007D9B 48FFC9                  	dec rcx
 12002 00007D9E 4883EB08                	sub rbx, 8 * 1
 12003 00007DA2 4883EA08                	sub rdx, 8 * 1
 12004 00007DA6 EBE7                    	jmp .L_tc_recycle_frame_loop_0061
 12005                                  .L_tc_recycle_frame_done_0061:
 12006 00007DA8 488D6308                	lea rsp, [rbx + 8 * 1]
 12007 00007DAC 5D                      	pop rbp	; the proc will restore it!
 12008 00007DAD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12009                                  
 12010 00007DB0 E9E4000000              	jmp .L_if_end_0032
 12011                                  
 12012                                  	.L_if_else_0032:
 12013 00007DB5 488B4528                	mov rax, PARAM(1)	; param b
 12014 00007DB9 50                      	push rax
 12015 00007DBA 6A01                    	push 1	; arg count
 12016 00007DBC 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 12017 00007DC4 803805                  	cmp byte [rax], T_undefined
 12018 00007DC7 0F848FD90000            	je L_error_fvar_undefined
 12019 00007DCD 803804                  	cmp byte [rax], T_closure
 12020 00007DD0 0F850ADA0000            	jne L_error_non_closure
 12021 00007DD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12022 00007DD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12023                                  
 12024 00007DDC 483D[02000000]          	cmp rax, sob_boolean_false
 12025 00007DE2 7464                    	je .L_if_else_0033
 12026                                  	; preparing a tail-call
 12027 00007DE4 488B4528                	mov rax, PARAM(1)	; param b
 12028 00007DE8 50                      	push rax
 12029 00007DE9 488B4520                	mov rax, PARAM(0)	; param a
 12030 00007DED 50                      	push rax
 12031 00007DEE 6A02                    	push 2	; arg count
 12032 00007DF0 488B0425[D10F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 12033 00007DF8 803805                  	cmp byte [rax], T_undefined
 12034 00007DFB 0F845BD90000            	je L_error_fvar_undefined
 12035 00007E01 803804                  	cmp byte [rax], T_closure
 12036 00007E04 0F85D6D90000            	jne L_error_non_closure
 12037 00007E0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12038                                  
 12039                                  	; recycling the current frame
 12040 00007E0D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12041 00007E10 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12042 00007E13 B906000000              	mov rcx, 2 + 4
 12043 00007E18 488B5D18                	mov rbx, COUNT
 12044 00007E1C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12045 00007E21 488D55F8                	lea rdx, [rbp - 8 * 1]
 12046                                  .L_tc_recycle_frame_loop_0062:
 12047 00007E25 4883F900                	cmp rcx, 0
 12048 00007E29 7413                    	je .L_tc_recycle_frame_done_0062
 12049 00007E2B 488B32                  	mov rsi, qword [rdx]
 12050 00007E2E 488933                  	mov qword [rbx], rsi
 12051 00007E31 48FFC9                  	dec rcx
 12052 00007E34 4883EB08                	sub rbx, 8 * 1
 12053 00007E38 4883EA08                	sub rdx, 8 * 1
 12054 00007E3C EBE7                    	jmp .L_tc_recycle_frame_loop_0062
 12055                                  .L_tc_recycle_frame_done_0062:
 12056 00007E3E 488D6308                	lea rsp, [rbx + 8 * 1]
 12057 00007E42 5D                      	pop rbp	; the proc will restore it!
 12058 00007E43 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12059                                  
 12060 00007E46 EB51                    	jmp .L_if_end_0033
 12061                                  
 12062                                  	.L_if_else_0033:
 12063                                  	; preparing a tail-call
 12064 00007E48 6A00                    	push 0	; arg count
 12065 00007E4A 488B4510                	mov rax, ENV
 12066 00007E4E 488B00                  	mov rax, qword [rax + 8 * 0]
 12067 00007E51 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12068 00007E54 803804                  	cmp byte [rax], T_closure
 12069 00007E57 0F8583D90000            	jne L_error_non_closure
 12070 00007E5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 12071                                  
 12072                                  	; recycling the current frame
 12073 00007E60 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12074 00007E63 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12075 00007E66 B904000000              	mov rcx, 0 + 4
 12076 00007E6B 488B5D18                	mov rbx, COUNT
 12077 00007E6F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12078 00007E74 488D55F8                	lea rdx, [rbp - 8 * 1]
 12079                                  .L_tc_recycle_frame_loop_0063:
 12080 00007E78 4883F900                	cmp rcx, 0
 12081 00007E7C 7413                    	je .L_tc_recycle_frame_done_0063
 12082 00007E7E 488B32                  	mov rsi, qword [rdx]
 12083 00007E81 488933                  	mov qword [rbx], rsi
 12084 00007E84 48FFC9                  	dec rcx
 12085 00007E87 4883EB08                	sub rbx, 8 * 1
 12086 00007E8B 4883EA08                	sub rdx, 8 * 1
 12087 00007E8F EBE7                    	jmp .L_tc_recycle_frame_loop_0063
 12088                                  .L_tc_recycle_frame_done_0063:
 12089 00007E91 488D6308                	lea rsp, [rbx + 8 * 1]
 12090 00007E95 5D                      	pop rbp	; the proc will restore it!
 12091 00007E96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12092                                  
 12093                                  	.L_if_end_0033:
 12094                                  
 12095                                  	.L_if_end_0032:
 12096                                  
 12097                                  	.L_if_end_0031:
 12098                                  
 12099 00007E99 EB51                    	jmp .L_if_end_0030
 12100                                  
 12101                                  	.L_if_else_0030:
 12102                                  	; preparing a tail-call
 12103 00007E9B 6A00                    	push 0	; arg count
 12104 00007E9D 488B4510                	mov rax, ENV
 12105 00007EA1 488B00                  	mov rax, qword [rax + 8 * 0]
 12106 00007EA4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12107 00007EA7 803804                  	cmp byte [rax], T_closure
 12108 00007EAA 0F8530D90000            	jne L_error_non_closure
 12109 00007EB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12110                                  
 12111                                  	; recycling the current frame
 12112 00007EB3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12113 00007EB6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12114 00007EB9 B904000000              	mov rcx, 0 + 4
 12115 00007EBE 488B5D18                	mov rbx, COUNT
 12116 00007EC2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12117 00007EC7 488D55F8                	lea rdx, [rbp - 8 * 1]
 12118                                  .L_tc_recycle_frame_loop_0064:
 12119 00007ECB 4883F900                	cmp rcx, 0
 12120 00007ECF 7413                    	je .L_tc_recycle_frame_done_0064
 12121 00007ED1 488B32                  	mov rsi, qword [rdx]
 12122 00007ED4 488933                  	mov qword [rbx], rsi
 12123 00007ED7 48FFC9                  	dec rcx
 12124 00007EDA 4883EB08                	sub rbx, 8 * 1
 12125 00007EDE 4883EA08                	sub rdx, 8 * 1
 12126 00007EE2 EBE7                    	jmp .L_tc_recycle_frame_loop_0064
 12127                                  .L_tc_recycle_frame_done_0064:
 12128 00007EE4 488D6308                	lea rsp, [rbx + 8 * 1]
 12129 00007EE8 5D                      	pop rbp	; the proc will restore it!
 12130 00007EE9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12131                                  
 12132                                  	.L_if_end_0030:
 12133                                  
 12134                                  	.L_if_end_002c:
 12135                                  
 12136                                  	.L_if_end_0028:
 12137 00007EEC C9                      	leave
 12138 00007EED C22000                  	ret AND_KILL_FRAME(2)
 12139                                  .L_lambda_simple_end_003f:	; new closure is in rax
 12140 00007EF0 50                      	push rax
 12141 00007EF1 6A01                    	push 1	; arg count
 12142 00007EF3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12143 00007EF8 E88CD90000              	call malloc
 12144 00007EFD 50                      	push rax
 12145 00007EFE BF08000000              	mov rdi, 8 * 1	; new rib
 12146 00007F03 E881D90000              	call malloc
 12147 00007F08 50                      	push rax
 12148 00007F09 BF10000000              	mov rdi, 8 * 2	; extended env
 12149 00007F0E E876D90000              	call malloc
 12150 00007F13 488B7D10                	mov rdi, ENV
 12151 00007F17 BE00000000              	mov rsi, 0
 12152 00007F1C BA01000000              	mov rdx, 1
 12153                                  .L_lambda_simple_env_loop_0040:	; ext_env[i + 1] <-- env[i]
 12154 00007F21 4883FE01                	cmp rsi, 1
 12155 00007F25 7410                    	je .L_lambda_simple_env_end_0040
 12156 00007F27 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12157 00007F2B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12158 00007F2F 48FFC6                  	inc rsi
 12159 00007F32 48FFC2                  	inc rdx
 12160 00007F35 EBEA                    	jmp .L_lambda_simple_env_loop_0040
 12161                                  .L_lambda_simple_env_end_0040:
 12162 00007F37 5B                      	pop rbx
 12163 00007F38 BE00000000              	mov rsi, 0
 12164                                  .L_lambda_simple_params_loop_0040:	; copy params
 12165 00007F3D 4883FE01                	cmp rsi, 1
 12166 00007F41 740E                    	je .L_lambda_simple_params_end_0040
 12167 00007F43 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12168 00007F48 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12169 00007F4C 48FFC6                  	inc rsi
 12170 00007F4F EBEC                    	jmp .L_lambda_simple_params_loop_0040
 12171                                  .L_lambda_simple_params_end_0040:
 12172 00007F51 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12173 00007F54 4889C3                  	mov rbx, rax
 12174 00007F57 58                      	pop rax
 12175 00007F58 C60004                  	mov byte [rax], T_closure
 12176 00007F5B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12177 00007F5F 48C74009[6C7F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0040
 12178 00007F67 E9E2010000              	jmp .L_lambda_simple_end_0040
 12179                                  .L_lambda_simple_code_0040:	; lambda-simple body
 12180 00007F6C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12181 00007F72 740B                    	je .L_lambda_simple_arity_check_ok_0040
 12182 00007F74 FF742410                	push qword [rsp + 8 * 2]
 12183 00007F78 6A01                    	push 1
 12184 00007F7A E9C3D80000              	jmp L_error_incorrect_arity_simple
 12185                                  .L_lambda_simple_arity_check_ok_0040:
 12186 00007F7F C8000000                	enter 0, 0
 12187 00007F83 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12188 00007F88 E8FCD80000              	call malloc
 12189 00007F8D 50                      	push rax
 12190 00007F8E BF08000000              	mov rdi, 8 * 1	; new rib
 12191 00007F93 E8F1D80000              	call malloc
 12192 00007F98 50                      	push rax
 12193 00007F99 BF18000000              	mov rdi, 8 * 3	; extended env
 12194 00007F9E E8E6D80000              	call malloc
 12195 00007FA3 488B7D10                	mov rdi, ENV
 12196 00007FA7 BE00000000              	mov rsi, 0
 12197 00007FAC BA01000000              	mov rdx, 1
 12198                                  .L_lambda_opt_env_loop_000c:	; ext_env[i + 1] <-- env[i]
 12199 00007FB1 4883FE02                	cmp rsi, 2
 12200 00007FB5 7410                    	je .L_lambda_opt_env_end_000c
 12201 00007FB7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12202 00007FBB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12203 00007FBF 48FFC6                  	inc rsi
 12204 00007FC2 48FFC2                  	inc rdx
 12205 00007FC5 EBEA                    	jmp .L_lambda_opt_env_loop_000c
 12206                                  .L_lambda_opt_env_end_000c:
 12207 00007FC7 5B                      	pop rbx
 12208 00007FC8 BE00000000              	mov rsi, 0
 12209                                  .L_lambda_opt_params_loop_000c:	; copy params
 12210 00007FCD 4883FE01                	cmp rsi, 1
 12211 00007FD1 740E                    	je .L_lambda_opt_params_end_000c
 12212 00007FD3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12213 00007FD8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12214 00007FDC 48FFC6                  	inc rsi
 12215 00007FDF EBEC                    	jmp .L_lambda_opt_params_loop_000c
 12216                                  .L_lambda_opt_params_end_000c:
 12217 00007FE1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12218 00007FE4 4889C3                  	mov rbx, rax
 12219 00007FE7 58                      	pop rax
 12220 00007FE8 C60004                  	mov byte [rax], T_closure
 12221 00007FEB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12222 00007FEF 48C74009[FC7F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000c
 12223 00007FF7 E94E010000              	jmp .L_lambda_opt_end_000c
 12224                                  .L_lambda_opt_code_000c:	; lambda-simple body
 12225 00007FFC 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 12226 00008002 740D                    	je .L_lambda_opt_arity_check_exact_000c ;	 if equal, go to exact arity
 12227 00008004 7F42                    	jg .L_lambda_opt_arity_check_more_000c ;	 if greater than, go to arity more
 12228 00008006 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 12229 0000800A 6A00                     	push 0
 12230 0000800C E945D80000              	jmp L_error_incorrect_arity_opt
 12231                                  	.L_lambda_opt_arity_check_exact_000c:
 12232 00008011 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 12233 00008016 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 12234 0000801B 4883EC08                	sub rsp, 8
 12235 0000801F 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 12236                                  	.L_lambda_opt_exact_shifting_loop_000c:
 12237 00008023 488B5108                	mov rdx, [rcx + 8]
 12238 00008027 488911                  	mov [rcx], rdx
 12239 0000802A 4883C108                	add rcx, 8
 12240 0000802E 4839CB                  	cmp rbx, rcx
 12241 00008031 75F0                    	jne .L_lambda_opt_exact_shifting_loop_000c
 12242                                  	.L_lambda_opt_exact_shifting_loop_end_000c:
 12243 00008033 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 12244 0000803A 4883C001                	add rax, 1 ; 	arg count += 1
 12245 0000803E 4889442410              	mov qword [rsp + 8 * 2], rax
 12246 00008043 E987000000              	jmp .L_lambda_opt_stack_adjusted_000c
 12247                                  	.L_lambda_opt_arity_check_more_000c:
 12248 00008048 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 12248 0000804A [0100000000000000] 
 12249 00008052 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 12250 00008058 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_000c
 12251                                  	.L_lambda_opt_stack_shrink_loop_000c:
 12252 0000805A BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 12253 0000805F E825D80000              	call malloc ;	 allocated memory for the optional scheme list
 12254 00008064 C60021                  	mov byte[rax], T_pair ;	 set type pair
 12255 00008067 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 12256 0000806B 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 12257 0000806E 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 12258 00008073 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 12259 00008078 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 12260 0000807C 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 12261                                  	.L_lambda_opt_more_shifting_loop_000c:
 12262 00008081 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 12263 00008084 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 12264 00008088 4883EB08                	sub rbx, 8 
 12265 0000808C 4839DC                  	cmp rsp, rbx
 12266 0000808F 7EF0                    	jle .L_lambda_opt_more_shifting_loop_000c
 12267                                  	.L_lambda_opt_more_shifting_loop_end_000c:
 12268 00008091 4883C408                	add rsp, 8 ;	 update rsp
 12269 00008095 488B5C2410              	mov rbx, [rsp + 8 * 2]
 12270 0000809A 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 12271 0000809E 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 12272 000080A3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12273 000080A9 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_000c
 12274                                  	.L_lambda_opt_stack_shrink_loop_exit_000c:
 12275 000080AB 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 12276 000080B0 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 12277 000080B5 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 12278 000080BA E8CAD70000              	call malloc ;	 allocated memory for the optional scheme list
 12279 000080BF C60021                  	mov byte[rax], T_pair ;	 set type pair
 12280 000080C2 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 12281 000080C6 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 12282 000080CA 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 12283                                  	.L_lambda_opt_stack_adjusted_000c:
 12284 000080CF C8000000                	enter 0, 0
 12285                                  	; preparing a tail-call
 12286 000080D3 488B4520                	mov rax, PARAM(0)	; param s
 12287 000080D7 50                      	push rax
 12288 000080D8 48B8-                   	mov rax, L_constants + 2158
 12288 000080DA [6E08000000000000] 
 12289 000080E2 50                      	push rax
 12290 000080E3 488B4510                	mov rax, ENV
 12291 000080E7 488B00                  	mov rax, qword [rax + 8 * 0]
 12292 000080EA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
 12293 000080ED 50                      	push rax
 12294 000080EE 6A03                    	push 3	; arg count
 12295 000080F0 488B0425[21150000]      	mov rax, qword [free_var_112]	; free var fold-left
 12296 000080F8 803805                  	cmp byte [rax], T_undefined
 12297 000080FB 0F845BD60000            	je L_error_fvar_undefined
 12298 00008101 803804                  	cmp byte [rax], T_closure
 12299 00008104 0F85D6D60000            	jne L_error_non_closure
 12300 0000810A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12301                                  
 12302                                  	; recycling the current frame
 12303 0000810D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12304 00008110 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12305 00008113 B907000000              	mov rcx, 3 + 4
 12306 00008118 488B5D18                	mov rbx, COUNT
 12307 0000811C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12308 00008121 488D55F8                	lea rdx, [rbp - 8 * 1]
 12309                                  .L_tc_recycle_frame_loop_0065:
 12310 00008125 4883F900                	cmp rcx, 0
 12311 00008129 7413                    	je .L_tc_recycle_frame_done_0065
 12312 0000812B 488B32                  	mov rsi, qword [rdx]
 12313 0000812E 488933                  	mov qword [rbx], rsi
 12314 00008131 48FFC9                  	dec rcx
 12315 00008134 4883EB08                	sub rbx, 8 * 1
 12316 00008138 4883EA08                	sub rdx, 8 * 1
 12317 0000813C EBE7                    	jmp .L_tc_recycle_frame_loop_0065
 12318                                  .L_tc_recycle_frame_done_0065:
 12319 0000813E 488D6308                	lea rsp, [rbx + 8 * 1]
 12320 00008142 5D                      	pop rbp	; the proc will restore it!
 12321 00008143 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12322 00008146 C9                      	leave
 12323 00008147 C21800                  	ret AND_KILL_FRAME(1)
 12324                                  .L_lambda_opt_end_000c:	; new closure is in rax
 12325 0000814A C9                      	leave
 12326 0000814B C21800                  	ret AND_KILL_FRAME(1)
 12327                                  .L_lambda_simple_end_0040:	; new closure is in rax
 12328 0000814E 803804                  	cmp byte [rax], T_closure
 12329 00008151 0F8589D60000            	jne L_error_non_closure
 12330 00008157 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12331                                  
 12332                                  	; recycling the current frame
 12333 0000815A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12334 0000815D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12335 00008160 B905000000              	mov rcx, 1 + 4
 12336 00008165 488B5D18                	mov rbx, COUNT
 12337 00008169 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12338 0000816E 488D55F8                	lea rdx, [rbp - 8 * 1]
 12339                                  .L_tc_recycle_frame_loop_0066:
 12340 00008172 4883F900                	cmp rcx, 0
 12341 00008176 7413                    	je .L_tc_recycle_frame_done_0066
 12342 00008178 488B32                  	mov rsi, qword [rdx]
 12343 0000817B 488933                  	mov qword [rbx], rsi
 12344 0000817E 48FFC9                  	dec rcx
 12345 00008181 4883EB08                	sub rbx, 8 * 1
 12346 00008185 4883EA08                	sub rdx, 8 * 1
 12347 00008189 EBE7                    	jmp .L_tc_recycle_frame_loop_0066
 12348                                  .L_tc_recycle_frame_done_0066:
 12349 0000818B 488D6308                	lea rsp, [rbx + 8 * 1]
 12350 0000818F 5D                      	pop rbp	; the proc will restore it!
 12351 00008190 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12352 00008193 C9                      	leave
 12353 00008194 C21800                  	ret AND_KILL_FRAME(1)
 12354                                  .L_lambda_simple_end_003e:	; new closure is in rax
 12355 00008197 803804                  	cmp byte [rax], T_closure
 12356 0000819A 0F8540D60000            	jne L_error_non_closure
 12357 000081A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12358 000081A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12359 000081A6 48890425[98150000]      	mov qword [free_var_119], rax
 12360 000081AE 48B8-                   	mov rax, sob_void
 12360 000081B0 [0000000000000000] 
 12361                                  
 12362 000081B8 4889C7                  	mov rdi, rax
 12363 000081BB E8DBD70000              	call print_sexpr_if_not_void
 12364                                  
 12365 000081C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12366 000081C5 E8BFD60000              	call malloc
 12367 000081CA 50                      	push rax
 12368 000081CB BF00000000              	mov rdi, 8 * 0	; new rib
 12369 000081D0 E8B4D60000              	call malloc
 12370 000081D5 50                      	push rax
 12371 000081D6 BF08000000              	mov rdi, 8 * 1	; extended env
 12372 000081DB E8A9D60000              	call malloc
 12373 000081E0 488B7D10                	mov rdi, ENV
 12374 000081E4 BE00000000              	mov rsi, 0
 12375 000081E9 BA01000000              	mov rdx, 1
 12376                                  .L_lambda_simple_env_loop_0041:	; ext_env[i + 1] <-- env[i]
 12377 000081EE 4883FE00                	cmp rsi, 0
 12378 000081F2 7410                    	je .L_lambda_simple_env_end_0041
 12379 000081F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12380 000081F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12381 000081FC 48FFC6                  	inc rsi
 12382 000081FF 48FFC2                  	inc rdx
 12383 00008202 EBEA                    	jmp .L_lambda_simple_env_loop_0041
 12384                                  .L_lambda_simple_env_end_0041:
 12385 00008204 5B                      	pop rbx
 12386 00008205 BE00000000              	mov rsi, 0
 12387                                  .L_lambda_simple_params_loop_0041:	; copy params
 12388 0000820A 4883FE00                	cmp rsi, 0
 12389 0000820E 740E                    	je .L_lambda_simple_params_end_0041
 12390 00008210 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12391 00008215 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12392 00008219 48FFC6                  	inc rsi
 12393 0000821C EBEC                    	jmp .L_lambda_simple_params_loop_0041
 12394                                  .L_lambda_simple_params_end_0041:
 12395 0000821E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12396 00008221 4889C3                  	mov rbx, rax
 12397 00008224 58                      	pop rax
 12398 00008225 C60004                  	mov byte [rax], T_closure
 12399 00008228 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12400 0000822C 48C74009[39820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0041
 12401 00008234 E989000000              	jmp .L_lambda_simple_end_0041
 12402                                  .L_lambda_simple_code_0041:	; lambda-simple body
 12403 00008239 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12404 0000823F 740B                    	je .L_lambda_simple_arity_check_ok_0041
 12405 00008241 FF742410                	push qword [rsp + 8 * 2]
 12406 00008245 6A00                    	push 0
 12407 00008247 E9F6D50000              	jmp L_error_incorrect_arity_simple
 12408                                  .L_lambda_simple_arity_check_ok_0041:
 12409 0000824C C8000000                	enter 0, 0
 12410                                  	; preparing a tail-call
 12411 00008250 48B8-                   	mov rax, L_constants + 2075
 12411 00008252 [1B08000000000000] 
 12412 0000825A 50                      	push rax
 12413 0000825B 48B8-                   	mov rax, L_constants + 2186
 12413 0000825D [8A08000000000000] 
 12414 00008265 50                      	push rax
 12415 00008266 6A02                    	push 2	; arg count
 12416 00008268 488B0425[7B100000]      	mov rax, qword [free_var_42]	; free var error
 12417 00008270 803805                  	cmp byte [rax], T_undefined
 12418 00008273 0F84E3D40000            	je L_error_fvar_undefined
 12419 00008279 803804                  	cmp byte [rax], T_closure
 12420 0000827C 0F855ED50000            	jne L_error_non_closure
 12421 00008282 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12422                                  
 12423                                  	; recycling the current frame
 12424 00008285 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12425 00008288 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12426 0000828B B906000000              	mov rcx, 2 + 4
 12427 00008290 488B5D18                	mov rbx, COUNT
 12428 00008294 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12429 00008299 488D55F8                	lea rdx, [rbp - 8 * 1]
 12430                                  .L_tc_recycle_frame_loop_0067:
 12431 0000829D 4883F900                	cmp rcx, 0
 12432 000082A1 7413                    	je .L_tc_recycle_frame_done_0067
 12433 000082A3 488B32                  	mov rsi, qword [rdx]
 12434 000082A6 488933                  	mov qword [rbx], rsi
 12435 000082A9 48FFC9                  	dec rcx
 12436 000082AC 4883EB08                	sub rbx, 8 * 1
 12437 000082B0 4883EA08                	sub rdx, 8 * 1
 12438 000082B4 EBE7                    	jmp .L_tc_recycle_frame_loop_0067
 12439                                  .L_tc_recycle_frame_done_0067:
 12440 000082B6 488D6308                	lea rsp, [rbx + 8 * 1]
 12441 000082BA 5D                      	pop rbp	; the proc will restore it!
 12442 000082BB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12443 000082BE C9                      	leave
 12444 000082BF C21000                  	ret AND_KILL_FRAME(0)
 12445                                  .L_lambda_simple_end_0041:	; new closure is in rax
 12446 000082C2 50                      	push rax
 12447 000082C3 6A01                    	push 1	; arg count
 12448 000082C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12449 000082CA E8BAD50000              	call malloc
 12450 000082CF 50                      	push rax
 12451 000082D0 BF00000000              	mov rdi, 8 * 0	; new rib
 12452 000082D5 E8AFD50000              	call malloc
 12453 000082DA 50                      	push rax
 12454 000082DB BF08000000              	mov rdi, 8 * 1	; extended env
 12455 000082E0 E8A4D50000              	call malloc
 12456 000082E5 488B7D10                	mov rdi, ENV
 12457 000082E9 BE00000000              	mov rsi, 0
 12458 000082EE BA01000000              	mov rdx, 1
 12459                                  .L_lambda_simple_env_loop_0042:	; ext_env[i + 1] <-- env[i]
 12460 000082F3 4883FE00                	cmp rsi, 0
 12461 000082F7 7410                    	je .L_lambda_simple_env_end_0042
 12462 000082F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12463 000082FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12464 00008301 48FFC6                  	inc rsi
 12465 00008304 48FFC2                  	inc rdx
 12466 00008307 EBEA                    	jmp .L_lambda_simple_env_loop_0042
 12467                                  .L_lambda_simple_env_end_0042:
 12468 00008309 5B                      	pop rbx
 12469 0000830A BE00000000              	mov rsi, 0
 12470                                  .L_lambda_simple_params_loop_0042:	; copy params
 12471 0000830F 4883FE00                	cmp rsi, 0
 12472 00008313 740E                    	je .L_lambda_simple_params_end_0042
 12473 00008315 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12474 0000831A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12475 0000831E 48FFC6                  	inc rsi
 12476 00008321 EBEC                    	jmp .L_lambda_simple_params_loop_0042
 12477                                  .L_lambda_simple_params_end_0042:
 12478 00008323 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12479 00008326 4889C3                  	mov rbx, rax
 12480 00008329 58                      	pop rax
 12481 0000832A C60004                  	mov byte [rax], T_closure
 12482 0000832D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12483 00008331 48C74009[3E830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0042
 12484 00008339 E9060D0000              	jmp .L_lambda_simple_end_0042
 12485                                  .L_lambda_simple_code_0042:	; lambda-simple body
 12486 0000833E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12487 00008344 740B                    	je .L_lambda_simple_arity_check_ok_0042
 12488 00008346 FF742410                	push qword [rsp + 8 * 2]
 12489 0000834A 6A01                    	push 1
 12490 0000834C E9F1D40000              	jmp L_error_incorrect_arity_simple
 12491                                  .L_lambda_simple_arity_check_ok_0042:
 12492 00008351 C8000000                	enter 0, 0
 12493                                  	; preparing a tail-call
 12494 00008355 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12495 0000835A E82AD50000              	call malloc
 12496 0000835F 50                      	push rax
 12497 00008360 BF08000000              	mov rdi, 8 * 1	; new rib
 12498 00008365 E81FD50000              	call malloc
 12499 0000836A 50                      	push rax
 12500 0000836B BF10000000              	mov rdi, 8 * 2	; extended env
 12501 00008370 E814D50000              	call malloc
 12502 00008375 488B7D10                	mov rdi, ENV
 12503 00008379 BE00000000              	mov rsi, 0
 12504 0000837E BA01000000              	mov rdx, 1
 12505                                  .L_lambda_simple_env_loop_0043:	; ext_env[i + 1] <-- env[i]
 12506 00008383 4883FE01                	cmp rsi, 1
 12507 00008387 7410                    	je .L_lambda_simple_env_end_0043
 12508 00008389 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12509 0000838D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12510 00008391 48FFC6                  	inc rsi
 12511 00008394 48FFC2                  	inc rdx
 12512 00008397 EBEA                    	jmp .L_lambda_simple_env_loop_0043
 12513                                  .L_lambda_simple_env_end_0043:
 12514 00008399 5B                      	pop rbx
 12515 0000839A BE00000000              	mov rsi, 0
 12516                                  .L_lambda_simple_params_loop_0043:	; copy params
 12517 0000839F 4883FE01                	cmp rsi, 1
 12518 000083A3 740E                    	je .L_lambda_simple_params_end_0043
 12519 000083A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12520 000083AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12521 000083AE 48FFC6                  	inc rsi
 12522 000083B1 EBEC                    	jmp .L_lambda_simple_params_loop_0043
 12523                                  .L_lambda_simple_params_end_0043:
 12524 000083B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12525 000083B6 4889C3                  	mov rbx, rax
 12526 000083B9 58                      	pop rax
 12527 000083BA C60004                  	mov byte [rax], T_closure
 12528 000083BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12529 000083C1 48C74009[CE830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0043
 12530 000083C9 E92B080000              	jmp .L_lambda_simple_end_0043
 12531                                  .L_lambda_simple_code_0043:	; lambda-simple body
 12532 000083CE 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12533 000083D4 740B                    	je .L_lambda_simple_arity_check_ok_0043
 12534 000083D6 FF742410                	push qword [rsp + 8 * 2]
 12535 000083DA 6A02                    	push 2
 12536 000083DC E961D40000              	jmp L_error_incorrect_arity_simple
 12537                                  .L_lambda_simple_arity_check_ok_0043:
 12538 000083E1 C8000000                	enter 0, 0
 12539 000083E5 488B4520                	mov rax, PARAM(0)	; param a
 12540 000083E9 50                      	push rax
 12541 000083EA 6A01                    	push 1	; arg count
 12542 000083EC 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12543 000083F4 803805                  	cmp byte [rax], T_undefined
 12544 000083F7 0F845FD30000            	je L_error_fvar_undefined
 12545 000083FD 803804                  	cmp byte [rax], T_closure
 12546 00008400 0F85DAD30000            	jne L_error_non_closure
 12547 00008406 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12548 00008409 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12549                                  
 12550 0000840C 483D[02000000]          	cmp rax, sob_boolean_false
 12551 00008412 0F8463020000            	je .L_if_else_0034
 12552 00008418 488B4528                	mov rax, PARAM(1)	; param b
 12553 0000841C 50                      	push rax
 12554 0000841D 6A01                    	push 1	; arg count
 12555 0000841F 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12556 00008427 803805                  	cmp byte [rax], T_undefined
 12557 0000842A 0F842CD30000            	je L_error_fvar_undefined
 12558 00008430 803804                  	cmp byte [rax], T_closure
 12559 00008433 0F85A7D30000            	jne L_error_non_closure
 12560 00008439 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12561 0000843C FF5009                  	call SOB_CLOSURE_CODE(rax)
 12562                                  
 12563 0000843F 483D[02000000]          	cmp rax, sob_boolean_false
 12564 00008445 7467                    	je .L_if_else_0035
 12565                                  	; preparing a tail-call
 12566 00008447 488B4528                	mov rax, PARAM(1)	; param b
 12567 0000844B 50                      	push rax
 12568 0000844C 488B4520                	mov rax, PARAM(0)	; param a
 12569 00008450 50                      	push rax
 12570 00008451 6A02                    	push 2	; arg count
 12571 00008453 488B0425[6A100000]      	mov rax, qword [free_var_41]	; free var __bin-div-zz
 12572 0000845B 803805                  	cmp byte [rax], T_undefined
 12573 0000845E 0F84F8D20000            	je L_error_fvar_undefined
 12574 00008464 803804                  	cmp byte [rax], T_closure
 12575 00008467 0F8573D30000            	jne L_error_non_closure
 12576 0000846D FF7001                  	push SOB_CLOSURE_ENV(rax)
 12577                                  
 12578                                  	; recycling the current frame
 12579 00008470 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12580 00008473 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12581 00008476 B906000000              	mov rcx, 2 + 4
 12582 0000847B 488B5D18                	mov rbx, COUNT
 12583 0000847F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12584 00008484 488D55F8                	lea rdx, [rbp - 8 * 1]
 12585                                  .L_tc_recycle_frame_loop_0068:
 12586 00008488 4883F900                	cmp rcx, 0
 12587 0000848C 7413                    	je .L_tc_recycle_frame_done_0068
 12588 0000848E 488B32                  	mov rsi, qword [rdx]
 12589 00008491 488933                  	mov qword [rbx], rsi
 12590 00008494 48FFC9                  	dec rcx
 12591 00008497 4883EB08                	sub rbx, 8 * 1
 12592 0000849B 4883EA08                	sub rdx, 8 * 1
 12593 0000849F EBE7                    	jmp .L_tc_recycle_frame_loop_0068
 12594                                  .L_tc_recycle_frame_done_0068:
 12595 000084A1 488D6308                	lea rsp, [rbx + 8 * 1]
 12596 000084A5 5D                      	pop rbp	; the proc will restore it!
 12597 000084A6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12598                                  
 12599 000084A9 E9C8010000              	jmp .L_if_end_0035
 12600                                  
 12601                                  	.L_if_else_0035:
 12602 000084AE 488B4528                	mov rax, PARAM(1)	; param b
 12603 000084B2 50                      	push rax
 12604 000084B3 6A01                    	push 1	; arg count
 12605 000084B5 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 12606 000084BD 803805                  	cmp byte [rax], T_undefined
 12607 000084C0 0F8496D20000            	je L_error_fvar_undefined
 12608 000084C6 803804                  	cmp byte [rax], T_closure
 12609 000084C9 0F8511D30000            	jne L_error_non_closure
 12610 000084CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 12611 000084D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12612                                  
 12613 000084D5 483D[02000000]          	cmp rax, sob_boolean_false
 12614 000084DB 0F848A000000            	je .L_if_else_0036
 12615                                  	; preparing a tail-call
 12616 000084E1 488B4528                	mov rax, PARAM(1)	; param b
 12617 000084E5 50                      	push rax
 12618 000084E6 488B4520                	mov rax, PARAM(0)	; param a
 12619 000084EA 50                      	push rax
 12620 000084EB 6A01                    	push 1	; arg count
 12621 000084ED 488B0425[CF110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 12622 000084F5 803805                  	cmp byte [rax], T_undefined
 12623 000084F8 0F845ED20000            	je L_error_fvar_undefined
 12624 000084FE 803804                  	cmp byte [rax], T_closure
 12625 00008501 0F85D9D20000            	jne L_error_non_closure
 12626 00008507 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12627 0000850A FF5009                  	call SOB_CLOSURE_CODE(rax)
 12628 0000850D 50                      	push rax
 12629 0000850E 6A02                    	push 2	; arg count
 12630 00008510 488B0425[26100000]      	mov rax, qword [free_var_37]	; free var __bin-div-qq
 12631 00008518 803805                  	cmp byte [rax], T_undefined
 12632 0000851B 0F843BD20000            	je L_error_fvar_undefined
 12633 00008521 803804                  	cmp byte [rax], T_closure
 12634 00008524 0F85B6D20000            	jne L_error_non_closure
 12635 0000852A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12636                                  
 12637                                  	; recycling the current frame
 12638 0000852D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12639 00008530 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12640 00008533 B906000000              	mov rcx, 2 + 4
 12641 00008538 488B5D18                	mov rbx, COUNT
 12642 0000853C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12643 00008541 488D55F8                	lea rdx, [rbp - 8 * 1]
 12644                                  .L_tc_recycle_frame_loop_0069:
 12645 00008545 4883F900                	cmp rcx, 0
 12646 00008549 7413                    	je .L_tc_recycle_frame_done_0069
 12647 0000854B 488B32                  	mov rsi, qword [rdx]
 12648 0000854E 488933                  	mov qword [rbx], rsi
 12649 00008551 48FFC9                  	dec rcx
 12650 00008554 4883EB08                	sub rbx, 8 * 1
 12651 00008558 4883EA08                	sub rdx, 8 * 1
 12652 0000855C EBE7                    	jmp .L_tc_recycle_frame_loop_0069
 12653                                  .L_tc_recycle_frame_done_0069:
 12654 0000855E 488D6308                	lea rsp, [rbx + 8 * 1]
 12655 00008562 5D                      	pop rbp	; the proc will restore it!
 12656 00008563 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12657                                  
 12658 00008566 E90B010000              	jmp .L_if_end_0036
 12659                                  
 12660                                  	.L_if_else_0036:
 12661 0000856B 488B4528                	mov rax, PARAM(1)	; param b
 12662 0000856F 50                      	push rax
 12663 00008570 6A01                    	push 1	; arg count
 12664 00008572 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 12665 0000857A 803805                  	cmp byte [rax], T_undefined
 12666 0000857D 0F84D9D10000            	je L_error_fvar_undefined
 12667 00008583 803804                  	cmp byte [rax], T_closure
 12668 00008586 0F8554D20000            	jne L_error_non_closure
 12669 0000858C FF7001                  	push SOB_CLOSURE_ENV(rax)
 12670 0000858F FF5009                  	call SOB_CLOSURE_CODE(rax)
 12671                                  
 12672 00008592 483D[02000000]          	cmp rax, sob_boolean_false
 12673 00008598 0F8487000000            	je .L_if_else_0037
 12674                                  	; preparing a tail-call
 12675 0000859E 488B4528                	mov rax, PARAM(1)	; param b
 12676 000085A2 50                      	push rax
 12677 000085A3 488B4520                	mov rax, PARAM(0)	; param a
 12678 000085A7 50                      	push rax
 12679 000085A8 6A01                    	push 1	; arg count
 12680 000085AA 488B0425[270F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 12681 000085B2 803805                  	cmp byte [rax], T_undefined
 12682 000085B5 0F84A1D10000            	je L_error_fvar_undefined
 12683 000085BB 803804                  	cmp byte [rax], T_closure
 12684 000085BE 0F851CD20000            	jne L_error_non_closure
 12685 000085C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12686 000085C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12687 000085CA 50                      	push rax
 12688 000085CB 6A02                    	push 2	; arg count
 12689 000085CD 488B0425[E20F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 12690 000085D5 803805                  	cmp byte [rax], T_undefined
 12691 000085D8 0F847ED10000            	je L_error_fvar_undefined
 12692 000085DE 803804                  	cmp byte [rax], T_closure
 12693 000085E1 0F85F9D10000            	jne L_error_non_closure
 12694 000085E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12695                                  
 12696                                  	; recycling the current frame
 12697 000085EA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12698 000085ED FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12699 000085F0 B906000000              	mov rcx, 2 + 4
 12700 000085F5 488B5D18                	mov rbx, COUNT
 12701 000085F9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12702 000085FE 488D55F8                	lea rdx, [rbp - 8 * 1]
 12703                                  .L_tc_recycle_frame_loop_006a:
 12704 00008602 4883F900                	cmp rcx, 0
 12705 00008606 7413                    	je .L_tc_recycle_frame_done_006a
 12706 00008608 488B32                  	mov rsi, qword [rdx]
 12707 0000860B 488933                  	mov qword [rbx], rsi
 12708 0000860E 48FFC9                  	dec rcx
 12709 00008611 4883EB08                	sub rbx, 8 * 1
 12710 00008615 4883EA08                	sub rdx, 8 * 1
 12711 00008619 EBE7                    	jmp .L_tc_recycle_frame_loop_006a
 12712                                  .L_tc_recycle_frame_done_006a:
 12713 0000861B 488D6308                	lea rsp, [rbx + 8 * 1]
 12714 0000861F 5D                      	pop rbp	; the proc will restore it!
 12715 00008620 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12716                                  
 12717 00008623 EB51                    	jmp .L_if_end_0037
 12718                                  
 12719                                  	.L_if_else_0037:
 12720                                  	; preparing a tail-call
 12721 00008625 6A00                    	push 0	; arg count
 12722 00008627 488B4510                	mov rax, ENV
 12723 0000862B 488B00                  	mov rax, qword [rax + 8 * 0]
 12724 0000862E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12725 00008631 803804                  	cmp byte [rax], T_closure
 12726 00008634 0F85A6D10000            	jne L_error_non_closure
 12727 0000863A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12728                                  
 12729                                  	; recycling the current frame
 12730 0000863D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12731 00008640 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12732 00008643 B904000000              	mov rcx, 0 + 4
 12733 00008648 488B5D18                	mov rbx, COUNT
 12734 0000864C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12735 00008651 488D55F8                	lea rdx, [rbp - 8 * 1]
 12736                                  .L_tc_recycle_frame_loop_006b:
 12737 00008655 4883F900                	cmp rcx, 0
 12738 00008659 7413                    	je .L_tc_recycle_frame_done_006b
 12739 0000865B 488B32                  	mov rsi, qword [rdx]
 12740 0000865E 488933                  	mov qword [rbx], rsi
 12741 00008661 48FFC9                  	dec rcx
 12742 00008664 4883EB08                	sub rbx, 8 * 1
 12743 00008668 4883EA08                	sub rdx, 8 * 1
 12744 0000866C EBE7                    	jmp .L_tc_recycle_frame_loop_006b
 12745                                  .L_tc_recycle_frame_done_006b:
 12746 0000866E 488D6308                	lea rsp, [rbx + 8 * 1]
 12747 00008672 5D                      	pop rbp	; the proc will restore it!
 12748 00008673 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12749                                  
 12750                                  	.L_if_end_0037:
 12751                                  
 12752                                  	.L_if_end_0036:
 12753                                  
 12754                                  	.L_if_end_0035:
 12755                                  
 12756 00008676 E97A050000              	jmp .L_if_end_0034
 12757                                  
 12758                                  	.L_if_else_0034:
 12759 0000867B 488B4520                	mov rax, PARAM(0)	; param a
 12760 0000867F 50                      	push rax
 12761 00008680 6A01                    	push 1	; arg count
 12762 00008682 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 12763 0000868A 803805                  	cmp byte [rax], T_undefined
 12764 0000868D 0F84C9D00000            	je L_error_fvar_undefined
 12765 00008693 803804                  	cmp byte [rax], T_closure
 12766 00008696 0F8544D10000            	jne L_error_non_closure
 12767 0000869C FF7001                  	push SOB_CLOSURE_ENV(rax)
 12768 0000869F FF5009                  	call SOB_CLOSURE_CODE(rax)
 12769                                  
 12770 000086A2 483D[02000000]          	cmp rax, sob_boolean_false
 12771 000086A8 0F8463020000            	je .L_if_else_0038
 12772 000086AE 488B4528                	mov rax, PARAM(1)	; param b
 12773 000086B2 50                      	push rax
 12774 000086B3 6A01                    	push 1	; arg count
 12775 000086B5 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12776 000086BD 803805                  	cmp byte [rax], T_undefined
 12777 000086C0 0F8496D00000            	je L_error_fvar_undefined
 12778 000086C6 803804                  	cmp byte [rax], T_closure
 12779 000086C9 0F8511D10000            	jne L_error_non_closure
 12780 000086CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 12781 000086D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12782                                  
 12783 000086D5 483D[02000000]          	cmp rax, sob_boolean_false
 12784 000086DB 0F848A000000            	je .L_if_else_0039
 12785                                  	; preparing a tail-call
 12786 000086E1 488B4528                	mov rax, PARAM(1)	; param b
 12787 000086E5 50                      	push rax
 12788 000086E6 6A01                    	push 1	; arg count
 12789 000086E8 488B0425[CF110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 12790 000086F0 803805                  	cmp byte [rax], T_undefined
 12791 000086F3 0F8463D00000            	je L_error_fvar_undefined
 12792 000086F9 803804                  	cmp byte [rax], T_closure
 12793 000086FC 0F85DED00000            	jne L_error_non_closure
 12794 00008702 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12795 00008705 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12796 00008708 50                      	push rax
 12797 00008709 488B4520                	mov rax, PARAM(0)	; param a
 12798 0000870D 50                      	push rax
 12799 0000870E 6A02                    	push 2	; arg count
 12800 00008710 488B0425[26100000]      	mov rax, qword [free_var_37]	; free var __bin-div-qq
 12801 00008718 803805                  	cmp byte [rax], T_undefined
 12802 0000871B 0F843BD00000            	je L_error_fvar_undefined
 12803 00008721 803804                  	cmp byte [rax], T_closure
 12804 00008724 0F85B6D00000            	jne L_error_non_closure
 12805 0000872A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12806                                  
 12807                                  	; recycling the current frame
 12808 0000872D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12809 00008730 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12810 00008733 B906000000              	mov rcx, 2 + 4
 12811 00008738 488B5D18                	mov rbx, COUNT
 12812 0000873C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12813 00008741 488D55F8                	lea rdx, [rbp - 8 * 1]
 12814                                  .L_tc_recycle_frame_loop_006c:
 12815 00008745 4883F900                	cmp rcx, 0
 12816 00008749 7413                    	je .L_tc_recycle_frame_done_006c
 12817 0000874B 488B32                  	mov rsi, qword [rdx]
 12818 0000874E 488933                  	mov qword [rbx], rsi
 12819 00008751 48FFC9                  	dec rcx
 12820 00008754 4883EB08                	sub rbx, 8 * 1
 12821 00008758 4883EA08                	sub rdx, 8 * 1
 12822 0000875C EBE7                    	jmp .L_tc_recycle_frame_loop_006c
 12823                                  .L_tc_recycle_frame_done_006c:
 12824 0000875E 488D6308                	lea rsp, [rbx + 8 * 1]
 12825 00008762 5D                      	pop rbp	; the proc will restore it!
 12826 00008763 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12827                                  
 12828 00008766 E9A1010000              	jmp .L_if_end_0039
 12829                                  
 12830                                  	.L_if_else_0039:
 12831 0000876B 488B4528                	mov rax, PARAM(1)	; param b
 12832 0000876F 50                      	push rax
 12833 00008770 6A01                    	push 1	; arg count
 12834 00008772 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 12835 0000877A 803805                  	cmp byte [rax], T_undefined
 12836 0000877D 0F84D9CF0000            	je L_error_fvar_undefined
 12837 00008783 803804                  	cmp byte [rax], T_closure
 12838 00008786 0F8554D00000            	jne L_error_non_closure
 12839 0000878C FF7001                  	push SOB_CLOSURE_ENV(rax)
 12840 0000878F FF5009                  	call SOB_CLOSURE_CODE(rax)
 12841                                  
 12842 00008792 483D[02000000]          	cmp rax, sob_boolean_false
 12843 00008798 7467                    	je .L_if_else_003a
 12844                                  	; preparing a tail-call
 12845 0000879A 488B4528                	mov rax, PARAM(1)	; param b
 12846 0000879E 50                      	push rax
 12847 0000879F 488B4520                	mov rax, PARAM(0)	; param a
 12848 000087A3 50                      	push rax
 12849 000087A4 6A02                    	push 2	; arg count
 12850 000087A6 488B0425[26100000]      	mov rax, qword [free_var_37]	; free var __bin-div-qq
 12851 000087AE 803805                  	cmp byte [rax], T_undefined
 12852 000087B1 0F84A5CF0000            	je L_error_fvar_undefined
 12853 000087B7 803804                  	cmp byte [rax], T_closure
 12854 000087BA 0F8520D00000            	jne L_error_non_closure
 12855 000087C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12856                                  
 12857                                  	; recycling the current frame
 12858 000087C3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12859 000087C6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12860 000087C9 B906000000              	mov rcx, 2 + 4
 12861 000087CE 488B5D18                	mov rbx, COUNT
 12862 000087D2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12863 000087D7 488D55F8                	lea rdx, [rbp - 8 * 1]
 12864                                  .L_tc_recycle_frame_loop_006d:
 12865 000087DB 4883F900                	cmp rcx, 0
 12866 000087DF 7413                    	je .L_tc_recycle_frame_done_006d
 12867 000087E1 488B32                  	mov rsi, qword [rdx]
 12868 000087E4 488933                  	mov qword [rbx], rsi
 12869 000087E7 48FFC9                  	dec rcx
 12870 000087EA 4883EB08                	sub rbx, 8 * 1
 12871 000087EE 4883EA08                	sub rdx, 8 * 1
 12872 000087F2 EBE7                    	jmp .L_tc_recycle_frame_loop_006d
 12873                                  .L_tc_recycle_frame_done_006d:
 12874 000087F4 488D6308                	lea rsp, [rbx + 8 * 1]
 12875 000087F8 5D                      	pop rbp	; the proc will restore it!
 12876 000087F9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12877                                  
 12878 000087FC E90B010000              	jmp .L_if_end_003a
 12879                                  
 12880                                  	.L_if_else_003a:
 12881 00008801 488B4528                	mov rax, PARAM(1)	; param b
 12882 00008805 50                      	push rax
 12883 00008806 6A01                    	push 1	; arg count
 12884 00008808 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 12885 00008810 803805                  	cmp byte [rax], T_undefined
 12886 00008813 0F8443CF0000            	je L_error_fvar_undefined
 12887 00008819 803804                  	cmp byte [rax], T_closure
 12888 0000881C 0F85BECF0000            	jne L_error_non_closure
 12889 00008822 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12890 00008825 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12891                                  
 12892 00008828 483D[02000000]          	cmp rax, sob_boolean_false
 12893 0000882E 0F8487000000            	je .L_if_else_003b
 12894                                  	; preparing a tail-call
 12895 00008834 488B4528                	mov rax, PARAM(1)	; param b
 12896 00008838 50                      	push rax
 12897 00008839 488B4520                	mov rax, PARAM(0)	; param a
 12898 0000883D 50                      	push rax
 12899 0000883E 6A01                    	push 1	; arg count
 12900 00008840 488B0425[380F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 12901 00008848 803805                  	cmp byte [rax], T_undefined
 12902 0000884B 0F840BCF0000            	je L_error_fvar_undefined
 12903 00008851 803804                  	cmp byte [rax], T_closure
 12904 00008854 0F8586CF0000            	jne L_error_non_closure
 12905 0000885A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12906 0000885D FF5009                  	call SOB_CLOSURE_CODE(rax)
 12907 00008860 50                      	push rax
 12908 00008861 6A02                    	push 2	; arg count
 12909 00008863 488B0425[E20F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 12910 0000886B 803805                  	cmp byte [rax], T_undefined
 12911 0000886E 0F84E8CE0000            	je L_error_fvar_undefined
 12912 00008874 803804                  	cmp byte [rax], T_closure
 12913 00008877 0F8563CF0000            	jne L_error_non_closure
 12914 0000887D FF7001                  	push SOB_CLOSURE_ENV(rax)
 12915                                  
 12916                                  	; recycling the current frame
 12917 00008880 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12918 00008883 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12919 00008886 B906000000              	mov rcx, 2 + 4
 12920 0000888B 488B5D18                	mov rbx, COUNT
 12921 0000888F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12922 00008894 488D55F8                	lea rdx, [rbp - 8 * 1]
 12923                                  .L_tc_recycle_frame_loop_006e:
 12924 00008898 4883F900                	cmp rcx, 0
 12925 0000889C 7413                    	je .L_tc_recycle_frame_done_006e
 12926 0000889E 488B32                  	mov rsi, qword [rdx]
 12927 000088A1 488933                  	mov qword [rbx], rsi
 12928 000088A4 48FFC9                  	dec rcx
 12929 000088A7 4883EB08                	sub rbx, 8 * 1
 12930 000088AB 4883EA08                	sub rdx, 8 * 1
 12931 000088AF EBE7                    	jmp .L_tc_recycle_frame_loop_006e
 12932                                  .L_tc_recycle_frame_done_006e:
 12933 000088B1 488D6308                	lea rsp, [rbx + 8 * 1]
 12934 000088B5 5D                      	pop rbp	; the proc will restore it!
 12935 000088B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12936                                  
 12937 000088B9 EB51                    	jmp .L_if_end_003b
 12938                                  
 12939                                  	.L_if_else_003b:
 12940                                  	; preparing a tail-call
 12941 000088BB 6A00                    	push 0	; arg count
 12942 000088BD 488B4510                	mov rax, ENV
 12943 000088C1 488B00                  	mov rax, qword [rax + 8 * 0]
 12944 000088C4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12945 000088C7 803804                  	cmp byte [rax], T_closure
 12946 000088CA 0F8510CF0000            	jne L_error_non_closure
 12947 000088D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12948                                  
 12949                                  	; recycling the current frame
 12950 000088D3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12951 000088D6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12952 000088D9 B904000000              	mov rcx, 0 + 4
 12953 000088DE 488B5D18                	mov rbx, COUNT
 12954 000088E2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12955 000088E7 488D55F8                	lea rdx, [rbp - 8 * 1]
 12956                                  .L_tc_recycle_frame_loop_006f:
 12957 000088EB 4883F900                	cmp rcx, 0
 12958 000088EF 7413                    	je .L_tc_recycle_frame_done_006f
 12959 000088F1 488B32                  	mov rsi, qword [rdx]
 12960 000088F4 488933                  	mov qword [rbx], rsi
 12961 000088F7 48FFC9                  	dec rcx
 12962 000088FA 4883EB08                	sub rbx, 8 * 1
 12963 000088FE 4883EA08                	sub rdx, 8 * 1
 12964 00008902 EBE7                    	jmp .L_tc_recycle_frame_loop_006f
 12965                                  .L_tc_recycle_frame_done_006f:
 12966 00008904 488D6308                	lea rsp, [rbx + 8 * 1]
 12967 00008908 5D                      	pop rbp	; the proc will restore it!
 12968 00008909 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12969                                  
 12970                                  	.L_if_end_003b:
 12971                                  
 12972                                  	.L_if_end_003a:
 12973                                  
 12974                                  	.L_if_end_0039:
 12975                                  
 12976 0000890C E9E4020000              	jmp .L_if_end_0038
 12977                                  
 12978                                  	.L_if_else_0038:
 12979 00008911 488B4520                	mov rax, PARAM(0)	; param a
 12980 00008915 50                      	push rax
 12981 00008916 6A01                    	push 1	; arg count
 12982 00008918 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 12983 00008920 803805                  	cmp byte [rax], T_undefined
 12984 00008923 0F8433CE0000            	je L_error_fvar_undefined
 12985 00008929 803804                  	cmp byte [rax], T_closure
 12986 0000892C 0F85AECE0000            	jne L_error_non_closure
 12987 00008932 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12988 00008935 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12989                                  
 12990 00008938 483D[02000000]          	cmp rax, sob_boolean_false
 12991 0000893E 0F8460020000            	je .L_if_else_003c
 12992 00008944 488B4528                	mov rax, PARAM(1)	; param b
 12993 00008948 50                      	push rax
 12994 00008949 6A01                    	push 1	; arg count
 12995 0000894B 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12996 00008953 803805                  	cmp byte [rax], T_undefined
 12997 00008956 0F8400CE0000            	je L_error_fvar_undefined
 12998 0000895C 803804                  	cmp byte [rax], T_closure
 12999 0000895F 0F857BCE0000            	jne L_error_non_closure
 13000 00008965 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13001 00008968 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13002                                  
 13003 0000896B 483D[02000000]          	cmp rax, sob_boolean_false
 13004 00008971 0F848A000000            	je .L_if_else_003d
 13005                                  	; preparing a tail-call
 13006 00008977 488B4528                	mov rax, PARAM(1)	; param b
 13007 0000897B 50                      	push rax
 13008 0000897C 6A01                    	push 1	; arg count
 13009 0000897E 488B0425[270F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 13010 00008986 803805                  	cmp byte [rax], T_undefined
 13011 00008989 0F84CDCD0000            	je L_error_fvar_undefined
 13012 0000898F 803804                  	cmp byte [rax], T_closure
 13013 00008992 0F8548CE0000            	jne L_error_non_closure
 13014 00008998 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13015 0000899B FF5009                  	call SOB_CLOSURE_CODE(rax)
 13016 0000899E 50                      	push rax
 13017 0000899F 488B4520                	mov rax, PARAM(0)	; param a
 13018 000089A3 50                      	push rax
 13019 000089A4 6A02                    	push 2	; arg count
 13020 000089A6 488B0425[E20F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13021 000089AE 803805                  	cmp byte [rax], T_undefined
 13022 000089B1 0F84A5CD0000            	je L_error_fvar_undefined
 13023 000089B7 803804                  	cmp byte [rax], T_closure
 13024 000089BA 0F8520CE0000            	jne L_error_non_closure
 13025 000089C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13026                                  
 13027                                  	; recycling the current frame
 13028 000089C3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13029 000089C6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13030 000089C9 B906000000              	mov rcx, 2 + 4
 13031 000089CE 488B5D18                	mov rbx, COUNT
 13032 000089D2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13033 000089D7 488D55F8                	lea rdx, [rbp - 8 * 1]
 13034                                  .L_tc_recycle_frame_loop_0070:
 13035 000089DB 4883F900                	cmp rcx, 0
 13036 000089DF 7413                    	je .L_tc_recycle_frame_done_0070
 13037 000089E1 488B32                  	mov rsi, qword [rdx]
 13038 000089E4 488933                  	mov qword [rbx], rsi
 13039 000089E7 48FFC9                  	dec rcx
 13040 000089EA 4883EB08                	sub rbx, 8 * 1
 13041 000089EE 4883EA08                	sub rdx, 8 * 1
 13042 000089F2 EBE7                    	jmp .L_tc_recycle_frame_loop_0070
 13043                                  .L_tc_recycle_frame_done_0070:
 13044 000089F4 488D6308                	lea rsp, [rbx + 8 * 1]
 13045 000089F8 5D                      	pop rbp	; the proc will restore it!
 13046 000089F9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13047                                  
 13048 000089FC E9A1010000              	jmp .L_if_end_003d
 13049                                  
 13050                                  	.L_if_else_003d:
 13051 00008A01 488B4528                	mov rax, PARAM(1)	; param b
 13052 00008A05 50                      	push rax
 13053 00008A06 6A01                    	push 1	; arg count
 13054 00008A08 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 13055 00008A10 803805                  	cmp byte [rax], T_undefined
 13056 00008A13 0F8443CD0000            	je L_error_fvar_undefined
 13057 00008A19 803804                  	cmp byte [rax], T_closure
 13058 00008A1C 0F85BECD0000            	jne L_error_non_closure
 13059 00008A22 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13060 00008A25 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13061                                  
 13062 00008A28 483D[02000000]          	cmp rax, sob_boolean_false
 13063 00008A2E 0F848A000000            	je .L_if_else_003e
 13064                                  	; preparing a tail-call
 13065 00008A34 488B4528                	mov rax, PARAM(1)	; param b
 13066 00008A38 50                      	push rax
 13067 00008A39 6A01                    	push 1	; arg count
 13068 00008A3B 488B0425[380F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 13069 00008A43 803805                  	cmp byte [rax], T_undefined
 13070 00008A46 0F8410CD0000            	je L_error_fvar_undefined
 13071 00008A4C 803804                  	cmp byte [rax], T_closure
 13072 00008A4F 0F858BCD0000            	jne L_error_non_closure
 13073 00008A55 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13074 00008A58 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13075 00008A5B 50                      	push rax
 13076 00008A5C 488B4520                	mov rax, PARAM(0)	; param a
 13077 00008A60 50                      	push rax
 13078 00008A61 6A02                    	push 2	; arg count
 13079 00008A63 488B0425[E20F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13080 00008A6B 803805                  	cmp byte [rax], T_undefined
 13081 00008A6E 0F84E8CC0000            	je L_error_fvar_undefined
 13082 00008A74 803804                  	cmp byte [rax], T_closure
 13083 00008A77 0F8563CD0000            	jne L_error_non_closure
 13084 00008A7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 13085                                  
 13086                                  	; recycling the current frame
 13087 00008A80 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13088 00008A83 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13089 00008A86 B906000000              	mov rcx, 2 + 4
 13090 00008A8B 488B5D18                	mov rbx, COUNT
 13091 00008A8F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13092 00008A94 488D55F8                	lea rdx, [rbp - 8 * 1]
 13093                                  .L_tc_recycle_frame_loop_0071:
 13094 00008A98 4883F900                	cmp rcx, 0
 13095 00008A9C 7413                    	je .L_tc_recycle_frame_done_0071
 13096 00008A9E 488B32                  	mov rsi, qword [rdx]
 13097 00008AA1 488933                  	mov qword [rbx], rsi
 13098 00008AA4 48FFC9                  	dec rcx
 13099 00008AA7 4883EB08                	sub rbx, 8 * 1
 13100 00008AAB 4883EA08                	sub rdx, 8 * 1
 13101 00008AAF EBE7                    	jmp .L_tc_recycle_frame_loop_0071
 13102                                  .L_tc_recycle_frame_done_0071:
 13103 00008AB1 488D6308                	lea rsp, [rbx + 8 * 1]
 13104 00008AB5 5D                      	pop rbp	; the proc will restore it!
 13105 00008AB6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13106                                  
 13107 00008AB9 E9E4000000              	jmp .L_if_end_003e
 13108                                  
 13109                                  	.L_if_else_003e:
 13110 00008ABE 488B4528                	mov rax, PARAM(1)	; param b
 13111 00008AC2 50                      	push rax
 13112 00008AC3 6A01                    	push 1	; arg count
 13113 00008AC5 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 13114 00008ACD 803805                  	cmp byte [rax], T_undefined
 13115 00008AD0 0F8486CC0000            	je L_error_fvar_undefined
 13116 00008AD6 803804                  	cmp byte [rax], T_closure
 13117 00008AD9 0F8501CD0000            	jne L_error_non_closure
 13118 00008ADF FF7001                  	push SOB_CLOSURE_ENV(rax)
 13119 00008AE2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13120                                  
 13121 00008AE5 483D[02000000]          	cmp rax, sob_boolean_false
 13122 00008AEB 7464                    	je .L_if_else_003f
 13123                                  	; preparing a tail-call
 13124 00008AED 488B4528                	mov rax, PARAM(1)	; param b
 13125 00008AF1 50                      	push rax
 13126 00008AF2 488B4520                	mov rax, PARAM(0)	; param a
 13127 00008AF6 50                      	push rax
 13128 00008AF7 6A02                    	push 2	; arg count
 13129 00008AF9 488B0425[E20F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13130 00008B01 803805                  	cmp byte [rax], T_undefined
 13131 00008B04 0F8452CC0000            	je L_error_fvar_undefined
 13132 00008B0A 803804                  	cmp byte [rax], T_closure
 13133 00008B0D 0F85CDCC0000            	jne L_error_non_closure
 13134 00008B13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13135                                  
 13136                                  	; recycling the current frame
 13137 00008B16 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13138 00008B19 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13139 00008B1C B906000000              	mov rcx, 2 + 4
 13140 00008B21 488B5D18                	mov rbx, COUNT
 13141 00008B25 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13142 00008B2A 488D55F8                	lea rdx, [rbp - 8 * 1]
 13143                                  .L_tc_recycle_frame_loop_0072:
 13144 00008B2E 4883F900                	cmp rcx, 0
 13145 00008B32 7413                    	je .L_tc_recycle_frame_done_0072
 13146 00008B34 488B32                  	mov rsi, qword [rdx]
 13147 00008B37 488933                  	mov qword [rbx], rsi
 13148 00008B3A 48FFC9                  	dec rcx
 13149 00008B3D 4883EB08                	sub rbx, 8 * 1
 13150 00008B41 4883EA08                	sub rdx, 8 * 1
 13151 00008B45 EBE7                    	jmp .L_tc_recycle_frame_loop_0072
 13152                                  .L_tc_recycle_frame_done_0072:
 13153 00008B47 488D6308                	lea rsp, [rbx + 8 * 1]
 13154 00008B4B 5D                      	pop rbp	; the proc will restore it!
 13155 00008B4C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13156                                  
 13157 00008B4F EB51                    	jmp .L_if_end_003f
 13158                                  
 13159                                  	.L_if_else_003f:
 13160                                  	; preparing a tail-call
 13161 00008B51 6A00                    	push 0	; arg count
 13162 00008B53 488B4510                	mov rax, ENV
 13163 00008B57 488B00                  	mov rax, qword [rax + 8 * 0]
 13164 00008B5A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13165 00008B5D 803804                  	cmp byte [rax], T_closure
 13166 00008B60 0F857ACC0000            	jne L_error_non_closure
 13167 00008B66 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13168                                  
 13169                                  	; recycling the current frame
 13170 00008B69 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13171 00008B6C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13172 00008B6F B904000000              	mov rcx, 0 + 4
 13173 00008B74 488B5D18                	mov rbx, COUNT
 13174 00008B78 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13175 00008B7D 488D55F8                	lea rdx, [rbp - 8 * 1]
 13176                                  .L_tc_recycle_frame_loop_0073:
 13177 00008B81 4883F900                	cmp rcx, 0
 13178 00008B85 7413                    	je .L_tc_recycle_frame_done_0073
 13179 00008B87 488B32                  	mov rsi, qword [rdx]
 13180 00008B8A 488933                  	mov qword [rbx], rsi
 13181 00008B8D 48FFC9                  	dec rcx
 13182 00008B90 4883EB08                	sub rbx, 8 * 1
 13183 00008B94 4883EA08                	sub rdx, 8 * 1
 13184 00008B98 EBE7                    	jmp .L_tc_recycle_frame_loop_0073
 13185                                  .L_tc_recycle_frame_done_0073:
 13186 00008B9A 488D6308                	lea rsp, [rbx + 8 * 1]
 13187 00008B9E 5D                      	pop rbp	; the proc will restore it!
 13188 00008B9F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13189                                  
 13190                                  	.L_if_end_003f:
 13191                                  
 13192                                  	.L_if_end_003e:
 13193                                  
 13194                                  	.L_if_end_003d:
 13195                                  
 13196 00008BA2 EB51                    	jmp .L_if_end_003c
 13197                                  
 13198                                  	.L_if_else_003c:
 13199                                  	; preparing a tail-call
 13200 00008BA4 6A00                    	push 0	; arg count
 13201 00008BA6 488B4510                	mov rax, ENV
 13202 00008BAA 488B00                  	mov rax, qword [rax + 8 * 0]
 13203 00008BAD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13204 00008BB0 803804                  	cmp byte [rax], T_closure
 13205 00008BB3 0F8527CC0000            	jne L_error_non_closure
 13206 00008BB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13207                                  
 13208                                  	; recycling the current frame
 13209 00008BBC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13210 00008BBF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13211 00008BC2 B904000000              	mov rcx, 0 + 4
 13212 00008BC7 488B5D18                	mov rbx, COUNT
 13213 00008BCB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13214 00008BD0 488D55F8                	lea rdx, [rbp - 8 * 1]
 13215                                  .L_tc_recycle_frame_loop_0074:
 13216 00008BD4 4883F900                	cmp rcx, 0
 13217 00008BD8 7413                    	je .L_tc_recycle_frame_done_0074
 13218 00008BDA 488B32                  	mov rsi, qword [rdx]
 13219 00008BDD 488933                  	mov qword [rbx], rsi
 13220 00008BE0 48FFC9                  	dec rcx
 13221 00008BE3 4883EB08                	sub rbx, 8 * 1
 13222 00008BE7 4883EA08                	sub rdx, 8 * 1
 13223 00008BEB EBE7                    	jmp .L_tc_recycle_frame_loop_0074
 13224                                  .L_tc_recycle_frame_done_0074:
 13225 00008BED 488D6308                	lea rsp, [rbx + 8 * 1]
 13226 00008BF1 5D                      	pop rbp	; the proc will restore it!
 13227 00008BF2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13228                                  
 13229                                  	.L_if_end_003c:
 13230                                  
 13231                                  	.L_if_end_0038:
 13232                                  
 13233                                  	.L_if_end_0034:
 13234 00008BF5 C9                      	leave
 13235 00008BF6 C22000                  	ret AND_KILL_FRAME(2)
 13236                                  .L_lambda_simple_end_0043:	; new closure is in rax
 13237 00008BF9 50                      	push rax
 13238 00008BFA 6A01                    	push 1	; arg count
 13239 00008BFC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13240 00008C01 E883CC0000              	call malloc
 13241 00008C06 50                      	push rax
 13242 00008C07 BF08000000              	mov rdi, 8 * 1	; new rib
 13243 00008C0C E878CC0000              	call malloc
 13244 00008C11 50                      	push rax
 13245 00008C12 BF10000000              	mov rdi, 8 * 2	; extended env
 13246 00008C17 E86DCC0000              	call malloc
 13247 00008C1C 488B7D10                	mov rdi, ENV
 13248 00008C20 BE00000000              	mov rsi, 0
 13249 00008C25 BA01000000              	mov rdx, 1
 13250                                  .L_lambda_simple_env_loop_0044:	; ext_env[i + 1] <-- env[i]
 13251 00008C2A 4883FE01                	cmp rsi, 1
 13252 00008C2E 7410                    	je .L_lambda_simple_env_end_0044
 13253 00008C30 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13254 00008C34 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13255 00008C38 48FFC6                  	inc rsi
 13256 00008C3B 48FFC2                  	inc rdx
 13257 00008C3E EBEA                    	jmp .L_lambda_simple_env_loop_0044
 13258                                  .L_lambda_simple_env_end_0044:
 13259 00008C40 5B                      	pop rbx
 13260 00008C41 BE00000000              	mov rsi, 0
 13261                                  .L_lambda_simple_params_loop_0044:	; copy params
 13262 00008C46 4883FE01                	cmp rsi, 1
 13263 00008C4A 740E                    	je .L_lambda_simple_params_end_0044
 13264 00008C4C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13265 00008C51 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13266 00008C55 48FFC6                  	inc rsi
 13267 00008C58 EBEC                    	jmp .L_lambda_simple_params_loop_0044
 13268                                  .L_lambda_simple_params_end_0044:
 13269 00008C5A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13270 00008C5D 4889C3                  	mov rbx, rax
 13271 00008C60 58                      	pop rax
 13272 00008C61 C60004                  	mov byte [rax], T_closure
 13273 00008C64 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13274 00008C68 48C74009[758C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0044
 13275 00008C70 E986030000              	jmp .L_lambda_simple_end_0044
 13276                                  .L_lambda_simple_code_0044:	; lambda-simple body
 13277 00008C75 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13278 00008C7B 740B                    	je .L_lambda_simple_arity_check_ok_0044
 13279 00008C7D FF742410                	push qword [rsp + 8 * 2]
 13280 00008C81 6A01                    	push 1
 13281 00008C83 E9BACB0000              	jmp L_error_incorrect_arity_simple
 13282                                  .L_lambda_simple_arity_check_ok_0044:
 13283 00008C88 C8000000                	enter 0, 0
 13284 00008C8C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13285 00008C91 E8F3CB0000              	call malloc
 13286 00008C96 50                      	push rax
 13287 00008C97 BF08000000              	mov rdi, 8 * 1	; new rib
 13288 00008C9C E8E8CB0000              	call malloc
 13289 00008CA1 50                      	push rax
 13290 00008CA2 BF18000000              	mov rdi, 8 * 3	; extended env
 13291 00008CA7 E8DDCB0000              	call malloc
 13292 00008CAC 488B7D10                	mov rdi, ENV
 13293 00008CB0 BE00000000              	mov rsi, 0
 13294 00008CB5 BA01000000              	mov rdx, 1
 13295                                  .L_lambda_opt_env_loop_000d:	; ext_env[i + 1] <-- env[i]
 13296 00008CBA 4883FE02                	cmp rsi, 2
 13297 00008CBE 7410                    	je .L_lambda_opt_env_end_000d
 13298 00008CC0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13299 00008CC4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13300 00008CC8 48FFC6                  	inc rsi
 13301 00008CCB 48FFC2                  	inc rdx
 13302 00008CCE EBEA                    	jmp .L_lambda_opt_env_loop_000d
 13303                                  .L_lambda_opt_env_end_000d:
 13304 00008CD0 5B                      	pop rbx
 13305 00008CD1 BE00000000              	mov rsi, 0
 13306                                  .L_lambda_opt_params_loop_000d:	; copy params
 13307 00008CD6 4883FE01                	cmp rsi, 1
 13308 00008CDA 740E                    	je .L_lambda_opt_params_end_000d
 13309 00008CDC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13310 00008CE1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13311 00008CE5 48FFC6                  	inc rsi
 13312 00008CE8 EBEC                    	jmp .L_lambda_opt_params_loop_000d
 13313                                  .L_lambda_opt_params_end_000d:
 13314 00008CEA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13315 00008CED 4889C3                  	mov rbx, rax
 13316 00008CF0 58                      	pop rax
 13317 00008CF1 C60004                  	mov byte [rax], T_closure
 13318 00008CF4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13319 00008CF8 48C74009[058D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000d
 13320 00008D00 E9F2020000              	jmp .L_lambda_opt_end_000d
 13321                                  .L_lambda_opt_code_000d:	; lambda-simple body
 13322 00008D05 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 13323 00008D0B 740D                    	je .L_lambda_opt_arity_check_exact_000d ;	 if equal, go to exact arity
 13324 00008D0D 7F42                    	jg .L_lambda_opt_arity_check_more_000d ;	 if greater than, go to arity more
 13325 00008D0F FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 13326 00008D13 6A01                     	push 1
 13327 00008D15 E93CCB0000              	jmp L_error_incorrect_arity_opt
 13328                                  	.L_lambda_opt_arity_check_exact_000d:
 13329 00008D1A 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 13330 00008D1F 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 13331 00008D24 4883EC08                	sub rsp, 8
 13332 00008D28 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 13333                                  	.L_lambda_opt_exact_shifting_loop_000d:
 13334 00008D2C 488B5108                	mov rdx, [rcx + 8]
 13335 00008D30 488911                  	mov [rcx], rdx
 13336 00008D33 4883C108                	add rcx, 8
 13337 00008D37 4839CB                  	cmp rbx, rcx
 13338 00008D3A 75F0                    	jne .L_lambda_opt_exact_shifting_loop_000d
 13339                                  	.L_lambda_opt_exact_shifting_loop_end_000d:
 13340 00008D3C 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 13341 00008D43 4883C001                	add rax, 1 ; 	arg count += 1
 13342 00008D47 4889442410              	mov qword [rsp + 8 * 2], rax
 13343 00008D4C E987000000              	jmp .L_lambda_opt_stack_adjusted_000d
 13344                                  	.L_lambda_opt_arity_check_more_000d:
 13345 00008D51 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 13345 00008D53 [0100000000000000] 
 13346 00008D5B 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 13347 00008D61 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_000d
 13348                                  	.L_lambda_opt_stack_shrink_loop_000d:
 13349 00008D63 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 13350 00008D68 E81CCB0000              	call malloc ;	 allocated memory for the optional scheme list
 13351 00008D6D C60021                  	mov byte[rax], T_pair ;	 set type pair
 13352 00008D70 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 13353 00008D74 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 13354 00008D77 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 13355 00008D7C 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 13356 00008D81 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 13357 00008D85 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 13358                                  	.L_lambda_opt_more_shifting_loop_000d:
 13359 00008D8A 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 13360 00008D8D 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 13361 00008D91 4883EB08                	sub rbx, 8 
 13362 00008D95 4839DC                  	cmp rsp, rbx
 13363 00008D98 7EF0                    	jle .L_lambda_opt_more_shifting_loop_000d
 13364                                  	.L_lambda_opt_more_shifting_loop_end_000d:
 13365 00008D9A 4883C408                	add rsp, 8 ;	 update rsp
 13366 00008D9E 488B5C2410              	mov rbx, [rsp + 8 * 2]
 13367 00008DA3 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 13368 00008DA7 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 13369 00008DAC 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13370 00008DB2 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_000d
 13371                                  	.L_lambda_opt_stack_shrink_loop_exit_000d:
 13372 00008DB4 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 13373 00008DB9 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 13374 00008DBE BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 13375 00008DC3 E8C1CA0000              	call malloc ;	 allocated memory for the optional scheme list
 13376 00008DC8 C60021                  	mov byte[rax], T_pair ;	 set type pair
 13377 00008DCB 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 13378 00008DCF 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 13379 00008DD3 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 13380                                  	.L_lambda_opt_stack_adjusted_000d:
 13381 00008DD8 C8000000                	enter 0, 0
 13382 00008DDC 488B4528                	mov rax, PARAM(1)	; param s
 13383 00008DE0 50                      	push rax
 13384 00008DE1 6A01                    	push 1	; arg count
 13385 00008DE3 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 13386 00008DEB 803805                  	cmp byte [rax], T_undefined
 13387 00008DEE 0F8468C90000            	je L_error_fvar_undefined
 13388 00008DF4 803804                  	cmp byte [rax], T_closure
 13389 00008DF7 0F85E3C90000            	jne L_error_non_closure
 13390 00008DFD FF7001                  	push SOB_CLOSURE_ENV(rax)
 13391 00008E00 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13392                                  
 13393 00008E03 483D[02000000]          	cmp rax, sob_boolean_false
 13394 00008E09 7466                    	je .L_if_else_0040
 13395                                  	; preparing a tail-call
 13396 00008E0B 488B4520                	mov rax, PARAM(0)	; param a
 13397 00008E0F 50                      	push rax
 13398 00008E10 48B8-                   	mov rax, L_constants + 2158
 13398 00008E12 [6E08000000000000] 
 13399 00008E1A 50                      	push rax
 13400 00008E1B 6A02                    	push 2	; arg count
 13401 00008E1D 488B4510                	mov rax, ENV
 13402 00008E21 488B00                  	mov rax, qword [rax + 8 * 0]
 13403 00008E24 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 13404 00008E27 803804                  	cmp byte [rax], T_closure
 13405 00008E2A 0F85B0C90000            	jne L_error_non_closure
 13406 00008E30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13407                                  
 13408                                  	; recycling the current frame
 13409 00008E33 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13410 00008E36 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13411 00008E39 B906000000              	mov rcx, 2 + 4
 13412 00008E3E 488B5D18                	mov rbx, COUNT
 13413 00008E42 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13414 00008E47 488D55F8                	lea rdx, [rbp - 8 * 1]
 13415                                  .L_tc_recycle_frame_loop_0075:
 13416 00008E4B 4883F900                	cmp rcx, 0
 13417 00008E4F 7413                    	je .L_tc_recycle_frame_done_0075
 13418 00008E51 488B32                  	mov rsi, qword [rdx]
 13419 00008E54 488933                  	mov qword [rbx], rsi
 13420 00008E57 48FFC9                  	dec rcx
 13421 00008E5A 4883EB08                	sub rbx, 8 * 1
 13422 00008E5E 4883EA08                	sub rdx, 8 * 1
 13423 00008E62 EBE7                    	jmp .L_tc_recycle_frame_loop_0075
 13424                                  .L_tc_recycle_frame_done_0075:
 13425 00008E64 488D6308                	lea rsp, [rbx + 8 * 1]
 13426 00008E68 5D                      	pop rbp	; the proc will restore it!
 13427 00008E69 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13428                                  
 13429 00008E6C E982010000              	jmp .L_if_end_0040
 13430                                  
 13431                                  	.L_if_else_0040:
 13432                                  	; preparing a tail-call
 13433 00008E71 488B4528                	mov rax, PARAM(1)	; param s
 13434 00008E75 50                      	push rax
 13435 00008E76 48B8-                   	mov rax, L_constants + 2158
 13435 00008E78 [6E08000000000000] 
 13436 00008E80 50                      	push rax
 13437 00008E81 488B0425[98150000]      	mov rax, qword [free_var_119]	; free var *
 13438 00008E89 803805                  	cmp byte [rax], T_undefined
 13439 00008E8C 0F84CAC80000            	je L_error_fvar_undefined
 13440 00008E92 50                      	push rax
 13441 00008E93 6A03                    	push 3	; arg count
 13442 00008E95 488B0425[21150000]      	mov rax, qword [free_var_112]	; free var fold-left
 13443 00008E9D 803805                  	cmp byte [rax], T_undefined
 13444 00008EA0 0F84B6C80000            	je L_error_fvar_undefined
 13445 00008EA6 803804                  	cmp byte [rax], T_closure
 13446 00008EA9 0F8531C90000            	jne L_error_non_closure
 13447 00008EAF FF7001                  	push SOB_CLOSURE_ENV(rax)
 13448 00008EB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13449 00008EB5 50                      	push rax
 13450 00008EB6 6A01                    	push 1	; arg count
 13451 00008EB8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13452 00008EBD E8C7C90000              	call malloc
 13453 00008EC2 50                      	push rax
 13454 00008EC3 BF10000000              	mov rdi, 8 * 2	; new rib
 13455 00008EC8 E8BCC90000              	call malloc
 13456 00008ECD 50                      	push rax
 13457 00008ECE BF20000000              	mov rdi, 8 * 4	; extended env
 13458 00008ED3 E8B1C90000              	call malloc
 13459 00008ED8 488B7D10                	mov rdi, ENV
 13460 00008EDC BE00000000              	mov rsi, 0
 13461 00008EE1 BA01000000              	mov rdx, 1
 13462                                  .L_lambda_simple_env_loop_0045:	; ext_env[i + 1] <-- env[i]
 13463 00008EE6 4883FE03                	cmp rsi, 3
 13464 00008EEA 7410                    	je .L_lambda_simple_env_end_0045
 13465 00008EEC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13466 00008EF0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13467 00008EF4 48FFC6                  	inc rsi
 13468 00008EF7 48FFC2                  	inc rdx
 13469 00008EFA EBEA                    	jmp .L_lambda_simple_env_loop_0045
 13470                                  .L_lambda_simple_env_end_0045:
 13471 00008EFC 5B                      	pop rbx
 13472 00008EFD BE00000000              	mov rsi, 0
 13473                                  .L_lambda_simple_params_loop_0045:	; copy params
 13474 00008F02 4883FE02                	cmp rsi, 2
 13475 00008F06 740E                    	je .L_lambda_simple_params_end_0045
 13476 00008F08 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13477 00008F0D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13478 00008F11 48FFC6                  	inc rsi
 13479 00008F14 EBEC                    	jmp .L_lambda_simple_params_loop_0045
 13480                                  .L_lambda_simple_params_end_0045:
 13481 00008F16 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13482 00008F19 4889C3                  	mov rbx, rax
 13483 00008F1C 58                      	pop rax
 13484 00008F1D C60004                  	mov byte [rax], T_closure
 13485 00008F20 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13486 00008F24 48C74009[318F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0045
 13487 00008F2C E97D000000              	jmp .L_lambda_simple_end_0045
 13488                                  .L_lambda_simple_code_0045:	; lambda-simple body
 13489 00008F31 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13490 00008F37 740B                    	je .L_lambda_simple_arity_check_ok_0045
 13491 00008F39 FF742410                	push qword [rsp + 8 * 2]
 13492 00008F3D 6A01                    	push 1
 13493 00008F3F E9FEC80000              	jmp L_error_incorrect_arity_simple
 13494                                  .L_lambda_simple_arity_check_ok_0045:
 13495 00008F44 C8000000                	enter 0, 0
 13496                                  	; preparing a tail-call
 13497 00008F48 488B4520                	mov rax, PARAM(0)	; param b
 13498 00008F4C 50                      	push rax
 13499 00008F4D 488B4510                	mov rax, ENV
 13500 00008F51 488B00                  	mov rax, qword [rax + 8 * 0]
 13501 00008F54 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 13502 00008F57 50                      	push rax
 13503 00008F58 6A02                    	push 2	; arg count
 13504 00008F5A 488B4510                	mov rax, ENV
 13505 00008F5E 488B4008                	mov rax, qword [rax + 8 * 1]
 13506 00008F62 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 13507 00008F65 803804                  	cmp byte [rax], T_closure
 13508 00008F68 0F8572C80000            	jne L_error_non_closure
 13509 00008F6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 13510                                  
 13511                                  	; recycling the current frame
 13512 00008F71 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13513 00008F74 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13514 00008F77 B906000000              	mov rcx, 2 + 4
 13515 00008F7C 488B5D18                	mov rbx, COUNT
 13516 00008F80 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13517 00008F85 488D55F8                	lea rdx, [rbp - 8 * 1]
 13518                                  .L_tc_recycle_frame_loop_0076:
 13519 00008F89 4883F900                	cmp rcx, 0
 13520 00008F8D 7413                    	je .L_tc_recycle_frame_done_0076
 13521 00008F8F 488B32                  	mov rsi, qword [rdx]
 13522 00008F92 488933                  	mov qword [rbx], rsi
 13523 00008F95 48FFC9                  	dec rcx
 13524 00008F98 4883EB08                	sub rbx, 8 * 1
 13525 00008F9C 4883EA08                	sub rdx, 8 * 1
 13526 00008FA0 EBE7                    	jmp .L_tc_recycle_frame_loop_0076
 13527                                  .L_tc_recycle_frame_done_0076:
 13528 00008FA2 488D6308                	lea rsp, [rbx + 8 * 1]
 13529 00008FA6 5D                      	pop rbp	; the proc will restore it!
 13530 00008FA7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13531 00008FAA C9                      	leave
 13532 00008FAB C21800                  	ret AND_KILL_FRAME(1)
 13533                                  .L_lambda_simple_end_0045:	; new closure is in rax
 13534 00008FAE 803804                  	cmp byte [rax], T_closure
 13535 00008FB1 0F8529C80000            	jne L_error_non_closure
 13536 00008FB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13537                                  
 13538                                  	; recycling the current frame
 13539 00008FBA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13540 00008FBD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13541 00008FC0 B905000000              	mov rcx, 1 + 4
 13542 00008FC5 488B5D18                	mov rbx, COUNT
 13543 00008FC9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13544 00008FCE 488D55F8                	lea rdx, [rbp - 8 * 1]
 13545                                  .L_tc_recycle_frame_loop_0077:
 13546 00008FD2 4883F900                	cmp rcx, 0
 13547 00008FD6 7413                    	je .L_tc_recycle_frame_done_0077
 13548 00008FD8 488B32                  	mov rsi, qword [rdx]
 13549 00008FDB 488933                  	mov qword [rbx], rsi
 13550 00008FDE 48FFC9                  	dec rcx
 13551 00008FE1 4883EB08                	sub rbx, 8 * 1
 13552 00008FE5 4883EA08                	sub rdx, 8 * 1
 13553 00008FE9 EBE7                    	jmp .L_tc_recycle_frame_loop_0077
 13554                                  .L_tc_recycle_frame_done_0077:
 13555 00008FEB 488D6308                	lea rsp, [rbx + 8 * 1]
 13556 00008FEF 5D                      	pop rbp	; the proc will restore it!
 13557 00008FF0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13558                                  
 13559                                  	.L_if_end_0040:
 13560 00008FF3 C9                      	leave
 13561 00008FF4 C22000                  	ret AND_KILL_FRAME(2)
 13562                                  .L_lambda_opt_end_000d:	; new closure is in rax
 13563 00008FF7 C9                      	leave
 13564 00008FF8 C21800                  	ret AND_KILL_FRAME(1)
 13565                                  .L_lambda_simple_end_0044:	; new closure is in rax
 13566 00008FFB 803804                  	cmp byte [rax], T_closure
 13567 00008FFE 0F85DCC70000            	jne L_error_non_closure
 13568 00009004 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13569                                  
 13570                                  	; recycling the current frame
 13571 00009007 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13572 0000900A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13573 0000900D B905000000              	mov rcx, 1 + 4
 13574 00009012 488B5D18                	mov rbx, COUNT
 13575 00009016 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13576 0000901B 488D55F8                	lea rdx, [rbp - 8 * 1]
 13577                                  .L_tc_recycle_frame_loop_0078:
 13578 0000901F 4883F900                	cmp rcx, 0
 13579 00009023 7413                    	je .L_tc_recycle_frame_done_0078
 13580 00009025 488B32                  	mov rsi, qword [rdx]
 13581 00009028 488933                  	mov qword [rbx], rsi
 13582 0000902B 48FFC9                  	dec rcx
 13583 0000902E 4883EB08                	sub rbx, 8 * 1
 13584 00009032 4883EA08                	sub rdx, 8 * 1
 13585 00009036 EBE7                    	jmp .L_tc_recycle_frame_loop_0078
 13586                                  .L_tc_recycle_frame_done_0078:
 13587 00009038 488D6308                	lea rsp, [rbx + 8 * 1]
 13588 0000903C 5D                      	pop rbp	; the proc will restore it!
 13589 0000903D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13590 00009040 C9                      	leave
 13591 00009041 C21800                  	ret AND_KILL_FRAME(1)
 13592                                  .L_lambda_simple_end_0042:	; new closure is in rax
 13593 00009044 803804                  	cmp byte [rax], T_closure
 13594 00009047 0F8593C70000            	jne L_error_non_closure
 13595 0000904D FF7001                  	push SOB_CLOSURE_ENV(rax)
 13596 00009050 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13597 00009053 48890425[A9150000]      	mov qword [free_var_120], rax
 13598 0000905B 48B8-                   	mov rax, sob_void
 13598 0000905D [0000000000000000] 
 13599                                  
 13600 00009065 4889C7                  	mov rdi, rax
 13601 00009068 E82EC90000              	call print_sexpr_if_not_void
 13602                                  
 13603 0000906D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13604 00009072 E812C80000              	call malloc
 13605 00009077 50                      	push rax
 13606 00009078 BF00000000              	mov rdi, 8 * 0	; new rib
 13607 0000907D E807C80000              	call malloc
 13608 00009082 50                      	push rax
 13609 00009083 BF08000000              	mov rdi, 8 * 1	; extended env
 13610 00009088 E8FCC70000              	call malloc
 13611 0000908D 488B7D10                	mov rdi, ENV
 13612 00009091 BE00000000              	mov rsi, 0
 13613 00009096 BA01000000              	mov rdx, 1
 13614                                  .L_lambda_simple_env_loop_0046:	; ext_env[i + 1] <-- env[i]
 13615 0000909B 4883FE00                	cmp rsi, 0
 13616 0000909F 7410                    	je .L_lambda_simple_env_end_0046
 13617 000090A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13618 000090A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13619 000090A9 48FFC6                  	inc rsi
 13620 000090AC 48FFC2                  	inc rdx
 13621 000090AF EBEA                    	jmp .L_lambda_simple_env_loop_0046
 13622                                  .L_lambda_simple_env_end_0046:
 13623 000090B1 5B                      	pop rbx
 13624 000090B2 BE00000000              	mov rsi, 0
 13625                                  .L_lambda_simple_params_loop_0046:	; copy params
 13626 000090B7 4883FE00                	cmp rsi, 0
 13627 000090BB 740E                    	je .L_lambda_simple_params_end_0046
 13628 000090BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13629 000090C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13630 000090C6 48FFC6                  	inc rsi
 13631 000090C9 EBEC                    	jmp .L_lambda_simple_params_loop_0046
 13632                                  .L_lambda_simple_params_end_0046:
 13633 000090CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13634 000090CE 4889C3                  	mov rbx, rax
 13635 000090D1 58                      	pop rax
 13636 000090D2 C60004                  	mov byte [rax], T_closure
 13637 000090D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13638 000090D9 48C74009[E6900000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0046
 13639 000090E1 E90C010000              	jmp .L_lambda_simple_end_0046
 13640                                  .L_lambda_simple_code_0046:	; lambda-simple body
 13641 000090E6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13642 000090EC 740B                    	je .L_lambda_simple_arity_check_ok_0046
 13643 000090EE FF742410                	push qword [rsp + 8 * 2]
 13644 000090F2 6A01                    	push 1
 13645 000090F4 E949C70000              	jmp L_error_incorrect_arity_simple
 13646                                  .L_lambda_simple_arity_check_ok_0046:
 13647 000090F9 C8000000                	enter 0, 0
 13648 000090FD 488B4520                	mov rax, PARAM(0)	; param n
 13649 00009101 50                      	push rax
 13650 00009102 6A01                    	push 1	; arg count
 13651 00009104 488B0425[7C0F0000]      	mov rax, qword [free_var_27]	; free var zero?
 13652 0000910C 803805                  	cmp byte [rax], T_undefined
 13653 0000910F 0F8447C60000            	je L_error_fvar_undefined
 13654 00009115 803804                  	cmp byte [rax], T_closure
 13655 00009118 0F85C2C60000            	jne L_error_non_closure
 13656 0000911E FF7001                  	push SOB_CLOSURE_ENV(rax)
 13657 00009121 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13658                                  
 13659 00009124 483D[02000000]          	cmp rax, sob_boolean_false
 13660 0000912A 740F                    	je .L_if_else_0041
 13661 0000912C 48B8-                   	mov rax, L_constants + 2158
 13661 0000912E [6E08000000000000] 
 13662                                  
 13663 00009136 E9B3000000              	jmp .L_if_end_0041
 13664                                  
 13665                                  	.L_if_else_0041:
 13666                                  	; preparing a tail-call
 13667 0000913B 48B8-                   	mov rax, L_constants + 2158
 13667 0000913D [6E08000000000000] 
 13668 00009145 50                      	push rax
 13669 00009146 488B4520                	mov rax, PARAM(0)	; param n
 13670 0000914A 50                      	push rax
 13671 0000914B 6A02                    	push 2	; arg count
 13672 0000914D 488B0425[76150000]      	mov rax, qword [free_var_117]	; free var -
 13673 00009155 803805                  	cmp byte [rax], T_undefined
 13674 00009158 0F84FEC50000            	je L_error_fvar_undefined
 13675 0000915E 803804                  	cmp byte [rax], T_closure
 13676 00009161 0F8579C60000            	jne L_error_non_closure
 13677 00009167 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13678 0000916A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13679 0000916D 50                      	push rax
 13680 0000916E 6A01                    	push 1	; arg count
 13681 00009170 488B0425[BA150000]      	mov rax, qword [free_var_121]	; free var fact
 13682 00009178 803805                  	cmp byte [rax], T_undefined
 13683 0000917B 0F84DBC50000            	je L_error_fvar_undefined
 13684 00009181 803804                  	cmp byte [rax], T_closure
 13685 00009184 0F8556C60000            	jne L_error_non_closure
 13686 0000918A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13687 0000918D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13688 00009190 50                      	push rax
 13689 00009191 488B4520                	mov rax, PARAM(0)	; param n
 13690 00009195 50                      	push rax
 13691 00009196 6A02                    	push 2	; arg count
 13692 00009198 488B0425[98150000]      	mov rax, qword [free_var_119]	; free var *
 13693 000091A0 803805                  	cmp byte [rax], T_undefined
 13694 000091A3 0F84B3C50000            	je L_error_fvar_undefined
 13695 000091A9 803804                  	cmp byte [rax], T_closure
 13696 000091AC 0F852EC60000            	jne L_error_non_closure
 13697 000091B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13698                                  
 13699                                  	; recycling the current frame
 13700 000091B5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13701 000091B8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13702 000091BB B906000000              	mov rcx, 2 + 4
 13703 000091C0 488B5D18                	mov rbx, COUNT
 13704 000091C4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13705 000091C9 488D55F8                	lea rdx, [rbp - 8 * 1]
 13706                                  .L_tc_recycle_frame_loop_0079:
 13707 000091CD 4883F900                	cmp rcx, 0
 13708 000091D1 7413                    	je .L_tc_recycle_frame_done_0079
 13709 000091D3 488B32                  	mov rsi, qword [rdx]
 13710 000091D6 488933                  	mov qword [rbx], rsi
 13711 000091D9 48FFC9                  	dec rcx
 13712 000091DC 4883EB08                	sub rbx, 8 * 1
 13713 000091E0 4883EA08                	sub rdx, 8 * 1
 13714 000091E4 EBE7                    	jmp .L_tc_recycle_frame_loop_0079
 13715                                  .L_tc_recycle_frame_done_0079:
 13716 000091E6 488D6308                	lea rsp, [rbx + 8 * 1]
 13717 000091EA 5D                      	pop rbp	; the proc will restore it!
 13718 000091EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13719                                  
 13720                                  	.L_if_end_0041:
 13721 000091EE C9                      	leave
 13722 000091EF C21800                  	ret AND_KILL_FRAME(1)
 13723                                  .L_lambda_simple_end_0046:	; new closure is in rax
 13724 000091F2 48890425[BA150000]      	mov qword [free_var_121], rax
 13725 000091FA 48B8-                   	mov rax, sob_void
 13725 000091FC [0000000000000000] 
 13726                                  
 13727 00009204 4889C7                  	mov rdi, rax
 13728 00009207 E88FC70000              	call print_sexpr_if_not_void
 13729                                  
 13730 0000920C 48B8-                   	mov rax, L_constants + 0
 13730 0000920E [0000000000000000] 
 13731 00009216 48890425[CB150000]      	mov qword [free_var_122], rax
 13732 0000921E 48B8-                   	mov rax, sob_void
 13732 00009220 [0000000000000000] 
 13733                                  
 13734 00009228 4889C7                  	mov rdi, rax
 13735 0000922B E86BC70000              	call print_sexpr_if_not_void
 13736                                  
 13737 00009230 48B8-                   	mov rax, L_constants + 0
 13737 00009232 [0000000000000000] 
 13738 0000923A 48890425[DC150000]      	mov qword [free_var_123], rax
 13739 00009242 48B8-                   	mov rax, sob_void
 13739 00009244 [0000000000000000] 
 13740                                  
 13741 0000924C 4889C7                  	mov rdi, rax
 13742 0000924F E847C70000              	call print_sexpr_if_not_void
 13743                                  
 13744 00009254 48B8-                   	mov rax, L_constants + 0
 13744 00009256 [0000000000000000] 
 13745 0000925E 48890425[ED150000]      	mov qword [free_var_124], rax
 13746 00009266 48B8-                   	mov rax, sob_void
 13746 00009268 [0000000000000000] 
 13747                                  
 13748 00009270 4889C7                  	mov rdi, rax
 13749 00009273 E823C70000              	call print_sexpr_if_not_void
 13750                                  
 13751 00009278 48B8-                   	mov rax, L_constants + 0
 13751 0000927A [0000000000000000] 
 13752 00009282 48890425[FE150000]      	mov qword [free_var_125], rax
 13753 0000928A 48B8-                   	mov rax, sob_void
 13753 0000928C [0000000000000000] 
 13754                                  
 13755 00009294 4889C7                  	mov rdi, rax
 13756 00009297 E8FFC60000              	call print_sexpr_if_not_void
 13757                                  
 13758 0000929C 48B8-                   	mov rax, L_constants + 0
 13758 0000929E [0000000000000000] 
 13759 000092A6 48890425[0F160000]      	mov qword [free_var_126], rax
 13760 000092AE 48B8-                   	mov rax, sob_void
 13760 000092B0 [0000000000000000] 
 13761                                  
 13762 000092B8 4889C7                  	mov rdi, rax
 13763 000092BB E8DBC60000              	call print_sexpr_if_not_void
 13764                                  
 13765 000092C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13766 000092C5 E8BFC50000              	call malloc
 13767 000092CA 50                      	push rax
 13768 000092CB BF00000000              	mov rdi, 8 * 0	; new rib
 13769 000092D0 E8B4C50000              	call malloc
 13770 000092D5 50                      	push rax
 13771 000092D6 BF08000000              	mov rdi, 8 * 1	; extended env
 13772 000092DB E8A9C50000              	call malloc
 13773 000092E0 488B7D10                	mov rdi, ENV
 13774 000092E4 BE00000000              	mov rsi, 0
 13775 000092E9 BA01000000              	mov rdx, 1
 13776                                  .L_lambda_simple_env_loop_0047:	; ext_env[i + 1] <-- env[i]
 13777 000092EE 4883FE00                	cmp rsi, 0
 13778 000092F2 7410                    	je .L_lambda_simple_env_end_0047
 13779 000092F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13780 000092F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13781 000092FC 48FFC6                  	inc rsi
 13782 000092FF 48FFC2                  	inc rdx
 13783 00009302 EBEA                    	jmp .L_lambda_simple_env_loop_0047
 13784                                  .L_lambda_simple_env_end_0047:
 13785 00009304 5B                      	pop rbx
 13786 00009305 BE00000000              	mov rsi, 0
 13787                                  .L_lambda_simple_params_loop_0047:	; copy params
 13788 0000930A 4883FE00                	cmp rsi, 0
 13789 0000930E 740E                    	je .L_lambda_simple_params_end_0047
 13790 00009310 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13791 00009315 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13792 00009319 48FFC6                  	inc rsi
 13793 0000931C EBEC                    	jmp .L_lambda_simple_params_loop_0047
 13794                                  .L_lambda_simple_params_end_0047:
 13795 0000931E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13796 00009321 4889C3                  	mov rbx, rax
 13797 00009324 58                      	pop rax
 13798 00009325 C60004                  	mov byte [rax], T_closure
 13799 00009328 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13800 0000932C 48C74009[39930000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0047
 13801 00009334 E989000000              	jmp .L_lambda_simple_end_0047
 13802                                  .L_lambda_simple_code_0047:	; lambda-simple body
 13803 00009339 48837C241000            	cmp qword [rsp + 8 * 2], 0
 13804 0000933F 740B                    	je .L_lambda_simple_arity_check_ok_0047
 13805 00009341 FF742410                	push qword [rsp + 8 * 2]
 13806 00009345 6A00                    	push 0
 13807 00009347 E9F6C40000              	jmp L_error_incorrect_arity_simple
 13808                                  .L_lambda_simple_arity_check_ok_0047:
 13809 0000934C C8000000                	enter 0, 0
 13810                                  	; preparing a tail-call
 13811 00009350 48B8-                   	mov rax, L_constants + 2296
 13811 00009352 [F808000000000000] 
 13812 0000935A 50                      	push rax
 13813 0000935B 48B8-                   	mov rax, L_constants + 2287
 13813 0000935D [EF08000000000000] 
 13814 00009365 50                      	push rax
 13815 00009366 6A02                    	push 2	; arg count
 13816 00009368 488B0425[7B100000]      	mov rax, qword [free_var_42]	; free var error
 13817 00009370 803805                  	cmp byte [rax], T_undefined
 13818 00009373 0F84E3C30000            	je L_error_fvar_undefined
 13819 00009379 803804                  	cmp byte [rax], T_closure
 13820 0000937C 0F855EC40000            	jne L_error_non_closure
 13821 00009382 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13822                                  
 13823                                  	; recycling the current frame
 13824 00009385 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13825 00009388 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13826 0000938B B906000000              	mov rcx, 2 + 4
 13827 00009390 488B5D18                	mov rbx, COUNT
 13828 00009394 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13829 00009399 488D55F8                	lea rdx, [rbp - 8 * 1]
 13830                                  .L_tc_recycle_frame_loop_007a:
 13831 0000939D 4883F900                	cmp rcx, 0
 13832 000093A1 7413                    	je .L_tc_recycle_frame_done_007a
 13833 000093A3 488B32                  	mov rsi, qword [rdx]
 13834 000093A6 488933                  	mov qword [rbx], rsi
 13835 000093A9 48FFC9                  	dec rcx
 13836 000093AC 4883EB08                	sub rbx, 8 * 1
 13837 000093B0 4883EA08                	sub rdx, 8 * 1
 13838 000093B4 EBE7                    	jmp .L_tc_recycle_frame_loop_007a
 13839                                  .L_tc_recycle_frame_done_007a:
 13840 000093B6 488D6308                	lea rsp, [rbx + 8 * 1]
 13841 000093BA 5D                      	pop rbp	; the proc will restore it!
 13842 000093BB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13843 000093BE C9                      	leave
 13844 000093BF C21000                  	ret AND_KILL_FRAME(0)
 13845                                  .L_lambda_simple_end_0047:	; new closure is in rax
 13846 000093C2 50                      	push rax
 13847 000093C3 6A01                    	push 1	; arg count
 13848 000093C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13849 000093CA E8BAC40000              	call malloc
 13850 000093CF 50                      	push rax
 13851 000093D0 BF00000000              	mov rdi, 8 * 0	; new rib
 13852 000093D5 E8AFC40000              	call malloc
 13853 000093DA 50                      	push rax
 13854 000093DB BF08000000              	mov rdi, 8 * 1	; extended env
 13855 000093E0 E8A4C40000              	call malloc
 13856 000093E5 488B7D10                	mov rdi, ENV
 13857 000093E9 BE00000000              	mov rsi, 0
 13858 000093EE BA01000000              	mov rdx, 1
 13859                                  .L_lambda_simple_env_loop_0048:	; ext_env[i + 1] <-- env[i]
 13860 000093F3 4883FE00                	cmp rsi, 0
 13861 000093F7 7410                    	je .L_lambda_simple_env_end_0048
 13862 000093F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13863 000093FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13864 00009401 48FFC6                  	inc rsi
 13865 00009404 48FFC2                  	inc rdx
 13866 00009407 EBEA                    	jmp .L_lambda_simple_env_loop_0048
 13867                                  .L_lambda_simple_env_end_0048:
 13868 00009409 5B                      	pop rbx
 13869 0000940A BE00000000              	mov rsi, 0
 13870                                  .L_lambda_simple_params_loop_0048:	; copy params
 13871 0000940F 4883FE00                	cmp rsi, 0
 13872 00009413 740E                    	je .L_lambda_simple_params_end_0048
 13873 00009415 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13874 0000941A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13875 0000941E 48FFC6                  	inc rsi
 13876 00009421 EBEC                    	jmp .L_lambda_simple_params_loop_0048
 13877                                  .L_lambda_simple_params_end_0048:
 13878 00009423 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13879 00009426 4889C3                  	mov rbx, rax
 13880 00009429 58                      	pop rax
 13881 0000942A C60004                  	mov byte [rax], T_closure
 13882 0000942D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13883 00009431 48C74009[3E940000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0048
 13884 00009439 E925190000              	jmp .L_lambda_simple_end_0048
 13885                                  .L_lambda_simple_code_0048:	; lambda-simple body
 13886 0000943E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13887 00009444 740B                    	je .L_lambda_simple_arity_check_ok_0048
 13888 00009446 FF742410                	push qword [rsp + 8 * 2]
 13889 0000944A 6A01                    	push 1
 13890 0000944C E9F1C30000              	jmp L_error_incorrect_arity_simple
 13891                                  .L_lambda_simple_arity_check_ok_0048:
 13892 00009451 C8000000                	enter 0, 0
 13893                                  	; preparing a tail-call
 13894 00009455 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13895 0000945A E82AC40000              	call malloc
 13896 0000945F 50                      	push rax
 13897 00009460 BF08000000              	mov rdi, 8 * 1	; new rib
 13898 00009465 E81FC40000              	call malloc
 13899 0000946A 50                      	push rax
 13900 0000946B BF10000000              	mov rdi, 8 * 2	; extended env
 13901 00009470 E814C40000              	call malloc
 13902 00009475 488B7D10                	mov rdi, ENV
 13903 00009479 BE00000000              	mov rsi, 0
 13904 0000947E BA01000000              	mov rdx, 1
 13905                                  .L_lambda_simple_env_loop_0049:	; ext_env[i + 1] <-- env[i]
 13906 00009483 4883FE01                	cmp rsi, 1
 13907 00009487 7410                    	je .L_lambda_simple_env_end_0049
 13908 00009489 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13909 0000948D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13910 00009491 48FFC6                  	inc rsi
 13911 00009494 48FFC2                  	inc rdx
 13912 00009497 EBEA                    	jmp .L_lambda_simple_env_loop_0049
 13913                                  .L_lambda_simple_env_end_0049:
 13914 00009499 5B                      	pop rbx
 13915 0000949A BE00000000              	mov rsi, 0
 13916                                  .L_lambda_simple_params_loop_0049:	; copy params
 13917 0000949F 4883FE01                	cmp rsi, 1
 13918 000094A3 740E                    	je .L_lambda_simple_params_end_0049
 13919 000094A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13920 000094AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13921 000094AE 48FFC6                  	inc rsi
 13922 000094B1 EBEC                    	jmp .L_lambda_simple_params_loop_0049
 13923                                  .L_lambda_simple_params_end_0049:
 13924 000094B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13925 000094B6 4889C3                  	mov rbx, rax
 13926 000094B9 58                      	pop rax
 13927 000094BA C60004                  	mov byte [rax], T_closure
 13928 000094BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13929 000094C1 48C74009[CE940000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0049
 13930 000094C9 E98C080000              	jmp .L_lambda_simple_end_0049
 13931                                  .L_lambda_simple_code_0049:	; lambda-simple body
 13932 000094CE 48837C241003            	cmp qword [rsp + 8 * 2], 3
 13933 000094D4 740B                    	je .L_lambda_simple_arity_check_ok_0049
 13934 000094D6 FF742410                	push qword [rsp + 8 * 2]
 13935 000094DA 6A03                    	push 3
 13936 000094DC E961C30000              	jmp L_error_incorrect_arity_simple
 13937                                  .L_lambda_simple_arity_check_ok_0049:
 13938 000094E1 C8000000                	enter 0, 0
 13939 000094E5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13940 000094EA E89AC30000              	call malloc
 13941 000094EF 50                      	push rax
 13942 000094F0 BF18000000              	mov rdi, 8 * 3	; new rib
 13943 000094F5 E88FC30000              	call malloc
 13944 000094FA 50                      	push rax
 13945 000094FB BF18000000              	mov rdi, 8 * 3	; extended env
 13946 00009500 E884C30000              	call malloc
 13947 00009505 488B7D10                	mov rdi, ENV
 13948 00009509 BE00000000              	mov rsi, 0
 13949 0000950E BA01000000              	mov rdx, 1
 13950                                  .L_lambda_simple_env_loop_004a:	; ext_env[i + 1] <-- env[i]
 13951 00009513 4883FE02                	cmp rsi, 2
 13952 00009517 7410                    	je .L_lambda_simple_env_end_004a
 13953 00009519 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13954 0000951D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13955 00009521 48FFC6                  	inc rsi
 13956 00009524 48FFC2                  	inc rdx
 13957 00009527 EBEA                    	jmp .L_lambda_simple_env_loop_004a
 13958                                  .L_lambda_simple_env_end_004a:
 13959 00009529 5B                      	pop rbx
 13960 0000952A BE00000000              	mov rsi, 0
 13961                                  .L_lambda_simple_params_loop_004a:	; copy params
 13962 0000952F 4883FE03                	cmp rsi, 3
 13963 00009533 740E                    	je .L_lambda_simple_params_end_004a
 13964 00009535 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13965 0000953A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13966 0000953E 48FFC6                  	inc rsi
 13967 00009541 EBEC                    	jmp .L_lambda_simple_params_loop_004a
 13968                                  .L_lambda_simple_params_end_004a:
 13969 00009543 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13970 00009546 4889C3                  	mov rbx, rax
 13971 00009549 58                      	pop rax
 13972 0000954A C60004                  	mov byte [rax], T_closure
 13973 0000954D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13974 00009551 48C74009[5E950000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004a
 13975 00009559 E9F8070000              	jmp .L_lambda_simple_end_004a
 13976                                  .L_lambda_simple_code_004a:	; lambda-simple body
 13977 0000955E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13978 00009564 740B                    	je .L_lambda_simple_arity_check_ok_004a
 13979 00009566 FF742410                	push qword [rsp + 8 * 2]
 13980 0000956A 6A02                    	push 2
 13981 0000956C E9D1C20000              	jmp L_error_incorrect_arity_simple
 13982                                  .L_lambda_simple_arity_check_ok_004a:
 13983 00009571 C8000000                	enter 0, 0
 13984 00009575 488B4520                	mov rax, PARAM(0)	; param a
 13985 00009579 50                      	push rax
 13986 0000957A 6A01                    	push 1	; arg count
 13987 0000957C 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 13988 00009584 803805                  	cmp byte [rax], T_undefined
 13989 00009587 0F84CFC10000            	je L_error_fvar_undefined
 13990 0000958D 803804                  	cmp byte [rax], T_closure
 13991 00009590 0F854AC20000            	jne L_error_non_closure
 13992 00009596 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13993 00009599 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13994                                  
 13995 0000959C 483D[02000000]          	cmp rax, sob_boolean_false
 13996 000095A2 0F8451020000            	je .L_if_else_0042
 13997 000095A8 488B4528                	mov rax, PARAM(1)	; param b
 13998 000095AC 50                      	push rax
 13999 000095AD 6A01                    	push 1	; arg count
 14000 000095AF 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 14001 000095B7 803805                  	cmp byte [rax], T_undefined
 14002 000095BA 0F849CC10000            	je L_error_fvar_undefined
 14003 000095C0 803804                  	cmp byte [rax], T_closure
 14004 000095C3 0F8517C20000            	jne L_error_non_closure
 14005 000095C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14006 000095CC FF5009                  	call SOB_CLOSURE_CODE(rax)
 14007                                  
 14008 000095CF 483D[02000000]          	cmp rax, sob_boolean_false
 14009 000095D5 7460                    	je .L_if_else_0043
 14010                                  	; preparing a tail-call
 14011 000095D7 488B4528                	mov rax, PARAM(1)	; param b
 14012 000095DB 50                      	push rax
 14013 000095DC 488B4520                	mov rax, PARAM(0)	; param a
 14014 000095E0 50                      	push rax
 14015 000095E1 6A02                    	push 2	; arg count
 14016 000095E3 488B4510                	mov rax, ENV
 14017 000095E7 488B00                  	mov rax, qword [rax + 8 * 0]
 14018 000095EA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator-zz
 14019 000095ED 803804                  	cmp byte [rax], T_closure
 14020 000095F0 0F85EAC10000            	jne L_error_non_closure
 14021 000095F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14022                                  
 14023                                  	; recycling the current frame
 14024 000095F9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14025 000095FC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14026 000095FF B906000000              	mov rcx, 2 + 4
 14027 00009604 488B5D18                	mov rbx, COUNT
 14028 00009608 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14029 0000960D 488D55F8                	lea rdx, [rbp - 8 * 1]
 14030                                  .L_tc_recycle_frame_loop_007b:
 14031 00009611 4883F900                	cmp rcx, 0
 14032 00009615 7413                    	je .L_tc_recycle_frame_done_007b
 14033 00009617 488B32                  	mov rsi, qword [rdx]
 14034 0000961A 488933                  	mov qword [rbx], rsi
 14035 0000961D 48FFC9                  	dec rcx
 14036 00009620 4883EB08                	sub rbx, 8 * 1
 14037 00009624 4883EA08                	sub rdx, 8 * 1
 14038 00009628 EBE7                    	jmp .L_tc_recycle_frame_loop_007b
 14039                                  .L_tc_recycle_frame_done_007b:
 14040 0000962A 488D6308                	lea rsp, [rbx + 8 * 1]
 14041 0000962E 5D                      	pop rbp	; the proc will restore it!
 14042 0000962F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14043                                  
 14044 00009632 E9BD010000              	jmp .L_if_end_0043
 14045                                  
 14046                                  	.L_if_else_0043:
 14047 00009637 488B4528                	mov rax, PARAM(1)	; param b
 14048 0000963B 50                      	push rax
 14049 0000963C 6A01                    	push 1	; arg count
 14050 0000963E 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14051 00009646 803805                  	cmp byte [rax], T_undefined
 14052 00009649 0F840DC10000            	je L_error_fvar_undefined
 14053 0000964F 803804                  	cmp byte [rax], T_closure
 14054 00009652 0F8588C10000            	jne L_error_non_closure
 14055 00009658 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14056 0000965B FF5009                  	call SOB_CLOSURE_CODE(rax)
 14057                                  
 14058 0000965E 483D[02000000]          	cmp rax, sob_boolean_false
 14059 00009664 0F8484000000            	je .L_if_else_0044
 14060                                  	; preparing a tail-call
 14061 0000966A 488B4528                	mov rax, PARAM(1)	; param b
 14062 0000966E 50                      	push rax
 14063 0000966F 488B4520                	mov rax, PARAM(0)	; param a
 14064 00009673 50                      	push rax
 14065 00009674 6A01                    	push 1	; arg count
 14066 00009676 488B0425[CF110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 14067 0000967E 803805                  	cmp byte [rax], T_undefined
 14068 00009681 0F84D5C00000            	je L_error_fvar_undefined
 14069 00009687 803804                  	cmp byte [rax], T_closure
 14070 0000968A 0F8550C10000            	jne L_error_non_closure
 14071 00009690 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14072 00009693 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14073 00009696 50                      	push rax
 14074 00009697 6A02                    	push 2	; arg count
 14075 00009699 488B4510                	mov rax, ENV
 14076 0000969D 488B00                  	mov rax, qword [rax + 8 * 0]
 14077 000096A0 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14078 000096A4 803804                  	cmp byte [rax], T_closure
 14079 000096A7 0F8533C10000            	jne L_error_non_closure
 14080 000096AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 14081                                  
 14082                                  	; recycling the current frame
 14083 000096B0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14084 000096B3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14085 000096B6 B906000000              	mov rcx, 2 + 4
 14086 000096BB 488B5D18                	mov rbx, COUNT
 14087 000096BF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14088 000096C4 488D55F8                	lea rdx, [rbp - 8 * 1]
 14089                                  .L_tc_recycle_frame_loop_007c:
 14090 000096C8 4883F900                	cmp rcx, 0
 14091 000096CC 7413                    	je .L_tc_recycle_frame_done_007c
 14092 000096CE 488B32                  	mov rsi, qword [rdx]
 14093 000096D1 488933                  	mov qword [rbx], rsi
 14094 000096D4 48FFC9                  	dec rcx
 14095 000096D7 4883EB08                	sub rbx, 8 * 1
 14096 000096DB 4883EA08                	sub rdx, 8 * 1
 14097 000096DF EBE7                    	jmp .L_tc_recycle_frame_loop_007c
 14098                                  .L_tc_recycle_frame_done_007c:
 14099 000096E1 488D6308                	lea rsp, [rbx + 8 * 1]
 14100 000096E5 5D                      	pop rbp	; the proc will restore it!
 14101 000096E6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14102                                  
 14103 000096E9 E906010000              	jmp .L_if_end_0044
 14104                                  
 14105                                  	.L_if_else_0044:
 14106 000096EE 488B4528                	mov rax, PARAM(1)	; param b
 14107 000096F2 50                      	push rax
 14108 000096F3 6A01                    	push 1	; arg count
 14109 000096F5 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 14110 000096FD 803805                  	cmp byte [rax], T_undefined
 14111 00009700 0F8456C00000            	je L_error_fvar_undefined
 14112 00009706 803804                  	cmp byte [rax], T_closure
 14113 00009709 0F85D1C00000            	jne L_error_non_closure
 14114 0000970F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14115 00009712 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14116                                  
 14117 00009715 483D[02000000]          	cmp rax, sob_boolean_false
 14118 0000971B 0F8481000000            	je .L_if_else_0045
 14119                                  	; preparing a tail-call
 14120 00009721 488B4528                	mov rax, PARAM(1)	; param b
 14121 00009725 50                      	push rax
 14122 00009726 488B4520                	mov rax, PARAM(0)	; param a
 14123 0000972A 50                      	push rax
 14124 0000972B 6A01                    	push 1	; arg count
 14125 0000972D 488B0425[270F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 14126 00009735 803805                  	cmp byte [rax], T_undefined
 14127 00009738 0F841EC00000            	je L_error_fvar_undefined
 14128 0000973E 803804                  	cmp byte [rax], T_closure
 14129 00009741 0F8599C00000            	jne L_error_non_closure
 14130 00009747 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14131 0000974A FF5009                  	call SOB_CLOSURE_CODE(rax)
 14132 0000974D 50                      	push rax
 14133 0000974E 6A02                    	push 2	; arg count
 14134 00009750 488B4510                	mov rax, ENV
 14135 00009754 488B00                  	mov rax, qword [rax + 8 * 0]
 14136 00009757 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14137 0000975B 803804                  	cmp byte [rax], T_closure
 14138 0000975E 0F857CC00000            	jne L_error_non_closure
 14139 00009764 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14140                                  
 14141                                  	; recycling the current frame
 14142 00009767 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14143 0000976A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14144 0000976D B906000000              	mov rcx, 2 + 4
 14145 00009772 488B5D18                	mov rbx, COUNT
 14146 00009776 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14147 0000977B 488D55F8                	lea rdx, [rbp - 8 * 1]
 14148                                  .L_tc_recycle_frame_loop_007d:
 14149 0000977F 4883F900                	cmp rcx, 0
 14150 00009783 7413                    	je .L_tc_recycle_frame_done_007d
 14151 00009785 488B32                  	mov rsi, qword [rdx]
 14152 00009788 488933                  	mov qword [rbx], rsi
 14153 0000978B 48FFC9                  	dec rcx
 14154 0000978E 4883EB08                	sub rbx, 8 * 1
 14155 00009792 4883EA08                	sub rdx, 8 * 1
 14156 00009796 EBE7                    	jmp .L_tc_recycle_frame_loop_007d
 14157                                  .L_tc_recycle_frame_done_007d:
 14158 00009798 488D6308                	lea rsp, [rbx + 8 * 1]
 14159 0000979C 5D                      	pop rbp	; the proc will restore it!
 14160 0000979D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14161                                  
 14162 000097A0 EB52                    	jmp .L_if_end_0045
 14163                                  
 14164                                  	.L_if_else_0045:
 14165                                  	; preparing a tail-call
 14166 000097A2 6A00                    	push 0	; arg count
 14167 000097A4 488B4510                	mov rax, ENV
 14168 000097A8 488B4008                	mov rax, qword [rax + 8 * 1]
 14169 000097AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14170 000097AF 803804                  	cmp byte [rax], T_closure
 14171 000097B2 0F8528C00000            	jne L_error_non_closure
 14172 000097B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14173                                  
 14174                                  	; recycling the current frame
 14175 000097BB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14176 000097BE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14177 000097C1 B904000000              	mov rcx, 0 + 4
 14178 000097C6 488B5D18                	mov rbx, COUNT
 14179 000097CA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14180 000097CF 488D55F8                	lea rdx, [rbp - 8 * 1]
 14181                                  .L_tc_recycle_frame_loop_007e:
 14182 000097D3 4883F900                	cmp rcx, 0
 14183 000097D7 7413                    	je .L_tc_recycle_frame_done_007e
 14184 000097D9 488B32                  	mov rsi, qword [rdx]
 14185 000097DC 488933                  	mov qword [rbx], rsi
 14186 000097DF 48FFC9                  	dec rcx
 14187 000097E2 4883EB08                	sub rbx, 8 * 1
 14188 000097E6 4883EA08                	sub rdx, 8 * 1
 14189 000097EA EBE7                    	jmp .L_tc_recycle_frame_loop_007e
 14190                                  .L_tc_recycle_frame_done_007e:
 14191 000097EC 488D6308                	lea rsp, [rbx + 8 * 1]
 14192 000097F0 5D                      	pop rbp	; the proc will restore it!
 14193 000097F1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14194                                  
 14195                                  	.L_if_end_0045:
 14196                                  
 14197                                  	.L_if_end_0044:
 14198                                  
 14199                                  	.L_if_end_0043:
 14200                                  
 14201 000097F4 E959050000              	jmp .L_if_end_0042
 14202                                  
 14203                                  	.L_if_else_0042:
 14204 000097F9 488B4520                	mov rax, PARAM(0)	; param a
 14205 000097FD 50                      	push rax
 14206 000097FE 6A01                    	push 1	; arg count
 14207 00009800 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14208 00009808 803805                  	cmp byte [rax], T_undefined
 14209 0000980B 0F844BBF0000            	je L_error_fvar_undefined
 14210 00009811 803804                  	cmp byte [rax], T_closure
 14211 00009814 0F85C6BF0000            	jne L_error_non_closure
 14212 0000981A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14213 0000981D FF5009                  	call SOB_CLOSURE_CODE(rax)
 14214                                  
 14215 00009820 483D[02000000]          	cmp rax, sob_boolean_false
 14216 00009826 0F8452020000            	je .L_if_else_0046
 14217 0000982C 488B4528                	mov rax, PARAM(1)	; param b
 14218 00009830 50                      	push rax
 14219 00009831 6A01                    	push 1	; arg count
 14220 00009833 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 14221 0000983B 803805                  	cmp byte [rax], T_undefined
 14222 0000983E 0F8418BF0000            	je L_error_fvar_undefined
 14223 00009844 803804                  	cmp byte [rax], T_closure
 14224 00009847 0F8593BF0000            	jne L_error_non_closure
 14225 0000984D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14226 00009850 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14227                                  
 14228 00009853 483D[02000000]          	cmp rax, sob_boolean_false
 14229 00009859 0F8484000000            	je .L_if_else_0047
 14230                                  	; preparing a tail-call
 14231 0000985F 488B4528                	mov rax, PARAM(1)	; param b
 14232 00009863 50                      	push rax
 14233 00009864 6A01                    	push 1	; arg count
 14234 00009866 488B0425[CF110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 14235 0000986E 803805                  	cmp byte [rax], T_undefined
 14236 00009871 0F84E5BE0000            	je L_error_fvar_undefined
 14237 00009877 803804                  	cmp byte [rax], T_closure
 14238 0000987A 0F8560BF0000            	jne L_error_non_closure
 14239 00009880 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14240 00009883 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14241 00009886 50                      	push rax
 14242 00009887 488B4520                	mov rax, PARAM(0)	; param a
 14243 0000988B 50                      	push rax
 14244 0000988C 6A02                    	push 2	; arg count
 14245 0000988E 488B4510                	mov rax, ENV
 14246 00009892 488B00                  	mov rax, qword [rax + 8 * 0]
 14247 00009895 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14248 00009899 803804                  	cmp byte [rax], T_closure
 14249 0000989C 0F853EBF0000            	jne L_error_non_closure
 14250 000098A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14251                                  
 14252                                  	; recycling the current frame
 14253 000098A5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14254 000098A8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14255 000098AB B906000000              	mov rcx, 2 + 4
 14256 000098B0 488B5D18                	mov rbx, COUNT
 14257 000098B4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14258 000098B9 488D55F8                	lea rdx, [rbp - 8 * 1]
 14259                                  .L_tc_recycle_frame_loop_007f:
 14260 000098BD 4883F900                	cmp rcx, 0
 14261 000098C1 7413                    	je .L_tc_recycle_frame_done_007f
 14262 000098C3 488B32                  	mov rsi, qword [rdx]
 14263 000098C6 488933                  	mov qword [rbx], rsi
 14264 000098C9 48FFC9                  	dec rcx
 14265 000098CC 4883EB08                	sub rbx, 8 * 1
 14266 000098D0 4883EA08                	sub rdx, 8 * 1
 14267 000098D4 EBE7                    	jmp .L_tc_recycle_frame_loop_007f
 14268                                  .L_tc_recycle_frame_done_007f:
 14269 000098D6 488D6308                	lea rsp, [rbx + 8 * 1]
 14270 000098DA 5D                      	pop rbp	; the proc will restore it!
 14271 000098DB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14272                                  
 14273 000098DE E996010000              	jmp .L_if_end_0047
 14274                                  
 14275                                  	.L_if_else_0047:
 14276 000098E3 488B4528                	mov rax, PARAM(1)	; param b
 14277 000098E7 50                      	push rax
 14278 000098E8 6A01                    	push 1	; arg count
 14279 000098EA 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14280 000098F2 803805                  	cmp byte [rax], T_undefined
 14281 000098F5 0F8461BE0000            	je L_error_fvar_undefined
 14282 000098FB 803804                  	cmp byte [rax], T_closure
 14283 000098FE 0F85DCBE0000            	jne L_error_non_closure
 14284 00009904 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14285 00009907 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14286                                  
 14287 0000990A 483D[02000000]          	cmp rax, sob_boolean_false
 14288 00009910 7461                    	je .L_if_else_0048
 14289                                  	; preparing a tail-call
 14290 00009912 488B4528                	mov rax, PARAM(1)	; param b
 14291 00009916 50                      	push rax
 14292 00009917 488B4520                	mov rax, PARAM(0)	; param a
 14293 0000991B 50                      	push rax
 14294 0000991C 6A02                    	push 2	; arg count
 14295 0000991E 488B4510                	mov rax, ENV
 14296 00009922 488B00                  	mov rax, qword [rax + 8 * 0]
 14297 00009925 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14298 00009929 803804                  	cmp byte [rax], T_closure
 14299 0000992C 0F85AEBE0000            	jne L_error_non_closure
 14300 00009932 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14301                                  
 14302                                  	; recycling the current frame
 14303 00009935 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14304 00009938 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14305 0000993B B906000000              	mov rcx, 2 + 4
 14306 00009940 488B5D18                	mov rbx, COUNT
 14307 00009944 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14308 00009949 488D55F8                	lea rdx, [rbp - 8 * 1]
 14309                                  .L_tc_recycle_frame_loop_0080:
 14310 0000994D 4883F900                	cmp rcx, 0
 14311 00009951 7413                    	je .L_tc_recycle_frame_done_0080
 14312 00009953 488B32                  	mov rsi, qword [rdx]
 14313 00009956 488933                  	mov qword [rbx], rsi
 14314 00009959 48FFC9                  	dec rcx
 14315 0000995C 4883EB08                	sub rbx, 8 * 1
 14316 00009960 4883EA08                	sub rdx, 8 * 1
 14317 00009964 EBE7                    	jmp .L_tc_recycle_frame_loop_0080
 14318                                  .L_tc_recycle_frame_done_0080:
 14319 00009966 488D6308                	lea rsp, [rbx + 8 * 1]
 14320 0000996A 5D                      	pop rbp	; the proc will restore it!
 14321 0000996B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14322                                  
 14323 0000996E E906010000              	jmp .L_if_end_0048
 14324                                  
 14325                                  	.L_if_else_0048:
 14326 00009973 488B4528                	mov rax, PARAM(1)	; param b
 14327 00009977 50                      	push rax
 14328 00009978 6A01                    	push 1	; arg count
 14329 0000997A 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 14330 00009982 803805                  	cmp byte [rax], T_undefined
 14331 00009985 0F84D1BD0000            	je L_error_fvar_undefined
 14332 0000998B 803804                  	cmp byte [rax], T_closure
 14333 0000998E 0F854CBE0000            	jne L_error_non_closure
 14334 00009994 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14335 00009997 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14336                                  
 14337 0000999A 483D[02000000]          	cmp rax, sob_boolean_false
 14338 000099A0 0F8481000000            	je .L_if_else_0049
 14339                                  	; preparing a tail-call
 14340 000099A6 488B4528                	mov rax, PARAM(1)	; param b
 14341 000099AA 50                      	push rax
 14342 000099AB 488B4520                	mov rax, PARAM(0)	; param a
 14343 000099AF 50                      	push rax
 14344 000099B0 6A01                    	push 1	; arg count
 14345 000099B2 488B0425[380F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 14346 000099BA 803805                  	cmp byte [rax], T_undefined
 14347 000099BD 0F8499BD0000            	je L_error_fvar_undefined
 14348 000099C3 803804                  	cmp byte [rax], T_closure
 14349 000099C6 0F8514BE0000            	jne L_error_non_closure
 14350 000099CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 14351 000099CF FF5009                  	call SOB_CLOSURE_CODE(rax)
 14352 000099D2 50                      	push rax
 14353 000099D3 6A02                    	push 2	; arg count
 14354 000099D5 488B4510                	mov rax, ENV
 14355 000099D9 488B00                  	mov rax, qword [rax + 8 * 0]
 14356 000099DC 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14357 000099E0 803804                  	cmp byte [rax], T_closure
 14358 000099E3 0F85F7BD0000            	jne L_error_non_closure
 14359 000099E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14360                                  
 14361                                  	; recycling the current frame
 14362 000099EC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14363 000099EF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14364 000099F2 B906000000              	mov rcx, 2 + 4
 14365 000099F7 488B5D18                	mov rbx, COUNT
 14366 000099FB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14367 00009A00 488D55F8                	lea rdx, [rbp - 8 * 1]
 14368                                  .L_tc_recycle_frame_loop_0081:
 14369 00009A04 4883F900                	cmp rcx, 0
 14370 00009A08 7413                    	je .L_tc_recycle_frame_done_0081
 14371 00009A0A 488B32                  	mov rsi, qword [rdx]
 14372 00009A0D 488933                  	mov qword [rbx], rsi
 14373 00009A10 48FFC9                  	dec rcx
 14374 00009A13 4883EB08                	sub rbx, 8 * 1
 14375 00009A17 4883EA08                	sub rdx, 8 * 1
 14376 00009A1B EBE7                    	jmp .L_tc_recycle_frame_loop_0081
 14377                                  .L_tc_recycle_frame_done_0081:
 14378 00009A1D 488D6308                	lea rsp, [rbx + 8 * 1]
 14379 00009A21 5D                      	pop rbp	; the proc will restore it!
 14380 00009A22 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14381                                  
 14382 00009A25 EB52                    	jmp .L_if_end_0049
 14383                                  
 14384                                  	.L_if_else_0049:
 14385                                  	; preparing a tail-call
 14386 00009A27 6A00                    	push 0	; arg count
 14387 00009A29 488B4510                	mov rax, ENV
 14388 00009A2D 488B4008                	mov rax, qword [rax + 8 * 1]
 14389 00009A31 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14390 00009A34 803804                  	cmp byte [rax], T_closure
 14391 00009A37 0F85A3BD0000            	jne L_error_non_closure
 14392 00009A3D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14393                                  
 14394                                  	; recycling the current frame
 14395 00009A40 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14396 00009A43 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14397 00009A46 B904000000              	mov rcx, 0 + 4
 14398 00009A4B 488B5D18                	mov rbx, COUNT
 14399 00009A4F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14400 00009A54 488D55F8                	lea rdx, [rbp - 8 * 1]
 14401                                  .L_tc_recycle_frame_loop_0082:
 14402 00009A58 4883F900                	cmp rcx, 0
 14403 00009A5C 7413                    	je .L_tc_recycle_frame_done_0082
 14404 00009A5E 488B32                  	mov rsi, qword [rdx]
 14405 00009A61 488933                  	mov qword [rbx], rsi
 14406 00009A64 48FFC9                  	dec rcx
 14407 00009A67 4883EB08                	sub rbx, 8 * 1
 14408 00009A6B 4883EA08                	sub rdx, 8 * 1
 14409 00009A6F EBE7                    	jmp .L_tc_recycle_frame_loop_0082
 14410                                  .L_tc_recycle_frame_done_0082:
 14411 00009A71 488D6308                	lea rsp, [rbx + 8 * 1]
 14412 00009A75 5D                      	pop rbp	; the proc will restore it!
 14413 00009A76 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14414                                  
 14415                                  	.L_if_end_0049:
 14416                                  
 14417                                  	.L_if_end_0048:
 14418                                  
 14419                                  	.L_if_end_0047:
 14420                                  
 14421 00009A79 E9D4020000              	jmp .L_if_end_0046
 14422                                  
 14423                                  	.L_if_else_0046:
 14424 00009A7E 488B4520                	mov rax, PARAM(0)	; param a
 14425 00009A82 50                      	push rax
 14426 00009A83 6A01                    	push 1	; arg count
 14427 00009A85 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 14428 00009A8D 803805                  	cmp byte [rax], T_undefined
 14429 00009A90 0F84C6BC0000            	je L_error_fvar_undefined
 14430 00009A96 803804                  	cmp byte [rax], T_closure
 14431 00009A99 0F8541BD0000            	jne L_error_non_closure
 14432 00009A9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14433 00009AA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14434                                  
 14435 00009AA5 483D[02000000]          	cmp rax, sob_boolean_false
 14436 00009AAB 0F844F020000            	je .L_if_else_004a
 14437 00009AB1 488B4528                	mov rax, PARAM(1)	; param b
 14438 00009AB5 50                      	push rax
 14439 00009AB6 6A01                    	push 1	; arg count
 14440 00009AB8 488B0425[8D0F0000]      	mov rax, qword [free_var_28]	; free var integer?
 14441 00009AC0 803805                  	cmp byte [rax], T_undefined
 14442 00009AC3 0F8493BC0000            	je L_error_fvar_undefined
 14443 00009AC9 803804                  	cmp byte [rax], T_closure
 14444 00009ACC 0F850EBD0000            	jne L_error_non_closure
 14445 00009AD2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14446 00009AD5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14447                                  
 14448 00009AD8 483D[02000000]          	cmp rax, sob_boolean_false
 14449 00009ADE 0F8484000000            	je .L_if_else_004b
 14450                                  	; preparing a tail-call
 14451 00009AE4 488B4528                	mov rax, PARAM(1)	; param b
 14452 00009AE8 50                      	push rax
 14453 00009AE9 6A01                    	push 1	; arg count
 14454 00009AEB 488B0425[270F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 14455 00009AF3 803805                  	cmp byte [rax], T_undefined
 14456 00009AF6 0F8460BC0000            	je L_error_fvar_undefined
 14457 00009AFC 803804                  	cmp byte [rax], T_closure
 14458 00009AFF 0F85DBBC0000            	jne L_error_non_closure
 14459 00009B05 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14460 00009B08 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14461 00009B0B 50                      	push rax
 14462 00009B0C 488B4520                	mov rax, PARAM(0)	; param a
 14463 00009B10 50                      	push rax
 14464 00009B11 6A02                    	push 2	; arg count
 14465 00009B13 488B4510                	mov rax, ENV
 14466 00009B17 488B00                  	mov rax, qword [rax + 8 * 0]
 14467 00009B1A 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14468 00009B1E 803804                  	cmp byte [rax], T_closure
 14469 00009B21 0F85B9BC0000            	jne L_error_non_closure
 14470 00009B27 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14471                                  
 14472                                  	; recycling the current frame
 14473 00009B2A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14474 00009B2D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14475 00009B30 B906000000              	mov rcx, 2 + 4
 14476 00009B35 488B5D18                	mov rbx, COUNT
 14477 00009B39 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14478 00009B3E 488D55F8                	lea rdx, [rbp - 8 * 1]
 14479                                  .L_tc_recycle_frame_loop_0083:
 14480 00009B42 4883F900                	cmp rcx, 0
 14481 00009B46 7413                    	je .L_tc_recycle_frame_done_0083
 14482 00009B48 488B32                  	mov rsi, qword [rdx]
 14483 00009B4B 488933                  	mov qword [rbx], rsi
 14484 00009B4E 48FFC9                  	dec rcx
 14485 00009B51 4883EB08                	sub rbx, 8 * 1
 14486 00009B55 4883EA08                	sub rdx, 8 * 1
 14487 00009B59 EBE7                    	jmp .L_tc_recycle_frame_loop_0083
 14488                                  .L_tc_recycle_frame_done_0083:
 14489 00009B5B 488D6308                	lea rsp, [rbx + 8 * 1]
 14490 00009B5F 5D                      	pop rbp	; the proc will restore it!
 14491 00009B60 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14492                                  
 14493 00009B63 E996010000              	jmp .L_if_end_004b
 14494                                  
 14495                                  	.L_if_else_004b:
 14496 00009B68 488B4528                	mov rax, PARAM(1)	; param b
 14497 00009B6C 50                      	push rax
 14498 00009B6D 6A01                    	push 1	; arg count
 14499 00009B6F 488B0425[4A0E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14500 00009B77 803805                  	cmp byte [rax], T_undefined
 14501 00009B7A 0F84DCBB0000            	je L_error_fvar_undefined
 14502 00009B80 803804                  	cmp byte [rax], T_closure
 14503 00009B83 0F8557BC0000            	jne L_error_non_closure
 14504 00009B89 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14505 00009B8C FF5009                  	call SOB_CLOSURE_CODE(rax)
 14506                                  
 14507 00009B8F 483D[02000000]          	cmp rax, sob_boolean_false
 14508 00009B95 0F8484000000            	je .L_if_else_004c
 14509                                  	; preparing a tail-call
 14510 00009B9B 488B4528                	mov rax, PARAM(1)	; param b
 14511 00009B9F 50                      	push rax
 14512 00009BA0 6A01                    	push 1	; arg count
 14513 00009BA2 488B0425[380F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 14514 00009BAA 803805                  	cmp byte [rax], T_undefined
 14515 00009BAD 0F84A9BB0000            	je L_error_fvar_undefined
 14516 00009BB3 803804                  	cmp byte [rax], T_closure
 14517 00009BB6 0F8524BC0000            	jne L_error_non_closure
 14518 00009BBC FF7001                  	push SOB_CLOSURE_ENV(rax)
 14519 00009BBF FF5009                  	call SOB_CLOSURE_CODE(rax)
 14520 00009BC2 50                      	push rax
 14521 00009BC3 488B4520                	mov rax, PARAM(0)	; param a
 14522 00009BC7 50                      	push rax
 14523 00009BC8 6A02                    	push 2	; arg count
 14524 00009BCA 488B4510                	mov rax, ENV
 14525 00009BCE 488B00                  	mov rax, qword [rax + 8 * 0]
 14526 00009BD1 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14527 00009BD5 803804                  	cmp byte [rax], T_closure
 14528 00009BD8 0F8502BC0000            	jne L_error_non_closure
 14529 00009BDE FF7001                  	push SOB_CLOSURE_ENV(rax)
 14530                                  
 14531                                  	; recycling the current frame
 14532 00009BE1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14533 00009BE4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14534 00009BE7 B906000000              	mov rcx, 2 + 4
 14535 00009BEC 488B5D18                	mov rbx, COUNT
 14536 00009BF0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14537 00009BF5 488D55F8                	lea rdx, [rbp - 8 * 1]
 14538                                  .L_tc_recycle_frame_loop_0084:
 14539 00009BF9 4883F900                	cmp rcx, 0
 14540 00009BFD 7413                    	je .L_tc_recycle_frame_done_0084
 14541 00009BFF 488B32                  	mov rsi, qword [rdx]
 14542 00009C02 488933                  	mov qword [rbx], rsi
 14543 00009C05 48FFC9                  	dec rcx
 14544 00009C08 4883EB08                	sub rbx, 8 * 1
 14545 00009C0C 4883EA08                	sub rdx, 8 * 1
 14546 00009C10 EBE7                    	jmp .L_tc_recycle_frame_loop_0084
 14547                                  .L_tc_recycle_frame_done_0084:
 14548 00009C12 488D6308                	lea rsp, [rbx + 8 * 1]
 14549 00009C16 5D                      	pop rbp	; the proc will restore it!
 14550 00009C17 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14551                                  
 14552 00009C1A E9DF000000              	jmp .L_if_end_004c
 14553                                  
 14554                                  	.L_if_else_004c:
 14555 00009C1F 488B4528                	mov rax, PARAM(1)	; param b
 14556 00009C23 50                      	push rax
 14557 00009C24 6A01                    	push 1	; arg count
 14558 00009C26 488B0425[390E0000]      	mov rax, qword [free_var_8]	; free var real?
 14559 00009C2E 803805                  	cmp byte [rax], T_undefined
 14560 00009C31 0F8425BB0000            	je L_error_fvar_undefined
 14561 00009C37 803804                  	cmp byte [rax], T_closure
 14562 00009C3A 0F85A0BB0000            	jne L_error_non_closure
 14563 00009C40 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14564 00009C43 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14565                                  
 14566 00009C46 483D[02000000]          	cmp rax, sob_boolean_false
 14567 00009C4C 745E                    	je .L_if_else_004d
 14568                                  	; preparing a tail-call
 14569 00009C4E 488B4528                	mov rax, PARAM(1)	; param b
 14570 00009C52 50                      	push rax
 14571 00009C53 488B4520                	mov rax, PARAM(0)	; param a
 14572 00009C57 50                      	push rax
 14573 00009C58 6A02                    	push 2	; arg count
 14574 00009C5A 488B4510                	mov rax, ENV
 14575 00009C5E 488B00                  	mov rax, qword [rax + 8 * 0]
 14576 00009C61 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14577 00009C65 803804                  	cmp byte [rax], T_closure
 14578 00009C68 0F8572BB0000            	jne L_error_non_closure
 14579 00009C6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 14580                                  
 14581                                  	; recycling the current frame
 14582 00009C71 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14583 00009C74 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14584 00009C77 B906000000              	mov rcx, 2 + 4
 14585 00009C7C 488B5D18                	mov rbx, COUNT
 14586 00009C80 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14587 00009C85 488D55F8                	lea rdx, [rbp - 8 * 1]
 14588                                  .L_tc_recycle_frame_loop_0085:
 14589 00009C89 4883F900                	cmp rcx, 0
 14590 00009C8D 7413                    	je .L_tc_recycle_frame_done_0085
 14591 00009C8F 488B32                  	mov rsi, qword [rdx]
 14592 00009C92 488933                  	mov qword [rbx], rsi
 14593 00009C95 48FFC9                  	dec rcx
 14594 00009C98 4883EB08                	sub rbx, 8 * 1
 14595 00009C9C 4883EA08                	sub rdx, 8 * 1
 14596 00009CA0 EBE7                    	jmp .L_tc_recycle_frame_loop_0085
 14597                                  .L_tc_recycle_frame_done_0085:
 14598 00009CA2 488D6308                	lea rsp, [rbx + 8 * 1]
 14599 00009CA6 5D                      	pop rbp	; the proc will restore it!
 14600 00009CA7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14601                                  
 14602 00009CAA EB52                    	jmp .L_if_end_004d
 14603                                  
 14604                                  	.L_if_else_004d:
 14605                                  	; preparing a tail-call
 14606 00009CAC 6A00                    	push 0	; arg count
 14607 00009CAE 488B4510                	mov rax, ENV
 14608 00009CB2 488B4008                	mov rax, qword [rax + 8 * 1]
 14609 00009CB6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14610 00009CB9 803804                  	cmp byte [rax], T_closure
 14611 00009CBC 0F851EBB0000            	jne L_error_non_closure
 14612 00009CC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14613                                  
 14614                                  	; recycling the current frame
 14615 00009CC5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14616 00009CC8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14617 00009CCB B904000000              	mov rcx, 0 + 4
 14618 00009CD0 488B5D18                	mov rbx, COUNT
 14619 00009CD4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14620 00009CD9 488D55F8                	lea rdx, [rbp - 8 * 1]
 14621                                  .L_tc_recycle_frame_loop_0086:
 14622 00009CDD 4883F900                	cmp rcx, 0
 14623 00009CE1 7413                    	je .L_tc_recycle_frame_done_0086
 14624 00009CE3 488B32                  	mov rsi, qword [rdx]
 14625 00009CE6 488933                  	mov qword [rbx], rsi
 14626 00009CE9 48FFC9                  	dec rcx
 14627 00009CEC 4883EB08                	sub rbx, 8 * 1
 14628 00009CF0 4883EA08                	sub rdx, 8 * 1
 14629 00009CF4 EBE7                    	jmp .L_tc_recycle_frame_loop_0086
 14630                                  .L_tc_recycle_frame_done_0086:
 14631 00009CF6 488D6308                	lea rsp, [rbx + 8 * 1]
 14632 00009CFA 5D                      	pop rbp	; the proc will restore it!
 14633 00009CFB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14634                                  
 14635                                  	.L_if_end_004d:
 14636                                  
 14637                                  	.L_if_end_004c:
 14638                                  
 14639                                  	.L_if_end_004b:
 14640                                  
 14641 00009CFE EB52                    	jmp .L_if_end_004a
 14642                                  
 14643                                  	.L_if_else_004a:
 14644                                  	; preparing a tail-call
 14645 00009D00 6A00                    	push 0	; arg count
 14646 00009D02 488B4510                	mov rax, ENV
 14647 00009D06 488B4008                	mov rax, qword [rax + 8 * 1]
 14648 00009D0A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14649 00009D0D 803804                  	cmp byte [rax], T_closure
 14650 00009D10 0F85CABA0000            	jne L_error_non_closure
 14651 00009D16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14652                                  
 14653                                  	; recycling the current frame
 14654 00009D19 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14655 00009D1C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14656 00009D1F B904000000              	mov rcx, 0 + 4
 14657 00009D24 488B5D18                	mov rbx, COUNT
 14658 00009D28 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14659 00009D2D 488D55F8                	lea rdx, [rbp - 8 * 1]
 14660                                  .L_tc_recycle_frame_loop_0087:
 14661 00009D31 4883F900                	cmp rcx, 0
 14662 00009D35 7413                    	je .L_tc_recycle_frame_done_0087
 14663 00009D37 488B32                  	mov rsi, qword [rdx]
 14664 00009D3A 488933                  	mov qword [rbx], rsi
 14665 00009D3D 48FFC9                  	dec rcx
 14666 00009D40 4883EB08                	sub rbx, 8 * 1
 14667 00009D44 4883EA08                	sub rdx, 8 * 1
 14668 00009D48 EBE7                    	jmp .L_tc_recycle_frame_loop_0087
 14669                                  .L_tc_recycle_frame_done_0087:
 14670 00009D4A 488D6308                	lea rsp, [rbx + 8 * 1]
 14671 00009D4E 5D                      	pop rbp	; the proc will restore it!
 14672 00009D4F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14673                                  
 14674                                  	.L_if_end_004a:
 14675                                  
 14676                                  	.L_if_end_0046:
 14677                                  
 14678                                  	.L_if_end_0042:
 14679 00009D52 C9                      	leave
 14680 00009D53 C22000                  	ret AND_KILL_FRAME(2)
 14681                                  .L_lambda_simple_end_004a:	; new closure is in rax
 14682 00009D56 C9                      	leave
 14683 00009D57 C22800                  	ret AND_KILL_FRAME(3)
 14684                                  .L_lambda_simple_end_0049:	; new closure is in rax
 14685 00009D5A 50                      	push rax
 14686 00009D5B 6A01                    	push 1	; arg count
 14687 00009D5D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14688 00009D62 E822BB0000              	call malloc
 14689 00009D67 50                      	push rax
 14690 00009D68 BF08000000              	mov rdi, 8 * 1	; new rib
 14691 00009D6D E817BB0000              	call malloc
 14692 00009D72 50                      	push rax
 14693 00009D73 BF10000000              	mov rdi, 8 * 2	; extended env
 14694 00009D78 E80CBB0000              	call malloc
 14695 00009D7D 488B7D10                	mov rdi, ENV
 14696 00009D81 BE00000000              	mov rsi, 0
 14697 00009D86 BA01000000              	mov rdx, 1
 14698                                  .L_lambda_simple_env_loop_004b:	; ext_env[i + 1] <-- env[i]
 14699 00009D8B 4883FE01                	cmp rsi, 1
 14700 00009D8F 7410                    	je .L_lambda_simple_env_end_004b
 14701 00009D91 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14702 00009D95 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14703 00009D99 48FFC6                  	inc rsi
 14704 00009D9C 48FFC2                  	inc rdx
 14705 00009D9F EBEA                    	jmp .L_lambda_simple_env_loop_004b
 14706                                  .L_lambda_simple_env_end_004b:
 14707 00009DA1 5B                      	pop rbx
 14708 00009DA2 BE00000000              	mov rsi, 0
 14709                                  .L_lambda_simple_params_loop_004b:	; copy params
 14710 00009DA7 4883FE01                	cmp rsi, 1
 14711 00009DAB 740E                    	je .L_lambda_simple_params_end_004b
 14712 00009DAD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14713 00009DB2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14714 00009DB6 48FFC6                  	inc rsi
 14715 00009DB9 EBEC                    	jmp .L_lambda_simple_params_loop_004b
 14716                                  .L_lambda_simple_params_end_004b:
 14717 00009DBB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14718 00009DBE 4889C3                  	mov rbx, rax
 14719 00009DC1 58                      	pop rax
 14720 00009DC2 C60004                  	mov byte [rax], T_closure
 14721 00009DC5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14722 00009DC9 48C74009[D69D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004b
 14723 00009DD1 E9440F0000              	jmp .L_lambda_simple_end_004b
 14724                                  .L_lambda_simple_code_004b:	; lambda-simple body
 14725 00009DD6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14726 00009DDC 740B                    	je .L_lambda_simple_arity_check_ok_004b
 14727 00009DDE FF742410                	push qword [rsp + 8 * 2]
 14728 00009DE2 6A01                    	push 1
 14729 00009DE4 E959BA0000              	jmp L_error_incorrect_arity_simple
 14730                                  .L_lambda_simple_arity_check_ok_004b:
 14731 00009DE9 C8000000                	enter 0, 0
 14732                                  	; preparing a tail-call
 14733 00009DED 488B0425[8C100000]      	mov rax, qword [free_var_43]	; free var __bin-less-than-rr
 14734 00009DF5 803805                  	cmp byte [rax], T_undefined
 14735 00009DF8 0F845EB90000            	je L_error_fvar_undefined
 14736 00009DFE 50                      	push rax
 14737 00009DFF 488B0425[9D100000]      	mov rax, qword [free_var_44]	; free var __bin-less-than-qq
 14738 00009E07 803805                  	cmp byte [rax], T_undefined
 14739 00009E0A 0F844CB90000            	je L_error_fvar_undefined
 14740 00009E10 50                      	push rax
 14741 00009E11 488B0425[AE100000]      	mov rax, qword [free_var_45]	; free var __bin-less-than-zz
 14742 00009E19 803805                  	cmp byte [rax], T_undefined
 14743 00009E1C 0F843AB90000            	je L_error_fvar_undefined
 14744 00009E22 50                      	push rax
 14745 00009E23 6A03                    	push 3	; arg count
 14746 00009E25 488B4520                	mov rax, PARAM(0)	; param make-bin-comparator
 14747 00009E29 803804                  	cmp byte [rax], T_closure
 14748 00009E2C 0F85AEB90000            	jne L_error_non_closure
 14749 00009E32 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14750 00009E35 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14751 00009E38 50                      	push rax
 14752 00009E39 6A01                    	push 1	; arg count
 14753 00009E3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14754 00009E40 E844BA0000              	call malloc
 14755 00009E45 50                      	push rax
 14756 00009E46 BF08000000              	mov rdi, 8 * 1	; new rib
 14757 00009E4B E839BA0000              	call malloc
 14758 00009E50 50                      	push rax
 14759 00009E51 BF18000000              	mov rdi, 8 * 3	; extended env
 14760 00009E56 E82EBA0000              	call malloc
 14761 00009E5B 488B7D10                	mov rdi, ENV
 14762 00009E5F BE00000000              	mov rsi, 0
 14763 00009E64 BA01000000              	mov rdx, 1
 14764                                  .L_lambda_simple_env_loop_004c:	; ext_env[i + 1] <-- env[i]
 14765 00009E69 4883FE02                	cmp rsi, 2
 14766 00009E6D 7410                    	je .L_lambda_simple_env_end_004c
 14767 00009E6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14768 00009E73 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14769 00009E77 48FFC6                  	inc rsi
 14770 00009E7A 48FFC2                  	inc rdx
 14771 00009E7D EBEA                    	jmp .L_lambda_simple_env_loop_004c
 14772                                  .L_lambda_simple_env_end_004c:
 14773 00009E7F 5B                      	pop rbx
 14774 00009E80 BE00000000              	mov rsi, 0
 14775                                  .L_lambda_simple_params_loop_004c:	; copy params
 14776 00009E85 4883FE01                	cmp rsi, 1
 14777 00009E89 740E                    	je .L_lambda_simple_params_end_004c
 14778 00009E8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14779 00009E90 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14780 00009E94 48FFC6                  	inc rsi
 14781 00009E97 EBEC                    	jmp .L_lambda_simple_params_loop_004c
 14782                                  .L_lambda_simple_params_end_004c:
 14783 00009E99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14784 00009E9C 4889C3                  	mov rbx, rax
 14785 00009E9F 58                      	pop rax
 14786 00009EA0 C60004                  	mov byte [rax], T_closure
 14787 00009EA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14788 00009EA7 48C74009[B49E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004c
 14789 00009EAF E91D0E0000              	jmp .L_lambda_simple_end_004c
 14790                                  .L_lambda_simple_code_004c:	; lambda-simple body
 14791 00009EB4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14792 00009EBA 740B                    	je .L_lambda_simple_arity_check_ok_004c
 14793 00009EBC FF742410                	push qword [rsp + 8 * 2]
 14794 00009EC0 6A01                    	push 1
 14795 00009EC2 E97BB90000              	jmp L_error_incorrect_arity_simple
 14796                                  .L_lambda_simple_arity_check_ok_004c:
 14797 00009EC7 C8000000                	enter 0, 0
 14798                                  	; preparing a tail-call
 14799 00009ECB 488B0425[BF100000]      	mov rax, qword [free_var_46]	; free var __bin-equal-rr
 14800 00009ED3 803805                  	cmp byte [rax], T_undefined
 14801 00009ED6 0F8480B80000            	je L_error_fvar_undefined
 14802 00009EDC 50                      	push rax
 14803 00009EDD 488B0425[D0100000]      	mov rax, qword [free_var_47]	; free var __bin-equal-qq
 14804 00009EE5 803805                  	cmp byte [rax], T_undefined
 14805 00009EE8 0F846EB80000            	je L_error_fvar_undefined
 14806 00009EEE 50                      	push rax
 14807 00009EEF 488B0425[E1100000]      	mov rax, qword [free_var_48]	; free var __bin-equal-zz
 14808 00009EF7 803805                  	cmp byte [rax], T_undefined
 14809 00009EFA 0F845CB80000            	je L_error_fvar_undefined
 14810 00009F00 50                      	push rax
 14811 00009F01 6A03                    	push 3	; arg count
 14812 00009F03 488B4510                	mov rax, ENV
 14813 00009F07 488B00                  	mov rax, qword [rax + 8 * 0]
 14814 00009F0A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var make-bin-comparator
 14815 00009F0D 803804                  	cmp byte [rax], T_closure
 14816 00009F10 0F85CAB80000            	jne L_error_non_closure
 14817 00009F16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14818 00009F19 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14819 00009F1C 50                      	push rax
 14820 00009F1D 6A01                    	push 1	; arg count
 14821 00009F1F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14822 00009F24 E860B90000              	call malloc
 14823 00009F29 50                      	push rax
 14824 00009F2A BF08000000              	mov rdi, 8 * 1	; new rib
 14825 00009F2F E855B90000              	call malloc
 14826 00009F34 50                      	push rax
 14827 00009F35 BF20000000              	mov rdi, 8 * 4	; extended env
 14828 00009F3A E84AB90000              	call malloc
 14829 00009F3F 488B7D10                	mov rdi, ENV
 14830 00009F43 BE00000000              	mov rsi, 0
 14831 00009F48 BA01000000              	mov rdx, 1
 14832                                  .L_lambda_simple_env_loop_004d:	; ext_env[i + 1] <-- env[i]
 14833 00009F4D 4883FE03                	cmp rsi, 3
 14834 00009F51 7410                    	je .L_lambda_simple_env_end_004d
 14835 00009F53 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14836 00009F57 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14837 00009F5B 48FFC6                  	inc rsi
 14838 00009F5E 48FFC2                  	inc rdx
 14839 00009F61 EBEA                    	jmp .L_lambda_simple_env_loop_004d
 14840                                  .L_lambda_simple_env_end_004d:
 14841 00009F63 5B                      	pop rbx
 14842 00009F64 BE00000000              	mov rsi, 0
 14843                                  .L_lambda_simple_params_loop_004d:	; copy params
 14844 00009F69 4883FE01                	cmp rsi, 1
 14845 00009F6D 740E                    	je .L_lambda_simple_params_end_004d
 14846 00009F6F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14847 00009F74 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14848 00009F78 48FFC6                  	inc rsi
 14849 00009F7B EBEC                    	jmp .L_lambda_simple_params_loop_004d
 14850                                  .L_lambda_simple_params_end_004d:
 14851 00009F7D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14852 00009F80 4889C3                  	mov rbx, rax
 14853 00009F83 58                      	pop rax
 14854 00009F84 C60004                  	mov byte [rax], T_closure
 14855 00009F87 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14856 00009F8B 48C74009[989F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004d
 14857 00009F93 E9F00C0000              	jmp .L_lambda_simple_end_004d
 14858                                  .L_lambda_simple_code_004d:	; lambda-simple body
 14859 00009F98 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14860 00009F9E 740B                    	je .L_lambda_simple_arity_check_ok_004d
 14861 00009FA0 FF742410                	push qword [rsp + 8 * 2]
 14862 00009FA4 6A01                    	push 1
 14863 00009FA6 E997B80000              	jmp L_error_incorrect_arity_simple
 14864                                  .L_lambda_simple_arity_check_ok_004d:
 14865 00009FAB C8000000                	enter 0, 0
 14866                                  	; preparing a tail-call
 14867 00009FAF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14868 00009FB4 E8D0B80000              	call malloc
 14869 00009FB9 50                      	push rax
 14870 00009FBA BF08000000              	mov rdi, 8 * 1	; new rib
 14871 00009FBF E8C5B80000              	call malloc
 14872 00009FC4 50                      	push rax
 14873 00009FC5 BF28000000              	mov rdi, 8 * 5	; extended env
 14874 00009FCA E8BAB80000              	call malloc
 14875 00009FCF 488B7D10                	mov rdi, ENV
 14876 00009FD3 BE00000000              	mov rsi, 0
 14877 00009FD8 BA01000000              	mov rdx, 1
 14878                                  .L_lambda_simple_env_loop_004e:	; ext_env[i + 1] <-- env[i]
 14879 00009FDD 4883FE04                	cmp rsi, 4
 14880 00009FE1 7410                    	je .L_lambda_simple_env_end_004e
 14881 00009FE3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14882 00009FE7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14883 00009FEB 48FFC6                  	inc rsi
 14884 00009FEE 48FFC2                  	inc rdx
 14885 00009FF1 EBEA                    	jmp .L_lambda_simple_env_loop_004e
 14886                                  .L_lambda_simple_env_end_004e:
 14887 00009FF3 5B                      	pop rbx
 14888 00009FF4 BE00000000              	mov rsi, 0
 14889                                  .L_lambda_simple_params_loop_004e:	; copy params
 14890 00009FF9 4883FE01                	cmp rsi, 1
 14891 00009FFD 740E                    	je .L_lambda_simple_params_end_004e
 14892 00009FFF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14893 0000A004 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14894 0000A008 48FFC6                  	inc rsi
 14895 0000A00B EBEC                    	jmp .L_lambda_simple_params_loop_004e
 14896                                  .L_lambda_simple_params_end_004e:
 14897 0000A00D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14898 0000A010 4889C3                  	mov rbx, rax
 14899 0000A013 58                      	pop rax
 14900 0000A014 C60004                  	mov byte [rax], T_closure
 14901 0000A017 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14902 0000A01B 48C74009[28A00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004e
 14903 0000A023 E99A000000              	jmp .L_lambda_simple_end_004e
 14904                                  .L_lambda_simple_code_004e:	; lambda-simple body
 14905 0000A028 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14906 0000A02E 740B                    	je .L_lambda_simple_arity_check_ok_004e
 14907 0000A030 FF742410                	push qword [rsp + 8 * 2]
 14908 0000A034 6A02                    	push 2
 14909 0000A036 E907B80000              	jmp L_error_incorrect_arity_simple
 14910                                  .L_lambda_simple_arity_check_ok_004e:
 14911 0000A03B C8000000                	enter 0, 0
 14912                                  	; preparing a tail-call
 14913 0000A03F 488B4528                	mov rax, PARAM(1)	; param b
 14914 0000A043 50                      	push rax
 14915 0000A044 488B4520                	mov rax, PARAM(0)	; param a
 14916 0000A048 50                      	push rax
 14917 0000A049 6A02                    	push 2	; arg count
 14918 0000A04B 488B4510                	mov rax, ENV
 14919 0000A04F 488B4008                	mov rax, qword [rax + 8 * 1]
 14920 0000A053 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 14921 0000A056 803804                  	cmp byte [rax], T_closure
 14922 0000A059 0F8581B70000            	jne L_error_non_closure
 14923 0000A05F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14924 0000A062 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14925 0000A065 50                      	push rax
 14926 0000A066 6A01                    	push 1	; arg count
 14927 0000A068 488B0425[99140000]      	mov rax, qword [free_var_104]	; free var not
 14928 0000A070 803805                  	cmp byte [rax], T_undefined
 14929 0000A073 0F84E3B60000            	je L_error_fvar_undefined
 14930 0000A079 803804                  	cmp byte [rax], T_closure
 14931 0000A07C 0F855EB70000            	jne L_error_non_closure
 14932 0000A082 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14933                                  
 14934                                  	; recycling the current frame
 14935 0000A085 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14936 0000A088 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14937 0000A08B B905000000              	mov rcx, 1 + 4
 14938 0000A090 488B5D18                	mov rbx, COUNT
 14939 0000A094 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14940 0000A099 488D55F8                	lea rdx, [rbp - 8 * 1]
 14941                                  .L_tc_recycle_frame_loop_0088:
 14942 0000A09D 4883F900                	cmp rcx, 0
 14943 0000A0A1 7413                    	je .L_tc_recycle_frame_done_0088
 14944 0000A0A3 488B32                  	mov rsi, qword [rdx]
 14945 0000A0A6 488933                  	mov qword [rbx], rsi
 14946 0000A0A9 48FFC9                  	dec rcx
 14947 0000A0AC 4883EB08                	sub rbx, 8 * 1
 14948 0000A0B0 4883EA08                	sub rdx, 8 * 1
 14949 0000A0B4 EBE7                    	jmp .L_tc_recycle_frame_loop_0088
 14950                                  .L_tc_recycle_frame_done_0088:
 14951 0000A0B6 488D6308                	lea rsp, [rbx + 8 * 1]
 14952 0000A0BA 5D                      	pop rbp	; the proc will restore it!
 14953 0000A0BB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14954 0000A0BE C9                      	leave
 14955 0000A0BF C22000                  	ret AND_KILL_FRAME(2)
 14956                                  .L_lambda_simple_end_004e:	; new closure is in rax
 14957 0000A0C2 50                      	push rax
 14958 0000A0C3 6A01                    	push 1	; arg count
 14959 0000A0C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14960 0000A0CA E8BAB70000              	call malloc
 14961 0000A0CF 50                      	push rax
 14962 0000A0D0 BF08000000              	mov rdi, 8 * 1	; new rib
 14963 0000A0D5 E8AFB70000              	call malloc
 14964 0000A0DA 50                      	push rax
 14965 0000A0DB BF28000000              	mov rdi, 8 * 5	; extended env
 14966 0000A0E0 E8A4B70000              	call malloc
 14967 0000A0E5 488B7D10                	mov rdi, ENV
 14968 0000A0E9 BE00000000              	mov rsi, 0
 14969 0000A0EE BA01000000              	mov rdx, 1
 14970                                  .L_lambda_simple_env_loop_004f:	; ext_env[i + 1] <-- env[i]
 14971 0000A0F3 4883FE04                	cmp rsi, 4
 14972 0000A0F7 7410                    	je .L_lambda_simple_env_end_004f
 14973 0000A0F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14974 0000A0FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14975 0000A101 48FFC6                  	inc rsi
 14976 0000A104 48FFC2                  	inc rdx
 14977 0000A107 EBEA                    	jmp .L_lambda_simple_env_loop_004f
 14978                                  .L_lambda_simple_env_end_004f:
 14979 0000A109 5B                      	pop rbx
 14980 0000A10A BE00000000              	mov rsi, 0
 14981                                  .L_lambda_simple_params_loop_004f:	; copy params
 14982 0000A10F 4883FE01                	cmp rsi, 1
 14983 0000A113 740E                    	je .L_lambda_simple_params_end_004f
 14984 0000A115 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14985 0000A11A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14986 0000A11E 48FFC6                  	inc rsi
 14987 0000A121 EBEC                    	jmp .L_lambda_simple_params_loop_004f
 14988                                  .L_lambda_simple_params_end_004f:
 14989 0000A123 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14990 0000A126 4889C3                  	mov rbx, rax
 14991 0000A129 58                      	pop rax
 14992 0000A12A C60004                  	mov byte [rax], T_closure
 14993 0000A12D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14994 0000A131 48C74009[3EA10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004f
 14995 0000A139 E9010B0000              	jmp .L_lambda_simple_end_004f
 14996                                  .L_lambda_simple_code_004f:	; lambda-simple body
 14997 0000A13E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14998 0000A144 740B                    	je .L_lambda_simple_arity_check_ok_004f
 14999 0000A146 FF742410                	push qword [rsp + 8 * 2]
 15000 0000A14A 6A01                    	push 1
 15001 0000A14C E9F1B60000              	jmp L_error_incorrect_arity_simple
 15002                                  .L_lambda_simple_arity_check_ok_004f:
 15003 0000A151 C8000000                	enter 0, 0
 15004                                  	; preparing a tail-call
 15005 0000A155 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15006 0000A15A E82AB70000              	call malloc
 15007 0000A15F 50                      	push rax
 15008 0000A160 BF08000000              	mov rdi, 8 * 1	; new rib
 15009 0000A165 E81FB70000              	call malloc
 15010 0000A16A 50                      	push rax
 15011 0000A16B BF30000000              	mov rdi, 8 * 6	; extended env
 15012 0000A170 E814B70000              	call malloc
 15013 0000A175 488B7D10                	mov rdi, ENV
 15014 0000A179 BE00000000              	mov rsi, 0
 15015 0000A17E BA01000000              	mov rdx, 1
 15016                                  .L_lambda_simple_env_loop_0050:	; ext_env[i + 1] <-- env[i]
 15017 0000A183 4883FE05                	cmp rsi, 5
 15018 0000A187 7410                    	je .L_lambda_simple_env_end_0050
 15019 0000A189 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15020 0000A18D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15021 0000A191 48FFC6                  	inc rsi
 15022 0000A194 48FFC2                  	inc rdx
 15023 0000A197 EBEA                    	jmp .L_lambda_simple_env_loop_0050
 15024                                  .L_lambda_simple_env_end_0050:
 15025 0000A199 5B                      	pop rbx
 15026 0000A19A BE00000000              	mov rsi, 0
 15027                                  .L_lambda_simple_params_loop_0050:	; copy params
 15028 0000A19F 4883FE01                	cmp rsi, 1
 15029 0000A1A3 740E                    	je .L_lambda_simple_params_end_0050
 15030 0000A1A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15031 0000A1AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15032 0000A1AE 48FFC6                  	inc rsi
 15033 0000A1B1 EBEC                    	jmp .L_lambda_simple_params_loop_0050
 15034                                  .L_lambda_simple_params_end_0050:
 15035 0000A1B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15036 0000A1B6 4889C3                  	mov rbx, rax
 15037 0000A1B9 58                      	pop rax
 15038 0000A1BA C60004                  	mov byte [rax], T_closure
 15039 0000A1BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15040 0000A1C1 48C74009[CBA10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0050
 15041 0000A1C9 EB77                    	jmp .L_lambda_simple_end_0050
 15042                                  .L_lambda_simple_code_0050:	; lambda-simple body
 15043 0000A1CB 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15044 0000A1D1 740B                    	je .L_lambda_simple_arity_check_ok_0050
 15045 0000A1D3 FF742410                	push qword [rsp + 8 * 2]
 15046 0000A1D7 6A02                    	push 2
 15047 0000A1D9 E964B60000              	jmp L_error_incorrect_arity_simple
 15048                                  .L_lambda_simple_arity_check_ok_0050:
 15049 0000A1DE C8000000                	enter 0, 0
 15050                                  	; preparing a tail-call
 15051 0000A1E2 488B4520                	mov rax, PARAM(0)	; param a
 15052 0000A1E6 50                      	push rax
 15053 0000A1E7 488B4528                	mov rax, PARAM(1)	; param b
 15054 0000A1EB 50                      	push rax
 15055 0000A1EC 6A02                    	push 2	; arg count
 15056 0000A1EE 488B4510                	mov rax, ENV
 15057 0000A1F2 488B4010                	mov rax, qword [rax + 8 * 2]
 15058 0000A1F6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 15059 0000A1F9 803804                  	cmp byte [rax], T_closure
 15060 0000A1FC 0F85DEB50000            	jne L_error_non_closure
 15061 0000A202 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15062                                  
 15063                                  	; recycling the current frame
 15064 0000A205 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15065 0000A208 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15066 0000A20B B906000000              	mov rcx, 2 + 4
 15067 0000A210 488B5D18                	mov rbx, COUNT
 15068 0000A214 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15069 0000A219 488D55F8                	lea rdx, [rbp - 8 * 1]
 15070                                  .L_tc_recycle_frame_loop_0089:
 15071 0000A21D 4883F900                	cmp rcx, 0
 15072 0000A221 7413                    	je .L_tc_recycle_frame_done_0089
 15073 0000A223 488B32                  	mov rsi, qword [rdx]
 15074 0000A226 488933                  	mov qword [rbx], rsi
 15075 0000A229 48FFC9                  	dec rcx
 15076 0000A22C 4883EB08                	sub rbx, 8 * 1
 15077 0000A230 4883EA08                	sub rdx, 8 * 1
 15078 0000A234 EBE7                    	jmp .L_tc_recycle_frame_loop_0089
 15079                                  .L_tc_recycle_frame_done_0089:
 15080 0000A236 488D6308                	lea rsp, [rbx + 8 * 1]
 15081 0000A23A 5D                      	pop rbp	; the proc will restore it!
 15082 0000A23B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15083 0000A23E C9                      	leave
 15084 0000A23F C22000                  	ret AND_KILL_FRAME(2)
 15085                                  .L_lambda_simple_end_0050:	; new closure is in rax
 15086 0000A242 50                      	push rax
 15087 0000A243 6A01                    	push 1	; arg count
 15088 0000A245 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15089 0000A24A E83AB60000              	call malloc
 15090 0000A24F 50                      	push rax
 15091 0000A250 BF08000000              	mov rdi, 8 * 1	; new rib
 15092 0000A255 E82FB60000              	call malloc
 15093 0000A25A 50                      	push rax
 15094 0000A25B BF30000000              	mov rdi, 8 * 6	; extended env
 15095 0000A260 E824B60000              	call malloc
 15096 0000A265 488B7D10                	mov rdi, ENV
 15097 0000A269 BE00000000              	mov rsi, 0
 15098 0000A26E BA01000000              	mov rdx, 1
 15099                                  .L_lambda_simple_env_loop_0051:	; ext_env[i + 1] <-- env[i]
 15100 0000A273 4883FE05                	cmp rsi, 5
 15101 0000A277 7410                    	je .L_lambda_simple_env_end_0051
 15102 0000A279 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15103 0000A27D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15104 0000A281 48FFC6                  	inc rsi
 15105 0000A284 48FFC2                  	inc rdx
 15106 0000A287 EBEA                    	jmp .L_lambda_simple_env_loop_0051
 15107                                  .L_lambda_simple_env_end_0051:
 15108 0000A289 5B                      	pop rbx
 15109 0000A28A BE00000000              	mov rsi, 0
 15110                                  .L_lambda_simple_params_loop_0051:	; copy params
 15111 0000A28F 4883FE01                	cmp rsi, 1
 15112 0000A293 740E                    	je .L_lambda_simple_params_end_0051
 15113 0000A295 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15114 0000A29A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15115 0000A29E 48FFC6                  	inc rsi
 15116 0000A2A1 EBEC                    	jmp .L_lambda_simple_params_loop_0051
 15117                                  .L_lambda_simple_params_end_0051:
 15118 0000A2A3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15119 0000A2A6 4889C3                  	mov rbx, rax
 15120 0000A2A9 58                      	pop rax
 15121 0000A2AA C60004                  	mov byte [rax], T_closure
 15122 0000A2AD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15123 0000A2B1 48C74009[BEA20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0051
 15124 0000A2B9 E938090000              	jmp .L_lambda_simple_end_0051
 15125                                  .L_lambda_simple_code_0051:	; lambda-simple body
 15126 0000A2BE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15127 0000A2C4 740B                    	je .L_lambda_simple_arity_check_ok_0051
 15128 0000A2C6 FF742410                	push qword [rsp + 8 * 2]
 15129 0000A2CA 6A01                    	push 1
 15130 0000A2CC E971B50000              	jmp L_error_incorrect_arity_simple
 15131                                  .L_lambda_simple_arity_check_ok_0051:
 15132 0000A2D1 C8000000                	enter 0, 0
 15133                                  	; preparing a tail-call
 15134 0000A2D5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15135 0000A2DA E8AAB50000              	call malloc
 15136 0000A2DF 50                      	push rax
 15137 0000A2E0 BF08000000              	mov rdi, 8 * 1	; new rib
 15138 0000A2E5 E89FB50000              	call malloc
 15139 0000A2EA 50                      	push rax
 15140 0000A2EB BF38000000              	mov rdi, 8 * 7	; extended env
 15141 0000A2F0 E894B50000              	call malloc
 15142 0000A2F5 488B7D10                	mov rdi, ENV
 15143 0000A2F9 BE00000000              	mov rsi, 0
 15144 0000A2FE BA01000000              	mov rdx, 1
 15145                                  .L_lambda_simple_env_loop_0052:	; ext_env[i + 1] <-- env[i]
 15146 0000A303 4883FE06                	cmp rsi, 6
 15147 0000A307 7410                    	je .L_lambda_simple_env_end_0052
 15148 0000A309 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15149 0000A30D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15150 0000A311 48FFC6                  	inc rsi
 15151 0000A314 48FFC2                  	inc rdx
 15152 0000A317 EBEA                    	jmp .L_lambda_simple_env_loop_0052
 15153                                  .L_lambda_simple_env_end_0052:
 15154 0000A319 5B                      	pop rbx
 15155 0000A31A BE00000000              	mov rsi, 0
 15156                                  .L_lambda_simple_params_loop_0052:	; copy params
 15157 0000A31F 4883FE01                	cmp rsi, 1
 15158 0000A323 740E                    	je .L_lambda_simple_params_end_0052
 15159 0000A325 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15160 0000A32A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15161 0000A32E 48FFC6                  	inc rsi
 15162 0000A331 EBEC                    	jmp .L_lambda_simple_params_loop_0052
 15163                                  .L_lambda_simple_params_end_0052:
 15164 0000A333 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15165 0000A336 4889C3                  	mov rbx, rax
 15166 0000A339 58                      	pop rax
 15167 0000A33A C60004                  	mov byte [rax], T_closure
 15168 0000A33D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15169 0000A341 48C74009[4EA30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0052
 15170 0000A349 E999000000              	jmp .L_lambda_simple_end_0052
 15171                                  .L_lambda_simple_code_0052:	; lambda-simple body
 15172 0000A34E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15173 0000A354 740B                    	je .L_lambda_simple_arity_check_ok_0052
 15174 0000A356 FF742410                	push qword [rsp + 8 * 2]
 15175 0000A35A 6A02                    	push 2
 15176 0000A35C E9E1B40000              	jmp L_error_incorrect_arity_simple
 15177                                  .L_lambda_simple_arity_check_ok_0052:
 15178 0000A361 C8000000                	enter 0, 0
 15179                                  	; preparing a tail-call
 15180 0000A365 488B4528                	mov rax, PARAM(1)	; param b
 15181 0000A369 50                      	push rax
 15182 0000A36A 488B4520                	mov rax, PARAM(0)	; param a
 15183 0000A36E 50                      	push rax
 15184 0000A36F 6A02                    	push 2	; arg count
 15185 0000A371 488B4510                	mov rax, ENV
 15186 0000A375 488B00                  	mov rax, qword [rax + 8 * 0]
 15187 0000A378 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 15188 0000A37B 803804                  	cmp byte [rax], T_closure
 15189 0000A37E 0F855CB40000            	jne L_error_non_closure
 15190 0000A384 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15191 0000A387 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15192 0000A38A 50                      	push rax
 15193 0000A38B 6A01                    	push 1	; arg count
 15194 0000A38D 488B0425[99140000]      	mov rax, qword [free_var_104]	; free var not
 15195 0000A395 803805                  	cmp byte [rax], T_undefined
 15196 0000A398 0F84BEB30000            	je L_error_fvar_undefined
 15197 0000A39E 803804                  	cmp byte [rax], T_closure
 15198 0000A3A1 0F8539B40000            	jne L_error_non_closure
 15199 0000A3A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15200                                  
 15201                                  	; recycling the current frame
 15202 0000A3AA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15203 0000A3AD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15204 0000A3B0 B905000000              	mov rcx, 1 + 4
 15205 0000A3B5 488B5D18                	mov rbx, COUNT
 15206 0000A3B9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15207 0000A3BE 488D55F8                	lea rdx, [rbp - 8 * 1]
 15208                                  .L_tc_recycle_frame_loop_008a:
 15209 0000A3C2 4883F900                	cmp rcx, 0
 15210 0000A3C6 7413                    	je .L_tc_recycle_frame_done_008a
 15211 0000A3C8 488B32                  	mov rsi, qword [rdx]
 15212 0000A3CB 488933                  	mov qword [rbx], rsi
 15213 0000A3CE 48FFC9                  	dec rcx
 15214 0000A3D1 4883EB08                	sub rbx, 8 * 1
 15215 0000A3D5 4883EA08                	sub rdx, 8 * 1
 15216 0000A3D9 EBE7                    	jmp .L_tc_recycle_frame_loop_008a
 15217                                  .L_tc_recycle_frame_done_008a:
 15218 0000A3DB 488D6308                	lea rsp, [rbx + 8 * 1]
 15219 0000A3DF 5D                      	pop rbp	; the proc will restore it!
 15220 0000A3E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15221 0000A3E3 C9                      	leave
 15222 0000A3E4 C22000                  	ret AND_KILL_FRAME(2)
 15223                                  .L_lambda_simple_end_0052:	; new closure is in rax
 15224 0000A3E7 50                      	push rax
 15225 0000A3E8 6A01                    	push 1	; arg count
 15226 0000A3EA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15227 0000A3EF E895B40000              	call malloc
 15228 0000A3F4 50                      	push rax
 15229 0000A3F5 BF08000000              	mov rdi, 8 * 1	; new rib
 15230 0000A3FA E88AB40000              	call malloc
 15231 0000A3FF 50                      	push rax
 15232 0000A400 BF38000000              	mov rdi, 8 * 7	; extended env
 15233 0000A405 E87FB40000              	call malloc
 15234 0000A40A 488B7D10                	mov rdi, ENV
 15235 0000A40E BE00000000              	mov rsi, 0
 15236 0000A413 BA01000000              	mov rdx, 1
 15237                                  .L_lambda_simple_env_loop_0053:	; ext_env[i + 1] <-- env[i]
 15238 0000A418 4883FE06                	cmp rsi, 6
 15239 0000A41C 7410                    	je .L_lambda_simple_env_end_0053
 15240 0000A41E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15241 0000A422 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15242 0000A426 48FFC6                  	inc rsi
 15243 0000A429 48FFC2                  	inc rdx
 15244 0000A42C EBEA                    	jmp .L_lambda_simple_env_loop_0053
 15245                                  .L_lambda_simple_env_end_0053:
 15246 0000A42E 5B                      	pop rbx
 15247 0000A42F BE00000000              	mov rsi, 0
 15248                                  .L_lambda_simple_params_loop_0053:	; copy params
 15249 0000A434 4883FE01                	cmp rsi, 1
 15250 0000A438 740E                    	je .L_lambda_simple_params_end_0053
 15251 0000A43A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15252 0000A43F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15253 0000A443 48FFC6                  	inc rsi
 15254 0000A446 EBEC                    	jmp .L_lambda_simple_params_loop_0053
 15255                                  .L_lambda_simple_params_end_0053:
 15256 0000A448 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15257 0000A44B 4889C3                  	mov rbx, rax
 15258 0000A44E 58                      	pop rax
 15259 0000A44F C60004                  	mov byte [rax], T_closure
 15260 0000A452 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15261 0000A456 48C74009[63A40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0053
 15262 0000A45E E94A070000              	jmp .L_lambda_simple_end_0053
 15263                                  .L_lambda_simple_code_0053:	; lambda-simple body
 15264 0000A463 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15265 0000A469 740B                    	je .L_lambda_simple_arity_check_ok_0053
 15266 0000A46B FF742410                	push qword [rsp + 8 * 2]
 15267 0000A46F 6A01                    	push 1
 15268 0000A471 E9CCB30000              	jmp L_error_incorrect_arity_simple
 15269                                  .L_lambda_simple_arity_check_ok_0053:
 15270 0000A476 C8000000                	enter 0, 0
 15271                                  	; preparing a tail-call
 15272 0000A47A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15273 0000A47F E805B40000              	call malloc
 15274 0000A484 50                      	push rax
 15275 0000A485 BF08000000              	mov rdi, 8 * 1	; new rib
 15276 0000A48A E8FAB30000              	call malloc
 15277 0000A48F 50                      	push rax
 15278 0000A490 BF40000000              	mov rdi, 8 * 8	; extended env
 15279 0000A495 E8EFB30000              	call malloc
 15280 0000A49A 488B7D10                	mov rdi, ENV
 15281 0000A49E BE00000000              	mov rsi, 0
 15282 0000A4A3 BA01000000              	mov rdx, 1
 15283                                  .L_lambda_simple_env_loop_0054:	; ext_env[i + 1] <-- env[i]
 15284 0000A4A8 4883FE07                	cmp rsi, 7
 15285 0000A4AC 7410                    	je .L_lambda_simple_env_end_0054
 15286 0000A4AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15287 0000A4B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15288 0000A4B6 48FFC6                  	inc rsi
 15289 0000A4B9 48FFC2                  	inc rdx
 15290 0000A4BC EBEA                    	jmp .L_lambda_simple_env_loop_0054
 15291                                  .L_lambda_simple_env_end_0054:
 15292 0000A4BE 5B                      	pop rbx
 15293 0000A4BF BE00000000              	mov rsi, 0
 15294                                  .L_lambda_simple_params_loop_0054:	; copy params
 15295 0000A4C4 4883FE01                	cmp rsi, 1
 15296 0000A4C8 740E                    	je .L_lambda_simple_params_end_0054
 15297 0000A4CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15298 0000A4CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15299 0000A4D3 48FFC6                  	inc rsi
 15300 0000A4D6 EBEC                    	jmp .L_lambda_simple_params_loop_0054
 15301                                  .L_lambda_simple_params_end_0054:
 15302 0000A4D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15303 0000A4DB 4889C3                  	mov rbx, rax
 15304 0000A4DE 58                      	pop rax
 15305 0000A4DF C60004                  	mov byte [rax], T_closure
 15306 0000A4E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15307 0000A4E6 48C74009[F3A40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0054
 15308 0000A4EE E9AF040000              	jmp .L_lambda_simple_end_0054
 15309                                  .L_lambda_simple_code_0054:	; lambda-simple body
 15310 0000A4F3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15311 0000A4F9 740B                    	je .L_lambda_simple_arity_check_ok_0054
 15312 0000A4FB FF742410                	push qword [rsp + 8 * 2]
 15313 0000A4FF 6A01                    	push 1
 15314 0000A501 E93CB30000              	jmp L_error_incorrect_arity_simple
 15315                                  .L_lambda_simple_arity_check_ok_0054:
 15316 0000A506 C8000000                	enter 0, 0
 15317                                  	; preparing a tail-call
 15318 0000A50A 48B8-                   	mov rax, L_constants + 1881
 15318 0000A50C [5907000000000000] 
 15319 0000A514 50                      	push rax
 15320 0000A515 6A01                    	push 1	; arg count
 15321 0000A517 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15322 0000A51C E868B30000              	call malloc
 15323 0000A521 50                      	push rax
 15324 0000A522 BF08000000              	mov rdi, 8 * 1	; new rib
 15325 0000A527 E85DB30000              	call malloc
 15326 0000A52C 50                      	push rax
 15327 0000A52D BF48000000              	mov rdi, 8 * 9	; extended env
 15328 0000A532 E852B30000              	call malloc
 15329 0000A537 488B7D10                	mov rdi, ENV
 15330 0000A53B BE00000000              	mov rsi, 0
 15331 0000A540 BA01000000              	mov rdx, 1
 15332                                  .L_lambda_simple_env_loop_0055:	; ext_env[i + 1] <-- env[i]
 15333 0000A545 4883FE08                	cmp rsi, 8
 15334 0000A549 7410                    	je .L_lambda_simple_env_end_0055
 15335 0000A54B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15336 0000A54F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15337 0000A553 48FFC6                  	inc rsi
 15338 0000A556 48FFC2                  	inc rdx
 15339 0000A559 EBEA                    	jmp .L_lambda_simple_env_loop_0055
 15340                                  .L_lambda_simple_env_end_0055:
 15341 0000A55B 5B                      	pop rbx
 15342 0000A55C BE00000000              	mov rsi, 0
 15343                                  .L_lambda_simple_params_loop_0055:	; copy params
 15344 0000A561 4883FE01                	cmp rsi, 1
 15345 0000A565 740E                    	je .L_lambda_simple_params_end_0055
 15346 0000A567 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15347 0000A56C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15348 0000A570 48FFC6                  	inc rsi
 15349 0000A573 EBEC                    	jmp .L_lambda_simple_params_loop_0055
 15350                                  .L_lambda_simple_params_end_0055:
 15351 0000A575 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15352 0000A578 4889C3                  	mov rbx, rax
 15353 0000A57B 58                      	pop rax
 15354 0000A57C C60004                  	mov byte [rax], T_closure
 15355 0000A57F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15356 0000A583 48C74009[90A50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0055
 15357 0000A58B E9C9030000              	jmp .L_lambda_simple_end_0055
 15358                                  .L_lambda_simple_code_0055:	; lambda-simple body
 15359 0000A590 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15360 0000A596 740B                    	je .L_lambda_simple_arity_check_ok_0055
 15361 0000A598 FF742410                	push qword [rsp + 8 * 2]
 15362 0000A59C 6A01                    	push 1
 15363 0000A59E E99FB20000              	jmp L_error_incorrect_arity_simple
 15364                                  .L_lambda_simple_arity_check_ok_0055:
 15365 0000A5A3 C8000000                	enter 0, 0
 15366                                  
 15367 0000A5A7 BF08000000              	mov rdi, 8
 15368 0000A5AC E8D8B20000              	call malloc
 15369 0000A5B1 488B5D20                	mov rbx, PARAM(0)	; param run
 15370 0000A5B5 488918                  	mov [rax], rbx	; box run
 15371 0000A5B8 48894520                	mov PARAM(0), rax	;replace param run with box
 15372 0000A5BC 48B8-                   	mov rax, sob_void
 15372 0000A5BE [0000000000000000] 
 15373                                  
 15374 0000A5C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15375 0000A5CB E8B9B20000              	call malloc
 15376 0000A5D0 50                      	push rax
 15377 0000A5D1 BF08000000              	mov rdi, 8 * 1	; new rib
 15378 0000A5D6 E8AEB20000              	call malloc
 15379 0000A5DB 50                      	push rax
 15380 0000A5DC BF50000000              	mov rdi, 8 * 10	; extended env
 15381 0000A5E1 E8A3B20000              	call malloc
 15382 0000A5E6 488B7D10                	mov rdi, ENV
 15383 0000A5EA BE00000000              	mov rsi, 0
 15384 0000A5EF BA01000000              	mov rdx, 1
 15385                                  .L_lambda_simple_env_loop_0056:	; ext_env[i + 1] <-- env[i]
 15386 0000A5F4 4883FE09                	cmp rsi, 9
 15387 0000A5F8 7410                    	je .L_lambda_simple_env_end_0056
 15388 0000A5FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15389 0000A5FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15390 0000A602 48FFC6                  	inc rsi
 15391 0000A605 48FFC2                  	inc rdx
 15392 0000A608 EBEA                    	jmp .L_lambda_simple_env_loop_0056
 15393                                  .L_lambda_simple_env_end_0056:
 15394 0000A60A 5B                      	pop rbx
 15395 0000A60B BE00000000              	mov rsi, 0
 15396                                  .L_lambda_simple_params_loop_0056:	; copy params
 15397 0000A610 4883FE01                	cmp rsi, 1
 15398 0000A614 740E                    	je .L_lambda_simple_params_end_0056
 15399 0000A616 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15400 0000A61B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15401 0000A61F 48FFC6                  	inc rsi
 15402 0000A622 EBEC                    	jmp .L_lambda_simple_params_loop_0056
 15403                                  .L_lambda_simple_params_end_0056:
 15404 0000A624 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15405 0000A627 4889C3                  	mov rbx, rax
 15406 0000A62A 58                      	pop rax
 15407 0000A62B C60004                  	mov byte [rax], T_closure
 15408 0000A62E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15409 0000A632 48C74009[3FA60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0056
 15410 0000A63A E953010000              	jmp .L_lambda_simple_end_0056
 15411                                  .L_lambda_simple_code_0056:	; lambda-simple body
 15412 0000A63F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15413 0000A645 740B                    	je .L_lambda_simple_arity_check_ok_0056
 15414 0000A647 FF742410                	push qword [rsp + 8 * 2]
 15415 0000A64B 6A02                    	push 2
 15416 0000A64D E9F0B10000              	jmp L_error_incorrect_arity_simple
 15417                                  .L_lambda_simple_arity_check_ok_0056:
 15418 0000A652 C8000000                	enter 0, 0
 15419 0000A656 488B4528                	mov rax, PARAM(1)	; param s
 15420 0000A65A 50                      	push rax
 15421 0000A65B 6A01                    	push 1	; arg count
 15422 0000A65D 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 15423 0000A665 803805                  	cmp byte [rax], T_undefined
 15424 0000A668 0F84EEB00000            	je L_error_fvar_undefined
 15425 0000A66E 803804                  	cmp byte [rax], T_closure
 15426 0000A671 0F8569B10000            	jne L_error_non_closure
 15427 0000A677 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15428 0000A67A FF5009                  	call SOB_CLOSURE_CODE(rax)
 15429 0000A67D 483D[02000000]          	cmp rax, sob_boolean_false
 15430 0000A683 0F8505010000            	jne .L_or_end_0005
 15431 0000A689 488B4528                	mov rax, PARAM(1)	; param s
 15432 0000A68D 50                      	push rax
 15433 0000A68E 6A01                    	push 1	; arg count
 15434 0000A690 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 15435 0000A698 803805                  	cmp byte [rax], T_undefined
 15436 0000A69B 0F84BBB00000            	je L_error_fvar_undefined
 15437 0000A6A1 803804                  	cmp byte [rax], T_closure
 15438 0000A6A4 0F8536B10000            	jne L_error_non_closure
 15439 0000A6AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 15440 0000A6AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 15441 0000A6B0 50                      	push rax
 15442 0000A6B1 488B4520                	mov rax, PARAM(0)	; param a
 15443 0000A6B5 50                      	push rax
 15444 0000A6B6 6A02                    	push 2	; arg count
 15445 0000A6B8 488B4510                	mov rax, ENV
 15446 0000A6BC 488B4008                	mov rax, qword [rax + 8 * 1]
 15447 0000A6C0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-ordering
 15448 0000A6C3 803804                  	cmp byte [rax], T_closure
 15449 0000A6C6 0F8514B10000            	jne L_error_non_closure
 15450 0000A6CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 15451 0000A6CF FF5009                  	call SOB_CLOSURE_CODE(rax)
 15452                                  
 15453 0000A6D2 483D[02000000]          	cmp rax, sob_boolean_false
 15454 0000A6D8 0F84A6000000            	je .L_if_else_004e
 15455                                  	; preparing a tail-call
 15456 0000A6DE 488B4528                	mov rax, PARAM(1)	; param s
 15457 0000A6E2 50                      	push rax
 15458 0000A6E3 6A01                    	push 1	; arg count
 15459 0000A6E5 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 15460 0000A6ED 803805                  	cmp byte [rax], T_undefined
 15461 0000A6F0 0F8466B00000            	je L_error_fvar_undefined
 15462 0000A6F6 803804                  	cmp byte [rax], T_closure
 15463 0000A6F9 0F85E1B00000            	jne L_error_non_closure
 15464 0000A6FF FF7001                  	push SOB_CLOSURE_ENV(rax)
 15465 0000A702 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15466 0000A705 50                      	push rax
 15467 0000A706 488B4528                	mov rax, PARAM(1)	; param s
 15468 0000A70A 50                      	push rax
 15469 0000A70B 6A01                    	push 1	; arg count
 15470 0000A70D 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 15471 0000A715 803805                  	cmp byte [rax], T_undefined
 15472 0000A718 0F843EB00000            	je L_error_fvar_undefined
 15473 0000A71E 803804                  	cmp byte [rax], T_closure
 15474 0000A721 0F85B9B00000            	jne L_error_non_closure
 15475 0000A727 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15476 0000A72A FF5009                  	call SOB_CLOSURE_CODE(rax)
 15477 0000A72D 50                      	push rax
 15478 0000A72E 6A02                    	push 2	; arg count
 15479 0000A730 488B4510                	mov rax, ENV
 15480 0000A734 488B00                  	mov rax, qword [rax + 8 * 0]
 15481 0000A737 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 15482 0000A73A 488B00                  	mov rax, qword [rax]
 15483 0000A73D 803804                  	cmp byte [rax], T_closure
 15484 0000A740 0F859AB00000            	jne L_error_non_closure
 15485 0000A746 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15486                                  
 15487                                  	; recycling the current frame
 15488 0000A749 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15489 0000A74C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15490 0000A74F B906000000              	mov rcx, 2 + 4
 15491 0000A754 488B5D18                	mov rbx, COUNT
 15492 0000A758 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15493 0000A75D 488D55F8                	lea rdx, [rbp - 8 * 1]
 15494                                  .L_tc_recycle_frame_loop_008b:
 15495 0000A761 4883F900                	cmp rcx, 0
 15496 0000A765 7413                    	je .L_tc_recycle_frame_done_008b
 15497 0000A767 488B32                  	mov rsi, qword [rdx]
 15498 0000A76A 488933                  	mov qword [rbx], rsi
 15499 0000A76D 48FFC9                  	dec rcx
 15500 0000A770 4883EB08                	sub rbx, 8 * 1
 15501 0000A774 4883EA08                	sub rdx, 8 * 1
 15502 0000A778 EBE7                    	jmp .L_tc_recycle_frame_loop_008b
 15503                                  .L_tc_recycle_frame_done_008b:
 15504 0000A77A 488D6308                	lea rsp, [rbx + 8 * 1]
 15505 0000A77E 5D                      	pop rbp	; the proc will restore it!
 15506 0000A77F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15507                                  
 15508 0000A782 EB0A                    	jmp .L_if_end_004e
 15509                                  
 15510                                  	.L_if_else_004e:
 15511 0000A784 48B8-                   	mov rax, L_constants + 2
 15511 0000A786 [0200000000000000] 
 15512                                  
 15513                                  	.L_if_end_004e:
 15514                                  .L_or_end_0005:
 15515 0000A78E C9                      	leave
 15516 0000A78F C22000                  	ret AND_KILL_FRAME(2)
 15517                                  .L_lambda_simple_end_0056:	; new closure is in rax
 15518                                  
 15519 0000A792 50                      	push rax
 15520 0000A793 488B4520                	mov rax, PARAM(0)	; param run
 15521                                  
 15522 0000A797 8F00                    	pop qword[rax]
 15523 0000A799 48B8-                   	mov rax, sob_void
 15523 0000A79B [0000000000000000] 
 15524                                  
 15525 0000A7A3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15526 0000A7A8 E8DCB00000              	call malloc
 15527 0000A7AD 50                      	push rax
 15528 0000A7AE BF08000000              	mov rdi, 8 * 1	; new rib
 15529 0000A7B3 E8D1B00000              	call malloc
 15530 0000A7B8 50                      	push rax
 15531 0000A7B9 BF50000000              	mov rdi, 8 * 10	; extended env
 15532 0000A7BE E8C6B00000              	call malloc
 15533 0000A7C3 488B7D10                	mov rdi, ENV
 15534 0000A7C7 BE00000000              	mov rsi, 0
 15535 0000A7CC BA01000000              	mov rdx, 1
 15536                                  .L_lambda_opt_env_loop_000e:	; ext_env[i + 1] <-- env[i]
 15537 0000A7D1 4883FE09                	cmp rsi, 9
 15538 0000A7D5 7410                    	je .L_lambda_opt_env_end_000e
 15539 0000A7D7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15540 0000A7DB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15541 0000A7DF 48FFC6                  	inc rsi
 15542 0000A7E2 48FFC2                  	inc rdx
 15543 0000A7E5 EBEA                    	jmp .L_lambda_opt_env_loop_000e
 15544                                  .L_lambda_opt_env_end_000e:
 15545 0000A7E7 5B                      	pop rbx
 15546 0000A7E8 BE00000000              	mov rsi, 0
 15547                                  .L_lambda_opt_params_loop_000e:	; copy params
 15548 0000A7ED 4883FE01                	cmp rsi, 1
 15549 0000A7F1 740E                    	je .L_lambda_opt_params_end_000e
 15550 0000A7F3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15551 0000A7F8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15552 0000A7FC 48FFC6                  	inc rsi
 15553 0000A7FF EBEC                    	jmp .L_lambda_opt_params_loop_000e
 15554                                  .L_lambda_opt_params_end_000e:
 15555 0000A801 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15556 0000A804 4889C3                  	mov rbx, rax
 15557 0000A807 58                      	pop rax
 15558 0000A808 C60004                  	mov byte [rax], T_closure
 15559 0000A80B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15560 0000A80F 48C74009[1CA80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000e
 15561 0000A817 E939010000              	jmp .L_lambda_opt_end_000e
 15562                                  .L_lambda_opt_code_000e:	; lambda-simple body
 15563 0000A81C 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 15564 0000A822 740D                    	je .L_lambda_opt_arity_check_exact_000e ;	 if equal, go to exact arity
 15565 0000A824 7F42                    	jg .L_lambda_opt_arity_check_more_000e ;	 if greater than, go to arity more
 15566 0000A826 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 15567 0000A82A 6A01                     	push 1
 15568 0000A82C E925B00000              	jmp L_error_incorrect_arity_opt
 15569                                  	.L_lambda_opt_arity_check_exact_000e:
 15570 0000A831 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 15571 0000A836 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 15572 0000A83B 4883EC08                	sub rsp, 8
 15573 0000A83F 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 15574                                  	.L_lambda_opt_exact_shifting_loop_000e:
 15575 0000A843 488B5108                	mov rdx, [rcx + 8]
 15576 0000A847 488911                  	mov [rcx], rdx
 15577 0000A84A 4883C108                	add rcx, 8
 15578 0000A84E 4839CB                  	cmp rbx, rcx
 15579 0000A851 75F0                    	jne .L_lambda_opt_exact_shifting_loop_000e
 15580                                  	.L_lambda_opt_exact_shifting_loop_end_000e:
 15581 0000A853 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 15582 0000A85A 4883C001                	add rax, 1 ; 	arg count += 1
 15583 0000A85E 4889442410              	mov qword [rsp + 8 * 2], rax
 15584 0000A863 E987000000              	jmp .L_lambda_opt_stack_adjusted_000e
 15585                                  	.L_lambda_opt_arity_check_more_000e:
 15586 0000A868 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 15586 0000A86A [0100000000000000] 
 15587 0000A872 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 15588 0000A878 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_000e
 15589                                  	.L_lambda_opt_stack_shrink_loop_000e:
 15590 0000A87A BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 15591 0000A87F E805B00000              	call malloc ;	 allocated memory for the optional scheme list
 15592 0000A884 C60021                  	mov byte[rax], T_pair ;	 set type pair
 15593 0000A887 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 15594 0000A88B 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 15595 0000A88E 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 15596 0000A893 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 15597 0000A898 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 15598 0000A89C 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 15599                                  	.L_lambda_opt_more_shifting_loop_000e:
 15600 0000A8A1 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 15601 0000A8A4 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 15602 0000A8A8 4883EB08                	sub rbx, 8 
 15603 0000A8AC 4839DC                  	cmp rsp, rbx
 15604 0000A8AF 7EF0                    	jle .L_lambda_opt_more_shifting_loop_000e
 15605                                  	.L_lambda_opt_more_shifting_loop_end_000e:
 15606 0000A8B1 4883C408                	add rsp, 8 ;	 update rsp
 15607 0000A8B5 488B5C2410              	mov rbx, [rsp + 8 * 2]
 15608 0000A8BA 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 15609 0000A8BE 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 15610 0000A8C3 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15611 0000A8C9 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_000e
 15612                                  	.L_lambda_opt_stack_shrink_loop_exit_000e:
 15613 0000A8CB 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 15614 0000A8D0 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 15615 0000A8D5 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 15616 0000A8DA E8AAAF0000              	call malloc ;	 allocated memory for the optional scheme list
 15617 0000A8DF C60021                  	mov byte[rax], T_pair ;	 set type pair
 15618 0000A8E2 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 15619 0000A8E6 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 15620 0000A8EA 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 15621                                  	.L_lambda_opt_stack_adjusted_000e:
 15622 0000A8EF C8000000                	enter 0, 0
 15623                                  	; preparing a tail-call
 15624 0000A8F3 488B4528                	mov rax, PARAM(1)	; param s
 15625 0000A8F7 50                      	push rax
 15626 0000A8F8 488B4520                	mov rax, PARAM(0)	; param a
 15627 0000A8FC 50                      	push rax
 15628 0000A8FD 6A02                    	push 2	; arg count
 15629 0000A8FF 488B4510                	mov rax, ENV
 15630 0000A903 488B00                  	mov rax, qword [rax + 8 * 0]
 15631 0000A906 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 15632 0000A909 488B00                  	mov rax, qword [rax]
 15633 0000A90C 803804                  	cmp byte [rax], T_closure
 15634 0000A90F 0F85CBAE0000            	jne L_error_non_closure
 15635 0000A915 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15636                                  
 15637                                  	; recycling the current frame
 15638 0000A918 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15639 0000A91B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15640 0000A91E B906000000              	mov rcx, 2 + 4
 15641 0000A923 488B5D18                	mov rbx, COUNT
 15642 0000A927 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15643 0000A92C 488D55F8                	lea rdx, [rbp - 8 * 1]
 15644                                  .L_tc_recycle_frame_loop_008c:
 15645 0000A930 4883F900                	cmp rcx, 0
 15646 0000A934 7413                    	je .L_tc_recycle_frame_done_008c
 15647 0000A936 488B32                  	mov rsi, qword [rdx]
 15648 0000A939 488933                  	mov qword [rbx], rsi
 15649 0000A93C 48FFC9                  	dec rcx
 15650 0000A93F 4883EB08                	sub rbx, 8 * 1
 15651 0000A943 4883EA08                	sub rdx, 8 * 1
 15652 0000A947 EBE7                    	jmp .L_tc_recycle_frame_loop_008c
 15653                                  .L_tc_recycle_frame_done_008c:
 15654 0000A949 488D6308                	lea rsp, [rbx + 8 * 1]
 15655 0000A94D 5D                      	pop rbp	; the proc will restore it!
 15656 0000A94E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15657 0000A951 C9                      	leave
 15658 0000A952 C22000                  	ret AND_KILL_FRAME(2)
 15659                                  .L_lambda_opt_end_000e:	; new closure is in rax
 15660 0000A955 C9                      	leave
 15661 0000A956 C21800                  	ret AND_KILL_FRAME(1)
 15662                                  .L_lambda_simple_end_0055:	; new closure is in rax
 15663 0000A959 803804                  	cmp byte [rax], T_closure
 15664 0000A95C 0F857EAE0000            	jne L_error_non_closure
 15665 0000A962 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15666                                  
 15667                                  	; recycling the current frame
 15668 0000A965 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15669 0000A968 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15670 0000A96B B905000000              	mov rcx, 1 + 4
 15671 0000A970 488B5D18                	mov rbx, COUNT
 15672 0000A974 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15673 0000A979 488D55F8                	lea rdx, [rbp - 8 * 1]
 15674                                  .L_tc_recycle_frame_loop_008d:
 15675 0000A97D 4883F900                	cmp rcx, 0
 15676 0000A981 7413                    	je .L_tc_recycle_frame_done_008d
 15677 0000A983 488B32                  	mov rsi, qword [rdx]
 15678 0000A986 488933                  	mov qword [rbx], rsi
 15679 0000A989 48FFC9                  	dec rcx
 15680 0000A98C 4883EB08                	sub rbx, 8 * 1
 15681 0000A990 4883EA08                	sub rdx, 8 * 1
 15682 0000A994 EBE7                    	jmp .L_tc_recycle_frame_loop_008d
 15683                                  .L_tc_recycle_frame_done_008d:
 15684 0000A996 488D6308                	lea rsp, [rbx + 8 * 1]
 15685 0000A99A 5D                      	pop rbp	; the proc will restore it!
 15686 0000A99B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15687 0000A99E C9                      	leave
 15688 0000A99F C21800                  	ret AND_KILL_FRAME(1)
 15689                                  .L_lambda_simple_end_0054:	; new closure is in rax
 15690 0000A9A2 50                      	push rax
 15691 0000A9A3 6A01                    	push 1	; arg count
 15692 0000A9A5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15693 0000A9AA E8DAAE0000              	call malloc
 15694 0000A9AF 50                      	push rax
 15695 0000A9B0 BF08000000              	mov rdi, 8 * 1	; new rib
 15696 0000A9B5 E8CFAE0000              	call malloc
 15697 0000A9BA 50                      	push rax
 15698 0000A9BB BF40000000              	mov rdi, 8 * 8	; extended env
 15699 0000A9C0 E8C4AE0000              	call malloc
 15700 0000A9C5 488B7D10                	mov rdi, ENV
 15701 0000A9C9 BE00000000              	mov rsi, 0
 15702 0000A9CE BA01000000              	mov rdx, 1
 15703                                  .L_lambda_simple_env_loop_0057:	; ext_env[i + 1] <-- env[i]
 15704 0000A9D3 4883FE07                	cmp rsi, 7
 15705 0000A9D7 7410                    	je .L_lambda_simple_env_end_0057
 15706 0000A9D9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15707 0000A9DD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15708 0000A9E1 48FFC6                  	inc rsi
 15709 0000A9E4 48FFC2                  	inc rdx
 15710 0000A9E7 EBEA                    	jmp .L_lambda_simple_env_loop_0057
 15711                                  .L_lambda_simple_env_end_0057:
 15712 0000A9E9 5B                      	pop rbx
 15713 0000A9EA BE00000000              	mov rsi, 0
 15714                                  .L_lambda_simple_params_loop_0057:	; copy params
 15715 0000A9EF 4883FE01                	cmp rsi, 1
 15716 0000A9F3 740E                    	je .L_lambda_simple_params_end_0057
 15717 0000A9F5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15718 0000A9FA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15719 0000A9FE 48FFC6                  	inc rsi
 15720 0000AA01 EBEC                    	jmp .L_lambda_simple_params_loop_0057
 15721                                  .L_lambda_simple_params_end_0057:
 15722 0000AA03 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15723 0000AA06 4889C3                  	mov rbx, rax
 15724 0000AA09 58                      	pop rax
 15725 0000AA0A C60004                  	mov byte [rax], T_closure
 15726 0000AA0D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15727 0000AA11 48C74009[1EAA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0057
 15728 0000AA19 E946010000              	jmp .L_lambda_simple_end_0057
 15729                                  .L_lambda_simple_code_0057:	; lambda-simple body
 15730 0000AA1E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15731 0000AA24 740B                    	je .L_lambda_simple_arity_check_ok_0057
 15732 0000AA26 FF742410                	push qword [rsp + 8 * 2]
 15733 0000AA2A 6A01                    	push 1
 15734 0000AA2C E911AE0000              	jmp L_error_incorrect_arity_simple
 15735                                  .L_lambda_simple_arity_check_ok_0057:
 15736 0000AA31 C8000000                	enter 0, 0
 15737 0000AA35 488B4510                	mov rax, ENV
 15738 0000AA39 488B4020                	mov rax, qword [rax + 8 * 4]
 15739 0000AA3D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 15740 0000AA40 50                      	push rax
 15741 0000AA41 6A01                    	push 1	; arg count
 15742 0000AA43 488B4520                	mov rax, PARAM(0)	; param make-run
 15743 0000AA47 803804                  	cmp byte [rax], T_closure
 15744 0000AA4A 0F8590AD0000            	jne L_error_non_closure
 15745 0000AA50 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15746 0000AA53 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15747 0000AA56 48890425[CB150000]      	mov qword [free_var_122], rax	; free var <
 15748 0000AA5E 803805                  	cmp byte [rax], T_undefined
 15749 0000AA61 0F84F5AC0000            	je L_error_fvar_undefined
 15750 0000AA67 48B8-                   	mov rax, sob_void
 15750 0000AA69 [0000000000000000] 
 15751                                  
 15752 0000AA71 488B4510                	mov rax, ENV
 15753 0000AA75 488B00                  	mov rax, qword [rax + 8 * 0]
 15754 0000AA78 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<=?
 15755 0000AA7B 50                      	push rax
 15756 0000AA7C 6A01                    	push 1	; arg count
 15757 0000AA7E 488B4520                	mov rax, PARAM(0)	; param make-run
 15758 0000AA82 803804                  	cmp byte [rax], T_closure
 15759 0000AA85 0F8555AD0000            	jne L_error_non_closure
 15760 0000AA8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 15761 0000AA8E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15762 0000AA91 48890425[DC150000]      	mov qword [free_var_123], rax	; free var <=
 15763 0000AA99 803805                  	cmp byte [rax], T_undefined
 15764 0000AA9C 0F84BAAC0000            	je L_error_fvar_undefined
 15765 0000AAA2 48B8-                   	mov rax, sob_void
 15765 0000AAA4 [0000000000000000] 
 15766                                  
 15767 0000AAAC 488B4510                	mov rax, ENV
 15768 0000AAB0 488B4008                	mov rax, qword [rax + 8 * 1]
 15769 0000AAB4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 15770 0000AAB7 50                      	push rax
 15771 0000AAB8 6A01                    	push 1	; arg count
 15772 0000AABA 488B4520                	mov rax, PARAM(0)	; param make-run
 15773 0000AABE 803804                  	cmp byte [rax], T_closure
 15774 0000AAC1 0F8519AD0000            	jne L_error_non_closure
 15775 0000AAC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15776 0000AACA FF5009                  	call SOB_CLOSURE_CODE(rax)
 15777 0000AACD 48890425[ED150000]      	mov qword [free_var_124], rax	; free var >
 15778 0000AAD5 803805                  	cmp byte [rax], T_undefined
 15779 0000AAD8 0F847EAC0000            	je L_error_fvar_undefined
 15780 0000AADE 48B8-                   	mov rax, sob_void
 15780 0000AAE0 [0000000000000000] 
 15781                                  
 15782 0000AAE8 488B4510                	mov rax, ENV
 15783 0000AAEC 488B4010                	mov rax, qword [rax + 8 * 2]
 15784 0000AAF0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>=?
 15785 0000AAF3 50                      	push rax
 15786 0000AAF4 6A01                    	push 1	; arg count
 15787 0000AAF6 488B4520                	mov rax, PARAM(0)	; param make-run
 15788 0000AAFA 803804                  	cmp byte [rax], T_closure
 15789 0000AAFD 0F85DDAC0000            	jne L_error_non_closure
 15790 0000AB03 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15791 0000AB06 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15792 0000AB09 48890425[FE150000]      	mov qword [free_var_125], rax	; free var >=
 15793 0000AB11 803805                  	cmp byte [rax], T_undefined
 15794 0000AB14 0F8442AC0000            	je L_error_fvar_undefined
 15795 0000AB1A 48B8-                   	mov rax, sob_void
 15795 0000AB1C [0000000000000000] 
 15796                                  
 15797 0000AB24 488B4510                	mov rax, ENV
 15798 0000AB28 488B4018                	mov rax, qword [rax + 8 * 3]
 15799 0000AB2C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin=?
 15800 0000AB2F 50                      	push rax
 15801 0000AB30 6A01                    	push 1	; arg count
 15802 0000AB32 488B4520                	mov rax, PARAM(0)	; param make-run
 15803 0000AB36 803804                  	cmp byte [rax], T_closure
 15804 0000AB39 0F85A1AC0000            	jne L_error_non_closure
 15805 0000AB3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 15806 0000AB42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15807 0000AB45 48890425[0F160000]      	mov qword [free_var_126], rax	; free var =
 15808 0000AB4D 803805                  	cmp byte [rax], T_undefined
 15809 0000AB50 0F8406AC0000            	je L_error_fvar_undefined
 15810 0000AB56 48B8-                   	mov rax, sob_void
 15810 0000AB58 [0000000000000000] 
 15811 0000AB60 C9                      	leave
 15812 0000AB61 C21800                  	ret AND_KILL_FRAME(1)
 15813                                  .L_lambda_simple_end_0057:	; new closure is in rax
 15814 0000AB64 803804                  	cmp byte [rax], T_closure
 15815 0000AB67 0F8573AC0000            	jne L_error_non_closure
 15816 0000AB6D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15817                                  
 15818                                  	; recycling the current frame
 15819 0000AB70 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15820 0000AB73 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15821 0000AB76 B905000000              	mov rcx, 1 + 4
 15822 0000AB7B 488B5D18                	mov rbx, COUNT
 15823 0000AB7F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15824 0000AB84 488D55F8                	lea rdx, [rbp - 8 * 1]
 15825                                  .L_tc_recycle_frame_loop_008e:
 15826 0000AB88 4883F900                	cmp rcx, 0
 15827 0000AB8C 7413                    	je .L_tc_recycle_frame_done_008e
 15828 0000AB8E 488B32                  	mov rsi, qword [rdx]
 15829 0000AB91 488933                  	mov qword [rbx], rsi
 15830 0000AB94 48FFC9                  	dec rcx
 15831 0000AB97 4883EB08                	sub rbx, 8 * 1
 15832 0000AB9B 4883EA08                	sub rdx, 8 * 1
 15833 0000AB9F EBE7                    	jmp .L_tc_recycle_frame_loop_008e
 15834                                  .L_tc_recycle_frame_done_008e:
 15835 0000ABA1 488D6308                	lea rsp, [rbx + 8 * 1]
 15836 0000ABA5 5D                      	pop rbp	; the proc will restore it!
 15837 0000ABA6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15838 0000ABA9 C9                      	leave
 15839 0000ABAA C21800                  	ret AND_KILL_FRAME(1)
 15840                                  .L_lambda_simple_end_0053:	; new closure is in rax
 15841 0000ABAD 803804                  	cmp byte [rax], T_closure
 15842 0000ABB0 0F852AAC0000            	jne L_error_non_closure
 15843 0000ABB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15844                                  
 15845                                  	; recycling the current frame
 15846 0000ABB9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15847 0000ABBC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15848 0000ABBF B905000000              	mov rcx, 1 + 4
 15849 0000ABC4 488B5D18                	mov rbx, COUNT
 15850 0000ABC8 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15851 0000ABCD 488D55F8                	lea rdx, [rbp - 8 * 1]
 15852                                  .L_tc_recycle_frame_loop_008f:
 15853 0000ABD1 4883F900                	cmp rcx, 0
 15854 0000ABD5 7413                    	je .L_tc_recycle_frame_done_008f
 15855 0000ABD7 488B32                  	mov rsi, qword [rdx]
 15856 0000ABDA 488933                  	mov qword [rbx], rsi
 15857 0000ABDD 48FFC9                  	dec rcx
 15858 0000ABE0 4883EB08                	sub rbx, 8 * 1
 15859 0000ABE4 4883EA08                	sub rdx, 8 * 1
 15860 0000ABE8 EBE7                    	jmp .L_tc_recycle_frame_loop_008f
 15861                                  .L_tc_recycle_frame_done_008f:
 15862 0000ABEA 488D6308                	lea rsp, [rbx + 8 * 1]
 15863 0000ABEE 5D                      	pop rbp	; the proc will restore it!
 15864 0000ABEF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15865 0000ABF2 C9                      	leave
 15866 0000ABF3 C21800                  	ret AND_KILL_FRAME(1)
 15867                                  .L_lambda_simple_end_0051:	; new closure is in rax
 15868 0000ABF6 803804                  	cmp byte [rax], T_closure
 15869 0000ABF9 0F85E1AB0000            	jne L_error_non_closure
 15870 0000ABFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 15871                                  
 15872                                  	; recycling the current frame
 15873 0000AC02 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15874 0000AC05 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15875 0000AC08 B905000000              	mov rcx, 1 + 4
 15876 0000AC0D 488B5D18                	mov rbx, COUNT
 15877 0000AC11 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15878 0000AC16 488D55F8                	lea rdx, [rbp - 8 * 1]
 15879                                  .L_tc_recycle_frame_loop_0090:
 15880 0000AC1A 4883F900                	cmp rcx, 0
 15881 0000AC1E 7413                    	je .L_tc_recycle_frame_done_0090
 15882 0000AC20 488B32                  	mov rsi, qword [rdx]
 15883 0000AC23 488933                  	mov qword [rbx], rsi
 15884 0000AC26 48FFC9                  	dec rcx
 15885 0000AC29 4883EB08                	sub rbx, 8 * 1
 15886 0000AC2D 4883EA08                	sub rdx, 8 * 1
 15887 0000AC31 EBE7                    	jmp .L_tc_recycle_frame_loop_0090
 15888                                  .L_tc_recycle_frame_done_0090:
 15889 0000AC33 488D6308                	lea rsp, [rbx + 8 * 1]
 15890 0000AC37 5D                      	pop rbp	; the proc will restore it!
 15891 0000AC38 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15892 0000AC3B C9                      	leave
 15893 0000AC3C C21800                  	ret AND_KILL_FRAME(1)
 15894                                  .L_lambda_simple_end_004f:	; new closure is in rax
 15895 0000AC3F 803804                  	cmp byte [rax], T_closure
 15896 0000AC42 0F8598AB0000            	jne L_error_non_closure
 15897 0000AC48 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15898                                  
 15899                                  	; recycling the current frame
 15900 0000AC4B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15901 0000AC4E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15902 0000AC51 B905000000              	mov rcx, 1 + 4
 15903 0000AC56 488B5D18                	mov rbx, COUNT
 15904 0000AC5A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15905 0000AC5F 488D55F8                	lea rdx, [rbp - 8 * 1]
 15906                                  .L_tc_recycle_frame_loop_0091:
 15907 0000AC63 4883F900                	cmp rcx, 0
 15908 0000AC67 7413                    	je .L_tc_recycle_frame_done_0091
 15909 0000AC69 488B32                  	mov rsi, qword [rdx]
 15910 0000AC6C 488933                  	mov qword [rbx], rsi
 15911 0000AC6F 48FFC9                  	dec rcx
 15912 0000AC72 4883EB08                	sub rbx, 8 * 1
 15913 0000AC76 4883EA08                	sub rdx, 8 * 1
 15914 0000AC7A EBE7                    	jmp .L_tc_recycle_frame_loop_0091
 15915                                  .L_tc_recycle_frame_done_0091:
 15916 0000AC7C 488D6308                	lea rsp, [rbx + 8 * 1]
 15917 0000AC80 5D                      	pop rbp	; the proc will restore it!
 15918 0000AC81 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15919 0000AC84 C9                      	leave
 15920 0000AC85 C21800                  	ret AND_KILL_FRAME(1)
 15921                                  .L_lambda_simple_end_004d:	; new closure is in rax
 15922 0000AC88 803804                  	cmp byte [rax], T_closure
 15923 0000AC8B 0F854FAB0000            	jne L_error_non_closure
 15924 0000AC91 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15925                                  
 15926                                  	; recycling the current frame
 15927 0000AC94 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15928 0000AC97 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15929 0000AC9A B905000000              	mov rcx, 1 + 4
 15930 0000AC9F 488B5D18                	mov rbx, COUNT
 15931 0000ACA3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15932 0000ACA8 488D55F8                	lea rdx, [rbp - 8 * 1]
 15933                                  .L_tc_recycle_frame_loop_0092:
 15934 0000ACAC 4883F900                	cmp rcx, 0
 15935 0000ACB0 7413                    	je .L_tc_recycle_frame_done_0092
 15936 0000ACB2 488B32                  	mov rsi, qword [rdx]
 15937 0000ACB5 488933                  	mov qword [rbx], rsi
 15938 0000ACB8 48FFC9                  	dec rcx
 15939 0000ACBB 4883EB08                	sub rbx, 8 * 1
 15940 0000ACBF 4883EA08                	sub rdx, 8 * 1
 15941 0000ACC3 EBE7                    	jmp .L_tc_recycle_frame_loop_0092
 15942                                  .L_tc_recycle_frame_done_0092:
 15943 0000ACC5 488D6308                	lea rsp, [rbx + 8 * 1]
 15944 0000ACC9 5D                      	pop rbp	; the proc will restore it!
 15945 0000ACCA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15946 0000ACCD C9                      	leave
 15947 0000ACCE C21800                  	ret AND_KILL_FRAME(1)
 15948                                  .L_lambda_simple_end_004c:	; new closure is in rax
 15949 0000ACD1 803804                  	cmp byte [rax], T_closure
 15950 0000ACD4 0F8506AB0000            	jne L_error_non_closure
 15951 0000ACDA FF7001                  	push SOB_CLOSURE_ENV(rax)
 15952                                  
 15953                                  	; recycling the current frame
 15954 0000ACDD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15955 0000ACE0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15956 0000ACE3 B905000000              	mov rcx, 1 + 4
 15957 0000ACE8 488B5D18                	mov rbx, COUNT
 15958 0000ACEC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15959 0000ACF1 488D55F8                	lea rdx, [rbp - 8 * 1]
 15960                                  .L_tc_recycle_frame_loop_0093:
 15961 0000ACF5 4883F900                	cmp rcx, 0
 15962 0000ACF9 7413                    	je .L_tc_recycle_frame_done_0093
 15963 0000ACFB 488B32                  	mov rsi, qword [rdx]
 15964 0000ACFE 488933                  	mov qword [rbx], rsi
 15965 0000AD01 48FFC9                  	dec rcx
 15966 0000AD04 4883EB08                	sub rbx, 8 * 1
 15967 0000AD08 4883EA08                	sub rdx, 8 * 1
 15968 0000AD0C EBE7                    	jmp .L_tc_recycle_frame_loop_0093
 15969                                  .L_tc_recycle_frame_done_0093:
 15970 0000AD0E 488D6308                	lea rsp, [rbx + 8 * 1]
 15971 0000AD12 5D                      	pop rbp	; the proc will restore it!
 15972 0000AD13 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15973 0000AD16 C9                      	leave
 15974 0000AD17 C21800                  	ret AND_KILL_FRAME(1)
 15975                                  .L_lambda_simple_end_004b:	; new closure is in rax
 15976 0000AD1A 803804                  	cmp byte [rax], T_closure
 15977 0000AD1D 0F85BDAA0000            	jne L_error_non_closure
 15978 0000AD23 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15979                                  
 15980                                  	; recycling the current frame
 15981 0000AD26 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15982 0000AD29 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15983 0000AD2C B905000000              	mov rcx, 1 + 4
 15984 0000AD31 488B5D18                	mov rbx, COUNT
 15985 0000AD35 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15986 0000AD3A 488D55F8                	lea rdx, [rbp - 8 * 1]
 15987                                  .L_tc_recycle_frame_loop_0094:
 15988 0000AD3E 4883F900                	cmp rcx, 0
 15989 0000AD42 7413                    	je .L_tc_recycle_frame_done_0094
 15990 0000AD44 488B32                  	mov rsi, qword [rdx]
 15991 0000AD47 488933                  	mov qword [rbx], rsi
 15992 0000AD4A 48FFC9                  	dec rcx
 15993 0000AD4D 4883EB08                	sub rbx, 8 * 1
 15994 0000AD51 4883EA08                	sub rdx, 8 * 1
 15995 0000AD55 EBE7                    	jmp .L_tc_recycle_frame_loop_0094
 15996                                  .L_tc_recycle_frame_done_0094:
 15997 0000AD57 488D6308                	lea rsp, [rbx + 8 * 1]
 15998 0000AD5B 5D                      	pop rbp	; the proc will restore it!
 15999 0000AD5C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16000 0000AD5F C9                      	leave
 16001 0000AD60 C21800                  	ret AND_KILL_FRAME(1)
 16002                                  .L_lambda_simple_end_0048:	; new closure is in rax
 16003 0000AD63 803804                  	cmp byte [rax], T_closure
 16004 0000AD66 0F8574AA0000            	jne L_error_non_closure
 16005 0000AD6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 16006 0000AD6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 16007                                  
 16008 0000AD72 4889C7                  	mov rdi, rax
 16009 0000AD75 E821AC0000              	call print_sexpr_if_not_void
 16010                                  
 16011 0000AD7A 48B8-                   	mov rax, L_constants + 1881
 16011 0000AD7C [5907000000000000] 
 16012 0000AD84 50                      	push rax
 16013 0000AD85 6A01                    	push 1	; arg count
 16014 0000AD87 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16015 0000AD8C E8F8AA0000              	call malloc
 16016 0000AD91 50                      	push rax
 16017 0000AD92 BF00000000              	mov rdi, 8 * 0	; new rib
 16018 0000AD97 E8EDAA0000              	call malloc
 16019 0000AD9C 50                      	push rax
 16020 0000AD9D BF08000000              	mov rdi, 8 * 1	; extended env
 16021 0000ADA2 E8E2AA0000              	call malloc
 16022 0000ADA7 488B7D10                	mov rdi, ENV
 16023 0000ADAB BE00000000              	mov rsi, 0
 16024 0000ADB0 BA01000000              	mov rdx, 1
 16025                                  .L_lambda_simple_env_loop_0058:	; ext_env[i + 1] <-- env[i]
 16026 0000ADB5 4883FE00                	cmp rsi, 0
 16027 0000ADB9 7410                    	je .L_lambda_simple_env_end_0058
 16028 0000ADBB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16029 0000ADBF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16030 0000ADC3 48FFC6                  	inc rsi
 16031 0000ADC6 48FFC2                  	inc rdx
 16032 0000ADC9 EBEA                    	jmp .L_lambda_simple_env_loop_0058
 16033                                  .L_lambda_simple_env_end_0058:
 16034 0000ADCB 5B                      	pop rbx
 16035 0000ADCC BE00000000              	mov rsi, 0
 16036                                  .L_lambda_simple_params_loop_0058:	; copy params
 16037 0000ADD1 4883FE00                	cmp rsi, 0
 16038 0000ADD5 740E                    	je .L_lambda_simple_params_end_0058
 16039 0000ADD7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16040 0000ADDC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16041 0000ADE0 48FFC6                  	inc rsi
 16042 0000ADE3 EBEC                    	jmp .L_lambda_simple_params_loop_0058
 16043                                  .L_lambda_simple_params_end_0058:
 16044 0000ADE5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16045 0000ADE8 4889C3                  	mov rbx, rax
 16046 0000ADEB 58                      	pop rax
 16047 0000ADEC C60004                  	mov byte [rax], T_closure
 16048 0000ADEF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16049 0000ADF3 48C74009[00AE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0058
 16050 0000ADFB E93F050000              	jmp .L_lambda_simple_end_0058
 16051                                  .L_lambda_simple_code_0058:	; lambda-simple body
 16052 0000AE00 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16053 0000AE06 740B                    	je .L_lambda_simple_arity_check_ok_0058
 16054 0000AE08 FF742410                	push qword [rsp + 8 * 2]
 16055 0000AE0C 6A01                    	push 1
 16056 0000AE0E E92FAA0000              	jmp L_error_incorrect_arity_simple
 16057                                  .L_lambda_simple_arity_check_ok_0058:
 16058 0000AE13 C8000000                	enter 0, 0
 16059                                  
 16060 0000AE17 BF08000000              	mov rdi, 8
 16061 0000AE1C E868AA0000              	call malloc
 16062 0000AE21 488B5D20                	mov rbx, PARAM(0)	; param run
 16063 0000AE25 488918                  	mov [rax], rbx	; box run
 16064 0000AE28 48894520                	mov PARAM(0), rax	;replace param run with box
 16065 0000AE2C 48B8-                   	mov rax, sob_void
 16065 0000AE2E [0000000000000000] 
 16066                                  
 16067 0000AE36 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16068 0000AE3B E849AA0000              	call malloc
 16069 0000AE40 50                      	push rax
 16070 0000AE41 BF08000000              	mov rdi, 8 * 1	; new rib
 16071 0000AE46 E83EAA0000              	call malloc
 16072 0000AE4B 50                      	push rax
 16073 0000AE4C BF10000000              	mov rdi, 8 * 2	; extended env
 16074 0000AE51 E833AA0000              	call malloc
 16075 0000AE56 488B7D10                	mov rdi, ENV
 16076 0000AE5A BE00000000              	mov rsi, 0
 16077 0000AE5F BA01000000              	mov rdx, 1
 16078                                  .L_lambda_simple_env_loop_0059:	; ext_env[i + 1] <-- env[i]
 16079 0000AE64 4883FE01                	cmp rsi, 1
 16080 0000AE68 7410                    	je .L_lambda_simple_env_end_0059
 16081 0000AE6A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16082 0000AE6E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16083 0000AE72 48FFC6                  	inc rsi
 16084 0000AE75 48FFC2                  	inc rdx
 16085 0000AE78 EBEA                    	jmp .L_lambda_simple_env_loop_0059
 16086                                  .L_lambda_simple_env_end_0059:
 16087 0000AE7A 5B                      	pop rbx
 16088 0000AE7B BE00000000              	mov rsi, 0
 16089                                  .L_lambda_simple_params_loop_0059:	; copy params
 16090 0000AE80 4883FE01                	cmp rsi, 1
 16091 0000AE84 740E                    	je .L_lambda_simple_params_end_0059
 16092 0000AE86 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16093 0000AE8B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16094 0000AE8F 48FFC6                  	inc rsi
 16095 0000AE92 EBEC                    	jmp .L_lambda_simple_params_loop_0059
 16096                                  .L_lambda_simple_params_end_0059:
 16097 0000AE94 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16098 0000AE97 4889C3                  	mov rbx, rax
 16099 0000AE9A 58                      	pop rax
 16100 0000AE9B C60004                  	mov byte [rax], T_closure
 16101 0000AE9E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16102 0000AEA2 48C74009[AFAE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0059
 16103 0000AEAA E90D010000              	jmp .L_lambda_simple_end_0059
 16104                                  .L_lambda_simple_code_0059:	; lambda-simple body
 16105 0000AEAF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16106 0000AEB5 740B                    	je .L_lambda_simple_arity_check_ok_0059
 16107 0000AEB7 FF742410                	push qword [rsp + 8 * 2]
 16108 0000AEBB 6A02                    	push 2
 16109 0000AEBD E980A90000              	jmp L_error_incorrect_arity_simple
 16110                                  .L_lambda_simple_arity_check_ok_0059:
 16111 0000AEC2 C8000000                	enter 0, 0
 16112 0000AEC6 488B4520                	mov rax, PARAM(0)	; param n
 16113 0000AECA 50                      	push rax
 16114 0000AECB 6A01                    	push 1	; arg count
 16115 0000AECD 488B0425[7C0F0000]      	mov rax, qword [free_var_27]	; free var zero?
 16116 0000AED5 803805                  	cmp byte [rax], T_undefined
 16117 0000AED8 0F847EA80000            	je L_error_fvar_undefined
 16118 0000AEDE 803804                  	cmp byte [rax], T_closure
 16119 0000AEE1 0F85F9A80000            	jne L_error_non_closure
 16120 0000AEE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16121 0000AEEA FF5009                  	call SOB_CLOSURE_CODE(rax)
 16122                                  
 16123 0000AEED 483D[02000000]          	cmp rax, sob_boolean_false
 16124 0000AEF3 740F                    	je .L_if_else_004f
 16125 0000AEF5 48B8-                   	mov rax, L_constants + 1
 16125 0000AEF7 [0100000000000000] 
 16126                                  
 16127 0000AEFF E9B4000000              	jmp .L_if_end_004f
 16128                                  
 16129                                  	.L_if_else_004f:
 16130                                  	; preparing a tail-call
 16131 0000AF04 488B4528                	mov rax, PARAM(1)	; param ch
 16132 0000AF08 50                      	push rax
 16133 0000AF09 48B8-                   	mov rax, L_constants + 2158
 16133 0000AF0B [6E08000000000000] 
 16134 0000AF13 50                      	push rax
 16135 0000AF14 488B4520                	mov rax, PARAM(0)	; param n
 16136 0000AF18 50                      	push rax
 16137 0000AF19 6A02                    	push 2	; arg count
 16138 0000AF1B 488B0425[76150000]      	mov rax, qword [free_var_117]	; free var -
 16139 0000AF23 803805                  	cmp byte [rax], T_undefined
 16140 0000AF26 0F8430A80000            	je L_error_fvar_undefined
 16141 0000AF2C 803804                  	cmp byte [rax], T_closure
 16142 0000AF2F 0F85ABA80000            	jne L_error_non_closure
 16143 0000AF35 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16144 0000AF38 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16145 0000AF3B 50                      	push rax
 16146 0000AF3C 6A02                    	push 2	; arg count
 16147 0000AF3E 488B4510                	mov rax, ENV
 16148 0000AF42 488B00                  	mov rax, qword [rax + 8 * 0]
 16149 0000AF45 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16150 0000AF48 488B00                  	mov rax, qword [rax]
 16151 0000AF4B 803804                  	cmp byte [rax], T_closure
 16152 0000AF4E 0F858CA80000            	jne L_error_non_closure
 16153 0000AF54 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16154 0000AF57 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16155 0000AF5A 50                      	push rax
 16156 0000AF5B 488B4528                	mov rax, PARAM(1)	; param ch
 16157 0000AF5F 50                      	push rax
 16158 0000AF60 6A02                    	push 2	; arg count
 16159 0000AF62 488B0425[8E0E0000]      	mov rax, qword [free_var_13]	; free var cons
 16160 0000AF6A 803805                  	cmp byte [rax], T_undefined
 16161 0000AF6D 0F84E9A70000            	je L_error_fvar_undefined
 16162 0000AF73 803804                  	cmp byte [rax], T_closure
 16163 0000AF76 0F8564A80000            	jne L_error_non_closure
 16164 0000AF7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 16165                                  
 16166                                  	; recycling the current frame
 16167 0000AF7F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16168 0000AF82 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16169 0000AF85 B906000000              	mov rcx, 2 + 4
 16170 0000AF8A 488B5D18                	mov rbx, COUNT
 16171 0000AF8E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16172 0000AF93 488D55F8                	lea rdx, [rbp - 8 * 1]
 16173                                  .L_tc_recycle_frame_loop_0095:
 16174 0000AF97 4883F900                	cmp rcx, 0
 16175 0000AF9B 7413                    	je .L_tc_recycle_frame_done_0095
 16176 0000AF9D 488B32                  	mov rsi, qword [rdx]
 16177 0000AFA0 488933                  	mov qword [rbx], rsi
 16178 0000AFA3 48FFC9                  	dec rcx
 16179 0000AFA6 4883EB08                	sub rbx, 8 * 1
 16180 0000AFAA 4883EA08                	sub rdx, 8 * 1
 16181 0000AFAE EBE7                    	jmp .L_tc_recycle_frame_loop_0095
 16182                                  .L_tc_recycle_frame_done_0095:
 16183 0000AFB0 488D6308                	lea rsp, [rbx + 8 * 1]
 16184 0000AFB4 5D                      	pop rbp	; the proc will restore it!
 16185 0000AFB5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16186                                  
 16187                                  	.L_if_end_004f:
 16188 0000AFB8 C9                      	leave
 16189 0000AFB9 C22000                  	ret AND_KILL_FRAME(2)
 16190                                  .L_lambda_simple_end_0059:	; new closure is in rax
 16191                                  
 16192 0000AFBC 50                      	push rax
 16193 0000AFBD 488B4520                	mov rax, PARAM(0)	; param run
 16194                                  
 16195 0000AFC1 8F00                    	pop qword[rax]
 16196 0000AFC3 48B8-                   	mov rax, sob_void
 16196 0000AFC5 [0000000000000000] 
 16197                                  
 16198 0000AFCD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16199 0000AFD2 E8B2A80000              	call malloc
 16200 0000AFD7 50                      	push rax
 16201 0000AFD8 BF08000000              	mov rdi, 8 * 1	; new rib
 16202 0000AFDD E8A7A80000              	call malloc
 16203 0000AFE2 50                      	push rax
 16204 0000AFE3 BF10000000              	mov rdi, 8 * 2	; extended env
 16205 0000AFE8 E89CA80000              	call malloc
 16206 0000AFED 488B7D10                	mov rdi, ENV
 16207 0000AFF1 BE00000000              	mov rsi, 0
 16208 0000AFF6 BA01000000              	mov rdx, 1
 16209                                  .L_lambda_opt_env_loop_000f:	; ext_env[i + 1] <-- env[i]
 16210 0000AFFB 4883FE01                	cmp rsi, 1
 16211 0000AFFF 7410                    	je .L_lambda_opt_env_end_000f
 16212 0000B001 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16213 0000B005 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16214 0000B009 48FFC6                  	inc rsi
 16215 0000B00C 48FFC2                  	inc rdx
 16216 0000B00F EBEA                    	jmp .L_lambda_opt_env_loop_000f
 16217                                  .L_lambda_opt_env_end_000f:
 16218 0000B011 5B                      	pop rbx
 16219 0000B012 BE00000000              	mov rsi, 0
 16220                                  .L_lambda_opt_params_loop_000f:	; copy params
 16221 0000B017 4883FE01                	cmp rsi, 1
 16222 0000B01B 740E                    	je .L_lambda_opt_params_end_000f
 16223 0000B01D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16224 0000B022 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16225 0000B026 48FFC6                  	inc rsi
 16226 0000B029 EBEC                    	jmp .L_lambda_opt_params_loop_000f
 16227                                  .L_lambda_opt_params_end_000f:
 16228 0000B02B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16229 0000B02E 4889C3                  	mov rbx, rax
 16230 0000B031 58                      	pop rax
 16231 0000B032 C60004                  	mov byte [rax], T_closure
 16232 0000B035 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16233 0000B039 48C74009[46B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000f
 16234 0000B041 E9F5020000              	jmp .L_lambda_opt_end_000f
 16235                                  .L_lambda_opt_code_000f:	; lambda-simple body
 16236 0000B046 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 16237 0000B04C 740D                    	je .L_lambda_opt_arity_check_exact_000f ;	 if equal, go to exact arity
 16238 0000B04E 7F42                    	jg .L_lambda_opt_arity_check_more_000f ;	 if greater than, go to arity more
 16239 0000B050 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 16240 0000B054 6A01                     	push 1
 16241 0000B056 E9FBA70000              	jmp L_error_incorrect_arity_opt
 16242                                  	.L_lambda_opt_arity_check_exact_000f:
 16243 0000B05B 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 16244 0000B060 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 16245 0000B065 4883EC08                	sub rsp, 8
 16246 0000B069 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 16247                                  	.L_lambda_opt_exact_shifting_loop_000f:
 16248 0000B06D 488B5108                	mov rdx, [rcx + 8]
 16249 0000B071 488911                  	mov [rcx], rdx
 16250 0000B074 4883C108                	add rcx, 8
 16251 0000B078 4839CB                  	cmp rbx, rcx
 16252 0000B07B 75F0                    	jne .L_lambda_opt_exact_shifting_loop_000f
 16253                                  	.L_lambda_opt_exact_shifting_loop_end_000f:
 16254 0000B07D 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 16255 0000B084 4883C001                	add rax, 1 ; 	arg count += 1
 16256 0000B088 4889442410              	mov qword [rsp + 8 * 2], rax
 16257 0000B08D E987000000              	jmp .L_lambda_opt_stack_adjusted_000f
 16258                                  	.L_lambda_opt_arity_check_more_000f:
 16259 0000B092 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 16259 0000B094 [0100000000000000] 
 16260 0000B09C 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 16261 0000B0A2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_000f
 16262                                  	.L_lambda_opt_stack_shrink_loop_000f:
 16263 0000B0A4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 16264 0000B0A9 E8DBA70000              	call malloc ;	 allocated memory for the optional scheme list
 16265 0000B0AE C60021                  	mov byte[rax], T_pair ;	 set type pair
 16266 0000B0B1 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 16267 0000B0B5 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 16268 0000B0B8 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 16269 0000B0BD 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 16270 0000B0C2 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 16271 0000B0C6 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 16272                                  	.L_lambda_opt_more_shifting_loop_000f:
 16273 0000B0CB 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 16274 0000B0CE 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 16275 0000B0D2 4883EB08                	sub rbx, 8 
 16276 0000B0D6 4839DC                  	cmp rsp, rbx
 16277 0000B0D9 7EF0                    	jle .L_lambda_opt_more_shifting_loop_000f
 16278                                  	.L_lambda_opt_more_shifting_loop_end_000f:
 16279 0000B0DB 4883C408                	add rsp, 8 ;	 update rsp
 16280 0000B0DF 488B5C2410              	mov rbx, [rsp + 8 * 2]
 16281 0000B0E4 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 16282 0000B0E8 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 16283 0000B0ED 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16284 0000B0F3 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_000f
 16285                                  	.L_lambda_opt_stack_shrink_loop_exit_000f:
 16286 0000B0F5 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 16287 0000B0FA 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 16288 0000B0FF BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 16289 0000B104 E880A70000              	call malloc ;	 allocated memory for the optional scheme list
 16290 0000B109 C60021                  	mov byte[rax], T_pair ;	 set type pair
 16291 0000B10C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 16292 0000B110 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 16293 0000B114 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 16294                                  	.L_lambda_opt_stack_adjusted_000f:
 16295 0000B119 C8000000                	enter 0, 0
 16296 0000B11D 488B4528                	mov rax, PARAM(1)	; param chs
 16297 0000B121 50                      	push rax
 16298 0000B122 6A01                    	push 1	; arg count
 16299 0000B124 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 16300 0000B12C 803805                  	cmp byte [rax], T_undefined
 16301 0000B12F 0F8427A60000            	je L_error_fvar_undefined
 16302 0000B135 803804                  	cmp byte [rax], T_closure
 16303 0000B138 0F85A2A60000            	jne L_error_non_closure
 16304 0000B13E FF7001                  	push SOB_CLOSURE_ENV(rax)
 16305 0000B141 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16306                                  
 16307 0000B144 483D[02000000]          	cmp rax, sob_boolean_false
 16308 0000B14A 7469                    	je .L_if_else_0050
 16309                                  	; preparing a tail-call
 16310 0000B14C 48B8-                   	mov rax, L_constants + 4
 16310 0000B14E [0400000000000000] 
 16311 0000B156 50                      	push rax
 16312 0000B157 488B4520                	mov rax, PARAM(0)	; param n
 16313 0000B15B 50                      	push rax
 16314 0000B15C 6A02                    	push 2	; arg count
 16315 0000B15E 488B4510                	mov rax, ENV
 16316 0000B162 488B00                  	mov rax, qword [rax + 8 * 0]
 16317 0000B165 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16318 0000B168 488B00                  	mov rax, qword [rax]
 16319 0000B16B 803804                  	cmp byte [rax], T_closure
 16320 0000B16E 0F856CA60000            	jne L_error_non_closure
 16321 0000B174 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16322                                  
 16323                                  	; recycling the current frame
 16324 0000B177 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16325 0000B17A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16326 0000B17D B906000000              	mov rcx, 2 + 4
 16327 0000B182 488B5D18                	mov rbx, COUNT
 16328 0000B186 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16329 0000B18B 488D55F8                	lea rdx, [rbp - 8 * 1]
 16330                                  .L_tc_recycle_frame_loop_0096:
 16331 0000B18F 4883F900                	cmp rcx, 0
 16332 0000B193 7413                    	je .L_tc_recycle_frame_done_0096
 16333 0000B195 488B32                  	mov rsi, qword [rdx]
 16334 0000B198 488933                  	mov qword [rbx], rsi
 16335 0000B19B 48FFC9                  	dec rcx
 16336 0000B19E 4883EB08                	sub rbx, 8 * 1
 16337 0000B1A2 4883EA08                	sub rdx, 8 * 1
 16338 0000B1A6 EBE7                    	jmp .L_tc_recycle_frame_loop_0096
 16339                                  .L_tc_recycle_frame_done_0096:
 16340 0000B1A8 488D6308                	lea rsp, [rbx + 8 * 1]
 16341 0000B1AC 5D                      	pop rbp	; the proc will restore it!
 16342 0000B1AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16343                                  
 16344 0000B1B0 E982010000              	jmp .L_if_end_0050
 16345                                  
 16346                                  	.L_if_else_0050:
 16347 0000B1B5 488B4528                	mov rax, PARAM(1)	; param chs
 16348 0000B1B9 50                      	push rax
 16349 0000B1BA 6A01                    	push 1	; arg count
 16350 0000B1BC 488B0425[C20D0000]      	mov rax, qword [free_var_1]	; free var pair?
 16351 0000B1C4 803805                  	cmp byte [rax], T_undefined
 16352 0000B1C7 0F848FA50000            	je L_error_fvar_undefined
 16353 0000B1CD 803804                  	cmp byte [rax], T_closure
 16354 0000B1D0 0F850AA60000            	jne L_error_non_closure
 16355 0000B1D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16356 0000B1D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16357                                  
 16358 0000B1DC 483D[02000000]          	cmp rax, sob_boolean_false
 16359 0000B1E2 744C                    	je .L_if_else_0052
 16360 0000B1E4 488B4528                	mov rax, PARAM(1)	; param chs
 16361 0000B1E8 50                      	push rax
 16362 0000B1E9 6A01                    	push 1	; arg count
 16363 0000B1EB 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 16364 0000B1F3 803805                  	cmp byte [rax], T_undefined
 16365 0000B1F6 0F8460A50000            	je L_error_fvar_undefined
 16366 0000B1FC 803804                  	cmp byte [rax], T_closure
 16367 0000B1FF 0F85DBA50000            	jne L_error_non_closure
 16368 0000B205 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16369 0000B208 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16370 0000B20B 50                      	push rax
 16371 0000B20C 6A01                    	push 1	; arg count
 16372 0000B20E 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 16373 0000B216 803805                  	cmp byte [rax], T_undefined
 16374 0000B219 0F843DA50000            	je L_error_fvar_undefined
 16375 0000B21F 803804                  	cmp byte [rax], T_closure
 16376 0000B222 0F85B8A50000            	jne L_error_non_closure
 16377 0000B228 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16378 0000B22B FF5009                  	call SOB_CLOSURE_CODE(rax)
 16379                                  
 16380 0000B22E EB0A                    	jmp .L_if_end_0052
 16381                                  
 16382                                  	.L_if_else_0052:
 16383 0000B230 48B8-                   	mov rax, L_constants + 2
 16383 0000B232 [0200000000000000] 
 16384                                  
 16385                                  	.L_if_end_0052:
 16386                                  
 16387 0000B23A 483D[02000000]          	cmp rax, sob_boolean_false
 16388 0000B240 0F8483000000            	je .L_if_else_0051
 16389                                  	; preparing a tail-call
 16390 0000B246 488B4528                	mov rax, PARAM(1)	; param chs
 16391 0000B24A 50                      	push rax
 16392 0000B24B 6A01                    	push 1	; arg count
 16393 0000B24D 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 16394 0000B255 803805                  	cmp byte [rax], T_undefined
 16395 0000B258 0F84FEA40000            	je L_error_fvar_undefined
 16396 0000B25E 803804                  	cmp byte [rax], T_closure
 16397 0000B261 0F8579A50000            	jne L_error_non_closure
 16398 0000B267 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16399 0000B26A FF5009                  	call SOB_CLOSURE_CODE(rax)
 16400 0000B26D 50                      	push rax
 16401 0000B26E 488B4520                	mov rax, PARAM(0)	; param n
 16402 0000B272 50                      	push rax
 16403 0000B273 6A02                    	push 2	; arg count
 16404 0000B275 488B4510                	mov rax, ENV
 16405 0000B279 488B00                  	mov rax, qword [rax + 8 * 0]
 16406 0000B27C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16407 0000B27F 488B00                  	mov rax, qword [rax]
 16408 0000B282 803804                  	cmp byte [rax], T_closure
 16409 0000B285 0F8555A50000            	jne L_error_non_closure
 16410 0000B28B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16411                                  
 16412                                  	; recycling the current frame
 16413 0000B28E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16414 0000B291 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16415 0000B294 B906000000              	mov rcx, 2 + 4
 16416 0000B299 488B5D18                	mov rbx, COUNT
 16417 0000B29D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16418 0000B2A2 488D55F8                	lea rdx, [rbp - 8 * 1]
 16419                                  .L_tc_recycle_frame_loop_0097:
 16420 0000B2A6 4883F900                	cmp rcx, 0
 16421 0000B2AA 7413                    	je .L_tc_recycle_frame_done_0097
 16422 0000B2AC 488B32                  	mov rsi, qword [rdx]
 16423 0000B2AF 488933                  	mov qword [rbx], rsi
 16424 0000B2B2 48FFC9                  	dec rcx
 16425 0000B2B5 4883EB08                	sub rbx, 8 * 1
 16426 0000B2B9 4883EA08                	sub rdx, 8 * 1
 16427 0000B2BD EBE7                    	jmp .L_tc_recycle_frame_loop_0097
 16428                                  .L_tc_recycle_frame_done_0097:
 16429 0000B2BF 488D6308                	lea rsp, [rbx + 8 * 1]
 16430 0000B2C3 5D                      	pop rbp	; the proc will restore it!
 16431 0000B2C4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16432                                  
 16433 0000B2C7 EB6E                    	jmp .L_if_end_0051
 16434                                  
 16435                                  	.L_if_else_0051:
 16436                                  	; preparing a tail-call
 16437 0000B2C9 48B8-                   	mov rax, L_constants + 2365
 16437 0000B2CB [3D09000000000000] 
 16438 0000B2D3 50                      	push rax
 16439 0000B2D4 48B8-                   	mov rax, L_constants + 2356
 16439 0000B2D6 [3409000000000000] 
 16440 0000B2DE 50                      	push rax
 16441 0000B2DF 6A02                    	push 2	; arg count
 16442 0000B2E1 488B0425[7B100000]      	mov rax, qword [free_var_42]	; free var error
 16443 0000B2E9 803805                  	cmp byte [rax], T_undefined
 16444 0000B2EC 0F846AA40000            	je L_error_fvar_undefined
 16445 0000B2F2 803804                  	cmp byte [rax], T_closure
 16446 0000B2F5 0F85E5A40000            	jne L_error_non_closure
 16447 0000B2FB FF7001                  	push SOB_CLOSURE_ENV(rax)
 16448                                  
 16449                                  	; recycling the current frame
 16450 0000B2FE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16451 0000B301 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16452 0000B304 B906000000              	mov rcx, 2 + 4
 16453 0000B309 488B5D18                	mov rbx, COUNT
 16454 0000B30D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16455 0000B312 488D55F8                	lea rdx, [rbp - 8 * 1]
 16456                                  .L_tc_recycle_frame_loop_0098:
 16457 0000B316 4883F900                	cmp rcx, 0
 16458 0000B31A 7413                    	je .L_tc_recycle_frame_done_0098
 16459 0000B31C 488B32                  	mov rsi, qword [rdx]
 16460 0000B31F 488933                  	mov qword [rbx], rsi
 16461 0000B322 48FFC9                  	dec rcx
 16462 0000B325 4883EB08                	sub rbx, 8 * 1
 16463 0000B329 4883EA08                	sub rdx, 8 * 1
 16464 0000B32D EBE7                    	jmp .L_tc_recycle_frame_loop_0098
 16465                                  .L_tc_recycle_frame_done_0098:
 16466 0000B32F 488D6308                	lea rsp, [rbx + 8 * 1]
 16467 0000B333 5D                      	pop rbp	; the proc will restore it!
 16468 0000B334 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16469                                  
 16470                                  	.L_if_end_0051:
 16471                                  
 16472                                  	.L_if_end_0050:
 16473 0000B337 C9                      	leave
 16474 0000B338 C22000                  	ret AND_KILL_FRAME(2)
 16475                                  .L_lambda_opt_end_000f:	; new closure is in rax
 16476 0000B33B C9                      	leave
 16477 0000B33C C21800                  	ret AND_KILL_FRAME(1)
 16478                                  .L_lambda_simple_end_0058:	; new closure is in rax
 16479 0000B33F 803804                  	cmp byte [rax], T_closure
 16480 0000B342 0F8598A40000            	jne L_error_non_closure
 16481 0000B348 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16482 0000B34B FF5009                  	call SOB_CLOSURE_CODE(rax)
 16483 0000B34E 48890425[20160000]      	mov qword [free_var_127], rax
 16484 0000B356 48B8-                   	mov rax, sob_void
 16484 0000B358 [0000000000000000] 
 16485                                  
 16486 0000B360 4889C7                  	mov rdi, rax
 16487 0000B363 E833A60000              	call print_sexpr_if_not_void
 16488                                  
 16489 0000B368 48B8-                   	mov rax, L_constants + 0
 16489 0000B36A [0000000000000000] 
 16490 0000B372 48890425[31160000]      	mov qword [free_var_128], rax
 16491 0000B37A 48B8-                   	mov rax, sob_void
 16491 0000B37C [0000000000000000] 
 16492                                  
 16493 0000B384 4889C7                  	mov rdi, rax
 16494 0000B387 E80FA60000              	call print_sexpr_if_not_void
 16495                                  
 16496 0000B38C 48B8-                   	mov rax, L_constants + 0
 16496 0000B38E [0000000000000000] 
 16497 0000B396 48890425[42160000]      	mov qword [free_var_129], rax
 16498 0000B39E 48B8-                   	mov rax, sob_void
 16498 0000B3A0 [0000000000000000] 
 16499                                  
 16500 0000B3A8 4889C7                  	mov rdi, rax
 16501 0000B3AB E8EBA50000              	call print_sexpr_if_not_void
 16502                                  
 16503 0000B3B0 48B8-                   	mov rax, L_constants + 0
 16503 0000B3B2 [0000000000000000] 
 16504 0000B3BA 48890425[53160000]      	mov qword [free_var_130], rax
 16505 0000B3C2 48B8-                   	mov rax, sob_void
 16505 0000B3C4 [0000000000000000] 
 16506                                  
 16507 0000B3CC 4889C7                  	mov rdi, rax
 16508 0000B3CF E8C7A50000              	call print_sexpr_if_not_void
 16509                                  
 16510 0000B3D4 48B8-                   	mov rax, L_constants + 0
 16510 0000B3D6 [0000000000000000] 
 16511 0000B3DE 48890425[64160000]      	mov qword [free_var_131], rax
 16512 0000B3E6 48B8-                   	mov rax, sob_void
 16512 0000B3E8 [0000000000000000] 
 16513                                  
 16514 0000B3F0 4889C7                  	mov rdi, rax
 16515 0000B3F3 E8A3A50000              	call print_sexpr_if_not_void
 16516                                  
 16517 0000B3F8 48B8-                   	mov rax, L_constants + 0
 16517 0000B3FA [0000000000000000] 
 16518 0000B402 48890425[75160000]      	mov qword [free_var_132], rax
 16519 0000B40A 48B8-                   	mov rax, sob_void
 16519 0000B40C [0000000000000000] 
 16520                                  
 16521 0000B414 4889C7                  	mov rdi, rax
 16522 0000B417 E87FA50000              	call print_sexpr_if_not_void
 16523                                  
 16524 0000B41C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16525 0000B421 E863A40000              	call malloc
 16526 0000B426 50                      	push rax
 16527 0000B427 BF00000000              	mov rdi, 8 * 0	; new rib
 16528 0000B42C E858A40000              	call malloc
 16529 0000B431 50                      	push rax
 16530 0000B432 BF08000000              	mov rdi, 8 * 1	; extended env
 16531 0000B437 E84DA40000              	call malloc
 16532 0000B43C 488B7D10                	mov rdi, ENV
 16533 0000B440 BE00000000              	mov rsi, 0
 16534 0000B445 BA01000000              	mov rdx, 1
 16535                                  .L_lambda_simple_env_loop_005a:	; ext_env[i + 1] <-- env[i]
 16536 0000B44A 4883FE00                	cmp rsi, 0
 16537 0000B44E 7410                    	je .L_lambda_simple_env_end_005a
 16538 0000B450 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16539 0000B454 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16540 0000B458 48FFC6                  	inc rsi
 16541 0000B45B 48FFC2                  	inc rdx
 16542 0000B45E EBEA                    	jmp .L_lambda_simple_env_loop_005a
 16543                                  .L_lambda_simple_env_end_005a:
 16544 0000B460 5B                      	pop rbx
 16545 0000B461 BE00000000              	mov rsi, 0
 16546                                  .L_lambda_simple_params_loop_005a:	; copy params
 16547 0000B466 4883FE00                	cmp rsi, 0
 16548 0000B46A 740E                    	je .L_lambda_simple_params_end_005a
 16549 0000B46C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16550 0000B471 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16551 0000B475 48FFC6                  	inc rsi
 16552 0000B478 EBEC                    	jmp .L_lambda_simple_params_loop_005a
 16553                                  .L_lambda_simple_params_end_005a:
 16554 0000B47A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16555 0000B47D 4889C3                  	mov rbx, rax
 16556 0000B480 58                      	pop rax
 16557 0000B481 C60004                  	mov byte [rax], T_closure
 16558 0000B484 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16559 0000B488 48C74009[95B40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005a
 16560 0000B490 E90C020000              	jmp .L_lambda_simple_end_005a
 16561                                  .L_lambda_simple_code_005a:	; lambda-simple body
 16562 0000B495 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16563 0000B49B 740B                    	je .L_lambda_simple_arity_check_ok_005a
 16564 0000B49D FF742410                	push qword [rsp + 8 * 2]
 16565 0000B4A1 6A01                    	push 1
 16566 0000B4A3 E99AA30000              	jmp L_error_incorrect_arity_simple
 16567                                  .L_lambda_simple_arity_check_ok_005a:
 16568 0000B4A8 C8000000                	enter 0, 0
 16569 0000B4AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16570 0000B4B1 E8D3A30000              	call malloc
 16571 0000B4B6 50                      	push rax
 16572 0000B4B7 BF08000000              	mov rdi, 8 * 1	; new rib
 16573 0000B4BC E8C8A30000              	call malloc
 16574 0000B4C1 50                      	push rax
 16575 0000B4C2 BF10000000              	mov rdi, 8 * 2	; extended env
 16576 0000B4C7 E8BDA30000              	call malloc
 16577 0000B4CC 488B7D10                	mov rdi, ENV
 16578 0000B4D0 BE00000000              	mov rsi, 0
 16579 0000B4D5 BA01000000              	mov rdx, 1
 16580                                  .L_lambda_opt_env_loop_0010:	; ext_env[i + 1] <-- env[i]
 16581 0000B4DA 4883FE01                	cmp rsi, 1
 16582 0000B4DE 7410                    	je .L_lambda_opt_env_end_0010
 16583 0000B4E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16584 0000B4E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16585 0000B4E8 48FFC6                  	inc rsi
 16586 0000B4EB 48FFC2                  	inc rdx
 16587 0000B4EE EBEA                    	jmp .L_lambda_opt_env_loop_0010
 16588                                  .L_lambda_opt_env_end_0010:
 16589 0000B4F0 5B                      	pop rbx
 16590 0000B4F1 BE00000000              	mov rsi, 0
 16591                                  .L_lambda_opt_params_loop_0010:	; copy params
 16592 0000B4F6 4883FE01                	cmp rsi, 1
 16593 0000B4FA 740E                    	je .L_lambda_opt_params_end_0010
 16594 0000B4FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16595 0000B501 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16596 0000B505 48FFC6                  	inc rsi
 16597 0000B508 EBEC                    	jmp .L_lambda_opt_params_loop_0010
 16598                                  .L_lambda_opt_params_end_0010:
 16599 0000B50A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16600 0000B50D 4889C3                  	mov rbx, rax
 16601 0000B510 58                      	pop rax
 16602 0000B511 C60004                  	mov byte [rax], T_closure
 16603 0000B514 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16604 0000B518 48C74009[25B50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0010
 16605 0000B520 E978010000              	jmp .L_lambda_opt_end_0010
 16606                                  .L_lambda_opt_code_0010:	; lambda-simple body
 16607 0000B525 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 16608 0000B52B 740D                    	je .L_lambda_opt_arity_check_exact_0010 ;	 if equal, go to exact arity
 16609 0000B52D 7F42                    	jg .L_lambda_opt_arity_check_more_0010 ;	 if greater than, go to arity more
 16610 0000B52F FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 16611 0000B533 6A00                     	push 0
 16612 0000B535 E91CA30000              	jmp L_error_incorrect_arity_opt
 16613                                  	.L_lambda_opt_arity_check_exact_0010:
 16614 0000B53A 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 16615 0000B53F 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 16616 0000B544 4883EC08                	sub rsp, 8
 16617 0000B548 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 16618                                  	.L_lambda_opt_exact_shifting_loop_0010:
 16619 0000B54C 488B5108                	mov rdx, [rcx + 8]
 16620 0000B550 488911                  	mov [rcx], rdx
 16621 0000B553 4883C108                	add rcx, 8
 16622 0000B557 4839CB                  	cmp rbx, rcx
 16623 0000B55A 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0010
 16624                                  	.L_lambda_opt_exact_shifting_loop_end_0010:
 16625 0000B55C 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 16626 0000B563 4883C001                	add rax, 1 ; 	arg count += 1
 16627 0000B567 4889442410              	mov qword [rsp + 8 * 2], rax
 16628 0000B56C E987000000              	jmp .L_lambda_opt_stack_adjusted_0010
 16629                                  	.L_lambda_opt_arity_check_more_0010:
 16630 0000B571 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 16630 0000B573 [0100000000000000] 
 16631 0000B57B 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 16632 0000B581 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0010
 16633                                  	.L_lambda_opt_stack_shrink_loop_0010:
 16634 0000B583 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 16635 0000B588 E8FCA20000              	call malloc ;	 allocated memory for the optional scheme list
 16636 0000B58D C60021                  	mov byte[rax], T_pair ;	 set type pair
 16637 0000B590 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 16638 0000B594 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 16639 0000B597 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 16640 0000B59C 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 16641 0000B5A1 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 16642 0000B5A5 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 16643                                  	.L_lambda_opt_more_shifting_loop_0010:
 16644 0000B5AA 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 16645 0000B5AD 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 16646 0000B5B1 4883EB08                	sub rbx, 8 
 16647 0000B5B5 4839DC                  	cmp rsp, rbx
 16648 0000B5B8 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0010
 16649                                  	.L_lambda_opt_more_shifting_loop_end_0010:
 16650 0000B5BA 4883C408                	add rsp, 8 ;	 update rsp
 16651 0000B5BE 488B5C2410              	mov rbx, [rsp + 8 * 2]
 16652 0000B5C3 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 16653 0000B5C7 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 16654 0000B5CC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16655 0000B5D2 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0010
 16656                                  	.L_lambda_opt_stack_shrink_loop_exit_0010:
 16657 0000B5D4 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 16658 0000B5D9 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 16659 0000B5DE BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 16660 0000B5E3 E8A1A20000              	call malloc ;	 allocated memory for the optional scheme list
 16661 0000B5E8 C60021                  	mov byte[rax], T_pair ;	 set type pair
 16662 0000B5EB 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 16663 0000B5EF 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 16664 0000B5F3 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 16665                                  	.L_lambda_opt_stack_adjusted_0010:
 16666 0000B5F8 C8000000                	enter 0, 0
 16667                                  	; preparing a tail-call
 16668 0000B5FC 488B4520                	mov rax, PARAM(0)	; param s
 16669 0000B600 50                      	push rax
 16670 0000B601 488B0425[490F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 16671 0000B609 803805                  	cmp byte [rax], T_undefined
 16672 0000B60C 0F844AA10000            	je L_error_fvar_undefined
 16673 0000B612 50                      	push rax
 16674 0000B613 6A02                    	push 2	; arg count
 16675 0000B615 488B0425[EE140000]      	mov rax, qword [free_var_109]	; free var map
 16676 0000B61D 803805                  	cmp byte [rax], T_undefined
 16677 0000B620 0F8436A10000            	je L_error_fvar_undefined
 16678 0000B626 803804                  	cmp byte [rax], T_closure
 16679 0000B629 0F85B1A10000            	jne L_error_non_closure
 16680 0000B62F FF7001                  	push SOB_CLOSURE_ENV(rax)
 16681 0000B632 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16682 0000B635 50                      	push rax
 16683 0000B636 488B4510                	mov rax, ENV
 16684 0000B63A 488B00                  	mov rax, qword [rax + 8 * 0]
 16685 0000B63D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 16686 0000B640 50                      	push rax
 16687 0000B641 6A02                    	push 2	; arg count
 16688 0000B643 488B0425[CC140000]      	mov rax, qword [free_var_107]	; free var apply
 16689 0000B64B 803805                  	cmp byte [rax], T_undefined
 16690 0000B64E 0F8408A10000            	je L_error_fvar_undefined
 16691 0000B654 803804                  	cmp byte [rax], T_closure
 16692 0000B657 0F8583A10000            	jne L_error_non_closure
 16693 0000B65D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16694                                  
 16695                                  	; recycling the current frame
 16696 0000B660 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16697 0000B663 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16698 0000B666 B906000000              	mov rcx, 2 + 4
 16699 0000B66B 488B5D18                	mov rbx, COUNT
 16700 0000B66F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16701 0000B674 488D55F8                	lea rdx, [rbp - 8 * 1]
 16702                                  .L_tc_recycle_frame_loop_0099:
 16703 0000B678 4883F900                	cmp rcx, 0
 16704 0000B67C 7413                    	je .L_tc_recycle_frame_done_0099
 16705 0000B67E 488B32                  	mov rsi, qword [rdx]
 16706 0000B681 488933                  	mov qword [rbx], rsi
 16707 0000B684 48FFC9                  	dec rcx
 16708 0000B687 4883EB08                	sub rbx, 8 * 1
 16709 0000B68B 4883EA08                	sub rdx, 8 * 1
 16710 0000B68F EBE7                    	jmp .L_tc_recycle_frame_loop_0099
 16711                                  .L_tc_recycle_frame_done_0099:
 16712 0000B691 488D6308                	lea rsp, [rbx + 8 * 1]
 16713 0000B695 5D                      	pop rbp	; the proc will restore it!
 16714 0000B696 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16715 0000B699 C9                      	leave
 16716 0000B69A C21800                  	ret AND_KILL_FRAME(1)
 16717                                  .L_lambda_opt_end_0010:	; new closure is in rax
 16718 0000B69D C9                      	leave
 16719 0000B69E C21800                  	ret AND_KILL_FRAME(1)
 16720                                  .L_lambda_simple_end_005a:	; new closure is in rax
 16721 0000B6A1 50                      	push rax
 16722 0000B6A2 6A01                    	push 1	; arg count
 16723 0000B6A4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16724 0000B6A9 E8DBA10000              	call malloc
 16725 0000B6AE 50                      	push rax
 16726 0000B6AF BF00000000              	mov rdi, 8 * 0	; new rib
 16727 0000B6B4 E8D0A10000              	call malloc
 16728 0000B6B9 50                      	push rax
 16729 0000B6BA BF08000000              	mov rdi, 8 * 1	; extended env
 16730 0000B6BF E8C5A10000              	call malloc
 16731 0000B6C4 488B7D10                	mov rdi, ENV
 16732 0000B6C8 BE00000000              	mov rsi, 0
 16733 0000B6CD BA01000000              	mov rdx, 1
 16734                                  .L_lambda_simple_env_loop_005b:	; ext_env[i + 1] <-- env[i]
 16735 0000B6D2 4883FE00                	cmp rsi, 0
 16736 0000B6D6 7410                    	je .L_lambda_simple_env_end_005b
 16737 0000B6D8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16738 0000B6DC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16739 0000B6E0 48FFC6                  	inc rsi
 16740 0000B6E3 48FFC2                  	inc rdx
 16741 0000B6E6 EBEA                    	jmp .L_lambda_simple_env_loop_005b
 16742                                  .L_lambda_simple_env_end_005b:
 16743 0000B6E8 5B                      	pop rbx
 16744 0000B6E9 BE00000000              	mov rsi, 0
 16745                                  .L_lambda_simple_params_loop_005b:	; copy params
 16746 0000B6EE 4883FE00                	cmp rsi, 0
 16747 0000B6F2 740E                    	je .L_lambda_simple_params_end_005b
 16748 0000B6F4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16749 0000B6F9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16750 0000B6FD 48FFC6                  	inc rsi
 16751 0000B700 EBEC                    	jmp .L_lambda_simple_params_loop_005b
 16752                                  .L_lambda_simple_params_end_005b:
 16753 0000B702 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16754 0000B705 4889C3                  	mov rbx, rax
 16755 0000B708 58                      	pop rax
 16756 0000B709 C60004                  	mov byte [rax], T_closure
 16757 0000B70C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16758 0000B710 48C74009[1DB70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005b
 16759 0000B718 E965010000              	jmp .L_lambda_simple_end_005b
 16760                                  .L_lambda_simple_code_005b:	; lambda-simple body
 16761 0000B71D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16762 0000B723 740B                    	je .L_lambda_simple_arity_check_ok_005b
 16763 0000B725 FF742410                	push qword [rsp + 8 * 2]
 16764 0000B729 6A01                    	push 1
 16765 0000B72B E912A10000              	jmp L_error_incorrect_arity_simple
 16766                                  .L_lambda_simple_arity_check_ok_005b:
 16767 0000B730 C8000000                	enter 0, 0
 16768 0000B734 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 16769 0000B73C 803805                  	cmp byte [rax], T_undefined
 16770 0000B73F 0F8417A00000            	je L_error_fvar_undefined
 16771 0000B745 50                      	push rax
 16772 0000B746 6A01                    	push 1	; arg count
 16773 0000B748 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16774 0000B74C 803804                  	cmp byte [rax], T_closure
 16775 0000B74F 0F858BA00000            	jne L_error_non_closure
 16776 0000B755 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16777 0000B758 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16778 0000B75B 48890425[31160000]      	mov qword [free_var_128], rax	; free var char<?
 16779 0000B763 803805                  	cmp byte [rax], T_undefined
 16780 0000B766 0F84F09F0000            	je L_error_fvar_undefined
 16781 0000B76C 48B8-                   	mov rax, sob_void
 16781 0000B76E [0000000000000000] 
 16782                                  
 16783 0000B776 488B0425[DC150000]      	mov rax, qword [free_var_123]	; free var <=
 16784 0000B77E 803805                  	cmp byte [rax], T_undefined
 16785 0000B781 0F84D59F0000            	je L_error_fvar_undefined
 16786 0000B787 50                      	push rax
 16787 0000B788 6A01                    	push 1	; arg count
 16788 0000B78A 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16789 0000B78E 803804                  	cmp byte [rax], T_closure
 16790 0000B791 0F8549A00000            	jne L_error_non_closure
 16791 0000B797 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16792 0000B79A FF5009                  	call SOB_CLOSURE_CODE(rax)
 16793 0000B79D 48890425[42160000]      	mov qword [free_var_129], rax	; free var char<=?
 16794 0000B7A5 803805                  	cmp byte [rax], T_undefined
 16795 0000B7A8 0F84AE9F0000            	je L_error_fvar_undefined
 16796 0000B7AE 48B8-                   	mov rax, sob_void
 16796 0000B7B0 [0000000000000000] 
 16797                                  
 16798 0000B7B8 488B0425[0F160000]      	mov rax, qword [free_var_126]	; free var =
 16799 0000B7C0 803805                  	cmp byte [rax], T_undefined
 16800 0000B7C3 0F84939F0000            	je L_error_fvar_undefined
 16801 0000B7C9 50                      	push rax
 16802 0000B7CA 6A01                    	push 1	; arg count
 16803 0000B7CC 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16804 0000B7D0 803804                  	cmp byte [rax], T_closure
 16805 0000B7D3 0F8507A00000            	jne L_error_non_closure
 16806 0000B7D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16807 0000B7DC FF5009                  	call SOB_CLOSURE_CODE(rax)
 16808 0000B7DF 48890425[53160000]      	mov qword [free_var_130], rax	; free var char=?
 16809 0000B7E7 803805                  	cmp byte [rax], T_undefined
 16810 0000B7EA 0F846C9F0000            	je L_error_fvar_undefined
 16811 0000B7F0 48B8-                   	mov rax, sob_void
 16811 0000B7F2 [0000000000000000] 
 16812                                  
 16813 0000B7FA 488B0425[ED150000]      	mov rax, qword [free_var_124]	; free var >
 16814 0000B802 803805                  	cmp byte [rax], T_undefined
 16815 0000B805 0F84519F0000            	je L_error_fvar_undefined
 16816 0000B80B 50                      	push rax
 16817 0000B80C 6A01                    	push 1	; arg count
 16818 0000B80E 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16819 0000B812 803804                  	cmp byte [rax], T_closure
 16820 0000B815 0F85C59F0000            	jne L_error_non_closure
 16821 0000B81B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16822 0000B81E FF5009                  	call SOB_CLOSURE_CODE(rax)
 16823 0000B821 48890425[64160000]      	mov qword [free_var_131], rax	; free var char>?
 16824 0000B829 803805                  	cmp byte [rax], T_undefined
 16825 0000B82C 0F842A9F0000            	je L_error_fvar_undefined
 16826 0000B832 48B8-                   	mov rax, sob_void
 16826 0000B834 [0000000000000000] 
 16827                                  
 16828 0000B83C 488B0425[FE150000]      	mov rax, qword [free_var_125]	; free var >=
 16829 0000B844 803805                  	cmp byte [rax], T_undefined
 16830 0000B847 0F840F9F0000            	je L_error_fvar_undefined
 16831 0000B84D 50                      	push rax
 16832 0000B84E 6A01                    	push 1	; arg count
 16833 0000B850 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16834 0000B854 803804                  	cmp byte [rax], T_closure
 16835 0000B857 0F85839F0000            	jne L_error_non_closure
 16836 0000B85D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16837 0000B860 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16838 0000B863 48890425[75160000]      	mov qword [free_var_132], rax	; free var char>=?
 16839 0000B86B 803805                  	cmp byte [rax], T_undefined
 16840 0000B86E 0F84E89E0000            	je L_error_fvar_undefined
 16841 0000B874 48B8-                   	mov rax, sob_void
 16841 0000B876 [0000000000000000] 
 16842 0000B87E C9                      	leave
 16843 0000B87F C21800                  	ret AND_KILL_FRAME(1)
 16844                                  .L_lambda_simple_end_005b:	; new closure is in rax
 16845 0000B882 803804                  	cmp byte [rax], T_closure
 16846 0000B885 0F85559F0000            	jne L_error_non_closure
 16847 0000B88B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16848 0000B88E FF5009                  	call SOB_CLOSURE_CODE(rax)
 16849                                  
 16850 0000B891 4889C7                  	mov rdi, rax
 16851 0000B894 E802A10000              	call print_sexpr_if_not_void
 16852                                  
 16853 0000B899 48B8-                   	mov rax, L_constants + 0
 16853 0000B89B [0000000000000000] 
 16854 0000B8A3 48890425[86160000]      	mov qword [free_var_133], rax
 16855 0000B8AB 48B8-                   	mov rax, sob_void
 16855 0000B8AD [0000000000000000] 
 16856                                  
 16857 0000B8B5 4889C7                  	mov rdi, rax
 16858 0000B8B8 E8DEA00000              	call print_sexpr_if_not_void
 16859                                  
 16860 0000B8BD 48B8-                   	mov rax, L_constants + 0
 16860 0000B8BF [0000000000000000] 
 16861 0000B8C7 48890425[97160000]      	mov qword [free_var_134], rax
 16862 0000B8CF 48B8-                   	mov rax, sob_void
 16862 0000B8D1 [0000000000000000] 
 16863                                  
 16864 0000B8D9 4889C7                  	mov rdi, rax
 16865 0000B8DC E8BAA00000              	call print_sexpr_if_not_void
 16866                                  
 16867 0000B8E1 48B8-                   	mov rax, L_constants + 2538
 16867 0000B8E3 [EA09000000000000] 
 16868 0000B8EB 50                      	push rax
 16869 0000B8EC 6A01                    	push 1	; arg count
 16870 0000B8EE 488B0425[490F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 16871 0000B8F6 803805                  	cmp byte [rax], T_undefined
 16872 0000B8F9 0F845D9E0000            	je L_error_fvar_undefined
 16873 0000B8FF 803804                  	cmp byte [rax], T_closure
 16874 0000B902 0F85D89E0000            	jne L_error_non_closure
 16875 0000B908 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16876 0000B90B FF5009                  	call SOB_CLOSURE_CODE(rax)
 16877 0000B90E 50                      	push rax
 16878 0000B90F 48B8-                   	mov rax, L_constants + 2542
 16878 0000B911 [EE09000000000000] 
 16879 0000B919 50                      	push rax
 16880 0000B91A 6A01                    	push 1	; arg count
 16881 0000B91C 488B0425[490F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 16882 0000B924 803805                  	cmp byte [rax], T_undefined
 16883 0000B927 0F842F9E0000            	je L_error_fvar_undefined
 16884 0000B92D 803804                  	cmp byte [rax], T_closure
 16885 0000B930 0F85AA9E0000            	jne L_error_non_closure
 16886 0000B936 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16887 0000B939 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16888 0000B93C 50                      	push rax
 16889 0000B93D 6A02                    	push 2	; arg count
 16890 0000B93F 488B0425[76150000]      	mov rax, qword [free_var_117]	; free var -
 16891 0000B947 803805                  	cmp byte [rax], T_undefined
 16892 0000B94A 0F840C9E0000            	je L_error_fvar_undefined
 16893 0000B950 803804                  	cmp byte [rax], T_closure
 16894 0000B953 0F85879E0000            	jne L_error_non_closure
 16895 0000B959 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16896 0000B95C FF5009                  	call SOB_CLOSURE_CODE(rax)
 16897 0000B95F 50                      	push rax
 16898 0000B960 6A01                    	push 1	; arg count
 16899 0000B962 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16900 0000B967 E81D9F0000              	call malloc
 16901 0000B96C 50                      	push rax
 16902 0000B96D BF00000000              	mov rdi, 8 * 0	; new rib
 16903 0000B972 E8129F0000              	call malloc
 16904 0000B977 50                      	push rax
 16905 0000B978 BF08000000              	mov rdi, 8 * 1	; extended env
 16906 0000B97D E8079F0000              	call malloc
 16907 0000B982 488B7D10                	mov rdi, ENV
 16908 0000B986 BE00000000              	mov rsi, 0
 16909 0000B98B BA01000000              	mov rdx, 1
 16910                                  .L_lambda_simple_env_loop_005c:	; ext_env[i + 1] <-- env[i]
 16911 0000B990 4883FE00                	cmp rsi, 0
 16912 0000B994 7410                    	je .L_lambda_simple_env_end_005c
 16913 0000B996 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16914 0000B99A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16915 0000B99E 48FFC6                  	inc rsi
 16916 0000B9A1 48FFC2                  	inc rdx
 16917 0000B9A4 EBEA                    	jmp .L_lambda_simple_env_loop_005c
 16918                                  .L_lambda_simple_env_end_005c:
 16919 0000B9A6 5B                      	pop rbx
 16920 0000B9A7 BE00000000              	mov rsi, 0
 16921                                  .L_lambda_simple_params_loop_005c:	; copy params
 16922 0000B9AC 4883FE00                	cmp rsi, 0
 16923 0000B9B0 740E                    	je .L_lambda_simple_params_end_005c
 16924 0000B9B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16925 0000B9B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16926 0000B9BB 48FFC6                  	inc rsi
 16927 0000B9BE EBEC                    	jmp .L_lambda_simple_params_loop_005c
 16928                                  .L_lambda_simple_params_end_005c:
 16929 0000B9C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16930 0000B9C3 4889C3                  	mov rbx, rax
 16931 0000B9C6 58                      	pop rax
 16932 0000B9C7 C60004                  	mov byte [rax], T_closure
 16933 0000B9CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16934 0000B9CE 48C74009[DBB90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005c
 16935 0000B9D6 E973030000              	jmp .L_lambda_simple_end_005c
 16936                                  .L_lambda_simple_code_005c:	; lambda-simple body
 16937 0000B9DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16938 0000B9E1 740B                    	je .L_lambda_simple_arity_check_ok_005c
 16939 0000B9E3 FF742410                	push qword [rsp + 8 * 2]
 16940 0000B9E7 6A01                    	push 1
 16941 0000B9E9 E9549E0000              	jmp L_error_incorrect_arity_simple
 16942                                  .L_lambda_simple_arity_check_ok_005c:
 16943 0000B9EE C8000000                	enter 0, 0
 16944 0000B9F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16945 0000B9F7 E88D9E0000              	call malloc
 16946 0000B9FC 50                      	push rax
 16947 0000B9FD BF08000000              	mov rdi, 8 * 1	; new rib
 16948 0000BA02 E8829E0000              	call malloc
 16949 0000BA07 50                      	push rax
 16950 0000BA08 BF10000000              	mov rdi, 8 * 2	; extended env
 16951 0000BA0D E8779E0000              	call malloc
 16952 0000BA12 488B7D10                	mov rdi, ENV
 16953 0000BA16 BE00000000              	mov rsi, 0
 16954 0000BA1B BA01000000              	mov rdx, 1
 16955                                  .L_lambda_simple_env_loop_005d:	; ext_env[i + 1] <-- env[i]
 16956 0000BA20 4883FE01                	cmp rsi, 1
 16957 0000BA24 7410                    	je .L_lambda_simple_env_end_005d
 16958 0000BA26 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16959 0000BA2A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16960 0000BA2E 48FFC6                  	inc rsi
 16961 0000BA31 48FFC2                  	inc rdx
 16962 0000BA34 EBEA                    	jmp .L_lambda_simple_env_loop_005d
 16963                                  .L_lambda_simple_env_end_005d:
 16964 0000BA36 5B                      	pop rbx
 16965 0000BA37 BE00000000              	mov rsi, 0
 16966                                  .L_lambda_simple_params_loop_005d:	; copy params
 16967 0000BA3C 4883FE01                	cmp rsi, 1
 16968 0000BA40 740E                    	je .L_lambda_simple_params_end_005d
 16969 0000BA42 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16970 0000BA47 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16971 0000BA4B 48FFC6                  	inc rsi
 16972 0000BA4E EBEC                    	jmp .L_lambda_simple_params_loop_005d
 16973                                  .L_lambda_simple_params_end_005d:
 16974 0000BA50 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16975 0000BA53 4889C3                  	mov rbx, rax
 16976 0000BA56 58                      	pop rax
 16977 0000BA57 C60004                  	mov byte [rax], T_closure
 16978 0000BA5A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16979 0000BA5E 48C74009[6BBA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005d
 16980 0000BA66 E918010000              	jmp .L_lambda_simple_end_005d
 16981                                  .L_lambda_simple_code_005d:	; lambda-simple body
 16982 0000BA6B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16983 0000BA71 740B                    	je .L_lambda_simple_arity_check_ok_005d
 16984 0000BA73 FF742410                	push qword [rsp + 8 * 2]
 16985 0000BA77 6A01                    	push 1
 16986 0000BA79 E9C49D0000              	jmp L_error_incorrect_arity_simple
 16987                                  .L_lambda_simple_arity_check_ok_005d:
 16988 0000BA7E C8000000                	enter 0, 0
 16989 0000BA82 48B8-                   	mov rax, L_constants + 2540
 16989 0000BA84 [EC09000000000000] 
 16990 0000BA8C 50                      	push rax
 16991 0000BA8D 488B4520                	mov rax, PARAM(0)	; param ch
 16992 0000BA91 50                      	push rax
 16993 0000BA92 48B8-                   	mov rax, L_constants + 2538
 16993 0000BA94 [EA09000000000000] 
 16994 0000BA9C 50                      	push rax
 16995 0000BA9D 6A03                    	push 3	; arg count
 16996 0000BA9F 488B0425[42160000]      	mov rax, qword [free_var_129]	; free var char<=?
 16997 0000BAA7 803805                  	cmp byte [rax], T_undefined
 16998 0000BAAA 0F84AC9C0000            	je L_error_fvar_undefined
 16999 0000BAB0 803804                  	cmp byte [rax], T_closure
 17000 0000BAB3 0F85279D0000            	jne L_error_non_closure
 17001 0000BAB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17002 0000BABC FF5009                  	call SOB_CLOSURE_CODE(rax)
 17003                                  
 17004 0000BABF 483D[02000000]          	cmp rax, sob_boolean_false
 17005 0000BAC5 0F84B0000000            	je .L_if_else_0053
 17006                                  	; preparing a tail-call
 17007 0000BACB 488B4510                	mov rax, ENV
 17008 0000BACF 488B00                  	mov rax, qword [rax + 8 * 0]
 17009 0000BAD2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 17010 0000BAD5 50                      	push rax
 17011 0000BAD6 488B4520                	mov rax, PARAM(0)	; param ch
 17012 0000BADA 50                      	push rax
 17013 0000BADB 6A01                    	push 1	; arg count
 17014 0000BADD 488B0425[490F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17015 0000BAE5 803805                  	cmp byte [rax], T_undefined
 17016 0000BAE8 0F846E9C0000            	je L_error_fvar_undefined
 17017 0000BAEE 803804                  	cmp byte [rax], T_closure
 17018 0000BAF1 0F85E99C0000            	jne L_error_non_closure
 17019 0000BAF7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17020 0000BAFA FF5009                  	call SOB_CLOSURE_CODE(rax)
 17021 0000BAFD 50                      	push rax
 17022 0000BAFE 6A02                    	push 2	; arg count
 17023 0000BB00 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 17024 0000BB08 803805                  	cmp byte [rax], T_undefined
 17025 0000BB0B 0F844B9C0000            	je L_error_fvar_undefined
 17026 0000BB11 803804                  	cmp byte [rax], T_closure
 17027 0000BB14 0F85C69C0000            	jne L_error_non_closure
 17028 0000BB1A FF7001                  	push SOB_CLOSURE_ENV(rax)
 17029 0000BB1D FF5009                  	call SOB_CLOSURE_CODE(rax)
 17030 0000BB20 50                      	push rax
 17031 0000BB21 6A01                    	push 1	; arg count
 17032 0000BB23 488B0425[5A0F0000]      	mov rax, qword [free_var_25]	; free var integer->char
 17033 0000BB2B 803805                  	cmp byte [rax], T_undefined
 17034 0000BB2E 0F84289C0000            	je L_error_fvar_undefined
 17035 0000BB34 803804                  	cmp byte [rax], T_closure
 17036 0000BB37 0F85A39C0000            	jne L_error_non_closure
 17037 0000BB3D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17038                                  
 17039                                  	; recycling the current frame
 17040 0000BB40 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17041 0000BB43 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17042 0000BB46 B905000000              	mov rcx, 1 + 4
 17043 0000BB4B 488B5D18                	mov rbx, COUNT
 17044 0000BB4F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17045 0000BB54 488D55F8                	lea rdx, [rbp - 8 * 1]
 17046                                  .L_tc_recycle_frame_loop_009a:
 17047 0000BB58 4883F900                	cmp rcx, 0
 17048 0000BB5C 7413                    	je .L_tc_recycle_frame_done_009a
 17049 0000BB5E 488B32                  	mov rsi, qword [rdx]
 17050 0000BB61 488933                  	mov qword [rbx], rsi
 17051 0000BB64 48FFC9                  	dec rcx
 17052 0000BB67 4883EB08                	sub rbx, 8 * 1
 17053 0000BB6B 4883EA08                	sub rdx, 8 * 1
 17054 0000BB6F EBE7                    	jmp .L_tc_recycle_frame_loop_009a
 17055                                  .L_tc_recycle_frame_done_009a:
 17056 0000BB71 488D6308                	lea rsp, [rbx + 8 * 1]
 17057 0000BB75 5D                      	pop rbp	; the proc will restore it!
 17058 0000BB76 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17059                                  
 17060 0000BB79 EB04                    	jmp .L_if_end_0053
 17061                                  
 17062                                  	.L_if_else_0053:
 17063 0000BB7B 488B4520                	mov rax, PARAM(0)	; param ch
 17064                                  
 17065                                  	.L_if_end_0053:
 17066 0000BB7F C9                      	leave
 17067 0000BB80 C21800                  	ret AND_KILL_FRAME(1)
 17068                                  .L_lambda_simple_end_005d:	; new closure is in rax
 17069 0000BB83 48890425[86160000]      	mov qword [free_var_133], rax	; free var char-downcase
 17070 0000BB8B 803805                  	cmp byte [rax], T_undefined
 17071 0000BB8E 0F84C89B0000            	je L_error_fvar_undefined
 17072 0000BB94 48B8-                   	mov rax, sob_void
 17072 0000BB96 [0000000000000000] 
 17073                                  
 17074 0000BB9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17075 0000BBA3 E8E19C0000              	call malloc
 17076 0000BBA8 50                      	push rax
 17077 0000BBA9 BF08000000              	mov rdi, 8 * 1	; new rib
 17078 0000BBAE E8D69C0000              	call malloc
 17079 0000BBB3 50                      	push rax
 17080 0000BBB4 BF10000000              	mov rdi, 8 * 2	; extended env
 17081 0000BBB9 E8CB9C0000              	call malloc
 17082 0000BBBE 488B7D10                	mov rdi, ENV
 17083 0000BBC2 BE00000000              	mov rsi, 0
 17084 0000BBC7 BA01000000              	mov rdx, 1
 17085                                  .L_lambda_simple_env_loop_005e:	; ext_env[i + 1] <-- env[i]
 17086 0000BBCC 4883FE01                	cmp rsi, 1
 17087 0000BBD0 7410                    	je .L_lambda_simple_env_end_005e
 17088 0000BBD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17089 0000BBD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17090 0000BBDA 48FFC6                  	inc rsi
 17091 0000BBDD 48FFC2                  	inc rdx
 17092 0000BBE0 EBEA                    	jmp .L_lambda_simple_env_loop_005e
 17093                                  .L_lambda_simple_env_end_005e:
 17094 0000BBE2 5B                      	pop rbx
 17095 0000BBE3 BE00000000              	mov rsi, 0
 17096                                  .L_lambda_simple_params_loop_005e:	; copy params
 17097 0000BBE8 4883FE01                	cmp rsi, 1
 17098 0000BBEC 740E                    	je .L_lambda_simple_params_end_005e
 17099 0000BBEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17100 0000BBF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17101 0000BBF7 48FFC6                  	inc rsi
 17102 0000BBFA EBEC                    	jmp .L_lambda_simple_params_loop_005e
 17103                                  .L_lambda_simple_params_end_005e:
 17104 0000BBFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17105 0000BBFF 4889C3                  	mov rbx, rax
 17106 0000BC02 58                      	pop rax
 17107 0000BC03 C60004                  	mov byte [rax], T_closure
 17108 0000BC06 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17109 0000BC0A 48C74009[17BC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005e
 17110 0000BC12 E918010000              	jmp .L_lambda_simple_end_005e
 17111                                  .L_lambda_simple_code_005e:	; lambda-simple body
 17112 0000BC17 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17113 0000BC1D 740B                    	je .L_lambda_simple_arity_check_ok_005e
 17114 0000BC1F FF742410                	push qword [rsp + 8 * 2]
 17115 0000BC23 6A01                    	push 1
 17116 0000BC25 E9189C0000              	jmp L_error_incorrect_arity_simple
 17117                                  .L_lambda_simple_arity_check_ok_005e:
 17118 0000BC2A C8000000                	enter 0, 0
 17119 0000BC2E 48B8-                   	mov rax, L_constants + 2544
 17119 0000BC30 [F009000000000000] 
 17120 0000BC38 50                      	push rax
 17121 0000BC39 488B4520                	mov rax, PARAM(0)	; param ch
 17122 0000BC3D 50                      	push rax
 17123 0000BC3E 48B8-                   	mov rax, L_constants + 2542
 17123 0000BC40 [EE09000000000000] 
 17124 0000BC48 50                      	push rax
 17125 0000BC49 6A03                    	push 3	; arg count
 17126 0000BC4B 488B0425[42160000]      	mov rax, qword [free_var_129]	; free var char<=?
 17127 0000BC53 803805                  	cmp byte [rax], T_undefined
 17128 0000BC56 0F84009B0000            	je L_error_fvar_undefined
 17129 0000BC5C 803804                  	cmp byte [rax], T_closure
 17130 0000BC5F 0F857B9B0000            	jne L_error_non_closure
 17131 0000BC65 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17132 0000BC68 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17133                                  
 17134 0000BC6B 483D[02000000]          	cmp rax, sob_boolean_false
 17135 0000BC71 0F84B0000000            	je .L_if_else_0054
 17136                                  	; preparing a tail-call
 17137 0000BC77 488B4510                	mov rax, ENV
 17138 0000BC7B 488B00                  	mov rax, qword [rax + 8 * 0]
 17139 0000BC7E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 17140 0000BC81 50                      	push rax
 17141 0000BC82 488B4520                	mov rax, PARAM(0)	; param ch
 17142 0000BC86 50                      	push rax
 17143 0000BC87 6A01                    	push 1	; arg count
 17144 0000BC89 488B0425[490F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17145 0000BC91 803805                  	cmp byte [rax], T_undefined
 17146 0000BC94 0F84C29A0000            	je L_error_fvar_undefined
 17147 0000BC9A 803804                  	cmp byte [rax], T_closure
 17148 0000BC9D 0F853D9B0000            	jne L_error_non_closure
 17149 0000BCA3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17150 0000BCA6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17151 0000BCA9 50                      	push rax
 17152 0000BCAA 6A02                    	push 2	; arg count
 17153 0000BCAC 488B0425[76150000]      	mov rax, qword [free_var_117]	; free var -
 17154 0000BCB4 803805                  	cmp byte [rax], T_undefined
 17155 0000BCB7 0F849F9A0000            	je L_error_fvar_undefined
 17156 0000BCBD 803804                  	cmp byte [rax], T_closure
 17157 0000BCC0 0F851A9B0000            	jne L_error_non_closure
 17158 0000BCC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17159 0000BCC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17160 0000BCCC 50                      	push rax
 17161 0000BCCD 6A01                    	push 1	; arg count
 17162 0000BCCF 488B0425[5A0F0000]      	mov rax, qword [free_var_25]	; free var integer->char
 17163 0000BCD7 803805                  	cmp byte [rax], T_undefined
 17164 0000BCDA 0F847C9A0000            	je L_error_fvar_undefined
 17165 0000BCE0 803804                  	cmp byte [rax], T_closure
 17166 0000BCE3 0F85F79A0000            	jne L_error_non_closure
 17167 0000BCE9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17168                                  
 17169                                  	; recycling the current frame
 17170 0000BCEC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17171 0000BCEF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17172 0000BCF2 B905000000              	mov rcx, 1 + 4
 17173 0000BCF7 488B5D18                	mov rbx, COUNT
 17174 0000BCFB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17175 0000BD00 488D55F8                	lea rdx, [rbp - 8 * 1]
 17176                                  .L_tc_recycle_frame_loop_009b:
 17177 0000BD04 4883F900                	cmp rcx, 0
 17178 0000BD08 7413                    	je .L_tc_recycle_frame_done_009b
 17179 0000BD0A 488B32                  	mov rsi, qword [rdx]
 17180 0000BD0D 488933                  	mov qword [rbx], rsi
 17181 0000BD10 48FFC9                  	dec rcx
 17182 0000BD13 4883EB08                	sub rbx, 8 * 1
 17183 0000BD17 4883EA08                	sub rdx, 8 * 1
 17184 0000BD1B EBE7                    	jmp .L_tc_recycle_frame_loop_009b
 17185                                  .L_tc_recycle_frame_done_009b:
 17186 0000BD1D 488D6308                	lea rsp, [rbx + 8 * 1]
 17187 0000BD21 5D                      	pop rbp	; the proc will restore it!
 17188 0000BD22 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17189                                  
 17190 0000BD25 EB04                    	jmp .L_if_end_0054
 17191                                  
 17192                                  	.L_if_else_0054:
 17193 0000BD27 488B4520                	mov rax, PARAM(0)	; param ch
 17194                                  
 17195                                  	.L_if_end_0054:
 17196 0000BD2B C9                      	leave
 17197 0000BD2C C21800                  	ret AND_KILL_FRAME(1)
 17198                                  .L_lambda_simple_end_005e:	; new closure is in rax
 17199 0000BD2F 48890425[97160000]      	mov qword [free_var_134], rax	; free var char-upcase
 17200 0000BD37 803805                  	cmp byte [rax], T_undefined
 17201 0000BD3A 0F841C9A0000            	je L_error_fvar_undefined
 17202 0000BD40 48B8-                   	mov rax, sob_void
 17202 0000BD42 [0000000000000000] 
 17203 0000BD4A C9                      	leave
 17204 0000BD4B C21800                  	ret AND_KILL_FRAME(1)
 17205                                  .L_lambda_simple_end_005c:	; new closure is in rax
 17206 0000BD4E 803804                  	cmp byte [rax], T_closure
 17207 0000BD51 0F85899A0000            	jne L_error_non_closure
 17208 0000BD57 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17209 0000BD5A FF5009                  	call SOB_CLOSURE_CODE(rax)
 17210                                  
 17211 0000BD5D 4889C7                  	mov rdi, rax
 17212 0000BD60 E8369C0000              	call print_sexpr_if_not_void
 17213                                  
 17214 0000BD65 48B8-                   	mov rax, L_constants + 0
 17214 0000BD67 [0000000000000000] 
 17215 0000BD6F 48890425[A8160000]      	mov qword [free_var_135], rax
 17216 0000BD77 48B8-                   	mov rax, sob_void
 17216 0000BD79 [0000000000000000] 
 17217                                  
 17218 0000BD81 4889C7                  	mov rdi, rax
 17219 0000BD84 E8129C0000              	call print_sexpr_if_not_void
 17220                                  
 17221 0000BD89 48B8-                   	mov rax, L_constants + 0
 17221 0000BD8B [0000000000000000] 
 17222 0000BD93 48890425[B9160000]      	mov qword [free_var_136], rax
 17223 0000BD9B 48B8-                   	mov rax, sob_void
 17223 0000BD9D [0000000000000000] 
 17224                                  
 17225 0000BDA5 4889C7                  	mov rdi, rax
 17226 0000BDA8 E8EE9B0000              	call print_sexpr_if_not_void
 17227                                  
 17228 0000BDAD 48B8-                   	mov rax, L_constants + 0
 17228 0000BDAF [0000000000000000] 
 17229 0000BDB7 48890425[CA160000]      	mov qword [free_var_137], rax
 17230 0000BDBF 48B8-                   	mov rax, sob_void
 17230 0000BDC1 [0000000000000000] 
 17231                                  
 17232 0000BDC9 4889C7                  	mov rdi, rax
 17233 0000BDCC E8CA9B0000              	call print_sexpr_if_not_void
 17234                                  
 17235 0000BDD1 48B8-                   	mov rax, L_constants + 0
 17235 0000BDD3 [0000000000000000] 
 17236 0000BDDB 48890425[DB160000]      	mov qword [free_var_138], rax
 17237 0000BDE3 48B8-                   	mov rax, sob_void
 17237 0000BDE5 [0000000000000000] 
 17238                                  
 17239 0000BDED 4889C7                  	mov rdi, rax
 17240 0000BDF0 E8A69B0000              	call print_sexpr_if_not_void
 17241                                  
 17242 0000BDF5 48B8-                   	mov rax, L_constants + 0
 17242 0000BDF7 [0000000000000000] 
 17243 0000BDFF 48890425[EC160000]      	mov qword [free_var_139], rax
 17244 0000BE07 48B8-                   	mov rax, sob_void
 17244 0000BE09 [0000000000000000] 
 17245                                  
 17246 0000BE11 4889C7                  	mov rdi, rax
 17247 0000BE14 E8829B0000              	call print_sexpr_if_not_void
 17248                                  
 17249 0000BE19 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17250 0000BE1E E8669A0000              	call malloc
 17251 0000BE23 50                      	push rax
 17252 0000BE24 BF00000000              	mov rdi, 8 * 0	; new rib
 17253 0000BE29 E85B9A0000              	call malloc
 17254 0000BE2E 50                      	push rax
 17255 0000BE2F BF08000000              	mov rdi, 8 * 1	; extended env
 17256 0000BE34 E8509A0000              	call malloc
 17257 0000BE39 488B7D10                	mov rdi, ENV
 17258 0000BE3D BE00000000              	mov rsi, 0
 17259 0000BE42 BA01000000              	mov rdx, 1
 17260                                  .L_lambda_simple_env_loop_005f:	; ext_env[i + 1] <-- env[i]
 17261 0000BE47 4883FE00                	cmp rsi, 0
 17262 0000BE4B 7410                    	je .L_lambda_simple_env_end_005f
 17263 0000BE4D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17264 0000BE51 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17265 0000BE55 48FFC6                  	inc rsi
 17266 0000BE58 48FFC2                  	inc rdx
 17267 0000BE5B EBEA                    	jmp .L_lambda_simple_env_loop_005f
 17268                                  .L_lambda_simple_env_end_005f:
 17269 0000BE5D 5B                      	pop rbx
 17270 0000BE5E BE00000000              	mov rsi, 0
 17271                                  .L_lambda_simple_params_loop_005f:	; copy params
 17272 0000BE63 4883FE00                	cmp rsi, 0
 17273 0000BE67 740E                    	je .L_lambda_simple_params_end_005f
 17274 0000BE69 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17275 0000BE6E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17276 0000BE72 48FFC6                  	inc rsi
 17277 0000BE75 EBEC                    	jmp .L_lambda_simple_params_loop_005f
 17278                                  .L_lambda_simple_params_end_005f:
 17279 0000BE77 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17280 0000BE7A 4889C3                  	mov rbx, rax
 17281 0000BE7D 58                      	pop rax
 17282 0000BE7E C60004                  	mov byte [rax], T_closure
 17283 0000BE81 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17284 0000BE85 48C74009[92BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005f
 17285 0000BE8D E90F030000              	jmp .L_lambda_simple_end_005f
 17286                                  .L_lambda_simple_code_005f:	; lambda-simple body
 17287 0000BE92 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17288 0000BE98 740B                    	je .L_lambda_simple_arity_check_ok_005f
 17289 0000BE9A FF742410                	push qword [rsp + 8 * 2]
 17290 0000BE9E 6A01                    	push 1
 17291 0000BEA0 E99D990000              	jmp L_error_incorrect_arity_simple
 17292                                  .L_lambda_simple_arity_check_ok_005f:
 17293 0000BEA5 C8000000                	enter 0, 0
 17294 0000BEA9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17295 0000BEAE E8D6990000              	call malloc
 17296 0000BEB3 50                      	push rax
 17297 0000BEB4 BF08000000              	mov rdi, 8 * 1	; new rib
 17298 0000BEB9 E8CB990000              	call malloc
 17299 0000BEBE 50                      	push rax
 17300 0000BEBF BF10000000              	mov rdi, 8 * 2	; extended env
 17301 0000BEC4 E8C0990000              	call malloc
 17302 0000BEC9 488B7D10                	mov rdi, ENV
 17303 0000BECD BE00000000              	mov rsi, 0
 17304 0000BED2 BA01000000              	mov rdx, 1
 17305                                  .L_lambda_opt_env_loop_0011:	; ext_env[i + 1] <-- env[i]
 17306 0000BED7 4883FE01                	cmp rsi, 1
 17307 0000BEDB 7410                    	je .L_lambda_opt_env_end_0011
 17308 0000BEDD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17309 0000BEE1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17310 0000BEE5 48FFC6                  	inc rsi
 17311 0000BEE8 48FFC2                  	inc rdx
 17312 0000BEEB EBEA                    	jmp .L_lambda_opt_env_loop_0011
 17313                                  .L_lambda_opt_env_end_0011:
 17314 0000BEED 5B                      	pop rbx
 17315 0000BEEE BE00000000              	mov rsi, 0
 17316                                  .L_lambda_opt_params_loop_0011:	; copy params
 17317 0000BEF3 4883FE01                	cmp rsi, 1
 17318 0000BEF7 740E                    	je .L_lambda_opt_params_end_0011
 17319 0000BEF9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17320 0000BEFE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17321 0000BF02 48FFC6                  	inc rsi
 17322 0000BF05 EBEC                    	jmp .L_lambda_opt_params_loop_0011
 17323                                  .L_lambda_opt_params_end_0011:
 17324 0000BF07 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17325 0000BF0A 4889C3                  	mov rbx, rax
 17326 0000BF0D 58                      	pop rax
 17327 0000BF0E C60004                  	mov byte [rax], T_closure
 17328 0000BF11 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17329 0000BF15 48C74009[22BF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0011
 17330 0000BF1D E97B020000              	jmp .L_lambda_opt_end_0011
 17331                                  .L_lambda_opt_code_0011:	; lambda-simple body
 17332 0000BF22 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 17333 0000BF28 740D                    	je .L_lambda_opt_arity_check_exact_0011 ;	 if equal, go to exact arity
 17334 0000BF2A 7F42                    	jg .L_lambda_opt_arity_check_more_0011 ;	 if greater than, go to arity more
 17335 0000BF2C FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 17336 0000BF30 6A00                     	push 0
 17337 0000BF32 E91F990000              	jmp L_error_incorrect_arity_opt
 17338                                  	.L_lambda_opt_arity_check_exact_0011:
 17339 0000BF37 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 17340 0000BF3C 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 17341 0000BF41 4883EC08                	sub rsp, 8
 17342 0000BF45 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 17343                                  	.L_lambda_opt_exact_shifting_loop_0011:
 17344 0000BF49 488B5108                	mov rdx, [rcx + 8]
 17345 0000BF4D 488911                  	mov [rcx], rdx
 17346 0000BF50 4883C108                	add rcx, 8
 17347 0000BF54 4839CB                  	cmp rbx, rcx
 17348 0000BF57 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0011
 17349                                  	.L_lambda_opt_exact_shifting_loop_end_0011:
 17350 0000BF59 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 17351 0000BF60 4883C001                	add rax, 1 ; 	arg count += 1
 17352 0000BF64 4889442410              	mov qword [rsp + 8 * 2], rax
 17353 0000BF69 E987000000              	jmp .L_lambda_opt_stack_adjusted_0011
 17354                                  	.L_lambda_opt_arity_check_more_0011:
 17355 0000BF6E 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 17355 0000BF70 [0100000000000000] 
 17356 0000BF78 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 17357 0000BF7E 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0011
 17358                                  	.L_lambda_opt_stack_shrink_loop_0011:
 17359 0000BF80 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 17360 0000BF85 E8FF980000              	call malloc ;	 allocated memory for the optional scheme list
 17361 0000BF8A C60021                  	mov byte[rax], T_pair ;	 set type pair
 17362 0000BF8D 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 17363 0000BF91 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 17364 0000BF94 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 17365 0000BF99 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 17366 0000BF9E 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 17367 0000BFA2 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 17368                                  	.L_lambda_opt_more_shifting_loop_0011:
 17369 0000BFA7 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 17370 0000BFAA 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 17371 0000BFAE 4883EB08                	sub rbx, 8 
 17372 0000BFB2 4839DC                  	cmp rsp, rbx
 17373 0000BFB5 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0011
 17374                                  	.L_lambda_opt_more_shifting_loop_end_0011:
 17375 0000BFB7 4883C408                	add rsp, 8 ;	 update rsp
 17376 0000BFBB 488B5C2410              	mov rbx, [rsp + 8 * 2]
 17377 0000BFC0 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 17378 0000BFC4 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 17379 0000BFC9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17380 0000BFCF 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0011
 17381                                  	.L_lambda_opt_stack_shrink_loop_exit_0011:
 17382 0000BFD1 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 17383 0000BFD6 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 17384 0000BFDB BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 17385 0000BFE0 E8A4980000              	call malloc ;	 allocated memory for the optional scheme list
 17386 0000BFE5 C60021                  	mov byte[rax], T_pair ;	 set type pair
 17387 0000BFE8 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 17388 0000BFEC 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 17389 0000BFF0 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 17390                                  	.L_lambda_opt_stack_adjusted_0011:
 17391 0000BFF5 C8000000                	enter 0, 0
 17392                                  	; preparing a tail-call
 17393 0000BFF9 488B4520                	mov rax, PARAM(0)	; param s
 17394 0000BFFD 50                      	push rax
 17395 0000BFFE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17396 0000C003 E881980000              	call malloc
 17397 0000C008 50                      	push rax
 17398 0000C009 BF08000000              	mov rdi, 8 * 1	; new rib
 17399 0000C00E E876980000              	call malloc
 17400 0000C013 50                      	push rax
 17401 0000C014 BF18000000              	mov rdi, 8 * 3	; extended env
 17402 0000C019 E86B980000              	call malloc
 17403 0000C01E 488B7D10                	mov rdi, ENV
 17404 0000C022 BE00000000              	mov rsi, 0
 17405 0000C027 BA01000000              	mov rdx, 1
 17406                                  .L_lambda_simple_env_loop_0060:	; ext_env[i + 1] <-- env[i]
 17407 0000C02C 4883FE02                	cmp rsi, 2
 17408 0000C030 7410                    	je .L_lambda_simple_env_end_0060
 17409 0000C032 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17410 0000C036 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17411 0000C03A 48FFC6                  	inc rsi
 17412 0000C03D 48FFC2                  	inc rdx
 17413 0000C040 EBEA                    	jmp .L_lambda_simple_env_loop_0060
 17414                                  .L_lambda_simple_env_end_0060:
 17415 0000C042 5B                      	pop rbx
 17416 0000C043 BE00000000              	mov rsi, 0
 17417                                  .L_lambda_simple_params_loop_0060:	; copy params
 17418 0000C048 4883FE01                	cmp rsi, 1
 17419 0000C04C 740E                    	je .L_lambda_simple_params_end_0060
 17420 0000C04E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17421 0000C053 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17422 0000C057 48FFC6                  	inc rsi
 17423 0000C05A EBEC                    	jmp .L_lambda_simple_params_loop_0060
 17424                                  .L_lambda_simple_params_end_0060:
 17425 0000C05C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17426 0000C05F 4889C3                  	mov rbx, rax
 17427 0000C062 58                      	pop rax
 17428 0000C063 C60004                  	mov byte [rax], T_closure
 17429 0000C066 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17430 0000C06A 48C74009[77C00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0060
 17431 0000C072 E99B000000              	jmp .L_lambda_simple_end_0060
 17432                                  .L_lambda_simple_code_0060:	; lambda-simple body
 17433 0000C077 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17434 0000C07D 740B                    	je .L_lambda_simple_arity_check_ok_0060
 17435 0000C07F FF742410                	push qword [rsp + 8 * 2]
 17436 0000C083 6A01                    	push 1
 17437 0000C085 E9B8970000              	jmp L_error_incorrect_arity_simple
 17438                                  .L_lambda_simple_arity_check_ok_0060:
 17439 0000C08A C8000000                	enter 0, 0
 17440                                  	; preparing a tail-call
 17441 0000C08E 488B4520                	mov rax, PARAM(0)	; param ch
 17442 0000C092 50                      	push rax
 17443 0000C093 6A01                    	push 1	; arg count
 17444 0000C095 488B0425[86160000]      	mov rax, qword [free_var_133]	; free var char-downcase
 17445 0000C09D 803805                  	cmp byte [rax], T_undefined
 17446 0000C0A0 0F84B6960000            	je L_error_fvar_undefined
 17447 0000C0A6 803804                  	cmp byte [rax], T_closure
 17448 0000C0A9 0F8531970000            	jne L_error_non_closure
 17449 0000C0AF FF7001                  	push SOB_CLOSURE_ENV(rax)
 17450 0000C0B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17451 0000C0B5 50                      	push rax
 17452 0000C0B6 6A01                    	push 1	; arg count
 17453 0000C0B8 488B0425[490F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17454 0000C0C0 803805                  	cmp byte [rax], T_undefined
 17455 0000C0C3 0F8493960000            	je L_error_fvar_undefined
 17456 0000C0C9 803804                  	cmp byte [rax], T_closure
 17457 0000C0CC 0F850E970000            	jne L_error_non_closure
 17458 0000C0D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17459                                  
 17460                                  	; recycling the current frame
 17461 0000C0D5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17462 0000C0D8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17463 0000C0DB B905000000              	mov rcx, 1 + 4
 17464 0000C0E0 488B5D18                	mov rbx, COUNT
 17465 0000C0E4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17466 0000C0E9 488D55F8                	lea rdx, [rbp - 8 * 1]
 17467                                  .L_tc_recycle_frame_loop_009c:
 17468 0000C0ED 4883F900                	cmp rcx, 0
 17469 0000C0F1 7413                    	je .L_tc_recycle_frame_done_009c
 17470 0000C0F3 488B32                  	mov rsi, qword [rdx]
 17471 0000C0F6 488933                  	mov qword [rbx], rsi
 17472 0000C0F9 48FFC9                  	dec rcx
 17473 0000C0FC 4883EB08                	sub rbx, 8 * 1
 17474 0000C100 4883EA08                	sub rdx, 8 * 1
 17475 0000C104 EBE7                    	jmp .L_tc_recycle_frame_loop_009c
 17476                                  .L_tc_recycle_frame_done_009c:
 17477 0000C106 488D6308                	lea rsp, [rbx + 8 * 1]
 17478 0000C10A 5D                      	pop rbp	; the proc will restore it!
 17479 0000C10B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17480 0000C10E C9                      	leave
 17481 0000C10F C21800                  	ret AND_KILL_FRAME(1)
 17482                                  .L_lambda_simple_end_0060:	; new closure is in rax
 17483 0000C112 50                      	push rax
 17484 0000C113 6A02                    	push 2	; arg count
 17485 0000C115 488B0425[EE140000]      	mov rax, qword [free_var_109]	; free var map
 17486 0000C11D 803805                  	cmp byte [rax], T_undefined
 17487 0000C120 0F8436960000            	je L_error_fvar_undefined
 17488 0000C126 803804                  	cmp byte [rax], T_closure
 17489 0000C129 0F85B1960000            	jne L_error_non_closure
 17490 0000C12F FF7001                  	push SOB_CLOSURE_ENV(rax)
 17491 0000C132 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17492 0000C135 50                      	push rax
 17493 0000C136 488B4510                	mov rax, ENV
 17494 0000C13A 488B00                  	mov rax, qword [rax + 8 * 0]
 17495 0000C13D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 17496 0000C140 50                      	push rax
 17497 0000C141 6A02                    	push 2	; arg count
 17498 0000C143 488B0425[CC140000]      	mov rax, qword [free_var_107]	; free var apply
 17499 0000C14B 803805                  	cmp byte [rax], T_undefined
 17500 0000C14E 0F8408960000            	je L_error_fvar_undefined
 17501 0000C154 803804                  	cmp byte [rax], T_closure
 17502 0000C157 0F8583960000            	jne L_error_non_closure
 17503 0000C15D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17504                                  
 17505                                  	; recycling the current frame
 17506 0000C160 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17507 0000C163 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17508 0000C166 B906000000              	mov rcx, 2 + 4
 17509 0000C16B 488B5D18                	mov rbx, COUNT
 17510 0000C16F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17511 0000C174 488D55F8                	lea rdx, [rbp - 8 * 1]
 17512                                  .L_tc_recycle_frame_loop_009d:
 17513 0000C178 4883F900                	cmp rcx, 0
 17514 0000C17C 7413                    	je .L_tc_recycle_frame_done_009d
 17515 0000C17E 488B32                  	mov rsi, qword [rdx]
 17516 0000C181 488933                  	mov qword [rbx], rsi
 17517 0000C184 48FFC9                  	dec rcx
 17518 0000C187 4883EB08                	sub rbx, 8 * 1
 17519 0000C18B 4883EA08                	sub rdx, 8 * 1
 17520 0000C18F EBE7                    	jmp .L_tc_recycle_frame_loop_009d
 17521                                  .L_tc_recycle_frame_done_009d:
 17522 0000C191 488D6308                	lea rsp, [rbx + 8 * 1]
 17523 0000C195 5D                      	pop rbp	; the proc will restore it!
 17524 0000C196 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17525 0000C199 C9                      	leave
 17526 0000C19A C21800                  	ret AND_KILL_FRAME(1)
 17527                                  .L_lambda_opt_end_0011:	; new closure is in rax
 17528 0000C19D C9                      	leave
 17529 0000C19E C21800                  	ret AND_KILL_FRAME(1)
 17530                                  .L_lambda_simple_end_005f:	; new closure is in rax
 17531 0000C1A1 50                      	push rax
 17532 0000C1A2 6A01                    	push 1	; arg count
 17533 0000C1A4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17534 0000C1A9 E8DB960000              	call malloc
 17535 0000C1AE 50                      	push rax
 17536 0000C1AF BF00000000              	mov rdi, 8 * 0	; new rib
 17537 0000C1B4 E8D0960000              	call malloc
 17538 0000C1B9 50                      	push rax
 17539 0000C1BA BF08000000              	mov rdi, 8 * 1	; extended env
 17540 0000C1BF E8C5960000              	call malloc
 17541 0000C1C4 488B7D10                	mov rdi, ENV
 17542 0000C1C8 BE00000000              	mov rsi, 0
 17543 0000C1CD BA01000000              	mov rdx, 1
 17544                                  .L_lambda_simple_env_loop_0061:	; ext_env[i + 1] <-- env[i]
 17545 0000C1D2 4883FE00                	cmp rsi, 0
 17546 0000C1D6 7410                    	je .L_lambda_simple_env_end_0061
 17547 0000C1D8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17548 0000C1DC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17549 0000C1E0 48FFC6                  	inc rsi
 17550 0000C1E3 48FFC2                  	inc rdx
 17551 0000C1E6 EBEA                    	jmp .L_lambda_simple_env_loop_0061
 17552                                  .L_lambda_simple_env_end_0061:
 17553 0000C1E8 5B                      	pop rbx
 17554 0000C1E9 BE00000000              	mov rsi, 0
 17555                                  .L_lambda_simple_params_loop_0061:	; copy params
 17556 0000C1EE 4883FE00                	cmp rsi, 0
 17557 0000C1F2 740E                    	je .L_lambda_simple_params_end_0061
 17558 0000C1F4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17559 0000C1F9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17560 0000C1FD 48FFC6                  	inc rsi
 17561 0000C200 EBEC                    	jmp .L_lambda_simple_params_loop_0061
 17562                                  .L_lambda_simple_params_end_0061:
 17563 0000C202 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17564 0000C205 4889C3                  	mov rbx, rax
 17565 0000C208 58                      	pop rax
 17566 0000C209 C60004                  	mov byte [rax], T_closure
 17567 0000C20C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17568 0000C210 48C74009[1DC20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0061
 17569 0000C218 E965010000              	jmp .L_lambda_simple_end_0061
 17570                                  .L_lambda_simple_code_0061:	; lambda-simple body
 17571 0000C21D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17572 0000C223 740B                    	je .L_lambda_simple_arity_check_ok_0061
 17573 0000C225 FF742410                	push qword [rsp + 8 * 2]
 17574 0000C229 6A01                    	push 1
 17575 0000C22B E912960000              	jmp L_error_incorrect_arity_simple
 17576                                  .L_lambda_simple_arity_check_ok_0061:
 17577 0000C230 C8000000                	enter 0, 0
 17578 0000C234 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 17579 0000C23C 803805                  	cmp byte [rax], T_undefined
 17580 0000C23F 0F8417950000            	je L_error_fvar_undefined
 17581 0000C245 50                      	push rax
 17582 0000C246 6A01                    	push 1	; arg count
 17583 0000C248 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17584 0000C24C 803804                  	cmp byte [rax], T_closure
 17585 0000C24F 0F858B950000            	jne L_error_non_closure
 17586 0000C255 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17587 0000C258 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17588 0000C25B 48890425[A8160000]      	mov qword [free_var_135], rax	; free var char-ci<?
 17589 0000C263 803805                  	cmp byte [rax], T_undefined
 17590 0000C266 0F84F0940000            	je L_error_fvar_undefined
 17591 0000C26C 48B8-                   	mov rax, sob_void
 17591 0000C26E [0000000000000000] 
 17592                                  
 17593 0000C276 488B0425[DC150000]      	mov rax, qword [free_var_123]	; free var <=
 17594 0000C27E 803805                  	cmp byte [rax], T_undefined
 17595 0000C281 0F84D5940000            	je L_error_fvar_undefined
 17596 0000C287 50                      	push rax
 17597 0000C288 6A01                    	push 1	; arg count
 17598 0000C28A 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17599 0000C28E 803804                  	cmp byte [rax], T_closure
 17600 0000C291 0F8549950000            	jne L_error_non_closure
 17601 0000C297 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17602 0000C29A FF5009                  	call SOB_CLOSURE_CODE(rax)
 17603 0000C29D 48890425[B9160000]      	mov qword [free_var_136], rax	; free var char-ci<=?
 17604 0000C2A5 803805                  	cmp byte [rax], T_undefined
 17605 0000C2A8 0F84AE940000            	je L_error_fvar_undefined
 17606 0000C2AE 48B8-                   	mov rax, sob_void
 17606 0000C2B0 [0000000000000000] 
 17607                                  
 17608 0000C2B8 488B0425[0F160000]      	mov rax, qword [free_var_126]	; free var =
 17609 0000C2C0 803805                  	cmp byte [rax], T_undefined
 17610 0000C2C3 0F8493940000            	je L_error_fvar_undefined
 17611 0000C2C9 50                      	push rax
 17612 0000C2CA 6A01                    	push 1	; arg count
 17613 0000C2CC 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17614 0000C2D0 803804                  	cmp byte [rax], T_closure
 17615 0000C2D3 0F8507950000            	jne L_error_non_closure
 17616 0000C2D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17617 0000C2DC FF5009                  	call SOB_CLOSURE_CODE(rax)
 17618 0000C2DF 48890425[CA160000]      	mov qword [free_var_137], rax	; free var char-ci=?
 17619 0000C2E7 803805                  	cmp byte [rax], T_undefined
 17620 0000C2EA 0F846C940000            	je L_error_fvar_undefined
 17621 0000C2F0 48B8-                   	mov rax, sob_void
 17621 0000C2F2 [0000000000000000] 
 17622                                  
 17623 0000C2FA 488B0425[ED150000]      	mov rax, qword [free_var_124]	; free var >
 17624 0000C302 803805                  	cmp byte [rax], T_undefined
 17625 0000C305 0F8451940000            	je L_error_fvar_undefined
 17626 0000C30B 50                      	push rax
 17627 0000C30C 6A01                    	push 1	; arg count
 17628 0000C30E 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17629 0000C312 803804                  	cmp byte [rax], T_closure
 17630 0000C315 0F85C5940000            	jne L_error_non_closure
 17631 0000C31B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17632 0000C31E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17633 0000C321 48890425[DB160000]      	mov qword [free_var_138], rax	; free var char-ci>?
 17634 0000C329 803805                  	cmp byte [rax], T_undefined
 17635 0000C32C 0F842A940000            	je L_error_fvar_undefined
 17636 0000C332 48B8-                   	mov rax, sob_void
 17636 0000C334 [0000000000000000] 
 17637                                  
 17638 0000C33C 488B0425[FE150000]      	mov rax, qword [free_var_125]	; free var >=
 17639 0000C344 803805                  	cmp byte [rax], T_undefined
 17640 0000C347 0F840F940000            	je L_error_fvar_undefined
 17641 0000C34D 50                      	push rax
 17642 0000C34E 6A01                    	push 1	; arg count
 17643 0000C350 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17644 0000C354 803804                  	cmp byte [rax], T_closure
 17645 0000C357 0F8583940000            	jne L_error_non_closure
 17646 0000C35D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17647 0000C360 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17648 0000C363 48890425[EC160000]      	mov qword [free_var_139], rax	; free var char-ci>=?
 17649 0000C36B 803805                  	cmp byte [rax], T_undefined
 17650 0000C36E 0F84E8930000            	je L_error_fvar_undefined
 17651 0000C374 48B8-                   	mov rax, sob_void
 17651 0000C376 [0000000000000000] 
 17652 0000C37E C9                      	leave
 17653 0000C37F C21800                  	ret AND_KILL_FRAME(1)
 17654                                  .L_lambda_simple_end_0061:	; new closure is in rax
 17655 0000C382 803804                  	cmp byte [rax], T_closure
 17656 0000C385 0F8555940000            	jne L_error_non_closure
 17657 0000C38B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17658 0000C38E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17659                                  
 17660 0000C391 4889C7                  	mov rdi, rax
 17661 0000C394 E802960000              	call print_sexpr_if_not_void
 17662                                  
 17663 0000C399 48B8-                   	mov rax, L_constants + 0
 17663 0000C39B [0000000000000000] 
 17664 0000C3A3 48890425[FD160000]      	mov qword [free_var_140], rax
 17665 0000C3AB 48B8-                   	mov rax, sob_void
 17665 0000C3AD [0000000000000000] 
 17666                                  
 17667 0000C3B5 4889C7                  	mov rdi, rax
 17668 0000C3B8 E8DE950000              	call print_sexpr_if_not_void
 17669                                  
 17670 0000C3BD 48B8-                   	mov rax, L_constants + 0
 17670 0000C3BF [0000000000000000] 
 17671 0000C3C7 48890425[0E170000]      	mov qword [free_var_141], rax
 17672 0000C3CF 48B8-                   	mov rax, sob_void
 17672 0000C3D1 [0000000000000000] 
 17673                                  
 17674 0000C3D9 4889C7                  	mov rdi, rax
 17675 0000C3DC E8BA950000              	call print_sexpr_if_not_void
 17676                                  
 17677 0000C3E1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17678 0000C3E6 E89E940000              	call malloc
 17679 0000C3EB 50                      	push rax
 17680 0000C3EC BF00000000              	mov rdi, 8 * 0	; new rib
 17681 0000C3F1 E893940000              	call malloc
 17682 0000C3F6 50                      	push rax
 17683 0000C3F7 BF08000000              	mov rdi, 8 * 1	; extended env
 17684 0000C3FC E888940000              	call malloc
 17685 0000C401 488B7D10                	mov rdi, ENV
 17686 0000C405 BE00000000              	mov rsi, 0
 17687 0000C40A BA01000000              	mov rdx, 1
 17688                                  .L_lambda_simple_env_loop_0062:	; ext_env[i + 1] <-- env[i]
 17689 0000C40F 4883FE00                	cmp rsi, 0
 17690 0000C413 7410                    	je .L_lambda_simple_env_end_0062
 17691 0000C415 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17692 0000C419 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17693 0000C41D 48FFC6                  	inc rsi
 17694 0000C420 48FFC2                  	inc rdx
 17695 0000C423 EBEA                    	jmp .L_lambda_simple_env_loop_0062
 17696                                  .L_lambda_simple_env_end_0062:
 17697 0000C425 5B                      	pop rbx
 17698 0000C426 BE00000000              	mov rsi, 0
 17699                                  .L_lambda_simple_params_loop_0062:	; copy params
 17700 0000C42B 4883FE00                	cmp rsi, 0
 17701 0000C42F 740E                    	je .L_lambda_simple_params_end_0062
 17702 0000C431 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17703 0000C436 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17704 0000C43A 48FFC6                  	inc rsi
 17705 0000C43D EBEC                    	jmp .L_lambda_simple_params_loop_0062
 17706                                  .L_lambda_simple_params_end_0062:
 17707 0000C43F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17708 0000C442 4889C3                  	mov rbx, rax
 17709 0000C445 58                      	pop rax
 17710 0000C446 C60004                  	mov byte [rax], T_closure
 17711 0000C449 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17712 0000C44D 48C74009[5AC40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0062
 17713 0000C455 E95D010000              	jmp .L_lambda_simple_end_0062
 17714                                  .L_lambda_simple_code_0062:	; lambda-simple body
 17715 0000C45A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17716 0000C460 740B                    	je .L_lambda_simple_arity_check_ok_0062
 17717 0000C462 FF742410                	push qword [rsp + 8 * 2]
 17718 0000C466 6A01                    	push 1
 17719 0000C468 E9D5930000              	jmp L_error_incorrect_arity_simple
 17720                                  .L_lambda_simple_arity_check_ok_0062:
 17721 0000C46D C8000000                	enter 0, 0
 17722 0000C471 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17723 0000C476 E80E940000              	call malloc
 17724 0000C47B 50                      	push rax
 17725 0000C47C BF08000000              	mov rdi, 8 * 1	; new rib
 17726 0000C481 E803940000              	call malloc
 17727 0000C486 50                      	push rax
 17728 0000C487 BF10000000              	mov rdi, 8 * 2	; extended env
 17729 0000C48C E8F8930000              	call malloc
 17730 0000C491 488B7D10                	mov rdi, ENV
 17731 0000C495 BE00000000              	mov rsi, 0
 17732 0000C49A BA01000000              	mov rdx, 1
 17733                                  .L_lambda_simple_env_loop_0063:	; ext_env[i + 1] <-- env[i]
 17734 0000C49F 4883FE01                	cmp rsi, 1
 17735 0000C4A3 7410                    	je .L_lambda_simple_env_end_0063
 17736 0000C4A5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17737 0000C4A9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17738 0000C4AD 48FFC6                  	inc rsi
 17739 0000C4B0 48FFC2                  	inc rdx
 17740 0000C4B3 EBEA                    	jmp .L_lambda_simple_env_loop_0063
 17741                                  .L_lambda_simple_env_end_0063:
 17742 0000C4B5 5B                      	pop rbx
 17743 0000C4B6 BE00000000              	mov rsi, 0
 17744                                  .L_lambda_simple_params_loop_0063:	; copy params
 17745 0000C4BB 4883FE01                	cmp rsi, 1
 17746 0000C4BF 740E                    	je .L_lambda_simple_params_end_0063
 17747 0000C4C1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17748 0000C4C6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17749 0000C4CA 48FFC6                  	inc rsi
 17750 0000C4CD EBEC                    	jmp .L_lambda_simple_params_loop_0063
 17751                                  .L_lambda_simple_params_end_0063:
 17752 0000C4CF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17753 0000C4D2 4889C3                  	mov rbx, rax
 17754 0000C4D5 58                      	pop rax
 17755 0000C4D6 C60004                  	mov byte [rax], T_closure
 17756 0000C4D9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17757 0000C4DD 48C74009[EAC40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0063
 17758 0000C4E5 E9C9000000              	jmp .L_lambda_simple_end_0063
 17759                                  .L_lambda_simple_code_0063:	; lambda-simple body
 17760 0000C4EA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17761 0000C4F0 740B                    	je .L_lambda_simple_arity_check_ok_0063
 17762 0000C4F2 FF742410                	push qword [rsp + 8 * 2]
 17763 0000C4F6 6A01                    	push 1
 17764 0000C4F8 E945930000              	jmp L_error_incorrect_arity_simple
 17765                                  .L_lambda_simple_arity_check_ok_0063:
 17766 0000C4FD C8000000                	enter 0, 0
 17767                                  	; preparing a tail-call
 17768 0000C501 488B4520                	mov rax, PARAM(0)	; param str
 17769 0000C505 50                      	push rax
 17770 0000C506 6A01                    	push 1	; arg count
 17771 0000C508 488B0425[30170000]      	mov rax, qword [free_var_143]	; free var string->list
 17772 0000C510 803805                  	cmp byte [rax], T_undefined
 17773 0000C513 0F8443920000            	je L_error_fvar_undefined
 17774 0000C519 803804                  	cmp byte [rax], T_closure
 17775 0000C51C 0F85BE920000            	jne L_error_non_closure
 17776 0000C522 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17777 0000C525 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17778 0000C528 50                      	push rax
 17779 0000C529 488B4510                	mov rax, ENV
 17780 0000C52D 488B00                  	mov rax, qword [rax + 8 * 0]
 17781 0000C530 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char-case-converter
 17782 0000C533 50                      	push rax
 17783 0000C534 6A02                    	push 2	; arg count
 17784 0000C536 488B0425[EE140000]      	mov rax, qword [free_var_109]	; free var map
 17785 0000C53E 803805                  	cmp byte [rax], T_undefined
 17786 0000C541 0F8415920000            	je L_error_fvar_undefined
 17787 0000C547 803804                  	cmp byte [rax], T_closure
 17788 0000C54A 0F8590920000            	jne L_error_non_closure
 17789 0000C550 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17790 0000C553 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17791 0000C556 50                      	push rax
 17792 0000C557 6A01                    	push 1	; arg count
 17793 0000C559 488B0425[1F170000]      	mov rax, qword [free_var_142]	; free var list->string
 17794 0000C561 803805                  	cmp byte [rax], T_undefined
 17795 0000C564 0F84F2910000            	je L_error_fvar_undefined
 17796 0000C56A 803804                  	cmp byte [rax], T_closure
 17797 0000C56D 0F856D920000            	jne L_error_non_closure
 17798 0000C573 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17799                                  
 17800                                  	; recycling the current frame
 17801 0000C576 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17802 0000C579 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17803 0000C57C B905000000              	mov rcx, 1 + 4
 17804 0000C581 488B5D18                	mov rbx, COUNT
 17805 0000C585 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17806 0000C58A 488D55F8                	lea rdx, [rbp - 8 * 1]
 17807                                  .L_tc_recycle_frame_loop_009e:
 17808 0000C58E 4883F900                	cmp rcx, 0
 17809 0000C592 7413                    	je .L_tc_recycle_frame_done_009e
 17810 0000C594 488B32                  	mov rsi, qword [rdx]
 17811 0000C597 488933                  	mov qword [rbx], rsi
 17812 0000C59A 48FFC9                  	dec rcx
 17813 0000C59D 4883EB08                	sub rbx, 8 * 1
 17814 0000C5A1 4883EA08                	sub rdx, 8 * 1
 17815 0000C5A5 EBE7                    	jmp .L_tc_recycle_frame_loop_009e
 17816                                  .L_tc_recycle_frame_done_009e:
 17817 0000C5A7 488D6308                	lea rsp, [rbx + 8 * 1]
 17818 0000C5AB 5D                      	pop rbp	; the proc will restore it!
 17819 0000C5AC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17820 0000C5AF C9                      	leave
 17821 0000C5B0 C21800                  	ret AND_KILL_FRAME(1)
 17822                                  .L_lambda_simple_end_0063:	; new closure is in rax
 17823 0000C5B3 C9                      	leave
 17824 0000C5B4 C21800                  	ret AND_KILL_FRAME(1)
 17825                                  .L_lambda_simple_end_0062:	; new closure is in rax
 17826 0000C5B7 50                      	push rax
 17827 0000C5B8 6A01                    	push 1	; arg count
 17828 0000C5BA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17829 0000C5BF E8C5920000              	call malloc
 17830 0000C5C4 50                      	push rax
 17831 0000C5C5 BF00000000              	mov rdi, 8 * 0	; new rib
 17832 0000C5CA E8BA920000              	call malloc
 17833 0000C5CF 50                      	push rax
 17834 0000C5D0 BF08000000              	mov rdi, 8 * 1	; extended env
 17835 0000C5D5 E8AF920000              	call malloc
 17836 0000C5DA 488B7D10                	mov rdi, ENV
 17837 0000C5DE BE00000000              	mov rsi, 0
 17838 0000C5E3 BA01000000              	mov rdx, 1
 17839                                  .L_lambda_simple_env_loop_0064:	; ext_env[i + 1] <-- env[i]
 17840 0000C5E8 4883FE00                	cmp rsi, 0
 17841 0000C5EC 7410                    	je .L_lambda_simple_env_end_0064
 17842 0000C5EE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17843 0000C5F2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17844 0000C5F6 48FFC6                  	inc rsi
 17845 0000C5F9 48FFC2                  	inc rdx
 17846 0000C5FC EBEA                    	jmp .L_lambda_simple_env_loop_0064
 17847                                  .L_lambda_simple_env_end_0064:
 17848 0000C5FE 5B                      	pop rbx
 17849 0000C5FF BE00000000              	mov rsi, 0
 17850                                  .L_lambda_simple_params_loop_0064:	; copy params
 17851 0000C604 4883FE00                	cmp rsi, 0
 17852 0000C608 740E                    	je .L_lambda_simple_params_end_0064
 17853 0000C60A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17854 0000C60F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17855 0000C613 48FFC6                  	inc rsi
 17856 0000C616 EBEC                    	jmp .L_lambda_simple_params_loop_0064
 17857                                  .L_lambda_simple_params_end_0064:
 17858 0000C618 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17859 0000C61B 4889C3                  	mov rbx, rax
 17860 0000C61E 58                      	pop rax
 17861 0000C61F C60004                  	mov byte [rax], T_closure
 17862 0000C622 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17863 0000C626 48C74009[33C60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0064
 17864 0000C62E E99F000000              	jmp .L_lambda_simple_end_0064
 17865                                  .L_lambda_simple_code_0064:	; lambda-simple body
 17866 0000C633 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17867 0000C639 740B                    	je .L_lambda_simple_arity_check_ok_0064
 17868 0000C63B FF742410                	push qword [rsp + 8 * 2]
 17869 0000C63F 6A01                    	push 1
 17870 0000C641 E9FC910000              	jmp L_error_incorrect_arity_simple
 17871                                  .L_lambda_simple_arity_check_ok_0064:
 17872 0000C646 C8000000                	enter 0, 0
 17873 0000C64A 488B0425[86160000]      	mov rax, qword [free_var_133]	; free var char-downcase
 17874 0000C652 803805                  	cmp byte [rax], T_undefined
 17875 0000C655 0F8401910000            	je L_error_fvar_undefined
 17876 0000C65B 50                      	push rax
 17877 0000C65C 6A01                    	push 1	; arg count
 17878 0000C65E 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 17879 0000C662 803804                  	cmp byte [rax], T_closure
 17880 0000C665 0F8575910000            	jne L_error_non_closure
 17881 0000C66B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17882 0000C66E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17883 0000C671 48890425[FD160000]      	mov qword [free_var_140], rax	; free var string-downcase
 17884 0000C679 803805                  	cmp byte [rax], T_undefined
 17885 0000C67C 0F84DA900000            	je L_error_fvar_undefined
 17886 0000C682 48B8-                   	mov rax, sob_void
 17886 0000C684 [0000000000000000] 
 17887                                  
 17888 0000C68C 488B0425[97160000]      	mov rax, qword [free_var_134]	; free var char-upcase
 17889 0000C694 803805                  	cmp byte [rax], T_undefined
 17890 0000C697 0F84BF900000            	je L_error_fvar_undefined
 17891 0000C69D 50                      	push rax
 17892 0000C69E 6A01                    	push 1	; arg count
 17893 0000C6A0 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 17894 0000C6A4 803804                  	cmp byte [rax], T_closure
 17895 0000C6A7 0F8533910000            	jne L_error_non_closure
 17896 0000C6AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 17897 0000C6B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17898 0000C6B3 48890425[0E170000]      	mov qword [free_var_141], rax	; free var string-upcase
 17899 0000C6BB 803805                  	cmp byte [rax], T_undefined
 17900 0000C6BE 0F8498900000            	je L_error_fvar_undefined
 17901 0000C6C4 48B8-                   	mov rax, sob_void
 17901 0000C6C6 [0000000000000000] 
 17902 0000C6CE C9                      	leave
 17903 0000C6CF C21800                  	ret AND_KILL_FRAME(1)
 17904                                  .L_lambda_simple_end_0064:	; new closure is in rax
 17905 0000C6D2 803804                  	cmp byte [rax], T_closure
 17906 0000C6D5 0F8505910000            	jne L_error_non_closure
 17907 0000C6DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 17908 0000C6DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 17909                                  
 17910 0000C6E1 4889C7                  	mov rdi, rax
 17911 0000C6E4 E8B2920000              	call print_sexpr_if_not_void
 17912                                  
 17913 0000C6E9 48B8-                   	mov rax, L_constants + 0
 17913 0000C6EB [0000000000000000] 
 17914 0000C6F3 48890425[41170000]      	mov qword [free_var_144], rax
 17915 0000C6FB 48B8-                   	mov rax, sob_void
 17915 0000C6FD [0000000000000000] 
 17916                                  
 17917 0000C705 4889C7                  	mov rdi, rax
 17918 0000C708 E88E920000              	call print_sexpr_if_not_void
 17919                                  
 17920 0000C70D 48B8-                   	mov rax, L_constants + 0
 17920 0000C70F [0000000000000000] 
 17921 0000C717 48890425[52170000]      	mov qword [free_var_145], rax
 17922 0000C71F 48B8-                   	mov rax, sob_void
 17922 0000C721 [0000000000000000] 
 17923                                  
 17924 0000C729 4889C7                  	mov rdi, rax
 17925 0000C72C E86A920000              	call print_sexpr_if_not_void
 17926                                  
 17927 0000C731 48B8-                   	mov rax, L_constants + 0
 17927 0000C733 [0000000000000000] 
 17928 0000C73B 48890425[63170000]      	mov qword [free_var_146], rax
 17929 0000C743 48B8-                   	mov rax, sob_void
 17929 0000C745 [0000000000000000] 
 17930                                  
 17931 0000C74D 4889C7                  	mov rdi, rax
 17932 0000C750 E846920000              	call print_sexpr_if_not_void
 17933                                  
 17934 0000C755 48B8-                   	mov rax, L_constants + 0
 17934 0000C757 [0000000000000000] 
 17935 0000C75F 48890425[74170000]      	mov qword [free_var_147], rax
 17936 0000C767 48B8-                   	mov rax, sob_void
 17936 0000C769 [0000000000000000] 
 17937                                  
 17938 0000C771 4889C7                  	mov rdi, rax
 17939 0000C774 E822920000              	call print_sexpr_if_not_void
 17940                                  
 17941 0000C779 48B8-                   	mov rax, L_constants + 0
 17941 0000C77B [0000000000000000] 
 17942 0000C783 48890425[85170000]      	mov qword [free_var_148], rax
 17943 0000C78B 48B8-                   	mov rax, sob_void
 17943 0000C78D [0000000000000000] 
 17944                                  
 17945 0000C795 4889C7                  	mov rdi, rax
 17946 0000C798 E8FE910000              	call print_sexpr_if_not_void
 17947                                  
 17948 0000C79D 48B8-                   	mov rax, L_constants + 0
 17948 0000C79F [0000000000000000] 
 17949 0000C7A7 48890425[96170000]      	mov qword [free_var_149], rax
 17950 0000C7AF 48B8-                   	mov rax, sob_void
 17950 0000C7B1 [0000000000000000] 
 17951                                  
 17952 0000C7B9 4889C7                  	mov rdi, rax
 17953 0000C7BC E8DA910000              	call print_sexpr_if_not_void
 17954                                  
 17955 0000C7C1 48B8-                   	mov rax, L_constants + 0
 17955 0000C7C3 [0000000000000000] 
 17956 0000C7CB 48890425[A7170000]      	mov qword [free_var_150], rax
 17957 0000C7D3 48B8-                   	mov rax, sob_void
 17957 0000C7D5 [0000000000000000] 
 17958                                  
 17959 0000C7DD 4889C7                  	mov rdi, rax
 17960 0000C7E0 E8B6910000              	call print_sexpr_if_not_void
 17961                                  
 17962 0000C7E5 48B8-                   	mov rax, L_constants + 0
 17962 0000C7E7 [0000000000000000] 
 17963 0000C7EF 48890425[B8170000]      	mov qword [free_var_151], rax
 17964 0000C7F7 48B8-                   	mov rax, sob_void
 17964 0000C7F9 [0000000000000000] 
 17965                                  
 17966 0000C801 4889C7                  	mov rdi, rax
 17967 0000C804 E892910000              	call print_sexpr_if_not_void
 17968                                  
 17969 0000C809 48B8-                   	mov rax, L_constants + 0
 17969 0000C80B [0000000000000000] 
 17970 0000C813 48890425[C9170000]      	mov qword [free_var_152], rax
 17971 0000C81B 48B8-                   	mov rax, sob_void
 17971 0000C81D [0000000000000000] 
 17972                                  
 17973 0000C825 4889C7                  	mov rdi, rax
 17974 0000C828 E86E910000              	call print_sexpr_if_not_void
 17975                                  
 17976 0000C82D 48B8-                   	mov rax, L_constants + 0
 17976 0000C82F [0000000000000000] 
 17977 0000C837 48890425[DA170000]      	mov qword [free_var_153], rax
 17978 0000C83F 48B8-                   	mov rax, sob_void
 17978 0000C841 [0000000000000000] 
 17979                                  
 17980 0000C849 4889C7                  	mov rdi, rax
 17981 0000C84C E84A910000              	call print_sexpr_if_not_void
 17982                                  
 17983 0000C851 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17984 0000C856 E82E900000              	call malloc
 17985 0000C85B 50                      	push rax
 17986 0000C85C BF00000000              	mov rdi, 8 * 0	; new rib
 17987 0000C861 E823900000              	call malloc
 17988 0000C866 50                      	push rax
 17989 0000C867 BF08000000              	mov rdi, 8 * 1	; extended env
 17990 0000C86C E818900000              	call malloc
 17991 0000C871 488B7D10                	mov rdi, ENV
 17992 0000C875 BE00000000              	mov rsi, 0
 17993 0000C87A BA01000000              	mov rdx, 1
 17994                                  .L_lambda_simple_env_loop_0065:	; ext_env[i + 1] <-- env[i]
 17995 0000C87F 4883FE00                	cmp rsi, 0
 17996 0000C883 7410                    	je .L_lambda_simple_env_end_0065
 17997 0000C885 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17998 0000C889 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17999 0000C88D 48FFC6                  	inc rsi
 18000 0000C890 48FFC2                  	inc rdx
 18001 0000C893 EBEA                    	jmp .L_lambda_simple_env_loop_0065
 18002                                  .L_lambda_simple_env_end_0065:
 18003 0000C895 5B                      	pop rbx
 18004 0000C896 BE00000000              	mov rsi, 0
 18005                                  .L_lambda_simple_params_loop_0065:	; copy params
 18006 0000C89B 4883FE00                	cmp rsi, 0
 18007 0000C89F 740E                    	je .L_lambda_simple_params_end_0065
 18008 0000C8A1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18009 0000C8A6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18010 0000C8AA 48FFC6                  	inc rsi
 18011 0000C8AD EBEC                    	jmp .L_lambda_simple_params_loop_0065
 18012                                  .L_lambda_simple_params_end_0065:
 18013 0000C8AF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18014 0000C8B2 4889C3                  	mov rbx, rax
 18015 0000C8B5 58                      	pop rax
 18016 0000C8B6 C60004                  	mov byte [rax], T_closure
 18017 0000C8B9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18018 0000C8BD 48C74009[CAC80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0065
 18019 0000C8C5 E99B0C0000              	jmp .L_lambda_simple_end_0065
 18020                                  .L_lambda_simple_code_0065:	; lambda-simple body
 18021 0000C8CA 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18022 0000C8D0 740B                    	je .L_lambda_simple_arity_check_ok_0065
 18023 0000C8D2 FF742410                	push qword [rsp + 8 * 2]
 18024 0000C8D6 6A02                    	push 2
 18025 0000C8D8 E9658F0000              	jmp L_error_incorrect_arity_simple
 18026                                  .L_lambda_simple_arity_check_ok_0065:
 18027 0000C8DD C8000000                	enter 0, 0
 18028                                  	; preparing a tail-call
 18029 0000C8E1 48B8-                   	mov rax, L_constants + 1881
 18029 0000C8E3 [5907000000000000] 
 18030 0000C8EB 50                      	push rax
 18031 0000C8EC 6A01                    	push 1	; arg count
 18032 0000C8EE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18033 0000C8F3 E8918F0000              	call malloc
 18034 0000C8F8 50                      	push rax
 18035 0000C8F9 BF10000000              	mov rdi, 8 * 2	; new rib
 18036 0000C8FE E8868F0000              	call malloc
 18037 0000C903 50                      	push rax
 18038 0000C904 BF10000000              	mov rdi, 8 * 2	; extended env
 18039 0000C909 E87B8F0000              	call malloc
 18040 0000C90E 488B7D10                	mov rdi, ENV
 18041 0000C912 BE00000000              	mov rsi, 0
 18042 0000C917 BA01000000              	mov rdx, 1
 18043                                  .L_lambda_simple_env_loop_0066:	; ext_env[i + 1] <-- env[i]
 18044 0000C91C 4883FE01                	cmp rsi, 1
 18045 0000C920 7410                    	je .L_lambda_simple_env_end_0066
 18046 0000C922 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18047 0000C926 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18048 0000C92A 48FFC6                  	inc rsi
 18049 0000C92D 48FFC2                  	inc rdx
 18050 0000C930 EBEA                    	jmp .L_lambda_simple_env_loop_0066
 18051                                  .L_lambda_simple_env_end_0066:
 18052 0000C932 5B                      	pop rbx
 18053 0000C933 BE00000000              	mov rsi, 0
 18054                                  .L_lambda_simple_params_loop_0066:	; copy params
 18055 0000C938 4883FE02                	cmp rsi, 2
 18056 0000C93C 740E                    	je .L_lambda_simple_params_end_0066
 18057 0000C93E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18058 0000C943 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18059 0000C947 48FFC6                  	inc rsi
 18060 0000C94A EBEC                    	jmp .L_lambda_simple_params_loop_0066
 18061                                  .L_lambda_simple_params_end_0066:
 18062 0000C94C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18063 0000C94F 4889C3                  	mov rbx, rax
 18064 0000C952 58                      	pop rax
 18065 0000C953 C60004                  	mov byte [rax], T_closure
 18066 0000C956 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18067 0000C95A 48C74009[67C90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0066
 18068 0000C962 E9B50B0000              	jmp .L_lambda_simple_end_0066
 18069                                  .L_lambda_simple_code_0066:	; lambda-simple body
 18070 0000C967 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18071 0000C96D 740B                    	je .L_lambda_simple_arity_check_ok_0066
 18072 0000C96F FF742410                	push qword [rsp + 8 * 2]
 18073 0000C973 6A01                    	push 1
 18074 0000C975 E9C88E0000              	jmp L_error_incorrect_arity_simple
 18075                                  .L_lambda_simple_arity_check_ok_0066:
 18076 0000C97A C8000000                	enter 0, 0
 18077                                  
 18078 0000C97E BF08000000              	mov rdi, 8
 18079 0000C983 E8018F0000              	call malloc
 18080 0000C988 488B5D20                	mov rbx, PARAM(0)	; param run
 18081 0000C98C 488918                  	mov [rax], rbx	; box run
 18082 0000C98F 48894520                	mov PARAM(0), rax	;replace param run with box
 18083 0000C993 48B8-                   	mov rax, sob_void
 18083 0000C995 [0000000000000000] 
 18084                                  
 18085 0000C99D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18086 0000C9A2 E8E28E0000              	call malloc
 18087 0000C9A7 50                      	push rax
 18088 0000C9A8 BF08000000              	mov rdi, 8 * 1	; new rib
 18089 0000C9AD E8D78E0000              	call malloc
 18090 0000C9B2 50                      	push rax
 18091 0000C9B3 BF18000000              	mov rdi, 8 * 3	; extended env
 18092 0000C9B8 E8CC8E0000              	call malloc
 18093 0000C9BD 488B7D10                	mov rdi, ENV
 18094 0000C9C1 BE00000000              	mov rsi, 0
 18095 0000C9C6 BA01000000              	mov rdx, 1
 18096                                  .L_lambda_simple_env_loop_0067:	; ext_env[i + 1] <-- env[i]
 18097 0000C9CB 4883FE02                	cmp rsi, 2
 18098 0000C9CF 7410                    	je .L_lambda_simple_env_end_0067
 18099 0000C9D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18100 0000C9D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18101 0000C9D9 48FFC6                  	inc rsi
 18102 0000C9DC 48FFC2                  	inc rdx
 18103 0000C9DF EBEA                    	jmp .L_lambda_simple_env_loop_0067
 18104                                  .L_lambda_simple_env_end_0067:
 18105 0000C9E1 5B                      	pop rbx
 18106 0000C9E2 BE00000000              	mov rsi, 0
 18107                                  .L_lambda_simple_params_loop_0067:	; copy params
 18108 0000C9E7 4883FE01                	cmp rsi, 1
 18109 0000C9EB 740E                    	je .L_lambda_simple_params_end_0067
 18110 0000C9ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18111 0000C9F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18112 0000C9F6 48FFC6                  	inc rsi
 18113 0000C9F9 EBEC                    	jmp .L_lambda_simple_params_loop_0067
 18114                                  .L_lambda_simple_params_end_0067:
 18115 0000C9FB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18116 0000C9FE 4889C3                  	mov rbx, rax
 18117 0000CA01 58                      	pop rax
 18118 0000CA02 C60004                  	mov byte [rax], T_closure
 18119 0000CA05 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18120 0000CA09 48C74009[16CA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0067
 18121 0000CA11 E983020000              	jmp .L_lambda_simple_end_0067
 18122                                  .L_lambda_simple_code_0067:	; lambda-simple body
 18123 0000CA16 48837C241005            	cmp qword [rsp + 8 * 2], 5
 18124 0000CA1C 740B                    	je .L_lambda_simple_arity_check_ok_0067
 18125 0000CA1E FF742410                	push qword [rsp + 8 * 2]
 18126 0000CA22 6A05                    	push 5
 18127 0000CA24 E9198E0000              	jmp L_error_incorrect_arity_simple
 18128                                  .L_lambda_simple_arity_check_ok_0067:
 18129 0000CA29 C8000000                	enter 0, 0
 18130 0000CA2D 488B4530                	mov rax, PARAM(2)	; param len1
 18131 0000CA31 50                      	push rax
 18132 0000CA32 488B4520                	mov rax, PARAM(0)	; param i
 18133 0000CA36 50                      	push rax
 18134 0000CA37 6A02                    	push 2	; arg count
 18135 0000CA39 488B0425[0F160000]      	mov rax, qword [free_var_126]	; free var =
 18136 0000CA41 803805                  	cmp byte [rax], T_undefined
 18137 0000CA44 0F84128D0000            	je L_error_fvar_undefined
 18138 0000CA4A 803804                  	cmp byte [rax], T_closure
 18139 0000CA4D 0F858D8D0000            	jne L_error_non_closure
 18140 0000CA53 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18141 0000CA56 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18142                                  
 18143 0000CA59 483D[02000000]          	cmp rax, sob_boolean_false
 18144 0000CA5F 742E                    	je .L_if_else_0055
 18145 0000CA61 488B4540                	mov rax, PARAM(4)	; param len2
 18146 0000CA65 50                      	push rax
 18147 0000CA66 488B4530                	mov rax, PARAM(2)	; param len1
 18148 0000CA6A 50                      	push rax
 18149 0000CA6B 6A02                    	push 2	; arg count
 18150 0000CA6D 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 18151 0000CA75 803805                  	cmp byte [rax], T_undefined
 18152 0000CA78 0F84DE8C0000            	je L_error_fvar_undefined
 18153 0000CA7E 803804                  	cmp byte [rax], T_closure
 18154 0000CA81 0F85598D0000            	jne L_error_non_closure
 18155 0000CA87 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18156 0000CA8A FF5009                  	call SOB_CLOSURE_CODE(rax)
 18157                                  
 18158 0000CA8D EB0A                    	jmp .L_if_end_0055
 18159                                  
 18160                                  	.L_if_else_0055:
 18161 0000CA8F 48B8-                   	mov rax, L_constants + 2
 18161 0000CA91 [0200000000000000] 
 18162                                  
 18163                                  	.L_if_end_0055:
 18164 0000CA99 483D[02000000]          	cmp rax, sob_boolean_false
 18165 0000CA9F 0F85F0010000            	jne .L_or_end_0006
 18166 0000CAA5 488B4530                	mov rax, PARAM(2)	; param len1
 18167 0000CAA9 50                      	push rax
 18168 0000CAAA 488B4520                	mov rax, PARAM(0)	; param i
 18169 0000CAAE 50                      	push rax
 18170 0000CAAF 6A02                    	push 2	; arg count
 18171 0000CAB1 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 18172 0000CAB9 803805                  	cmp byte [rax], T_undefined
 18173 0000CABC 0F849A8C0000            	je L_error_fvar_undefined
 18174 0000CAC2 803804                  	cmp byte [rax], T_closure
 18175 0000CAC5 0F85158D0000            	jne L_error_non_closure
 18176 0000CACB FF7001                  	push SOB_CLOSURE_ENV(rax)
 18177 0000CACE FF5009                  	call SOB_CLOSURE_CODE(rax)
 18178                                  
 18179 0000CAD1 483D[02000000]          	cmp rax, sob_boolean_false
 18180 0000CAD7 0F84AE010000            	je .L_if_else_0056
 18181 0000CADD 488B4520                	mov rax, PARAM(0)	; param i
 18182 0000CAE1 50                      	push rax
 18183 0000CAE2 488B4538                	mov rax, PARAM(3)	; param str2
 18184 0000CAE6 50                      	push rax
 18185 0000CAE7 6A02                    	push 2	; arg count
 18186 0000CAE9 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18187 0000CAF1 803805                  	cmp byte [rax], T_undefined
 18188 0000CAF4 0F84628C0000            	je L_error_fvar_undefined
 18189 0000CAFA 803804                  	cmp byte [rax], T_closure
 18190 0000CAFD 0F85DD8C0000            	jne L_error_non_closure
 18191 0000CB03 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18192 0000CB06 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18193 0000CB09 50                      	push rax
 18194 0000CB0A 488B4520                	mov rax, PARAM(0)	; param i
 18195 0000CB0E 50                      	push rax
 18196 0000CB0F 488B4528                	mov rax, PARAM(1)	; param str1
 18197 0000CB13 50                      	push rax
 18198 0000CB14 6A02                    	push 2	; arg count
 18199 0000CB16 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18200 0000CB1E 803805                  	cmp byte [rax], T_undefined
 18201 0000CB21 0F84358C0000            	je L_error_fvar_undefined
 18202 0000CB27 803804                  	cmp byte [rax], T_closure
 18203 0000CB2A 0F85B08C0000            	jne L_error_non_closure
 18204 0000CB30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18205 0000CB33 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18206 0000CB36 50                      	push rax
 18207 0000CB37 6A02                    	push 2	; arg count
 18208 0000CB39 488B4510                	mov rax, ENV
 18209 0000CB3D 488B4008                	mov rax, qword [rax + 8 * 1]
 18210 0000CB41 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 18211 0000CB44 803804                  	cmp byte [rax], T_closure
 18212 0000CB47 0F85938C0000            	jne L_error_non_closure
 18213 0000CB4D FF7001                  	push SOB_CLOSURE_ENV(rax)
 18214 0000CB50 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18215 0000CB53 483D[02000000]          	cmp rax, sob_boolean_false
 18216 0000CB59 0F852A010000            	jne .L_or_end_0007
 18217 0000CB5F 488B4520                	mov rax, PARAM(0)	; param i
 18218 0000CB63 50                      	push rax
 18219 0000CB64 488B4538                	mov rax, PARAM(3)	; param str2
 18220 0000CB68 50                      	push rax
 18221 0000CB69 6A02                    	push 2	; arg count
 18222 0000CB6B 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18223 0000CB73 803805                  	cmp byte [rax], T_undefined
 18224 0000CB76 0F84E08B0000            	je L_error_fvar_undefined
 18225 0000CB7C 803804                  	cmp byte [rax], T_closure
 18226 0000CB7F 0F855B8C0000            	jne L_error_non_closure
 18227 0000CB85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18228 0000CB88 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18229 0000CB8B 50                      	push rax
 18230 0000CB8C 488B4520                	mov rax, PARAM(0)	; param i
 18231 0000CB90 50                      	push rax
 18232 0000CB91 488B4528                	mov rax, PARAM(1)	; param str1
 18233 0000CB95 50                      	push rax
 18234 0000CB96 6A02                    	push 2	; arg count
 18235 0000CB98 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18236 0000CBA0 803805                  	cmp byte [rax], T_undefined
 18237 0000CBA3 0F84B38B0000            	je L_error_fvar_undefined
 18238 0000CBA9 803804                  	cmp byte [rax], T_closure
 18239 0000CBAC 0F852E8C0000            	jne L_error_non_closure
 18240 0000CBB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18241 0000CBB5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18242 0000CBB8 50                      	push rax
 18243 0000CBB9 6A02                    	push 2	; arg count
 18244 0000CBBB 488B4510                	mov rax, ENV
 18245 0000CBBF 488B4008                	mov rax, qword [rax + 8 * 1]
 18246 0000CBC3 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 18247 0000CBC7 803804                  	cmp byte [rax], T_closure
 18248 0000CBCA 0F85108C0000            	jne L_error_non_closure
 18249 0000CBD0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18250 0000CBD3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18251                                  
 18252 0000CBD6 483D[02000000]          	cmp rax, sob_boolean_false
 18253 0000CBDC 0F849D000000            	je .L_if_else_0057
 18254                                  	; preparing a tail-call
 18255 0000CBE2 488B4540                	mov rax, PARAM(4)	; param len2
 18256 0000CBE6 50                      	push rax
 18257 0000CBE7 488B4538                	mov rax, PARAM(3)	; param str2
 18258 0000CBEB 50                      	push rax
 18259 0000CBEC 488B4530                	mov rax, PARAM(2)	; param len1
 18260 0000CBF0 50                      	push rax
 18261 0000CBF1 488B4528                	mov rax, PARAM(1)	; param str1
 18262 0000CBF5 50                      	push rax
 18263 0000CBF6 48B8-                   	mov rax, L_constants + 2158
 18263 0000CBF8 [6E08000000000000] 
 18264 0000CC00 50                      	push rax
 18265 0000CC01 488B4520                	mov rax, PARAM(0)	; param i
 18266 0000CC05 50                      	push rax
 18267 0000CC06 6A02                    	push 2	; arg count
 18268 0000CC08 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 18269 0000CC10 803805                  	cmp byte [rax], T_undefined
 18270 0000CC13 0F84438B0000            	je L_error_fvar_undefined
 18271 0000CC19 803804                  	cmp byte [rax], T_closure
 18272 0000CC1C 0F85BE8B0000            	jne L_error_non_closure
 18273 0000CC22 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18274 0000CC25 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18275 0000CC28 50                      	push rax
 18276 0000CC29 6A05                    	push 5	; arg count
 18277 0000CC2B 488B4510                	mov rax, ENV
 18278 0000CC2F 488B00                  	mov rax, qword [rax + 8 * 0]
 18279 0000CC32 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18280 0000CC35 488B00                  	mov rax, qword [rax]
 18281 0000CC38 803804                  	cmp byte [rax], T_closure
 18282 0000CC3B 0F859F8B0000            	jne L_error_non_closure
 18283 0000CC41 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18284                                  
 18285                                  	; recycling the current frame
 18286 0000CC44 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18287 0000CC47 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18288 0000CC4A B909000000              	mov rcx, 5 + 4
 18289 0000CC4F 488B5D18                	mov rbx, COUNT
 18290 0000CC53 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18291 0000CC58 488D55F8                	lea rdx, [rbp - 8 * 1]
 18292                                  .L_tc_recycle_frame_loop_009f:
 18293 0000CC5C 4883F900                	cmp rcx, 0
 18294 0000CC60 7413                    	je .L_tc_recycle_frame_done_009f
 18295 0000CC62 488B32                  	mov rsi, qword [rdx]
 18296 0000CC65 488933                  	mov qword [rbx], rsi
 18297 0000CC68 48FFC9                  	dec rcx
 18298 0000CC6B 4883EB08                	sub rbx, 8 * 1
 18299 0000CC6F 4883EA08                	sub rdx, 8 * 1
 18300 0000CC73 EBE7                    	jmp .L_tc_recycle_frame_loop_009f
 18301                                  .L_tc_recycle_frame_done_009f:
 18302 0000CC75 488D6308                	lea rsp, [rbx + 8 * 1]
 18303 0000CC79 5D                      	pop rbp	; the proc will restore it!
 18304 0000CC7A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18305                                  
 18306 0000CC7D EB0A                    	jmp .L_if_end_0057
 18307                                  
 18308                                  	.L_if_else_0057:
 18309 0000CC7F 48B8-                   	mov rax, L_constants + 2
 18309 0000CC81 [0200000000000000] 
 18310                                  
 18311                                  	.L_if_end_0057:
 18312                                  .L_or_end_0007:
 18313                                  
 18314 0000CC89 EB0A                    	jmp .L_if_end_0056
 18315                                  
 18316                                  	.L_if_else_0056:
 18317 0000CC8B 48B8-                   	mov rax, L_constants + 2
 18317 0000CC8D [0200000000000000] 
 18318                                  
 18319                                  	.L_if_end_0056:
 18320                                  .L_or_end_0006:
 18321 0000CC95 C9                      	leave
 18322 0000CC96 C23800                  	ret AND_KILL_FRAME(5)
 18323                                  .L_lambda_simple_end_0067:	; new closure is in rax
 18324                                  
 18325 0000CC99 50                      	push rax
 18326 0000CC9A 488B4520                	mov rax, PARAM(0)	; param run
 18327                                  
 18328 0000CC9E 8F00                    	pop qword[rax]
 18329 0000CCA0 48B8-                   	mov rax, sob_void
 18329 0000CCA2 [0000000000000000] 
 18330                                  
 18331                                  	; preparing a tail-call
 18332 0000CCAA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18333 0000CCAF E8D58B0000              	call malloc
 18334 0000CCB4 50                      	push rax
 18335 0000CCB5 BF08000000              	mov rdi, 8 * 1	; new rib
 18336 0000CCBA E8CA8B0000              	call malloc
 18337 0000CCBF 50                      	push rax
 18338 0000CCC0 BF18000000              	mov rdi, 8 * 3	; extended env
 18339 0000CCC5 E8BF8B0000              	call malloc
 18340 0000CCCA 488B7D10                	mov rdi, ENV
 18341 0000CCCE BE00000000              	mov rsi, 0
 18342 0000CCD3 BA01000000              	mov rdx, 1
 18343                                  .L_lambda_simple_env_loop_0068:	; ext_env[i + 1] <-- env[i]
 18344 0000CCD8 4883FE02                	cmp rsi, 2
 18345 0000CCDC 7410                    	je .L_lambda_simple_env_end_0068
 18346 0000CCDE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18347 0000CCE2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18348 0000CCE6 48FFC6                  	inc rsi
 18349 0000CCE9 48FFC2                  	inc rdx
 18350 0000CCEC EBEA                    	jmp .L_lambda_simple_env_loop_0068
 18351                                  .L_lambda_simple_env_end_0068:
 18352 0000CCEE 5B                      	pop rbx
 18353 0000CCEF BE00000000              	mov rsi, 0
 18354                                  .L_lambda_simple_params_loop_0068:	; copy params
 18355 0000CCF4 4883FE01                	cmp rsi, 1
 18356 0000CCF8 740E                    	je .L_lambda_simple_params_end_0068
 18357 0000CCFA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18358 0000CCFF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18359 0000CD03 48FFC6                  	inc rsi
 18360 0000CD06 EBEC                    	jmp .L_lambda_simple_params_loop_0068
 18361                                  .L_lambda_simple_params_end_0068:
 18362 0000CD08 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18363 0000CD0B 4889C3                  	mov rbx, rax
 18364 0000CD0E 58                      	pop rax
 18365 0000CD0F C60004                  	mov byte [rax], T_closure
 18366 0000CD12 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18367 0000CD16 48C74009[23CD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0068
 18368 0000CD1E E985020000              	jmp .L_lambda_simple_end_0068
 18369                                  .L_lambda_simple_code_0068:	; lambda-simple body
 18370 0000CD23 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18371 0000CD29 740B                    	je .L_lambda_simple_arity_check_ok_0068
 18372 0000CD2B FF742410                	push qword [rsp + 8 * 2]
 18373 0000CD2F 6A02                    	push 2
 18374 0000CD31 E90C8B0000              	jmp L_error_incorrect_arity_simple
 18375                                  .L_lambda_simple_arity_check_ok_0068:
 18376 0000CD36 C8000000                	enter 0, 0
 18377                                  	; preparing a tail-call
 18378 0000CD3A 488B4528                	mov rax, PARAM(1)	; param str2
 18379 0000CD3E 50                      	push rax
 18380 0000CD3F 6A01                    	push 1	; arg count
 18381 0000CD41 488B0425[E30E0000]      	mov rax, qword [free_var_18]	; free var string-length
 18382 0000CD49 803805                  	cmp byte [rax], T_undefined
 18383 0000CD4C 0F840A8A0000            	je L_error_fvar_undefined
 18384 0000CD52 803804                  	cmp byte [rax], T_closure
 18385 0000CD55 0F85858A0000            	jne L_error_non_closure
 18386 0000CD5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 18387 0000CD5E FF5009                  	call SOB_CLOSURE_CODE(rax)
 18388 0000CD61 50                      	push rax
 18389 0000CD62 488B4520                	mov rax, PARAM(0)	; param str1
 18390 0000CD66 50                      	push rax
 18391 0000CD67 6A01                    	push 1	; arg count
 18392 0000CD69 488B0425[E30E0000]      	mov rax, qword [free_var_18]	; free var string-length
 18393 0000CD71 803805                  	cmp byte [rax], T_undefined
 18394 0000CD74 0F84E2890000            	je L_error_fvar_undefined
 18395 0000CD7A 803804                  	cmp byte [rax], T_closure
 18396 0000CD7D 0F855D8A0000            	jne L_error_non_closure
 18397 0000CD83 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18398 0000CD86 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18399 0000CD89 50                      	push rax
 18400 0000CD8A 6A02                    	push 2	; arg count
 18401 0000CD8C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18402 0000CD91 E8F38A0000              	call malloc
 18403 0000CD96 50                      	push rax
 18404 0000CD97 BF10000000              	mov rdi, 8 * 2	; new rib
 18405 0000CD9C E8E88A0000              	call malloc
 18406 0000CDA1 50                      	push rax
 18407 0000CDA2 BF20000000              	mov rdi, 8 * 4	; extended env
 18408 0000CDA7 E8DD8A0000              	call malloc
 18409 0000CDAC 488B7D10                	mov rdi, ENV
 18410 0000CDB0 BE00000000              	mov rsi, 0
 18411 0000CDB5 BA01000000              	mov rdx, 1
 18412                                  .L_lambda_simple_env_loop_0069:	; ext_env[i + 1] <-- env[i]
 18413 0000CDBA 4883FE03                	cmp rsi, 3
 18414 0000CDBE 7410                    	je .L_lambda_simple_env_end_0069
 18415 0000CDC0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18416 0000CDC4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18417 0000CDC8 48FFC6                  	inc rsi
 18418 0000CDCB 48FFC2                  	inc rdx
 18419 0000CDCE EBEA                    	jmp .L_lambda_simple_env_loop_0069
 18420                                  .L_lambda_simple_env_end_0069:
 18421 0000CDD0 5B                      	pop rbx
 18422 0000CDD1 BE00000000              	mov rsi, 0
 18423                                  .L_lambda_simple_params_loop_0069:	; copy params
 18424 0000CDD6 4883FE02                	cmp rsi, 2
 18425 0000CDDA 740E                    	je .L_lambda_simple_params_end_0069
 18426 0000CDDC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18427 0000CDE1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18428 0000CDE5 48FFC6                  	inc rsi
 18429 0000CDE8 EBEC                    	jmp .L_lambda_simple_params_loop_0069
 18430                                  .L_lambda_simple_params_end_0069:
 18431 0000CDEA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18432 0000CDED 4889C3                  	mov rbx, rax
 18433 0000CDF0 58                      	pop rax
 18434 0000CDF1 C60004                  	mov byte [rax], T_closure
 18435 0000CDF4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18436 0000CDF8 48C74009[05CE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0069
 18437 0000CE00 E95A010000              	jmp .L_lambda_simple_end_0069
 18438                                  .L_lambda_simple_code_0069:	; lambda-simple body
 18439 0000CE05 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18440 0000CE0B 740B                    	je .L_lambda_simple_arity_check_ok_0069
 18441 0000CE0D FF742410                	push qword [rsp + 8 * 2]
 18442 0000CE11 6A02                    	push 2
 18443 0000CE13 E92A8A0000              	jmp L_error_incorrect_arity_simple
 18444                                  .L_lambda_simple_arity_check_ok_0069:
 18445 0000CE18 C8000000                	enter 0, 0
 18446 0000CE1C 488B4528                	mov rax, PARAM(1)	; param len2
 18447 0000CE20 50                      	push rax
 18448 0000CE21 488B4520                	mov rax, PARAM(0)	; param len1
 18449 0000CE25 50                      	push rax
 18450 0000CE26 6A02                    	push 2	; arg count
 18451 0000CE28 488B0425[DC150000]      	mov rax, qword [free_var_123]	; free var <=
 18452 0000CE30 803805                  	cmp byte [rax], T_undefined
 18453 0000CE33 0F8423890000            	je L_error_fvar_undefined
 18454 0000CE39 803804                  	cmp byte [rax], T_closure
 18455 0000CE3C 0F859E890000            	jne L_error_non_closure
 18456 0000CE42 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18457 0000CE45 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18458                                  
 18459 0000CE48 483D[02000000]          	cmp rax, sob_boolean_false
 18460 0000CE4E 0F8486000000            	je .L_if_else_0058
 18461                                  	; preparing a tail-call
 18462 0000CE54 488B4528                	mov rax, PARAM(1)	; param len2
 18463 0000CE58 50                      	push rax
 18464 0000CE59 488B4510                	mov rax, ENV
 18465 0000CE5D 488B00                  	mov rax, qword [rax + 8 * 0]
 18466 0000CE60 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 18467 0000CE64 50                      	push rax
 18468 0000CE65 488B4520                	mov rax, PARAM(0)	; param len1
 18469 0000CE69 50                      	push rax
 18470 0000CE6A 488B4510                	mov rax, ENV
 18471 0000CE6E 488B00                  	mov rax, qword [rax + 8 * 0]
 18472 0000CE71 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 18473 0000CE74 50                      	push rax
 18474 0000CE75 48B8-                   	mov rax, L_constants + 2023
 18474 0000CE77 [E707000000000000] 
 18475 0000CE7F 50                      	push rax
 18476 0000CE80 6A05                    	push 5	; arg count
 18477 0000CE82 488B4510                	mov rax, ENV
 18478 0000CE86 488B4008                	mov rax, qword [rax + 8 * 1]
 18479 0000CE8A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18480 0000CE8D 488B00                  	mov rax, qword [rax]
 18481 0000CE90 803804                  	cmp byte [rax], T_closure
 18482 0000CE93 0F8547890000            	jne L_error_non_closure
 18483 0000CE99 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18484                                  
 18485                                  	; recycling the current frame
 18486 0000CE9C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18487 0000CE9F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18488 0000CEA2 B909000000              	mov rcx, 5 + 4
 18489 0000CEA7 488B5D18                	mov rbx, COUNT
 18490 0000CEAB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18491 0000CEB0 488D55F8                	lea rdx, [rbp - 8 * 1]
 18492                                  .L_tc_recycle_frame_loop_00a0:
 18493 0000CEB4 4883F900                	cmp rcx, 0
 18494 0000CEB8 7413                    	je .L_tc_recycle_frame_done_00a0
 18495 0000CEBA 488B32                  	mov rsi, qword [rdx]
 18496 0000CEBD 488933                  	mov qword [rbx], rsi
 18497 0000CEC0 48FFC9                  	dec rcx
 18498 0000CEC3 4883EB08                	sub rbx, 8 * 1
 18499 0000CEC7 4883EA08                	sub rdx, 8 * 1
 18500 0000CECB EBE7                    	jmp .L_tc_recycle_frame_loop_00a0
 18501                                  .L_tc_recycle_frame_done_00a0:
 18502 0000CECD 488D6308                	lea rsp, [rbx + 8 * 1]
 18503 0000CED1 5D                      	pop rbp	; the proc will restore it!
 18504 0000CED2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18505                                  
 18506 0000CED5 E981000000              	jmp .L_if_end_0058
 18507                                  
 18508                                  	.L_if_else_0058:
 18509                                  	; preparing a tail-call
 18510 0000CEDA 488B4520                	mov rax, PARAM(0)	; param len1
 18511 0000CEDE 50                      	push rax
 18512 0000CEDF 488B4510                	mov rax, ENV
 18513 0000CEE3 488B00                  	mov rax, qword [rax + 8 * 0]
 18514 0000CEE6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 18515 0000CEE9 50                      	push rax
 18516 0000CEEA 488B4528                	mov rax, PARAM(1)	; param len2
 18517 0000CEEE 50                      	push rax
 18518 0000CEEF 488B4510                	mov rax, ENV
 18519 0000CEF3 488B00                  	mov rax, qword [rax + 8 * 0]
 18520 0000CEF6 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 18521 0000CEFA 50                      	push rax
 18522 0000CEFB 48B8-                   	mov rax, L_constants + 2023
 18522 0000CEFD [E707000000000000] 
 18523 0000CF05 50                      	push rax
 18524 0000CF06 6A05                    	push 5	; arg count
 18525 0000CF08 488B4510                	mov rax, ENV
 18526 0000CF0C 488B4008                	mov rax, qword [rax + 8 * 1]
 18527 0000CF10 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18528 0000CF13 488B00                  	mov rax, qword [rax]
 18529 0000CF16 803804                  	cmp byte [rax], T_closure
 18530 0000CF19 0F85C1880000            	jne L_error_non_closure
 18531 0000CF1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18532                                  
 18533                                  	; recycling the current frame
 18534 0000CF22 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18535 0000CF25 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18536 0000CF28 B909000000              	mov rcx, 5 + 4
 18537 0000CF2D 488B5D18                	mov rbx, COUNT
 18538 0000CF31 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18539 0000CF36 488D55F8                	lea rdx, [rbp - 8 * 1]
 18540                                  .L_tc_recycle_frame_loop_00a1:
 18541 0000CF3A 4883F900                	cmp rcx, 0
 18542 0000CF3E 7413                    	je .L_tc_recycle_frame_done_00a1
 18543 0000CF40 488B32                  	mov rsi, qword [rdx]
 18544 0000CF43 488933                  	mov qword [rbx], rsi
 18545 0000CF46 48FFC9                  	dec rcx
 18546 0000CF49 4883EB08                	sub rbx, 8 * 1
 18547 0000CF4D 4883EA08                	sub rdx, 8 * 1
 18548 0000CF51 EBE7                    	jmp .L_tc_recycle_frame_loop_00a1
 18549                                  .L_tc_recycle_frame_done_00a1:
 18550 0000CF53 488D6308                	lea rsp, [rbx + 8 * 1]
 18551 0000CF57 5D                      	pop rbp	; the proc will restore it!
 18552 0000CF58 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18553                                  
 18554                                  	.L_if_end_0058:
 18555 0000CF5B C9                      	leave
 18556 0000CF5C C22000                  	ret AND_KILL_FRAME(2)
 18557                                  .L_lambda_simple_end_0069:	; new closure is in rax
 18558 0000CF5F 803804                  	cmp byte [rax], T_closure
 18559 0000CF62 0F8578880000            	jne L_error_non_closure
 18560 0000CF68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18561                                  
 18562                                  	; recycling the current frame
 18563 0000CF6B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18564 0000CF6E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18565 0000CF71 B906000000              	mov rcx, 2 + 4
 18566 0000CF76 488B5D18                	mov rbx, COUNT
 18567 0000CF7A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18568 0000CF7F 488D55F8                	lea rdx, [rbp - 8 * 1]
 18569                                  .L_tc_recycle_frame_loop_00a2:
 18570 0000CF83 4883F900                	cmp rcx, 0
 18571 0000CF87 7413                    	je .L_tc_recycle_frame_done_00a2
 18572 0000CF89 488B32                  	mov rsi, qword [rdx]
 18573 0000CF8C 488933                  	mov qword [rbx], rsi
 18574 0000CF8F 48FFC9                  	dec rcx
 18575 0000CF92 4883EB08                	sub rbx, 8 * 1
 18576 0000CF96 4883EA08                	sub rdx, 8 * 1
 18577 0000CF9A EBE7                    	jmp .L_tc_recycle_frame_loop_00a2
 18578                                  .L_tc_recycle_frame_done_00a2:
 18579 0000CF9C 488D6308                	lea rsp, [rbx + 8 * 1]
 18580 0000CFA0 5D                      	pop rbp	; the proc will restore it!
 18581 0000CFA1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18582 0000CFA4 C9                      	leave
 18583 0000CFA5 C22000                  	ret AND_KILL_FRAME(2)
 18584                                  .L_lambda_simple_end_0068:	; new closure is in rax
 18585 0000CFA8 50                      	push rax
 18586 0000CFA9 6A01                    	push 1	; arg count
 18587 0000CFAB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18588 0000CFB0 E8D4880000              	call malloc
 18589 0000CFB5 50                      	push rax
 18590 0000CFB6 BF08000000              	mov rdi, 8 * 1	; new rib
 18591 0000CFBB E8C9880000              	call malloc
 18592 0000CFC0 50                      	push rax
 18593 0000CFC1 BF18000000              	mov rdi, 8 * 3	; extended env
 18594 0000CFC6 E8BE880000              	call malloc
 18595 0000CFCB 488B7D10                	mov rdi, ENV
 18596 0000CFCF BE00000000              	mov rsi, 0
 18597 0000CFD4 BA01000000              	mov rdx, 1
 18598                                  .L_lambda_simple_env_loop_006a:	; ext_env[i + 1] <-- env[i]
 18599 0000CFD9 4883FE02                	cmp rsi, 2
 18600 0000CFDD 7410                    	je .L_lambda_simple_env_end_006a
 18601 0000CFDF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18602 0000CFE3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18603 0000CFE7 48FFC6                  	inc rsi
 18604 0000CFEA 48FFC2                  	inc rdx
 18605 0000CFED EBEA                    	jmp .L_lambda_simple_env_loop_006a
 18606                                  .L_lambda_simple_env_end_006a:
 18607 0000CFEF 5B                      	pop rbx
 18608 0000CFF0 BE00000000              	mov rsi, 0
 18609                                  .L_lambda_simple_params_loop_006a:	; copy params
 18610 0000CFF5 4883FE01                	cmp rsi, 1
 18611 0000CFF9 740E                    	je .L_lambda_simple_params_end_006a
 18612 0000CFFB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18613 0000D000 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18614 0000D004 48FFC6                  	inc rsi
 18615 0000D007 EBEC                    	jmp .L_lambda_simple_params_loop_006a
 18616                                  .L_lambda_simple_params_end_006a:
 18617 0000D009 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18618 0000D00C 4889C3                  	mov rbx, rax
 18619 0000D00F 58                      	pop rax
 18620 0000D010 C60004                  	mov byte [rax], T_closure
 18621 0000D013 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18622 0000D017 48C74009[24D00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006a
 18623 0000D01F E9AF040000              	jmp .L_lambda_simple_end_006a
 18624                                  .L_lambda_simple_code_006a:	; lambda-simple body
 18625 0000D024 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18626 0000D02A 740B                    	je .L_lambda_simple_arity_check_ok_006a
 18627 0000D02C FF742410                	push qword [rsp + 8 * 2]
 18628 0000D030 6A01                    	push 1
 18629 0000D032 E90B880000              	jmp L_error_incorrect_arity_simple
 18630                                  .L_lambda_simple_arity_check_ok_006a:
 18631 0000D037 C8000000                	enter 0, 0
 18632                                  	; preparing a tail-call
 18633 0000D03B 48B8-                   	mov rax, L_constants + 1881
 18633 0000D03D [5907000000000000] 
 18634 0000D045 50                      	push rax
 18635 0000D046 6A01                    	push 1	; arg count
 18636 0000D048 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18637 0000D04D E837880000              	call malloc
 18638 0000D052 50                      	push rax
 18639 0000D053 BF08000000              	mov rdi, 8 * 1	; new rib
 18640 0000D058 E82C880000              	call malloc
 18641 0000D05D 50                      	push rax
 18642 0000D05E BF20000000              	mov rdi, 8 * 4	; extended env
 18643 0000D063 E821880000              	call malloc
 18644 0000D068 488B7D10                	mov rdi, ENV
 18645 0000D06C BE00000000              	mov rsi, 0
 18646 0000D071 BA01000000              	mov rdx, 1
 18647                                  .L_lambda_simple_env_loop_006b:	; ext_env[i + 1] <-- env[i]
 18648 0000D076 4883FE03                	cmp rsi, 3
 18649 0000D07A 7410                    	je .L_lambda_simple_env_end_006b
 18650 0000D07C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18651 0000D080 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18652 0000D084 48FFC6                  	inc rsi
 18653 0000D087 48FFC2                  	inc rdx
 18654 0000D08A EBEA                    	jmp .L_lambda_simple_env_loop_006b
 18655                                  .L_lambda_simple_env_end_006b:
 18656 0000D08C 5B                      	pop rbx
 18657 0000D08D BE00000000              	mov rsi, 0
 18658                                  .L_lambda_simple_params_loop_006b:	; copy params
 18659 0000D092 4883FE01                	cmp rsi, 1
 18660 0000D096 740E                    	je .L_lambda_simple_params_end_006b
 18661 0000D098 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18662 0000D09D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18663 0000D0A1 48FFC6                  	inc rsi
 18664 0000D0A4 EBEC                    	jmp .L_lambda_simple_params_loop_006b
 18665                                  .L_lambda_simple_params_end_006b:
 18666 0000D0A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18667 0000D0A9 4889C3                  	mov rbx, rax
 18668 0000D0AC 58                      	pop rax
 18669 0000D0AD C60004                  	mov byte [rax], T_closure
 18670 0000D0B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18671 0000D0B4 48C74009[C1D00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006b
 18672 0000D0BC E9C9030000              	jmp .L_lambda_simple_end_006b
 18673                                  .L_lambda_simple_code_006b:	; lambda-simple body
 18674 0000D0C1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18675 0000D0C7 740B                    	je .L_lambda_simple_arity_check_ok_006b
 18676 0000D0C9 FF742410                	push qword [rsp + 8 * 2]
 18677 0000D0CD 6A01                    	push 1
 18678 0000D0CF E96E870000              	jmp L_error_incorrect_arity_simple
 18679                                  .L_lambda_simple_arity_check_ok_006b:
 18680 0000D0D4 C8000000                	enter 0, 0
 18681                                  
 18682 0000D0D8 BF08000000              	mov rdi, 8
 18683 0000D0DD E8A7870000              	call malloc
 18684 0000D0E2 488B5D20                	mov rbx, PARAM(0)	; param run
 18685 0000D0E6 488918                  	mov [rax], rbx	; box run
 18686 0000D0E9 48894520                	mov PARAM(0), rax	;replace param run with box
 18687 0000D0ED 48B8-                   	mov rax, sob_void
 18687 0000D0EF [0000000000000000] 
 18688                                  
 18689 0000D0F7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18690 0000D0FC E888870000              	call malloc
 18691 0000D101 50                      	push rax
 18692 0000D102 BF08000000              	mov rdi, 8 * 1	; new rib
 18693 0000D107 E87D870000              	call malloc
 18694 0000D10C 50                      	push rax
 18695 0000D10D BF28000000              	mov rdi, 8 * 5	; extended env
 18696 0000D112 E872870000              	call malloc
 18697 0000D117 488B7D10                	mov rdi, ENV
 18698 0000D11B BE00000000              	mov rsi, 0
 18699 0000D120 BA01000000              	mov rdx, 1
 18700                                  .L_lambda_simple_env_loop_006c:	; ext_env[i + 1] <-- env[i]
 18701 0000D125 4883FE04                	cmp rsi, 4
 18702 0000D129 7410                    	je .L_lambda_simple_env_end_006c
 18703 0000D12B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18704 0000D12F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18705 0000D133 48FFC6                  	inc rsi
 18706 0000D136 48FFC2                  	inc rdx
 18707 0000D139 EBEA                    	jmp .L_lambda_simple_env_loop_006c
 18708                                  .L_lambda_simple_env_end_006c:
 18709 0000D13B 5B                      	pop rbx
 18710 0000D13C BE00000000              	mov rsi, 0
 18711                                  .L_lambda_simple_params_loop_006c:	; copy params
 18712 0000D141 4883FE01                	cmp rsi, 1
 18713 0000D145 740E                    	je .L_lambda_simple_params_end_006c
 18714 0000D147 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18715 0000D14C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18716 0000D150 48FFC6                  	inc rsi
 18717 0000D153 EBEC                    	jmp .L_lambda_simple_params_loop_006c
 18718                                  .L_lambda_simple_params_end_006c:
 18719 0000D155 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18720 0000D158 4889C3                  	mov rbx, rax
 18721 0000D15B 58                      	pop rax
 18722 0000D15C C60004                  	mov byte [rax], T_closure
 18723 0000D15F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18724 0000D163 48C74009[70D10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006c
 18725 0000D16B E953010000              	jmp .L_lambda_simple_end_006c
 18726                                  .L_lambda_simple_code_006c:	; lambda-simple body
 18727 0000D170 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18728 0000D176 740B                    	je .L_lambda_simple_arity_check_ok_006c
 18729 0000D178 FF742410                	push qword [rsp + 8 * 2]
 18730 0000D17C 6A02                    	push 2
 18731 0000D17E E9BF860000              	jmp L_error_incorrect_arity_simple
 18732                                  .L_lambda_simple_arity_check_ok_006c:
 18733 0000D183 C8000000                	enter 0, 0
 18734 0000D187 488B4528                	mov rax, PARAM(1)	; param strs
 18735 0000D18B 50                      	push rax
 18736 0000D18C 6A01                    	push 1	; arg count
 18737 0000D18E 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 18738 0000D196 803805                  	cmp byte [rax], T_undefined
 18739 0000D199 0F84BD850000            	je L_error_fvar_undefined
 18740 0000D19F 803804                  	cmp byte [rax], T_closure
 18741 0000D1A2 0F8538860000            	jne L_error_non_closure
 18742 0000D1A8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18743 0000D1AB FF5009                  	call SOB_CLOSURE_CODE(rax)
 18744 0000D1AE 483D[02000000]          	cmp rax, sob_boolean_false
 18745 0000D1B4 0F8505010000            	jne .L_or_end_0008
 18746 0000D1BA 488B4528                	mov rax, PARAM(1)	; param strs
 18747 0000D1BE 50                      	push rax
 18748 0000D1BF 6A01                    	push 1	; arg count
 18749 0000D1C1 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 18750 0000D1C9 803805                  	cmp byte [rax], T_undefined
 18751 0000D1CC 0F848A850000            	je L_error_fvar_undefined
 18752 0000D1D2 803804                  	cmp byte [rax], T_closure
 18753 0000D1D5 0F8505860000            	jne L_error_non_closure
 18754 0000D1DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 18755 0000D1DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 18756 0000D1E1 50                      	push rax
 18757 0000D1E2 488B4520                	mov rax, PARAM(0)	; param str
 18758 0000D1E6 50                      	push rax
 18759 0000D1E7 6A02                    	push 2	; arg count
 18760 0000D1E9 488B4510                	mov rax, ENV
 18761 0000D1ED 488B4008                	mov rax, qword [rax + 8 * 1]
 18762 0000D1F1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<?
 18763 0000D1F4 803804                  	cmp byte [rax], T_closure
 18764 0000D1F7 0F85E3850000            	jne L_error_non_closure
 18765 0000D1FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 18766 0000D200 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18767                                  
 18768 0000D203 483D[02000000]          	cmp rax, sob_boolean_false
 18769 0000D209 0F84A6000000            	je .L_if_else_0059
 18770                                  	; preparing a tail-call
 18771 0000D20F 488B4528                	mov rax, PARAM(1)	; param strs
 18772 0000D213 50                      	push rax
 18773 0000D214 6A01                    	push 1	; arg count
 18774 0000D216 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 18775 0000D21E 803805                  	cmp byte [rax], T_undefined
 18776 0000D221 0F8435850000            	je L_error_fvar_undefined
 18777 0000D227 803804                  	cmp byte [rax], T_closure
 18778 0000D22A 0F85B0850000            	jne L_error_non_closure
 18779 0000D230 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18780 0000D233 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18781 0000D236 50                      	push rax
 18782 0000D237 488B4528                	mov rax, PARAM(1)	; param strs
 18783 0000D23B 50                      	push rax
 18784 0000D23C 6A01                    	push 1	; arg count
 18785 0000D23E 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 18786 0000D246 803805                  	cmp byte [rax], T_undefined
 18787 0000D249 0F840D850000            	je L_error_fvar_undefined
 18788 0000D24F 803804                  	cmp byte [rax], T_closure
 18789 0000D252 0F8588850000            	jne L_error_non_closure
 18790 0000D258 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18791 0000D25B FF5009                  	call SOB_CLOSURE_CODE(rax)
 18792 0000D25E 50                      	push rax
 18793 0000D25F 6A02                    	push 2	; arg count
 18794 0000D261 488B4510                	mov rax, ENV
 18795 0000D265 488B00                  	mov rax, qword [rax + 8 * 0]
 18796 0000D268 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18797 0000D26B 488B00                  	mov rax, qword [rax]
 18798 0000D26E 803804                  	cmp byte [rax], T_closure
 18799 0000D271 0F8569850000            	jne L_error_non_closure
 18800 0000D277 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18801                                  
 18802                                  	; recycling the current frame
 18803 0000D27A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18804 0000D27D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18805 0000D280 B906000000              	mov rcx, 2 + 4
 18806 0000D285 488B5D18                	mov rbx, COUNT
 18807 0000D289 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18808 0000D28E 488D55F8                	lea rdx, [rbp - 8 * 1]
 18809                                  .L_tc_recycle_frame_loop_00a3:
 18810 0000D292 4883F900                	cmp rcx, 0
 18811 0000D296 7413                    	je .L_tc_recycle_frame_done_00a3
 18812 0000D298 488B32                  	mov rsi, qword [rdx]
 18813 0000D29B 488933                  	mov qword [rbx], rsi
 18814 0000D29E 48FFC9                  	dec rcx
 18815 0000D2A1 4883EB08                	sub rbx, 8 * 1
 18816 0000D2A5 4883EA08                	sub rdx, 8 * 1
 18817 0000D2A9 EBE7                    	jmp .L_tc_recycle_frame_loop_00a3
 18818                                  .L_tc_recycle_frame_done_00a3:
 18819 0000D2AB 488D6308                	lea rsp, [rbx + 8 * 1]
 18820 0000D2AF 5D                      	pop rbp	; the proc will restore it!
 18821 0000D2B0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18822                                  
 18823 0000D2B3 EB0A                    	jmp .L_if_end_0059
 18824                                  
 18825                                  	.L_if_else_0059:
 18826 0000D2B5 48B8-                   	mov rax, L_constants + 2
 18826 0000D2B7 [0200000000000000] 
 18827                                  
 18828                                  	.L_if_end_0059:
 18829                                  .L_or_end_0008:
 18830 0000D2BF C9                      	leave
 18831 0000D2C0 C22000                  	ret AND_KILL_FRAME(2)
 18832                                  .L_lambda_simple_end_006c:	; new closure is in rax
 18833                                  
 18834 0000D2C3 50                      	push rax
 18835 0000D2C4 488B4520                	mov rax, PARAM(0)	; param run
 18836                                  
 18837 0000D2C8 8F00                    	pop qword[rax]
 18838 0000D2CA 48B8-                   	mov rax, sob_void
 18838 0000D2CC [0000000000000000] 
 18839                                  
 18840 0000D2D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18841 0000D2D9 E8AB850000              	call malloc
 18842 0000D2DE 50                      	push rax
 18843 0000D2DF BF08000000              	mov rdi, 8 * 1	; new rib
 18844 0000D2E4 E8A0850000              	call malloc
 18845 0000D2E9 50                      	push rax
 18846 0000D2EA BF28000000              	mov rdi, 8 * 5	; extended env
 18847 0000D2EF E895850000              	call malloc
 18848 0000D2F4 488B7D10                	mov rdi, ENV
 18849 0000D2F8 BE00000000              	mov rsi, 0
 18850 0000D2FD BA01000000              	mov rdx, 1
 18851                                  .L_lambda_opt_env_loop_0012:	; ext_env[i + 1] <-- env[i]
 18852 0000D302 4883FE04                	cmp rsi, 4
 18853 0000D306 7410                    	je .L_lambda_opt_env_end_0012
 18854 0000D308 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18855 0000D30C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18856 0000D310 48FFC6                  	inc rsi
 18857 0000D313 48FFC2                  	inc rdx
 18858 0000D316 EBEA                    	jmp .L_lambda_opt_env_loop_0012
 18859                                  .L_lambda_opt_env_end_0012:
 18860 0000D318 5B                      	pop rbx
 18861 0000D319 BE00000000              	mov rsi, 0
 18862                                  .L_lambda_opt_params_loop_0012:	; copy params
 18863 0000D31E 4883FE01                	cmp rsi, 1
 18864 0000D322 740E                    	je .L_lambda_opt_params_end_0012
 18865 0000D324 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18866 0000D329 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18867 0000D32D 48FFC6                  	inc rsi
 18868 0000D330 EBEC                    	jmp .L_lambda_opt_params_loop_0012
 18869                                  .L_lambda_opt_params_end_0012:
 18870 0000D332 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18871 0000D335 4889C3                  	mov rbx, rax
 18872 0000D338 58                      	pop rax
 18873 0000D339 C60004                  	mov byte [rax], T_closure
 18874 0000D33C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18875 0000D340 48C74009[4DD30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0012
 18876 0000D348 E939010000              	jmp .L_lambda_opt_end_0012
 18877                                  .L_lambda_opt_code_0012:	; lambda-simple body
 18878 0000D34D 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 18879 0000D353 740D                    	je .L_lambda_opt_arity_check_exact_0012 ;	 if equal, go to exact arity
 18880 0000D355 7F42                    	jg .L_lambda_opt_arity_check_more_0012 ;	 if greater than, go to arity more
 18881 0000D357 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 18882 0000D35B 6A01                     	push 1
 18883 0000D35D E9F4840000              	jmp L_error_incorrect_arity_opt
 18884                                  	.L_lambda_opt_arity_check_exact_0012:
 18885 0000D362 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 18886 0000D367 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 18887 0000D36C 4883EC08                	sub rsp, 8
 18888 0000D370 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 18889                                  	.L_lambda_opt_exact_shifting_loop_0012:
 18890 0000D374 488B5108                	mov rdx, [rcx + 8]
 18891 0000D378 488911                  	mov [rcx], rdx
 18892 0000D37B 4883C108                	add rcx, 8
 18893 0000D37F 4839CB                  	cmp rbx, rcx
 18894 0000D382 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0012
 18895                                  	.L_lambda_opt_exact_shifting_loop_end_0012:
 18896 0000D384 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 18897 0000D38B 4883C001                	add rax, 1 ; 	arg count += 1
 18898 0000D38F 4889442410              	mov qword [rsp + 8 * 2], rax
 18899 0000D394 E987000000              	jmp .L_lambda_opt_stack_adjusted_0012
 18900                                  	.L_lambda_opt_arity_check_more_0012:
 18901 0000D399 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 18901 0000D39B [0100000000000000] 
 18902 0000D3A3 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 18903 0000D3A9 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0012
 18904                                  	.L_lambda_opt_stack_shrink_loop_0012:
 18905 0000D3AB BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 18906 0000D3B0 E8D4840000              	call malloc ;	 allocated memory for the optional scheme list
 18907 0000D3B5 C60021                  	mov byte[rax], T_pair ;	 set type pair
 18908 0000D3B8 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 18909 0000D3BC 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 18910 0000D3BF 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 18911 0000D3C4 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 18912 0000D3C9 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 18913 0000D3CD 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 18914                                  	.L_lambda_opt_more_shifting_loop_0012:
 18915 0000D3D2 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 18916 0000D3D5 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 18917 0000D3D9 4883EB08                	sub rbx, 8 
 18918 0000D3DD 4839DC                  	cmp rsp, rbx
 18919 0000D3E0 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0012
 18920                                  	.L_lambda_opt_more_shifting_loop_end_0012:
 18921 0000D3E2 4883C408                	add rsp, 8 ;	 update rsp
 18922 0000D3E6 488B5C2410              	mov rbx, [rsp + 8 * 2]
 18923 0000D3EB 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 18924 0000D3EF 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 18925 0000D3F4 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18926 0000D3FA 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0012
 18927                                  	.L_lambda_opt_stack_shrink_loop_exit_0012:
 18928 0000D3FC 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 18929 0000D401 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 18930 0000D406 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 18931 0000D40B E879840000              	call malloc ;	 allocated memory for the optional scheme list
 18932 0000D410 C60021                  	mov byte[rax], T_pair ;	 set type pair
 18933 0000D413 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 18934 0000D417 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 18935 0000D41B 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 18936                                  	.L_lambda_opt_stack_adjusted_0012:
 18937 0000D420 C8000000                	enter 0, 0
 18938                                  	; preparing a tail-call
 18939 0000D424 488B4528                	mov rax, PARAM(1)	; param strs
 18940 0000D428 50                      	push rax
 18941 0000D429 488B4520                	mov rax, PARAM(0)	; param str
 18942 0000D42D 50                      	push rax
 18943 0000D42E 6A02                    	push 2	; arg count
 18944 0000D430 488B4510                	mov rax, ENV
 18945 0000D434 488B00                  	mov rax, qword [rax + 8 * 0]
 18946 0000D437 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18947 0000D43A 488B00                  	mov rax, qword [rax]
 18948 0000D43D 803804                  	cmp byte [rax], T_closure
 18949 0000D440 0F859A830000            	jne L_error_non_closure
 18950 0000D446 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18951                                  
 18952                                  	; recycling the current frame
 18953 0000D449 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18954 0000D44C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18955 0000D44F B906000000              	mov rcx, 2 + 4
 18956 0000D454 488B5D18                	mov rbx, COUNT
 18957 0000D458 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18958 0000D45D 488D55F8                	lea rdx, [rbp - 8 * 1]
 18959                                  .L_tc_recycle_frame_loop_00a4:
 18960 0000D461 4883F900                	cmp rcx, 0
 18961 0000D465 7413                    	je .L_tc_recycle_frame_done_00a4
 18962 0000D467 488B32                  	mov rsi, qword [rdx]
 18963 0000D46A 488933                  	mov qword [rbx], rsi
 18964 0000D46D 48FFC9                  	dec rcx
 18965 0000D470 4883EB08                	sub rbx, 8 * 1
 18966 0000D474 4883EA08                	sub rdx, 8 * 1
 18967 0000D478 EBE7                    	jmp .L_tc_recycle_frame_loop_00a4
 18968                                  .L_tc_recycle_frame_done_00a4:
 18969 0000D47A 488D6308                	lea rsp, [rbx + 8 * 1]
 18970 0000D47E 5D                      	pop rbp	; the proc will restore it!
 18971 0000D47F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18972 0000D482 C9                      	leave
 18973 0000D483 C22000                  	ret AND_KILL_FRAME(2)
 18974                                  .L_lambda_opt_end_0012:	; new closure is in rax
 18975 0000D486 C9                      	leave
 18976 0000D487 C21800                  	ret AND_KILL_FRAME(1)
 18977                                  .L_lambda_simple_end_006b:	; new closure is in rax
 18978 0000D48A 803804                  	cmp byte [rax], T_closure
 18979 0000D48D 0F854D830000            	jne L_error_non_closure
 18980 0000D493 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18981                                  
 18982                                  	; recycling the current frame
 18983 0000D496 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18984 0000D499 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18985 0000D49C B905000000              	mov rcx, 1 + 4
 18986 0000D4A1 488B5D18                	mov rbx, COUNT
 18987 0000D4A5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18988 0000D4AA 488D55F8                	lea rdx, [rbp - 8 * 1]
 18989                                  .L_tc_recycle_frame_loop_00a5:
 18990 0000D4AE 4883F900                	cmp rcx, 0
 18991 0000D4B2 7413                    	je .L_tc_recycle_frame_done_00a5
 18992 0000D4B4 488B32                  	mov rsi, qword [rdx]
 18993 0000D4B7 488933                  	mov qword [rbx], rsi
 18994 0000D4BA 48FFC9                  	dec rcx
 18995 0000D4BD 4883EB08                	sub rbx, 8 * 1
 18996 0000D4C1 4883EA08                	sub rdx, 8 * 1
 18997 0000D4C5 EBE7                    	jmp .L_tc_recycle_frame_loop_00a5
 18998                                  .L_tc_recycle_frame_done_00a5:
 18999 0000D4C7 488D6308                	lea rsp, [rbx + 8 * 1]
 19000 0000D4CB 5D                      	pop rbp	; the proc will restore it!
 19001 0000D4CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19002 0000D4CF C9                      	leave
 19003 0000D4D0 C21800                  	ret AND_KILL_FRAME(1)
 19004                                  .L_lambda_simple_end_006a:	; new closure is in rax
 19005 0000D4D3 803804                  	cmp byte [rax], T_closure
 19006 0000D4D6 0F8504830000            	jne L_error_non_closure
 19007 0000D4DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 19008                                  
 19009                                  	; recycling the current frame
 19010 0000D4DF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19011 0000D4E2 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19012 0000D4E5 B905000000              	mov rcx, 1 + 4
 19013 0000D4EA 488B5D18                	mov rbx, COUNT
 19014 0000D4EE 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19015 0000D4F3 488D55F8                	lea rdx, [rbp - 8 * 1]
 19016                                  .L_tc_recycle_frame_loop_00a6:
 19017 0000D4F7 4883F900                	cmp rcx, 0
 19018 0000D4FB 7413                    	je .L_tc_recycle_frame_done_00a6
 19019 0000D4FD 488B32                  	mov rsi, qword [rdx]
 19020 0000D500 488933                  	mov qword [rbx], rsi
 19021 0000D503 48FFC9                  	dec rcx
 19022 0000D506 4883EB08                	sub rbx, 8 * 1
 19023 0000D50A 4883EA08                	sub rdx, 8 * 1
 19024 0000D50E EBE7                    	jmp .L_tc_recycle_frame_loop_00a6
 19025                                  .L_tc_recycle_frame_done_00a6:
 19026 0000D510 488D6308                	lea rsp, [rbx + 8 * 1]
 19027 0000D514 5D                      	pop rbp	; the proc will restore it!
 19028 0000D515 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19029 0000D518 C9                      	leave
 19030 0000D519 C21800                  	ret AND_KILL_FRAME(1)
 19031                                  .L_lambda_simple_end_0066:	; new closure is in rax
 19032 0000D51C 803804                  	cmp byte [rax], T_closure
 19033 0000D51F 0F85BB820000            	jne L_error_non_closure
 19034 0000D525 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19035                                  
 19036                                  	; recycling the current frame
 19037 0000D528 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19038 0000D52B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19039 0000D52E B905000000              	mov rcx, 1 + 4
 19040 0000D533 488B5D18                	mov rbx, COUNT
 19041 0000D537 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19042 0000D53C 488D55F8                	lea rdx, [rbp - 8 * 1]
 19043                                  .L_tc_recycle_frame_loop_00a7:
 19044 0000D540 4883F900                	cmp rcx, 0
 19045 0000D544 7413                    	je .L_tc_recycle_frame_done_00a7
 19046 0000D546 488B32                  	mov rsi, qword [rdx]
 19047 0000D549 488933                  	mov qword [rbx], rsi
 19048 0000D54C 48FFC9                  	dec rcx
 19049 0000D54F 4883EB08                	sub rbx, 8 * 1
 19050 0000D553 4883EA08                	sub rdx, 8 * 1
 19051 0000D557 EBE7                    	jmp .L_tc_recycle_frame_loop_00a7
 19052                                  .L_tc_recycle_frame_done_00a7:
 19053 0000D559 488D6308                	lea rsp, [rbx + 8 * 1]
 19054 0000D55D 5D                      	pop rbp	; the proc will restore it!
 19055 0000D55E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19056 0000D561 C9                      	leave
 19057 0000D562 C22000                  	ret AND_KILL_FRAME(2)
 19058                                  .L_lambda_simple_end_0065:	; new closure is in rax
 19059 0000D565 50                      	push rax
 19060 0000D566 6A01                    	push 1	; arg count
 19061 0000D568 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19062 0000D56D E817830000              	call malloc
 19063 0000D572 50                      	push rax
 19064 0000D573 BF00000000              	mov rdi, 8 * 0	; new rib
 19065 0000D578 E80C830000              	call malloc
 19066 0000D57D 50                      	push rax
 19067 0000D57E BF08000000              	mov rdi, 8 * 1	; extended env
 19068 0000D583 E801830000              	call malloc
 19069 0000D588 488B7D10                	mov rdi, ENV
 19070 0000D58C BE00000000              	mov rsi, 0
 19071 0000D591 BA01000000              	mov rdx, 1
 19072                                  .L_lambda_simple_env_loop_006d:	; ext_env[i + 1] <-- env[i]
 19073 0000D596 4883FE00                	cmp rsi, 0
 19074 0000D59A 7410                    	je .L_lambda_simple_env_end_006d
 19075 0000D59C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19076 0000D5A0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19077 0000D5A4 48FFC6                  	inc rsi
 19078 0000D5A7 48FFC2                  	inc rdx
 19079 0000D5AA EBEA                    	jmp .L_lambda_simple_env_loop_006d
 19080                                  .L_lambda_simple_env_end_006d:
 19081 0000D5AC 5B                      	pop rbx
 19082 0000D5AD BE00000000              	mov rsi, 0
 19083                                  .L_lambda_simple_params_loop_006d:	; copy params
 19084 0000D5B2 4883FE00                	cmp rsi, 0
 19085 0000D5B6 740E                    	je .L_lambda_simple_params_end_006d
 19086 0000D5B8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19087 0000D5BD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19088 0000D5C1 48FFC6                  	inc rsi
 19089 0000D5C4 EBEC                    	jmp .L_lambda_simple_params_loop_006d
 19090                                  .L_lambda_simple_params_end_006d:
 19091 0000D5C6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19092 0000D5C9 4889C3                  	mov rbx, rax
 19093 0000D5CC 58                      	pop rax
 19094 0000D5CD C60004                  	mov byte [rax], T_closure
 19095 0000D5D0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19096 0000D5D4 48C74009[E1D50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006d
 19097 0000D5DC E96B010000              	jmp .L_lambda_simple_end_006d
 19098                                  .L_lambda_simple_code_006d:	; lambda-simple body
 19099 0000D5E1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19100 0000D5E7 740B                    	je .L_lambda_simple_arity_check_ok_006d
 19101 0000D5E9 FF742410                	push qword [rsp + 8 * 2]
 19102 0000D5ED 6A01                    	push 1
 19103 0000D5EF E94E820000              	jmp L_error_incorrect_arity_simple
 19104                                  .L_lambda_simple_arity_check_ok_006d:
 19105 0000D5F4 C8000000                	enter 0, 0
 19106 0000D5F8 488B0425[53160000]      	mov rax, qword [free_var_130]	; free var char=?
 19107 0000D600 803805                  	cmp byte [rax], T_undefined
 19108 0000D603 0F8453810000            	je L_error_fvar_undefined
 19109 0000D609 50                      	push rax
 19110 0000D60A 488B0425[31160000]      	mov rax, qword [free_var_128]	; free var char<?
 19111 0000D612 803805                  	cmp byte [rax], T_undefined
 19112 0000D615 0F8441810000            	je L_error_fvar_undefined
 19113 0000D61B 50                      	push rax
 19114 0000D61C 6A02                    	push 2	; arg count
 19115 0000D61E 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19116 0000D622 803804                  	cmp byte [rax], T_closure
 19117 0000D625 0F85B5810000            	jne L_error_non_closure
 19118 0000D62B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19119 0000D62E FF5009                  	call SOB_CLOSURE_CODE(rax)
 19120 0000D631 48890425[41170000]      	mov qword [free_var_144], rax	; free var string<?
 19121 0000D639 803805                  	cmp byte [rax], T_undefined
 19122 0000D63C 0F841A810000            	je L_error_fvar_undefined
 19123 0000D642 48B8-                   	mov rax, sob_void
 19123 0000D644 [0000000000000000] 
 19124                                  
 19125 0000D64C 488B0425[CA160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 19126 0000D654 803805                  	cmp byte [rax], T_undefined
 19127 0000D657 0F84FF800000            	je L_error_fvar_undefined
 19128 0000D65D 50                      	push rax
 19129 0000D65E 488B0425[A8160000]      	mov rax, qword [free_var_135]	; free var char-ci<?
 19130 0000D666 803805                  	cmp byte [rax], T_undefined
 19131 0000D669 0F84ED800000            	je L_error_fvar_undefined
 19132 0000D66F 50                      	push rax
 19133 0000D670 6A02                    	push 2	; arg count
 19134 0000D672 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19135 0000D676 803804                  	cmp byte [rax], T_closure
 19136 0000D679 0F8561810000            	jne L_error_non_closure
 19137 0000D67F FF7001                  	push SOB_CLOSURE_ENV(rax)
 19138 0000D682 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19139 0000D685 48890425[96170000]      	mov qword [free_var_149], rax	; free var string-ci<?
 19140 0000D68D 803805                  	cmp byte [rax], T_undefined
 19141 0000D690 0F84C6800000            	je L_error_fvar_undefined
 19142 0000D696 48B8-                   	mov rax, sob_void
 19142 0000D698 [0000000000000000] 
 19143                                  
 19144 0000D6A0 488B0425[53160000]      	mov rax, qword [free_var_130]	; free var char=?
 19145 0000D6A8 803805                  	cmp byte [rax], T_undefined
 19146 0000D6AB 0F84AB800000            	je L_error_fvar_undefined
 19147 0000D6B1 50                      	push rax
 19148 0000D6B2 488B0425[64160000]      	mov rax, qword [free_var_131]	; free var char>?
 19149 0000D6BA 803805                  	cmp byte [rax], T_undefined
 19150 0000D6BD 0F8499800000            	je L_error_fvar_undefined
 19151 0000D6C3 50                      	push rax
 19152 0000D6C4 6A02                    	push 2	; arg count
 19153 0000D6C6 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19154 0000D6CA 803804                  	cmp byte [rax], T_closure
 19155 0000D6CD 0F850D810000            	jne L_error_non_closure
 19156 0000D6D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19157 0000D6D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19158 0000D6D9 48890425[85170000]      	mov qword [free_var_148], rax	; free var string>?
 19159 0000D6E1 803805                  	cmp byte [rax], T_undefined
 19160 0000D6E4 0F8472800000            	je L_error_fvar_undefined
 19161 0000D6EA 48B8-                   	mov rax, sob_void
 19161 0000D6EC [0000000000000000] 
 19162                                  
 19163 0000D6F4 488B0425[CA160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 19164 0000D6FC 803805                  	cmp byte [rax], T_undefined
 19165 0000D6FF 0F8457800000            	je L_error_fvar_undefined
 19166 0000D705 50                      	push rax
 19167 0000D706 488B0425[DB160000]      	mov rax, qword [free_var_138]	; free var char-ci>?
 19168 0000D70E 803805                  	cmp byte [rax], T_undefined
 19169 0000D711 0F8445800000            	je L_error_fvar_undefined
 19170 0000D717 50                      	push rax
 19171 0000D718 6A02                    	push 2	; arg count
 19172 0000D71A 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19173 0000D71E 803804                  	cmp byte [rax], T_closure
 19174 0000D721 0F85B9800000            	jne L_error_non_closure
 19175 0000D727 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19176 0000D72A FF5009                  	call SOB_CLOSURE_CODE(rax)
 19177 0000D72D 48890425[DA170000]      	mov qword [free_var_153], rax	; free var string-ci>?
 19178 0000D735 803805                  	cmp byte [rax], T_undefined
 19179 0000D738 0F841E800000            	je L_error_fvar_undefined
 19180 0000D73E 48B8-                   	mov rax, sob_void
 19180 0000D740 [0000000000000000] 
 19181 0000D748 C9                      	leave
 19182 0000D749 C21800                  	ret AND_KILL_FRAME(1)
 19183                                  .L_lambda_simple_end_006d:	; new closure is in rax
 19184 0000D74C 803804                  	cmp byte [rax], T_closure
 19185 0000D74F 0F858B800000            	jne L_error_non_closure
 19186 0000D755 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19187 0000D758 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19188                                  
 19189 0000D75B 4889C7                  	mov rdi, rax
 19190 0000D75E E838820000              	call print_sexpr_if_not_void
 19191                                  
 19192 0000D763 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19193 0000D768 E81C810000              	call malloc
 19194 0000D76D 50                      	push rax
 19195 0000D76E BF00000000              	mov rdi, 8 * 0	; new rib
 19196 0000D773 E811810000              	call malloc
 19197 0000D778 50                      	push rax
 19198 0000D779 BF08000000              	mov rdi, 8 * 1	; extended env
 19199 0000D77E E806810000              	call malloc
 19200 0000D783 488B7D10                	mov rdi, ENV
 19201 0000D787 BE00000000              	mov rsi, 0
 19202 0000D78C BA01000000              	mov rdx, 1
 19203                                  .L_lambda_simple_env_loop_006e:	; ext_env[i + 1] <-- env[i]
 19204 0000D791 4883FE00                	cmp rsi, 0
 19205 0000D795 7410                    	je .L_lambda_simple_env_end_006e
 19206 0000D797 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19207 0000D79B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19208 0000D79F 48FFC6                  	inc rsi
 19209 0000D7A2 48FFC2                  	inc rdx
 19210 0000D7A5 EBEA                    	jmp .L_lambda_simple_env_loop_006e
 19211                                  .L_lambda_simple_env_end_006e:
 19212 0000D7A7 5B                      	pop rbx
 19213 0000D7A8 BE00000000              	mov rsi, 0
 19214                                  .L_lambda_simple_params_loop_006e:	; copy params
 19215 0000D7AD 4883FE00                	cmp rsi, 0
 19216 0000D7B1 740E                    	je .L_lambda_simple_params_end_006e
 19217 0000D7B3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19218 0000D7B8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19219 0000D7BC 48FFC6                  	inc rsi
 19220 0000D7BF EBEC                    	jmp .L_lambda_simple_params_loop_006e
 19221                                  .L_lambda_simple_params_end_006e:
 19222 0000D7C1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19223 0000D7C4 4889C3                  	mov rbx, rax
 19224 0000D7C7 58                      	pop rax
 19225 0000D7C8 C60004                  	mov byte [rax], T_closure
 19226 0000D7CB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19227 0000D7CF 48C74009[DCD70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006e
 19228 0000D7D7 E95B0C0000              	jmp .L_lambda_simple_end_006e
 19229                                  .L_lambda_simple_code_006e:	; lambda-simple body
 19230 0000D7DC 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19231 0000D7E2 740B                    	je .L_lambda_simple_arity_check_ok_006e
 19232 0000D7E4 FF742410                	push qword [rsp + 8 * 2]
 19233 0000D7E8 6A02                    	push 2
 19234 0000D7EA E953800000              	jmp L_error_incorrect_arity_simple
 19235                                  .L_lambda_simple_arity_check_ok_006e:
 19236 0000D7EF C8000000                	enter 0, 0
 19237                                  	; preparing a tail-call
 19238 0000D7F3 48B8-                   	mov rax, L_constants + 1881
 19238 0000D7F5 [5907000000000000] 
 19239 0000D7FD 50                      	push rax
 19240 0000D7FE 6A01                    	push 1	; arg count
 19241 0000D800 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19242 0000D805 E87F800000              	call malloc
 19243 0000D80A 50                      	push rax
 19244 0000D80B BF10000000              	mov rdi, 8 * 2	; new rib
 19245 0000D810 E874800000              	call malloc
 19246 0000D815 50                      	push rax
 19247 0000D816 BF10000000              	mov rdi, 8 * 2	; extended env
 19248 0000D81B E869800000              	call malloc
 19249 0000D820 488B7D10                	mov rdi, ENV
 19250 0000D824 BE00000000              	mov rsi, 0
 19251 0000D829 BA01000000              	mov rdx, 1
 19252                                  .L_lambda_simple_env_loop_006f:	; ext_env[i + 1] <-- env[i]
 19253 0000D82E 4883FE01                	cmp rsi, 1
 19254 0000D832 7410                    	je .L_lambda_simple_env_end_006f
 19255 0000D834 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19256 0000D838 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19257 0000D83C 48FFC6                  	inc rsi
 19258 0000D83F 48FFC2                  	inc rdx
 19259 0000D842 EBEA                    	jmp .L_lambda_simple_env_loop_006f
 19260                                  .L_lambda_simple_env_end_006f:
 19261 0000D844 5B                      	pop rbx
 19262 0000D845 BE00000000              	mov rsi, 0
 19263                                  .L_lambda_simple_params_loop_006f:	; copy params
 19264 0000D84A 4883FE02                	cmp rsi, 2
 19265 0000D84E 740E                    	je .L_lambda_simple_params_end_006f
 19266 0000D850 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19267 0000D855 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19268 0000D859 48FFC6                  	inc rsi
 19269 0000D85C EBEC                    	jmp .L_lambda_simple_params_loop_006f
 19270                                  .L_lambda_simple_params_end_006f:
 19271 0000D85E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19272 0000D861 4889C3                  	mov rbx, rax
 19273 0000D864 58                      	pop rax
 19274 0000D865 C60004                  	mov byte [rax], T_closure
 19275 0000D868 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19276 0000D86C 48C74009[79D80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006f
 19277 0000D874 E9750B0000              	jmp .L_lambda_simple_end_006f
 19278                                  .L_lambda_simple_code_006f:	; lambda-simple body
 19279 0000D879 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19280 0000D87F 740B                    	je .L_lambda_simple_arity_check_ok_006f
 19281 0000D881 FF742410                	push qword [rsp + 8 * 2]
 19282 0000D885 6A01                    	push 1
 19283 0000D887 E9B67F0000              	jmp L_error_incorrect_arity_simple
 19284                                  .L_lambda_simple_arity_check_ok_006f:
 19285 0000D88C C8000000                	enter 0, 0
 19286                                  
 19287 0000D890 BF08000000              	mov rdi, 8
 19288 0000D895 E8EF7F0000              	call malloc
 19289 0000D89A 488B5D20                	mov rbx, PARAM(0)	; param run
 19290 0000D89E 488918                  	mov [rax], rbx	; box run
 19291 0000D8A1 48894520                	mov PARAM(0), rax	;replace param run with box
 19292 0000D8A5 48B8-                   	mov rax, sob_void
 19292 0000D8A7 [0000000000000000] 
 19293                                  
 19294 0000D8AF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19295 0000D8B4 E8D07F0000              	call malloc
 19296 0000D8B9 50                      	push rax
 19297 0000D8BA BF08000000              	mov rdi, 8 * 1	; new rib
 19298 0000D8BF E8C57F0000              	call malloc
 19299 0000D8C4 50                      	push rax
 19300 0000D8C5 BF18000000              	mov rdi, 8 * 3	; extended env
 19301 0000D8CA E8BA7F0000              	call malloc
 19302 0000D8CF 488B7D10                	mov rdi, ENV
 19303 0000D8D3 BE00000000              	mov rsi, 0
 19304 0000D8D8 BA01000000              	mov rdx, 1
 19305                                  .L_lambda_simple_env_loop_0070:	; ext_env[i + 1] <-- env[i]
 19306 0000D8DD 4883FE02                	cmp rsi, 2
 19307 0000D8E1 7410                    	je .L_lambda_simple_env_end_0070
 19308 0000D8E3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19309 0000D8E7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19310 0000D8EB 48FFC6                  	inc rsi
 19311 0000D8EE 48FFC2                  	inc rdx
 19312 0000D8F1 EBEA                    	jmp .L_lambda_simple_env_loop_0070
 19313                                  .L_lambda_simple_env_end_0070:
 19314 0000D8F3 5B                      	pop rbx
 19315 0000D8F4 BE00000000              	mov rsi, 0
 19316                                  .L_lambda_simple_params_loop_0070:	; copy params
 19317 0000D8F9 4883FE01                	cmp rsi, 1
 19318 0000D8FD 740E                    	je .L_lambda_simple_params_end_0070
 19319 0000D8FF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19320 0000D904 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19321 0000D908 48FFC6                  	inc rsi
 19322 0000D90B EBEC                    	jmp .L_lambda_simple_params_loop_0070
 19323                                  .L_lambda_simple_params_end_0070:
 19324 0000D90D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19325 0000D910 4889C3                  	mov rbx, rax
 19326 0000D913 58                      	pop rax
 19327 0000D914 C60004                  	mov byte [rax], T_closure
 19328 0000D917 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19329 0000D91B 48C74009[28D90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0070
 19330 0000D923 E943020000              	jmp .L_lambda_simple_end_0070
 19331                                  .L_lambda_simple_code_0070:	; lambda-simple body
 19332 0000D928 48837C241005            	cmp qword [rsp + 8 * 2], 5
 19333 0000D92E 740B                    	je .L_lambda_simple_arity_check_ok_0070
 19334 0000D930 FF742410                	push qword [rsp + 8 * 2]
 19335 0000D934 6A05                    	push 5
 19336 0000D936 E9077F0000              	jmp L_error_incorrect_arity_simple
 19337                                  .L_lambda_simple_arity_check_ok_0070:
 19338 0000D93B C8000000                	enter 0, 0
 19339 0000D93F 488B4530                	mov rax, PARAM(2)	; param len1
 19340 0000D943 50                      	push rax
 19341 0000D944 488B4520                	mov rax, PARAM(0)	; param i
 19342 0000D948 50                      	push rax
 19343 0000D949 6A02                    	push 2	; arg count
 19344 0000D94B 488B0425[0F160000]      	mov rax, qword [free_var_126]	; free var =
 19345 0000D953 803805                  	cmp byte [rax], T_undefined
 19346 0000D956 0F84007E0000            	je L_error_fvar_undefined
 19347 0000D95C 803804                  	cmp byte [rax], T_closure
 19348 0000D95F 0F857B7E0000            	jne L_error_non_closure
 19349 0000D965 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19350 0000D968 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19351 0000D96B 483D[02000000]          	cmp rax, sob_boolean_false
 19352 0000D971 0F85F0010000            	jne .L_or_end_0009
 19353 0000D977 488B4520                	mov rax, PARAM(0)	; param i
 19354 0000D97B 50                      	push rax
 19355 0000D97C 488B4538                	mov rax, PARAM(3)	; param str2
 19356 0000D980 50                      	push rax
 19357 0000D981 6A02                    	push 2	; arg count
 19358 0000D983 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 19359 0000D98B 803805                  	cmp byte [rax], T_undefined
 19360 0000D98E 0F84C87D0000            	je L_error_fvar_undefined
 19361 0000D994 803804                  	cmp byte [rax], T_closure
 19362 0000D997 0F85437E0000            	jne L_error_non_closure
 19363 0000D99D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19364 0000D9A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19365 0000D9A3 50                      	push rax
 19366 0000D9A4 488B4520                	mov rax, PARAM(0)	; param i
 19367 0000D9A8 50                      	push rax
 19368 0000D9A9 488B4528                	mov rax, PARAM(1)	; param str1
 19369 0000D9AD 50                      	push rax
 19370 0000D9AE 6A02                    	push 2	; arg count
 19371 0000D9B0 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 19372 0000D9B8 803805                  	cmp byte [rax], T_undefined
 19373 0000D9BB 0F849B7D0000            	je L_error_fvar_undefined
 19374 0000D9C1 803804                  	cmp byte [rax], T_closure
 19375 0000D9C4 0F85167E0000            	jne L_error_non_closure
 19376 0000D9CA FF7001                  	push SOB_CLOSURE_ENV(rax)
 19377 0000D9CD FF5009                  	call SOB_CLOSURE_CODE(rax)
 19378 0000D9D0 50                      	push rax
 19379 0000D9D1 6A02                    	push 2	; arg count
 19380 0000D9D3 488B4510                	mov rax, ENV
 19381 0000D9D7 488B4008                	mov rax, qword [rax + 8 * 1]
 19382 0000D9DB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 19383 0000D9DE 803804                  	cmp byte [rax], T_closure
 19384 0000D9E1 0F85F97D0000            	jne L_error_non_closure
 19385 0000D9E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19386 0000D9EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 19387 0000D9ED 483D[02000000]          	cmp rax, sob_boolean_false
 19388 0000D9F3 0F856E010000            	jne .L_or_end_0009
 19389 0000D9F9 488B4530                	mov rax, PARAM(2)	; param len1
 19390 0000D9FD 50                      	push rax
 19391 0000D9FE 488B4520                	mov rax, PARAM(0)	; param i
 19392 0000DA02 50                      	push rax
 19393 0000DA03 6A02                    	push 2	; arg count
 19394 0000DA05 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 19395 0000DA0D 803805                  	cmp byte [rax], T_undefined
 19396 0000DA10 0F84467D0000            	je L_error_fvar_undefined
 19397 0000DA16 803804                  	cmp byte [rax], T_closure
 19398 0000DA19 0F85C17D0000            	jne L_error_non_closure
 19399 0000DA1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 19400 0000DA22 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19401                                  
 19402 0000DA25 483D[02000000]          	cmp rax, sob_boolean_false
 19403 0000DA2B 0F842C010000            	je .L_if_else_005a
 19404 0000DA31 488B4520                	mov rax, PARAM(0)	; param i
 19405 0000DA35 50                      	push rax
 19406 0000DA36 488B4538                	mov rax, PARAM(3)	; param str2
 19407 0000DA3A 50                      	push rax
 19408 0000DA3B 6A02                    	push 2	; arg count
 19409 0000DA3D 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 19410 0000DA45 803805                  	cmp byte [rax], T_undefined
 19411 0000DA48 0F840E7D0000            	je L_error_fvar_undefined
 19412 0000DA4E 803804                  	cmp byte [rax], T_closure
 19413 0000DA51 0F85897D0000            	jne L_error_non_closure
 19414 0000DA57 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19415 0000DA5A FF5009                  	call SOB_CLOSURE_CODE(rax)
 19416 0000DA5D 50                      	push rax
 19417 0000DA5E 488B4520                	mov rax, PARAM(0)	; param i
 19418 0000DA62 50                      	push rax
 19419 0000DA63 488B4528                	mov rax, PARAM(1)	; param str1
 19420 0000DA67 50                      	push rax
 19421 0000DA68 6A02                    	push 2	; arg count
 19422 0000DA6A 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 19423 0000DA72 803805                  	cmp byte [rax], T_undefined
 19424 0000DA75 0F84E17C0000            	je L_error_fvar_undefined
 19425 0000DA7B 803804                  	cmp byte [rax], T_closure
 19426 0000DA7E 0F855C7D0000            	jne L_error_non_closure
 19427 0000DA84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19428 0000DA87 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19429 0000DA8A 50                      	push rax
 19430 0000DA8B 6A02                    	push 2	; arg count
 19431 0000DA8D 488B4510                	mov rax, ENV
 19432 0000DA91 488B4008                	mov rax, qword [rax + 8 * 1]
 19433 0000DA95 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 19434 0000DA99 803804                  	cmp byte [rax], T_closure
 19435 0000DA9C 0F853E7D0000            	jne L_error_non_closure
 19436 0000DAA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19437 0000DAA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19438                                  
 19439 0000DAA8 483D[02000000]          	cmp rax, sob_boolean_false
 19440 0000DAAE 0F849D000000            	je .L_if_else_005b
 19441                                  	; preparing a tail-call
 19442 0000DAB4 488B4540                	mov rax, PARAM(4)	; param len2
 19443 0000DAB8 50                      	push rax
 19444 0000DAB9 488B4538                	mov rax, PARAM(3)	; param str2
 19445 0000DABD 50                      	push rax
 19446 0000DABE 488B4530                	mov rax, PARAM(2)	; param len1
 19447 0000DAC2 50                      	push rax
 19448 0000DAC3 488B4528                	mov rax, PARAM(1)	; param str1
 19449 0000DAC7 50                      	push rax
 19450 0000DAC8 48B8-                   	mov rax, L_constants + 2158
 19450 0000DACA [6E08000000000000] 
 19451 0000DAD2 50                      	push rax
 19452 0000DAD3 488B4520                	mov rax, PARAM(0)	; param i
 19453 0000DAD7 50                      	push rax
 19454 0000DAD8 6A02                    	push 2	; arg count
 19455 0000DADA 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 19456 0000DAE2 803805                  	cmp byte [rax], T_undefined
 19457 0000DAE5 0F84717C0000            	je L_error_fvar_undefined
 19458 0000DAEB 803804                  	cmp byte [rax], T_closure
 19459 0000DAEE 0F85EC7C0000            	jne L_error_non_closure
 19460 0000DAF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19461 0000DAF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19462 0000DAFA 50                      	push rax
 19463 0000DAFB 6A05                    	push 5	; arg count
 19464 0000DAFD 488B4510                	mov rax, ENV
 19465 0000DB01 488B00                  	mov rax, qword [rax + 8 * 0]
 19466 0000DB04 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19467 0000DB07 488B00                  	mov rax, qword [rax]
 19468 0000DB0A 803804                  	cmp byte [rax], T_closure
 19469 0000DB0D 0F85CD7C0000            	jne L_error_non_closure
 19470 0000DB13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19471                                  
 19472                                  	; recycling the current frame
 19473 0000DB16 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19474 0000DB19 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19475 0000DB1C B909000000              	mov rcx, 5 + 4
 19476 0000DB21 488B5D18                	mov rbx, COUNT
 19477 0000DB25 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19478 0000DB2A 488D55F8                	lea rdx, [rbp - 8 * 1]
 19479                                  .L_tc_recycle_frame_loop_00a8:
 19480 0000DB2E 4883F900                	cmp rcx, 0
 19481 0000DB32 7413                    	je .L_tc_recycle_frame_done_00a8
 19482 0000DB34 488B32                  	mov rsi, qword [rdx]
 19483 0000DB37 488933                  	mov qword [rbx], rsi
 19484 0000DB3A 48FFC9                  	dec rcx
 19485 0000DB3D 4883EB08                	sub rbx, 8 * 1
 19486 0000DB41 4883EA08                	sub rdx, 8 * 1
 19487 0000DB45 EBE7                    	jmp .L_tc_recycle_frame_loop_00a8
 19488                                  .L_tc_recycle_frame_done_00a8:
 19489 0000DB47 488D6308                	lea rsp, [rbx + 8 * 1]
 19490 0000DB4B 5D                      	pop rbp	; the proc will restore it!
 19491 0000DB4C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19492                                  
 19493 0000DB4F EB0A                    	jmp .L_if_end_005b
 19494                                  
 19495                                  	.L_if_else_005b:
 19496 0000DB51 48B8-                   	mov rax, L_constants + 2
 19496 0000DB53 [0200000000000000] 
 19497                                  
 19498                                  	.L_if_end_005b:
 19499                                  
 19500 0000DB5B EB0A                    	jmp .L_if_end_005a
 19501                                  
 19502                                  	.L_if_else_005a:
 19503 0000DB5D 48B8-                   	mov rax, L_constants + 2
 19503 0000DB5F [0200000000000000] 
 19504                                  
 19505                                  	.L_if_end_005a:
 19506                                  .L_or_end_0009:
 19507 0000DB67 C9                      	leave
 19508 0000DB68 C23800                  	ret AND_KILL_FRAME(5)
 19509                                  .L_lambda_simple_end_0070:	; new closure is in rax
 19510                                  
 19511 0000DB6B 50                      	push rax
 19512 0000DB6C 488B4520                	mov rax, PARAM(0)	; param run
 19513                                  
 19514 0000DB70 8F00                    	pop qword[rax]
 19515 0000DB72 48B8-                   	mov rax, sob_void
 19515 0000DB74 [0000000000000000] 
 19516                                  
 19517                                  	; preparing a tail-call
 19518 0000DB7C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19519 0000DB81 E8037D0000              	call malloc
 19520 0000DB86 50                      	push rax
 19521 0000DB87 BF08000000              	mov rdi, 8 * 1	; new rib
 19522 0000DB8C E8F87C0000              	call malloc
 19523 0000DB91 50                      	push rax
 19524 0000DB92 BF18000000              	mov rdi, 8 * 3	; extended env
 19525 0000DB97 E8ED7C0000              	call malloc
 19526 0000DB9C 488B7D10                	mov rdi, ENV
 19527 0000DBA0 BE00000000              	mov rsi, 0
 19528 0000DBA5 BA01000000              	mov rdx, 1
 19529                                  .L_lambda_simple_env_loop_0071:	; ext_env[i + 1] <-- env[i]
 19530 0000DBAA 4883FE02                	cmp rsi, 2
 19531 0000DBAE 7410                    	je .L_lambda_simple_env_end_0071
 19532 0000DBB0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19533 0000DBB4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19534 0000DBB8 48FFC6                  	inc rsi
 19535 0000DBBB 48FFC2                  	inc rdx
 19536 0000DBBE EBEA                    	jmp .L_lambda_simple_env_loop_0071
 19537                                  .L_lambda_simple_env_end_0071:
 19538 0000DBC0 5B                      	pop rbx
 19539 0000DBC1 BE00000000              	mov rsi, 0
 19540                                  .L_lambda_simple_params_loop_0071:	; copy params
 19541 0000DBC6 4883FE01                	cmp rsi, 1
 19542 0000DBCA 740E                    	je .L_lambda_simple_params_end_0071
 19543 0000DBCC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19544 0000DBD1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19545 0000DBD5 48FFC6                  	inc rsi
 19546 0000DBD8 EBEC                    	jmp .L_lambda_simple_params_loop_0071
 19547                                  .L_lambda_simple_params_end_0071:
 19548 0000DBDA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19549 0000DBDD 4889C3                  	mov rbx, rax
 19550 0000DBE0 58                      	pop rax
 19551 0000DBE1 C60004                  	mov byte [rax], T_closure
 19552 0000DBE4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19553 0000DBE8 48C74009[F5DB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0071
 19554 0000DBF0 E985020000              	jmp .L_lambda_simple_end_0071
 19555                                  .L_lambda_simple_code_0071:	; lambda-simple body
 19556 0000DBF5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19557 0000DBFB 740B                    	je .L_lambda_simple_arity_check_ok_0071
 19558 0000DBFD FF742410                	push qword [rsp + 8 * 2]
 19559 0000DC01 6A02                    	push 2
 19560 0000DC03 E93A7C0000              	jmp L_error_incorrect_arity_simple
 19561                                  .L_lambda_simple_arity_check_ok_0071:
 19562 0000DC08 C8000000                	enter 0, 0
 19563                                  	; preparing a tail-call
 19564 0000DC0C 488B4528                	mov rax, PARAM(1)	; param str2
 19565 0000DC10 50                      	push rax
 19566 0000DC11 6A01                    	push 1	; arg count
 19567 0000DC13 488B0425[E30E0000]      	mov rax, qword [free_var_18]	; free var string-length
 19568 0000DC1B 803805                  	cmp byte [rax], T_undefined
 19569 0000DC1E 0F84387B0000            	je L_error_fvar_undefined
 19570 0000DC24 803804                  	cmp byte [rax], T_closure
 19571 0000DC27 0F85B37B0000            	jne L_error_non_closure
 19572 0000DC2D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19573 0000DC30 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19574 0000DC33 50                      	push rax
 19575 0000DC34 488B4520                	mov rax, PARAM(0)	; param str1
 19576 0000DC38 50                      	push rax
 19577 0000DC39 6A01                    	push 1	; arg count
 19578 0000DC3B 488B0425[E30E0000]      	mov rax, qword [free_var_18]	; free var string-length
 19579 0000DC43 803805                  	cmp byte [rax], T_undefined
 19580 0000DC46 0F84107B0000            	je L_error_fvar_undefined
 19581 0000DC4C 803804                  	cmp byte [rax], T_closure
 19582 0000DC4F 0F858B7B0000            	jne L_error_non_closure
 19583 0000DC55 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19584 0000DC58 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19585 0000DC5B 50                      	push rax
 19586 0000DC5C 6A02                    	push 2	; arg count
 19587 0000DC5E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19588 0000DC63 E8217C0000              	call malloc
 19589 0000DC68 50                      	push rax
 19590 0000DC69 BF10000000              	mov rdi, 8 * 2	; new rib
 19591 0000DC6E E8167C0000              	call malloc
 19592 0000DC73 50                      	push rax
 19593 0000DC74 BF20000000              	mov rdi, 8 * 4	; extended env
 19594 0000DC79 E80B7C0000              	call malloc
 19595 0000DC7E 488B7D10                	mov rdi, ENV
 19596 0000DC82 BE00000000              	mov rsi, 0
 19597 0000DC87 BA01000000              	mov rdx, 1
 19598                                  .L_lambda_simple_env_loop_0072:	; ext_env[i + 1] <-- env[i]
 19599 0000DC8C 4883FE03                	cmp rsi, 3
 19600 0000DC90 7410                    	je .L_lambda_simple_env_end_0072
 19601 0000DC92 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19602 0000DC96 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19603 0000DC9A 48FFC6                  	inc rsi
 19604 0000DC9D 48FFC2                  	inc rdx
 19605 0000DCA0 EBEA                    	jmp .L_lambda_simple_env_loop_0072
 19606                                  .L_lambda_simple_env_end_0072:
 19607 0000DCA2 5B                      	pop rbx
 19608 0000DCA3 BE00000000              	mov rsi, 0
 19609                                  .L_lambda_simple_params_loop_0072:	; copy params
 19610 0000DCA8 4883FE02                	cmp rsi, 2
 19611 0000DCAC 740E                    	je .L_lambda_simple_params_end_0072
 19612 0000DCAE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19613 0000DCB3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19614 0000DCB7 48FFC6                  	inc rsi
 19615 0000DCBA EBEC                    	jmp .L_lambda_simple_params_loop_0072
 19616                                  .L_lambda_simple_params_end_0072:
 19617 0000DCBC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19618 0000DCBF 4889C3                  	mov rbx, rax
 19619 0000DCC2 58                      	pop rax
 19620 0000DCC3 C60004                  	mov byte [rax], T_closure
 19621 0000DCC6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19622 0000DCCA 48C74009[D7DC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0072
 19623 0000DCD2 E95A010000              	jmp .L_lambda_simple_end_0072
 19624                                  .L_lambda_simple_code_0072:	; lambda-simple body
 19625 0000DCD7 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19626 0000DCDD 740B                    	je .L_lambda_simple_arity_check_ok_0072
 19627 0000DCDF FF742410                	push qword [rsp + 8 * 2]
 19628 0000DCE3 6A02                    	push 2
 19629 0000DCE5 E9587B0000              	jmp L_error_incorrect_arity_simple
 19630                                  .L_lambda_simple_arity_check_ok_0072:
 19631 0000DCEA C8000000                	enter 0, 0
 19632 0000DCEE 488B4528                	mov rax, PARAM(1)	; param len2
 19633 0000DCF2 50                      	push rax
 19634 0000DCF3 488B4520                	mov rax, PARAM(0)	; param len1
 19635 0000DCF7 50                      	push rax
 19636 0000DCF8 6A02                    	push 2	; arg count
 19637 0000DCFA 488B0425[DC150000]      	mov rax, qword [free_var_123]	; free var <=
 19638 0000DD02 803805                  	cmp byte [rax], T_undefined
 19639 0000DD05 0F84517A0000            	je L_error_fvar_undefined
 19640 0000DD0B 803804                  	cmp byte [rax], T_closure
 19641 0000DD0E 0F85CC7A0000            	jne L_error_non_closure
 19642 0000DD14 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19643 0000DD17 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19644                                  
 19645 0000DD1A 483D[02000000]          	cmp rax, sob_boolean_false
 19646 0000DD20 0F8486000000            	je .L_if_else_005c
 19647                                  	; preparing a tail-call
 19648 0000DD26 488B4528                	mov rax, PARAM(1)	; param len2
 19649 0000DD2A 50                      	push rax
 19650 0000DD2B 488B4510                	mov rax, ENV
 19651 0000DD2F 488B00                  	mov rax, qword [rax + 8 * 0]
 19652 0000DD32 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19653 0000DD36 50                      	push rax
 19654 0000DD37 488B4520                	mov rax, PARAM(0)	; param len1
 19655 0000DD3B 50                      	push rax
 19656 0000DD3C 488B4510                	mov rax, ENV
 19657 0000DD40 488B00                  	mov rax, qword [rax + 8 * 0]
 19658 0000DD43 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19659 0000DD46 50                      	push rax
 19660 0000DD47 48B8-                   	mov rax, L_constants + 2023
 19660 0000DD49 [E707000000000000] 
 19661 0000DD51 50                      	push rax
 19662 0000DD52 6A05                    	push 5	; arg count
 19663 0000DD54 488B4510                	mov rax, ENV
 19664 0000DD58 488B4008                	mov rax, qword [rax + 8 * 1]
 19665 0000DD5C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19666 0000DD5F 488B00                  	mov rax, qword [rax]
 19667 0000DD62 803804                  	cmp byte [rax], T_closure
 19668 0000DD65 0F85757A0000            	jne L_error_non_closure
 19669 0000DD6B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19670                                  
 19671                                  	; recycling the current frame
 19672 0000DD6E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19673 0000DD71 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19674 0000DD74 B909000000              	mov rcx, 5 + 4
 19675 0000DD79 488B5D18                	mov rbx, COUNT
 19676 0000DD7D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19677 0000DD82 488D55F8                	lea rdx, [rbp - 8 * 1]
 19678                                  .L_tc_recycle_frame_loop_00a9:
 19679 0000DD86 4883F900                	cmp rcx, 0
 19680 0000DD8A 7413                    	je .L_tc_recycle_frame_done_00a9
 19681 0000DD8C 488B32                  	mov rsi, qword [rdx]
 19682 0000DD8F 488933                  	mov qword [rbx], rsi
 19683 0000DD92 48FFC9                  	dec rcx
 19684 0000DD95 4883EB08                	sub rbx, 8 * 1
 19685 0000DD99 4883EA08                	sub rdx, 8 * 1
 19686 0000DD9D EBE7                    	jmp .L_tc_recycle_frame_loop_00a9
 19687                                  .L_tc_recycle_frame_done_00a9:
 19688 0000DD9F 488D6308                	lea rsp, [rbx + 8 * 1]
 19689 0000DDA3 5D                      	pop rbp	; the proc will restore it!
 19690 0000DDA4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19691                                  
 19692 0000DDA7 E981000000              	jmp .L_if_end_005c
 19693                                  
 19694                                  	.L_if_else_005c:
 19695                                  	; preparing a tail-call
 19696 0000DDAC 488B4520                	mov rax, PARAM(0)	; param len1
 19697 0000DDB0 50                      	push rax
 19698 0000DDB1 488B4510                	mov rax, ENV
 19699 0000DDB5 488B00                  	mov rax, qword [rax + 8 * 0]
 19700 0000DDB8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19701 0000DDBB 50                      	push rax
 19702 0000DDBC 488B4528                	mov rax, PARAM(1)	; param len2
 19703 0000DDC0 50                      	push rax
 19704 0000DDC1 488B4510                	mov rax, ENV
 19705 0000DDC5 488B00                  	mov rax, qword [rax + 8 * 0]
 19706 0000DDC8 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19707 0000DDCC 50                      	push rax
 19708 0000DDCD 48B8-                   	mov rax, L_constants + 2023
 19708 0000DDCF [E707000000000000] 
 19709 0000DDD7 50                      	push rax
 19710 0000DDD8 6A05                    	push 5	; arg count
 19711 0000DDDA 488B4510                	mov rax, ENV
 19712 0000DDDE 488B4008                	mov rax, qword [rax + 8 * 1]
 19713 0000DDE2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19714 0000DDE5 488B00                  	mov rax, qword [rax]
 19715 0000DDE8 803804                  	cmp byte [rax], T_closure
 19716 0000DDEB 0F85EF790000            	jne L_error_non_closure
 19717 0000DDF1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19718                                  
 19719                                  	; recycling the current frame
 19720 0000DDF4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19721 0000DDF7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19722 0000DDFA B909000000              	mov rcx, 5 + 4
 19723 0000DDFF 488B5D18                	mov rbx, COUNT
 19724 0000DE03 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19725 0000DE08 488D55F8                	lea rdx, [rbp - 8 * 1]
 19726                                  .L_tc_recycle_frame_loop_00aa:
 19727 0000DE0C 4883F900                	cmp rcx, 0
 19728 0000DE10 7413                    	je .L_tc_recycle_frame_done_00aa
 19729 0000DE12 488B32                  	mov rsi, qword [rdx]
 19730 0000DE15 488933                  	mov qword [rbx], rsi
 19731 0000DE18 48FFC9                  	dec rcx
 19732 0000DE1B 4883EB08                	sub rbx, 8 * 1
 19733 0000DE1F 4883EA08                	sub rdx, 8 * 1
 19734 0000DE23 EBE7                    	jmp .L_tc_recycle_frame_loop_00aa
 19735                                  .L_tc_recycle_frame_done_00aa:
 19736 0000DE25 488D6308                	lea rsp, [rbx + 8 * 1]
 19737 0000DE29 5D                      	pop rbp	; the proc will restore it!
 19738 0000DE2A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19739                                  
 19740                                  	.L_if_end_005c:
 19741 0000DE2D C9                      	leave
 19742 0000DE2E C22000                  	ret AND_KILL_FRAME(2)
 19743                                  .L_lambda_simple_end_0072:	; new closure is in rax
 19744 0000DE31 803804                  	cmp byte [rax], T_closure
 19745 0000DE34 0F85A6790000            	jne L_error_non_closure
 19746 0000DE3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 19747                                  
 19748                                  	; recycling the current frame
 19749 0000DE3D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19750 0000DE40 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19751 0000DE43 B906000000              	mov rcx, 2 + 4
 19752 0000DE48 488B5D18                	mov rbx, COUNT
 19753 0000DE4C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19754 0000DE51 488D55F8                	lea rdx, [rbp - 8 * 1]
 19755                                  .L_tc_recycle_frame_loop_00ab:
 19756 0000DE55 4883F900                	cmp rcx, 0
 19757 0000DE59 7413                    	je .L_tc_recycle_frame_done_00ab
 19758 0000DE5B 488B32                  	mov rsi, qword [rdx]
 19759 0000DE5E 488933                  	mov qword [rbx], rsi
 19760 0000DE61 48FFC9                  	dec rcx
 19761 0000DE64 4883EB08                	sub rbx, 8 * 1
 19762 0000DE68 4883EA08                	sub rdx, 8 * 1
 19763 0000DE6C EBE7                    	jmp .L_tc_recycle_frame_loop_00ab
 19764                                  .L_tc_recycle_frame_done_00ab:
 19765 0000DE6E 488D6308                	lea rsp, [rbx + 8 * 1]
 19766 0000DE72 5D                      	pop rbp	; the proc will restore it!
 19767 0000DE73 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19768 0000DE76 C9                      	leave
 19769 0000DE77 C22000                  	ret AND_KILL_FRAME(2)
 19770                                  .L_lambda_simple_end_0071:	; new closure is in rax
 19771 0000DE7A 50                      	push rax
 19772 0000DE7B 6A01                    	push 1	; arg count
 19773 0000DE7D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19774 0000DE82 E8027A0000              	call malloc
 19775 0000DE87 50                      	push rax
 19776 0000DE88 BF08000000              	mov rdi, 8 * 1	; new rib
 19777 0000DE8D E8F7790000              	call malloc
 19778 0000DE92 50                      	push rax
 19779 0000DE93 BF18000000              	mov rdi, 8 * 3	; extended env
 19780 0000DE98 E8EC790000              	call malloc
 19781 0000DE9D 488B7D10                	mov rdi, ENV
 19782 0000DEA1 BE00000000              	mov rsi, 0
 19783 0000DEA6 BA01000000              	mov rdx, 1
 19784                                  .L_lambda_simple_env_loop_0073:	; ext_env[i + 1] <-- env[i]
 19785 0000DEAB 4883FE02                	cmp rsi, 2
 19786 0000DEAF 7410                    	je .L_lambda_simple_env_end_0073
 19787 0000DEB1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19788 0000DEB5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19789 0000DEB9 48FFC6                  	inc rsi
 19790 0000DEBC 48FFC2                  	inc rdx
 19791 0000DEBF EBEA                    	jmp .L_lambda_simple_env_loop_0073
 19792                                  .L_lambda_simple_env_end_0073:
 19793 0000DEC1 5B                      	pop rbx
 19794 0000DEC2 BE00000000              	mov rsi, 0
 19795                                  .L_lambda_simple_params_loop_0073:	; copy params
 19796 0000DEC7 4883FE01                	cmp rsi, 1
 19797 0000DECB 740E                    	je .L_lambda_simple_params_end_0073
 19798 0000DECD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19799 0000DED2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19800 0000DED6 48FFC6                  	inc rsi
 19801 0000DED9 EBEC                    	jmp .L_lambda_simple_params_loop_0073
 19802                                  .L_lambda_simple_params_end_0073:
 19803 0000DEDB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19804 0000DEDE 4889C3                  	mov rbx, rax
 19805 0000DEE1 58                      	pop rax
 19806 0000DEE2 C60004                  	mov byte [rax], T_closure
 19807 0000DEE5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19808 0000DEE9 48C74009[F6DE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0073
 19809 0000DEF1 E9AF040000              	jmp .L_lambda_simple_end_0073
 19810                                  .L_lambda_simple_code_0073:	; lambda-simple body
 19811 0000DEF6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19812 0000DEFC 740B                    	je .L_lambda_simple_arity_check_ok_0073
 19813 0000DEFE FF742410                	push qword [rsp + 8 * 2]
 19814 0000DF02 6A01                    	push 1
 19815 0000DF04 E939790000              	jmp L_error_incorrect_arity_simple
 19816                                  .L_lambda_simple_arity_check_ok_0073:
 19817 0000DF09 C8000000                	enter 0, 0
 19818                                  	; preparing a tail-call
 19819 0000DF0D 48B8-                   	mov rax, L_constants + 1881
 19819 0000DF0F [5907000000000000] 
 19820 0000DF17 50                      	push rax
 19821 0000DF18 6A01                    	push 1	; arg count
 19822 0000DF1A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19823 0000DF1F E865790000              	call malloc
 19824 0000DF24 50                      	push rax
 19825 0000DF25 BF08000000              	mov rdi, 8 * 1	; new rib
 19826 0000DF2A E85A790000              	call malloc
 19827 0000DF2F 50                      	push rax
 19828 0000DF30 BF20000000              	mov rdi, 8 * 4	; extended env
 19829 0000DF35 E84F790000              	call malloc
 19830 0000DF3A 488B7D10                	mov rdi, ENV
 19831 0000DF3E BE00000000              	mov rsi, 0
 19832 0000DF43 BA01000000              	mov rdx, 1
 19833                                  .L_lambda_simple_env_loop_0074:	; ext_env[i + 1] <-- env[i]
 19834 0000DF48 4883FE03                	cmp rsi, 3
 19835 0000DF4C 7410                    	je .L_lambda_simple_env_end_0074
 19836 0000DF4E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19837 0000DF52 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19838 0000DF56 48FFC6                  	inc rsi
 19839 0000DF59 48FFC2                  	inc rdx
 19840 0000DF5C EBEA                    	jmp .L_lambda_simple_env_loop_0074
 19841                                  .L_lambda_simple_env_end_0074:
 19842 0000DF5E 5B                      	pop rbx
 19843 0000DF5F BE00000000              	mov rsi, 0
 19844                                  .L_lambda_simple_params_loop_0074:	; copy params
 19845 0000DF64 4883FE01                	cmp rsi, 1
 19846 0000DF68 740E                    	je .L_lambda_simple_params_end_0074
 19847 0000DF6A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19848 0000DF6F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19849 0000DF73 48FFC6                  	inc rsi
 19850 0000DF76 EBEC                    	jmp .L_lambda_simple_params_loop_0074
 19851                                  .L_lambda_simple_params_end_0074:
 19852 0000DF78 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19853 0000DF7B 4889C3                  	mov rbx, rax
 19854 0000DF7E 58                      	pop rax
 19855 0000DF7F C60004                  	mov byte [rax], T_closure
 19856 0000DF82 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19857 0000DF86 48C74009[93DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0074
 19858 0000DF8E E9C9030000              	jmp .L_lambda_simple_end_0074
 19859                                  .L_lambda_simple_code_0074:	; lambda-simple body
 19860 0000DF93 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19861 0000DF99 740B                    	je .L_lambda_simple_arity_check_ok_0074
 19862 0000DF9B FF742410                	push qword [rsp + 8 * 2]
 19863 0000DF9F 6A01                    	push 1
 19864 0000DFA1 E99C780000              	jmp L_error_incorrect_arity_simple
 19865                                  .L_lambda_simple_arity_check_ok_0074:
 19866 0000DFA6 C8000000                	enter 0, 0
 19867                                  
 19868 0000DFAA BF08000000              	mov rdi, 8
 19869 0000DFAF E8D5780000              	call malloc
 19870 0000DFB4 488B5D20                	mov rbx, PARAM(0)	; param run
 19871 0000DFB8 488918                  	mov [rax], rbx	; box run
 19872 0000DFBB 48894520                	mov PARAM(0), rax	;replace param run with box
 19873 0000DFBF 48B8-                   	mov rax, sob_void
 19873 0000DFC1 [0000000000000000] 
 19874                                  
 19875 0000DFC9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19876 0000DFCE E8B6780000              	call malloc
 19877 0000DFD3 50                      	push rax
 19878 0000DFD4 BF08000000              	mov rdi, 8 * 1	; new rib
 19879 0000DFD9 E8AB780000              	call malloc
 19880 0000DFDE 50                      	push rax
 19881 0000DFDF BF28000000              	mov rdi, 8 * 5	; extended env
 19882 0000DFE4 E8A0780000              	call malloc
 19883 0000DFE9 488B7D10                	mov rdi, ENV
 19884 0000DFED BE00000000              	mov rsi, 0
 19885 0000DFF2 BA01000000              	mov rdx, 1
 19886                                  .L_lambda_simple_env_loop_0075:	; ext_env[i + 1] <-- env[i]
 19887 0000DFF7 4883FE04                	cmp rsi, 4
 19888 0000DFFB 7410                    	je .L_lambda_simple_env_end_0075
 19889 0000DFFD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19890 0000E001 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19891 0000E005 48FFC6                  	inc rsi
 19892 0000E008 48FFC2                  	inc rdx
 19893 0000E00B EBEA                    	jmp .L_lambda_simple_env_loop_0075
 19894                                  .L_lambda_simple_env_end_0075:
 19895 0000E00D 5B                      	pop rbx
 19896 0000E00E BE00000000              	mov rsi, 0
 19897                                  .L_lambda_simple_params_loop_0075:	; copy params
 19898 0000E013 4883FE01                	cmp rsi, 1
 19899 0000E017 740E                    	je .L_lambda_simple_params_end_0075
 19900 0000E019 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19901 0000E01E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19902 0000E022 48FFC6                  	inc rsi
 19903 0000E025 EBEC                    	jmp .L_lambda_simple_params_loop_0075
 19904                                  .L_lambda_simple_params_end_0075:
 19905 0000E027 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19906 0000E02A 4889C3                  	mov rbx, rax
 19907 0000E02D 58                      	pop rax
 19908 0000E02E C60004                  	mov byte [rax], T_closure
 19909 0000E031 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19910 0000E035 48C74009[42E00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0075
 19911 0000E03D E953010000              	jmp .L_lambda_simple_end_0075
 19912                                  .L_lambda_simple_code_0075:	; lambda-simple body
 19913 0000E042 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19914 0000E048 740B                    	je .L_lambda_simple_arity_check_ok_0075
 19915 0000E04A FF742410                	push qword [rsp + 8 * 2]
 19916 0000E04E 6A02                    	push 2
 19917 0000E050 E9ED770000              	jmp L_error_incorrect_arity_simple
 19918                                  .L_lambda_simple_arity_check_ok_0075:
 19919 0000E055 C8000000                	enter 0, 0
 19920 0000E059 488B4528                	mov rax, PARAM(1)	; param strs
 19921 0000E05D 50                      	push rax
 19922 0000E05E 6A01                    	push 1	; arg count
 19923 0000E060 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 19924 0000E068 803805                  	cmp byte [rax], T_undefined
 19925 0000E06B 0F84EB760000            	je L_error_fvar_undefined
 19926 0000E071 803804                  	cmp byte [rax], T_closure
 19927 0000E074 0F8566770000            	jne L_error_non_closure
 19928 0000E07A FF7001                  	push SOB_CLOSURE_ENV(rax)
 19929 0000E07D FF5009                  	call SOB_CLOSURE_CODE(rax)
 19930 0000E080 483D[02000000]          	cmp rax, sob_boolean_false
 19931 0000E086 0F8505010000            	jne .L_or_end_000a
 19932 0000E08C 488B4528                	mov rax, PARAM(1)	; param strs
 19933 0000E090 50                      	push rax
 19934 0000E091 6A01                    	push 1	; arg count
 19935 0000E093 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 19936 0000E09B 803805                  	cmp byte [rax], T_undefined
 19937 0000E09E 0F84B8760000            	je L_error_fvar_undefined
 19938 0000E0A4 803804                  	cmp byte [rax], T_closure
 19939 0000E0A7 0F8533770000            	jne L_error_non_closure
 19940 0000E0AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 19941 0000E0B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19942 0000E0B3 50                      	push rax
 19943 0000E0B4 488B4520                	mov rax, PARAM(0)	; param str
 19944 0000E0B8 50                      	push rax
 19945 0000E0B9 6A02                    	push 2	; arg count
 19946 0000E0BB 488B4510                	mov rax, ENV
 19947 0000E0BF 488B4008                	mov rax, qword [rax + 8 * 1]
 19948 0000E0C3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<=?
 19949 0000E0C6 803804                  	cmp byte [rax], T_closure
 19950 0000E0C9 0F8511770000            	jne L_error_non_closure
 19951 0000E0CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 19952 0000E0D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19953                                  
 19954 0000E0D5 483D[02000000]          	cmp rax, sob_boolean_false
 19955 0000E0DB 0F84A6000000            	je .L_if_else_005d
 19956                                  	; preparing a tail-call
 19957 0000E0E1 488B4528                	mov rax, PARAM(1)	; param strs
 19958 0000E0E5 50                      	push rax
 19959 0000E0E6 6A01                    	push 1	; arg count
 19960 0000E0E8 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 19961 0000E0F0 803805                  	cmp byte [rax], T_undefined
 19962 0000E0F3 0F8463760000            	je L_error_fvar_undefined
 19963 0000E0F9 803804                  	cmp byte [rax], T_closure
 19964 0000E0FC 0F85DE760000            	jne L_error_non_closure
 19965 0000E102 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19966 0000E105 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19967 0000E108 50                      	push rax
 19968 0000E109 488B4528                	mov rax, PARAM(1)	; param strs
 19969 0000E10D 50                      	push rax
 19970 0000E10E 6A01                    	push 1	; arg count
 19971 0000E110 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 19972 0000E118 803805                  	cmp byte [rax], T_undefined
 19973 0000E11B 0F843B760000            	je L_error_fvar_undefined
 19974 0000E121 803804                  	cmp byte [rax], T_closure
 19975 0000E124 0F85B6760000            	jne L_error_non_closure
 19976 0000E12A FF7001                  	push SOB_CLOSURE_ENV(rax)
 19977 0000E12D FF5009                  	call SOB_CLOSURE_CODE(rax)
 19978 0000E130 50                      	push rax
 19979 0000E131 6A02                    	push 2	; arg count
 19980 0000E133 488B4510                	mov rax, ENV
 19981 0000E137 488B00                  	mov rax, qword [rax + 8 * 0]
 19982 0000E13A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19983 0000E13D 488B00                  	mov rax, qword [rax]
 19984 0000E140 803804                  	cmp byte [rax], T_closure
 19985 0000E143 0F8597760000            	jne L_error_non_closure
 19986 0000E149 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19987                                  
 19988                                  	; recycling the current frame
 19989 0000E14C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19990 0000E14F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19991 0000E152 B906000000              	mov rcx, 2 + 4
 19992 0000E157 488B5D18                	mov rbx, COUNT
 19993 0000E15B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19994 0000E160 488D55F8                	lea rdx, [rbp - 8 * 1]
 19995                                  .L_tc_recycle_frame_loop_00ac:
 19996 0000E164 4883F900                	cmp rcx, 0
 19997 0000E168 7413                    	je .L_tc_recycle_frame_done_00ac
 19998 0000E16A 488B32                  	mov rsi, qword [rdx]
 19999 0000E16D 488933                  	mov qword [rbx], rsi
 20000 0000E170 48FFC9                  	dec rcx
 20001 0000E173 4883EB08                	sub rbx, 8 * 1
 20002 0000E177 4883EA08                	sub rdx, 8 * 1
 20003 0000E17B EBE7                    	jmp .L_tc_recycle_frame_loop_00ac
 20004                                  .L_tc_recycle_frame_done_00ac:
 20005 0000E17D 488D6308                	lea rsp, [rbx + 8 * 1]
 20006 0000E181 5D                      	pop rbp	; the proc will restore it!
 20007 0000E182 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20008                                  
 20009 0000E185 EB0A                    	jmp .L_if_end_005d
 20010                                  
 20011                                  	.L_if_else_005d:
 20012 0000E187 48B8-                   	mov rax, L_constants + 2
 20012 0000E189 [0200000000000000] 
 20013                                  
 20014                                  	.L_if_end_005d:
 20015                                  .L_or_end_000a:
 20016 0000E191 C9                      	leave
 20017 0000E192 C22000                  	ret AND_KILL_FRAME(2)
 20018                                  .L_lambda_simple_end_0075:	; new closure is in rax
 20019                                  
 20020 0000E195 50                      	push rax
 20021 0000E196 488B4520                	mov rax, PARAM(0)	; param run
 20022                                  
 20023 0000E19A 8F00                    	pop qword[rax]
 20024 0000E19C 48B8-                   	mov rax, sob_void
 20024 0000E19E [0000000000000000] 
 20025                                  
 20026 0000E1A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20027 0000E1AB E8D9760000              	call malloc
 20028 0000E1B0 50                      	push rax
 20029 0000E1B1 BF08000000              	mov rdi, 8 * 1	; new rib
 20030 0000E1B6 E8CE760000              	call malloc
 20031 0000E1BB 50                      	push rax
 20032 0000E1BC BF28000000              	mov rdi, 8 * 5	; extended env
 20033 0000E1C1 E8C3760000              	call malloc
 20034 0000E1C6 488B7D10                	mov rdi, ENV
 20035 0000E1CA BE00000000              	mov rsi, 0
 20036 0000E1CF BA01000000              	mov rdx, 1
 20037                                  .L_lambda_opt_env_loop_0013:	; ext_env[i + 1] <-- env[i]
 20038 0000E1D4 4883FE04                	cmp rsi, 4
 20039 0000E1D8 7410                    	je .L_lambda_opt_env_end_0013
 20040 0000E1DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20041 0000E1DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20042 0000E1E2 48FFC6                  	inc rsi
 20043 0000E1E5 48FFC2                  	inc rdx
 20044 0000E1E8 EBEA                    	jmp .L_lambda_opt_env_loop_0013
 20045                                  .L_lambda_opt_env_end_0013:
 20046 0000E1EA 5B                      	pop rbx
 20047 0000E1EB BE00000000              	mov rsi, 0
 20048                                  .L_lambda_opt_params_loop_0013:	; copy params
 20049 0000E1F0 4883FE01                	cmp rsi, 1
 20050 0000E1F4 740E                    	je .L_lambda_opt_params_end_0013
 20051 0000E1F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20052 0000E1FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20053 0000E1FF 48FFC6                  	inc rsi
 20054 0000E202 EBEC                    	jmp .L_lambda_opt_params_loop_0013
 20055                                  .L_lambda_opt_params_end_0013:
 20056 0000E204 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20057 0000E207 4889C3                  	mov rbx, rax
 20058 0000E20A 58                      	pop rax
 20059 0000E20B C60004                  	mov byte [rax], T_closure
 20060 0000E20E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20061 0000E212 48C74009[1FE20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0013
 20062 0000E21A E939010000              	jmp .L_lambda_opt_end_0013
 20063                                  .L_lambda_opt_code_0013:	; lambda-simple body
 20064 0000E21F 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 20065 0000E225 740D                    	je .L_lambda_opt_arity_check_exact_0013 ;	 if equal, go to exact arity
 20066 0000E227 7F42                    	jg .L_lambda_opt_arity_check_more_0013 ;	 if greater than, go to arity more
 20067 0000E229 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 20068 0000E22D 6A01                     	push 1
 20069 0000E22F E922760000              	jmp L_error_incorrect_arity_opt
 20070                                  	.L_lambda_opt_arity_check_exact_0013:
 20071 0000E234 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 20072 0000E239 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 20073 0000E23E 4883EC08                	sub rsp, 8
 20074 0000E242 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 20075                                  	.L_lambda_opt_exact_shifting_loop_0013:
 20076 0000E246 488B5108                	mov rdx, [rcx + 8]
 20077 0000E24A 488911                  	mov [rcx], rdx
 20078 0000E24D 4883C108                	add rcx, 8
 20079 0000E251 4839CB                  	cmp rbx, rcx
 20080 0000E254 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0013
 20081                                  	.L_lambda_opt_exact_shifting_loop_end_0013:
 20082 0000E256 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 20083 0000E25D 4883C001                	add rax, 1 ; 	arg count += 1
 20084 0000E261 4889442410              	mov qword [rsp + 8 * 2], rax
 20085 0000E266 E987000000              	jmp .L_lambda_opt_stack_adjusted_0013
 20086                                  	.L_lambda_opt_arity_check_more_0013:
 20087 0000E26B 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 20087 0000E26D [0100000000000000] 
 20088 0000E275 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 20089 0000E27B 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0013
 20090                                  	.L_lambda_opt_stack_shrink_loop_0013:
 20091 0000E27D BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 20092 0000E282 E802760000              	call malloc ;	 allocated memory for the optional scheme list
 20093 0000E287 C60021                  	mov byte[rax], T_pair ;	 set type pair
 20094 0000E28A 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 20095 0000E28E 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 20096 0000E291 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 20097 0000E296 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 20098 0000E29B 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 20099 0000E29F 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 20100                                  	.L_lambda_opt_more_shifting_loop_0013:
 20101 0000E2A4 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 20102 0000E2A7 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 20103 0000E2AB 4883EB08                	sub rbx, 8 
 20104 0000E2AF 4839DC                  	cmp rsp, rbx
 20105 0000E2B2 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0013
 20106                                  	.L_lambda_opt_more_shifting_loop_end_0013:
 20107 0000E2B4 4883C408                	add rsp, 8 ;	 update rsp
 20108 0000E2B8 488B5C2410              	mov rbx, [rsp + 8 * 2]
 20109 0000E2BD 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 20110 0000E2C1 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 20111 0000E2C6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20112 0000E2CC 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0013
 20113                                  	.L_lambda_opt_stack_shrink_loop_exit_0013:
 20114 0000E2CE 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 20115 0000E2D3 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 20116 0000E2D8 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 20117 0000E2DD E8A7750000              	call malloc ;	 allocated memory for the optional scheme list
 20118 0000E2E2 C60021                  	mov byte[rax], T_pair ;	 set type pair
 20119 0000E2E5 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 20120 0000E2E9 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 20121 0000E2ED 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 20122                                  	.L_lambda_opt_stack_adjusted_0013:
 20123 0000E2F2 C8000000                	enter 0, 0
 20124                                  	; preparing a tail-call
 20125 0000E2F6 488B4528                	mov rax, PARAM(1)	; param strs
 20126 0000E2FA 50                      	push rax
 20127 0000E2FB 488B4520                	mov rax, PARAM(0)	; param str
 20128 0000E2FF 50                      	push rax
 20129 0000E300 6A02                    	push 2	; arg count
 20130 0000E302 488B4510                	mov rax, ENV
 20131 0000E306 488B00                  	mov rax, qword [rax + 8 * 0]
 20132 0000E309 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20133 0000E30C 488B00                  	mov rax, qword [rax]
 20134 0000E30F 803804                  	cmp byte [rax], T_closure
 20135 0000E312 0F85C8740000            	jne L_error_non_closure
 20136 0000E318 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20137                                  
 20138                                  	; recycling the current frame
 20139 0000E31B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20140 0000E31E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20141 0000E321 B906000000              	mov rcx, 2 + 4
 20142 0000E326 488B5D18                	mov rbx, COUNT
 20143 0000E32A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20144 0000E32F 488D55F8                	lea rdx, [rbp - 8 * 1]
 20145                                  .L_tc_recycle_frame_loop_00ad:
 20146 0000E333 4883F900                	cmp rcx, 0
 20147 0000E337 7413                    	je .L_tc_recycle_frame_done_00ad
 20148 0000E339 488B32                  	mov rsi, qword [rdx]
 20149 0000E33C 488933                  	mov qword [rbx], rsi
 20150 0000E33F 48FFC9                  	dec rcx
 20151 0000E342 4883EB08                	sub rbx, 8 * 1
 20152 0000E346 4883EA08                	sub rdx, 8 * 1
 20153 0000E34A EBE7                    	jmp .L_tc_recycle_frame_loop_00ad
 20154                                  .L_tc_recycle_frame_done_00ad:
 20155 0000E34C 488D6308                	lea rsp, [rbx + 8 * 1]
 20156 0000E350 5D                      	pop rbp	; the proc will restore it!
 20157 0000E351 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20158 0000E354 C9                      	leave
 20159 0000E355 C22000                  	ret AND_KILL_FRAME(2)
 20160                                  .L_lambda_opt_end_0013:	; new closure is in rax
 20161 0000E358 C9                      	leave
 20162 0000E359 C21800                  	ret AND_KILL_FRAME(1)
 20163                                  .L_lambda_simple_end_0074:	; new closure is in rax
 20164 0000E35C 803804                  	cmp byte [rax], T_closure
 20165 0000E35F 0F857B740000            	jne L_error_non_closure
 20166 0000E365 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20167                                  
 20168                                  	; recycling the current frame
 20169 0000E368 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20170 0000E36B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20171 0000E36E B905000000              	mov rcx, 1 + 4
 20172 0000E373 488B5D18                	mov rbx, COUNT
 20173 0000E377 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20174 0000E37C 488D55F8                	lea rdx, [rbp - 8 * 1]
 20175                                  .L_tc_recycle_frame_loop_00ae:
 20176 0000E380 4883F900                	cmp rcx, 0
 20177 0000E384 7413                    	je .L_tc_recycle_frame_done_00ae
 20178 0000E386 488B32                  	mov rsi, qword [rdx]
 20179 0000E389 488933                  	mov qword [rbx], rsi
 20180 0000E38C 48FFC9                  	dec rcx
 20181 0000E38F 4883EB08                	sub rbx, 8 * 1
 20182 0000E393 4883EA08                	sub rdx, 8 * 1
 20183 0000E397 EBE7                    	jmp .L_tc_recycle_frame_loop_00ae
 20184                                  .L_tc_recycle_frame_done_00ae:
 20185 0000E399 488D6308                	lea rsp, [rbx + 8 * 1]
 20186 0000E39D 5D                      	pop rbp	; the proc will restore it!
 20187 0000E39E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20188 0000E3A1 C9                      	leave
 20189 0000E3A2 C21800                  	ret AND_KILL_FRAME(1)
 20190                                  .L_lambda_simple_end_0073:	; new closure is in rax
 20191 0000E3A5 803804                  	cmp byte [rax], T_closure
 20192 0000E3A8 0F8532740000            	jne L_error_non_closure
 20193 0000E3AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 20194                                  
 20195                                  	; recycling the current frame
 20196 0000E3B1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20197 0000E3B4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20198 0000E3B7 B905000000              	mov rcx, 1 + 4
 20199 0000E3BC 488B5D18                	mov rbx, COUNT
 20200 0000E3C0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20201 0000E3C5 488D55F8                	lea rdx, [rbp - 8 * 1]
 20202                                  .L_tc_recycle_frame_loop_00af:
 20203 0000E3C9 4883F900                	cmp rcx, 0
 20204 0000E3CD 7413                    	je .L_tc_recycle_frame_done_00af
 20205 0000E3CF 488B32                  	mov rsi, qword [rdx]
 20206 0000E3D2 488933                  	mov qword [rbx], rsi
 20207 0000E3D5 48FFC9                  	dec rcx
 20208 0000E3D8 4883EB08                	sub rbx, 8 * 1
 20209 0000E3DC 4883EA08                	sub rdx, 8 * 1
 20210 0000E3E0 EBE7                    	jmp .L_tc_recycle_frame_loop_00af
 20211                                  .L_tc_recycle_frame_done_00af:
 20212 0000E3E2 488D6308                	lea rsp, [rbx + 8 * 1]
 20213 0000E3E6 5D                      	pop rbp	; the proc will restore it!
 20214 0000E3E7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20215 0000E3EA C9                      	leave
 20216 0000E3EB C21800                  	ret AND_KILL_FRAME(1)
 20217                                  .L_lambda_simple_end_006f:	; new closure is in rax
 20218 0000E3EE 803804                  	cmp byte [rax], T_closure
 20219 0000E3F1 0F85E9730000            	jne L_error_non_closure
 20220 0000E3F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20221                                  
 20222                                  	; recycling the current frame
 20223 0000E3FA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20224 0000E3FD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20225 0000E400 B905000000              	mov rcx, 1 + 4
 20226 0000E405 488B5D18                	mov rbx, COUNT
 20227 0000E409 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20228 0000E40E 488D55F8                	lea rdx, [rbp - 8 * 1]
 20229                                  .L_tc_recycle_frame_loop_00b0:
 20230 0000E412 4883F900                	cmp rcx, 0
 20231 0000E416 7413                    	je .L_tc_recycle_frame_done_00b0
 20232 0000E418 488B32                  	mov rsi, qword [rdx]
 20233 0000E41B 488933                  	mov qword [rbx], rsi
 20234 0000E41E 48FFC9                  	dec rcx
 20235 0000E421 4883EB08                	sub rbx, 8 * 1
 20236 0000E425 4883EA08                	sub rdx, 8 * 1
 20237 0000E429 EBE7                    	jmp .L_tc_recycle_frame_loop_00b0
 20238                                  .L_tc_recycle_frame_done_00b0:
 20239 0000E42B 488D6308                	lea rsp, [rbx + 8 * 1]
 20240 0000E42F 5D                      	pop rbp	; the proc will restore it!
 20241 0000E430 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20242 0000E433 C9                      	leave
 20243 0000E434 C22000                  	ret AND_KILL_FRAME(2)
 20244                                  .L_lambda_simple_end_006e:	; new closure is in rax
 20245 0000E437 50                      	push rax
 20246 0000E438 6A01                    	push 1	; arg count
 20247 0000E43A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20248 0000E43F E845740000              	call malloc
 20249 0000E444 50                      	push rax
 20250 0000E445 BF00000000              	mov rdi, 8 * 0	; new rib
 20251 0000E44A E83A740000              	call malloc
 20252 0000E44F 50                      	push rax
 20253 0000E450 BF08000000              	mov rdi, 8 * 1	; extended env
 20254 0000E455 E82F740000              	call malloc
 20255 0000E45A 488B7D10                	mov rdi, ENV
 20256 0000E45E BE00000000              	mov rsi, 0
 20257 0000E463 BA01000000              	mov rdx, 1
 20258                                  .L_lambda_simple_env_loop_0076:	; ext_env[i + 1] <-- env[i]
 20259 0000E468 4883FE00                	cmp rsi, 0
 20260 0000E46C 7410                    	je .L_lambda_simple_env_end_0076
 20261 0000E46E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20262 0000E472 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20263 0000E476 48FFC6                  	inc rsi
 20264 0000E479 48FFC2                  	inc rdx
 20265 0000E47C EBEA                    	jmp .L_lambda_simple_env_loop_0076
 20266                                  .L_lambda_simple_env_end_0076:
 20267 0000E47E 5B                      	pop rbx
 20268 0000E47F BE00000000              	mov rsi, 0
 20269                                  .L_lambda_simple_params_loop_0076:	; copy params
 20270 0000E484 4883FE00                	cmp rsi, 0
 20271 0000E488 740E                    	je .L_lambda_simple_params_end_0076
 20272 0000E48A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20273 0000E48F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20274 0000E493 48FFC6                  	inc rsi
 20275 0000E496 EBEC                    	jmp .L_lambda_simple_params_loop_0076
 20276                                  .L_lambda_simple_params_end_0076:
 20277 0000E498 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20278 0000E49B 4889C3                  	mov rbx, rax
 20279 0000E49E 58                      	pop rax
 20280 0000E49F C60004                  	mov byte [rax], T_closure
 20281 0000E4A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20282 0000E4A6 48C74009[B3E40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0076
 20283 0000E4AE E96B010000              	jmp .L_lambda_simple_end_0076
 20284                                  .L_lambda_simple_code_0076:	; lambda-simple body
 20285 0000E4B3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20286 0000E4B9 740B                    	je .L_lambda_simple_arity_check_ok_0076
 20287 0000E4BB FF742410                	push qword [rsp + 8 * 2]
 20288 0000E4BF 6A01                    	push 1
 20289 0000E4C1 E97C730000              	jmp L_error_incorrect_arity_simple
 20290                                  .L_lambda_simple_arity_check_ok_0076:
 20291 0000E4C6 C8000000                	enter 0, 0
 20292 0000E4CA 488B0425[53160000]      	mov rax, qword [free_var_130]	; free var char=?
 20293 0000E4D2 803805                  	cmp byte [rax], T_undefined
 20294 0000E4D5 0F8481720000            	je L_error_fvar_undefined
 20295 0000E4DB 50                      	push rax
 20296 0000E4DC 488B0425[31160000]      	mov rax, qword [free_var_128]	; free var char<?
 20297 0000E4E4 803805                  	cmp byte [rax], T_undefined
 20298 0000E4E7 0F846F720000            	je L_error_fvar_undefined
 20299 0000E4ED 50                      	push rax
 20300 0000E4EE 6A02                    	push 2	; arg count
 20301 0000E4F0 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20302 0000E4F4 803804                  	cmp byte [rax], T_closure
 20303 0000E4F7 0F85E3720000            	jne L_error_non_closure
 20304 0000E4FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 20305 0000E500 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20306 0000E503 48890425[52170000]      	mov qword [free_var_145], rax	; free var string<=?
 20307 0000E50B 803805                  	cmp byte [rax], T_undefined
 20308 0000E50E 0F8448720000            	je L_error_fvar_undefined
 20309 0000E514 48B8-                   	mov rax, sob_void
 20309 0000E516 [0000000000000000] 
 20310                                  
 20311 0000E51E 488B0425[CA160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 20312 0000E526 803805                  	cmp byte [rax], T_undefined
 20313 0000E529 0F842D720000            	je L_error_fvar_undefined
 20314 0000E52F 50                      	push rax
 20315 0000E530 488B0425[A8160000]      	mov rax, qword [free_var_135]	; free var char-ci<?
 20316 0000E538 803805                  	cmp byte [rax], T_undefined
 20317 0000E53B 0F841B720000            	je L_error_fvar_undefined
 20318 0000E541 50                      	push rax
 20319 0000E542 6A02                    	push 2	; arg count
 20320 0000E544 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20321 0000E548 803804                  	cmp byte [rax], T_closure
 20322 0000E54B 0F858F720000            	jne L_error_non_closure
 20323 0000E551 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20324 0000E554 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20325 0000E557 48890425[A7170000]      	mov qword [free_var_150], rax	; free var string-ci<=?
 20326 0000E55F 803805                  	cmp byte [rax], T_undefined
 20327 0000E562 0F84F4710000            	je L_error_fvar_undefined
 20328 0000E568 48B8-                   	mov rax, sob_void
 20328 0000E56A [0000000000000000] 
 20329                                  
 20330 0000E572 488B0425[53160000]      	mov rax, qword [free_var_130]	; free var char=?
 20331 0000E57A 803805                  	cmp byte [rax], T_undefined
 20332 0000E57D 0F84D9710000            	je L_error_fvar_undefined
 20333 0000E583 50                      	push rax
 20334 0000E584 488B0425[64160000]      	mov rax, qword [free_var_131]	; free var char>?
 20335 0000E58C 803805                  	cmp byte [rax], T_undefined
 20336 0000E58F 0F84C7710000            	je L_error_fvar_undefined
 20337 0000E595 50                      	push rax
 20338 0000E596 6A02                    	push 2	; arg count
 20339 0000E598 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20340 0000E59C 803804                  	cmp byte [rax], T_closure
 20341 0000E59F 0F853B720000            	jne L_error_non_closure
 20342 0000E5A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20343 0000E5A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20344 0000E5AB 48890425[74170000]      	mov qword [free_var_147], rax	; free var string>=?
 20345 0000E5B3 803805                  	cmp byte [rax], T_undefined
 20346 0000E5B6 0F84A0710000            	je L_error_fvar_undefined
 20347 0000E5BC 48B8-                   	mov rax, sob_void
 20347 0000E5BE [0000000000000000] 
 20348                                  
 20349 0000E5C6 488B0425[CA160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 20350 0000E5CE 803805                  	cmp byte [rax], T_undefined
 20351 0000E5D1 0F8485710000            	je L_error_fvar_undefined
 20352 0000E5D7 50                      	push rax
 20353 0000E5D8 488B0425[DB160000]      	mov rax, qword [free_var_138]	; free var char-ci>?
 20354 0000E5E0 803805                  	cmp byte [rax], T_undefined
 20355 0000E5E3 0F8473710000            	je L_error_fvar_undefined
 20356 0000E5E9 50                      	push rax
 20357 0000E5EA 6A02                    	push 2	; arg count
 20358 0000E5EC 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20359 0000E5F0 803804                  	cmp byte [rax], T_closure
 20360 0000E5F3 0F85E7710000            	jne L_error_non_closure
 20361 0000E5F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20362 0000E5FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 20363 0000E5FF 48890425[C9170000]      	mov qword [free_var_152], rax	; free var string-ci>=?
 20364 0000E607 803805                  	cmp byte [rax], T_undefined
 20365 0000E60A 0F844C710000            	je L_error_fvar_undefined
 20366 0000E610 48B8-                   	mov rax, sob_void
 20366 0000E612 [0000000000000000] 
 20367 0000E61A C9                      	leave
 20368 0000E61B C21800                  	ret AND_KILL_FRAME(1)
 20369                                  .L_lambda_simple_end_0076:	; new closure is in rax
 20370 0000E61E 803804                  	cmp byte [rax], T_closure
 20371 0000E621 0F85B9710000            	jne L_error_non_closure
 20372 0000E627 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20373 0000E62A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20374                                  
 20375 0000E62D 4889C7                  	mov rdi, rax
 20376 0000E630 E866730000              	call print_sexpr_if_not_void
 20377                                  
 20378 0000E635 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20379 0000E63A E84A720000              	call malloc
 20380 0000E63F 50                      	push rax
 20381 0000E640 BF00000000              	mov rdi, 8 * 0	; new rib
 20382 0000E645 E83F720000              	call malloc
 20383 0000E64A 50                      	push rax
 20384 0000E64B BF08000000              	mov rdi, 8 * 1	; extended env
 20385 0000E650 E834720000              	call malloc
 20386 0000E655 488B7D10                	mov rdi, ENV
 20387 0000E659 BE00000000              	mov rsi, 0
 20388 0000E65E BA01000000              	mov rdx, 1
 20389                                  .L_lambda_simple_env_loop_0077:	; ext_env[i + 1] <-- env[i]
 20390 0000E663 4883FE00                	cmp rsi, 0
 20391 0000E667 7410                    	je .L_lambda_simple_env_end_0077
 20392 0000E669 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20393 0000E66D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20394 0000E671 48FFC6                  	inc rsi
 20395 0000E674 48FFC2                  	inc rdx
 20396 0000E677 EBEA                    	jmp .L_lambda_simple_env_loop_0077
 20397                                  .L_lambda_simple_env_end_0077:
 20398 0000E679 5B                      	pop rbx
 20399 0000E67A BE00000000              	mov rsi, 0
 20400                                  .L_lambda_simple_params_loop_0077:	; copy params
 20401 0000E67F 4883FE00                	cmp rsi, 0
 20402 0000E683 740E                    	je .L_lambda_simple_params_end_0077
 20403 0000E685 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20404 0000E68A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20405 0000E68E 48FFC6                  	inc rsi
 20406 0000E691 EBEC                    	jmp .L_lambda_simple_params_loop_0077
 20407                                  .L_lambda_simple_params_end_0077:
 20408 0000E693 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20409 0000E696 4889C3                  	mov rbx, rax
 20410 0000E699 58                      	pop rax
 20411 0000E69A C60004                  	mov byte [rax], T_closure
 20412 0000E69D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20413 0000E6A1 48C74009[AEE60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0077
 20414 0000E6A9 E9540B0000              	jmp .L_lambda_simple_end_0077
 20415                                  .L_lambda_simple_code_0077:	; lambda-simple body
 20416 0000E6AE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20417 0000E6B4 740B                    	je .L_lambda_simple_arity_check_ok_0077
 20418 0000E6B6 FF742410                	push qword [rsp + 8 * 2]
 20419 0000E6BA 6A01                    	push 1
 20420 0000E6BC E981710000              	jmp L_error_incorrect_arity_simple
 20421                                  .L_lambda_simple_arity_check_ok_0077:
 20422 0000E6C1 C8000000                	enter 0, 0
 20423                                  	; preparing a tail-call
 20424 0000E6C5 48B8-                   	mov rax, L_constants + 1881
 20424 0000E6C7 [5907000000000000] 
 20425 0000E6CF 50                      	push rax
 20426 0000E6D0 6A01                    	push 1	; arg count
 20427 0000E6D2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20428 0000E6D7 E8AD710000              	call malloc
 20429 0000E6DC 50                      	push rax
 20430 0000E6DD BF08000000              	mov rdi, 8 * 1	; new rib
 20431 0000E6E2 E8A2710000              	call malloc
 20432 0000E6E7 50                      	push rax
 20433 0000E6E8 BF10000000              	mov rdi, 8 * 2	; extended env
 20434 0000E6ED E897710000              	call malloc
 20435 0000E6F2 488B7D10                	mov rdi, ENV
 20436 0000E6F6 BE00000000              	mov rsi, 0
 20437 0000E6FB BA01000000              	mov rdx, 1
 20438                                  .L_lambda_simple_env_loop_0078:	; ext_env[i + 1] <-- env[i]
 20439 0000E700 4883FE01                	cmp rsi, 1
 20440 0000E704 7410                    	je .L_lambda_simple_env_end_0078
 20441 0000E706 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20442 0000E70A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20443 0000E70E 48FFC6                  	inc rsi
 20444 0000E711 48FFC2                  	inc rdx
 20445 0000E714 EBEA                    	jmp .L_lambda_simple_env_loop_0078
 20446                                  .L_lambda_simple_env_end_0078:
 20447 0000E716 5B                      	pop rbx
 20448 0000E717 BE00000000              	mov rsi, 0
 20449                                  .L_lambda_simple_params_loop_0078:	; copy params
 20450 0000E71C 4883FE01                	cmp rsi, 1
 20451 0000E720 740E                    	je .L_lambda_simple_params_end_0078
 20452 0000E722 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20453 0000E727 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20454 0000E72B 48FFC6                  	inc rsi
 20455 0000E72E EBEC                    	jmp .L_lambda_simple_params_loop_0078
 20456                                  .L_lambda_simple_params_end_0078:
 20457 0000E730 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20458 0000E733 4889C3                  	mov rbx, rax
 20459 0000E736 58                      	pop rax
 20460 0000E737 C60004                  	mov byte [rax], T_closure
 20461 0000E73A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20462 0000E73E 48C74009[4BE70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0078
 20463 0000E746 E96E0A0000              	jmp .L_lambda_simple_end_0078
 20464                                  .L_lambda_simple_code_0078:	; lambda-simple body
 20465 0000E74B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20466 0000E751 740B                    	je .L_lambda_simple_arity_check_ok_0078
 20467 0000E753 FF742410                	push qword [rsp + 8 * 2]
 20468 0000E757 6A01                    	push 1
 20469 0000E759 E9E4700000              	jmp L_error_incorrect_arity_simple
 20470                                  .L_lambda_simple_arity_check_ok_0078:
 20471 0000E75E C8000000                	enter 0, 0
 20472                                  
 20473 0000E762 BF08000000              	mov rdi, 8
 20474 0000E767 E81D710000              	call malloc
 20475 0000E76C 488B5D20                	mov rbx, PARAM(0)	; param run
 20476 0000E770 488918                  	mov [rax], rbx	; box run
 20477 0000E773 48894520                	mov PARAM(0), rax	;replace param run with box
 20478 0000E777 48B8-                   	mov rax, sob_void
 20478 0000E779 [0000000000000000] 
 20479                                  
 20480 0000E781 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20481 0000E786 E8FE700000              	call malloc
 20482 0000E78B 50                      	push rax
 20483 0000E78C BF08000000              	mov rdi, 8 * 1	; new rib
 20484 0000E791 E8F3700000              	call malloc
 20485 0000E796 50                      	push rax
 20486 0000E797 BF18000000              	mov rdi, 8 * 3	; extended env
 20487 0000E79C E8E8700000              	call malloc
 20488 0000E7A1 488B7D10                	mov rdi, ENV
 20489 0000E7A5 BE00000000              	mov rsi, 0
 20490 0000E7AA BA01000000              	mov rdx, 1
 20491                                  .L_lambda_simple_env_loop_0079:	; ext_env[i + 1] <-- env[i]
 20492 0000E7AF 4883FE02                	cmp rsi, 2
 20493 0000E7B3 7410                    	je .L_lambda_simple_env_end_0079
 20494 0000E7B5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20495 0000E7B9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20496 0000E7BD 48FFC6                  	inc rsi
 20497 0000E7C0 48FFC2                  	inc rdx
 20498 0000E7C3 EBEA                    	jmp .L_lambda_simple_env_loop_0079
 20499                                  .L_lambda_simple_env_end_0079:
 20500 0000E7C5 5B                      	pop rbx
 20501 0000E7C6 BE00000000              	mov rsi, 0
 20502                                  .L_lambda_simple_params_loop_0079:	; copy params
 20503 0000E7CB 4883FE01                	cmp rsi, 1
 20504 0000E7CF 740E                    	je .L_lambda_simple_params_end_0079
 20505 0000E7D1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20506 0000E7D6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20507 0000E7DA 48FFC6                  	inc rsi
 20508 0000E7DD EBEC                    	jmp .L_lambda_simple_params_loop_0079
 20509                                  .L_lambda_simple_params_end_0079:
 20510 0000E7DF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20511 0000E7E2 4889C3                  	mov rbx, rax
 20512 0000E7E5 58                      	pop rax
 20513 0000E7E6 C60004                  	mov byte [rax], T_closure
 20514 0000E7E9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20515 0000E7ED 48C74009[FAE70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0079
 20516 0000E7F5 E9BB010000              	jmp .L_lambda_simple_end_0079
 20517                                  .L_lambda_simple_code_0079:	; lambda-simple body
 20518 0000E7FA 48837C241004            	cmp qword [rsp + 8 * 2], 4
 20519 0000E800 740B                    	je .L_lambda_simple_arity_check_ok_0079
 20520 0000E802 FF742410                	push qword [rsp + 8 * 2]
 20521 0000E806 6A04                    	push 4
 20522 0000E808 E935700000              	jmp L_error_incorrect_arity_simple
 20523                                  .L_lambda_simple_arity_check_ok_0079:
 20524 0000E80D C8000000                	enter 0, 0
 20525 0000E811 488B4538                	mov rax, PARAM(3)	; param len
 20526 0000E815 50                      	push rax
 20527 0000E816 488B4520                	mov rax, PARAM(0)	; param i
 20528 0000E81A 50                      	push rax
 20529 0000E81B 6A02                    	push 2	; arg count
 20530 0000E81D 488B0425[0F160000]      	mov rax, qword [free_var_126]	; free var =
 20531 0000E825 803805                  	cmp byte [rax], T_undefined
 20532 0000E828 0F842E6F0000            	je L_error_fvar_undefined
 20533 0000E82E 803804                  	cmp byte [rax], T_closure
 20534 0000E831 0F85A96F0000            	jne L_error_non_closure
 20535 0000E837 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20536 0000E83A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20537 0000E83D 483D[02000000]          	cmp rax, sob_boolean_false
 20538 0000E843 0F8568010000            	jne .L_or_end_000b
 20539 0000E849 488B4538                	mov rax, PARAM(3)	; param len
 20540 0000E84D 50                      	push rax
 20541 0000E84E 488B4520                	mov rax, PARAM(0)	; param i
 20542 0000E852 50                      	push rax
 20543 0000E853 6A02                    	push 2	; arg count
 20544 0000E855 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 20545 0000E85D 803805                  	cmp byte [rax], T_undefined
 20546 0000E860 0F84F66E0000            	je L_error_fvar_undefined
 20547 0000E866 803804                  	cmp byte [rax], T_closure
 20548 0000E869 0F85716F0000            	jne L_error_non_closure
 20549 0000E86F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20550 0000E872 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20551                                  
 20552 0000E875 483D[02000000]          	cmp rax, sob_boolean_false
 20553 0000E87B 0F8426010000            	je .L_if_else_005e
 20554 0000E881 488B4520                	mov rax, PARAM(0)	; param i
 20555 0000E885 50                      	push rax
 20556 0000E886 488B4530                	mov rax, PARAM(2)	; param str2
 20557 0000E88A 50                      	push rax
 20558 0000E88B 6A02                    	push 2	; arg count
 20559 0000E88D 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 20560 0000E895 803805                  	cmp byte [rax], T_undefined
 20561 0000E898 0F84BE6E0000            	je L_error_fvar_undefined
 20562 0000E89E 803804                  	cmp byte [rax], T_closure
 20563 0000E8A1 0F85396F0000            	jne L_error_non_closure
 20564 0000E8A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20565 0000E8AA FF5009                  	call SOB_CLOSURE_CODE(rax)
 20566 0000E8AD 50                      	push rax
 20567 0000E8AE 488B4520                	mov rax, PARAM(0)	; param i
 20568 0000E8B2 50                      	push rax
 20569 0000E8B3 488B4528                	mov rax, PARAM(1)	; param str1
 20570 0000E8B7 50                      	push rax
 20571 0000E8B8 6A02                    	push 2	; arg count
 20572 0000E8BA 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 20573 0000E8C2 803805                  	cmp byte [rax], T_undefined
 20574 0000E8C5 0F84916E0000            	je L_error_fvar_undefined
 20575 0000E8CB 803804                  	cmp byte [rax], T_closure
 20576 0000E8CE 0F850C6F0000            	jne L_error_non_closure
 20577 0000E8D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20578 0000E8D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20579 0000E8DA 50                      	push rax
 20580 0000E8DB 6A02                    	push 2	; arg count
 20581 0000E8DD 488B4510                	mov rax, ENV
 20582 0000E8E1 488B4008                	mov rax, qword [rax + 8 * 1]
 20583 0000E8E5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char=?
 20584 0000E8E8 803804                  	cmp byte [rax], T_closure
 20585 0000E8EB 0F85EF6E0000            	jne L_error_non_closure
 20586 0000E8F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20587 0000E8F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20588                                  
 20589 0000E8F7 483D[02000000]          	cmp rax, sob_boolean_false
 20590 0000E8FD 0F8498000000            	je .L_if_else_005f
 20591                                  	; preparing a tail-call
 20592 0000E903 488B4538                	mov rax, PARAM(3)	; param len
 20593 0000E907 50                      	push rax
 20594 0000E908 488B4530                	mov rax, PARAM(2)	; param str2
 20595 0000E90C 50                      	push rax
 20596 0000E90D 488B4528                	mov rax, PARAM(1)	; param str1
 20597 0000E911 50                      	push rax
 20598 0000E912 48B8-                   	mov rax, L_constants + 2158
 20598 0000E914 [6E08000000000000] 
 20599 0000E91C 50                      	push rax
 20600 0000E91D 488B4520                	mov rax, PARAM(0)	; param i
 20601 0000E921 50                      	push rax
 20602 0000E922 6A02                    	push 2	; arg count
 20603 0000E924 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 20604 0000E92C 803805                  	cmp byte [rax], T_undefined
 20605 0000E92F 0F84276E0000            	je L_error_fvar_undefined
 20606 0000E935 803804                  	cmp byte [rax], T_closure
 20607 0000E938 0F85A26E0000            	jne L_error_non_closure
 20608 0000E93E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20609 0000E941 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20610 0000E944 50                      	push rax
 20611 0000E945 6A04                    	push 4	; arg count
 20612 0000E947 488B4510                	mov rax, ENV
 20613 0000E94B 488B00                  	mov rax, qword [rax + 8 * 0]
 20614 0000E94E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20615 0000E951 488B00                  	mov rax, qword [rax]
 20616 0000E954 803804                  	cmp byte [rax], T_closure
 20617 0000E957 0F85836E0000            	jne L_error_non_closure
 20618 0000E95D FF7001                  	push SOB_CLOSURE_ENV(rax)
 20619                                  
 20620                                  	; recycling the current frame
 20621 0000E960 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20622 0000E963 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20623 0000E966 B908000000              	mov rcx, 4 + 4
 20624 0000E96B 488B5D18                	mov rbx, COUNT
 20625 0000E96F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20626 0000E974 488D55F8                	lea rdx, [rbp - 8 * 1]
 20627                                  .L_tc_recycle_frame_loop_00b1:
 20628 0000E978 4883F900                	cmp rcx, 0
 20629 0000E97C 7413                    	je .L_tc_recycle_frame_done_00b1
 20630 0000E97E 488B32                  	mov rsi, qword [rdx]
 20631 0000E981 488933                  	mov qword [rbx], rsi
 20632 0000E984 48FFC9                  	dec rcx
 20633 0000E987 4883EB08                	sub rbx, 8 * 1
 20634 0000E98B 4883EA08                	sub rdx, 8 * 1
 20635 0000E98F EBE7                    	jmp .L_tc_recycle_frame_loop_00b1
 20636                                  .L_tc_recycle_frame_done_00b1:
 20637 0000E991 488D6308                	lea rsp, [rbx + 8 * 1]
 20638 0000E995 5D                      	pop rbp	; the proc will restore it!
 20639 0000E996 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20640                                  
 20641 0000E999 EB0A                    	jmp .L_if_end_005f
 20642                                  
 20643                                  	.L_if_else_005f:
 20644 0000E99B 48B8-                   	mov rax, L_constants + 2
 20644 0000E99D [0200000000000000] 
 20645                                  
 20646                                  	.L_if_end_005f:
 20647                                  
 20648 0000E9A5 EB0A                    	jmp .L_if_end_005e
 20649                                  
 20650                                  	.L_if_else_005e:
 20651 0000E9A7 48B8-                   	mov rax, L_constants + 2
 20651 0000E9A9 [0200000000000000] 
 20652                                  
 20653                                  	.L_if_end_005e:
 20654                                  .L_or_end_000b:
 20655 0000E9B1 C9                      	leave
 20656 0000E9B2 C23000                  	ret AND_KILL_FRAME(4)
 20657                                  .L_lambda_simple_end_0079:	; new closure is in rax
 20658                                  
 20659 0000E9B5 50                      	push rax
 20660 0000E9B6 488B4520                	mov rax, PARAM(0)	; param run
 20661                                  
 20662 0000E9BA 8F00                    	pop qword[rax]
 20663 0000E9BC 48B8-                   	mov rax, sob_void
 20663 0000E9BE [0000000000000000] 
 20664                                  
 20665                                  	; preparing a tail-call
 20666 0000E9C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20667 0000E9CB E8B96E0000              	call malloc
 20668 0000E9D0 50                      	push rax
 20669 0000E9D1 BF08000000              	mov rdi, 8 * 1	; new rib
 20670 0000E9D6 E8AE6E0000              	call malloc
 20671 0000E9DB 50                      	push rax
 20672 0000E9DC BF18000000              	mov rdi, 8 * 3	; extended env
 20673 0000E9E1 E8A36E0000              	call malloc
 20674 0000E9E6 488B7D10                	mov rdi, ENV
 20675 0000E9EA BE00000000              	mov rsi, 0
 20676 0000E9EF BA01000000              	mov rdx, 1
 20677                                  .L_lambda_simple_env_loop_007a:	; ext_env[i + 1] <-- env[i]
 20678 0000E9F4 4883FE02                	cmp rsi, 2
 20679 0000E9F8 7410                    	je .L_lambda_simple_env_end_007a
 20680 0000E9FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20681 0000E9FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20682 0000EA02 48FFC6                  	inc rsi
 20683 0000EA05 48FFC2                  	inc rdx
 20684 0000EA08 EBEA                    	jmp .L_lambda_simple_env_loop_007a
 20685                                  .L_lambda_simple_env_end_007a:
 20686 0000EA0A 5B                      	pop rbx
 20687 0000EA0B BE00000000              	mov rsi, 0
 20688                                  .L_lambda_simple_params_loop_007a:	; copy params
 20689 0000EA10 4883FE01                	cmp rsi, 1
 20690 0000EA14 740E                    	je .L_lambda_simple_params_end_007a
 20691 0000EA16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20692 0000EA1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20693 0000EA1F 48FFC6                  	inc rsi
 20694 0000EA22 EBEC                    	jmp .L_lambda_simple_params_loop_007a
 20695                                  .L_lambda_simple_params_end_007a:
 20696 0000EA24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20697 0000EA27 4889C3                  	mov rbx, rax
 20698 0000EA2A 58                      	pop rax
 20699 0000EA2B C60004                  	mov byte [rax], T_closure
 20700 0000EA2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20701 0000EA32 48C74009[3FEA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007a
 20702 0000EA3A E906020000              	jmp .L_lambda_simple_end_007a
 20703                                  .L_lambda_simple_code_007a:	; lambda-simple body
 20704 0000EA3F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20705 0000EA45 740B                    	je .L_lambda_simple_arity_check_ok_007a
 20706 0000EA47 FF742410                	push qword [rsp + 8 * 2]
 20707 0000EA4B 6A02                    	push 2
 20708 0000EA4D E9F06D0000              	jmp L_error_incorrect_arity_simple
 20709                                  .L_lambda_simple_arity_check_ok_007a:
 20710 0000EA52 C8000000                	enter 0, 0
 20711                                  	; preparing a tail-call
 20712 0000EA56 488B4528                	mov rax, PARAM(1)	; param str2
 20713 0000EA5A 50                      	push rax
 20714 0000EA5B 6A01                    	push 1	; arg count
 20715 0000EA5D 488B0425[E30E0000]      	mov rax, qword [free_var_18]	; free var string-length
 20716 0000EA65 803805                  	cmp byte [rax], T_undefined
 20717 0000EA68 0F84EE6C0000            	je L_error_fvar_undefined
 20718 0000EA6E 803804                  	cmp byte [rax], T_closure
 20719 0000EA71 0F85696D0000            	jne L_error_non_closure
 20720 0000EA77 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20721 0000EA7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20722 0000EA7D 50                      	push rax
 20723 0000EA7E 488B4520                	mov rax, PARAM(0)	; param str1
 20724 0000EA82 50                      	push rax
 20725 0000EA83 6A01                    	push 1	; arg count
 20726 0000EA85 488B0425[E30E0000]      	mov rax, qword [free_var_18]	; free var string-length
 20727 0000EA8D 803805                  	cmp byte [rax], T_undefined
 20728 0000EA90 0F84C66C0000            	je L_error_fvar_undefined
 20729 0000EA96 803804                  	cmp byte [rax], T_closure
 20730 0000EA99 0F85416D0000            	jne L_error_non_closure
 20731 0000EA9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20732 0000EAA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20733 0000EAA5 50                      	push rax
 20734 0000EAA6 6A02                    	push 2	; arg count
 20735 0000EAA8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20736 0000EAAD E8D76D0000              	call malloc
 20737 0000EAB2 50                      	push rax
 20738 0000EAB3 BF10000000              	mov rdi, 8 * 2	; new rib
 20739 0000EAB8 E8CC6D0000              	call malloc
 20740 0000EABD 50                      	push rax
 20741 0000EABE BF20000000              	mov rdi, 8 * 4	; extended env
 20742 0000EAC3 E8C16D0000              	call malloc
 20743 0000EAC8 488B7D10                	mov rdi, ENV
 20744 0000EACC BE00000000              	mov rsi, 0
 20745 0000EAD1 BA01000000              	mov rdx, 1
 20746                                  .L_lambda_simple_env_loop_007b:	; ext_env[i + 1] <-- env[i]
 20747 0000EAD6 4883FE03                	cmp rsi, 3
 20748 0000EADA 7410                    	je .L_lambda_simple_env_end_007b
 20749 0000EADC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20750 0000EAE0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20751 0000EAE4 48FFC6                  	inc rsi
 20752 0000EAE7 48FFC2                  	inc rdx
 20753 0000EAEA EBEA                    	jmp .L_lambda_simple_env_loop_007b
 20754                                  .L_lambda_simple_env_end_007b:
 20755 0000EAEC 5B                      	pop rbx
 20756 0000EAED BE00000000              	mov rsi, 0
 20757                                  .L_lambda_simple_params_loop_007b:	; copy params
 20758 0000EAF2 4883FE02                	cmp rsi, 2
 20759 0000EAF6 740E                    	je .L_lambda_simple_params_end_007b
 20760 0000EAF8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20761 0000EAFD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20762 0000EB01 48FFC6                  	inc rsi
 20763 0000EB04 EBEC                    	jmp .L_lambda_simple_params_loop_007b
 20764                                  .L_lambda_simple_params_end_007b:
 20765 0000EB06 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20766 0000EB09 4889C3                  	mov rbx, rax
 20767 0000EB0C 58                      	pop rax
 20768 0000EB0D C60004                  	mov byte [rax], T_closure
 20769 0000EB10 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20770 0000EB14 48C74009[21EB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007b
 20771 0000EB1C E9DB000000              	jmp .L_lambda_simple_end_007b
 20772                                  .L_lambda_simple_code_007b:	; lambda-simple body
 20773 0000EB21 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20774 0000EB27 740B                    	je .L_lambda_simple_arity_check_ok_007b
 20775 0000EB29 FF742410                	push qword [rsp + 8 * 2]
 20776 0000EB2D 6A02                    	push 2
 20777 0000EB2F E90E6D0000              	jmp L_error_incorrect_arity_simple
 20778                                  .L_lambda_simple_arity_check_ok_007b:
 20779 0000EB34 C8000000                	enter 0, 0
 20780 0000EB38 488B4528                	mov rax, PARAM(1)	; param len2
 20781 0000EB3C 50                      	push rax
 20782 0000EB3D 488B4520                	mov rax, PARAM(0)	; param len1
 20783 0000EB41 50                      	push rax
 20784 0000EB42 6A02                    	push 2	; arg count
 20785 0000EB44 488B0425[0F160000]      	mov rax, qword [free_var_126]	; free var =
 20786 0000EB4C 803805                  	cmp byte [rax], T_undefined
 20787 0000EB4F 0F84076C0000            	je L_error_fvar_undefined
 20788 0000EB55 803804                  	cmp byte [rax], T_closure
 20789 0000EB58 0F85826C0000            	jne L_error_non_closure
 20790 0000EB5E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20791 0000EB61 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20792                                  
 20793 0000EB64 483D[02000000]          	cmp rax, sob_boolean_false
 20794 0000EB6A 0F847E000000            	je .L_if_else_0060
 20795                                  	; preparing a tail-call
 20796 0000EB70 488B4520                	mov rax, PARAM(0)	; param len1
 20797 0000EB74 50                      	push rax
 20798 0000EB75 488B4510                	mov rax, ENV
 20799 0000EB79 488B00                  	mov rax, qword [rax + 8 * 0]
 20800 0000EB7C 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 20801 0000EB80 50                      	push rax
 20802 0000EB81 488B4510                	mov rax, ENV
 20803 0000EB85 488B00                  	mov rax, qword [rax + 8 * 0]
 20804 0000EB88 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 20805 0000EB8B 50                      	push rax
 20806 0000EB8C 48B8-                   	mov rax, L_constants + 2023
 20806 0000EB8E [E707000000000000] 
 20807 0000EB96 50                      	push rax
 20808 0000EB97 6A04                    	push 4	; arg count
 20809 0000EB99 488B4510                	mov rax, ENV
 20810 0000EB9D 488B4008                	mov rax, qword [rax + 8 * 1]
 20811 0000EBA1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20812 0000EBA4 488B00                  	mov rax, qword [rax]
 20813 0000EBA7 803804                  	cmp byte [rax], T_closure
 20814 0000EBAA 0F85306C0000            	jne L_error_non_closure
 20815 0000EBB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20816                                  
 20817                                  	; recycling the current frame
 20818 0000EBB3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20819 0000EBB6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20820 0000EBB9 B908000000              	mov rcx, 4 + 4
 20821 0000EBBE 488B5D18                	mov rbx, COUNT
 20822 0000EBC2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20823 0000EBC7 488D55F8                	lea rdx, [rbp - 8 * 1]
 20824                                  .L_tc_recycle_frame_loop_00b2:
 20825 0000EBCB 4883F900                	cmp rcx, 0
 20826 0000EBCF 7413                    	je .L_tc_recycle_frame_done_00b2
 20827 0000EBD1 488B32                  	mov rsi, qword [rdx]
 20828 0000EBD4 488933                  	mov qword [rbx], rsi
 20829 0000EBD7 48FFC9                  	dec rcx
 20830 0000EBDA 4883EB08                	sub rbx, 8 * 1
 20831 0000EBDE 4883EA08                	sub rdx, 8 * 1
 20832 0000EBE2 EBE7                    	jmp .L_tc_recycle_frame_loop_00b2
 20833                                  .L_tc_recycle_frame_done_00b2:
 20834 0000EBE4 488D6308                	lea rsp, [rbx + 8 * 1]
 20835 0000EBE8 5D                      	pop rbp	; the proc will restore it!
 20836 0000EBE9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20837                                  
 20838 0000EBEC EB0A                    	jmp .L_if_end_0060
 20839                                  
 20840                                  	.L_if_else_0060:
 20841 0000EBEE 48B8-                   	mov rax, L_constants + 2
 20841 0000EBF0 [0200000000000000] 
 20842                                  
 20843                                  	.L_if_end_0060:
 20844 0000EBF8 C9                      	leave
 20845 0000EBF9 C22000                  	ret AND_KILL_FRAME(2)
 20846                                  .L_lambda_simple_end_007b:	; new closure is in rax
 20847 0000EBFC 803804                  	cmp byte [rax], T_closure
 20848 0000EBFF 0F85DB6B0000            	jne L_error_non_closure
 20849 0000EC05 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20850                                  
 20851                                  	; recycling the current frame
 20852 0000EC08 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20853 0000EC0B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20854 0000EC0E B906000000              	mov rcx, 2 + 4
 20855 0000EC13 488B5D18                	mov rbx, COUNT
 20856 0000EC17 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20857 0000EC1C 488D55F8                	lea rdx, [rbp - 8 * 1]
 20858                                  .L_tc_recycle_frame_loop_00b3:
 20859 0000EC20 4883F900                	cmp rcx, 0
 20860 0000EC24 7413                    	je .L_tc_recycle_frame_done_00b3
 20861 0000EC26 488B32                  	mov rsi, qword [rdx]
 20862 0000EC29 488933                  	mov qword [rbx], rsi
 20863 0000EC2C 48FFC9                  	dec rcx
 20864 0000EC2F 4883EB08                	sub rbx, 8 * 1
 20865 0000EC33 4883EA08                	sub rdx, 8 * 1
 20866 0000EC37 EBE7                    	jmp .L_tc_recycle_frame_loop_00b3
 20867                                  .L_tc_recycle_frame_done_00b3:
 20868 0000EC39 488D6308                	lea rsp, [rbx + 8 * 1]
 20869 0000EC3D 5D                      	pop rbp	; the proc will restore it!
 20870 0000EC3E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20871 0000EC41 C9                      	leave
 20872 0000EC42 C22000                  	ret AND_KILL_FRAME(2)
 20873                                  .L_lambda_simple_end_007a:	; new closure is in rax
 20874 0000EC45 50                      	push rax
 20875 0000EC46 6A01                    	push 1	; arg count
 20876 0000EC48 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20877 0000EC4D E8376C0000              	call malloc
 20878 0000EC52 50                      	push rax
 20879 0000EC53 BF08000000              	mov rdi, 8 * 1	; new rib
 20880 0000EC58 E82C6C0000              	call malloc
 20881 0000EC5D 50                      	push rax
 20882 0000EC5E BF18000000              	mov rdi, 8 * 3	; extended env
 20883 0000EC63 E8216C0000              	call malloc
 20884 0000EC68 488B7D10                	mov rdi, ENV
 20885 0000EC6C BE00000000              	mov rsi, 0
 20886 0000EC71 BA01000000              	mov rdx, 1
 20887                                  .L_lambda_simple_env_loop_007c:	; ext_env[i + 1] <-- env[i]
 20888 0000EC76 4883FE02                	cmp rsi, 2
 20889 0000EC7A 7410                    	je .L_lambda_simple_env_end_007c
 20890 0000EC7C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20891 0000EC80 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20892 0000EC84 48FFC6                  	inc rsi
 20893 0000EC87 48FFC2                  	inc rdx
 20894 0000EC8A EBEA                    	jmp .L_lambda_simple_env_loop_007c
 20895                                  .L_lambda_simple_env_end_007c:
 20896 0000EC8C 5B                      	pop rbx
 20897 0000EC8D BE00000000              	mov rsi, 0
 20898                                  .L_lambda_simple_params_loop_007c:	; copy params
 20899 0000EC92 4883FE01                	cmp rsi, 1
 20900 0000EC96 740E                    	je .L_lambda_simple_params_end_007c
 20901 0000EC98 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20902 0000EC9D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20903 0000ECA1 48FFC6                  	inc rsi
 20904 0000ECA4 EBEC                    	jmp .L_lambda_simple_params_loop_007c
 20905                                  .L_lambda_simple_params_end_007c:
 20906 0000ECA6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20907 0000ECA9 4889C3                  	mov rbx, rax
 20908 0000ECAC 58                      	pop rax
 20909 0000ECAD C60004                  	mov byte [rax], T_closure
 20910 0000ECB0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20911 0000ECB4 48C74009[C1EC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007c
 20912 0000ECBC E9AF040000              	jmp .L_lambda_simple_end_007c
 20913                                  .L_lambda_simple_code_007c:	; lambda-simple body
 20914 0000ECC1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20915 0000ECC7 740B                    	je .L_lambda_simple_arity_check_ok_007c
 20916 0000ECC9 FF742410                	push qword [rsp + 8 * 2]
 20917 0000ECCD 6A01                    	push 1
 20918 0000ECCF E96E6B0000              	jmp L_error_incorrect_arity_simple
 20919                                  .L_lambda_simple_arity_check_ok_007c:
 20920 0000ECD4 C8000000                	enter 0, 0
 20921                                  	; preparing a tail-call
 20922 0000ECD8 48B8-                   	mov rax, L_constants + 1881
 20922 0000ECDA [5907000000000000] 
 20923 0000ECE2 50                      	push rax
 20924 0000ECE3 6A01                    	push 1	; arg count
 20925 0000ECE5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20926 0000ECEA E89A6B0000              	call malloc
 20927 0000ECEF 50                      	push rax
 20928 0000ECF0 BF08000000              	mov rdi, 8 * 1	; new rib
 20929 0000ECF5 E88F6B0000              	call malloc
 20930 0000ECFA 50                      	push rax
 20931 0000ECFB BF20000000              	mov rdi, 8 * 4	; extended env
 20932 0000ED00 E8846B0000              	call malloc
 20933 0000ED05 488B7D10                	mov rdi, ENV
 20934 0000ED09 BE00000000              	mov rsi, 0
 20935 0000ED0E BA01000000              	mov rdx, 1
 20936                                  .L_lambda_simple_env_loop_007d:	; ext_env[i + 1] <-- env[i]
 20937 0000ED13 4883FE03                	cmp rsi, 3
 20938 0000ED17 7410                    	je .L_lambda_simple_env_end_007d
 20939 0000ED19 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20940 0000ED1D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20941 0000ED21 48FFC6                  	inc rsi
 20942 0000ED24 48FFC2                  	inc rdx
 20943 0000ED27 EBEA                    	jmp .L_lambda_simple_env_loop_007d
 20944                                  .L_lambda_simple_env_end_007d:
 20945 0000ED29 5B                      	pop rbx
 20946 0000ED2A BE00000000              	mov rsi, 0
 20947                                  .L_lambda_simple_params_loop_007d:	; copy params
 20948 0000ED2F 4883FE01                	cmp rsi, 1
 20949 0000ED33 740E                    	je .L_lambda_simple_params_end_007d
 20950 0000ED35 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20951 0000ED3A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20952 0000ED3E 48FFC6                  	inc rsi
 20953 0000ED41 EBEC                    	jmp .L_lambda_simple_params_loop_007d
 20954                                  .L_lambda_simple_params_end_007d:
 20955 0000ED43 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20956 0000ED46 4889C3                  	mov rbx, rax
 20957 0000ED49 58                      	pop rax
 20958 0000ED4A C60004                  	mov byte [rax], T_closure
 20959 0000ED4D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20960 0000ED51 48C74009[5EED0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007d
 20961 0000ED59 E9C9030000              	jmp .L_lambda_simple_end_007d
 20962                                  .L_lambda_simple_code_007d:	; lambda-simple body
 20963 0000ED5E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20964 0000ED64 740B                    	je .L_lambda_simple_arity_check_ok_007d
 20965 0000ED66 FF742410                	push qword [rsp + 8 * 2]
 20966 0000ED6A 6A01                    	push 1
 20967 0000ED6C E9D16A0000              	jmp L_error_incorrect_arity_simple
 20968                                  .L_lambda_simple_arity_check_ok_007d:
 20969 0000ED71 C8000000                	enter 0, 0
 20970                                  
 20971 0000ED75 BF08000000              	mov rdi, 8
 20972 0000ED7A E80A6B0000              	call malloc
 20973 0000ED7F 488B5D20                	mov rbx, PARAM(0)	; param run
 20974 0000ED83 488918                  	mov [rax], rbx	; box run
 20975 0000ED86 48894520                	mov PARAM(0), rax	;replace param run with box
 20976 0000ED8A 48B8-                   	mov rax, sob_void
 20976 0000ED8C [0000000000000000] 
 20977                                  
 20978 0000ED94 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20979 0000ED99 E8EB6A0000              	call malloc
 20980 0000ED9E 50                      	push rax
 20981 0000ED9F BF08000000              	mov rdi, 8 * 1	; new rib
 20982 0000EDA4 E8E06A0000              	call malloc
 20983 0000EDA9 50                      	push rax
 20984 0000EDAA BF28000000              	mov rdi, 8 * 5	; extended env
 20985 0000EDAF E8D56A0000              	call malloc
 20986 0000EDB4 488B7D10                	mov rdi, ENV
 20987 0000EDB8 BE00000000              	mov rsi, 0
 20988 0000EDBD BA01000000              	mov rdx, 1
 20989                                  .L_lambda_simple_env_loop_007e:	; ext_env[i + 1] <-- env[i]
 20990 0000EDC2 4883FE04                	cmp rsi, 4
 20991 0000EDC6 7410                    	je .L_lambda_simple_env_end_007e
 20992 0000EDC8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20993 0000EDCC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20994 0000EDD0 48FFC6                  	inc rsi
 20995 0000EDD3 48FFC2                  	inc rdx
 20996 0000EDD6 EBEA                    	jmp .L_lambda_simple_env_loop_007e
 20997                                  .L_lambda_simple_env_end_007e:
 20998 0000EDD8 5B                      	pop rbx
 20999 0000EDD9 BE00000000              	mov rsi, 0
 21000                                  .L_lambda_simple_params_loop_007e:	; copy params
 21001 0000EDDE 4883FE01                	cmp rsi, 1
 21002 0000EDE2 740E                    	je .L_lambda_simple_params_end_007e
 21003 0000EDE4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21004 0000EDE9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21005 0000EDED 48FFC6                  	inc rsi
 21006 0000EDF0 EBEC                    	jmp .L_lambda_simple_params_loop_007e
 21007                                  .L_lambda_simple_params_end_007e:
 21008 0000EDF2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21009 0000EDF5 4889C3                  	mov rbx, rax
 21010 0000EDF8 58                      	pop rax
 21011 0000EDF9 C60004                  	mov byte [rax], T_closure
 21012 0000EDFC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21013 0000EE00 48C74009[0DEE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007e
 21014 0000EE08 E953010000              	jmp .L_lambda_simple_end_007e
 21015                                  .L_lambda_simple_code_007e:	; lambda-simple body
 21016 0000EE0D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21017 0000EE13 740B                    	je .L_lambda_simple_arity_check_ok_007e
 21018 0000EE15 FF742410                	push qword [rsp + 8 * 2]
 21019 0000EE19 6A02                    	push 2
 21020 0000EE1B E9226A0000              	jmp L_error_incorrect_arity_simple
 21021                                  .L_lambda_simple_arity_check_ok_007e:
 21022 0000EE20 C8000000                	enter 0, 0
 21023 0000EE24 488B4528                	mov rax, PARAM(1)	; param strs
 21024 0000EE28 50                      	push rax
 21025 0000EE29 6A01                    	push 1	; arg count
 21026 0000EE2B 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 21027 0000EE33 803805                  	cmp byte [rax], T_undefined
 21028 0000EE36 0F8420690000            	je L_error_fvar_undefined
 21029 0000EE3C 803804                  	cmp byte [rax], T_closure
 21030 0000EE3F 0F859B690000            	jne L_error_non_closure
 21031 0000EE45 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21032 0000EE48 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21033 0000EE4B 483D[02000000]          	cmp rax, sob_boolean_false
 21034 0000EE51 0F8505010000            	jne .L_or_end_000c
 21035 0000EE57 488B4528                	mov rax, PARAM(1)	; param strs
 21036 0000EE5B 50                      	push rax
 21037 0000EE5C 6A01                    	push 1	; arg count
 21038 0000EE5E 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 21039 0000EE66 803805                  	cmp byte [rax], T_undefined
 21040 0000EE69 0F84ED680000            	je L_error_fvar_undefined
 21041 0000EE6F 803804                  	cmp byte [rax], T_closure
 21042 0000EE72 0F8568690000            	jne L_error_non_closure
 21043 0000EE78 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21044 0000EE7B FF5009                  	call SOB_CLOSURE_CODE(rax)
 21045 0000EE7E 50                      	push rax
 21046 0000EE7F 488B4520                	mov rax, PARAM(0)	; param str
 21047 0000EE83 50                      	push rax
 21048 0000EE84 6A02                    	push 2	; arg count
 21049 0000EE86 488B4510                	mov rax, ENV
 21050 0000EE8A 488B4008                	mov rax, qword [rax + 8 * 1]
 21051 0000EE8E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string=?
 21052 0000EE91 803804                  	cmp byte [rax], T_closure
 21053 0000EE94 0F8546690000            	jne L_error_non_closure
 21054 0000EE9A FF7001                  	push SOB_CLOSURE_ENV(rax)
 21055 0000EE9D FF5009                  	call SOB_CLOSURE_CODE(rax)
 21056                                  
 21057 0000EEA0 483D[02000000]          	cmp rax, sob_boolean_false
 21058 0000EEA6 0F84A6000000            	je .L_if_else_0061
 21059                                  	; preparing a tail-call
 21060 0000EEAC 488B4528                	mov rax, PARAM(1)	; param strs
 21061 0000EEB0 50                      	push rax
 21062 0000EEB1 6A01                    	push 1	; arg count
 21063 0000EEB3 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 21064 0000EEBB 803805                  	cmp byte [rax], T_undefined
 21065 0000EEBE 0F8498680000            	je L_error_fvar_undefined
 21066 0000EEC4 803804                  	cmp byte [rax], T_closure
 21067 0000EEC7 0F8513690000            	jne L_error_non_closure
 21068 0000EECD FF7001                  	push SOB_CLOSURE_ENV(rax)
 21069 0000EED0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21070 0000EED3 50                      	push rax
 21071 0000EED4 488B4528                	mov rax, PARAM(1)	; param strs
 21072 0000EED8 50                      	push rax
 21073 0000EED9 6A01                    	push 1	; arg count
 21074 0000EEDB 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 21075 0000EEE3 803805                  	cmp byte [rax], T_undefined
 21076 0000EEE6 0F8470680000            	je L_error_fvar_undefined
 21077 0000EEEC 803804                  	cmp byte [rax], T_closure
 21078 0000EEEF 0F85EB680000            	jne L_error_non_closure
 21079 0000EEF5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21080 0000EEF8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21081 0000EEFB 50                      	push rax
 21082 0000EEFC 6A02                    	push 2	; arg count
 21083 0000EEFE 488B4510                	mov rax, ENV
 21084 0000EF02 488B00                  	mov rax, qword [rax + 8 * 0]
 21085 0000EF05 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21086 0000EF08 488B00                  	mov rax, qword [rax]
 21087 0000EF0B 803804                  	cmp byte [rax], T_closure
 21088 0000EF0E 0F85CC680000            	jne L_error_non_closure
 21089 0000EF14 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21090                                  
 21091                                  	; recycling the current frame
 21092 0000EF17 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21093 0000EF1A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21094 0000EF1D B906000000              	mov rcx, 2 + 4
 21095 0000EF22 488B5D18                	mov rbx, COUNT
 21096 0000EF26 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21097 0000EF2B 488D55F8                	lea rdx, [rbp - 8 * 1]
 21098                                  .L_tc_recycle_frame_loop_00b4:
 21099 0000EF2F 4883F900                	cmp rcx, 0
 21100 0000EF33 7413                    	je .L_tc_recycle_frame_done_00b4
 21101 0000EF35 488B32                  	mov rsi, qword [rdx]
 21102 0000EF38 488933                  	mov qword [rbx], rsi
 21103 0000EF3B 48FFC9                  	dec rcx
 21104 0000EF3E 4883EB08                	sub rbx, 8 * 1
 21105 0000EF42 4883EA08                	sub rdx, 8 * 1
 21106 0000EF46 EBE7                    	jmp .L_tc_recycle_frame_loop_00b4
 21107                                  .L_tc_recycle_frame_done_00b4:
 21108 0000EF48 488D6308                	lea rsp, [rbx + 8 * 1]
 21109 0000EF4C 5D                      	pop rbp	; the proc will restore it!
 21110 0000EF4D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21111                                  
 21112 0000EF50 EB0A                    	jmp .L_if_end_0061
 21113                                  
 21114                                  	.L_if_else_0061:
 21115 0000EF52 48B8-                   	mov rax, L_constants + 2
 21115 0000EF54 [0200000000000000] 
 21116                                  
 21117                                  	.L_if_end_0061:
 21118                                  .L_or_end_000c:
 21119 0000EF5C C9                      	leave
 21120 0000EF5D C22000                  	ret AND_KILL_FRAME(2)
 21121                                  .L_lambda_simple_end_007e:	; new closure is in rax
 21122                                  
 21123 0000EF60 50                      	push rax
 21124 0000EF61 488B4520                	mov rax, PARAM(0)	; param run
 21125                                  
 21126 0000EF65 8F00                    	pop qword[rax]
 21127 0000EF67 48B8-                   	mov rax, sob_void
 21127 0000EF69 [0000000000000000] 
 21128                                  
 21129 0000EF71 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21130 0000EF76 E80E690000              	call malloc
 21131 0000EF7B 50                      	push rax
 21132 0000EF7C BF08000000              	mov rdi, 8 * 1	; new rib
 21133 0000EF81 E803690000              	call malloc
 21134 0000EF86 50                      	push rax
 21135 0000EF87 BF28000000              	mov rdi, 8 * 5	; extended env
 21136 0000EF8C E8F8680000              	call malloc
 21137 0000EF91 488B7D10                	mov rdi, ENV
 21138 0000EF95 BE00000000              	mov rsi, 0
 21139 0000EF9A BA01000000              	mov rdx, 1
 21140                                  .L_lambda_opt_env_loop_0014:	; ext_env[i + 1] <-- env[i]
 21141 0000EF9F 4883FE04                	cmp rsi, 4
 21142 0000EFA3 7410                    	je .L_lambda_opt_env_end_0014
 21143 0000EFA5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21144 0000EFA9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21145 0000EFAD 48FFC6                  	inc rsi
 21146 0000EFB0 48FFC2                  	inc rdx
 21147 0000EFB3 EBEA                    	jmp .L_lambda_opt_env_loop_0014
 21148                                  .L_lambda_opt_env_end_0014:
 21149 0000EFB5 5B                      	pop rbx
 21150 0000EFB6 BE00000000              	mov rsi, 0
 21151                                  .L_lambda_opt_params_loop_0014:	; copy params
 21152 0000EFBB 4883FE01                	cmp rsi, 1
 21153 0000EFBF 740E                    	je .L_lambda_opt_params_end_0014
 21154 0000EFC1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21155 0000EFC6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21156 0000EFCA 48FFC6                  	inc rsi
 21157 0000EFCD EBEC                    	jmp .L_lambda_opt_params_loop_0014
 21158                                  .L_lambda_opt_params_end_0014:
 21159 0000EFCF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21160 0000EFD2 4889C3                  	mov rbx, rax
 21161 0000EFD5 58                      	pop rax
 21162 0000EFD6 C60004                  	mov byte [rax], T_closure
 21163 0000EFD9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21164 0000EFDD 48C74009[EAEF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0014
 21165 0000EFE5 E939010000              	jmp .L_lambda_opt_end_0014
 21166                                  .L_lambda_opt_code_0014:	; lambda-simple body
 21167 0000EFEA 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 21168 0000EFF0 740D                    	je .L_lambda_opt_arity_check_exact_0014 ;	 if equal, go to exact arity
 21169 0000EFF2 7F42                    	jg .L_lambda_opt_arity_check_more_0014 ;	 if greater than, go to arity more
 21170 0000EFF4 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 21171 0000EFF8 6A01                     	push 1
 21172 0000EFFA E957680000              	jmp L_error_incorrect_arity_opt
 21173                                  	.L_lambda_opt_arity_check_exact_0014:
 21174 0000EFFF 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 21175 0000F004 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 21176 0000F009 4883EC08                	sub rsp, 8
 21177 0000F00D 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 21178                                  	.L_lambda_opt_exact_shifting_loop_0014:
 21179 0000F011 488B5108                	mov rdx, [rcx + 8]
 21180 0000F015 488911                  	mov [rcx], rdx
 21181 0000F018 4883C108                	add rcx, 8
 21182 0000F01C 4839CB                  	cmp rbx, rcx
 21183 0000F01F 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0014
 21184                                  	.L_lambda_opt_exact_shifting_loop_end_0014:
 21185 0000F021 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 21186 0000F028 4883C001                	add rax, 1 ; 	arg count += 1
 21187 0000F02C 4889442410              	mov qword [rsp + 8 * 2], rax
 21188 0000F031 E987000000              	jmp .L_lambda_opt_stack_adjusted_0014
 21189                                  	.L_lambda_opt_arity_check_more_0014:
 21190 0000F036 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 21190 0000F038 [0100000000000000] 
 21191 0000F040 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 21192 0000F046 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0014
 21193                                  	.L_lambda_opt_stack_shrink_loop_0014:
 21194 0000F048 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 21195 0000F04D E837680000              	call malloc ;	 allocated memory for the optional scheme list
 21196 0000F052 C60021                  	mov byte[rax], T_pair ;	 set type pair
 21197 0000F055 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 21198 0000F059 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 21199 0000F05C 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 21200 0000F061 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 21201 0000F066 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 21202 0000F06A 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 21203                                  	.L_lambda_opt_more_shifting_loop_0014:
 21204 0000F06F 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 21205 0000F072 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 21206 0000F076 4883EB08                	sub rbx, 8 
 21207 0000F07A 4839DC                  	cmp rsp, rbx
 21208 0000F07D 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0014
 21209                                  	.L_lambda_opt_more_shifting_loop_end_0014:
 21210 0000F07F 4883C408                	add rsp, 8 ;	 update rsp
 21211 0000F083 488B5C2410              	mov rbx, [rsp + 8 * 2]
 21212 0000F088 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 21213 0000F08C 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 21214 0000F091 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21215 0000F097 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0014
 21216                                  	.L_lambda_opt_stack_shrink_loop_exit_0014:
 21217 0000F099 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 21218 0000F09E 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 21219 0000F0A3 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 21220 0000F0A8 E8DC670000              	call malloc ;	 allocated memory for the optional scheme list
 21221 0000F0AD C60021                  	mov byte[rax], T_pair ;	 set type pair
 21222 0000F0B0 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 21223 0000F0B4 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 21224 0000F0B8 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 21225                                  	.L_lambda_opt_stack_adjusted_0014:
 21226 0000F0BD C8000000                	enter 0, 0
 21227                                  	; preparing a tail-call
 21228 0000F0C1 488B4528                	mov rax, PARAM(1)	; param strs
 21229 0000F0C5 50                      	push rax
 21230 0000F0C6 488B4520                	mov rax, PARAM(0)	; param str
 21231 0000F0CA 50                      	push rax
 21232 0000F0CB 6A02                    	push 2	; arg count
 21233 0000F0CD 488B4510                	mov rax, ENV
 21234 0000F0D1 488B00                  	mov rax, qword [rax + 8 * 0]
 21235 0000F0D4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21236 0000F0D7 488B00                  	mov rax, qword [rax]
 21237 0000F0DA 803804                  	cmp byte [rax], T_closure
 21238 0000F0DD 0F85FD660000            	jne L_error_non_closure
 21239 0000F0E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21240                                  
 21241                                  	; recycling the current frame
 21242 0000F0E6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21243 0000F0E9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21244 0000F0EC B906000000              	mov rcx, 2 + 4
 21245 0000F0F1 488B5D18                	mov rbx, COUNT
 21246 0000F0F5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21247 0000F0FA 488D55F8                	lea rdx, [rbp - 8 * 1]
 21248                                  .L_tc_recycle_frame_loop_00b5:
 21249 0000F0FE 4883F900                	cmp rcx, 0
 21250 0000F102 7413                    	je .L_tc_recycle_frame_done_00b5
 21251 0000F104 488B32                  	mov rsi, qword [rdx]
 21252 0000F107 488933                  	mov qword [rbx], rsi
 21253 0000F10A 48FFC9                  	dec rcx
 21254 0000F10D 4883EB08                	sub rbx, 8 * 1
 21255 0000F111 4883EA08                	sub rdx, 8 * 1
 21256 0000F115 EBE7                    	jmp .L_tc_recycle_frame_loop_00b5
 21257                                  .L_tc_recycle_frame_done_00b5:
 21258 0000F117 488D6308                	lea rsp, [rbx + 8 * 1]
 21259 0000F11B 5D                      	pop rbp	; the proc will restore it!
 21260 0000F11C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21261 0000F11F C9                      	leave
 21262 0000F120 C22000                  	ret AND_KILL_FRAME(2)
 21263                                  .L_lambda_opt_end_0014:	; new closure is in rax
 21264 0000F123 C9                      	leave
 21265 0000F124 C21800                  	ret AND_KILL_FRAME(1)
 21266                                  .L_lambda_simple_end_007d:	; new closure is in rax
 21267 0000F127 803804                  	cmp byte [rax], T_closure
 21268 0000F12A 0F85B0660000            	jne L_error_non_closure
 21269 0000F130 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21270                                  
 21271                                  	; recycling the current frame
 21272 0000F133 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21273 0000F136 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21274 0000F139 B905000000              	mov rcx, 1 + 4
 21275 0000F13E 488B5D18                	mov rbx, COUNT
 21276 0000F142 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21277 0000F147 488D55F8                	lea rdx, [rbp - 8 * 1]
 21278                                  .L_tc_recycle_frame_loop_00b6:
 21279 0000F14B 4883F900                	cmp rcx, 0
 21280 0000F14F 7413                    	je .L_tc_recycle_frame_done_00b6
 21281 0000F151 488B32                  	mov rsi, qword [rdx]
 21282 0000F154 488933                  	mov qword [rbx], rsi
 21283 0000F157 48FFC9                  	dec rcx
 21284 0000F15A 4883EB08                	sub rbx, 8 * 1
 21285 0000F15E 4883EA08                	sub rdx, 8 * 1
 21286 0000F162 EBE7                    	jmp .L_tc_recycle_frame_loop_00b6
 21287                                  .L_tc_recycle_frame_done_00b6:
 21288 0000F164 488D6308                	lea rsp, [rbx + 8 * 1]
 21289 0000F168 5D                      	pop rbp	; the proc will restore it!
 21290 0000F169 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21291 0000F16C C9                      	leave
 21292 0000F16D C21800                  	ret AND_KILL_FRAME(1)
 21293                                  .L_lambda_simple_end_007c:	; new closure is in rax
 21294 0000F170 803804                  	cmp byte [rax], T_closure
 21295 0000F173 0F8567660000            	jne L_error_non_closure
 21296 0000F179 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21297                                  
 21298                                  	; recycling the current frame
 21299 0000F17C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21300 0000F17F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21301 0000F182 B905000000              	mov rcx, 1 + 4
 21302 0000F187 488B5D18                	mov rbx, COUNT
 21303 0000F18B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21304 0000F190 488D55F8                	lea rdx, [rbp - 8 * 1]
 21305                                  .L_tc_recycle_frame_loop_00b7:
 21306 0000F194 4883F900                	cmp rcx, 0
 21307 0000F198 7413                    	je .L_tc_recycle_frame_done_00b7
 21308 0000F19A 488B32                  	mov rsi, qword [rdx]
 21309 0000F19D 488933                  	mov qword [rbx], rsi
 21310 0000F1A0 48FFC9                  	dec rcx
 21311 0000F1A3 4883EB08                	sub rbx, 8 * 1
 21312 0000F1A7 4883EA08                	sub rdx, 8 * 1
 21313 0000F1AB EBE7                    	jmp .L_tc_recycle_frame_loop_00b7
 21314                                  .L_tc_recycle_frame_done_00b7:
 21315 0000F1AD 488D6308                	lea rsp, [rbx + 8 * 1]
 21316 0000F1B1 5D                      	pop rbp	; the proc will restore it!
 21317 0000F1B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21318 0000F1B5 C9                      	leave
 21319 0000F1B6 C21800                  	ret AND_KILL_FRAME(1)
 21320                                  .L_lambda_simple_end_0078:	; new closure is in rax
 21321 0000F1B9 803804                  	cmp byte [rax], T_closure
 21322 0000F1BC 0F851E660000            	jne L_error_non_closure
 21323 0000F1C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21324                                  
 21325                                  	; recycling the current frame
 21326 0000F1C5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21327 0000F1C8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21328 0000F1CB B905000000              	mov rcx, 1 + 4
 21329 0000F1D0 488B5D18                	mov rbx, COUNT
 21330 0000F1D4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21331 0000F1D9 488D55F8                	lea rdx, [rbp - 8 * 1]
 21332                                  .L_tc_recycle_frame_loop_00b8:
 21333 0000F1DD 4883F900                	cmp rcx, 0
 21334 0000F1E1 7413                    	je .L_tc_recycle_frame_done_00b8
 21335 0000F1E3 488B32                  	mov rsi, qword [rdx]
 21336 0000F1E6 488933                  	mov qword [rbx], rsi
 21337 0000F1E9 48FFC9                  	dec rcx
 21338 0000F1EC 4883EB08                	sub rbx, 8 * 1
 21339 0000F1F0 4883EA08                	sub rdx, 8 * 1
 21340 0000F1F4 EBE7                    	jmp .L_tc_recycle_frame_loop_00b8
 21341                                  .L_tc_recycle_frame_done_00b8:
 21342 0000F1F6 488D6308                	lea rsp, [rbx + 8 * 1]
 21343 0000F1FA 5D                      	pop rbp	; the proc will restore it!
 21344 0000F1FB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21345 0000F1FE C9                      	leave
 21346 0000F1FF C21800                  	ret AND_KILL_FRAME(1)
 21347                                  .L_lambda_simple_end_0077:	; new closure is in rax
 21348 0000F202 50                      	push rax
 21349 0000F203 6A01                    	push 1	; arg count
 21350 0000F205 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21351 0000F20A E87A660000              	call malloc
 21352 0000F20F 50                      	push rax
 21353 0000F210 BF00000000              	mov rdi, 8 * 0	; new rib
 21354 0000F215 E86F660000              	call malloc
 21355 0000F21A 50                      	push rax
 21356 0000F21B BF08000000              	mov rdi, 8 * 1	; extended env
 21357 0000F220 E864660000              	call malloc
 21358 0000F225 488B7D10                	mov rdi, ENV
 21359 0000F229 BE00000000              	mov rsi, 0
 21360 0000F22E BA01000000              	mov rdx, 1
 21361                                  .L_lambda_simple_env_loop_007f:	; ext_env[i + 1] <-- env[i]
 21362 0000F233 4883FE00                	cmp rsi, 0
 21363 0000F237 7410                    	je .L_lambda_simple_env_end_007f
 21364 0000F239 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21365 0000F23D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21366 0000F241 48FFC6                  	inc rsi
 21367 0000F244 48FFC2                  	inc rdx
 21368 0000F247 EBEA                    	jmp .L_lambda_simple_env_loop_007f
 21369                                  .L_lambda_simple_env_end_007f:
 21370 0000F249 5B                      	pop rbx
 21371 0000F24A BE00000000              	mov rsi, 0
 21372                                  .L_lambda_simple_params_loop_007f:	; copy params
 21373 0000F24F 4883FE00                	cmp rsi, 0
 21374 0000F253 740E                    	je .L_lambda_simple_params_end_007f
 21375 0000F255 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21376 0000F25A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21377 0000F25E 48FFC6                  	inc rsi
 21378 0000F261 EBEC                    	jmp .L_lambda_simple_params_loop_007f
 21379                                  .L_lambda_simple_params_end_007f:
 21380 0000F263 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21381 0000F266 4889C3                  	mov rbx, rax
 21382 0000F269 58                      	pop rax
 21383 0000F26A C60004                  	mov byte [rax], T_closure
 21384 0000F26D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21385 0000F271 48C74009[7EF20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007f
 21386 0000F279 E99F000000              	jmp .L_lambda_simple_end_007f
 21387                                  .L_lambda_simple_code_007f:	; lambda-simple body
 21388 0000F27E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21389 0000F284 740B                    	je .L_lambda_simple_arity_check_ok_007f
 21390 0000F286 FF742410                	push qword [rsp + 8 * 2]
 21391 0000F28A 6A01                    	push 1
 21392 0000F28C E9B1650000              	jmp L_error_incorrect_arity_simple
 21393                                  .L_lambda_simple_arity_check_ok_007f:
 21394 0000F291 C8000000                	enter 0, 0
 21395 0000F295 488B0425[53160000]      	mov rax, qword [free_var_130]	; free var char=?
 21396 0000F29D 803805                  	cmp byte [rax], T_undefined
 21397 0000F2A0 0F84B6640000            	je L_error_fvar_undefined
 21398 0000F2A6 50                      	push rax
 21399 0000F2A7 6A01                    	push 1	; arg count
 21400 0000F2A9 488B4520                	mov rax, PARAM(0)	; param make-string=?
 21401 0000F2AD 803804                  	cmp byte [rax], T_closure
 21402 0000F2B0 0F852A650000            	jne L_error_non_closure
 21403 0000F2B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21404 0000F2B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21405 0000F2BC 48890425[63170000]      	mov qword [free_var_146], rax	; free var string=?
 21406 0000F2C4 803805                  	cmp byte [rax], T_undefined
 21407 0000F2C7 0F848F640000            	je L_error_fvar_undefined
 21408 0000F2CD 48B8-                   	mov rax, sob_void
 21408 0000F2CF [0000000000000000] 
 21409                                  
 21410 0000F2D7 488B0425[CA160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 21411 0000F2DF 803805                  	cmp byte [rax], T_undefined
 21412 0000F2E2 0F8474640000            	je L_error_fvar_undefined
 21413 0000F2E8 50                      	push rax
 21414 0000F2E9 6A01                    	push 1	; arg count
 21415 0000F2EB 488B4520                	mov rax, PARAM(0)	; param make-string=?
 21416 0000F2EF 803804                  	cmp byte [rax], T_closure
 21417 0000F2F2 0F85E8640000            	jne L_error_non_closure
 21418 0000F2F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21419 0000F2FB FF5009                  	call SOB_CLOSURE_CODE(rax)
 21420 0000F2FE 48890425[B8170000]      	mov qword [free_var_151], rax	; free var string-ci=?
 21421 0000F306 803805                  	cmp byte [rax], T_undefined
 21422 0000F309 0F844D640000            	je L_error_fvar_undefined
 21423 0000F30F 48B8-                   	mov rax, sob_void
 21423 0000F311 [0000000000000000] 
 21424 0000F319 C9                      	leave
 21425 0000F31A C21800                  	ret AND_KILL_FRAME(1)
 21426                                  .L_lambda_simple_end_007f:	; new closure is in rax
 21427 0000F31D 803804                  	cmp byte [rax], T_closure
 21428 0000F320 0F85BA640000            	jne L_error_non_closure
 21429 0000F326 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21430 0000F329 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21431                                  
 21432 0000F32C 4889C7                  	mov rdi, rax
 21433 0000F32F E867660000              	call print_sexpr_if_not_void
 21434                                  
 21435 0000F334 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21436 0000F339 E84B650000              	call malloc
 21437 0000F33E 50                      	push rax
 21438 0000F33F BF00000000              	mov rdi, 8 * 0	; new rib
 21439 0000F344 E840650000              	call malloc
 21440 0000F349 50                      	push rax
 21441 0000F34A BF08000000              	mov rdi, 8 * 1	; extended env
 21442 0000F34F E835650000              	call malloc
 21443 0000F354 488B7D10                	mov rdi, ENV
 21444 0000F358 BE00000000              	mov rsi, 0
 21445 0000F35D BA01000000              	mov rdx, 1
 21446                                  .L_lambda_simple_env_loop_0080:	; ext_env[i + 1] <-- env[i]
 21447 0000F362 4883FE00                	cmp rsi, 0
 21448 0000F366 7410                    	je .L_lambda_simple_env_end_0080
 21449 0000F368 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21450 0000F36C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21451 0000F370 48FFC6                  	inc rsi
 21452 0000F373 48FFC2                  	inc rdx
 21453 0000F376 EBEA                    	jmp .L_lambda_simple_env_loop_0080
 21454                                  .L_lambda_simple_env_end_0080:
 21455 0000F378 5B                      	pop rbx
 21456 0000F379 BE00000000              	mov rsi, 0
 21457                                  .L_lambda_simple_params_loop_0080:	; copy params
 21458 0000F37E 4883FE00                	cmp rsi, 0
 21459 0000F382 740E                    	je .L_lambda_simple_params_end_0080
 21460 0000F384 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21461 0000F389 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21462 0000F38D 48FFC6                  	inc rsi
 21463 0000F390 EBEC                    	jmp .L_lambda_simple_params_loop_0080
 21464                                  .L_lambda_simple_params_end_0080:
 21465 0000F392 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21466 0000F395 4889C3                  	mov rbx, rax
 21467 0000F398 58                      	pop rax
 21468 0000F399 C60004                  	mov byte [rax], T_closure
 21469 0000F39C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21470 0000F3A0 48C74009[ADF30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0080
 21471 0000F3A8 E907010000              	jmp .L_lambda_simple_end_0080
 21472                                  .L_lambda_simple_code_0080:	; lambda-simple body
 21473 0000F3AD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21474 0000F3B3 740B                    	je .L_lambda_simple_arity_check_ok_0080
 21475 0000F3B5 FF742410                	push qword [rsp + 8 * 2]
 21476 0000F3B9 6A01                    	push 1
 21477 0000F3BB E982640000              	jmp L_error_incorrect_arity_simple
 21478                                  .L_lambda_simple_arity_check_ok_0080:
 21479 0000F3C0 C8000000                	enter 0, 0
 21480 0000F3C4 488B4520                	mov rax, PARAM(0)	; param s
 21481 0000F3C8 50                      	push rax
 21482 0000F3C9 6A01                    	push 1	; arg count
 21483 0000F3CB 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 21484 0000F3D3 803805                  	cmp byte [rax], T_undefined
 21485 0000F3D6 0F8480630000            	je L_error_fvar_undefined
 21486 0000F3DC 803804                  	cmp byte [rax], T_closure
 21487 0000F3DF 0F85FB630000            	jne L_error_non_closure
 21488 0000F3E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21489 0000F3E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21490                                  
 21491 0000F3EB 483D[02000000]          	cmp rax, sob_boolean_false
 21492 0000F3F1 740F                    	je .L_if_else_0062
 21493 0000F3F3 48B8-                   	mov rax, L_constants + 2023
 21493 0000F3F5 [E707000000000000] 
 21494                                  
 21495 0000F3FD E9AE000000              	jmp .L_if_end_0062
 21496                                  
 21497                                  	.L_if_else_0062:
 21498                                  	; preparing a tail-call
 21499 0000F402 488B4520                	mov rax, PARAM(0)	; param s
 21500 0000F406 50                      	push rax
 21501 0000F407 6A01                    	push 1	; arg count
 21502 0000F409 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 21503 0000F411 803805                  	cmp byte [rax], T_undefined
 21504 0000F414 0F8442630000            	je L_error_fvar_undefined
 21505 0000F41A 803804                  	cmp byte [rax], T_closure
 21506 0000F41D 0F85BD630000            	jne L_error_non_closure
 21507 0000F423 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21508 0000F426 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21509 0000F429 50                      	push rax
 21510 0000F42A 6A01                    	push 1	; arg count
 21511 0000F42C 488B0425[EB170000]      	mov rax, qword [free_var_154]	; free var length
 21512 0000F434 803805                  	cmp byte [rax], T_undefined
 21513 0000F437 0F841F630000            	je L_error_fvar_undefined
 21514 0000F43D 803804                  	cmp byte [rax], T_closure
 21515 0000F440 0F859A630000            	jne L_error_non_closure
 21516 0000F446 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21517 0000F449 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21518 0000F44C 50                      	push rax
 21519 0000F44D 48B8-                   	mov rax, L_constants + 2158
 21519 0000F44F [6E08000000000000] 
 21520 0000F457 50                      	push rax
 21521 0000F458 6A02                    	push 2	; arg count
 21522 0000F45A 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 21523 0000F462 803805                  	cmp byte [rax], T_undefined
 21524 0000F465 0F84F1620000            	je L_error_fvar_undefined
 21525 0000F46B 803804                  	cmp byte [rax], T_closure
 21526 0000F46E 0F856C630000            	jne L_error_non_closure
 21527 0000F474 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21528                                  
 21529                                  	; recycling the current frame
 21530 0000F477 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21531 0000F47A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21532 0000F47D B906000000              	mov rcx, 2 + 4
 21533 0000F482 488B5D18                	mov rbx, COUNT
 21534 0000F486 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21535 0000F48B 488D55F8                	lea rdx, [rbp - 8 * 1]
 21536                                  .L_tc_recycle_frame_loop_00b9:
 21537 0000F48F 4883F900                	cmp rcx, 0
 21538 0000F493 7413                    	je .L_tc_recycle_frame_done_00b9
 21539 0000F495 488B32                  	mov rsi, qword [rdx]
 21540 0000F498 488933                  	mov qword [rbx], rsi
 21541 0000F49B 48FFC9                  	dec rcx
 21542 0000F49E 4883EB08                	sub rbx, 8 * 1
 21543 0000F4A2 4883EA08                	sub rdx, 8 * 1
 21544 0000F4A6 EBE7                    	jmp .L_tc_recycle_frame_loop_00b9
 21545                                  .L_tc_recycle_frame_done_00b9:
 21546 0000F4A8 488D6308                	lea rsp, [rbx + 8 * 1]
 21547 0000F4AC 5D                      	pop rbp	; the proc will restore it!
 21548 0000F4AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21549                                  
 21550                                  	.L_if_end_0062:
 21551 0000F4B0 C9                      	leave
 21552 0000F4B1 C21800                  	ret AND_KILL_FRAME(1)
 21553                                  .L_lambda_simple_end_0080:	; new closure is in rax
 21554 0000F4B4 48890425[EB170000]      	mov qword [free_var_154], rax
 21555 0000F4BC 48B8-                   	mov rax, sob_void
 21555 0000F4BE [0000000000000000] 
 21556                                  
 21557 0000F4C6 4889C7                  	mov rdi, rax
 21558 0000F4C9 E8CD640000              	call print_sexpr_if_not_void
 21559                                  
 21560 0000F4CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21561 0000F4D3 E8B1630000              	call malloc
 21562 0000F4D8 50                      	push rax
 21563 0000F4D9 BF00000000              	mov rdi, 8 * 0	; new rib
 21564 0000F4DE E8A6630000              	call malloc
 21565 0000F4E3 50                      	push rax
 21566 0000F4E4 BF08000000              	mov rdi, 8 * 1	; extended env
 21567 0000F4E9 E89B630000              	call malloc
 21568 0000F4EE 488B7D10                	mov rdi, ENV
 21569 0000F4F2 BE00000000              	mov rsi, 0
 21570 0000F4F7 BA01000000              	mov rdx, 1
 21571                                  .L_lambda_simple_env_loop_0081:	; ext_env[i + 1] <-- env[i]
 21572 0000F4FC 4883FE00                	cmp rsi, 0
 21573 0000F500 7410                    	je .L_lambda_simple_env_end_0081
 21574 0000F502 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21575 0000F506 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21576 0000F50A 48FFC6                  	inc rsi
 21577 0000F50D 48FFC2                  	inc rdx
 21578 0000F510 EBEA                    	jmp .L_lambda_simple_env_loop_0081
 21579                                  .L_lambda_simple_env_end_0081:
 21580 0000F512 5B                      	pop rbx
 21581 0000F513 BE00000000              	mov rsi, 0
 21582                                  .L_lambda_simple_params_loop_0081:	; copy params
 21583 0000F518 4883FE00                	cmp rsi, 0
 21584 0000F51C 740E                    	je .L_lambda_simple_params_end_0081
 21585 0000F51E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21586 0000F523 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21587 0000F527 48FFC6                  	inc rsi
 21588 0000F52A EBEC                    	jmp .L_lambda_simple_params_loop_0081
 21589                                  .L_lambda_simple_params_end_0081:
 21590 0000F52C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21591 0000F52F 4889C3                  	mov rbx, rax
 21592 0000F532 58                      	pop rax
 21593 0000F533 C60004                  	mov byte [rax], T_closure
 21594 0000F536 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21595 0000F53A 48C74009[47F50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0081
 21596 0000F542 E90D010000              	jmp .L_lambda_simple_end_0081
 21597                                  .L_lambda_simple_code_0081:	; lambda-simple body
 21598 0000F547 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21599 0000F54D 740B                    	je .L_lambda_simple_arity_check_ok_0081
 21600 0000F54F FF742410                	push qword [rsp + 8 * 2]
 21601 0000F553 6A01                    	push 1
 21602 0000F555 E9E8620000              	jmp L_error_incorrect_arity_simple
 21603                                  .L_lambda_simple_arity_check_ok_0081:
 21604 0000F55A C8000000                	enter 0, 0
 21605 0000F55E 488B4520                	mov rax, PARAM(0)	; param e
 21606 0000F562 50                      	push rax
 21607 0000F563 6A01                    	push 1	; arg count
 21608 0000F565 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 21609 0000F56D 803805                  	cmp byte [rax], T_undefined
 21610 0000F570 0F84E6610000            	je L_error_fvar_undefined
 21611 0000F576 803804                  	cmp byte [rax], T_closure
 21612 0000F579 0F8561620000            	jne L_error_non_closure
 21613 0000F57F FF7001                  	push SOB_CLOSURE_ENV(rax)
 21614 0000F582 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21615 0000F585 483D[02000000]          	cmp rax, sob_boolean_false
 21616 0000F58B 0F85BF000000            	jne .L_or_end_000d
 21617 0000F591 488B4520                	mov rax, PARAM(0)	; param e
 21618 0000F595 50                      	push rax
 21619 0000F596 6A01                    	push 1	; arg count
 21620 0000F598 488B0425[C20D0000]      	mov rax, qword [free_var_1]	; free var pair?
 21621 0000F5A0 803805                  	cmp byte [rax], T_undefined
 21622 0000F5A3 0F84B3610000            	je L_error_fvar_undefined
 21623 0000F5A9 803804                  	cmp byte [rax], T_closure
 21624 0000F5AC 0F852E620000            	jne L_error_non_closure
 21625 0000F5B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21626 0000F5B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21627                                  
 21628 0000F5B8 483D[02000000]          	cmp rax, sob_boolean_false
 21629 0000F5BE 0F8482000000            	je .L_if_else_0063
 21630                                  	; preparing a tail-call
 21631 0000F5C4 488B4520                	mov rax, PARAM(0)	; param e
 21632 0000F5C8 50                      	push rax
 21633 0000F5C9 6A01                    	push 1	; arg count
 21634 0000F5CB 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 21635 0000F5D3 803805                  	cmp byte [rax], T_undefined
 21636 0000F5D6 0F8480610000            	je L_error_fvar_undefined
 21637 0000F5DC 803804                  	cmp byte [rax], T_closure
 21638 0000F5DF 0F85FB610000            	jne L_error_non_closure
 21639 0000F5E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21640 0000F5E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21641 0000F5EB 50                      	push rax
 21642 0000F5EC 6A01                    	push 1	; arg count
 21643 0000F5EE 488B0425[77140000]      	mov rax, qword [free_var_102]	; free var list?
 21644 0000F5F6 803805                  	cmp byte [rax], T_undefined
 21645 0000F5F9 0F845D610000            	je L_error_fvar_undefined
 21646 0000F5FF 803804                  	cmp byte [rax], T_closure
 21647 0000F602 0F85D8610000            	jne L_error_non_closure
 21648 0000F608 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21649                                  
 21650                                  	; recycling the current frame
 21651 0000F60B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21652 0000F60E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21653 0000F611 B905000000              	mov rcx, 1 + 4
 21654 0000F616 488B5D18                	mov rbx, COUNT
 21655 0000F61A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21656 0000F61F 488D55F8                	lea rdx, [rbp - 8 * 1]
 21657                                  .L_tc_recycle_frame_loop_00ba:
 21658 0000F623 4883F900                	cmp rcx, 0
 21659 0000F627 7413                    	je .L_tc_recycle_frame_done_00ba
 21660 0000F629 488B32                  	mov rsi, qword [rdx]
 21661 0000F62C 488933                  	mov qword [rbx], rsi
 21662 0000F62F 48FFC9                  	dec rcx
 21663 0000F632 4883EB08                	sub rbx, 8 * 1
 21664 0000F636 4883EA08                	sub rdx, 8 * 1
 21665 0000F63A EBE7                    	jmp .L_tc_recycle_frame_loop_00ba
 21666                                  .L_tc_recycle_frame_done_00ba:
 21667 0000F63C 488D6308                	lea rsp, [rbx + 8 * 1]
 21668 0000F640 5D                      	pop rbp	; the proc will restore it!
 21669 0000F641 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21670                                  
 21671 0000F644 EB0A                    	jmp .L_if_end_0063
 21672                                  
 21673                                  	.L_if_else_0063:
 21674 0000F646 48B8-                   	mov rax, L_constants + 2
 21674 0000F648 [0200000000000000] 
 21675                                  
 21676                                  	.L_if_end_0063:
 21677                                  .L_or_end_000d:
 21678 0000F650 C9                      	leave
 21679 0000F651 C21800                  	ret AND_KILL_FRAME(1)
 21680                                  .L_lambda_simple_end_0081:	; new closure is in rax
 21681 0000F654 48890425[77140000]      	mov qword [free_var_102], rax
 21682 0000F65C 48B8-                   	mov rax, sob_void
 21682 0000F65E [0000000000000000] 
 21683                                  
 21684 0000F666 4889C7                  	mov rdi, rax
 21685 0000F669 E82D630000              	call print_sexpr_if_not_void
 21686                                  
 21687 0000F66E 488B0425[7A110000]      	mov rax, qword [free_var_57]	; free var make-vector
 21688 0000F676 803805                  	cmp byte [rax], T_undefined
 21689 0000F679 0F84DD600000            	je L_error_fvar_undefined
 21690 0000F67F 50                      	push rax
 21691 0000F680 6A01                    	push 1	; arg count
 21692 0000F682 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21693 0000F687 E8FD610000              	call malloc
 21694 0000F68C 50                      	push rax
 21695 0000F68D BF00000000              	mov rdi, 8 * 0	; new rib
 21696 0000F692 E8F2610000              	call malloc
 21697 0000F697 50                      	push rax
 21698 0000F698 BF08000000              	mov rdi, 8 * 1	; extended env
 21699 0000F69D E8E7610000              	call malloc
 21700 0000F6A2 488B7D10                	mov rdi, ENV
 21701 0000F6A6 BE00000000              	mov rsi, 0
 21702 0000F6AB BA01000000              	mov rdx, 1
 21703                                  .L_lambda_simple_env_loop_0082:	; ext_env[i + 1] <-- env[i]
 21704 0000F6B0 4883FE00                	cmp rsi, 0
 21705 0000F6B4 7410                    	je .L_lambda_simple_env_end_0082
 21706 0000F6B6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21707 0000F6BA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21708 0000F6BE 48FFC6                  	inc rsi
 21709 0000F6C1 48FFC2                  	inc rdx
 21710 0000F6C4 EBEA                    	jmp .L_lambda_simple_env_loop_0082
 21711                                  .L_lambda_simple_env_end_0082:
 21712 0000F6C6 5B                      	pop rbx
 21713 0000F6C7 BE00000000              	mov rsi, 0
 21714                                  .L_lambda_simple_params_loop_0082:	; copy params
 21715 0000F6CC 4883FE00                	cmp rsi, 0
 21716 0000F6D0 740E                    	je .L_lambda_simple_params_end_0082
 21717 0000F6D2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21718 0000F6D7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21719 0000F6DB 48FFC6                  	inc rsi
 21720 0000F6DE EBEC                    	jmp .L_lambda_simple_params_loop_0082
 21721                                  .L_lambda_simple_params_end_0082:
 21722 0000F6E0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21723 0000F6E3 4889C3                  	mov rbx, rax
 21724 0000F6E6 58                      	pop rax
 21725 0000F6E7 C60004                  	mov byte [rax], T_closure
 21726 0000F6EA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21727 0000F6EE 48C74009[FBF60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0082
 21728 0000F6F6 E9D9030000              	jmp .L_lambda_simple_end_0082
 21729                                  .L_lambda_simple_code_0082:	; lambda-simple body
 21730 0000F6FB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21731 0000F701 740B                    	je .L_lambda_simple_arity_check_ok_0082
 21732 0000F703 FF742410                	push qword [rsp + 8 * 2]
 21733 0000F707 6A01                    	push 1
 21734 0000F709 E934610000              	jmp L_error_incorrect_arity_simple
 21735                                  .L_lambda_simple_arity_check_ok_0082:
 21736 0000F70E C8000000                	enter 0, 0
 21737 0000F712 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21738 0000F717 E86D610000              	call malloc
 21739 0000F71C 50                      	push rax
 21740 0000F71D BF08000000              	mov rdi, 8 * 1	; new rib
 21741 0000F722 E862610000              	call malloc
 21742 0000F727 50                      	push rax
 21743 0000F728 BF10000000              	mov rdi, 8 * 2	; extended env
 21744 0000F72D E857610000              	call malloc
 21745 0000F732 488B7D10                	mov rdi, ENV
 21746 0000F736 BE00000000              	mov rsi, 0
 21747 0000F73B BA01000000              	mov rdx, 1
 21748                                  .L_lambda_opt_env_loop_0015:	; ext_env[i + 1] <-- env[i]
 21749 0000F740 4883FE01                	cmp rsi, 1
 21750 0000F744 7410                    	je .L_lambda_opt_env_end_0015
 21751 0000F746 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21752 0000F74A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21753 0000F74E 48FFC6                  	inc rsi
 21754 0000F751 48FFC2                  	inc rdx
 21755 0000F754 EBEA                    	jmp .L_lambda_opt_env_loop_0015
 21756                                  .L_lambda_opt_env_end_0015:
 21757 0000F756 5B                      	pop rbx
 21758 0000F757 BE00000000              	mov rsi, 0
 21759                                  .L_lambda_opt_params_loop_0015:	; copy params
 21760 0000F75C 4883FE01                	cmp rsi, 1
 21761 0000F760 740E                    	je .L_lambda_opt_params_end_0015
 21762 0000F762 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21763 0000F767 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21764 0000F76B 48FFC6                  	inc rsi
 21765 0000F76E EBEC                    	jmp .L_lambda_opt_params_loop_0015
 21766                                  .L_lambda_opt_params_end_0015:
 21767 0000F770 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21768 0000F773 4889C3                  	mov rbx, rax
 21769 0000F776 58                      	pop rax
 21770 0000F777 C60004                  	mov byte [rax], T_closure
 21771 0000F77A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21772 0000F77E 48C74009[8BF70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0015
 21773 0000F786 E945030000              	jmp .L_lambda_opt_end_0015
 21774                                  .L_lambda_opt_code_0015:	; lambda-simple body
 21775 0000F78B 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 21776 0000F791 740D                    	je .L_lambda_opt_arity_check_exact_0015 ;	 if equal, go to exact arity
 21777 0000F793 7F42                    	jg .L_lambda_opt_arity_check_more_0015 ;	 if greater than, go to arity more
 21778 0000F795 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 21779 0000F799 6A01                     	push 1
 21780 0000F79B E9B6600000              	jmp L_error_incorrect_arity_opt
 21781                                  	.L_lambda_opt_arity_check_exact_0015:
 21782 0000F7A0 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 21783 0000F7A5 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 21784 0000F7AA 4883EC08                	sub rsp, 8
 21785 0000F7AE 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 21786                                  	.L_lambda_opt_exact_shifting_loop_0015:
 21787 0000F7B2 488B5108                	mov rdx, [rcx + 8]
 21788 0000F7B6 488911                  	mov [rcx], rdx
 21789 0000F7B9 4883C108                	add rcx, 8
 21790 0000F7BD 4839CB                  	cmp rbx, rcx
 21791 0000F7C0 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0015
 21792                                  	.L_lambda_opt_exact_shifting_loop_end_0015:
 21793 0000F7C2 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 21794 0000F7C9 4883C001                	add rax, 1 ; 	arg count += 1
 21795 0000F7CD 4889442410              	mov qword [rsp + 8 * 2], rax
 21796 0000F7D2 E987000000              	jmp .L_lambda_opt_stack_adjusted_0015
 21797                                  	.L_lambda_opt_arity_check_more_0015:
 21798 0000F7D7 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 21798 0000F7D9 [0100000000000000] 
 21799 0000F7E1 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 21800 0000F7E7 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0015
 21801                                  	.L_lambda_opt_stack_shrink_loop_0015:
 21802 0000F7E9 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 21803 0000F7EE E896600000              	call malloc ;	 allocated memory for the optional scheme list
 21804 0000F7F3 C60021                  	mov byte[rax], T_pair ;	 set type pair
 21805 0000F7F6 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 21806 0000F7FA 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 21807 0000F7FD 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 21808 0000F802 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 21809 0000F807 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 21810 0000F80B 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 21811                                  	.L_lambda_opt_more_shifting_loop_0015:
 21812 0000F810 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 21813 0000F813 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 21814 0000F817 4883EB08                	sub rbx, 8 
 21815 0000F81B 4839DC                  	cmp rsp, rbx
 21816 0000F81E 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0015
 21817                                  	.L_lambda_opt_more_shifting_loop_end_0015:
 21818 0000F820 4883C408                	add rsp, 8 ;	 update rsp
 21819 0000F824 488B5C2410              	mov rbx, [rsp + 8 * 2]
 21820 0000F829 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 21821 0000F82D 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 21822 0000F832 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21823 0000F838 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0015
 21824                                  	.L_lambda_opt_stack_shrink_loop_exit_0015:
 21825 0000F83A 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 21826 0000F83F 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 21827 0000F844 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 21828 0000F849 E83B600000              	call malloc ;	 allocated memory for the optional scheme list
 21829 0000F84E C60021                  	mov byte[rax], T_pair ;	 set type pair
 21830 0000F851 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 21831 0000F855 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 21832 0000F859 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 21833                                  	.L_lambda_opt_stack_adjusted_0015:
 21834 0000F85E C8000000                	enter 0, 0
 21835                                  	; preparing a tail-call
 21836 0000F862 488B4528                	mov rax, PARAM(1)	; param xs
 21837 0000F866 50                      	push rax
 21838 0000F867 6A01                    	push 1	; arg count
 21839 0000F869 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 21840 0000F871 803805                  	cmp byte [rax], T_undefined
 21841 0000F874 0F84E25E0000            	je L_error_fvar_undefined
 21842 0000F87A 803804                  	cmp byte [rax], T_closure
 21843 0000F87D 0F855D5F0000            	jne L_error_non_closure
 21844 0000F883 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21845 0000F886 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21846                                  
 21847 0000F889 483D[02000000]          	cmp rax, sob_boolean_false
 21848 0000F88F 740F                    	je .L_if_else_0064
 21849 0000F891 48B8-                   	mov rax, L_constants + 0
 21849 0000F893 [0000000000000000] 
 21850                                  
 21851 0000F89B E9EE000000              	jmp .L_if_end_0064
 21852                                  
 21853                                  	.L_if_else_0064:
 21854 0000F8A0 488B4528                	mov rax, PARAM(1)	; param xs
 21855 0000F8A4 50                      	push rax
 21856 0000F8A5 6A01                    	push 1	; arg count
 21857 0000F8A7 488B0425[C20D0000]      	mov rax, qword [free_var_1]	; free var pair?
 21858 0000F8AF 803805                  	cmp byte [rax], T_undefined
 21859 0000F8B2 0F84A45E0000            	je L_error_fvar_undefined
 21860 0000F8B8 803804                  	cmp byte [rax], T_closure
 21861 0000F8BB 0F851F5F0000            	jne L_error_non_closure
 21862 0000F8C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21863 0000F8C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21864                                  
 21865 0000F8C7 483D[02000000]          	cmp rax, sob_boolean_false
 21866 0000F8CD 744C                    	je .L_if_else_0066
 21867 0000F8CF 488B4528                	mov rax, PARAM(1)	; param xs
 21868 0000F8D3 50                      	push rax
 21869 0000F8D4 6A01                    	push 1	; arg count
 21870 0000F8D6 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 21871 0000F8DE 803805                  	cmp byte [rax], T_undefined
 21872 0000F8E1 0F84755E0000            	je L_error_fvar_undefined
 21873 0000F8E7 803804                  	cmp byte [rax], T_closure
 21874 0000F8EA 0F85F05E0000            	jne L_error_non_closure
 21875 0000F8F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21876 0000F8F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21877 0000F8F6 50                      	push rax
 21878 0000F8F7 6A01                    	push 1	; arg count
 21879 0000F8F9 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 21880 0000F901 803805                  	cmp byte [rax], T_undefined
 21881 0000F904 0F84525E0000            	je L_error_fvar_undefined
 21882 0000F90A 803804                  	cmp byte [rax], T_closure
 21883 0000F90D 0F85CD5E0000            	jne L_error_non_closure
 21884 0000F913 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21885 0000F916 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21886                                  
 21887 0000F919 EB0A                    	jmp .L_if_end_0066
 21888                                  
 21889                                  	.L_if_else_0066:
 21890 0000F91B 48B8-                   	mov rax, L_constants + 2
 21890 0000F91D [0200000000000000] 
 21891                                  
 21892                                  	.L_if_end_0066:
 21893                                  
 21894 0000F925 483D[02000000]          	cmp rax, sob_boolean_false
 21895 0000F92B 7429                    	je .L_if_else_0065
 21896 0000F92D 488B4528                	mov rax, PARAM(1)	; param xs
 21897 0000F931 50                      	push rax
 21898 0000F932 6A01                    	push 1	; arg count
 21899 0000F934 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 21900 0000F93C 803805                  	cmp byte [rax], T_undefined
 21901 0000F93F 0F84175E0000            	je L_error_fvar_undefined
 21902 0000F945 803804                  	cmp byte [rax], T_closure
 21903 0000F948 0F85925E0000            	jne L_error_non_closure
 21904 0000F94E FF7001                  	push SOB_CLOSURE_ENV(rax)
 21905 0000F951 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21906                                  
 21907 0000F954 EB38                    	jmp .L_if_end_0065
 21908                                  
 21909                                  	.L_if_else_0065:
 21910 0000F956 48B8-                   	mov rax, L_constants + 2939
 21910 0000F958 [7B0B000000000000] 
 21911 0000F960 50                      	push rax
 21912 0000F961 48B8-                   	mov rax, L_constants + 2930
 21912 0000F963 [720B000000000000] 
 21913 0000F96B 50                      	push rax
 21914 0000F96C 6A02                    	push 2	; arg count
 21915 0000F96E 488B0425[7B100000]      	mov rax, qword [free_var_42]	; free var error
 21916 0000F976 803805                  	cmp byte [rax], T_undefined
 21917 0000F979 0F84DD5D0000            	je L_error_fvar_undefined
 21918 0000F97F 803804                  	cmp byte [rax], T_closure
 21919 0000F982 0F85585E0000            	jne L_error_non_closure
 21920 0000F988 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21921 0000F98B FF5009                  	call SOB_CLOSURE_CODE(rax)
 21922                                  
 21923                                  	.L_if_end_0065:
 21924                                  
 21925                                  	.L_if_end_0064:
 21926 0000F98E 50                      	push rax
 21927 0000F98F 6A01                    	push 1	; arg count
 21928 0000F991 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21929 0000F996 E8EE5E0000              	call malloc
 21930 0000F99B 50                      	push rax
 21931 0000F99C BF10000000              	mov rdi, 8 * 2	; new rib
 21932 0000F9A1 E8E35E0000              	call malloc
 21933 0000F9A6 50                      	push rax
 21934 0000F9A7 BF18000000              	mov rdi, 8 * 3	; extended env
 21935 0000F9AC E8D85E0000              	call malloc
 21936 0000F9B1 488B7D10                	mov rdi, ENV
 21937 0000F9B5 BE00000000              	mov rsi, 0
 21938 0000F9BA BA01000000              	mov rdx, 1
 21939                                  .L_lambda_simple_env_loop_0083:	; ext_env[i + 1] <-- env[i]
 21940 0000F9BF 4883FE02                	cmp rsi, 2
 21941 0000F9C3 7410                    	je .L_lambda_simple_env_end_0083
 21942 0000F9C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21943 0000F9C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21944 0000F9CD 48FFC6                  	inc rsi
 21945 0000F9D0 48FFC2                  	inc rdx
 21946 0000F9D3 EBEA                    	jmp .L_lambda_simple_env_loop_0083
 21947                                  .L_lambda_simple_env_end_0083:
 21948 0000F9D5 5B                      	pop rbx
 21949 0000F9D6 BE00000000              	mov rsi, 0
 21950                                  .L_lambda_simple_params_loop_0083:	; copy params
 21951 0000F9DB 4883FE02                	cmp rsi, 2
 21952 0000F9DF 740E                    	je .L_lambda_simple_params_end_0083
 21953 0000F9E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21954 0000F9E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21955 0000F9EA 48FFC6                  	inc rsi
 21956 0000F9ED EBEC                    	jmp .L_lambda_simple_params_loop_0083
 21957                                  .L_lambda_simple_params_end_0083:
 21958 0000F9EF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21959 0000F9F2 4889C3                  	mov rbx, rax
 21960 0000F9F5 58                      	pop rax
 21961 0000F9F6 C60004                  	mov byte [rax], T_closure
 21962 0000F9F9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21963 0000F9FD 48C74009[0AFA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0083
 21964 0000FA05 E97D000000              	jmp .L_lambda_simple_end_0083
 21965                                  .L_lambda_simple_code_0083:	; lambda-simple body
 21966 0000FA0A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21967 0000FA10 740B                    	je .L_lambda_simple_arity_check_ok_0083
 21968 0000FA12 FF742410                	push qword [rsp + 8 * 2]
 21969 0000FA16 6A01                    	push 1
 21970 0000FA18 E9255E0000              	jmp L_error_incorrect_arity_simple
 21971                                  .L_lambda_simple_arity_check_ok_0083:
 21972 0000FA1D C8000000                	enter 0, 0
 21973                                  	; preparing a tail-call
 21974 0000FA21 488B4520                	mov rax, PARAM(0)	; param x
 21975 0000FA25 50                      	push rax
 21976 0000FA26 488B4510                	mov rax, ENV
 21977 0000FA2A 488B00                  	mov rax, qword [rax + 8 * 0]
 21978 0000FA2D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 21979 0000FA30 50                      	push rax
 21980 0000FA31 6A02                    	push 2	; arg count
 21981 0000FA33 488B4510                	mov rax, ENV
 21982 0000FA37 488B4008                	mov rax, qword [rax + 8 * 1]
 21983 0000FA3B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
 21984 0000FA3E 803804                  	cmp byte [rax], T_closure
 21985 0000FA41 0F85995D0000            	jne L_error_non_closure
 21986 0000FA47 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21987                                  
 21988                                  	; recycling the current frame
 21989 0000FA4A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21990 0000FA4D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21991 0000FA50 B906000000              	mov rcx, 2 + 4
 21992 0000FA55 488B5D18                	mov rbx, COUNT
 21993 0000FA59 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21994 0000FA5E 488D55F8                	lea rdx, [rbp - 8 * 1]
 21995                                  .L_tc_recycle_frame_loop_00bb:
 21996 0000FA62 4883F900                	cmp rcx, 0
 21997 0000FA66 7413                    	je .L_tc_recycle_frame_done_00bb
 21998 0000FA68 488B32                  	mov rsi, qword [rdx]
 21999 0000FA6B 488933                  	mov qword [rbx], rsi
 22000 0000FA6E 48FFC9                  	dec rcx
 22001 0000FA71 4883EB08                	sub rbx, 8 * 1
 22002 0000FA75 4883EA08                	sub rdx, 8 * 1
 22003 0000FA79 EBE7                    	jmp .L_tc_recycle_frame_loop_00bb
 22004                                  .L_tc_recycle_frame_done_00bb:
 22005 0000FA7B 488D6308                	lea rsp, [rbx + 8 * 1]
 22006 0000FA7F 5D                      	pop rbp	; the proc will restore it!
 22007 0000FA80 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22008 0000FA83 C9                      	leave
 22009 0000FA84 C21800                  	ret AND_KILL_FRAME(1)
 22010                                  .L_lambda_simple_end_0083:	; new closure is in rax
 22011 0000FA87 803804                  	cmp byte [rax], T_closure
 22012 0000FA8A 0F85505D0000            	jne L_error_non_closure
 22013 0000FA90 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22014                                  
 22015                                  	; recycling the current frame
 22016 0000FA93 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22017 0000FA96 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22018 0000FA99 B905000000              	mov rcx, 1 + 4
 22019 0000FA9E 488B5D18                	mov rbx, COUNT
 22020 0000FAA2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22021 0000FAA7 488D55F8                	lea rdx, [rbp - 8 * 1]
 22022                                  .L_tc_recycle_frame_loop_00bc:
 22023 0000FAAB 4883F900                	cmp rcx, 0
 22024 0000FAAF 7413                    	je .L_tc_recycle_frame_done_00bc
 22025 0000FAB1 488B32                  	mov rsi, qword [rdx]
 22026 0000FAB4 488933                  	mov qword [rbx], rsi
 22027 0000FAB7 48FFC9                  	dec rcx
 22028 0000FABA 4883EB08                	sub rbx, 8 * 1
 22029 0000FABE 4883EA08                	sub rdx, 8 * 1
 22030 0000FAC2 EBE7                    	jmp .L_tc_recycle_frame_loop_00bc
 22031                                  .L_tc_recycle_frame_done_00bc:
 22032 0000FAC4 488D6308                	lea rsp, [rbx + 8 * 1]
 22033 0000FAC8 5D                      	pop rbp	; the proc will restore it!
 22034 0000FAC9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22035 0000FACC C9                      	leave
 22036 0000FACD C22000                  	ret AND_KILL_FRAME(2)
 22037                                  .L_lambda_opt_end_0015:	; new closure is in rax
 22038 0000FAD0 C9                      	leave
 22039 0000FAD1 C21800                  	ret AND_KILL_FRAME(1)
 22040                                  .L_lambda_simple_end_0082:	; new closure is in rax
 22041 0000FAD4 803804                  	cmp byte [rax], T_closure
 22042 0000FAD7 0F85035D0000            	jne L_error_non_closure
 22043 0000FADD FF7001                  	push SOB_CLOSURE_ENV(rax)
 22044 0000FAE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22045 0000FAE3 48890425[7A110000]      	mov qword [free_var_57], rax
 22046 0000FAEB 48B8-                   	mov rax, sob_void
 22046 0000FAED [0000000000000000] 
 22047                                  
 22048 0000FAF5 4889C7                  	mov rdi, rax
 22049 0000FAF8 E89E5E0000              	call print_sexpr_if_not_void
 22050                                  
 22051 0000FAFD 488B0425[8B110000]      	mov rax, qword [free_var_58]	; free var make-string
 22052 0000FB05 803805                  	cmp byte [rax], T_undefined
 22053 0000FB08 0F844E5C0000            	je L_error_fvar_undefined
 22054 0000FB0E 50                      	push rax
 22055 0000FB0F 6A01                    	push 1	; arg count
 22056 0000FB11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22057 0000FB16 E86E5D0000              	call malloc
 22058 0000FB1B 50                      	push rax
 22059 0000FB1C BF00000000              	mov rdi, 8 * 0	; new rib
 22060 0000FB21 E8635D0000              	call malloc
 22061 0000FB26 50                      	push rax
 22062 0000FB27 BF08000000              	mov rdi, 8 * 1	; extended env
 22063 0000FB2C E8585D0000              	call malloc
 22064 0000FB31 488B7D10                	mov rdi, ENV
 22065 0000FB35 BE00000000              	mov rsi, 0
 22066 0000FB3A BA01000000              	mov rdx, 1
 22067                                  .L_lambda_simple_env_loop_0084:	; ext_env[i + 1] <-- env[i]
 22068 0000FB3F 4883FE00                	cmp rsi, 0
 22069 0000FB43 7410                    	je .L_lambda_simple_env_end_0084
 22070 0000FB45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22071 0000FB49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22072 0000FB4D 48FFC6                  	inc rsi
 22073 0000FB50 48FFC2                  	inc rdx
 22074 0000FB53 EBEA                    	jmp .L_lambda_simple_env_loop_0084
 22075                                  .L_lambda_simple_env_end_0084:
 22076 0000FB55 5B                      	pop rbx
 22077 0000FB56 BE00000000              	mov rsi, 0
 22078                                  .L_lambda_simple_params_loop_0084:	; copy params
 22079 0000FB5B 4883FE00                	cmp rsi, 0
 22080 0000FB5F 740E                    	je .L_lambda_simple_params_end_0084
 22081 0000FB61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22082 0000FB66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22083 0000FB6A 48FFC6                  	inc rsi
 22084 0000FB6D EBEC                    	jmp .L_lambda_simple_params_loop_0084
 22085                                  .L_lambda_simple_params_end_0084:
 22086 0000FB6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22087 0000FB72 4889C3                  	mov rbx, rax
 22088 0000FB75 58                      	pop rax
 22089 0000FB76 C60004                  	mov byte [rax], T_closure
 22090 0000FB79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22091 0000FB7D 48C74009[8AFB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0084
 22092 0000FB85 E9D9030000              	jmp .L_lambda_simple_end_0084
 22093                                  .L_lambda_simple_code_0084:	; lambda-simple body
 22094 0000FB8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22095 0000FB90 740B                    	je .L_lambda_simple_arity_check_ok_0084
 22096 0000FB92 FF742410                	push qword [rsp + 8 * 2]
 22097 0000FB96 6A01                    	push 1
 22098 0000FB98 E9A55C0000              	jmp L_error_incorrect_arity_simple
 22099                                  .L_lambda_simple_arity_check_ok_0084:
 22100 0000FB9D C8000000                	enter 0, 0
 22101 0000FBA1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22102 0000FBA6 E8DE5C0000              	call malloc
 22103 0000FBAB 50                      	push rax
 22104 0000FBAC BF08000000              	mov rdi, 8 * 1	; new rib
 22105 0000FBB1 E8D35C0000              	call malloc
 22106 0000FBB6 50                      	push rax
 22107 0000FBB7 BF10000000              	mov rdi, 8 * 2	; extended env
 22108 0000FBBC E8C85C0000              	call malloc
 22109 0000FBC1 488B7D10                	mov rdi, ENV
 22110 0000FBC5 BE00000000              	mov rsi, 0
 22111 0000FBCA BA01000000              	mov rdx, 1
 22112                                  .L_lambda_opt_env_loop_0016:	; ext_env[i + 1] <-- env[i]
 22113 0000FBCF 4883FE01                	cmp rsi, 1
 22114 0000FBD3 7410                    	je .L_lambda_opt_env_end_0016
 22115 0000FBD5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22116 0000FBD9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22117 0000FBDD 48FFC6                  	inc rsi
 22118 0000FBE0 48FFC2                  	inc rdx
 22119 0000FBE3 EBEA                    	jmp .L_lambda_opt_env_loop_0016
 22120                                  .L_lambda_opt_env_end_0016:
 22121 0000FBE5 5B                      	pop rbx
 22122 0000FBE6 BE00000000              	mov rsi, 0
 22123                                  .L_lambda_opt_params_loop_0016:	; copy params
 22124 0000FBEB 4883FE01                	cmp rsi, 1
 22125 0000FBEF 740E                    	je .L_lambda_opt_params_end_0016
 22126 0000FBF1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22127 0000FBF6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22128 0000FBFA 48FFC6                  	inc rsi
 22129 0000FBFD EBEC                    	jmp .L_lambda_opt_params_loop_0016
 22130                                  .L_lambda_opt_params_end_0016:
 22131 0000FBFF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22132 0000FC02 4889C3                  	mov rbx, rax
 22133 0000FC05 58                      	pop rax
 22134 0000FC06 C60004                  	mov byte [rax], T_closure
 22135 0000FC09 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22136 0000FC0D 48C74009[1AFC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0016
 22137 0000FC15 E945030000              	jmp .L_lambda_opt_end_0016
 22138                                  .L_lambda_opt_code_0016:	; lambda-simple body
 22139 0000FC1A 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 22140 0000FC20 740D                    	je .L_lambda_opt_arity_check_exact_0016 ;	 if equal, go to exact arity
 22141 0000FC22 7F42                    	jg .L_lambda_opt_arity_check_more_0016 ;	 if greater than, go to arity more
 22142 0000FC24 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 22143 0000FC28 6A01                     	push 1
 22144 0000FC2A E9275C0000              	jmp L_error_incorrect_arity_opt
 22145                                  	.L_lambda_opt_arity_check_exact_0016:
 22146 0000FC2F 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 22147 0000FC34 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 22148 0000FC39 4883EC08                	sub rsp, 8
 22149 0000FC3D 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 22150                                  	.L_lambda_opt_exact_shifting_loop_0016:
 22151 0000FC41 488B5108                	mov rdx, [rcx + 8]
 22152 0000FC45 488911                  	mov [rcx], rdx
 22153 0000FC48 4883C108                	add rcx, 8
 22154 0000FC4C 4839CB                  	cmp rbx, rcx
 22155 0000FC4F 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0016
 22156                                  	.L_lambda_opt_exact_shifting_loop_end_0016:
 22157 0000FC51 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 22158 0000FC58 4883C001                	add rax, 1 ; 	arg count += 1
 22159 0000FC5C 4889442410              	mov qword [rsp + 8 * 2], rax
 22160 0000FC61 E987000000              	jmp .L_lambda_opt_stack_adjusted_0016
 22161                                  	.L_lambda_opt_arity_check_more_0016:
 22162 0000FC66 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 22162 0000FC68 [0100000000000000] 
 22163 0000FC70 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 22164 0000FC76 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0016
 22165                                  	.L_lambda_opt_stack_shrink_loop_0016:
 22166 0000FC78 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 22167 0000FC7D E8075C0000              	call malloc ;	 allocated memory for the optional scheme list
 22168 0000FC82 C60021                  	mov byte[rax], T_pair ;	 set type pair
 22169 0000FC85 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 22170 0000FC89 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 22171 0000FC8C 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 22172 0000FC91 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 22173 0000FC96 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 22174 0000FC9A 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 22175                                  	.L_lambda_opt_more_shifting_loop_0016:
 22176 0000FC9F 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 22177 0000FCA2 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 22178 0000FCA6 4883EB08                	sub rbx, 8 
 22179 0000FCAA 4839DC                  	cmp rsp, rbx
 22180 0000FCAD 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0016
 22181                                  	.L_lambda_opt_more_shifting_loop_end_0016:
 22182 0000FCAF 4883C408                	add rsp, 8 ;	 update rsp
 22183 0000FCB3 488B5C2410              	mov rbx, [rsp + 8 * 2]
 22184 0000FCB8 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 22185 0000FCBC 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 22186 0000FCC1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22187 0000FCC7 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0016
 22188                                  	.L_lambda_opt_stack_shrink_loop_exit_0016:
 22189 0000FCC9 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 22190 0000FCCE 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 22191 0000FCD3 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 22192 0000FCD8 E8AC5B0000              	call malloc ;	 allocated memory for the optional scheme list
 22193 0000FCDD C60021                  	mov byte[rax], T_pair ;	 set type pair
 22194 0000FCE0 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 22195 0000FCE4 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 22196 0000FCE8 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 22197                                  	.L_lambda_opt_stack_adjusted_0016:
 22198 0000FCED C8000000                	enter 0, 0
 22199                                  	; preparing a tail-call
 22200 0000FCF1 488B4528                	mov rax, PARAM(1)	; param chs
 22201 0000FCF5 50                      	push rax
 22202 0000FCF6 6A01                    	push 1	; arg count
 22203 0000FCF8 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 22204 0000FD00 803805                  	cmp byte [rax], T_undefined
 22205 0000FD03 0F84535A0000            	je L_error_fvar_undefined
 22206 0000FD09 803804                  	cmp byte [rax], T_closure
 22207 0000FD0C 0F85CE5A0000            	jne L_error_non_closure
 22208 0000FD12 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22209 0000FD15 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22210                                  
 22211 0000FD18 483D[02000000]          	cmp rax, sob_boolean_false
 22212 0000FD1E 740F                    	je .L_if_else_0067
 22213 0000FD20 48B8-                   	mov rax, L_constants + 4
 22213 0000FD22 [0400000000000000] 
 22214                                  
 22215 0000FD2A E9EE000000              	jmp .L_if_end_0067
 22216                                  
 22217                                  	.L_if_else_0067:
 22218 0000FD2F 488B4528                	mov rax, PARAM(1)	; param chs
 22219 0000FD33 50                      	push rax
 22220 0000FD34 6A01                    	push 1	; arg count
 22221 0000FD36 488B0425[C20D0000]      	mov rax, qword [free_var_1]	; free var pair?
 22222 0000FD3E 803805                  	cmp byte [rax], T_undefined
 22223 0000FD41 0F84155A0000            	je L_error_fvar_undefined
 22224 0000FD47 803804                  	cmp byte [rax], T_closure
 22225 0000FD4A 0F85905A0000            	jne L_error_non_closure
 22226 0000FD50 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22227 0000FD53 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22228                                  
 22229 0000FD56 483D[02000000]          	cmp rax, sob_boolean_false
 22230 0000FD5C 744C                    	je .L_if_else_0069
 22231 0000FD5E 488B4528                	mov rax, PARAM(1)	; param chs
 22232 0000FD62 50                      	push rax
 22233 0000FD63 6A01                    	push 1	; arg count
 22234 0000FD65 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 22235 0000FD6D 803805                  	cmp byte [rax], T_undefined
 22236 0000FD70 0F84E6590000            	je L_error_fvar_undefined
 22237 0000FD76 803804                  	cmp byte [rax], T_closure
 22238 0000FD79 0F85615A0000            	jne L_error_non_closure
 22239 0000FD7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 22240 0000FD82 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22241 0000FD85 50                      	push rax
 22242 0000FD86 6A01                    	push 1	; arg count
 22243 0000FD88 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 22244 0000FD90 803805                  	cmp byte [rax], T_undefined
 22245 0000FD93 0F84C3590000            	je L_error_fvar_undefined
 22246 0000FD99 803804                  	cmp byte [rax], T_closure
 22247 0000FD9C 0F853E5A0000            	jne L_error_non_closure
 22248 0000FDA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22249 0000FDA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22250                                  
 22251 0000FDA8 EB0A                    	jmp .L_if_end_0069
 22252                                  
 22253                                  	.L_if_else_0069:
 22254 0000FDAA 48B8-                   	mov rax, L_constants + 2
 22254 0000FDAC [0200000000000000] 
 22255                                  
 22256                                  	.L_if_end_0069:
 22257                                  
 22258 0000FDB4 483D[02000000]          	cmp rax, sob_boolean_false
 22259 0000FDBA 7429                    	je .L_if_else_0068
 22260 0000FDBC 488B4528                	mov rax, PARAM(1)	; param chs
 22261 0000FDC0 50                      	push rax
 22262 0000FDC1 6A01                    	push 1	; arg count
 22263 0000FDC3 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 22264 0000FDCB 803805                  	cmp byte [rax], T_undefined
 22265 0000FDCE 0F8488590000            	je L_error_fvar_undefined
 22266 0000FDD4 803804                  	cmp byte [rax], T_closure
 22267 0000FDD7 0F85035A0000            	jne L_error_non_closure
 22268 0000FDDD FF7001                  	push SOB_CLOSURE_ENV(rax)
 22269 0000FDE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22270                                  
 22271 0000FDE3 EB38                    	jmp .L_if_end_0068
 22272                                  
 22273                                  	.L_if_else_0068:
 22274 0000FDE5 48B8-                   	mov rax, L_constants + 3000
 22274 0000FDE7 [B80B000000000000] 
 22275 0000FDEF 50                      	push rax
 22276 0000FDF0 48B8-                   	mov rax, L_constants + 2991
 22276 0000FDF2 [AF0B000000000000] 
 22277 0000FDFA 50                      	push rax
 22278 0000FDFB 6A02                    	push 2	; arg count
 22279 0000FDFD 488B0425[7B100000]      	mov rax, qword [free_var_42]	; free var error
 22280 0000FE05 803805                  	cmp byte [rax], T_undefined
 22281 0000FE08 0F844E590000            	je L_error_fvar_undefined
 22282 0000FE0E 803804                  	cmp byte [rax], T_closure
 22283 0000FE11 0F85C9590000            	jne L_error_non_closure
 22284 0000FE17 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22285 0000FE1A FF5009                  	call SOB_CLOSURE_CODE(rax)
 22286                                  
 22287                                  	.L_if_end_0068:
 22288                                  
 22289                                  	.L_if_end_0067:
 22290 0000FE1D 50                      	push rax
 22291 0000FE1E 6A01                    	push 1	; arg count
 22292 0000FE20 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22293 0000FE25 E85F5A0000              	call malloc
 22294 0000FE2A 50                      	push rax
 22295 0000FE2B BF10000000              	mov rdi, 8 * 2	; new rib
 22296 0000FE30 E8545A0000              	call malloc
 22297 0000FE35 50                      	push rax
 22298 0000FE36 BF18000000              	mov rdi, 8 * 3	; extended env
 22299 0000FE3B E8495A0000              	call malloc
 22300 0000FE40 488B7D10                	mov rdi, ENV
 22301 0000FE44 BE00000000              	mov rsi, 0
 22302 0000FE49 BA01000000              	mov rdx, 1
 22303                                  .L_lambda_simple_env_loop_0085:	; ext_env[i + 1] <-- env[i]
 22304 0000FE4E 4883FE02                	cmp rsi, 2
 22305 0000FE52 7410                    	je .L_lambda_simple_env_end_0085
 22306 0000FE54 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22307 0000FE58 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22308 0000FE5C 48FFC6                  	inc rsi
 22309 0000FE5F 48FFC2                  	inc rdx
 22310 0000FE62 EBEA                    	jmp .L_lambda_simple_env_loop_0085
 22311                                  .L_lambda_simple_env_end_0085:
 22312 0000FE64 5B                      	pop rbx
 22313 0000FE65 BE00000000              	mov rsi, 0
 22314                                  .L_lambda_simple_params_loop_0085:	; copy params
 22315 0000FE6A 4883FE02                	cmp rsi, 2
 22316 0000FE6E 740E                    	je .L_lambda_simple_params_end_0085
 22317 0000FE70 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22318 0000FE75 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22319 0000FE79 48FFC6                  	inc rsi
 22320 0000FE7C EBEC                    	jmp .L_lambda_simple_params_loop_0085
 22321                                  .L_lambda_simple_params_end_0085:
 22322 0000FE7E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22323 0000FE81 4889C3                  	mov rbx, rax
 22324 0000FE84 58                      	pop rax
 22325 0000FE85 C60004                  	mov byte [rax], T_closure
 22326 0000FE88 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22327 0000FE8C 48C74009[99FE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0085
 22328 0000FE94 E97D000000              	jmp .L_lambda_simple_end_0085
 22329                                  .L_lambda_simple_code_0085:	; lambda-simple body
 22330 0000FE99 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22331 0000FE9F 740B                    	je .L_lambda_simple_arity_check_ok_0085
 22332 0000FEA1 FF742410                	push qword [rsp + 8 * 2]
 22333 0000FEA5 6A01                    	push 1
 22334 0000FEA7 E996590000              	jmp L_error_incorrect_arity_simple
 22335                                  .L_lambda_simple_arity_check_ok_0085:
 22336 0000FEAC C8000000                	enter 0, 0
 22337                                  	; preparing a tail-call
 22338 0000FEB0 488B4520                	mov rax, PARAM(0)	; param ch
 22339 0000FEB4 50                      	push rax
 22340 0000FEB5 488B4510                	mov rax, ENV
 22341 0000FEB9 488B00                  	mov rax, qword [rax + 8 * 0]
 22342 0000FEBC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 22343 0000FEBF 50                      	push rax
 22344 0000FEC0 6A02                    	push 2	; arg count
 22345 0000FEC2 488B4510                	mov rax, ENV
 22346 0000FEC6 488B4008                	mov rax, qword [rax + 8 * 1]
 22347 0000FECA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
 22348 0000FECD 803804                  	cmp byte [rax], T_closure
 22349 0000FED0 0F850A590000            	jne L_error_non_closure
 22350 0000FED6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22351                                  
 22352                                  	; recycling the current frame
 22353 0000FED9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22354 0000FEDC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22355 0000FEDF B906000000              	mov rcx, 2 + 4
 22356 0000FEE4 488B5D18                	mov rbx, COUNT
 22357 0000FEE8 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22358 0000FEED 488D55F8                	lea rdx, [rbp - 8 * 1]
 22359                                  .L_tc_recycle_frame_loop_00bd:
 22360 0000FEF1 4883F900                	cmp rcx, 0
 22361 0000FEF5 7413                    	je .L_tc_recycle_frame_done_00bd
 22362 0000FEF7 488B32                  	mov rsi, qword [rdx]
 22363 0000FEFA 488933                  	mov qword [rbx], rsi
 22364 0000FEFD 48FFC9                  	dec rcx
 22365 0000FF00 4883EB08                	sub rbx, 8 * 1
 22366 0000FF04 4883EA08                	sub rdx, 8 * 1
 22367 0000FF08 EBE7                    	jmp .L_tc_recycle_frame_loop_00bd
 22368                                  .L_tc_recycle_frame_done_00bd:
 22369 0000FF0A 488D6308                	lea rsp, [rbx + 8 * 1]
 22370 0000FF0E 5D                      	pop rbp	; the proc will restore it!
 22371 0000FF0F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22372 0000FF12 C9                      	leave
 22373 0000FF13 C21800                  	ret AND_KILL_FRAME(1)
 22374                                  .L_lambda_simple_end_0085:	; new closure is in rax
 22375 0000FF16 803804                  	cmp byte [rax], T_closure
 22376 0000FF19 0F85C1580000            	jne L_error_non_closure
 22377 0000FF1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 22378                                  
 22379                                  	; recycling the current frame
 22380 0000FF22 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22381 0000FF25 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22382 0000FF28 B905000000              	mov rcx, 1 + 4
 22383 0000FF2D 488B5D18                	mov rbx, COUNT
 22384 0000FF31 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22385 0000FF36 488D55F8                	lea rdx, [rbp - 8 * 1]
 22386                                  .L_tc_recycle_frame_loop_00be:
 22387 0000FF3A 4883F900                	cmp rcx, 0
 22388 0000FF3E 7413                    	je .L_tc_recycle_frame_done_00be
 22389 0000FF40 488B32                  	mov rsi, qword [rdx]
 22390 0000FF43 488933                  	mov qword [rbx], rsi
 22391 0000FF46 48FFC9                  	dec rcx
 22392 0000FF49 4883EB08                	sub rbx, 8 * 1
 22393 0000FF4D 4883EA08                	sub rdx, 8 * 1
 22394 0000FF51 EBE7                    	jmp .L_tc_recycle_frame_loop_00be
 22395                                  .L_tc_recycle_frame_done_00be:
 22396 0000FF53 488D6308                	lea rsp, [rbx + 8 * 1]
 22397 0000FF57 5D                      	pop rbp	; the proc will restore it!
 22398 0000FF58 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22399 0000FF5B C9                      	leave
 22400 0000FF5C C22000                  	ret AND_KILL_FRAME(2)
 22401                                  .L_lambda_opt_end_0016:	; new closure is in rax
 22402 0000FF5F C9                      	leave
 22403 0000FF60 C21800                  	ret AND_KILL_FRAME(1)
 22404                                  .L_lambda_simple_end_0084:	; new closure is in rax
 22405 0000FF63 803804                  	cmp byte [rax], T_closure
 22406 0000FF66 0F8574580000            	jne L_error_non_closure
 22407 0000FF6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22408 0000FF6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22409 0000FF72 48890425[8B110000]      	mov qword [free_var_58], rax
 22410 0000FF7A 48B8-                   	mov rax, sob_void
 22410 0000FF7C [0000000000000000] 
 22411                                  
 22412 0000FF84 4889C7                  	mov rdi, rax
 22413 0000FF87 E80F5A0000              	call print_sexpr_if_not_void
 22414                                  
 22415 0000FF8C 48B8-                   	mov rax, L_constants + 1881
 22415 0000FF8E [5907000000000000] 
 22416 0000FF96 50                      	push rax
 22417 0000FF97 6A01                    	push 1	; arg count
 22418 0000FF99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22419 0000FF9E E8E6580000              	call malloc
 22420 0000FFA3 50                      	push rax
 22421 0000FFA4 BF00000000              	mov rdi, 8 * 0	; new rib
 22422 0000FFA9 E8DB580000              	call malloc
 22423 0000FFAE 50                      	push rax
 22424 0000FFAF BF08000000              	mov rdi, 8 * 1	; extended env
 22425 0000FFB4 E8D0580000              	call malloc
 22426 0000FFB9 488B7D10                	mov rdi, ENV
 22427 0000FFBD BE00000000              	mov rsi, 0
 22428 0000FFC2 BA01000000              	mov rdx, 1
 22429                                  .L_lambda_simple_env_loop_0086:	; ext_env[i + 1] <-- env[i]
 22430 0000FFC7 4883FE00                	cmp rsi, 0
 22431 0000FFCB 7410                    	je .L_lambda_simple_env_end_0086
 22432 0000FFCD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22433 0000FFD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22434 0000FFD5 48FFC6                  	inc rsi
 22435 0000FFD8 48FFC2                  	inc rdx
 22436 0000FFDB EBEA                    	jmp .L_lambda_simple_env_loop_0086
 22437                                  .L_lambda_simple_env_end_0086:
 22438 0000FFDD 5B                      	pop rbx
 22439 0000FFDE BE00000000              	mov rsi, 0
 22440                                  .L_lambda_simple_params_loop_0086:	; copy params
 22441 0000FFE3 4883FE00                	cmp rsi, 0
 22442 0000FFE7 740E                    	je .L_lambda_simple_params_end_0086
 22443 0000FFE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22444 0000FFEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22445 0000FFF2 48FFC6                  	inc rsi
 22446 0000FFF5 EBEC                    	jmp .L_lambda_simple_params_loop_0086
 22447                                  .L_lambda_simple_params_end_0086:
 22448 0000FFF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22449 0000FFFA 4889C3                  	mov rbx, rax
 22450 0000FFFD 58                      	pop rax
 22451 0000FFFE C60004                  	mov byte [rax], T_closure
 22452 00010001 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22453 00010005 48C74009[12000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0086
 22454 0001000D E92D040000              	jmp .L_lambda_simple_end_0086
 22455                                  .L_lambda_simple_code_0086:	; lambda-simple body
 22456 00010012 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22457 00010018 740B                    	je .L_lambda_simple_arity_check_ok_0086
 22458 0001001A FF742410                	push qword [rsp + 8 * 2]
 22459 0001001E 6A01                    	push 1
 22460 00010020 E91D580000              	jmp L_error_incorrect_arity_simple
 22461                                  .L_lambda_simple_arity_check_ok_0086:
 22462 00010025 C8000000                	enter 0, 0
 22463                                  
 22464 00010029 BF08000000              	mov rdi, 8
 22465 0001002E E856580000              	call malloc
 22466 00010033 488B5D20                	mov rbx, PARAM(0)	; param run
 22467 00010037 488918                  	mov [rax], rbx	; box run
 22468 0001003A 48894520                	mov PARAM(0), rax	;replace param run with box
 22469 0001003E 48B8-                   	mov rax, sob_void
 22469 00010040 [0000000000000000] 
 22470                                  
 22471 00010048 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22472 0001004D E837580000              	call malloc
 22473 00010052 50                      	push rax
 22474 00010053 BF08000000              	mov rdi, 8 * 1	; new rib
 22475 00010058 E82C580000              	call malloc
 22476 0001005D 50                      	push rax
 22477 0001005E BF10000000              	mov rdi, 8 * 2	; extended env
 22478 00010063 E821580000              	call malloc
 22479 00010068 488B7D10                	mov rdi, ENV
 22480 0001006C BE00000000              	mov rsi, 0
 22481 00010071 BA01000000              	mov rdx, 1
 22482                                  .L_lambda_simple_env_loop_0087:	; ext_env[i + 1] <-- env[i]
 22483 00010076 4883FE01                	cmp rsi, 1
 22484 0001007A 7410                    	je .L_lambda_simple_env_end_0087
 22485 0001007C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22486 00010080 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22487 00010084 48FFC6                  	inc rsi
 22488 00010087 48FFC2                  	inc rdx
 22489 0001008A EBEA                    	jmp .L_lambda_simple_env_loop_0087
 22490                                  .L_lambda_simple_env_end_0087:
 22491 0001008C 5B                      	pop rbx
 22492 0001008D BE00000000              	mov rsi, 0
 22493                                  .L_lambda_simple_params_loop_0087:	; copy params
 22494 00010092 4883FE01                	cmp rsi, 1
 22495 00010096 740E                    	je .L_lambda_simple_params_end_0087
 22496 00010098 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22497 0001009D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22498 000100A1 48FFC6                  	inc rsi
 22499 000100A4 EBEC                    	jmp .L_lambda_simple_params_loop_0087
 22500                                  .L_lambda_simple_params_end_0087:
 22501 000100A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22502 000100A9 4889C3                  	mov rbx, rax
 22503 000100AC 58                      	pop rax
 22504 000100AD C60004                  	mov byte [rax], T_closure
 22505 000100B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22506 000100B4 48C74009[C1000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0087
 22507 000100BC E971020000              	jmp .L_lambda_simple_end_0087
 22508                                  .L_lambda_simple_code_0087:	; lambda-simple body
 22509 000100C1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22510 000100C7 740B                    	je .L_lambda_simple_arity_check_ok_0087
 22511 000100C9 FF742410                	push qword [rsp + 8 * 2]
 22512 000100CD 6A02                    	push 2
 22513 000100CF E96E570000              	jmp L_error_incorrect_arity_simple
 22514                                  .L_lambda_simple_arity_check_ok_0087:
 22515 000100D4 C8000000                	enter 0, 0
 22516 000100D8 488B4520                	mov rax, PARAM(0)	; param s
 22517 000100DC 50                      	push rax
 22518 000100DD 6A01                    	push 1	; arg count
 22519 000100DF 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 22520 000100E7 803805                  	cmp byte [rax], T_undefined
 22521 000100EA 0F846C560000            	je L_error_fvar_undefined
 22522 000100F0 803804                  	cmp byte [rax], T_closure
 22523 000100F3 0F85E7560000            	jne L_error_non_closure
 22524 000100F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22525 000100FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 22526                                  
 22527 000100FF 483D[02000000]          	cmp rax, sob_boolean_false
 22528 00010105 746D                    	je .L_if_else_006a
 22529                                  	; preparing a tail-call
 22530 00010107 48B8-                   	mov rax, L_constants + 0
 22530 00010109 [0000000000000000] 
 22531 00010111 50                      	push rax
 22532 00010112 488B4528                	mov rax, PARAM(1)	; param i
 22533 00010116 50                      	push rax
 22534 00010117 6A02                    	push 2	; arg count
 22535 00010119 488B0425[7A110000]      	mov rax, qword [free_var_57]	; free var make-vector
 22536 00010121 803805                  	cmp byte [rax], T_undefined
 22537 00010124 0F8432560000            	je L_error_fvar_undefined
 22538 0001012A 803804                  	cmp byte [rax], T_closure
 22539 0001012D 0F85AD560000            	jne L_error_non_closure
 22540 00010133 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22541                                  
 22542                                  	; recycling the current frame
 22543 00010136 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22544 00010139 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22545 0001013C B906000000              	mov rcx, 2 + 4
 22546 00010141 488B5D18                	mov rbx, COUNT
 22547 00010145 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22548 0001014A 488D55F8                	lea rdx, [rbp - 8 * 1]
 22549                                  .L_tc_recycle_frame_loop_00bf:
 22550 0001014E 4883F900                	cmp rcx, 0
 22551 00010152 7413                    	je .L_tc_recycle_frame_done_00bf
 22552 00010154 488B32                  	mov rsi, qword [rdx]
 22553 00010157 488933                  	mov qword [rbx], rsi
 22554 0001015A 48FFC9                  	dec rcx
 22555 0001015D 4883EB08                	sub rbx, 8 * 1
 22556 00010161 4883EA08                	sub rdx, 8 * 1
 22557 00010165 EBE7                    	jmp .L_tc_recycle_frame_loop_00bf
 22558                                  .L_tc_recycle_frame_done_00bf:
 22559 00010167 488D6308                	lea rsp, [rbx + 8 * 1]
 22560 0001016B 5D                      	pop rbp	; the proc will restore it!
 22561 0001016C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22562                                  
 22563 0001016F E9BA010000              	jmp .L_if_end_006a
 22564                                  
 22565                                  	.L_if_else_006a:
 22566                                  	; preparing a tail-call
 22567 00010174 48B8-                   	mov rax, L_constants + 2158
 22567 00010176 [6E08000000000000] 
 22568 0001017E 50                      	push rax
 22569 0001017F 488B4528                	mov rax, PARAM(1)	; param i
 22570 00010183 50                      	push rax
 22571 00010184 6A02                    	push 2	; arg count
 22572 00010186 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 22573 0001018E 803805                  	cmp byte [rax], T_undefined
 22574 00010191 0F84C5550000            	je L_error_fvar_undefined
 22575 00010197 803804                  	cmp byte [rax], T_closure
 22576 0001019A 0F8540560000            	jne L_error_non_closure
 22577 000101A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22578 000101A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22579 000101A6 50                      	push rax
 22580 000101A7 488B4520                	mov rax, PARAM(0)	; param s
 22581 000101AB 50                      	push rax
 22582 000101AC 6A01                    	push 1	; arg count
 22583 000101AE 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 22584 000101B6 803805                  	cmp byte [rax], T_undefined
 22585 000101B9 0F849D550000            	je L_error_fvar_undefined
 22586 000101BF 803804                  	cmp byte [rax], T_closure
 22587 000101C2 0F8518560000            	jne L_error_non_closure
 22588 000101C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22589 000101CB FF5009                  	call SOB_CLOSURE_CODE(rax)
 22590 000101CE 50                      	push rax
 22591 000101CF 6A02                    	push 2	; arg count
 22592 000101D1 488B4510                	mov rax, ENV
 22593 000101D5 488B00                  	mov rax, qword [rax + 8 * 0]
 22594 000101D8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22595 000101DB 488B00                  	mov rax, qword [rax]
 22596 000101DE 803804                  	cmp byte [rax], T_closure
 22597 000101E1 0F85F9550000            	jne L_error_non_closure
 22598 000101E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22599 000101EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 22600 000101ED 50                      	push rax
 22601 000101EE 6A01                    	push 1	; arg count
 22602 000101F0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22603 000101F5 E88F560000              	call malloc
 22604 000101FA 50                      	push rax
 22605 000101FB BF10000000              	mov rdi, 8 * 2	; new rib
 22606 00010200 E884560000              	call malloc
 22607 00010205 50                      	push rax
 22608 00010206 BF18000000              	mov rdi, 8 * 3	; extended env
 22609 0001020B E879560000              	call malloc
 22610 00010210 488B7D10                	mov rdi, ENV
 22611 00010214 BE00000000              	mov rsi, 0
 22612 00010219 BA01000000              	mov rdx, 1
 22613                                  .L_lambda_simple_env_loop_0088:	; ext_env[i + 1] <-- env[i]
 22614 0001021E 4883FE02                	cmp rsi, 2
 22615 00010222 7410                    	je .L_lambda_simple_env_end_0088
 22616 00010224 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22617 00010228 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22618 0001022C 48FFC6                  	inc rsi
 22619 0001022F 48FFC2                  	inc rdx
 22620 00010232 EBEA                    	jmp .L_lambda_simple_env_loop_0088
 22621                                  .L_lambda_simple_env_end_0088:
 22622 00010234 5B                      	pop rbx
 22623 00010235 BE00000000              	mov rsi, 0
 22624                                  .L_lambda_simple_params_loop_0088:	; copy params
 22625 0001023A 4883FE02                	cmp rsi, 2
 22626 0001023E 740E                    	je .L_lambda_simple_params_end_0088
 22627 00010240 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22628 00010245 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22629 00010249 48FFC6                  	inc rsi
 22630 0001024C EBEC                    	jmp .L_lambda_simple_params_loop_0088
 22631                                  .L_lambda_simple_params_end_0088:
 22632 0001024E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22633 00010251 4889C3                  	mov rbx, rax
 22634 00010254 58                      	pop rax
 22635 00010255 C60004                  	mov byte [rax], T_closure
 22636 00010258 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22637 0001025C 48C74009[69020100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0088
 22638 00010264 E980000000              	jmp .L_lambda_simple_end_0088
 22639                                  .L_lambda_simple_code_0088:	; lambda-simple body
 22640 00010269 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22641 0001026F 740B                    	je .L_lambda_simple_arity_check_ok_0088
 22642 00010271 FF742410                	push qword [rsp + 8 * 2]
 22643 00010275 6A01                    	push 1
 22644 00010277 E9C6550000              	jmp L_error_incorrect_arity_simple
 22645                                  .L_lambda_simple_arity_check_ok_0088:
 22646 0001027C C8000000                	enter 0, 0
 22647 00010280 488B4510                	mov rax, ENV
 22648 00010284 488B00                  	mov rax, qword [rax + 8 * 0]
 22649 00010287 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 22650 0001028A 50                      	push rax
 22651 0001028B 6A01                    	push 1	; arg count
 22652 0001028D 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 22653 00010295 803805                  	cmp byte [rax], T_undefined
 22654 00010298 0F84BE540000            	je L_error_fvar_undefined
 22655 0001029E 803804                  	cmp byte [rax], T_closure
 22656 000102A1 0F8539550000            	jne L_error_non_closure
 22657 000102A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22658 000102AA FF5009                  	call SOB_CLOSURE_CODE(rax)
 22659 000102AD 50                      	push rax
 22660 000102AE 488B4510                	mov rax, ENV
 22661 000102B2 488B00                  	mov rax, qword [rax + 8 * 0]
 22662 000102B5 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 22663 000102B9 50                      	push rax
 22664 000102BA 488B4520                	mov rax, PARAM(0)	; param v
 22665 000102BE 50                      	push rax
 22666 000102BF 6A03                    	push 3	; arg count
 22667 000102C1 488B0425[58110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 22668 000102C9 803805                  	cmp byte [rax], T_undefined
 22669 000102CC 0F848A540000            	je L_error_fvar_undefined
 22670 000102D2 803804                  	cmp byte [rax], T_closure
 22671 000102D5 0F8505550000            	jne L_error_non_closure
 22672 000102DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 22673 000102DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 22674                                  
 22675 000102E1 488B4520                	mov rax, PARAM(0)	; param v
 22676 000102E5 C9                      	leave
 22677 000102E6 C21800                  	ret AND_KILL_FRAME(1)
 22678                                  .L_lambda_simple_end_0088:	; new closure is in rax
 22679 000102E9 803804                  	cmp byte [rax], T_closure
 22680 000102EC 0F85EE540000            	jne L_error_non_closure
 22681 000102F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22682                                  
 22683                                  	; recycling the current frame
 22684 000102F5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22685 000102F8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22686 000102FB B905000000              	mov rcx, 1 + 4
 22687 00010300 488B5D18                	mov rbx, COUNT
 22688 00010304 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22689 00010309 488D55F8                	lea rdx, [rbp - 8 * 1]
 22690                                  .L_tc_recycle_frame_loop_00c0:
 22691 0001030D 4883F900                	cmp rcx, 0
 22692 00010311 7413                    	je .L_tc_recycle_frame_done_00c0
 22693 00010313 488B32                  	mov rsi, qword [rdx]
 22694 00010316 488933                  	mov qword [rbx], rsi
 22695 00010319 48FFC9                  	dec rcx
 22696 0001031C 4883EB08                	sub rbx, 8 * 1
 22697 00010320 4883EA08                	sub rdx, 8 * 1
 22698 00010324 EBE7                    	jmp .L_tc_recycle_frame_loop_00c0
 22699                                  .L_tc_recycle_frame_done_00c0:
 22700 00010326 488D6308                	lea rsp, [rbx + 8 * 1]
 22701 0001032A 5D                      	pop rbp	; the proc will restore it!
 22702 0001032B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22703                                  
 22704                                  	.L_if_end_006a:
 22705 0001032E C9                      	leave
 22706 0001032F C22000                  	ret AND_KILL_FRAME(2)
 22707                                  .L_lambda_simple_end_0087:	; new closure is in rax
 22708                                  
 22709 00010332 50                      	push rax
 22710 00010333 488B4520                	mov rax, PARAM(0)	; param run
 22711                                  
 22712 00010337 8F00                    	pop qword[rax]
 22713 00010339 48B8-                   	mov rax, sob_void
 22713 0001033B [0000000000000000] 
 22714                                  
 22715 00010343 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22716 00010348 E83C550000              	call malloc
 22717 0001034D 50                      	push rax
 22718 0001034E BF08000000              	mov rdi, 8 * 1	; new rib
 22719 00010353 E831550000              	call malloc
 22720 00010358 50                      	push rax
 22721 00010359 BF10000000              	mov rdi, 8 * 2	; extended env
 22722 0001035E E826550000              	call malloc
 22723 00010363 488B7D10                	mov rdi, ENV
 22724 00010367 BE00000000              	mov rsi, 0
 22725 0001036C BA01000000              	mov rdx, 1
 22726                                  .L_lambda_simple_env_loop_0089:	; ext_env[i + 1] <-- env[i]
 22727 00010371 4883FE01                	cmp rsi, 1
 22728 00010375 7410                    	je .L_lambda_simple_env_end_0089
 22729 00010377 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22730 0001037B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22731 0001037F 48FFC6                  	inc rsi
 22732 00010382 48FFC2                  	inc rdx
 22733 00010385 EBEA                    	jmp .L_lambda_simple_env_loop_0089
 22734                                  .L_lambda_simple_env_end_0089:
 22735 00010387 5B                      	pop rbx
 22736 00010388 BE00000000              	mov rsi, 0
 22737                                  .L_lambda_simple_params_loop_0089:	; copy params
 22738 0001038D 4883FE01                	cmp rsi, 1
 22739 00010391 740E                    	je .L_lambda_simple_params_end_0089
 22740 00010393 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22741 00010398 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22742 0001039C 48FFC6                  	inc rsi
 22743 0001039F EBEC                    	jmp .L_lambda_simple_params_loop_0089
 22744                                  .L_lambda_simple_params_end_0089:
 22745 000103A1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22746 000103A4 4889C3                  	mov rbx, rax
 22747 000103A7 58                      	pop rax
 22748 000103A8 C60004                  	mov byte [rax], T_closure
 22749 000103AB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22750 000103AF 48C74009[BC030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0089
 22751 000103B7 E97F000000              	jmp .L_lambda_simple_end_0089
 22752                                  .L_lambda_simple_code_0089:	; lambda-simple body
 22753 000103BC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22754 000103C2 740B                    	je .L_lambda_simple_arity_check_ok_0089
 22755 000103C4 FF742410                	push qword [rsp + 8 * 2]
 22756 000103C8 6A01                    	push 1
 22757 000103CA E973540000              	jmp L_error_incorrect_arity_simple
 22758                                  .L_lambda_simple_arity_check_ok_0089:
 22759 000103CF C8000000                	enter 0, 0
 22760                                  	; preparing a tail-call
 22761 000103D3 48B8-                   	mov rax, L_constants + 2023
 22761 000103D5 [E707000000000000] 
 22762 000103DD 50                      	push rax
 22763 000103DE 488B4520                	mov rax, PARAM(0)	; param s
 22764 000103E2 50                      	push rax
 22765 000103E3 6A02                    	push 2	; arg count
 22766 000103E5 488B4510                	mov rax, ENV
 22767 000103E9 488B00                  	mov rax, qword [rax + 8 * 0]
 22768 000103EC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22769 000103EF 488B00                  	mov rax, qword [rax]
 22770 000103F2 803804                  	cmp byte [rax], T_closure
 22771 000103F5 0F85E5530000            	jne L_error_non_closure
 22772 000103FB FF7001                  	push SOB_CLOSURE_ENV(rax)
 22773                                  
 22774                                  	; recycling the current frame
 22775 000103FE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22776 00010401 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22777 00010404 B906000000              	mov rcx, 2 + 4
 22778 00010409 488B5D18                	mov rbx, COUNT
 22779 0001040D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22780 00010412 488D55F8                	lea rdx, [rbp - 8 * 1]
 22781                                  .L_tc_recycle_frame_loop_00c1:
 22782 00010416 4883F900                	cmp rcx, 0
 22783 0001041A 7413                    	je .L_tc_recycle_frame_done_00c1
 22784 0001041C 488B32                  	mov rsi, qword [rdx]
 22785 0001041F 488933                  	mov qword [rbx], rsi
 22786 00010422 48FFC9                  	dec rcx
 22787 00010425 4883EB08                	sub rbx, 8 * 1
 22788 00010429 4883EA08                	sub rdx, 8 * 1
 22789 0001042D EBE7                    	jmp .L_tc_recycle_frame_loop_00c1
 22790                                  .L_tc_recycle_frame_done_00c1:
 22791 0001042F 488D6308                	lea rsp, [rbx + 8 * 1]
 22792 00010433 5D                      	pop rbp	; the proc will restore it!
 22793 00010434 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22794 00010437 C9                      	leave
 22795 00010438 C21800                  	ret AND_KILL_FRAME(1)
 22796                                  .L_lambda_simple_end_0089:	; new closure is in rax
 22797 0001043B C9                      	leave
 22798 0001043C C21800                  	ret AND_KILL_FRAME(1)
 22799                                  .L_lambda_simple_end_0086:	; new closure is in rax
 22800 0001043F 803804                  	cmp byte [rax], T_closure
 22801 00010442 0F8598530000            	jne L_error_non_closure
 22802 00010448 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22803 0001044B FF5009                  	call SOB_CLOSURE_CODE(rax)
 22804 0001044E 48890425[FC170000]      	mov qword [free_var_155], rax
 22805 00010456 48B8-                   	mov rax, sob_void
 22805 00010458 [0000000000000000] 
 22806                                  
 22807 00010460 4889C7                  	mov rdi, rax
 22808 00010463 E833550000              	call print_sexpr_if_not_void
 22809                                  
 22810 00010468 48B8-                   	mov rax, L_constants + 1881
 22810 0001046A [5907000000000000] 
 22811 00010472 50                      	push rax
 22812 00010473 6A01                    	push 1	; arg count
 22813 00010475 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22814 0001047A E80A540000              	call malloc
 22815 0001047F 50                      	push rax
 22816 00010480 BF00000000              	mov rdi, 8 * 0	; new rib
 22817 00010485 E8FF530000              	call malloc
 22818 0001048A 50                      	push rax
 22819 0001048B BF08000000              	mov rdi, 8 * 1	; extended env
 22820 00010490 E8F4530000              	call malloc
 22821 00010495 488B7D10                	mov rdi, ENV
 22822 00010499 BE00000000              	mov rsi, 0
 22823 0001049E BA01000000              	mov rdx, 1
 22824                                  .L_lambda_simple_env_loop_008a:	; ext_env[i + 1] <-- env[i]
 22825 000104A3 4883FE00                	cmp rsi, 0
 22826 000104A7 7410                    	je .L_lambda_simple_env_end_008a
 22827 000104A9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22828 000104AD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22829 000104B1 48FFC6                  	inc rsi
 22830 000104B4 48FFC2                  	inc rdx
 22831 000104B7 EBEA                    	jmp .L_lambda_simple_env_loop_008a
 22832                                  .L_lambda_simple_env_end_008a:
 22833 000104B9 5B                      	pop rbx
 22834 000104BA BE00000000              	mov rsi, 0
 22835                                  .L_lambda_simple_params_loop_008a:	; copy params
 22836 000104BF 4883FE00                	cmp rsi, 0
 22837 000104C3 740E                    	je .L_lambda_simple_params_end_008a
 22838 000104C5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22839 000104CA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22840 000104CE 48FFC6                  	inc rsi
 22841 000104D1 EBEC                    	jmp .L_lambda_simple_params_loop_008a
 22842                                  .L_lambda_simple_params_end_008a:
 22843 000104D3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22844 000104D6 4889C3                  	mov rbx, rax
 22845 000104D9 58                      	pop rax
 22846 000104DA C60004                  	mov byte [rax], T_closure
 22847 000104DD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22848 000104E1 48C74009[EE040100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008a
 22849 000104E9 E92D040000              	jmp .L_lambda_simple_end_008a
 22850                                  .L_lambda_simple_code_008a:	; lambda-simple body
 22851 000104EE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22852 000104F4 740B                    	je .L_lambda_simple_arity_check_ok_008a
 22853 000104F6 FF742410                	push qword [rsp + 8 * 2]
 22854 000104FA 6A01                    	push 1
 22855 000104FC E941530000              	jmp L_error_incorrect_arity_simple
 22856                                  .L_lambda_simple_arity_check_ok_008a:
 22857 00010501 C8000000                	enter 0, 0
 22858                                  
 22859 00010505 BF08000000              	mov rdi, 8
 22860 0001050A E87A530000              	call malloc
 22861 0001050F 488B5D20                	mov rbx, PARAM(0)	; param run
 22862 00010513 488918                  	mov [rax], rbx	; box run
 22863 00010516 48894520                	mov PARAM(0), rax	;replace param run with box
 22864 0001051A 48B8-                   	mov rax, sob_void
 22864 0001051C [0000000000000000] 
 22865                                  
 22866 00010524 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22867 00010529 E85B530000              	call malloc
 22868 0001052E 50                      	push rax
 22869 0001052F BF08000000              	mov rdi, 8 * 1	; new rib
 22870 00010534 E850530000              	call malloc
 22871 00010539 50                      	push rax
 22872 0001053A BF10000000              	mov rdi, 8 * 2	; extended env
 22873 0001053F E845530000              	call malloc
 22874 00010544 488B7D10                	mov rdi, ENV
 22875 00010548 BE00000000              	mov rsi, 0
 22876 0001054D BA01000000              	mov rdx, 1
 22877                                  .L_lambda_simple_env_loop_008b:	; ext_env[i + 1] <-- env[i]
 22878 00010552 4883FE01                	cmp rsi, 1
 22879 00010556 7410                    	je .L_lambda_simple_env_end_008b
 22880 00010558 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22881 0001055C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22882 00010560 48FFC6                  	inc rsi
 22883 00010563 48FFC2                  	inc rdx
 22884 00010566 EBEA                    	jmp .L_lambda_simple_env_loop_008b
 22885                                  .L_lambda_simple_env_end_008b:
 22886 00010568 5B                      	pop rbx
 22887 00010569 BE00000000              	mov rsi, 0
 22888                                  .L_lambda_simple_params_loop_008b:	; copy params
 22889 0001056E 4883FE01                	cmp rsi, 1
 22890 00010572 740E                    	je .L_lambda_simple_params_end_008b
 22891 00010574 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22892 00010579 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22893 0001057D 48FFC6                  	inc rsi
 22894 00010580 EBEC                    	jmp .L_lambda_simple_params_loop_008b
 22895                                  .L_lambda_simple_params_end_008b:
 22896 00010582 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22897 00010585 4889C3                  	mov rbx, rax
 22898 00010588 58                      	pop rax
 22899 00010589 C60004                  	mov byte [rax], T_closure
 22900 0001058C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22901 00010590 48C74009[9D050100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008b
 22902 00010598 E971020000              	jmp .L_lambda_simple_end_008b
 22903                                  .L_lambda_simple_code_008b:	; lambda-simple body
 22904 0001059D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22905 000105A3 740B                    	je .L_lambda_simple_arity_check_ok_008b
 22906 000105A5 FF742410                	push qword [rsp + 8 * 2]
 22907 000105A9 6A02                    	push 2
 22908 000105AB E992520000              	jmp L_error_incorrect_arity_simple
 22909                                  .L_lambda_simple_arity_check_ok_008b:
 22910 000105B0 C8000000                	enter 0, 0
 22911 000105B4 488B4520                	mov rax, PARAM(0)	; param s
 22912 000105B8 50                      	push rax
 22913 000105B9 6A01                    	push 1	; arg count
 22914 000105BB 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 22915 000105C3 803805                  	cmp byte [rax], T_undefined
 22916 000105C6 0F8490510000            	je L_error_fvar_undefined
 22917 000105CC 803804                  	cmp byte [rax], T_closure
 22918 000105CF 0F850B520000            	jne L_error_non_closure
 22919 000105D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22920 000105D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22921                                  
 22922 000105DB 483D[02000000]          	cmp rax, sob_boolean_false
 22923 000105E1 746D                    	je .L_if_else_006b
 22924                                  	; preparing a tail-call
 22925 000105E3 48B8-                   	mov rax, L_constants + 4
 22925 000105E5 [0400000000000000] 
 22926 000105ED 50                      	push rax
 22927 000105EE 488B4528                	mov rax, PARAM(1)	; param i
 22928 000105F2 50                      	push rax
 22929 000105F3 6A02                    	push 2	; arg count
 22930 000105F5 488B0425[8B110000]      	mov rax, qword [free_var_58]	; free var make-string
 22931 000105FD 803805                  	cmp byte [rax], T_undefined
 22932 00010600 0F8456510000            	je L_error_fvar_undefined
 22933 00010606 803804                  	cmp byte [rax], T_closure
 22934 00010609 0F85D1510000            	jne L_error_non_closure
 22935 0001060F FF7001                  	push SOB_CLOSURE_ENV(rax)
 22936                                  
 22937                                  	; recycling the current frame
 22938 00010612 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22939 00010615 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22940 00010618 B906000000              	mov rcx, 2 + 4
 22941 0001061D 488B5D18                	mov rbx, COUNT
 22942 00010621 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22943 00010626 488D55F8                	lea rdx, [rbp - 8 * 1]
 22944                                  .L_tc_recycle_frame_loop_00c2:
 22945 0001062A 4883F900                	cmp rcx, 0
 22946 0001062E 7413                    	je .L_tc_recycle_frame_done_00c2
 22947 00010630 488B32                  	mov rsi, qword [rdx]
 22948 00010633 488933                  	mov qword [rbx], rsi
 22949 00010636 48FFC9                  	dec rcx
 22950 00010639 4883EB08                	sub rbx, 8 * 1
 22951 0001063D 4883EA08                	sub rdx, 8 * 1
 22952 00010641 EBE7                    	jmp .L_tc_recycle_frame_loop_00c2
 22953                                  .L_tc_recycle_frame_done_00c2:
 22954 00010643 488D6308                	lea rsp, [rbx + 8 * 1]
 22955 00010647 5D                      	pop rbp	; the proc will restore it!
 22956 00010648 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22957                                  
 22958 0001064B E9BA010000              	jmp .L_if_end_006b
 22959                                  
 22960                                  	.L_if_else_006b:
 22961                                  	; preparing a tail-call
 22962 00010650 48B8-                   	mov rax, L_constants + 2158
 22962 00010652 [6E08000000000000] 
 22963 0001065A 50                      	push rax
 22964 0001065B 488B4528                	mov rax, PARAM(1)	; param i
 22965 0001065F 50                      	push rax
 22966 00010660 6A02                    	push 2	; arg count
 22967 00010662 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 22968 0001066A 803805                  	cmp byte [rax], T_undefined
 22969 0001066D 0F84E9500000            	je L_error_fvar_undefined
 22970 00010673 803804                  	cmp byte [rax], T_closure
 22971 00010676 0F8564510000            	jne L_error_non_closure
 22972 0001067C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22973 0001067F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22974 00010682 50                      	push rax
 22975 00010683 488B4520                	mov rax, PARAM(0)	; param s
 22976 00010687 50                      	push rax
 22977 00010688 6A01                    	push 1	; arg count
 22978 0001068A 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 22979 00010692 803805                  	cmp byte [rax], T_undefined
 22980 00010695 0F84C1500000            	je L_error_fvar_undefined
 22981 0001069B 803804                  	cmp byte [rax], T_closure
 22982 0001069E 0F853C510000            	jne L_error_non_closure
 22983 000106A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22984 000106A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22985 000106AA 50                      	push rax
 22986 000106AB 6A02                    	push 2	; arg count
 22987 000106AD 488B4510                	mov rax, ENV
 22988 000106B1 488B00                  	mov rax, qword [rax + 8 * 0]
 22989 000106B4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22990 000106B7 488B00                  	mov rax, qword [rax]
 22991 000106BA 803804                  	cmp byte [rax], T_closure
 22992 000106BD 0F851D510000            	jne L_error_non_closure
 22993 000106C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22994 000106C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22995 000106C9 50                      	push rax
 22996 000106CA 6A01                    	push 1	; arg count
 22997 000106CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22998 000106D1 E8B3510000              	call malloc
 22999 000106D6 50                      	push rax
 23000 000106D7 BF10000000              	mov rdi, 8 * 2	; new rib
 23001 000106DC E8A8510000              	call malloc
 23002 000106E1 50                      	push rax
 23003 000106E2 BF18000000              	mov rdi, 8 * 3	; extended env
 23004 000106E7 E89D510000              	call malloc
 23005 000106EC 488B7D10                	mov rdi, ENV
 23006 000106F0 BE00000000              	mov rsi, 0
 23007 000106F5 BA01000000              	mov rdx, 1
 23008                                  .L_lambda_simple_env_loop_008c:	; ext_env[i + 1] <-- env[i]
 23009 000106FA 4883FE02                	cmp rsi, 2
 23010 000106FE 7410                    	je .L_lambda_simple_env_end_008c
 23011 00010700 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23012 00010704 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23013 00010708 48FFC6                  	inc rsi
 23014 0001070B 48FFC2                  	inc rdx
 23015 0001070E EBEA                    	jmp .L_lambda_simple_env_loop_008c
 23016                                  .L_lambda_simple_env_end_008c:
 23017 00010710 5B                      	pop rbx
 23018 00010711 BE00000000              	mov rsi, 0
 23019                                  .L_lambda_simple_params_loop_008c:	; copy params
 23020 00010716 4883FE02                	cmp rsi, 2
 23021 0001071A 740E                    	je .L_lambda_simple_params_end_008c
 23022 0001071C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23023 00010721 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23024 00010725 48FFC6                  	inc rsi
 23025 00010728 EBEC                    	jmp .L_lambda_simple_params_loop_008c
 23026                                  .L_lambda_simple_params_end_008c:
 23027 0001072A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23028 0001072D 4889C3                  	mov rbx, rax
 23029 00010730 58                      	pop rax
 23030 00010731 C60004                  	mov byte [rax], T_closure
 23031 00010734 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23032 00010738 48C74009[45070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008c
 23033 00010740 E980000000              	jmp .L_lambda_simple_end_008c
 23034                                  .L_lambda_simple_code_008c:	; lambda-simple body
 23035 00010745 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23036 0001074B 740B                    	je .L_lambda_simple_arity_check_ok_008c
 23037 0001074D FF742410                	push qword [rsp + 8 * 2]
 23038 00010751 6A01                    	push 1
 23039 00010753 E9EA500000              	jmp L_error_incorrect_arity_simple
 23040                                  .L_lambda_simple_arity_check_ok_008c:
 23041 00010758 C8000000                	enter 0, 0
 23042 0001075C 488B4510                	mov rax, ENV
 23043 00010760 488B00                  	mov rax, qword [rax + 8 * 0]
 23044 00010763 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 23045 00010766 50                      	push rax
 23046 00010767 6A01                    	push 1	; arg count
 23047 00010769 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 23048 00010771 803805                  	cmp byte [rax], T_undefined
 23049 00010774 0F84E24F0000            	je L_error_fvar_undefined
 23050 0001077A 803804                  	cmp byte [rax], T_closure
 23051 0001077D 0F855D500000            	jne L_error_non_closure
 23052 00010783 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23053 00010786 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23054 00010789 50                      	push rax
 23055 0001078A 488B4510                	mov rax, ENV
 23056 0001078E 488B00                  	mov rax, qword [rax + 8 * 0]
 23057 00010791 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 23058 00010795 50                      	push rax
 23059 00010796 488B4520                	mov rax, PARAM(0)	; param str
 23060 0001079A 50                      	push rax
 23061 0001079B 6A03                    	push 3	; arg count
 23062 0001079D 488B0425[69110000]      	mov rax, qword [free_var_56]	; free var string-set!
 23063 000107A5 803805                  	cmp byte [rax], T_undefined
 23064 000107A8 0F84AE4F0000            	je L_error_fvar_undefined
 23065 000107AE 803804                  	cmp byte [rax], T_closure
 23066 000107B1 0F8529500000            	jne L_error_non_closure
 23067 000107B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23068 000107BA FF5009                  	call SOB_CLOSURE_CODE(rax)
 23069                                  
 23070 000107BD 488B4520                	mov rax, PARAM(0)	; param str
 23071 000107C1 C9                      	leave
 23072 000107C2 C21800                  	ret AND_KILL_FRAME(1)
 23073                                  .L_lambda_simple_end_008c:	; new closure is in rax
 23074 000107C5 803804                  	cmp byte [rax], T_closure
 23075 000107C8 0F8512500000            	jne L_error_non_closure
 23076 000107CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 23077                                  
 23078                                  	; recycling the current frame
 23079 000107D1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23080 000107D4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23081 000107D7 B905000000              	mov rcx, 1 + 4
 23082 000107DC 488B5D18                	mov rbx, COUNT
 23083 000107E0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23084 000107E5 488D55F8                	lea rdx, [rbp - 8 * 1]
 23085                                  .L_tc_recycle_frame_loop_00c3:
 23086 000107E9 4883F900                	cmp rcx, 0
 23087 000107ED 7413                    	je .L_tc_recycle_frame_done_00c3
 23088 000107EF 488B32                  	mov rsi, qword [rdx]
 23089 000107F2 488933                  	mov qword [rbx], rsi
 23090 000107F5 48FFC9                  	dec rcx
 23091 000107F8 4883EB08                	sub rbx, 8 * 1
 23092 000107FC 4883EA08                	sub rdx, 8 * 1
 23093 00010800 EBE7                    	jmp .L_tc_recycle_frame_loop_00c3
 23094                                  .L_tc_recycle_frame_done_00c3:
 23095 00010802 488D6308                	lea rsp, [rbx + 8 * 1]
 23096 00010806 5D                      	pop rbp	; the proc will restore it!
 23097 00010807 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23098                                  
 23099                                  	.L_if_end_006b:
 23100 0001080A C9                      	leave
 23101 0001080B C22000                  	ret AND_KILL_FRAME(2)
 23102                                  .L_lambda_simple_end_008b:	; new closure is in rax
 23103                                  
 23104 0001080E 50                      	push rax
 23105 0001080F 488B4520                	mov rax, PARAM(0)	; param run
 23106                                  
 23107 00010813 8F00                    	pop qword[rax]
 23108 00010815 48B8-                   	mov rax, sob_void
 23108 00010817 [0000000000000000] 
 23109                                  
 23110 0001081F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23111 00010824 E860500000              	call malloc
 23112 00010829 50                      	push rax
 23113 0001082A BF08000000              	mov rdi, 8 * 1	; new rib
 23114 0001082F E855500000              	call malloc
 23115 00010834 50                      	push rax
 23116 00010835 BF10000000              	mov rdi, 8 * 2	; extended env
 23117 0001083A E84A500000              	call malloc
 23118 0001083F 488B7D10                	mov rdi, ENV
 23119 00010843 BE00000000              	mov rsi, 0
 23120 00010848 BA01000000              	mov rdx, 1
 23121                                  .L_lambda_simple_env_loop_008d:	; ext_env[i + 1] <-- env[i]
 23122 0001084D 4883FE01                	cmp rsi, 1
 23123 00010851 7410                    	je .L_lambda_simple_env_end_008d
 23124 00010853 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23125 00010857 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23126 0001085B 48FFC6                  	inc rsi
 23127 0001085E 48FFC2                  	inc rdx
 23128 00010861 EBEA                    	jmp .L_lambda_simple_env_loop_008d
 23129                                  .L_lambda_simple_env_end_008d:
 23130 00010863 5B                      	pop rbx
 23131 00010864 BE00000000              	mov rsi, 0
 23132                                  .L_lambda_simple_params_loop_008d:	; copy params
 23133 00010869 4883FE01                	cmp rsi, 1
 23134 0001086D 740E                    	je .L_lambda_simple_params_end_008d
 23135 0001086F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23136 00010874 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23137 00010878 48FFC6                  	inc rsi
 23138 0001087B EBEC                    	jmp .L_lambda_simple_params_loop_008d
 23139                                  .L_lambda_simple_params_end_008d:
 23140 0001087D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23141 00010880 4889C3                  	mov rbx, rax
 23142 00010883 58                      	pop rax
 23143 00010884 C60004                  	mov byte [rax], T_closure
 23144 00010887 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23145 0001088B 48C74009[98080100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008d
 23146 00010893 E97F000000              	jmp .L_lambda_simple_end_008d
 23147                                  .L_lambda_simple_code_008d:	; lambda-simple body
 23148 00010898 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23149 0001089E 740B                    	je .L_lambda_simple_arity_check_ok_008d
 23150 000108A0 FF742410                	push qword [rsp + 8 * 2]
 23151 000108A4 6A01                    	push 1
 23152 000108A6 E9974F0000              	jmp L_error_incorrect_arity_simple
 23153                                  .L_lambda_simple_arity_check_ok_008d:
 23154 000108AB C8000000                	enter 0, 0
 23155                                  	; preparing a tail-call
 23156 000108AF 48B8-                   	mov rax, L_constants + 2023
 23156 000108B1 [E707000000000000] 
 23157 000108B9 50                      	push rax
 23158 000108BA 488B4520                	mov rax, PARAM(0)	; param s
 23159 000108BE 50                      	push rax
 23160 000108BF 6A02                    	push 2	; arg count
 23161 000108C1 488B4510                	mov rax, ENV
 23162 000108C5 488B00                  	mov rax, qword [rax + 8 * 0]
 23163 000108C8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23164 000108CB 488B00                  	mov rax, qword [rax]
 23165 000108CE 803804                  	cmp byte [rax], T_closure
 23166 000108D1 0F85094F0000            	jne L_error_non_closure
 23167 000108D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23168                                  
 23169                                  	; recycling the current frame
 23170 000108DA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23171 000108DD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23172 000108E0 B906000000              	mov rcx, 2 + 4
 23173 000108E5 488B5D18                	mov rbx, COUNT
 23174 000108E9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23175 000108EE 488D55F8                	lea rdx, [rbp - 8 * 1]
 23176                                  .L_tc_recycle_frame_loop_00c4:
 23177 000108F2 4883F900                	cmp rcx, 0
 23178 000108F6 7413                    	je .L_tc_recycle_frame_done_00c4
 23179 000108F8 488B32                  	mov rsi, qword [rdx]
 23180 000108FB 488933                  	mov qword [rbx], rsi
 23181 000108FE 48FFC9                  	dec rcx
 23182 00010901 4883EB08                	sub rbx, 8 * 1
 23183 00010905 4883EA08                	sub rdx, 8 * 1
 23184 00010909 EBE7                    	jmp .L_tc_recycle_frame_loop_00c4
 23185                                  .L_tc_recycle_frame_done_00c4:
 23186 0001090B 488D6308                	lea rsp, [rbx + 8 * 1]
 23187 0001090F 5D                      	pop rbp	; the proc will restore it!
 23188 00010910 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23189 00010913 C9                      	leave
 23190 00010914 C21800                  	ret AND_KILL_FRAME(1)
 23191                                  .L_lambda_simple_end_008d:	; new closure is in rax
 23192 00010917 C9                      	leave
 23193 00010918 C21800                  	ret AND_KILL_FRAME(1)
 23194                                  .L_lambda_simple_end_008a:	; new closure is in rax
 23195 0001091B 803804                  	cmp byte [rax], T_closure
 23196 0001091E 0F85BC4E0000            	jne L_error_non_closure
 23197 00010924 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23198 00010927 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23199 0001092A 48890425[1F170000]      	mov qword [free_var_142], rax
 23200 00010932 48B8-                   	mov rax, sob_void
 23200 00010934 [0000000000000000] 
 23201                                  
 23202 0001093C 4889C7                  	mov rdi, rax
 23203 0001093F E857500000              	call print_sexpr_if_not_void
 23204                                  
 23205 00010944 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23206 00010949 E83B4F0000              	call malloc
 23207 0001094E 50                      	push rax
 23208 0001094F BF00000000              	mov rdi, 8 * 0	; new rib
 23209 00010954 E8304F0000              	call malloc
 23210 00010959 50                      	push rax
 23211 0001095A BF08000000              	mov rdi, 8 * 1	; extended env
 23212 0001095F E8254F0000              	call malloc
 23213 00010964 488B7D10                	mov rdi, ENV
 23214 00010968 BE00000000              	mov rsi, 0
 23215 0001096D BA01000000              	mov rdx, 1
 23216                                  .L_lambda_opt_env_loop_0017:	; ext_env[i + 1] <-- env[i]
 23217 00010972 4883FE00                	cmp rsi, 0
 23218 00010976 7410                    	je .L_lambda_opt_env_end_0017
 23219 00010978 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23220 0001097C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23221 00010980 48FFC6                  	inc rsi
 23222 00010983 48FFC2                  	inc rdx
 23223 00010986 EBEA                    	jmp .L_lambda_opt_env_loop_0017
 23224                                  .L_lambda_opt_env_end_0017:
 23225 00010988 5B                      	pop rbx
 23226 00010989 BE00000000              	mov rsi, 0
 23227                                  .L_lambda_opt_params_loop_0017:	; copy params
 23228 0001098E 4883FE00                	cmp rsi, 0
 23229 00010992 740E                    	je .L_lambda_opt_params_end_0017
 23230 00010994 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23231 00010999 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23232 0001099D 48FFC6                  	inc rsi
 23233 000109A0 EBEC                    	jmp .L_lambda_opt_params_loop_0017
 23234                                  .L_lambda_opt_params_end_0017:
 23235 000109A2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23236 000109A5 4889C3                  	mov rbx, rax
 23237 000109A8 58                      	pop rax
 23238 000109A9 C60004                  	mov byte [rax], T_closure
 23239 000109AC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23240 000109B0 48C74009[BD090100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0017
 23241 000109B8 E938010000              	jmp .L_lambda_opt_end_0017
 23242                                  .L_lambda_opt_code_0017:	; lambda-simple body
 23243 000109BD 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 23244 000109C3 740D                    	je .L_lambda_opt_arity_check_exact_0017 ;	 if equal, go to exact arity
 23245 000109C5 7F42                    	jg .L_lambda_opt_arity_check_more_0017 ;	 if greater than, go to arity more
 23246 000109C7 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 23247 000109CB 6A00                     	push 0
 23248 000109CD E9844E0000              	jmp L_error_incorrect_arity_opt
 23249                                  	.L_lambda_opt_arity_check_exact_0017:
 23250 000109D2 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 23251 000109D7 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 23252 000109DC 4883EC08                	sub rsp, 8
 23253 000109E0 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 23254                                  	.L_lambda_opt_exact_shifting_loop_0017:
 23255 000109E4 488B5108                	mov rdx, [rcx + 8]
 23256 000109E8 488911                  	mov [rcx], rdx
 23257 000109EB 4883C108                	add rcx, 8
 23258 000109EF 4839CB                  	cmp rbx, rcx
 23259 000109F2 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0017
 23260                                  	.L_lambda_opt_exact_shifting_loop_end_0017:
 23261 000109F4 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 23262 000109FB 4883C001                	add rax, 1 ; 	arg count += 1
 23263 000109FF 4889442410              	mov qword [rsp + 8 * 2], rax
 23264 00010A04 E987000000              	jmp .L_lambda_opt_stack_adjusted_0017
 23265                                  	.L_lambda_opt_arity_check_more_0017:
 23266 00010A09 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 23266 00010A0B [0100000000000000] 
 23267 00010A13 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 23268 00010A19 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0017
 23269                                  	.L_lambda_opt_stack_shrink_loop_0017:
 23270 00010A1B BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 23271 00010A20 E8644E0000              	call malloc ;	 allocated memory for the optional scheme list
 23272 00010A25 C60021                  	mov byte[rax], T_pair ;	 set type pair
 23273 00010A28 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 23274 00010A2C 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 23275 00010A2F 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 23276 00010A34 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 23277 00010A39 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 23278 00010A3D 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 23279                                  	.L_lambda_opt_more_shifting_loop_0017:
 23280 00010A42 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 23281 00010A45 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 23282 00010A49 4883EB08                	sub rbx, 8 
 23283 00010A4D 4839DC                  	cmp rsp, rbx
 23284 00010A50 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0017
 23285                                  	.L_lambda_opt_more_shifting_loop_end_0017:
 23286 00010A52 4883C408                	add rsp, 8 ;	 update rsp
 23287 00010A56 488B5C2410              	mov rbx, [rsp + 8 * 2]
 23288 00010A5B 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 23289 00010A5F 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 23290 00010A64 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23291 00010A6A 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0017
 23292                                  	.L_lambda_opt_stack_shrink_loop_exit_0017:
 23293 00010A6C 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 23294 00010A71 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 23295 00010A76 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 23296 00010A7B E8094E0000              	call malloc ;	 allocated memory for the optional scheme list
 23297 00010A80 C60021                  	mov byte[rax], T_pair ;	 set type pair
 23298 00010A83 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 23299 00010A87 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 23300 00010A8B 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 23301                                  	.L_lambda_opt_stack_adjusted_0017:
 23302 00010A90 C8000000                	enter 0, 0
 23303                                  	; preparing a tail-call
 23304 00010A94 488B4520                	mov rax, PARAM(0)	; param s
 23305 00010A98 50                      	push rax
 23306 00010A99 6A01                    	push 1	; arg count
 23307 00010A9B 488B0425[FC170000]      	mov rax, qword [free_var_155]	; free var list->vector
 23308 00010AA3 803805                  	cmp byte [rax], T_undefined
 23309 00010AA6 0F84B04C0000            	je L_error_fvar_undefined
 23310 00010AAC 803804                  	cmp byte [rax], T_closure
 23311 00010AAF 0F852B4D0000            	jne L_error_non_closure
 23312 00010AB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23313                                  
 23314                                  	; recycling the current frame
 23315 00010AB8 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23316 00010ABB FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23317 00010ABE B905000000              	mov rcx, 1 + 4
 23318 00010AC3 488B5D18                	mov rbx, COUNT
 23319 00010AC7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23320 00010ACC 488D55F8                	lea rdx, [rbp - 8 * 1]
 23321                                  .L_tc_recycle_frame_loop_00c5:
 23322 00010AD0 4883F900                	cmp rcx, 0
 23323 00010AD4 7413                    	je .L_tc_recycle_frame_done_00c5
 23324 00010AD6 488B32                  	mov rsi, qword [rdx]
 23325 00010AD9 488933                  	mov qword [rbx], rsi
 23326 00010ADC 48FFC9                  	dec rcx
 23327 00010ADF 4883EB08                	sub rbx, 8 * 1
 23328 00010AE3 4883EA08                	sub rdx, 8 * 1
 23329 00010AE7 EBE7                    	jmp .L_tc_recycle_frame_loop_00c5
 23330                                  .L_tc_recycle_frame_done_00c5:
 23331 00010AE9 488D6308                	lea rsp, [rbx + 8 * 1]
 23332 00010AED 5D                      	pop rbp	; the proc will restore it!
 23333 00010AEE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23334 00010AF1 C9                      	leave
 23335 00010AF2 C21800                  	ret AND_KILL_FRAME(1)
 23336                                  .L_lambda_opt_end_0017:	; new closure is in rax
 23337 00010AF5 48890425[0D180000]      	mov qword [free_var_156], rax
 23338 00010AFD 48B8-                   	mov rax, sob_void
 23338 00010AFF [0000000000000000] 
 23339                                  
 23340 00010B07 4889C7                  	mov rdi, rax
 23341 00010B0A E88C4E0000              	call print_sexpr_if_not_void
 23342                                  
 23343 00010B0F 48B8-                   	mov rax, L_constants + 1881
 23343 00010B11 [5907000000000000] 
 23344 00010B19 50                      	push rax
 23345 00010B1A 6A01                    	push 1	; arg count
 23346 00010B1C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23347 00010B21 E8634D0000              	call malloc
 23348 00010B26 50                      	push rax
 23349 00010B27 BF00000000              	mov rdi, 8 * 0	; new rib
 23350 00010B2C E8584D0000              	call malloc
 23351 00010B31 50                      	push rax
 23352 00010B32 BF08000000              	mov rdi, 8 * 1	; extended env
 23353 00010B37 E84D4D0000              	call malloc
 23354 00010B3C 488B7D10                	mov rdi, ENV
 23355 00010B40 BE00000000              	mov rsi, 0
 23356 00010B45 BA01000000              	mov rdx, 1
 23357                                  .L_lambda_simple_env_loop_008e:	; ext_env[i + 1] <-- env[i]
 23358 00010B4A 4883FE00                	cmp rsi, 0
 23359 00010B4E 7410                    	je .L_lambda_simple_env_end_008e
 23360 00010B50 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23361 00010B54 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23362 00010B58 48FFC6                  	inc rsi
 23363 00010B5B 48FFC2                  	inc rdx
 23364 00010B5E EBEA                    	jmp .L_lambda_simple_env_loop_008e
 23365                                  .L_lambda_simple_env_end_008e:
 23366 00010B60 5B                      	pop rbx
 23367 00010B61 BE00000000              	mov rsi, 0
 23368                                  .L_lambda_simple_params_loop_008e:	; copy params
 23369 00010B66 4883FE00                	cmp rsi, 0
 23370 00010B6A 740E                    	je .L_lambda_simple_params_end_008e
 23371 00010B6C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23372 00010B71 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23373 00010B75 48FFC6                  	inc rsi
 23374 00010B78 EBEC                    	jmp .L_lambda_simple_params_loop_008e
 23375                                  .L_lambda_simple_params_end_008e:
 23376 00010B7A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23377 00010B7D 4889C3                  	mov rbx, rax
 23378 00010B80 58                      	pop rax
 23379 00010B81 C60004                  	mov byte [rax], T_closure
 23380 00010B84 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23381 00010B88 48C74009[950B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008e
 23382 00010B90 E924030000              	jmp .L_lambda_simple_end_008e
 23383                                  .L_lambda_simple_code_008e:	; lambda-simple body
 23384 00010B95 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23385 00010B9B 740B                    	je .L_lambda_simple_arity_check_ok_008e
 23386 00010B9D FF742410                	push qword [rsp + 8 * 2]
 23387 00010BA1 6A01                    	push 1
 23388 00010BA3 E99A4C0000              	jmp L_error_incorrect_arity_simple
 23389                                  .L_lambda_simple_arity_check_ok_008e:
 23390 00010BA8 C8000000                	enter 0, 0
 23391                                  
 23392 00010BAC BF08000000              	mov rdi, 8
 23393 00010BB1 E8D34C0000              	call malloc
 23394 00010BB6 488B5D20                	mov rbx, PARAM(0)	; param run
 23395 00010BBA 488918                  	mov [rax], rbx	; box run
 23396 00010BBD 48894520                	mov PARAM(0), rax	;replace param run with box
 23397 00010BC1 48B8-                   	mov rax, sob_void
 23397 00010BC3 [0000000000000000] 
 23398                                  
 23399 00010BCB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23400 00010BD0 E8B44C0000              	call malloc
 23401 00010BD5 50                      	push rax
 23402 00010BD6 BF08000000              	mov rdi, 8 * 1	; new rib
 23403 00010BDB E8A94C0000              	call malloc
 23404 00010BE0 50                      	push rax
 23405 00010BE1 BF10000000              	mov rdi, 8 * 2	; extended env
 23406 00010BE6 E89E4C0000              	call malloc
 23407 00010BEB 488B7D10                	mov rdi, ENV
 23408 00010BEF BE00000000              	mov rsi, 0
 23409 00010BF4 BA01000000              	mov rdx, 1
 23410                                  .L_lambda_simple_env_loop_008f:	; ext_env[i + 1] <-- env[i]
 23411 00010BF9 4883FE01                	cmp rsi, 1
 23412 00010BFD 7410                    	je .L_lambda_simple_env_end_008f
 23413 00010BFF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23414 00010C03 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23415 00010C07 48FFC6                  	inc rsi
 23416 00010C0A 48FFC2                  	inc rdx
 23417 00010C0D EBEA                    	jmp .L_lambda_simple_env_loop_008f
 23418                                  .L_lambda_simple_env_end_008f:
 23419 00010C0F 5B                      	pop rbx
 23420 00010C10 BE00000000              	mov rsi, 0
 23421                                  .L_lambda_simple_params_loop_008f:	; copy params
 23422 00010C15 4883FE01                	cmp rsi, 1
 23423 00010C19 740E                    	je .L_lambda_simple_params_end_008f
 23424 00010C1B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23425 00010C20 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23426 00010C24 48FFC6                  	inc rsi
 23427 00010C27 EBEC                    	jmp .L_lambda_simple_params_loop_008f
 23428                                  .L_lambda_simple_params_end_008f:
 23429 00010C29 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23430 00010C2C 4889C3                  	mov rbx, rax
 23431 00010C2F 58                      	pop rax
 23432 00010C30 C60004                  	mov byte [rax], T_closure
 23433 00010C33 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23434 00010C37 48C74009[440C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008f
 23435 00010C3F E940010000              	jmp .L_lambda_simple_end_008f
 23436                                  .L_lambda_simple_code_008f:	; lambda-simple body
 23437 00010C44 48837C241003            	cmp qword [rsp + 8 * 2], 3
 23438 00010C4A 740B                    	je .L_lambda_simple_arity_check_ok_008f
 23439 00010C4C FF742410                	push qword [rsp + 8 * 2]
 23440 00010C50 6A03                    	push 3
 23441 00010C52 E9EB4B0000              	jmp L_error_incorrect_arity_simple
 23442                                  .L_lambda_simple_arity_check_ok_008f:
 23443 00010C57 C8000000                	enter 0, 0
 23444 00010C5B 488B4530                	mov rax, PARAM(2)	; param n
 23445 00010C5F 50                      	push rax
 23446 00010C60 488B4528                	mov rax, PARAM(1)	; param i
 23447 00010C64 50                      	push rax
 23448 00010C65 6A02                    	push 2	; arg count
 23449 00010C67 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 23450 00010C6F 803805                  	cmp byte [rax], T_undefined
 23451 00010C72 0F84E44A0000            	je L_error_fvar_undefined
 23452 00010C78 803804                  	cmp byte [rax], T_closure
 23453 00010C7B 0F855F4B0000            	jne L_error_non_closure
 23454 00010C81 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23455 00010C84 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23456                                  
 23457 00010C87 483D[02000000]          	cmp rax, sob_boolean_false
 23458 00010C8D 0F84E3000000            	je .L_if_else_006c
 23459                                  	; preparing a tail-call
 23460 00010C93 488B4530                	mov rax, PARAM(2)	; param n
 23461 00010C97 50                      	push rax
 23462 00010C98 48B8-                   	mov rax, L_constants + 2158
 23462 00010C9A [6E08000000000000] 
 23463 00010CA2 50                      	push rax
 23464 00010CA3 488B4528                	mov rax, PARAM(1)	; param i
 23465 00010CA7 50                      	push rax
 23466 00010CA8 6A02                    	push 2	; arg count
 23467 00010CAA 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 23468 00010CB2 803805                  	cmp byte [rax], T_undefined
 23469 00010CB5 0F84A14A0000            	je L_error_fvar_undefined
 23470 00010CBB 803804                  	cmp byte [rax], T_closure
 23471 00010CBE 0F851C4B0000            	jne L_error_non_closure
 23472 00010CC4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23473 00010CC7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23474 00010CCA 50                      	push rax
 23475 00010CCB 488B4520                	mov rax, PARAM(0)	; param str
 23476 00010CCF 50                      	push rax
 23477 00010CD0 6A03                    	push 3	; arg count
 23478 00010CD2 488B4510                	mov rax, ENV
 23479 00010CD6 488B00                  	mov rax, qword [rax + 8 * 0]
 23480 00010CD9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23481 00010CDC 488B00                  	mov rax, qword [rax]
 23482 00010CDF 803804                  	cmp byte [rax], T_closure
 23483 00010CE2 0F85F84A0000            	jne L_error_non_closure
 23484 00010CE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23485 00010CEB FF5009                  	call SOB_CLOSURE_CODE(rax)
 23486 00010CEE 50                      	push rax
 23487 00010CEF 488B4528                	mov rax, PARAM(1)	; param i
 23488 00010CF3 50                      	push rax
 23489 00010CF4 488B4520                	mov rax, PARAM(0)	; param str
 23490 00010CF8 50                      	push rax
 23491 00010CF9 6A02                    	push 2	; arg count
 23492 00010CFB 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 23493 00010D03 803805                  	cmp byte [rax], T_undefined
 23494 00010D06 0F84504A0000            	je L_error_fvar_undefined
 23495 00010D0C 803804                  	cmp byte [rax], T_closure
 23496 00010D0F 0F85CB4A0000            	jne L_error_non_closure
 23497 00010D15 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23498 00010D18 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23499 00010D1B 50                      	push rax
 23500 00010D1C 6A02                    	push 2	; arg count
 23501 00010D1E 488B0425[8E0E0000]      	mov rax, qword [free_var_13]	; free var cons
 23502 00010D26 803805                  	cmp byte [rax], T_undefined
 23503 00010D29 0F842D4A0000            	je L_error_fvar_undefined
 23504 00010D2F 803804                  	cmp byte [rax], T_closure
 23505 00010D32 0F85A84A0000            	jne L_error_non_closure
 23506 00010D38 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23507                                  
 23508                                  	; recycling the current frame
 23509 00010D3B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23510 00010D3E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23511 00010D41 B906000000              	mov rcx, 2 + 4
 23512 00010D46 488B5D18                	mov rbx, COUNT
 23513 00010D4A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23514 00010D4F 488D55F8                	lea rdx, [rbp - 8 * 1]
 23515                                  .L_tc_recycle_frame_loop_00c6:
 23516 00010D53 4883F900                	cmp rcx, 0
 23517 00010D57 7413                    	je .L_tc_recycle_frame_done_00c6
 23518 00010D59 488B32                  	mov rsi, qword [rdx]
 23519 00010D5C 488933                  	mov qword [rbx], rsi
 23520 00010D5F 48FFC9                  	dec rcx
 23521 00010D62 4883EB08                	sub rbx, 8 * 1
 23522 00010D66 4883EA08                	sub rdx, 8 * 1
 23523 00010D6A EBE7                    	jmp .L_tc_recycle_frame_loop_00c6
 23524                                  .L_tc_recycle_frame_done_00c6:
 23525 00010D6C 488D6308                	lea rsp, [rbx + 8 * 1]
 23526 00010D70 5D                      	pop rbp	; the proc will restore it!
 23527 00010D71 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23528                                  
 23529 00010D74 EB0A                    	jmp .L_if_end_006c
 23530                                  
 23531                                  	.L_if_else_006c:
 23532 00010D76 48B8-                   	mov rax, L_constants + 1
 23532 00010D78 [0100000000000000] 
 23533                                  
 23534                                  	.L_if_end_006c:
 23535 00010D80 C9                      	leave
 23536 00010D81 C22800                  	ret AND_KILL_FRAME(3)
 23537                                  .L_lambda_simple_end_008f:	; new closure is in rax
 23538                                  
 23539 00010D84 50                      	push rax
 23540 00010D85 488B4520                	mov rax, PARAM(0)	; param run
 23541                                  
 23542 00010D89 8F00                    	pop qword[rax]
 23543 00010D8B 48B8-                   	mov rax, sob_void
 23543 00010D8D [0000000000000000] 
 23544                                  
 23545 00010D95 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23546 00010D9A E8EA4A0000              	call malloc
 23547 00010D9F 50                      	push rax
 23548 00010DA0 BF08000000              	mov rdi, 8 * 1	; new rib
 23549 00010DA5 E8DF4A0000              	call malloc
 23550 00010DAA 50                      	push rax
 23551 00010DAB BF10000000              	mov rdi, 8 * 2	; extended env
 23552 00010DB0 E8D44A0000              	call malloc
 23553 00010DB5 488B7D10                	mov rdi, ENV
 23554 00010DB9 BE00000000              	mov rsi, 0
 23555 00010DBE BA01000000              	mov rdx, 1
 23556                                  .L_lambda_simple_env_loop_0090:	; ext_env[i + 1] <-- env[i]
 23557 00010DC3 4883FE01                	cmp rsi, 1
 23558 00010DC7 7410                    	je .L_lambda_simple_env_end_0090
 23559 00010DC9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23560 00010DCD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23561 00010DD1 48FFC6                  	inc rsi
 23562 00010DD4 48FFC2                  	inc rdx
 23563 00010DD7 EBEA                    	jmp .L_lambda_simple_env_loop_0090
 23564                                  .L_lambda_simple_env_end_0090:
 23565 00010DD9 5B                      	pop rbx
 23566 00010DDA BE00000000              	mov rsi, 0
 23567                                  .L_lambda_simple_params_loop_0090:	; copy params
 23568 00010DDF 4883FE01                	cmp rsi, 1
 23569 00010DE3 740E                    	je .L_lambda_simple_params_end_0090
 23570 00010DE5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23571 00010DEA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23572 00010DEE 48FFC6                  	inc rsi
 23573 00010DF1 EBEC                    	jmp .L_lambda_simple_params_loop_0090
 23574                                  .L_lambda_simple_params_end_0090:
 23575 00010DF3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23576 00010DF6 4889C3                  	mov rbx, rax
 23577 00010DF9 58                      	pop rax
 23578 00010DFA C60004                  	mov byte [rax], T_closure
 23579 00010DFD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23580 00010E01 48C74009[0E0E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0090
 23581 00010E09 E9A7000000              	jmp .L_lambda_simple_end_0090
 23582                                  .L_lambda_simple_code_0090:	; lambda-simple body
 23583 00010E0E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23584 00010E14 740B                    	je .L_lambda_simple_arity_check_ok_0090
 23585 00010E16 FF742410                	push qword [rsp + 8 * 2]
 23586 00010E1A 6A01                    	push 1
 23587 00010E1C E9214A0000              	jmp L_error_incorrect_arity_simple
 23588                                  .L_lambda_simple_arity_check_ok_0090:
 23589 00010E21 C8000000                	enter 0, 0
 23590                                  	; preparing a tail-call
 23591 00010E25 488B4520                	mov rax, PARAM(0)	; param str
 23592 00010E29 50                      	push rax
 23593 00010E2A 6A01                    	push 1	; arg count
 23594 00010E2C 488B0425[E30E0000]      	mov rax, qword [free_var_18]	; free var string-length
 23595 00010E34 803805                  	cmp byte [rax], T_undefined
 23596 00010E37 0F841F490000            	je L_error_fvar_undefined
 23597 00010E3D 803804                  	cmp byte [rax], T_closure
 23598 00010E40 0F859A490000            	jne L_error_non_closure
 23599 00010E46 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23600 00010E49 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23601 00010E4C 50                      	push rax
 23602 00010E4D 48B8-                   	mov rax, L_constants + 2023
 23602 00010E4F [E707000000000000] 
 23603 00010E57 50                      	push rax
 23604 00010E58 488B4520                	mov rax, PARAM(0)	; param str
 23605 00010E5C 50                      	push rax
 23606 00010E5D 6A03                    	push 3	; arg count
 23607 00010E5F 488B4510                	mov rax, ENV
 23608 00010E63 488B00                  	mov rax, qword [rax + 8 * 0]
 23609 00010E66 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23610 00010E69 488B00                  	mov rax, qword [rax]
 23611 00010E6C 803804                  	cmp byte [rax], T_closure
 23612 00010E6F 0F856B490000            	jne L_error_non_closure
 23613 00010E75 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23614                                  
 23615                                  	; recycling the current frame
 23616 00010E78 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23617 00010E7B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23618 00010E7E B907000000              	mov rcx, 3 + 4
 23619 00010E83 488B5D18                	mov rbx, COUNT
 23620 00010E87 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23621 00010E8C 488D55F8                	lea rdx, [rbp - 8 * 1]
 23622                                  .L_tc_recycle_frame_loop_00c7:
 23623 00010E90 4883F900                	cmp rcx, 0
 23624 00010E94 7413                    	je .L_tc_recycle_frame_done_00c7
 23625 00010E96 488B32                  	mov rsi, qword [rdx]
 23626 00010E99 488933                  	mov qword [rbx], rsi
 23627 00010E9C 48FFC9                  	dec rcx
 23628 00010E9F 4883EB08                	sub rbx, 8 * 1
 23629 00010EA3 4883EA08                	sub rdx, 8 * 1
 23630 00010EA7 EBE7                    	jmp .L_tc_recycle_frame_loop_00c7
 23631                                  .L_tc_recycle_frame_done_00c7:
 23632 00010EA9 488D6308                	lea rsp, [rbx + 8 * 1]
 23633 00010EAD 5D                      	pop rbp	; the proc will restore it!
 23634 00010EAE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23635 00010EB1 C9                      	leave
 23636 00010EB2 C21800                  	ret AND_KILL_FRAME(1)
 23637                                  .L_lambda_simple_end_0090:	; new closure is in rax
 23638 00010EB5 C9                      	leave
 23639 00010EB6 C21800                  	ret AND_KILL_FRAME(1)
 23640                                  .L_lambda_simple_end_008e:	; new closure is in rax
 23641 00010EB9 803804                  	cmp byte [rax], T_closure
 23642 00010EBC 0F851E490000            	jne L_error_non_closure
 23643 00010EC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23644 00010EC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23645 00010EC8 48890425[30170000]      	mov qword [free_var_143], rax
 23646 00010ED0 48B8-                   	mov rax, sob_void
 23646 00010ED2 [0000000000000000] 
 23647                                  
 23648 00010EDA 4889C7                  	mov rdi, rax
 23649 00010EDD E8B94A0000              	call print_sexpr_if_not_void
 23650                                  
 23651 00010EE2 48B8-                   	mov rax, L_constants + 1881
 23651 00010EE4 [5907000000000000] 
 23652 00010EEC 50                      	push rax
 23653 00010EED 6A01                    	push 1	; arg count
 23654 00010EEF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23655 00010EF4 E890490000              	call malloc
 23656 00010EF9 50                      	push rax
 23657 00010EFA BF00000000              	mov rdi, 8 * 0	; new rib
 23658 00010EFF E885490000              	call malloc
 23659 00010F04 50                      	push rax
 23660 00010F05 BF08000000              	mov rdi, 8 * 1	; extended env
 23661 00010F0A E87A490000              	call malloc
 23662 00010F0F 488B7D10                	mov rdi, ENV
 23663 00010F13 BE00000000              	mov rsi, 0
 23664 00010F18 BA01000000              	mov rdx, 1
 23665                                  .L_lambda_simple_env_loop_0091:	; ext_env[i + 1] <-- env[i]
 23666 00010F1D 4883FE00                	cmp rsi, 0
 23667 00010F21 7410                    	je .L_lambda_simple_env_end_0091
 23668 00010F23 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23669 00010F27 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23670 00010F2B 48FFC6                  	inc rsi
 23671 00010F2E 48FFC2                  	inc rdx
 23672 00010F31 EBEA                    	jmp .L_lambda_simple_env_loop_0091
 23673                                  .L_lambda_simple_env_end_0091:
 23674 00010F33 5B                      	pop rbx
 23675 00010F34 BE00000000              	mov rsi, 0
 23676                                  .L_lambda_simple_params_loop_0091:	; copy params
 23677 00010F39 4883FE00                	cmp rsi, 0
 23678 00010F3D 740E                    	je .L_lambda_simple_params_end_0091
 23679 00010F3F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23680 00010F44 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23681 00010F48 48FFC6                  	inc rsi
 23682 00010F4B EBEC                    	jmp .L_lambda_simple_params_loop_0091
 23683                                  .L_lambda_simple_params_end_0091:
 23684 00010F4D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23685 00010F50 4889C3                  	mov rbx, rax
 23686 00010F53 58                      	pop rax
 23687 00010F54 C60004                  	mov byte [rax], T_closure
 23688 00010F57 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23689 00010F5B 48C74009[680F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0091
 23690 00010F63 E924030000              	jmp .L_lambda_simple_end_0091
 23691                                  .L_lambda_simple_code_0091:	; lambda-simple body
 23692 00010F68 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23693 00010F6E 740B                    	je .L_lambda_simple_arity_check_ok_0091
 23694 00010F70 FF742410                	push qword [rsp + 8 * 2]
 23695 00010F74 6A01                    	push 1
 23696 00010F76 E9C7480000              	jmp L_error_incorrect_arity_simple
 23697                                  .L_lambda_simple_arity_check_ok_0091:
 23698 00010F7B C8000000                	enter 0, 0
 23699                                  
 23700 00010F7F BF08000000              	mov rdi, 8
 23701 00010F84 E800490000              	call malloc
 23702 00010F89 488B5D20                	mov rbx, PARAM(0)	; param run
 23703 00010F8D 488918                  	mov [rax], rbx	; box run
 23704 00010F90 48894520                	mov PARAM(0), rax	;replace param run with box
 23705 00010F94 48B8-                   	mov rax, sob_void
 23705 00010F96 [0000000000000000] 
 23706                                  
 23707 00010F9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23708 00010FA3 E8E1480000              	call malloc
 23709 00010FA8 50                      	push rax
 23710 00010FA9 BF08000000              	mov rdi, 8 * 1	; new rib
 23711 00010FAE E8D6480000              	call malloc
 23712 00010FB3 50                      	push rax
 23713 00010FB4 BF10000000              	mov rdi, 8 * 2	; extended env
 23714 00010FB9 E8CB480000              	call malloc
 23715 00010FBE 488B7D10                	mov rdi, ENV
 23716 00010FC2 BE00000000              	mov rsi, 0
 23717 00010FC7 BA01000000              	mov rdx, 1
 23718                                  .L_lambda_simple_env_loop_0092:	; ext_env[i + 1] <-- env[i]
 23719 00010FCC 4883FE01                	cmp rsi, 1
 23720 00010FD0 7410                    	je .L_lambda_simple_env_end_0092
 23721 00010FD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23722 00010FD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23723 00010FDA 48FFC6                  	inc rsi
 23724 00010FDD 48FFC2                  	inc rdx
 23725 00010FE0 EBEA                    	jmp .L_lambda_simple_env_loop_0092
 23726                                  .L_lambda_simple_env_end_0092:
 23727 00010FE2 5B                      	pop rbx
 23728 00010FE3 BE00000000              	mov rsi, 0
 23729                                  .L_lambda_simple_params_loop_0092:	; copy params
 23730 00010FE8 4883FE01                	cmp rsi, 1
 23731 00010FEC 740E                    	je .L_lambda_simple_params_end_0092
 23732 00010FEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23733 00010FF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23734 00010FF7 48FFC6                  	inc rsi
 23735 00010FFA EBEC                    	jmp .L_lambda_simple_params_loop_0092
 23736                                  .L_lambda_simple_params_end_0092:
 23737 00010FFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23738 00010FFF 4889C3                  	mov rbx, rax
 23739 00011002 58                      	pop rax
 23740 00011003 C60004                  	mov byte [rax], T_closure
 23741 00011006 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23742 0001100A 48C74009[17100100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0092
 23743 00011012 E940010000              	jmp .L_lambda_simple_end_0092
 23744                                  .L_lambda_simple_code_0092:	; lambda-simple body
 23745 00011017 48837C241003            	cmp qword [rsp + 8 * 2], 3
 23746 0001101D 740B                    	je .L_lambda_simple_arity_check_ok_0092
 23747 0001101F FF742410                	push qword [rsp + 8 * 2]
 23748 00011023 6A03                    	push 3
 23749 00011025 E918480000              	jmp L_error_incorrect_arity_simple
 23750                                  .L_lambda_simple_arity_check_ok_0092:
 23751 0001102A C8000000                	enter 0, 0
 23752 0001102E 488B4530                	mov rax, PARAM(2)	; param n
 23753 00011032 50                      	push rax
 23754 00011033 488B4528                	mov rax, PARAM(1)	; param i
 23755 00011037 50                      	push rax
 23756 00011038 6A02                    	push 2	; arg count
 23757 0001103A 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 23758 00011042 803805                  	cmp byte [rax], T_undefined
 23759 00011045 0F8411470000            	je L_error_fvar_undefined
 23760 0001104B 803804                  	cmp byte [rax], T_closure
 23761 0001104E 0F858C470000            	jne L_error_non_closure
 23762 00011054 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23763 00011057 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23764                                  
 23765 0001105A 483D[02000000]          	cmp rax, sob_boolean_false
 23766 00011060 0F84E3000000            	je .L_if_else_006d
 23767                                  	; preparing a tail-call
 23768 00011066 488B4530                	mov rax, PARAM(2)	; param n
 23769 0001106A 50                      	push rax
 23770 0001106B 48B8-                   	mov rax, L_constants + 2158
 23770 0001106D [6E08000000000000] 
 23771 00011075 50                      	push rax
 23772 00011076 488B4528                	mov rax, PARAM(1)	; param i
 23773 0001107A 50                      	push rax
 23774 0001107B 6A02                    	push 2	; arg count
 23775 0001107D 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 23776 00011085 803805                  	cmp byte [rax], T_undefined
 23777 00011088 0F84CE460000            	je L_error_fvar_undefined
 23778 0001108E 803804                  	cmp byte [rax], T_closure
 23779 00011091 0F8549470000            	jne L_error_non_closure
 23780 00011097 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23781 0001109A FF5009                  	call SOB_CLOSURE_CODE(rax)
 23782 0001109D 50                      	push rax
 23783 0001109E 488B4520                	mov rax, PARAM(0)	; param v
 23784 000110A2 50                      	push rax
 23785 000110A3 6A03                    	push 3	; arg count
 23786 000110A5 488B4510                	mov rax, ENV
 23787 000110A9 488B00                  	mov rax, qword [rax + 8 * 0]
 23788 000110AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23789 000110AF 488B00                  	mov rax, qword [rax]
 23790 000110B2 803804                  	cmp byte [rax], T_closure
 23791 000110B5 0F8525470000            	jne L_error_non_closure
 23792 000110BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 23793 000110BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 23794 000110C1 50                      	push rax
 23795 000110C2 488B4528                	mov rax, PARAM(1)	; param i
 23796 000110C6 50                      	push rax
 23797 000110C7 488B4520                	mov rax, PARAM(0)	; param v
 23798 000110CB 50                      	push rax
 23799 000110CC 6A02                    	push 2	; arg count
 23800 000110CE 488B0425[47110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 23801 000110D6 803805                  	cmp byte [rax], T_undefined
 23802 000110D9 0F847D460000            	je L_error_fvar_undefined
 23803 000110DF 803804                  	cmp byte [rax], T_closure
 23804 000110E2 0F85F8460000            	jne L_error_non_closure
 23805 000110E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23806 000110EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 23807 000110EE 50                      	push rax
 23808 000110EF 6A02                    	push 2	; arg count
 23809 000110F1 488B0425[8E0E0000]      	mov rax, qword [free_var_13]	; free var cons
 23810 000110F9 803805                  	cmp byte [rax], T_undefined
 23811 000110FC 0F845A460000            	je L_error_fvar_undefined
 23812 00011102 803804                  	cmp byte [rax], T_closure
 23813 00011105 0F85D5460000            	jne L_error_non_closure
 23814 0001110B FF7001                  	push SOB_CLOSURE_ENV(rax)
 23815                                  
 23816                                  	; recycling the current frame
 23817 0001110E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23818 00011111 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23819 00011114 B906000000              	mov rcx, 2 + 4
 23820 00011119 488B5D18                	mov rbx, COUNT
 23821 0001111D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23822 00011122 488D55F8                	lea rdx, [rbp - 8 * 1]
 23823                                  .L_tc_recycle_frame_loop_00c8:
 23824 00011126 4883F900                	cmp rcx, 0
 23825 0001112A 7413                    	je .L_tc_recycle_frame_done_00c8
 23826 0001112C 488B32                  	mov rsi, qword [rdx]
 23827 0001112F 488933                  	mov qword [rbx], rsi
 23828 00011132 48FFC9                  	dec rcx
 23829 00011135 4883EB08                	sub rbx, 8 * 1
 23830 00011139 4883EA08                	sub rdx, 8 * 1
 23831 0001113D EBE7                    	jmp .L_tc_recycle_frame_loop_00c8
 23832                                  .L_tc_recycle_frame_done_00c8:
 23833 0001113F 488D6308                	lea rsp, [rbx + 8 * 1]
 23834 00011143 5D                      	pop rbp	; the proc will restore it!
 23835 00011144 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23836                                  
 23837 00011147 EB0A                    	jmp .L_if_end_006d
 23838                                  
 23839                                  	.L_if_else_006d:
 23840 00011149 48B8-                   	mov rax, L_constants + 1
 23840 0001114B [0100000000000000] 
 23841                                  
 23842                                  	.L_if_end_006d:
 23843 00011153 C9                      	leave
 23844 00011154 C22800                  	ret AND_KILL_FRAME(3)
 23845                                  .L_lambda_simple_end_0092:	; new closure is in rax
 23846                                  
 23847 00011157 50                      	push rax
 23848 00011158 488B4520                	mov rax, PARAM(0)	; param run
 23849                                  
 23850 0001115C 8F00                    	pop qword[rax]
 23851 0001115E 48B8-                   	mov rax, sob_void
 23851 00011160 [0000000000000000] 
 23852                                  
 23853 00011168 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23854 0001116D E817470000              	call malloc
 23855 00011172 50                      	push rax
 23856 00011173 BF08000000              	mov rdi, 8 * 1	; new rib
 23857 00011178 E80C470000              	call malloc
 23858 0001117D 50                      	push rax
 23859 0001117E BF10000000              	mov rdi, 8 * 2	; extended env
 23860 00011183 E801470000              	call malloc
 23861 00011188 488B7D10                	mov rdi, ENV
 23862 0001118C BE00000000              	mov rsi, 0
 23863 00011191 BA01000000              	mov rdx, 1
 23864                                  .L_lambda_simple_env_loop_0093:	; ext_env[i + 1] <-- env[i]
 23865 00011196 4883FE01                	cmp rsi, 1
 23866 0001119A 7410                    	je .L_lambda_simple_env_end_0093
 23867 0001119C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23868 000111A0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23869 000111A4 48FFC6                  	inc rsi
 23870 000111A7 48FFC2                  	inc rdx
 23871 000111AA EBEA                    	jmp .L_lambda_simple_env_loop_0093
 23872                                  .L_lambda_simple_env_end_0093:
 23873 000111AC 5B                      	pop rbx
 23874 000111AD BE00000000              	mov rsi, 0
 23875                                  .L_lambda_simple_params_loop_0093:	; copy params
 23876 000111B2 4883FE01                	cmp rsi, 1
 23877 000111B6 740E                    	je .L_lambda_simple_params_end_0093
 23878 000111B8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23879 000111BD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23880 000111C1 48FFC6                  	inc rsi
 23881 000111C4 EBEC                    	jmp .L_lambda_simple_params_loop_0093
 23882                                  .L_lambda_simple_params_end_0093:
 23883 000111C6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23884 000111C9 4889C3                  	mov rbx, rax
 23885 000111CC 58                      	pop rax
 23886 000111CD C60004                  	mov byte [rax], T_closure
 23887 000111D0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23888 000111D4 48C74009[E1110100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0093
 23889 000111DC E9A7000000              	jmp .L_lambda_simple_end_0093
 23890                                  .L_lambda_simple_code_0093:	; lambda-simple body
 23891 000111E1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23892 000111E7 740B                    	je .L_lambda_simple_arity_check_ok_0093
 23893 000111E9 FF742410                	push qword [rsp + 8 * 2]
 23894 000111ED 6A01                    	push 1
 23895 000111EF E94E460000              	jmp L_error_incorrect_arity_simple
 23896                                  .L_lambda_simple_arity_check_ok_0093:
 23897 000111F4 C8000000                	enter 0, 0
 23898                                  	; preparing a tail-call
 23899 000111F8 488B4520                	mov rax, PARAM(0)	; param v
 23900 000111FC 50                      	push rax
 23901 000111FD 6A01                    	push 1	; arg count
 23902 000111FF 488B0425[F40E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 23903 00011207 803805                  	cmp byte [rax], T_undefined
 23904 0001120A 0F844C450000            	je L_error_fvar_undefined
 23905 00011210 803804                  	cmp byte [rax], T_closure
 23906 00011213 0F85C7450000            	jne L_error_non_closure
 23907 00011219 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23908 0001121C FF5009                  	call SOB_CLOSURE_CODE(rax)
 23909 0001121F 50                      	push rax
 23910 00011220 48B8-                   	mov rax, L_constants + 2023
 23910 00011222 [E707000000000000] 
 23911 0001122A 50                      	push rax
 23912 0001122B 488B4520                	mov rax, PARAM(0)	; param v
 23913 0001122F 50                      	push rax
 23914 00011230 6A03                    	push 3	; arg count
 23915 00011232 488B4510                	mov rax, ENV
 23916 00011236 488B00                  	mov rax, qword [rax + 8 * 0]
 23917 00011239 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23918 0001123C 488B00                  	mov rax, qword [rax]
 23919 0001123F 803804                  	cmp byte [rax], T_closure
 23920 00011242 0F8598450000            	jne L_error_non_closure
 23921 00011248 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23922                                  
 23923                                  	; recycling the current frame
 23924 0001124B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23925 0001124E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23926 00011251 B907000000              	mov rcx, 3 + 4
 23927 00011256 488B5D18                	mov rbx, COUNT
 23928 0001125A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23929 0001125F 488D55F8                	lea rdx, [rbp - 8 * 1]
 23930                                  .L_tc_recycle_frame_loop_00c9:
 23931 00011263 4883F900                	cmp rcx, 0
 23932 00011267 7413                    	je .L_tc_recycle_frame_done_00c9
 23933 00011269 488B32                  	mov rsi, qword [rdx]
 23934 0001126C 488933                  	mov qword [rbx], rsi
 23935 0001126F 48FFC9                  	dec rcx
 23936 00011272 4883EB08                	sub rbx, 8 * 1
 23937 00011276 4883EA08                	sub rdx, 8 * 1
 23938 0001127A EBE7                    	jmp .L_tc_recycle_frame_loop_00c9
 23939                                  .L_tc_recycle_frame_done_00c9:
 23940 0001127C 488D6308                	lea rsp, [rbx + 8 * 1]
 23941 00011280 5D                      	pop rbp	; the proc will restore it!
 23942 00011281 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23943 00011284 C9                      	leave
 23944 00011285 C21800                  	ret AND_KILL_FRAME(1)
 23945                                  .L_lambda_simple_end_0093:	; new closure is in rax
 23946 00011288 C9                      	leave
 23947 00011289 C21800                  	ret AND_KILL_FRAME(1)
 23948                                  .L_lambda_simple_end_0091:	; new closure is in rax
 23949 0001128C 803804                  	cmp byte [rax], T_closure
 23950 0001128F 0F854B450000            	jne L_error_non_closure
 23951 00011295 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23952 00011298 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23953 0001129B 48890425[1E180000]      	mov qword [free_var_157], rax
 23954 000112A3 48B8-                   	mov rax, sob_void
 23954 000112A5 [0000000000000000] 
 23955                                  
 23956 000112AD 4889C7                  	mov rdi, rax
 23957 000112B0 E8E6460000              	call print_sexpr_if_not_void
 23958                                  
 23959 000112B5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23960 000112BA E8CA450000              	call malloc
 23961 000112BF 50                      	push rax
 23962 000112C0 BF00000000              	mov rdi, 8 * 0	; new rib
 23963 000112C5 E8BF450000              	call malloc
 23964 000112CA 50                      	push rax
 23965 000112CB BF08000000              	mov rdi, 8 * 1	; extended env
 23966 000112D0 E8B4450000              	call malloc
 23967 000112D5 488B7D10                	mov rdi, ENV
 23968 000112D9 BE00000000              	mov rsi, 0
 23969 000112DE BA01000000              	mov rdx, 1
 23970                                  .L_lambda_simple_env_loop_0094:	; ext_env[i + 1] <-- env[i]
 23971 000112E3 4883FE00                	cmp rsi, 0
 23972 000112E7 7410                    	je .L_lambda_simple_env_end_0094
 23973 000112E9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23974 000112ED 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23975 000112F1 48FFC6                  	inc rsi
 23976 000112F4 48FFC2                  	inc rdx
 23977 000112F7 EBEA                    	jmp .L_lambda_simple_env_loop_0094
 23978                                  .L_lambda_simple_env_end_0094:
 23979 000112F9 5B                      	pop rbx
 23980 000112FA BE00000000              	mov rsi, 0
 23981                                  .L_lambda_simple_params_loop_0094:	; copy params
 23982 000112FF 4883FE00                	cmp rsi, 0
 23983 00011303 740E                    	je .L_lambda_simple_params_end_0094
 23984 00011305 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23985 0001130A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23986 0001130E 48FFC6                  	inc rsi
 23987 00011311 EBEC                    	jmp .L_lambda_simple_params_loop_0094
 23988                                  .L_lambda_simple_params_end_0094:
 23989 00011313 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23990 00011316 4889C3                  	mov rbx, rax
 23991 00011319 58                      	pop rax
 23992 0001131A C60004                  	mov byte [rax], T_closure
 23993 0001131D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23994 00011321 48C74009[2E130100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0094
 23995 00011329 E99B000000              	jmp .L_lambda_simple_end_0094
 23996                                  .L_lambda_simple_code_0094:	; lambda-simple body
 23997 0001132E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23998 00011334 740B                    	je .L_lambda_simple_arity_check_ok_0094
 23999 00011336 FF742410                	push qword [rsp + 8 * 2]
 24000 0001133A 6A01                    	push 1
 24001 0001133C E901450000              	jmp L_error_incorrect_arity_simple
 24002                                  .L_lambda_simple_arity_check_ok_0094:
 24003 00011341 C8000000                	enter 0, 0
 24004                                  	; preparing a tail-call
 24005 00011345 488B4520                	mov rax, PARAM(0)	; param n
 24006 00011349 50                      	push rax
 24007 0001134A 6A00                    	push 0	; arg count
 24008 0001134C 488B0425[6B0F0000]      	mov rax, qword [free_var_26]	; free var trng
 24009 00011354 803805                  	cmp byte [rax], T_undefined
 24010 00011357 0F84FF430000            	je L_error_fvar_undefined
 24011 0001135D 803804                  	cmp byte [rax], T_closure
 24012 00011360 0F857A440000            	jne L_error_non_closure
 24013 00011366 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24014 00011369 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24015 0001136C 50                      	push rax
 24016 0001136D 6A02                    	push 2	; arg count
 24017 0001136F 488B0425[03110000]      	mov rax, qword [free_var_50]	; free var remainder
 24018 00011377 803805                  	cmp byte [rax], T_undefined
 24019 0001137A 0F84DC430000            	je L_error_fvar_undefined
 24020 00011380 803804                  	cmp byte [rax], T_closure
 24021 00011383 0F8557440000            	jne L_error_non_closure
 24022 00011389 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24023                                  
 24024                                  	; recycling the current frame
 24025 0001138C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24026 0001138F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24027 00011392 B906000000              	mov rcx, 2 + 4
 24028 00011397 488B5D18                	mov rbx, COUNT
 24029 0001139B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24030 000113A0 488D55F8                	lea rdx, [rbp - 8 * 1]
 24031                                  .L_tc_recycle_frame_loop_00ca:
 24032 000113A4 4883F900                	cmp rcx, 0
 24033 000113A8 7413                    	je .L_tc_recycle_frame_done_00ca
 24034 000113AA 488B32                  	mov rsi, qword [rdx]
 24035 000113AD 488933                  	mov qword [rbx], rsi
 24036 000113B0 48FFC9                  	dec rcx
 24037 000113B3 4883EB08                	sub rbx, 8 * 1
 24038 000113B7 4883EA08                	sub rdx, 8 * 1
 24039 000113BB EBE7                    	jmp .L_tc_recycle_frame_loop_00ca
 24040                                  .L_tc_recycle_frame_done_00ca:
 24041 000113BD 488D6308                	lea rsp, [rbx + 8 * 1]
 24042 000113C1 5D                      	pop rbp	; the proc will restore it!
 24043 000113C2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24044 000113C5 C9                      	leave
 24045 000113C6 C21800                  	ret AND_KILL_FRAME(1)
 24046                                  .L_lambda_simple_end_0094:	; new closure is in rax
 24047 000113C9 48890425[2F180000]      	mov qword [free_var_158], rax
 24048 000113D1 48B8-                   	mov rax, sob_void
 24048 000113D3 [0000000000000000] 
 24049                                  
 24050 000113DB 4889C7                  	mov rdi, rax
 24051 000113DE E8B8450000              	call print_sexpr_if_not_void
 24052                                  
 24053 000113E3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24054 000113E8 E89C440000              	call malloc
 24055 000113ED 50                      	push rax
 24056 000113EE BF00000000              	mov rdi, 8 * 0	; new rib
 24057 000113F3 E891440000              	call malloc
 24058 000113F8 50                      	push rax
 24059 000113F9 BF08000000              	mov rdi, 8 * 1	; extended env
 24060 000113FE E886440000              	call malloc
 24061 00011403 488B7D10                	mov rdi, ENV
 24062 00011407 BE00000000              	mov rsi, 0
 24063 0001140C BA01000000              	mov rdx, 1
 24064                                  .L_lambda_simple_env_loop_0095:	; ext_env[i + 1] <-- env[i]
 24065 00011411 4883FE00                	cmp rsi, 0
 24066 00011415 7410                    	je .L_lambda_simple_env_end_0095
 24067 00011417 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24068 0001141B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24069 0001141F 48FFC6                  	inc rsi
 24070 00011422 48FFC2                  	inc rdx
 24071 00011425 EBEA                    	jmp .L_lambda_simple_env_loop_0095
 24072                                  .L_lambda_simple_env_end_0095:
 24073 00011427 5B                      	pop rbx
 24074 00011428 BE00000000              	mov rsi, 0
 24075                                  .L_lambda_simple_params_loop_0095:	; copy params
 24076 0001142D 4883FE00                	cmp rsi, 0
 24077 00011431 740E                    	je .L_lambda_simple_params_end_0095
 24078 00011433 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24079 00011438 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24080 0001143C 48FFC6                  	inc rsi
 24081 0001143F EBEC                    	jmp .L_lambda_simple_params_loop_0095
 24082                                  .L_lambda_simple_params_end_0095:
 24083 00011441 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24084 00011444 4889C3                  	mov rbx, rax
 24085 00011447 58                      	pop rax
 24086 00011448 C60004                  	mov byte [rax], T_closure
 24087 0001144B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24088 0001144F 48C74009[5C140100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0095
 24089 00011457 E983000000              	jmp .L_lambda_simple_end_0095
 24090                                  .L_lambda_simple_code_0095:	; lambda-simple body
 24091 0001145C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24092 00011462 740B                    	je .L_lambda_simple_arity_check_ok_0095
 24093 00011464 FF742410                	push qword [rsp + 8 * 2]
 24094 00011468 6A01                    	push 1
 24095 0001146A E9D3430000              	jmp L_error_incorrect_arity_simple
 24096                                  .L_lambda_simple_arity_check_ok_0095:
 24097 0001146F C8000000                	enter 0, 0
 24098                                  	; preparing a tail-call
 24099 00011473 488B4520                	mov rax, PARAM(0)	; param x
 24100 00011477 50                      	push rax
 24101 00011478 48B8-                   	mov rax, L_constants + 2023
 24101 0001147A [E707000000000000] 
 24102 00011482 50                      	push rax
 24103 00011483 6A02                    	push 2	; arg count
 24104 00011485 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 24105 0001148D 803805                  	cmp byte [rax], T_undefined
 24106 00011490 0F84C6420000            	je L_error_fvar_undefined
 24107 00011496 803804                  	cmp byte [rax], T_closure
 24108 00011499 0F8541430000            	jne L_error_non_closure
 24109 0001149F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24110                                  
 24111                                  	; recycling the current frame
 24112 000114A2 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24113 000114A5 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24114 000114A8 B906000000              	mov rcx, 2 + 4
 24115 000114AD 488B5D18                	mov rbx, COUNT
 24116 000114B1 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24117 000114B6 488D55F8                	lea rdx, [rbp - 8 * 1]
 24118                                  .L_tc_recycle_frame_loop_00cb:
 24119 000114BA 4883F900                	cmp rcx, 0
 24120 000114BE 7413                    	je .L_tc_recycle_frame_done_00cb
 24121 000114C0 488B32                  	mov rsi, qword [rdx]
 24122 000114C3 488933                  	mov qword [rbx], rsi
 24123 000114C6 48FFC9                  	dec rcx
 24124 000114C9 4883EB08                	sub rbx, 8 * 1
 24125 000114CD 4883EA08                	sub rdx, 8 * 1
 24126 000114D1 EBE7                    	jmp .L_tc_recycle_frame_loop_00cb
 24127                                  .L_tc_recycle_frame_done_00cb:
 24128 000114D3 488D6308                	lea rsp, [rbx + 8 * 1]
 24129 000114D7 5D                      	pop rbp	; the proc will restore it!
 24130 000114D8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24131 000114DB C9                      	leave
 24132 000114DC C21800                  	ret AND_KILL_FRAME(1)
 24133                                  .L_lambda_simple_end_0095:	; new closure is in rax
 24134 000114DF 48890425[40180000]      	mov qword [free_var_159], rax
 24135 000114E7 48B8-                   	mov rax, sob_void
 24135 000114E9 [0000000000000000] 
 24136                                  
 24137 000114F1 4889C7                  	mov rdi, rax
 24138 000114F4 E8A2440000              	call print_sexpr_if_not_void
 24139                                  
 24140 000114F9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24141 000114FE E886430000              	call malloc
 24142 00011503 50                      	push rax
 24143 00011504 BF00000000              	mov rdi, 8 * 0	; new rib
 24144 00011509 E87B430000              	call malloc
 24145 0001150E 50                      	push rax
 24146 0001150F BF08000000              	mov rdi, 8 * 1	; extended env
 24147 00011514 E870430000              	call malloc
 24148 00011519 488B7D10                	mov rdi, ENV
 24149 0001151D BE00000000              	mov rsi, 0
 24150 00011522 BA01000000              	mov rdx, 1
 24151                                  .L_lambda_simple_env_loop_0096:	; ext_env[i + 1] <-- env[i]
 24152 00011527 4883FE00                	cmp rsi, 0
 24153 0001152B 7410                    	je .L_lambda_simple_env_end_0096
 24154 0001152D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24155 00011531 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24156 00011535 48FFC6                  	inc rsi
 24157 00011538 48FFC2                  	inc rdx
 24158 0001153B EBEA                    	jmp .L_lambda_simple_env_loop_0096
 24159                                  .L_lambda_simple_env_end_0096:
 24160 0001153D 5B                      	pop rbx
 24161 0001153E BE00000000              	mov rsi, 0
 24162                                  .L_lambda_simple_params_loop_0096:	; copy params
 24163 00011543 4883FE00                	cmp rsi, 0
 24164 00011547 740E                    	je .L_lambda_simple_params_end_0096
 24165 00011549 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24166 0001154E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24167 00011552 48FFC6                  	inc rsi
 24168 00011555 EBEC                    	jmp .L_lambda_simple_params_loop_0096
 24169                                  .L_lambda_simple_params_end_0096:
 24170 00011557 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24171 0001155A 4889C3                  	mov rbx, rax
 24172 0001155D 58                      	pop rax
 24173 0001155E C60004                  	mov byte [rax], T_closure
 24174 00011561 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24175 00011565 48C74009[72150100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0096
 24176 0001156D E983000000              	jmp .L_lambda_simple_end_0096
 24177                                  .L_lambda_simple_code_0096:	; lambda-simple body
 24178 00011572 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24179 00011578 740B                    	je .L_lambda_simple_arity_check_ok_0096
 24180 0001157A FF742410                	push qword [rsp + 8 * 2]
 24181 0001157E 6A01                    	push 1
 24182 00011580 E9BD420000              	jmp L_error_incorrect_arity_simple
 24183                                  .L_lambda_simple_arity_check_ok_0096:
 24184 00011585 C8000000                	enter 0, 0
 24185                                  	; preparing a tail-call
 24186 00011589 48B8-                   	mov rax, L_constants + 2023
 24186 0001158B [E707000000000000] 
 24187 00011593 50                      	push rax
 24188 00011594 488B4520                	mov rax, PARAM(0)	; param x
 24189 00011598 50                      	push rax
 24190 00011599 6A02                    	push 2	; arg count
 24191 0001159B 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 24192 000115A3 803805                  	cmp byte [rax], T_undefined
 24193 000115A6 0F84B0410000            	je L_error_fvar_undefined
 24194 000115AC 803804                  	cmp byte [rax], T_closure
 24195 000115AF 0F852B420000            	jne L_error_non_closure
 24196 000115B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24197                                  
 24198                                  	; recycling the current frame
 24199 000115B8 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24200 000115BB FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24201 000115BE B906000000              	mov rcx, 2 + 4
 24202 000115C3 488B5D18                	mov rbx, COUNT
 24203 000115C7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24204 000115CC 488D55F8                	lea rdx, [rbp - 8 * 1]
 24205                                  .L_tc_recycle_frame_loop_00cc:
 24206 000115D0 4883F900                	cmp rcx, 0
 24207 000115D4 7413                    	je .L_tc_recycle_frame_done_00cc
 24208 000115D6 488B32                  	mov rsi, qword [rdx]
 24209 000115D9 488933                  	mov qword [rbx], rsi
 24210 000115DC 48FFC9                  	dec rcx
 24211 000115DF 4883EB08                	sub rbx, 8 * 1
 24212 000115E3 4883EA08                	sub rdx, 8 * 1
 24213 000115E7 EBE7                    	jmp .L_tc_recycle_frame_loop_00cc
 24214                                  .L_tc_recycle_frame_done_00cc:
 24215 000115E9 488D6308                	lea rsp, [rbx + 8 * 1]
 24216 000115ED 5D                      	pop rbp	; the proc will restore it!
 24217 000115EE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24218 000115F1 C9                      	leave
 24219 000115F2 C21800                  	ret AND_KILL_FRAME(1)
 24220                                  .L_lambda_simple_end_0096:	; new closure is in rax
 24221 000115F5 48890425[51180000]      	mov qword [free_var_160], rax
 24222 000115FD 48B8-                   	mov rax, sob_void
 24222 000115FF [0000000000000000] 
 24223                                  
 24224 00011607 4889C7                  	mov rdi, rax
 24225 0001160A E88C430000              	call print_sexpr_if_not_void
 24226                                  
 24227 0001160F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24228 00011614 E870420000              	call malloc
 24229 00011619 50                      	push rax
 24230 0001161A BF00000000              	mov rdi, 8 * 0	; new rib
 24231 0001161F E865420000              	call malloc
 24232 00011624 50                      	push rax
 24233 00011625 BF08000000              	mov rdi, 8 * 1	; extended env
 24234 0001162A E85A420000              	call malloc
 24235 0001162F 488B7D10                	mov rdi, ENV
 24236 00011633 BE00000000              	mov rsi, 0
 24237 00011638 BA01000000              	mov rdx, 1
 24238                                  .L_lambda_simple_env_loop_0097:	; ext_env[i + 1] <-- env[i]
 24239 0001163D 4883FE00                	cmp rsi, 0
 24240 00011641 7410                    	je .L_lambda_simple_env_end_0097
 24241 00011643 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24242 00011647 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24243 0001164B 48FFC6                  	inc rsi
 24244 0001164E 48FFC2                  	inc rdx
 24245 00011651 EBEA                    	jmp .L_lambda_simple_env_loop_0097
 24246                                  .L_lambda_simple_env_end_0097:
 24247 00011653 5B                      	pop rbx
 24248 00011654 BE00000000              	mov rsi, 0
 24249                                  .L_lambda_simple_params_loop_0097:	; copy params
 24250 00011659 4883FE00                	cmp rsi, 0
 24251 0001165D 740E                    	je .L_lambda_simple_params_end_0097
 24252 0001165F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24253 00011664 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24254 00011668 48FFC6                  	inc rsi
 24255 0001166B EBEC                    	jmp .L_lambda_simple_params_loop_0097
 24256                                  .L_lambda_simple_params_end_0097:
 24257 0001166D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24258 00011670 4889C3                  	mov rbx, rax
 24259 00011673 58                      	pop rax
 24260 00011674 C60004                  	mov byte [rax], T_closure
 24261 00011677 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24262 0001167B 48C74009[88160100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0097
 24263 00011683 E9A6000000              	jmp .L_lambda_simple_end_0097
 24264                                  .L_lambda_simple_code_0097:	; lambda-simple body
 24265 00011688 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24266 0001168E 740B                    	je .L_lambda_simple_arity_check_ok_0097
 24267 00011690 FF742410                	push qword [rsp + 8 * 2]
 24268 00011694 6A01                    	push 1
 24269 00011696 E9A7410000              	jmp L_error_incorrect_arity_simple
 24270                                  .L_lambda_simple_arity_check_ok_0097:
 24271 0001169B C8000000                	enter 0, 0
 24272                                  	; preparing a tail-call
 24273 0001169F 48B8-                   	mov rax, L_constants + 3174
 24273 000116A1 [660C000000000000] 
 24274 000116A9 50                      	push rax
 24275 000116AA 488B4520                	mov rax, PARAM(0)	; param n
 24276 000116AE 50                      	push rax
 24277 000116AF 6A02                    	push 2	; arg count
 24278 000116B1 488B0425[03110000]      	mov rax, qword [free_var_50]	; free var remainder
 24279 000116B9 803805                  	cmp byte [rax], T_undefined
 24280 000116BC 0F849A400000            	je L_error_fvar_undefined
 24281 000116C2 803804                  	cmp byte [rax], T_closure
 24282 000116C5 0F8515410000            	jne L_error_non_closure
 24283 000116CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 24284 000116CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 24285 000116D1 50                      	push rax
 24286 000116D2 6A01                    	push 1	; arg count
 24287 000116D4 488B0425[7C0F0000]      	mov rax, qword [free_var_27]	; free var zero?
 24288 000116DC 803805                  	cmp byte [rax], T_undefined
 24289 000116DF 0F8477400000            	je L_error_fvar_undefined
 24290 000116E5 803804                  	cmp byte [rax], T_closure
 24291 000116E8 0F85F2400000            	jne L_error_non_closure
 24292 000116EE FF7001                  	push SOB_CLOSURE_ENV(rax)
 24293                                  
 24294                                  	; recycling the current frame
 24295 000116F1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24296 000116F4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24297 000116F7 B905000000              	mov rcx, 1 + 4
 24298 000116FC 488B5D18                	mov rbx, COUNT
 24299 00011700 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24300 00011705 488D55F8                	lea rdx, [rbp - 8 * 1]
 24301                                  .L_tc_recycle_frame_loop_00cd:
 24302 00011709 4883F900                	cmp rcx, 0
 24303 0001170D 7413                    	je .L_tc_recycle_frame_done_00cd
 24304 0001170F 488B32                  	mov rsi, qword [rdx]
 24305 00011712 488933                  	mov qword [rbx], rsi
 24306 00011715 48FFC9                  	dec rcx
 24307 00011718 4883EB08                	sub rbx, 8 * 1
 24308 0001171C 4883EA08                	sub rdx, 8 * 1
 24309 00011720 EBE7                    	jmp .L_tc_recycle_frame_loop_00cd
 24310                                  .L_tc_recycle_frame_done_00cd:
 24311 00011722 488D6308                	lea rsp, [rbx + 8 * 1]
 24312 00011726 5D                      	pop rbp	; the proc will restore it!
 24313 00011727 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24314 0001172A C9                      	leave
 24315 0001172B C21800                  	ret AND_KILL_FRAME(1)
 24316                                  .L_lambda_simple_end_0097:	; new closure is in rax
 24317 0001172E 48890425[62180000]      	mov qword [free_var_161], rax
 24318 00011736 48B8-                   	mov rax, sob_void
 24318 00011738 [0000000000000000] 
 24319                                  
 24320 00011740 4889C7                  	mov rdi, rax
 24321 00011743 E853420000              	call print_sexpr_if_not_void
 24322                                  
 24323 00011748 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24324 0001174D E837410000              	call malloc
 24325 00011752 50                      	push rax
 24326 00011753 BF00000000              	mov rdi, 8 * 0	; new rib
 24327 00011758 E82C410000              	call malloc
 24328 0001175D 50                      	push rax
 24329 0001175E BF08000000              	mov rdi, 8 * 1	; extended env
 24330 00011763 E821410000              	call malloc
 24331 00011768 488B7D10                	mov rdi, ENV
 24332 0001176C BE00000000              	mov rsi, 0
 24333 00011771 BA01000000              	mov rdx, 1
 24334                                  .L_lambda_simple_env_loop_0098:	; ext_env[i + 1] <-- env[i]
 24335 00011776 4883FE00                	cmp rsi, 0
 24336 0001177A 7410                    	je .L_lambda_simple_env_end_0098
 24337 0001177C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24338 00011780 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24339 00011784 48FFC6                  	inc rsi
 24340 00011787 48FFC2                  	inc rdx
 24341 0001178A EBEA                    	jmp .L_lambda_simple_env_loop_0098
 24342                                  .L_lambda_simple_env_end_0098:
 24343 0001178C 5B                      	pop rbx
 24344 0001178D BE00000000              	mov rsi, 0
 24345                                  .L_lambda_simple_params_loop_0098:	; copy params
 24346 00011792 4883FE00                	cmp rsi, 0
 24347 00011796 740E                    	je .L_lambda_simple_params_end_0098
 24348 00011798 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24349 0001179D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24350 000117A1 48FFC6                  	inc rsi
 24351 000117A4 EBEC                    	jmp .L_lambda_simple_params_loop_0098
 24352                                  .L_lambda_simple_params_end_0098:
 24353 000117A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24354 000117A9 4889C3                  	mov rbx, rax
 24355 000117AC 58                      	pop rax
 24356 000117AD C60004                  	mov byte [rax], T_closure
 24357 000117B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24358 000117B4 48C74009[C1170100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0098
 24359 000117BC E99B000000              	jmp .L_lambda_simple_end_0098
 24360                                  .L_lambda_simple_code_0098:	; lambda-simple body
 24361 000117C1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24362 000117C7 740B                    	je .L_lambda_simple_arity_check_ok_0098
 24363 000117C9 FF742410                	push qword [rsp + 8 * 2]
 24364 000117CD 6A01                    	push 1
 24365 000117CF E96E400000              	jmp L_error_incorrect_arity_simple
 24366                                  .L_lambda_simple_arity_check_ok_0098:
 24367 000117D4 C8000000                	enter 0, 0
 24368                                  	; preparing a tail-call
 24369 000117D8 488B4520                	mov rax, PARAM(0)	; param n
 24370 000117DC 50                      	push rax
 24371 000117DD 6A01                    	push 1	; arg count
 24372 000117DF 488B0425[62180000]      	mov rax, qword [free_var_161]	; free var even?
 24373 000117E7 803805                  	cmp byte [rax], T_undefined
 24374 000117EA 0F846C3F0000            	je L_error_fvar_undefined
 24375 000117F0 803804                  	cmp byte [rax], T_closure
 24376 000117F3 0F85E73F0000            	jne L_error_non_closure
 24377 000117F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24378 000117FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 24379 000117FF 50                      	push rax
 24380 00011800 6A01                    	push 1	; arg count
 24381 00011802 488B0425[99140000]      	mov rax, qword [free_var_104]	; free var not
 24382 0001180A 803805                  	cmp byte [rax], T_undefined
 24383 0001180D 0F84493F0000            	je L_error_fvar_undefined
 24384 00011813 803804                  	cmp byte [rax], T_closure
 24385 00011816 0F85C43F0000            	jne L_error_non_closure
 24386 0001181C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24387                                  
 24388                                  	; recycling the current frame
 24389 0001181F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24390 00011822 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24391 00011825 B905000000              	mov rcx, 1 + 4
 24392 0001182A 488B5D18                	mov rbx, COUNT
 24393 0001182E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24394 00011833 488D55F8                	lea rdx, [rbp - 8 * 1]
 24395                                  .L_tc_recycle_frame_loop_00ce:
 24396 00011837 4883F900                	cmp rcx, 0
 24397 0001183B 7413                    	je .L_tc_recycle_frame_done_00ce
 24398 0001183D 488B32                  	mov rsi, qword [rdx]
 24399 00011840 488933                  	mov qword [rbx], rsi
 24400 00011843 48FFC9                  	dec rcx
 24401 00011846 4883EB08                	sub rbx, 8 * 1
 24402 0001184A 4883EA08                	sub rdx, 8 * 1
 24403 0001184E EBE7                    	jmp .L_tc_recycle_frame_loop_00ce
 24404                                  .L_tc_recycle_frame_done_00ce:
 24405 00011850 488D6308                	lea rsp, [rbx + 8 * 1]
 24406 00011854 5D                      	pop rbp	; the proc will restore it!
 24407 00011855 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24408 00011858 C9                      	leave
 24409 00011859 C21800                  	ret AND_KILL_FRAME(1)
 24410                                  .L_lambda_simple_end_0098:	; new closure is in rax
 24411 0001185C 48890425[73180000]      	mov qword [free_var_162], rax
 24412 00011864 48B8-                   	mov rax, sob_void
 24412 00011866 [0000000000000000] 
 24413                                  
 24414 0001186E 4889C7                  	mov rdi, rax
 24415 00011871 E825410000              	call print_sexpr_if_not_void
 24416                                  
 24417 00011876 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24418 0001187B E809400000              	call malloc
 24419 00011880 50                      	push rax
 24420 00011881 BF00000000              	mov rdi, 8 * 0	; new rib
 24421 00011886 E8FE3F0000              	call malloc
 24422 0001188B 50                      	push rax
 24423 0001188C BF08000000              	mov rdi, 8 * 1	; extended env
 24424 00011891 E8F33F0000              	call malloc
 24425 00011896 488B7D10                	mov rdi, ENV
 24426 0001189A BE00000000              	mov rsi, 0
 24427 0001189F BA01000000              	mov rdx, 1
 24428                                  .L_lambda_simple_env_loop_0099:	; ext_env[i + 1] <-- env[i]
 24429 000118A4 4883FE00                	cmp rsi, 0
 24430 000118A8 7410                    	je .L_lambda_simple_env_end_0099
 24431 000118AA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24432 000118AE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24433 000118B2 48FFC6                  	inc rsi
 24434 000118B5 48FFC2                  	inc rdx
 24435 000118B8 EBEA                    	jmp .L_lambda_simple_env_loop_0099
 24436                                  .L_lambda_simple_env_end_0099:
 24437 000118BA 5B                      	pop rbx
 24438 000118BB BE00000000              	mov rsi, 0
 24439                                  .L_lambda_simple_params_loop_0099:	; copy params
 24440 000118C0 4883FE00                	cmp rsi, 0
 24441 000118C4 740E                    	je .L_lambda_simple_params_end_0099
 24442 000118C6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24443 000118CB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24444 000118CF 48FFC6                  	inc rsi
 24445 000118D2 EBEC                    	jmp .L_lambda_simple_params_loop_0099
 24446                                  .L_lambda_simple_params_end_0099:
 24447 000118D4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24448 000118D7 4889C3                  	mov rbx, rax
 24449 000118DA 58                      	pop rax
 24450 000118DB C60004                  	mov byte [rax], T_closure
 24451 000118DE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24452 000118E2 48C74009[EF180100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0099
 24453 000118EA E9AD000000              	jmp .L_lambda_simple_end_0099
 24454                                  .L_lambda_simple_code_0099:	; lambda-simple body
 24455 000118EF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24456 000118F5 740B                    	je .L_lambda_simple_arity_check_ok_0099
 24457 000118F7 FF742410                	push qword [rsp + 8 * 2]
 24458 000118FB 6A01                    	push 1
 24459 000118FD E9403F0000              	jmp L_error_incorrect_arity_simple
 24460                                  .L_lambda_simple_arity_check_ok_0099:
 24461 00011902 C8000000                	enter 0, 0
 24462 00011906 488B4520                	mov rax, PARAM(0)	; param x
 24463 0001190A 50                      	push rax
 24464 0001190B 6A01                    	push 1	; arg count
 24465 0001190D 488B0425[51180000]      	mov rax, qword [free_var_160]	; free var negative?
 24466 00011915 803805                  	cmp byte [rax], T_undefined
 24467 00011918 0F843E3E0000            	je L_error_fvar_undefined
 24468 0001191E 803804                  	cmp byte [rax], T_closure
 24469 00011921 0F85B93E0000            	jne L_error_non_closure
 24470 00011927 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24471 0001192A FF5009                  	call SOB_CLOSURE_CODE(rax)
 24472                                  
 24473 0001192D 483D[02000000]          	cmp rax, sob_boolean_false
 24474 00011933 745F                    	je .L_if_else_006e
 24475                                  	; preparing a tail-call
 24476 00011935 488B4520                	mov rax, PARAM(0)	; param x
 24477 00011939 50                      	push rax
 24478 0001193A 6A01                    	push 1	; arg count
 24479 0001193C 488B0425[76150000]      	mov rax, qword [free_var_117]	; free var -
 24480 00011944 803805                  	cmp byte [rax], T_undefined
 24481 00011947 0F840F3E0000            	je L_error_fvar_undefined
 24482 0001194D 803804                  	cmp byte [rax], T_closure
 24483 00011950 0F858A3E0000            	jne L_error_non_closure
 24484 00011956 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24485                                  
 24486                                  	; recycling the current frame
 24487 00011959 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24488 0001195C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24489 0001195F B905000000              	mov rcx, 1 + 4
 24490 00011964 488B5D18                	mov rbx, COUNT
 24491 00011968 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24492 0001196D 488D55F8                	lea rdx, [rbp - 8 * 1]
 24493                                  .L_tc_recycle_frame_loop_00cf:
 24494 00011971 4883F900                	cmp rcx, 0
 24495 00011975 7413                    	je .L_tc_recycle_frame_done_00cf
 24496 00011977 488B32                  	mov rsi, qword [rdx]
 24497 0001197A 488933                  	mov qword [rbx], rsi
 24498 0001197D 48FFC9                  	dec rcx
 24499 00011980 4883EB08                	sub rbx, 8 * 1
 24500 00011984 4883EA08                	sub rdx, 8 * 1
 24501 00011988 EBE7                    	jmp .L_tc_recycle_frame_loop_00cf
 24502                                  .L_tc_recycle_frame_done_00cf:
 24503 0001198A 488D6308                	lea rsp, [rbx + 8 * 1]
 24504 0001198E 5D                      	pop rbp	; the proc will restore it!
 24505 0001198F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24506                                  
 24507 00011992 EB04                    	jmp .L_if_end_006e
 24508                                  
 24509                                  	.L_if_else_006e:
 24510 00011994 488B4520                	mov rax, PARAM(0)	; param x
 24511                                  
 24512                                  	.L_if_end_006e:
 24513 00011998 C9                      	leave
 24514 00011999 C21800                  	ret AND_KILL_FRAME(1)
 24515                                  .L_lambda_simple_end_0099:	; new closure is in rax
 24516 0001199C 48890425[84180000]      	mov qword [free_var_163], rax
 24517 000119A4 48B8-                   	mov rax, sob_void
 24517 000119A6 [0000000000000000] 
 24518                                  
 24519 000119AE 4889C7                  	mov rdi, rax
 24520 000119B1 E8E53F0000              	call print_sexpr_if_not_void
 24521                                  
 24522 000119B6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24523 000119BB E8C93E0000              	call malloc
 24524 000119C0 50                      	push rax
 24525 000119C1 BF00000000              	mov rdi, 8 * 0	; new rib
 24526 000119C6 E8BE3E0000              	call malloc
 24527 000119CB 50                      	push rax
 24528 000119CC BF08000000              	mov rdi, 8 * 1	; extended env
 24529 000119D1 E8B33E0000              	call malloc
 24530 000119D6 488B7D10                	mov rdi, ENV
 24531 000119DA BE00000000              	mov rsi, 0
 24532 000119DF BA01000000              	mov rdx, 1
 24533                                  .L_lambda_simple_env_loop_009a:	; ext_env[i + 1] <-- env[i]
 24534 000119E4 4883FE00                	cmp rsi, 0
 24535 000119E8 7410                    	je .L_lambda_simple_env_end_009a
 24536 000119EA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24537 000119EE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24538 000119F2 48FFC6                  	inc rsi
 24539 000119F5 48FFC2                  	inc rdx
 24540 000119F8 EBEA                    	jmp .L_lambda_simple_env_loop_009a
 24541                                  .L_lambda_simple_env_end_009a:
 24542 000119FA 5B                      	pop rbx
 24543 000119FB BE00000000              	mov rsi, 0
 24544                                  .L_lambda_simple_params_loop_009a:	; copy params
 24545 00011A00 4883FE00                	cmp rsi, 0
 24546 00011A04 740E                    	je .L_lambda_simple_params_end_009a
 24547 00011A06 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24548 00011A0B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24549 00011A0F 48FFC6                  	inc rsi
 24550 00011A12 EBEC                    	jmp .L_lambda_simple_params_loop_009a
 24551                                  .L_lambda_simple_params_end_009a:
 24552 00011A14 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24553 00011A17 4889C3                  	mov rbx, rax
 24554 00011A1A 58                      	pop rax
 24555 00011A1B C60004                  	mov byte [rax], T_closure
 24556 00011A1E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24557 00011A22 48C74009[2F1A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009a
 24558 00011A2A E9C1060000              	jmp .L_lambda_simple_end_009a
 24559                                  .L_lambda_simple_code_009a:	; lambda-simple body
 24560 00011A2F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24561 00011A35 740B                    	je .L_lambda_simple_arity_check_ok_009a
 24562 00011A37 FF742410                	push qword [rsp + 8 * 2]
 24563 00011A3B 6A02                    	push 2
 24564 00011A3D E9003E0000              	jmp L_error_incorrect_arity_simple
 24565                                  .L_lambda_simple_arity_check_ok_009a:
 24566 00011A42 C8000000                	enter 0, 0
 24567 00011A46 488B4520                	mov rax, PARAM(0)	; param e1
 24568 00011A4A 50                      	push rax
 24569 00011A4B 6A01                    	push 1	; arg count
 24570 00011A4D 488B0425[C20D0000]      	mov rax, qword [free_var_1]	; free var pair?
 24571 00011A55 803805                  	cmp byte [rax], T_undefined
 24572 00011A58 0F84FE3C0000            	je L_error_fvar_undefined
 24573 00011A5E 803804                  	cmp byte [rax], T_closure
 24574 00011A61 0F85793D0000            	jne L_error_non_closure
 24575 00011A67 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24576 00011A6A FF5009                  	call SOB_CLOSURE_CODE(rax)
 24577                                  
 24578 00011A6D 483D[02000000]          	cmp rax, sob_boolean_false
 24579 00011A73 7429                    	je .L_if_else_0070
 24580 00011A75 488B4528                	mov rax, PARAM(1)	; param e2
 24581 00011A79 50                      	push rax
 24582 00011A7A 6A01                    	push 1	; arg count
 24583 00011A7C 488B0425[C20D0000]      	mov rax, qword [free_var_1]	; free var pair?
 24584 00011A84 803805                  	cmp byte [rax], T_undefined
 24585 00011A87 0F84CF3C0000            	je L_error_fvar_undefined
 24586 00011A8D 803804                  	cmp byte [rax], T_closure
 24587 00011A90 0F854A3D0000            	jne L_error_non_closure
 24588 00011A96 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24589 00011A99 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24590                                  
 24591 00011A9C EB0A                    	jmp .L_if_end_0070
 24592                                  
 24593                                  	.L_if_else_0070:
 24594 00011A9E 48B8-                   	mov rax, L_constants + 2
 24594 00011AA0 [0200000000000000] 
 24595                                  
 24596                                  	.L_if_end_0070:
 24597                                  
 24598 00011AA8 483D[02000000]          	cmp rax, sob_boolean_false
 24599 00011AAE 0F8437010000            	je .L_if_else_006f
 24600 00011AB4 488B4528                	mov rax, PARAM(1)	; param e2
 24601 00011AB8 50                      	push rax
 24602 00011AB9 6A01                    	push 1	; arg count
 24603 00011ABB 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 24604 00011AC3 803805                  	cmp byte [rax], T_undefined
 24605 00011AC6 0F84903C0000            	je L_error_fvar_undefined
 24606 00011ACC 803804                  	cmp byte [rax], T_closure
 24607 00011ACF 0F850B3D0000            	jne L_error_non_closure
 24608 00011AD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24609 00011AD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24610 00011ADB 50                      	push rax
 24611 00011ADC 488B4520                	mov rax, PARAM(0)	; param e1
 24612 00011AE0 50                      	push rax
 24613 00011AE1 6A01                    	push 1	; arg count
 24614 00011AE3 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 24615 00011AEB 803805                  	cmp byte [rax], T_undefined
 24616 00011AEE 0F84683C0000            	je L_error_fvar_undefined
 24617 00011AF4 803804                  	cmp byte [rax], T_closure
 24618 00011AF7 0F85E33C0000            	jne L_error_non_closure
 24619 00011AFD FF7001                  	push SOB_CLOSURE_ENV(rax)
 24620 00011B00 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24621 00011B03 50                      	push rax
 24622 00011B04 6A02                    	push 2	; arg count
 24623 00011B06 488B0425[95180000]      	mov rax, qword [free_var_164]	; free var equal?
 24624 00011B0E 803805                  	cmp byte [rax], T_undefined
 24625 00011B11 0F84453C0000            	je L_error_fvar_undefined
 24626 00011B17 803804                  	cmp byte [rax], T_closure
 24627 00011B1A 0F85C03C0000            	jne L_error_non_closure
 24628 00011B20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24629 00011B23 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24630                                  
 24631 00011B26 483D[02000000]          	cmp rax, sob_boolean_false
 24632 00011B2C 0F84AA000000            	je .L_if_else_0071
 24633                                  	; preparing a tail-call
 24634 00011B32 488B4528                	mov rax, PARAM(1)	; param e2
 24635 00011B36 50                      	push rax
 24636 00011B37 6A01                    	push 1	; arg count
 24637 00011B39 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 24638 00011B41 803805                  	cmp byte [rax], T_undefined
 24639 00011B44 0F84123C0000            	je L_error_fvar_undefined
 24640 00011B4A 803804                  	cmp byte [rax], T_closure
 24641 00011B4D 0F858D3C0000            	jne L_error_non_closure
 24642 00011B53 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24643 00011B56 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24644 00011B59 50                      	push rax
 24645 00011B5A 488B4520                	mov rax, PARAM(0)	; param e1
 24646 00011B5E 50                      	push rax
 24647 00011B5F 6A01                    	push 1	; arg count
 24648 00011B61 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 24649 00011B69 803805                  	cmp byte [rax], T_undefined
 24650 00011B6C 0F84EA3B0000            	je L_error_fvar_undefined
 24651 00011B72 803804                  	cmp byte [rax], T_closure
 24652 00011B75 0F85653C0000            	jne L_error_non_closure
 24653 00011B7B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24654 00011B7E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24655 00011B81 50                      	push rax
 24656 00011B82 6A02                    	push 2	; arg count
 24657 00011B84 488B0425[95180000]      	mov rax, qword [free_var_164]	; free var equal?
 24658 00011B8C 803805                  	cmp byte [rax], T_undefined
 24659 00011B8F 0F84C73B0000            	je L_error_fvar_undefined
 24660 00011B95 803804                  	cmp byte [rax], T_closure
 24661 00011B98 0F85423C0000            	jne L_error_non_closure
 24662 00011B9E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24663                                  
 24664                                  	; recycling the current frame
 24665 00011BA1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24666 00011BA4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24667 00011BA7 B906000000              	mov rcx, 2 + 4
 24668 00011BAC 488B5D18                	mov rbx, COUNT
 24669 00011BB0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24670 00011BB5 488D55F8                	lea rdx, [rbp - 8 * 1]
 24671                                  .L_tc_recycle_frame_loop_00d0:
 24672 00011BB9 4883F900                	cmp rcx, 0
 24673 00011BBD 7413                    	je .L_tc_recycle_frame_done_00d0
 24674 00011BBF 488B32                  	mov rsi, qword [rdx]
 24675 00011BC2 488933                  	mov qword [rbx], rsi
 24676 00011BC5 48FFC9                  	dec rcx
 24677 00011BC8 4883EB08                	sub rbx, 8 * 1
 24678 00011BCC 4883EA08                	sub rdx, 8 * 1
 24679 00011BD0 EBE7                    	jmp .L_tc_recycle_frame_loop_00d0
 24680                                  .L_tc_recycle_frame_done_00d0:
 24681 00011BD2 488D6308                	lea rsp, [rbx + 8 * 1]
 24682 00011BD6 5D                      	pop rbp	; the proc will restore it!
 24683 00011BD7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24684                                  
 24685 00011BDA EB0A                    	jmp .L_if_end_0071
 24686                                  
 24687                                  	.L_if_else_0071:
 24688 00011BDC 48B8-                   	mov rax, L_constants + 2
 24688 00011BDE [0200000000000000] 
 24689                                  
 24690                                  	.L_if_end_0071:
 24691                                  
 24692 00011BE6 E901050000              	jmp .L_if_end_006f
 24693                                  
 24694                                  	.L_if_else_006f:
 24695 00011BEB 488B4520                	mov rax, PARAM(0)	; param e1
 24696 00011BEF 50                      	push rax
 24697 00011BF0 6A01                    	push 1	; arg count
 24698 00011BF2 488B0425[170E0000]      	mov rax, qword [free_var_6]	; free var vector?
 24699 00011BFA 803805                  	cmp byte [rax], T_undefined
 24700 00011BFD 0F84593B0000            	je L_error_fvar_undefined
 24701 00011C03 803804                  	cmp byte [rax], T_closure
 24702 00011C06 0F85D43B0000            	jne L_error_non_closure
 24703 00011C0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24704 00011C0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24705                                  
 24706 00011C12 483D[02000000]          	cmp rax, sob_boolean_false
 24707 00011C18 0F84AF000000            	je .L_if_else_0073
 24708 00011C1E 488B4528                	mov rax, PARAM(1)	; param e2
 24709 00011C22 50                      	push rax
 24710 00011C23 6A01                    	push 1	; arg count
 24711 00011C25 488B0425[170E0000]      	mov rax, qword [free_var_6]	; free var vector?
 24712 00011C2D 803805                  	cmp byte [rax], T_undefined
 24713 00011C30 0F84263B0000            	je L_error_fvar_undefined
 24714 00011C36 803804                  	cmp byte [rax], T_closure
 24715 00011C39 0F85A13B0000            	jne L_error_non_closure
 24716 00011C3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24717 00011C42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24718                                  
 24719 00011C45 483D[02000000]          	cmp rax, sob_boolean_false
 24720 00011C4B 7474                    	je .L_if_else_0074
 24721 00011C4D 488B4528                	mov rax, PARAM(1)	; param e2
 24722 00011C51 50                      	push rax
 24723 00011C52 6A01                    	push 1	; arg count
 24724 00011C54 488B0425[F40E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 24725 00011C5C 803805                  	cmp byte [rax], T_undefined
 24726 00011C5F 0F84F73A0000            	je L_error_fvar_undefined
 24727 00011C65 803804                  	cmp byte [rax], T_closure
 24728 00011C68 0F85723B0000            	jne L_error_non_closure
 24729 00011C6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24730 00011C71 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24731 00011C74 50                      	push rax
 24732 00011C75 488B4520                	mov rax, PARAM(0)	; param e1
 24733 00011C79 50                      	push rax
 24734 00011C7A 6A01                    	push 1	; arg count
 24735 00011C7C 488B0425[F40E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 24736 00011C84 803805                  	cmp byte [rax], T_undefined
 24737 00011C87 0F84CF3A0000            	je L_error_fvar_undefined
 24738 00011C8D 803804                  	cmp byte [rax], T_closure
 24739 00011C90 0F854A3B0000            	jne L_error_non_closure
 24740 00011C96 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24741 00011C99 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24742 00011C9C 50                      	push rax
 24743 00011C9D 6A02                    	push 2	; arg count
 24744 00011C9F 488B0425[0F160000]      	mov rax, qword [free_var_126]	; free var =
 24745 00011CA7 803805                  	cmp byte [rax], T_undefined
 24746 00011CAA 0F84AC3A0000            	je L_error_fvar_undefined
 24747 00011CB0 803804                  	cmp byte [rax], T_closure
 24748 00011CB3 0F85273B0000            	jne L_error_non_closure
 24749 00011CB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24750 00011CBC FF5009                  	call SOB_CLOSURE_CODE(rax)
 24751                                  
 24752 00011CBF EB0A                    	jmp .L_if_end_0074
 24753                                  
 24754                                  	.L_if_else_0074:
 24755 00011CC1 48B8-                   	mov rax, L_constants + 2
 24755 00011CC3 [0200000000000000] 
 24756                                  
 24757                                  	.L_if_end_0074:
 24758                                  
 24759 00011CCB EB0A                    	jmp .L_if_end_0073
 24760                                  
 24761                                  	.L_if_else_0073:
 24762 00011CCD 48B8-                   	mov rax, L_constants + 2
 24762 00011CCF [0200000000000000] 
 24763                                  
 24764                                  	.L_if_end_0073:
 24765                                  
 24766 00011CD7 483D[02000000]          	cmp rax, sob_boolean_false
 24767 00011CDD 0F84AD000000            	je .L_if_else_0072
 24768                                  	; preparing a tail-call
 24769 00011CE3 488B4528                	mov rax, PARAM(1)	; param e2
 24770 00011CE7 50                      	push rax
 24771 00011CE8 6A01                    	push 1	; arg count
 24772 00011CEA 488B0425[1E180000]      	mov rax, qword [free_var_157]	; free var vector->list
 24773 00011CF2 803805                  	cmp byte [rax], T_undefined
 24774 00011CF5 0F84613A0000            	je L_error_fvar_undefined
 24775 00011CFB 803804                  	cmp byte [rax], T_closure
 24776 00011CFE 0F85DC3A0000            	jne L_error_non_closure
 24777 00011D04 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24778 00011D07 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24779 00011D0A 50                      	push rax
 24780 00011D0B 488B4520                	mov rax, PARAM(0)	; param e1
 24781 00011D0F 50                      	push rax
 24782 00011D10 6A01                    	push 1	; arg count
 24783 00011D12 488B0425[1E180000]      	mov rax, qword [free_var_157]	; free var vector->list
 24784 00011D1A 803805                  	cmp byte [rax], T_undefined
 24785 00011D1D 0F84393A0000            	je L_error_fvar_undefined
 24786 00011D23 803804                  	cmp byte [rax], T_closure
 24787 00011D26 0F85B43A0000            	jne L_error_non_closure
 24788 00011D2C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24789 00011D2F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24790 00011D32 50                      	push rax
 24791 00011D33 6A02                    	push 2	; arg count
 24792 00011D35 488B0425[95180000]      	mov rax, qword [free_var_164]	; free var equal?
 24793 00011D3D 803805                  	cmp byte [rax], T_undefined
 24794 00011D40 0F84163A0000            	je L_error_fvar_undefined
 24795 00011D46 803804                  	cmp byte [rax], T_closure
 24796 00011D49 0F85913A0000            	jne L_error_non_closure
 24797 00011D4F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24798                                  
 24799                                  	; recycling the current frame
 24800 00011D52 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24801 00011D55 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24802 00011D58 B906000000              	mov rcx, 2 + 4
 24803 00011D5D 488B5D18                	mov rbx, COUNT
 24804 00011D61 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24805 00011D66 488D55F8                	lea rdx, [rbp - 8 * 1]
 24806                                  .L_tc_recycle_frame_loop_00d1:
 24807 00011D6A 4883F900                	cmp rcx, 0
 24808 00011D6E 7413                    	je .L_tc_recycle_frame_done_00d1
 24809 00011D70 488B32                  	mov rsi, qword [rdx]
 24810 00011D73 488933                  	mov qword [rbx], rsi
 24811 00011D76 48FFC9                  	dec rcx
 24812 00011D79 4883EB08                	sub rbx, 8 * 1
 24813 00011D7D 4883EA08                	sub rdx, 8 * 1
 24814 00011D81 EBE7                    	jmp .L_tc_recycle_frame_loop_00d1
 24815                                  .L_tc_recycle_frame_done_00d1:
 24816 00011D83 488D6308                	lea rsp, [rbx + 8 * 1]
 24817 00011D87 5D                      	pop rbp	; the proc will restore it!
 24818 00011D88 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24819                                  
 24820 00011D8B E95C030000              	jmp .L_if_end_0072
 24821                                  
 24822                                  	.L_if_else_0072:
 24823 00011D90 488B4520                	mov rax, PARAM(0)	; param e1
 24824 00011D94 50                      	push rax
 24825 00011D95 6A01                    	push 1	; arg count
 24826 00011D97 488B0425[F50D0000]      	mov rax, qword [free_var_4]	; free var string?
 24827 00011D9F 803805                  	cmp byte [rax], T_undefined
 24828 00011DA2 0F84B4390000            	je L_error_fvar_undefined
 24829 00011DA8 803804                  	cmp byte [rax], T_closure
 24830 00011DAB 0F852F3A0000            	jne L_error_non_closure
 24831 00011DB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24832 00011DB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24833                                  
 24834 00011DB7 483D[02000000]          	cmp rax, sob_boolean_false
 24835 00011DBD 0F84AF000000            	je .L_if_else_0076
 24836 00011DC3 488B4528                	mov rax, PARAM(1)	; param e2
 24837 00011DC7 50                      	push rax
 24838 00011DC8 6A01                    	push 1	; arg count
 24839 00011DCA 488B0425[F50D0000]      	mov rax, qword [free_var_4]	; free var string?
 24840 00011DD2 803805                  	cmp byte [rax], T_undefined
 24841 00011DD5 0F8481390000            	je L_error_fvar_undefined
 24842 00011DDB 803804                  	cmp byte [rax], T_closure
 24843 00011DDE 0F85FC390000            	jne L_error_non_closure
 24844 00011DE4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24845 00011DE7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24846                                  
 24847 00011DEA 483D[02000000]          	cmp rax, sob_boolean_false
 24848 00011DF0 7474                    	je .L_if_else_0077
 24849 00011DF2 488B4528                	mov rax, PARAM(1)	; param e2
 24850 00011DF6 50                      	push rax
 24851 00011DF7 6A01                    	push 1	; arg count
 24852 00011DF9 488B0425[E30E0000]      	mov rax, qword [free_var_18]	; free var string-length
 24853 00011E01 803805                  	cmp byte [rax], T_undefined
 24854 00011E04 0F8452390000            	je L_error_fvar_undefined
 24855 00011E0A 803804                  	cmp byte [rax], T_closure
 24856 00011E0D 0F85CD390000            	jne L_error_non_closure
 24857 00011E13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24858 00011E16 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24859 00011E19 50                      	push rax
 24860 00011E1A 488B4520                	mov rax, PARAM(0)	; param e1
 24861 00011E1E 50                      	push rax
 24862 00011E1F 6A01                    	push 1	; arg count
 24863 00011E21 488B0425[E30E0000]      	mov rax, qword [free_var_18]	; free var string-length
 24864 00011E29 803805                  	cmp byte [rax], T_undefined
 24865 00011E2C 0F842A390000            	je L_error_fvar_undefined
 24866 00011E32 803804                  	cmp byte [rax], T_closure
 24867 00011E35 0F85A5390000            	jne L_error_non_closure
 24868 00011E3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24869 00011E3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24870 00011E41 50                      	push rax
 24871 00011E42 6A02                    	push 2	; arg count
 24872 00011E44 488B0425[0F160000]      	mov rax, qword [free_var_126]	; free var =
 24873 00011E4C 803805                  	cmp byte [rax], T_undefined
 24874 00011E4F 0F8407390000            	je L_error_fvar_undefined
 24875 00011E55 803804                  	cmp byte [rax], T_closure
 24876 00011E58 0F8582390000            	jne L_error_non_closure
 24877 00011E5E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24878 00011E61 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24879                                  
 24880 00011E64 EB0A                    	jmp .L_if_end_0077
 24881                                  
 24882                                  	.L_if_else_0077:
 24883 00011E66 48B8-                   	mov rax, L_constants + 2
 24883 00011E68 [0200000000000000] 
 24884                                  
 24885                                  	.L_if_end_0077:
 24886                                  
 24887 00011E70 EB0A                    	jmp .L_if_end_0076
 24888                                  
 24889                                  	.L_if_else_0076:
 24890 00011E72 48B8-                   	mov rax, L_constants + 2
 24890 00011E74 [0200000000000000] 
 24891                                  
 24892                                  	.L_if_end_0076:
 24893                                  
 24894 00011E7C 483D[02000000]          	cmp rax, sob_boolean_false
 24895 00011E82 7467                    	je .L_if_else_0075
 24896                                  	; preparing a tail-call
 24897 00011E84 488B4528                	mov rax, PARAM(1)	; param e2
 24898 00011E88 50                      	push rax
 24899 00011E89 488B4520                	mov rax, PARAM(0)	; param e1
 24900 00011E8D 50                      	push rax
 24901 00011E8E 6A02                    	push 2	; arg count
 24902 00011E90 488B0425[63170000]      	mov rax, qword [free_var_146]	; free var string=?
 24903 00011E98 803805                  	cmp byte [rax], T_undefined
 24904 00011E9B 0F84BB380000            	je L_error_fvar_undefined
 24905 00011EA1 803804                  	cmp byte [rax], T_closure
 24906 00011EA4 0F8536390000            	jne L_error_non_closure
 24907 00011EAA FF7001                  	push SOB_CLOSURE_ENV(rax)
 24908                                  
 24909                                  	; recycling the current frame
 24910 00011EAD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24911 00011EB0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24912 00011EB3 B906000000              	mov rcx, 2 + 4
 24913 00011EB8 488B5D18                	mov rbx, COUNT
 24914 00011EBC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24915 00011EC1 488D55F8                	lea rdx, [rbp - 8 * 1]
 24916                                  .L_tc_recycle_frame_loop_00d2:
 24917 00011EC5 4883F900                	cmp rcx, 0
 24918 00011EC9 7413                    	je .L_tc_recycle_frame_done_00d2
 24919 00011ECB 488B32                  	mov rsi, qword [rdx]
 24920 00011ECE 488933                  	mov qword [rbx], rsi
 24921 00011ED1 48FFC9                  	dec rcx
 24922 00011ED4 4883EB08                	sub rbx, 8 * 1
 24923 00011ED8 4883EA08                	sub rdx, 8 * 1
 24924 00011EDC EBE7                    	jmp .L_tc_recycle_frame_loop_00d2
 24925                                  .L_tc_recycle_frame_done_00d2:
 24926 00011EDE 488D6308                	lea rsp, [rbx + 8 * 1]
 24927 00011EE2 5D                      	pop rbp	; the proc will restore it!
 24928 00011EE3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24929                                  
 24930 00011EE6 E901020000              	jmp .L_if_end_0075
 24931                                  
 24932                                  	.L_if_else_0075:
 24933 00011EEB 488B4520                	mov rax, PARAM(0)	; param e1
 24934 00011EEF 50                      	push rax
 24935 00011EF0 6A01                    	push 1	; arg count
 24936 00011EF2 488B0425[6C0E0000]      	mov rax, qword [free_var_11]	; free var number?
 24937 00011EFA 803805                  	cmp byte [rax], T_undefined
 24938 00011EFD 0F8459380000            	je L_error_fvar_undefined
 24939 00011F03 803804                  	cmp byte [rax], T_closure
 24940 00011F06 0F85D4380000            	jne L_error_non_closure
 24941 00011F0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24942 00011F0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24943                                  
 24944 00011F12 483D[02000000]          	cmp rax, sob_boolean_false
 24945 00011F18 7429                    	je .L_if_else_0079
 24946 00011F1A 488B4528                	mov rax, PARAM(1)	; param e2
 24947 00011F1E 50                      	push rax
 24948 00011F1F 6A01                    	push 1	; arg count
 24949 00011F21 488B0425[6C0E0000]      	mov rax, qword [free_var_11]	; free var number?
 24950 00011F29 803805                  	cmp byte [rax], T_undefined
 24951 00011F2C 0F842A380000            	je L_error_fvar_undefined
 24952 00011F32 803804                  	cmp byte [rax], T_closure
 24953 00011F35 0F85A5380000            	jne L_error_non_closure
 24954 00011F3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24955 00011F3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24956                                  
 24957 00011F41 EB0A                    	jmp .L_if_end_0079
 24958                                  
 24959                                  	.L_if_else_0079:
 24960 00011F43 48B8-                   	mov rax, L_constants + 2
 24960 00011F45 [0200000000000000] 
 24961                                  
 24962                                  	.L_if_end_0079:
 24963                                  
 24964 00011F4D 483D[02000000]          	cmp rax, sob_boolean_false
 24965 00011F53 7467                    	je .L_if_else_0078
 24966                                  	; preparing a tail-call
 24967 00011F55 488B4528                	mov rax, PARAM(1)	; param e2
 24968 00011F59 50                      	push rax
 24969 00011F5A 488B4520                	mov rax, PARAM(0)	; param e1
 24970 00011F5E 50                      	push rax
 24971 00011F5F 6A02                    	push 2	; arg count
 24972 00011F61 488B0425[0F160000]      	mov rax, qword [free_var_126]	; free var =
 24973 00011F69 803805                  	cmp byte [rax], T_undefined
 24974 00011F6C 0F84EA370000            	je L_error_fvar_undefined
 24975 00011F72 803804                  	cmp byte [rax], T_closure
 24976 00011F75 0F8565380000            	jne L_error_non_closure
 24977 00011F7B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24978                                  
 24979                                  	; recycling the current frame
 24980 00011F7E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24981 00011F81 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24982 00011F84 B906000000              	mov rcx, 2 + 4
 24983 00011F89 488B5D18                	mov rbx, COUNT
 24984 00011F8D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24985 00011F92 488D55F8                	lea rdx, [rbp - 8 * 1]
 24986                                  .L_tc_recycle_frame_loop_00d3:
 24987 00011F96 4883F900                	cmp rcx, 0
 24988 00011F9A 7413                    	je .L_tc_recycle_frame_done_00d3
 24989 00011F9C 488B32                  	mov rsi, qword [rdx]
 24990 00011F9F 488933                  	mov qword [rbx], rsi
 24991 00011FA2 48FFC9                  	dec rcx
 24992 00011FA5 4883EB08                	sub rbx, 8 * 1
 24993 00011FA9 4883EA08                	sub rdx, 8 * 1
 24994 00011FAD EBE7                    	jmp .L_tc_recycle_frame_loop_00d3
 24995                                  .L_tc_recycle_frame_done_00d3:
 24996 00011FAF 488D6308                	lea rsp, [rbx + 8 * 1]
 24997 00011FB3 5D                      	pop rbp	; the proc will restore it!
 24998 00011FB4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24999                                  
 25000 00011FB7 E930010000              	jmp .L_if_end_0078
 25001                                  
 25002                                  	.L_if_else_0078:
 25003 00011FBC 488B4520                	mov rax, PARAM(0)	; param e1
 25004 00011FC0 50                      	push rax
 25005 00011FC1 6A01                    	push 1	; arg count
 25006 00011FC3 488B0425[E40D0000]      	mov rax, qword [free_var_3]	; free var char?
 25007 00011FCB 803805                  	cmp byte [rax], T_undefined
 25008 00011FCE 0F8488370000            	je L_error_fvar_undefined
 25009 00011FD4 803804                  	cmp byte [rax], T_closure
 25010 00011FD7 0F8503380000            	jne L_error_non_closure
 25011 00011FDD FF7001                  	push SOB_CLOSURE_ENV(rax)
 25012 00011FE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25013                                  
 25014 00011FE3 483D[02000000]          	cmp rax, sob_boolean_false
 25015 00011FE9 7429                    	je .L_if_else_007b
 25016 00011FEB 488B4528                	mov rax, PARAM(1)	; param e2
 25017 00011FEF 50                      	push rax
 25018 00011FF0 6A01                    	push 1	; arg count
 25019 00011FF2 488B0425[E40D0000]      	mov rax, qword [free_var_3]	; free var char?
 25020 00011FFA 803805                  	cmp byte [rax], T_undefined
 25021 00011FFD 0F8459370000            	je L_error_fvar_undefined
 25022 00012003 803804                  	cmp byte [rax], T_closure
 25023 00012006 0F85D4370000            	jne L_error_non_closure
 25024 0001200C FF7001                  	push SOB_CLOSURE_ENV(rax)
 25025 0001200F FF5009                  	call SOB_CLOSURE_CODE(rax)
 25026                                  
 25027 00012012 EB0A                    	jmp .L_if_end_007b
 25028                                  
 25029                                  	.L_if_else_007b:
 25030 00012014 48B8-                   	mov rax, L_constants + 2
 25030 00012016 [0200000000000000] 
 25031                                  
 25032                                  	.L_if_end_007b:
 25033                                  
 25034 0001201E 483D[02000000]          	cmp rax, sob_boolean_false
 25035 00012024 7464                    	je .L_if_else_007a
 25036                                  	; preparing a tail-call
 25037 00012026 488B4528                	mov rax, PARAM(1)	; param e2
 25038 0001202A 50                      	push rax
 25039 0001202B 488B4520                	mov rax, PARAM(0)	; param e1
 25040 0001202F 50                      	push rax
 25041 00012030 6A02                    	push 2	; arg count
 25042 00012032 488B0425[53160000]      	mov rax, qword [free_var_130]	; free var char=?
 25043 0001203A 803805                  	cmp byte [rax], T_undefined
 25044 0001203D 0F8419370000            	je L_error_fvar_undefined
 25045 00012043 803804                  	cmp byte [rax], T_closure
 25046 00012046 0F8594370000            	jne L_error_non_closure
 25047 0001204C FF7001                  	push SOB_CLOSURE_ENV(rax)
 25048                                  
 25049                                  	; recycling the current frame
 25050 0001204F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25051 00012052 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25052 00012055 B906000000              	mov rcx, 2 + 4
 25053 0001205A 488B5D18                	mov rbx, COUNT
 25054 0001205E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25055 00012063 488D55F8                	lea rdx, [rbp - 8 * 1]
 25056                                  .L_tc_recycle_frame_loop_00d4:
 25057 00012067 4883F900                	cmp rcx, 0
 25058 0001206B 7413                    	je .L_tc_recycle_frame_done_00d4
 25059 0001206D 488B32                  	mov rsi, qword [rdx]
 25060 00012070 488933                  	mov qword [rbx], rsi
 25061 00012073 48FFC9                  	dec rcx
 25062 00012076 4883EB08                	sub rbx, 8 * 1
 25063 0001207A 4883EA08                	sub rdx, 8 * 1
 25064 0001207E EBE7                    	jmp .L_tc_recycle_frame_loop_00d4
 25065                                  .L_tc_recycle_frame_done_00d4:
 25066 00012080 488D6308                	lea rsp, [rbx + 8 * 1]
 25067 00012084 5D                      	pop rbp	; the proc will restore it!
 25068 00012085 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25069                                  
 25070 00012088 EB62                    	jmp .L_if_end_007a
 25071                                  
 25072                                  	.L_if_else_007a:
 25073                                  	; preparing a tail-call
 25074 0001208A 488B4528                	mov rax, PARAM(1)	; param e2
 25075 0001208E 50                      	push rax
 25076 0001208F 488B4520                	mov rax, PARAM(0)	; param e1
 25077 00012093 50                      	push rax
 25078 00012094 6A02                    	push 2	; arg count
 25079 00012096 488B0425[BE110000]      	mov rax, qword [free_var_61]	; free var eq?
 25080 0001209E 803805                  	cmp byte [rax], T_undefined
 25081 000120A1 0F84B5360000            	je L_error_fvar_undefined
 25082 000120A7 803804                  	cmp byte [rax], T_closure
 25083 000120AA 0F8530370000            	jne L_error_non_closure
 25084 000120B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25085                                  
 25086                                  	; recycling the current frame
 25087 000120B3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25088 000120B6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25089 000120B9 B906000000              	mov rcx, 2 + 4
 25090 000120BE 488B5D18                	mov rbx, COUNT
 25091 000120C2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25092 000120C7 488D55F8                	lea rdx, [rbp - 8 * 1]
 25093                                  .L_tc_recycle_frame_loop_00d5:
 25094 000120CB 4883F900                	cmp rcx, 0
 25095 000120CF 7413                    	je .L_tc_recycle_frame_done_00d5
 25096 000120D1 488B32                  	mov rsi, qword [rdx]
 25097 000120D4 488933                  	mov qword [rbx], rsi
 25098 000120D7 48FFC9                  	dec rcx
 25099 000120DA 4883EB08                	sub rbx, 8 * 1
 25100 000120DE 4883EA08                	sub rdx, 8 * 1
 25101 000120E2 EBE7                    	jmp .L_tc_recycle_frame_loop_00d5
 25102                                  .L_tc_recycle_frame_done_00d5:
 25103 000120E4 488D6308                	lea rsp, [rbx + 8 * 1]
 25104 000120E8 5D                      	pop rbp	; the proc will restore it!
 25105 000120E9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25106                                  
 25107                                  	.L_if_end_007a:
 25108                                  
 25109                                  	.L_if_end_0078:
 25110                                  
 25111                                  	.L_if_end_0075:
 25112                                  
 25113                                  	.L_if_end_0072:
 25114                                  
 25115                                  	.L_if_end_006f:
 25116 000120EC C9                      	leave
 25117 000120ED C22000                  	ret AND_KILL_FRAME(2)
 25118                                  .L_lambda_simple_end_009a:	; new closure is in rax
 25119 000120F0 48890425[95180000]      	mov qword [free_var_164], rax
 25120 000120F8 48B8-                   	mov rax, sob_void
 25120 000120FA [0000000000000000] 
 25121                                  
 25122 00012102 4889C7                  	mov rdi, rax
 25123 00012105 E891380000              	call print_sexpr_if_not_void
 25124                                  
 25125 0001210A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25126 0001210F E875370000              	call malloc
 25127 00012114 50                      	push rax
 25128 00012115 BF00000000              	mov rdi, 8 * 0	; new rib
 25129 0001211A E86A370000              	call malloc
 25130 0001211F 50                      	push rax
 25131 00012120 BF08000000              	mov rdi, 8 * 1	; extended env
 25132 00012125 E85F370000              	call malloc
 25133 0001212A 488B7D10                	mov rdi, ENV
 25134 0001212E BE00000000              	mov rsi, 0
 25135 00012133 BA01000000              	mov rdx, 1
 25136                                  .L_lambda_simple_env_loop_009b:	; ext_env[i + 1] <-- env[i]
 25137 00012138 4883FE00                	cmp rsi, 0
 25138 0001213C 7410                    	je .L_lambda_simple_env_end_009b
 25139 0001213E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25140 00012142 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25141 00012146 48FFC6                  	inc rsi
 25142 00012149 48FFC2                  	inc rdx
 25143 0001214C EBEA                    	jmp .L_lambda_simple_env_loop_009b
 25144                                  .L_lambda_simple_env_end_009b:
 25145 0001214E 5B                      	pop rbx
 25146 0001214F BE00000000              	mov rsi, 0
 25147                                  .L_lambda_simple_params_loop_009b:	; copy params
 25148 00012154 4883FE00                	cmp rsi, 0
 25149 00012158 740E                    	je .L_lambda_simple_params_end_009b
 25150 0001215A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25151 0001215F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25152 00012163 48FFC6                  	inc rsi
 25153 00012166 EBEC                    	jmp .L_lambda_simple_params_loop_009b
 25154                                  .L_lambda_simple_params_end_009b:
 25155 00012168 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25156 0001216B 4889C3                  	mov rbx, rax
 25157 0001216E 58                      	pop rax
 25158 0001216F C60004                  	mov byte [rax], T_closure
 25159 00012172 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25160 00012176 48C74009[83210100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009b
 25161 0001217E E997010000              	jmp .L_lambda_simple_end_009b
 25162                                  .L_lambda_simple_code_009b:	; lambda-simple body
 25163 00012183 48837C241002            	cmp qword [rsp + 8 * 2], 2
 25164 00012189 740B                    	je .L_lambda_simple_arity_check_ok_009b
 25165 0001218B FF742410                	push qword [rsp + 8 * 2]
 25166 0001218F 6A02                    	push 2
 25167 00012191 E9AC360000              	jmp L_error_incorrect_arity_simple
 25168                                  .L_lambda_simple_arity_check_ok_009b:
 25169 00012196 C8000000                	enter 0, 0
 25170 0001219A 488B4528                	mov rax, PARAM(1)	; param s
 25171 0001219E 50                      	push rax
 25172 0001219F 6A01                    	push 1	; arg count
 25173 000121A1 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 25174 000121A9 803805                  	cmp byte [rax], T_undefined
 25175 000121AC 0F84AA350000            	je L_error_fvar_undefined
 25176 000121B2 803804                  	cmp byte [rax], T_closure
 25177 000121B5 0F8525360000            	jne L_error_non_closure
 25178 000121BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 25179 000121BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 25180                                  
 25181 000121C1 483D[02000000]          	cmp rax, sob_boolean_false
 25182 000121C7 740F                    	je .L_if_else_007c
 25183 000121C9 48B8-                   	mov rax, L_constants + 2
 25183 000121CB [0200000000000000] 
 25184                                  
 25185 000121D3 E93E010000              	jmp .L_if_end_007c
 25186                                  
 25187                                  	.L_if_else_007c:
 25188 000121D8 488B4520                	mov rax, PARAM(0)	; param a
 25189 000121DC 50                      	push rax
 25190 000121DD 488B4528                	mov rax, PARAM(1)	; param s
 25191 000121E1 50                      	push rax
 25192 000121E2 6A01                    	push 1	; arg count
 25193 000121E4 488B0425[9B120000]      	mov rax, qword [free_var_74]	; free var caar
 25194 000121EC 803805                  	cmp byte [rax], T_undefined
 25195 000121EF 0F8467350000            	je L_error_fvar_undefined
 25196 000121F5 803804                  	cmp byte [rax], T_closure
 25197 000121F8 0F85E2350000            	jne L_error_non_closure
 25198 000121FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 25199 00012201 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25200 00012204 50                      	push rax
 25201 00012205 6A02                    	push 2	; arg count
 25202 00012207 488B0425[BE110000]      	mov rax, qword [free_var_61]	; free var eq?
 25203 0001220F 803805                  	cmp byte [rax], T_undefined
 25204 00012212 0F8444350000            	je L_error_fvar_undefined
 25205 00012218 803804                  	cmp byte [rax], T_closure
 25206 0001221B 0F85BF350000            	jne L_error_non_closure
 25207 00012221 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25208 00012224 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25209                                  
 25210 00012227 483D[02000000]          	cmp rax, sob_boolean_false
 25211 0001222D 7462                    	je .L_if_else_007d
 25212                                  	; preparing a tail-call
 25213 0001222F 488B4528                	mov rax, PARAM(1)	; param s
 25214 00012233 50                      	push rax
 25215 00012234 6A01                    	push 1	; arg count
 25216 00012236 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 25217 0001223E 803805                  	cmp byte [rax], T_undefined
 25218 00012241 0F8415350000            	je L_error_fvar_undefined
 25219 00012247 803804                  	cmp byte [rax], T_closure
 25220 0001224A 0F8590350000            	jne L_error_non_closure
 25221 00012250 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25222                                  
 25223                                  	; recycling the current frame
 25224 00012253 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25225 00012256 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25226 00012259 B905000000              	mov rcx, 1 + 4
 25227 0001225E 488B5D18                	mov rbx, COUNT
 25228 00012262 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25229 00012267 488D55F8                	lea rdx, [rbp - 8 * 1]
 25230                                  .L_tc_recycle_frame_loop_00d6:
 25231 0001226B 4883F900                	cmp rcx, 0
 25232 0001226F 7413                    	je .L_tc_recycle_frame_done_00d6
 25233 00012271 488B32                  	mov rsi, qword [rdx]
 25234 00012274 488933                  	mov qword [rbx], rsi
 25235 00012277 48FFC9                  	dec rcx
 25236 0001227A 4883EB08                	sub rbx, 8 * 1
 25237 0001227E 4883EA08                	sub rdx, 8 * 1
 25238 00012282 EBE7                    	jmp .L_tc_recycle_frame_loop_00d6
 25239                                  .L_tc_recycle_frame_done_00d6:
 25240 00012284 488D6308                	lea rsp, [rbx + 8 * 1]
 25241 00012288 5D                      	pop rbp	; the proc will restore it!
 25242 00012289 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25243                                  
 25244 0001228C E985000000              	jmp .L_if_end_007d
 25245                                  
 25246                                  	.L_if_else_007d:
 25247                                  	; preparing a tail-call
 25248 00012291 488B4528                	mov rax, PARAM(1)	; param s
 25249 00012295 50                      	push rax
 25250 00012296 6A01                    	push 1	; arg count
 25251 00012298 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 25252 000122A0 803805                  	cmp byte [rax], T_undefined
 25253 000122A3 0F84B3340000            	je L_error_fvar_undefined
 25254 000122A9 803804                  	cmp byte [rax], T_closure
 25255 000122AC 0F852E350000            	jne L_error_non_closure
 25256 000122B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25257 000122B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25258 000122B8 50                      	push rax
 25259 000122B9 488B4520                	mov rax, PARAM(0)	; param a
 25260 000122BD 50                      	push rax
 25261 000122BE 6A02                    	push 2	; arg count
 25262 000122C0 488B0425[A6180000]      	mov rax, qword [free_var_165]	; free var assoc
 25263 000122C8 803805                  	cmp byte [rax], T_undefined
 25264 000122CB 0F848B340000            	je L_error_fvar_undefined
 25265 000122D1 803804                  	cmp byte [rax], T_closure
 25266 000122D4 0F8506350000            	jne L_error_non_closure
 25267 000122DA FF7001                  	push SOB_CLOSURE_ENV(rax)
 25268                                  
 25269                                  	; recycling the current frame
 25270 000122DD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25271 000122E0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25272 000122E3 B906000000              	mov rcx, 2 + 4
 25273 000122E8 488B5D18                	mov rbx, COUNT
 25274 000122EC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25275 000122F1 488D55F8                	lea rdx, [rbp - 8 * 1]
 25276                                  .L_tc_recycle_frame_loop_00d7:
 25277 000122F5 4883F900                	cmp rcx, 0
 25278 000122F9 7413                    	je .L_tc_recycle_frame_done_00d7
 25279 000122FB 488B32                  	mov rsi, qword [rdx]
 25280 000122FE 488933                  	mov qword [rbx], rsi
 25281 00012301 48FFC9                  	dec rcx
 25282 00012304 4883EB08                	sub rbx, 8 * 1
 25283 00012308 4883EA08                	sub rdx, 8 * 1
 25284 0001230C EBE7                    	jmp .L_tc_recycle_frame_loop_00d7
 25285                                  .L_tc_recycle_frame_done_00d7:
 25286 0001230E 488D6308                	lea rsp, [rbx + 8 * 1]
 25287 00012312 5D                      	pop rbp	; the proc will restore it!
 25288 00012313 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25289                                  
 25290                                  	.L_if_end_007d:
 25291                                  
 25292                                  	.L_if_end_007c:
 25293 00012316 C9                      	leave
 25294 00012317 C22000                  	ret AND_KILL_FRAME(2)
 25295                                  .L_lambda_simple_end_009b:	; new closure is in rax
 25296 0001231A 48890425[A6180000]      	mov qword [free_var_165], rax
 25297 00012322 48B8-                   	mov rax, sob_void
 25297 00012324 [0000000000000000] 
 25298                                  
 25299 0001232C 4889C7                  	mov rdi, rax
 25300 0001232F E867360000              	call print_sexpr_if_not_void
 25301                                  
 25302 00012334 48B8-                   	mov rax, L_constants + 1881
 25302 00012336 [5907000000000000] 
 25303 0001233E 50                      	push rax
 25304 0001233F 48B8-                   	mov rax, L_constants + 1881
 25304 00012341 [5907000000000000] 
 25305 00012349 50                      	push rax
 25306 0001234A 6A02                    	push 2	; arg count
 25307 0001234C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25308 00012351 E833350000              	call malloc
 25309 00012356 50                      	push rax
 25310 00012357 BF00000000              	mov rdi, 8 * 0	; new rib
 25311 0001235C E828350000              	call malloc
 25312 00012361 50                      	push rax
 25313 00012362 BF08000000              	mov rdi, 8 * 1	; extended env
 25314 00012367 E81D350000              	call malloc
 25315 0001236C 488B7D10                	mov rdi, ENV
 25316 00012370 BE00000000              	mov rsi, 0
 25317 00012375 BA01000000              	mov rdx, 1
 25318                                  .L_lambda_simple_env_loop_009c:	; ext_env[i + 1] <-- env[i]
 25319 0001237A 4883FE00                	cmp rsi, 0
 25320 0001237E 7410                    	je .L_lambda_simple_env_end_009c
 25321 00012380 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25322 00012384 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25323 00012388 48FFC6                  	inc rsi
 25324 0001238B 48FFC2                  	inc rdx
 25325 0001238E EBEA                    	jmp .L_lambda_simple_env_loop_009c
 25326                                  .L_lambda_simple_env_end_009c:
 25327 00012390 5B                      	pop rbx
 25328 00012391 BE00000000              	mov rsi, 0
 25329                                  .L_lambda_simple_params_loop_009c:	; copy params
 25330 00012396 4883FE00                	cmp rsi, 0
 25331 0001239A 740E                    	je .L_lambda_simple_params_end_009c
 25332 0001239C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25333 000123A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25334 000123A5 48FFC6                  	inc rsi
 25335 000123A8 EBEC                    	jmp .L_lambda_simple_params_loop_009c
 25336                                  .L_lambda_simple_params_end_009c:
 25337 000123AA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25338 000123AD 4889C3                  	mov rbx, rax
 25339 000123B0 58                      	pop rax
 25340 000123B1 C60004                  	mov byte [rax], T_closure
 25341 000123B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25342 000123B8 48C74009[C5230100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009c
 25343 000123C0 E99D070000              	jmp .L_lambda_simple_end_009c
 25344                                  .L_lambda_simple_code_009c:	; lambda-simple body
 25345 000123C5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 25346 000123CB 740B                    	je .L_lambda_simple_arity_check_ok_009c
 25347 000123CD FF742410                	push qword [rsp + 8 * 2]
 25348 000123D1 6A02                    	push 2
 25349 000123D3 E96A340000              	jmp L_error_incorrect_arity_simple
 25350                                  .L_lambda_simple_arity_check_ok_009c:
 25351 000123D8 C8000000                	enter 0, 0
 25352                                  
 25353 000123DC BF08000000              	mov rdi, 8
 25354 000123E1 E8A3340000              	call malloc
 25355 000123E6 488B5D20                	mov rbx, PARAM(0)	; param run
 25356 000123EA 488918                  	mov [rax], rbx	; box run
 25357 000123ED 48894520                	mov PARAM(0), rax	;replace param run with box
 25358 000123F1 48B8-                   	mov rax, sob_void
 25358 000123F3 [0000000000000000] 
 25359                                  
 25360                                  
 25361 000123FB BF08000000              	mov rdi, 8
 25362 00012400 E884340000              	call malloc
 25363 00012405 488B5D28                	mov rbx, PARAM(1)	; param add
 25364 00012409 488918                  	mov [rax], rbx	; box add
 25365 0001240C 48894528                	mov PARAM(1), rax	;replace param add with box
 25366 00012410 48B8-                   	mov rax, sob_void
 25366 00012412 [0000000000000000] 
 25367                                  
 25368 0001241A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25369 0001241F E865340000              	call malloc
 25370 00012424 50                      	push rax
 25371 00012425 BF10000000              	mov rdi, 8 * 2	; new rib
 25372 0001242A E85A340000              	call malloc
 25373 0001242F 50                      	push rax
 25374 00012430 BF10000000              	mov rdi, 8 * 2	; extended env
 25375 00012435 E84F340000              	call malloc
 25376 0001243A 488B7D10                	mov rdi, ENV
 25377 0001243E BE00000000              	mov rsi, 0
 25378 00012443 BA01000000              	mov rdx, 1
 25379                                  .L_lambda_simple_env_loop_009d:	; ext_env[i + 1] <-- env[i]
 25380 00012448 4883FE01                	cmp rsi, 1
 25381 0001244C 7410                    	je .L_lambda_simple_env_end_009d
 25382 0001244E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25383 00012452 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25384 00012456 48FFC6                  	inc rsi
 25385 00012459 48FFC2                  	inc rdx
 25386 0001245C EBEA                    	jmp .L_lambda_simple_env_loop_009d
 25387                                  .L_lambda_simple_env_end_009d:
 25388 0001245E 5B                      	pop rbx
 25389 0001245F BE00000000              	mov rsi, 0
 25390                                  .L_lambda_simple_params_loop_009d:	; copy params
 25391 00012464 4883FE02                	cmp rsi, 2
 25392 00012468 740E                    	je .L_lambda_simple_params_end_009d
 25393 0001246A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25394 0001246F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25395 00012473 48FFC6                  	inc rsi
 25396 00012476 EBEC                    	jmp .L_lambda_simple_params_loop_009d
 25397                                  .L_lambda_simple_params_end_009d:
 25398 00012478 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25399 0001247B 4889C3                  	mov rbx, rax
 25400 0001247E 58                      	pop rax
 25401 0001247F C60004                  	mov byte [rax], T_closure
 25402 00012482 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25403 00012486 48C74009[93240100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009d
 25404 0001248E E96A020000              	jmp .L_lambda_simple_end_009d
 25405                                  .L_lambda_simple_code_009d:	; lambda-simple body
 25406 00012493 48837C241003            	cmp qword [rsp + 8 * 2], 3
 25407 00012499 740B                    	je .L_lambda_simple_arity_check_ok_009d
 25408 0001249B FF742410                	push qword [rsp + 8 * 2]
 25409 0001249F 6A03                    	push 3
 25410 000124A1 E99C330000              	jmp L_error_incorrect_arity_simple
 25411                                  .L_lambda_simple_arity_check_ok_009d:
 25412 000124A6 C8000000                	enter 0, 0
 25413 000124AA 488B4530                	mov rax, PARAM(2)	; param s
 25414 000124AE 50                      	push rax
 25415 000124AF 6A01                    	push 1	; arg count
 25416 000124B1 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 25417 000124B9 803805                  	cmp byte [rax], T_undefined
 25418 000124BC 0F849A320000            	je L_error_fvar_undefined
 25419 000124C2 803804                  	cmp byte [rax], T_closure
 25420 000124C5 0F8515330000            	jne L_error_non_closure
 25421 000124CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 25422 000124CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 25423                                  
 25424 000124D1 483D[02000000]          	cmp rax, sob_boolean_false
 25425 000124D7 7409                    	je .L_if_else_007e
 25426 000124D9 488B4520                	mov rax, PARAM(0)	; param target
 25427                                  
 25428 000124DD E917020000              	jmp .L_if_end_007e
 25429                                  
 25430                                  	.L_if_else_007e:
 25431                                  	; preparing a tail-call
 25432 000124E2 488B4530                	mov rax, PARAM(2)	; param s
 25433 000124E6 50                      	push rax
 25434 000124E7 6A01                    	push 1	; arg count
 25435 000124E9 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 25436 000124F1 803805                  	cmp byte [rax], T_undefined
 25437 000124F4 0F8462320000            	je L_error_fvar_undefined
 25438 000124FA 803804                  	cmp byte [rax], T_closure
 25439 000124FD 0F85DD320000            	jne L_error_non_closure
 25440 00012503 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25441 00012506 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25442 00012509 50                      	push rax
 25443 0001250A 6A01                    	push 1	; arg count
 25444 0001250C 488B0425[E30E0000]      	mov rax, qword [free_var_18]	; free var string-length
 25445 00012514 803805                  	cmp byte [rax], T_undefined
 25446 00012517 0F843F320000            	je L_error_fvar_undefined
 25447 0001251D 803804                  	cmp byte [rax], T_closure
 25448 00012520 0F85BA320000            	jne L_error_non_closure
 25449 00012526 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25450 00012529 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25451 0001252C 50                      	push rax
 25452 0001252D 48B8-                   	mov rax, L_constants + 2023
 25452 0001252F [E707000000000000] 
 25453 00012537 50                      	push rax
 25454 00012538 488B4530                	mov rax, PARAM(2)	; param s
 25455 0001253C 50                      	push rax
 25456 0001253D 6A01                    	push 1	; arg count
 25457 0001253F 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 25458 00012547 803805                  	cmp byte [rax], T_undefined
 25459 0001254A 0F840C320000            	je L_error_fvar_undefined
 25460 00012550 803804                  	cmp byte [rax], T_closure
 25461 00012553 0F8587320000            	jne L_error_non_closure
 25462 00012559 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25463 0001255C FF5009                  	call SOB_CLOSURE_CODE(rax)
 25464 0001255F 50                      	push rax
 25465 00012560 488B4528                	mov rax, PARAM(1)	; param i
 25466 00012564 50                      	push rax
 25467 00012565 488B4520                	mov rax, PARAM(0)	; param target
 25468 00012569 50                      	push rax
 25469 0001256A 6A05                    	push 5	; arg count
 25470 0001256C 488B4510                	mov rax, ENV
 25471 00012570 488B00                  	mov rax, qword [rax + 8 * 0]
 25472 00012573 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 25473 00012577 488B00                  	mov rax, qword [rax]
 25474 0001257A 803804                  	cmp byte [rax], T_closure
 25475 0001257D 0F855D320000            	jne L_error_non_closure
 25476 00012583 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25477 00012586 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25478 00012589 50                      	push rax
 25479 0001258A 6A01                    	push 1	; arg count
 25480 0001258C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25481 00012591 E8F3320000              	call malloc
 25482 00012596 50                      	push rax
 25483 00012597 BF18000000              	mov rdi, 8 * 3	; new rib
 25484 0001259C E8E8320000              	call malloc
 25485 000125A1 50                      	push rax
 25486 000125A2 BF18000000              	mov rdi, 8 * 3	; extended env
 25487 000125A7 E8DD320000              	call malloc
 25488 000125AC 488B7D10                	mov rdi, ENV
 25489 000125B0 BE00000000              	mov rsi, 0
 25490 000125B5 BA01000000              	mov rdx, 1
 25491                                  .L_lambda_simple_env_loop_009e:	; ext_env[i + 1] <-- env[i]
 25492 000125BA 4883FE02                	cmp rsi, 2
 25493 000125BE 7410                    	je .L_lambda_simple_env_end_009e
 25494 000125C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25495 000125C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25496 000125C8 48FFC6                  	inc rsi
 25497 000125CB 48FFC2                  	inc rdx
 25498 000125CE EBEA                    	jmp .L_lambda_simple_env_loop_009e
 25499                                  .L_lambda_simple_env_end_009e:
 25500 000125D0 5B                      	pop rbx
 25501 000125D1 BE00000000              	mov rsi, 0
 25502                                  .L_lambda_simple_params_loop_009e:	; copy params
 25503 000125D6 4883FE03                	cmp rsi, 3
 25504 000125DA 740E                    	je .L_lambda_simple_params_end_009e
 25505 000125DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25506 000125E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25507 000125E5 48FFC6                  	inc rsi
 25508 000125E8 EBEC                    	jmp .L_lambda_simple_params_loop_009e
 25509                                  .L_lambda_simple_params_end_009e:
 25510 000125EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25511 000125ED 4889C3                  	mov rbx, rax
 25512 000125F0 58                      	pop rax
 25513 000125F1 C60004                  	mov byte [rax], T_closure
 25514 000125F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25515 000125F8 48C74009[05260100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009e
 25516 00012600 E9AF000000              	jmp .L_lambda_simple_end_009e
 25517                                  .L_lambda_simple_code_009e:	; lambda-simple body
 25518 00012605 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25519 0001260B 740B                    	je .L_lambda_simple_arity_check_ok_009e
 25520 0001260D FF742410                	push qword [rsp + 8 * 2]
 25521 00012611 6A01                    	push 1
 25522 00012613 E92A320000              	jmp L_error_incorrect_arity_simple
 25523                                  .L_lambda_simple_arity_check_ok_009e:
 25524 00012618 C8000000                	enter 0, 0
 25525                                  	; preparing a tail-call
 25526 0001261C 488B4510                	mov rax, ENV
 25527 00012620 488B00                  	mov rax, qword [rax + 8 * 0]
 25528 00012623 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 25529 00012627 50                      	push rax
 25530 00012628 6A01                    	push 1	; arg count
 25531 0001262A 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 25532 00012632 803805                  	cmp byte [rax], T_undefined
 25533 00012635 0F8421310000            	je L_error_fvar_undefined
 25534 0001263B 803804                  	cmp byte [rax], T_closure
 25535 0001263E 0F859C310000            	jne L_error_non_closure
 25536 00012644 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25537 00012647 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25538 0001264A 50                      	push rax
 25539 0001264B 488B4520                	mov rax, PARAM(0)	; param i
 25540 0001264F 50                      	push rax
 25541 00012650 488B4510                	mov rax, ENV
 25542 00012654 488B00                  	mov rax, qword [rax + 8 * 0]
 25543 00012657 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 25544 0001265A 50                      	push rax
 25545 0001265B 6A03                    	push 3	; arg count
 25546 0001265D 488B4510                	mov rax, ENV
 25547 00012661 488B4008                	mov rax, qword [rax + 8 * 1]
 25548 00012665 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25549 00012668 488B00                  	mov rax, qword [rax]
 25550 0001266B 803804                  	cmp byte [rax], T_closure
 25551 0001266E 0F856C310000            	jne L_error_non_closure
 25552 00012674 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25553                                  
 25554                                  	; recycling the current frame
 25555 00012677 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25556 0001267A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25557 0001267D B907000000              	mov rcx, 3 + 4
 25558 00012682 488B5D18                	mov rbx, COUNT
 25559 00012686 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25560 0001268B 488D55F8                	lea rdx, [rbp - 8 * 1]
 25561                                  .L_tc_recycle_frame_loop_00d8:
 25562 0001268F 4883F900                	cmp rcx, 0
 25563 00012693 7413                    	je .L_tc_recycle_frame_done_00d8
 25564 00012695 488B32                  	mov rsi, qword [rdx]
 25565 00012698 488933                  	mov qword [rbx], rsi
 25566 0001269B 48FFC9                  	dec rcx
 25567 0001269E 4883EB08                	sub rbx, 8 * 1
 25568 000126A2 4883EA08                	sub rdx, 8 * 1
 25569 000126A6 EBE7                    	jmp .L_tc_recycle_frame_loop_00d8
 25570                                  .L_tc_recycle_frame_done_00d8:
 25571 000126A8 488D6308                	lea rsp, [rbx + 8 * 1]
 25572 000126AC 5D                      	pop rbp	; the proc will restore it!
 25573 000126AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25574 000126B0 C9                      	leave
 25575 000126B1 C21800                  	ret AND_KILL_FRAME(1)
 25576                                  .L_lambda_simple_end_009e:	; new closure is in rax
 25577 000126B4 803804                  	cmp byte [rax], T_closure
 25578 000126B7 0F8523310000            	jne L_error_non_closure
 25579 000126BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 25580                                  
 25581                                  	; recycling the current frame
 25582 000126C0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25583 000126C3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25584 000126C6 B905000000              	mov rcx, 1 + 4
 25585 000126CB 488B5D18                	mov rbx, COUNT
 25586 000126CF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25587 000126D4 488D55F8                	lea rdx, [rbp - 8 * 1]
 25588                                  .L_tc_recycle_frame_loop_00d9:
 25589 000126D8 4883F900                	cmp rcx, 0
 25590 000126DC 7413                    	je .L_tc_recycle_frame_done_00d9
 25591 000126DE 488B32                  	mov rsi, qword [rdx]
 25592 000126E1 488933                  	mov qword [rbx], rsi
 25593 000126E4 48FFC9                  	dec rcx
 25594 000126E7 4883EB08                	sub rbx, 8 * 1
 25595 000126EB 4883EA08                	sub rdx, 8 * 1
 25596 000126EF EBE7                    	jmp .L_tc_recycle_frame_loop_00d9
 25597                                  .L_tc_recycle_frame_done_00d9:
 25598 000126F1 488D6308                	lea rsp, [rbx + 8 * 1]
 25599 000126F5 5D                      	pop rbp	; the proc will restore it!
 25600 000126F6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25601                                  
 25602                                  	.L_if_end_007e:
 25603 000126F9 C9                      	leave
 25604 000126FA C22800                  	ret AND_KILL_FRAME(3)
 25605                                  .L_lambda_simple_end_009d:	; new closure is in rax
 25606                                  
 25607 000126FD 50                      	push rax
 25608 000126FE 488B4520                	mov rax, PARAM(0)	; param run
 25609                                  
 25610 00012702 8F00                    	pop qword[rax]
 25611 00012704 48B8-                   	mov rax, sob_void
 25611 00012706 [0000000000000000] 
 25612                                  
 25613 0001270E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25614 00012713 E871310000              	call malloc
 25615 00012718 50                      	push rax
 25616 00012719 BF10000000              	mov rdi, 8 * 2	; new rib
 25617 0001271E E866310000              	call malloc
 25618 00012723 50                      	push rax
 25619 00012724 BF10000000              	mov rdi, 8 * 2	; extended env
 25620 00012729 E85B310000              	call malloc
 25621 0001272E 488B7D10                	mov rdi, ENV
 25622 00012732 BE00000000              	mov rsi, 0
 25623 00012737 BA01000000              	mov rdx, 1
 25624                                  .L_lambda_simple_env_loop_009f:	; ext_env[i + 1] <-- env[i]
 25625 0001273C 4883FE01                	cmp rsi, 1
 25626 00012740 7410                    	je .L_lambda_simple_env_end_009f
 25627 00012742 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25628 00012746 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25629 0001274A 48FFC6                  	inc rsi
 25630 0001274D 48FFC2                  	inc rdx
 25631 00012750 EBEA                    	jmp .L_lambda_simple_env_loop_009f
 25632                                  .L_lambda_simple_env_end_009f:
 25633 00012752 5B                      	pop rbx
 25634 00012753 BE00000000              	mov rsi, 0
 25635                                  .L_lambda_simple_params_loop_009f:	; copy params
 25636 00012758 4883FE02                	cmp rsi, 2
 25637 0001275C 740E                    	je .L_lambda_simple_params_end_009f
 25638 0001275E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25639 00012763 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25640 00012767 48FFC6                  	inc rsi
 25641 0001276A EBEC                    	jmp .L_lambda_simple_params_loop_009f
 25642                                  .L_lambda_simple_params_end_009f:
 25643 0001276C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25644 0001276F 4889C3                  	mov rbx, rax
 25645 00012772 58                      	pop rax
 25646 00012773 C60004                  	mov byte [rax], T_closure
 25647 00012776 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25648 0001277A 48C74009[87270100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009f
 25649 00012782 E97C010000              	jmp .L_lambda_simple_end_009f
 25650                                  .L_lambda_simple_code_009f:	; lambda-simple body
 25651 00012787 48837C241005            	cmp qword [rsp + 8 * 2], 5
 25652 0001278D 740B                    	je .L_lambda_simple_arity_check_ok_009f
 25653 0001278F FF742410                	push qword [rsp + 8 * 2]
 25654 00012793 6A05                    	push 5
 25655 00012795 E9A8300000              	jmp L_error_incorrect_arity_simple
 25656                                  .L_lambda_simple_arity_check_ok_009f:
 25657 0001279A C8000000                	enter 0, 0
 25658 0001279E 488B4540                	mov rax, PARAM(4)	; param limit
 25659 000127A2 50                      	push rax
 25660 000127A3 488B4538                	mov rax, PARAM(3)	; param j
 25661 000127A7 50                      	push rax
 25662 000127A8 6A02                    	push 2	; arg count
 25663 000127AA 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 25664 000127B2 803805                  	cmp byte [rax], T_undefined
 25665 000127B5 0F84A12F0000            	je L_error_fvar_undefined
 25666 000127BB 803804                  	cmp byte [rax], T_closure
 25667 000127BE 0F851C300000            	jne L_error_non_closure
 25668 000127C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25669 000127C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25670                                  
 25671 000127CA 483D[02000000]          	cmp rax, sob_boolean_false
 25672 000127D0 0F8425010000            	je .L_if_else_007f
 25673 000127D6 488B4538                	mov rax, PARAM(3)	; param j
 25674 000127DA 50                      	push rax
 25675 000127DB 488B4530                	mov rax, PARAM(2)	; param str
 25676 000127DF 50                      	push rax
 25677 000127E0 6A02                    	push 2	; arg count
 25678 000127E2 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 25679 000127EA 803805                  	cmp byte [rax], T_undefined
 25680 000127ED 0F84692F0000            	je L_error_fvar_undefined
 25681 000127F3 803804                  	cmp byte [rax], T_closure
 25682 000127F6 0F85E42F0000            	jne L_error_non_closure
 25683 000127FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 25684 000127FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 25685 00012802 50                      	push rax
 25686 00012803 488B4528                	mov rax, PARAM(1)	; param i
 25687 00012807 50                      	push rax
 25688 00012808 488B4520                	mov rax, PARAM(0)	; param target
 25689 0001280C 50                      	push rax
 25690 0001280D 6A03                    	push 3	; arg count
 25691 0001280F 488B0425[69110000]      	mov rax, qword [free_var_56]	; free var string-set!
 25692 00012817 803805                  	cmp byte [rax], T_undefined
 25693 0001281A 0F843C2F0000            	je L_error_fvar_undefined
 25694 00012820 803804                  	cmp byte [rax], T_closure
 25695 00012823 0F85B72F0000            	jne L_error_non_closure
 25696 00012829 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25697 0001282C FF5009                  	call SOB_CLOSURE_CODE(rax)
 25698                                  
 25699                                  	; preparing a tail-call
 25700 0001282F 488B4540                	mov rax, PARAM(4)	; param limit
 25701 00012833 50                      	push rax
 25702 00012834 48B8-                   	mov rax, L_constants + 2158
 25702 00012836 [6E08000000000000] 
 25703 0001283E 50                      	push rax
 25704 0001283F 488B4538                	mov rax, PARAM(3)	; param j
 25705 00012843 50                      	push rax
 25706 00012844 6A02                    	push 2	; arg count
 25707 00012846 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 25708 0001284E 803805                  	cmp byte [rax], T_undefined
 25709 00012851 0F84052F0000            	je L_error_fvar_undefined
 25710 00012857 803804                  	cmp byte [rax], T_closure
 25711 0001285A 0F85802F0000            	jne L_error_non_closure
 25712 00012860 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25713 00012863 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25714 00012866 50                      	push rax
 25715 00012867 488B4530                	mov rax, PARAM(2)	; param str
 25716 0001286B 50                      	push rax
 25717 0001286C 48B8-                   	mov rax, L_constants + 2158
 25717 0001286E [6E08000000000000] 
 25718 00012876 50                      	push rax
 25719 00012877 488B4528                	mov rax, PARAM(1)	; param i
 25720 0001287B 50                      	push rax
 25721 0001287C 6A02                    	push 2	; arg count
 25722 0001287E 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 25723 00012886 803805                  	cmp byte [rax], T_undefined
 25724 00012889 0F84CD2E0000            	je L_error_fvar_undefined
 25725 0001288F 803804                  	cmp byte [rax], T_closure
 25726 00012892 0F85482F0000            	jne L_error_non_closure
 25727 00012898 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25728 0001289B FF5009                  	call SOB_CLOSURE_CODE(rax)
 25729 0001289E 50                      	push rax
 25730 0001289F 488B4520                	mov rax, PARAM(0)	; param target
 25731 000128A3 50                      	push rax
 25732 000128A4 6A05                    	push 5	; arg count
 25733 000128A6 488B4510                	mov rax, ENV
 25734 000128AA 488B00                  	mov rax, qword [rax + 8 * 0]
 25735 000128AD 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 25736 000128B1 488B00                  	mov rax, qword [rax]
 25737 000128B4 803804                  	cmp byte [rax], T_closure
 25738 000128B7 0F85232F0000            	jne L_error_non_closure
 25739 000128BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 25740                                  
 25741                                  	; recycling the current frame
 25742 000128C0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25743 000128C3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25744 000128C6 B909000000              	mov rcx, 5 + 4
 25745 000128CB 488B5D18                	mov rbx, COUNT
 25746 000128CF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25747 000128D4 488D55F8                	lea rdx, [rbp - 8 * 1]
 25748                                  .L_tc_recycle_frame_loop_00da:
 25749 000128D8 4883F900                	cmp rcx, 0
 25750 000128DC 7413                    	je .L_tc_recycle_frame_done_00da
 25751 000128DE 488B32                  	mov rsi, qword [rdx]
 25752 000128E1 488933                  	mov qword [rbx], rsi
 25753 000128E4 48FFC9                  	dec rcx
 25754 000128E7 4883EB08                	sub rbx, 8 * 1
 25755 000128EB 4883EA08                	sub rdx, 8 * 1
 25756 000128EF EBE7                    	jmp .L_tc_recycle_frame_loop_00da
 25757                                  .L_tc_recycle_frame_done_00da:
 25758 000128F1 488D6308                	lea rsp, [rbx + 8 * 1]
 25759 000128F5 5D                      	pop rbp	; the proc will restore it!
 25760 000128F6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25761                                  
 25762 000128F9 EB04                    	jmp .L_if_end_007f
 25763                                  
 25764                                  	.L_if_else_007f:
 25765 000128FB 488B4528                	mov rax, PARAM(1)	; param i
 25766                                  
 25767                                  	.L_if_end_007f:
 25768 000128FF C9                      	leave
 25769 00012900 C23800                  	ret AND_KILL_FRAME(5)
 25770                                  .L_lambda_simple_end_009f:	; new closure is in rax
 25771                                  
 25772 00012903 50                      	push rax
 25773 00012904 488B4528                	mov rax, PARAM(1)	; param add
 25774                                  
 25775 00012908 8F00                    	pop qword[rax]
 25776 0001290A 48B8-                   	mov rax, sob_void
 25776 0001290C [0000000000000000] 
 25777                                  
 25778 00012914 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25779 00012919 E86B2F0000              	call malloc
 25780 0001291E 50                      	push rax
 25781 0001291F BF10000000              	mov rdi, 8 * 2	; new rib
 25782 00012924 E8602F0000              	call malloc
 25783 00012929 50                      	push rax
 25784 0001292A BF10000000              	mov rdi, 8 * 2	; extended env
 25785 0001292F E8552F0000              	call malloc
 25786 00012934 488B7D10                	mov rdi, ENV
 25787 00012938 BE00000000              	mov rsi, 0
 25788 0001293D BA01000000              	mov rdx, 1
 25789                                  .L_lambda_opt_env_loop_0018:	; ext_env[i + 1] <-- env[i]
 25790 00012942 4883FE01                	cmp rsi, 1
 25791 00012946 7410                    	je .L_lambda_opt_env_end_0018
 25792 00012948 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25793 0001294C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25794 00012950 48FFC6                  	inc rsi
 25795 00012953 48FFC2                  	inc rdx
 25796 00012956 EBEA                    	jmp .L_lambda_opt_env_loop_0018
 25797                                  .L_lambda_opt_env_end_0018:
 25798 00012958 5B                      	pop rbx
 25799 00012959 BE00000000              	mov rsi, 0
 25800                                  .L_lambda_opt_params_loop_0018:	; copy params
 25801 0001295E 4883FE02                	cmp rsi, 2
 25802 00012962 740E                    	je .L_lambda_opt_params_end_0018
 25803 00012964 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25804 00012969 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25805 0001296D 48FFC6                  	inc rsi
 25806 00012970 EBEC                    	jmp .L_lambda_opt_params_loop_0018
 25807                                  .L_lambda_opt_params_end_0018:
 25808 00012972 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25809 00012975 4889C3                  	mov rbx, rax
 25810 00012978 58                      	pop rax
 25811 00012979 C60004                  	mov byte [rax], T_closure
 25812 0001297C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25813 00012980 48C74009[8D290100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0018
 25814 00012988 E9D1010000              	jmp .L_lambda_opt_end_0018
 25815                                  .L_lambda_opt_code_0018:	; lambda-simple body
 25816 0001298D 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 25817 00012993 740D                    	je .L_lambda_opt_arity_check_exact_0018 ;	 if equal, go to exact arity
 25818 00012995 7F42                    	jg .L_lambda_opt_arity_check_more_0018 ;	 if greater than, go to arity more
 25819 00012997 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 25820 0001299B 6A00                     	push 0
 25821 0001299D E9B42E0000              	jmp L_error_incorrect_arity_opt
 25822                                  	.L_lambda_opt_arity_check_exact_0018:
 25823 000129A2 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 25824 000129A7 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 25825 000129AC 4883EC08                	sub rsp, 8
 25826 000129B0 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 25827                                  	.L_lambda_opt_exact_shifting_loop_0018:
 25828 000129B4 488B5108                	mov rdx, [rcx + 8]
 25829 000129B8 488911                  	mov [rcx], rdx
 25830 000129BB 4883C108                	add rcx, 8
 25831 000129BF 4839CB                  	cmp rbx, rcx
 25832 000129C2 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0018
 25833                                  	.L_lambda_opt_exact_shifting_loop_end_0018:
 25834 000129C4 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 25835 000129CB 4883C001                	add rax, 1 ; 	arg count += 1
 25836 000129CF 4889442410              	mov qword [rsp + 8 * 2], rax
 25837 000129D4 E987000000              	jmp .L_lambda_opt_stack_adjusted_0018
 25838                                  	.L_lambda_opt_arity_check_more_0018:
 25839 000129D9 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 25839 000129DB [0100000000000000] 
 25840 000129E3 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 25841 000129E9 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0018
 25842                                  	.L_lambda_opt_stack_shrink_loop_0018:
 25843 000129EB BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 25844 000129F0 E8942E0000              	call malloc ;	 allocated memory for the optional scheme list
 25845 000129F5 C60021                  	mov byte[rax], T_pair ;	 set type pair
 25846 000129F8 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 25847 000129FC 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 25848 000129FF 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 25849 00012A04 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 25850 00012A09 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 25851 00012A0D 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 25852                                  	.L_lambda_opt_more_shifting_loop_0018:
 25853 00012A12 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 25854 00012A15 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 25855 00012A19 4883EB08                	sub rbx, 8 
 25856 00012A1D 4839DC                  	cmp rsp, rbx
 25857 00012A20 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0018
 25858                                  	.L_lambda_opt_more_shifting_loop_end_0018:
 25859 00012A22 4883C408                	add rsp, 8 ;	 update rsp
 25860 00012A26 488B5C2410              	mov rbx, [rsp + 8 * 2]
 25861 00012A2B 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 25862 00012A2F 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 25863 00012A34 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25864 00012A3A 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0018
 25865                                  	.L_lambda_opt_stack_shrink_loop_exit_0018:
 25866 00012A3C 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 25867 00012A41 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 25868 00012A46 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 25869 00012A4B E8392E0000              	call malloc ;	 allocated memory for the optional scheme list
 25870 00012A50 C60021                  	mov byte[rax], T_pair ;	 set type pair
 25871 00012A53 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 25872 00012A57 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 25873 00012A5B 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 25874                                  	.L_lambda_opt_stack_adjusted_0018:
 25875 00012A60 C8000000                	enter 0, 0
 25876                                  	; preparing a tail-call
 25877 00012A64 488B4520                	mov rax, PARAM(0)	; param strings
 25878 00012A68 50                      	push rax
 25879 00012A69 48B8-                   	mov rax, L_constants + 2023
 25879 00012A6B [E707000000000000] 
 25880 00012A73 50                      	push rax
 25881 00012A74 488B4520                	mov rax, PARAM(0)	; param strings
 25882 00012A78 50                      	push rax
 25883 00012A79 488B0425[E30E0000]      	mov rax, qword [free_var_18]	; free var string-length
 25884 00012A81 803805                  	cmp byte [rax], T_undefined
 25885 00012A84 0F84D22C0000            	je L_error_fvar_undefined
 25886 00012A8A 50                      	push rax
 25887 00012A8B 6A02                    	push 2	; arg count
 25888 00012A8D 488B0425[EE140000]      	mov rax, qword [free_var_109]	; free var map
 25889 00012A95 803805                  	cmp byte [rax], T_undefined
 25890 00012A98 0F84BE2C0000            	je L_error_fvar_undefined
 25891 00012A9E 803804                  	cmp byte [rax], T_closure
 25892 00012AA1 0F85392D0000            	jne L_error_non_closure
 25893 00012AA7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25894 00012AAA FF5009                  	call SOB_CLOSURE_CODE(rax)
 25895 00012AAD 50                      	push rax
 25896 00012AAE 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 25897 00012AB6 803805                  	cmp byte [rax], T_undefined
 25898 00012AB9 0F849D2C0000            	je L_error_fvar_undefined
 25899 00012ABF 50                      	push rax
 25900 00012AC0 6A02                    	push 2	; arg count
 25901 00012AC2 488B0425[CC140000]      	mov rax, qword [free_var_107]	; free var apply
 25902 00012ACA 803805                  	cmp byte [rax], T_undefined
 25903 00012ACD 0F84892C0000            	je L_error_fvar_undefined
 25904 00012AD3 803804                  	cmp byte [rax], T_closure
 25905 00012AD6 0F85042D0000            	jne L_error_non_closure
 25906 00012ADC FF7001                  	push SOB_CLOSURE_ENV(rax)
 25907 00012ADF FF5009                  	call SOB_CLOSURE_CODE(rax)
 25908 00012AE2 50                      	push rax
 25909 00012AE3 6A01                    	push 1	; arg count
 25910 00012AE5 488B0425[8B110000]      	mov rax, qword [free_var_58]	; free var make-string
 25911 00012AED 803805                  	cmp byte [rax], T_undefined
 25912 00012AF0 0F84662C0000            	je L_error_fvar_undefined
 25913 00012AF6 803804                  	cmp byte [rax], T_closure
 25914 00012AF9 0F85E12C0000            	jne L_error_non_closure
 25915 00012AFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 25916 00012B02 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25917 00012B05 50                      	push rax
 25918 00012B06 6A03                    	push 3	; arg count
 25919 00012B08 488B4510                	mov rax, ENV
 25920 00012B0C 488B00                  	mov rax, qword [rax + 8 * 0]
 25921 00012B0F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25922 00012B12 488B00                  	mov rax, qword [rax]
 25923 00012B15 803804                  	cmp byte [rax], T_closure
 25924 00012B18 0F85C22C0000            	jne L_error_non_closure
 25925 00012B1E FF7001                  	push SOB_CLOSURE_ENV(rax)
 25926                                  
 25927                                  	; recycling the current frame
 25928 00012B21 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25929 00012B24 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25930 00012B27 B907000000              	mov rcx, 3 + 4
 25931 00012B2C 488B5D18                	mov rbx, COUNT
 25932 00012B30 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25933 00012B35 488D55F8                	lea rdx, [rbp - 8 * 1]
 25934                                  .L_tc_recycle_frame_loop_00db:
 25935 00012B39 4883F900                	cmp rcx, 0
 25936 00012B3D 7413                    	je .L_tc_recycle_frame_done_00db
 25937 00012B3F 488B32                  	mov rsi, qword [rdx]
 25938 00012B42 488933                  	mov qword [rbx], rsi
 25939 00012B45 48FFC9                  	dec rcx
 25940 00012B48 4883EB08                	sub rbx, 8 * 1
 25941 00012B4C 4883EA08                	sub rdx, 8 * 1
 25942 00012B50 EBE7                    	jmp .L_tc_recycle_frame_loop_00db
 25943                                  .L_tc_recycle_frame_done_00db:
 25944 00012B52 488D6308                	lea rsp, [rbx + 8 * 1]
 25945 00012B56 5D                      	pop rbp	; the proc will restore it!
 25946 00012B57 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25947 00012B5A C9                      	leave
 25948 00012B5B C21800                  	ret AND_KILL_FRAME(1)
 25949                                  .L_lambda_opt_end_0018:	; new closure is in rax
 25950 00012B5E C9                      	leave
 25951 00012B5F C22000                  	ret AND_KILL_FRAME(2)
 25952                                  .L_lambda_simple_end_009c:	; new closure is in rax
 25953 00012B62 803804                  	cmp byte [rax], T_closure
 25954 00012B65 0F85752C0000            	jne L_error_non_closure
 25955 00012B6B FF7001                  	push SOB_CLOSURE_ENV(rax)
 25956 00012B6E FF5009                  	call SOB_CLOSURE_CODE(rax)
 25957 00012B71 48890425[B7180000]      	mov qword [free_var_166], rax
 25958 00012B79 48B8-                   	mov rax, sob_void
 25958 00012B7B [0000000000000000] 
 25959                                  
 25960 00012B83 4889C7                  	mov rdi, rax
 25961 00012B86 E8102E0000              	call print_sexpr_if_not_void
 25962                                  
 25963 00012B8B 48B8-                   	mov rax, L_constants + 1881
 25963 00012B8D [5907000000000000] 
 25964 00012B95 50                      	push rax
 25965 00012B96 48B8-                   	mov rax, L_constants + 1881
 25965 00012B98 [5907000000000000] 
 25966 00012BA0 50                      	push rax
 25967 00012BA1 6A02                    	push 2	; arg count
 25968 00012BA3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25969 00012BA8 E8DC2C0000              	call malloc
 25970 00012BAD 50                      	push rax
 25971 00012BAE BF00000000              	mov rdi, 8 * 0	; new rib
 25972 00012BB3 E8D12C0000              	call malloc
 25973 00012BB8 50                      	push rax
 25974 00012BB9 BF08000000              	mov rdi, 8 * 1	; extended env
 25975 00012BBE E8C62C0000              	call malloc
 25976 00012BC3 488B7D10                	mov rdi, ENV
 25977 00012BC7 BE00000000              	mov rsi, 0
 25978 00012BCC BA01000000              	mov rdx, 1
 25979                                  .L_lambda_simple_env_loop_00a0:	; ext_env[i + 1] <-- env[i]
 25980 00012BD1 4883FE00                	cmp rsi, 0
 25981 00012BD5 7410                    	je .L_lambda_simple_env_end_00a0
 25982 00012BD7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25983 00012BDB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25984 00012BDF 48FFC6                  	inc rsi
 25985 00012BE2 48FFC2                  	inc rdx
 25986 00012BE5 EBEA                    	jmp .L_lambda_simple_env_loop_00a0
 25987                                  .L_lambda_simple_env_end_00a0:
 25988 00012BE7 5B                      	pop rbx
 25989 00012BE8 BE00000000              	mov rsi, 0
 25990                                  .L_lambda_simple_params_loop_00a0:	; copy params
 25991 00012BED 4883FE00                	cmp rsi, 0
 25992 00012BF1 740E                    	je .L_lambda_simple_params_end_00a0
 25993 00012BF3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25994 00012BF8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25995 00012BFC 48FFC6                  	inc rsi
 25996 00012BFF EBEC                    	jmp .L_lambda_simple_params_loop_00a0
 25997                                  .L_lambda_simple_params_end_00a0:
 25998 00012C01 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25999 00012C04 4889C3                  	mov rbx, rax
 26000 00012C07 58                      	pop rax
 26001 00012C08 C60004                  	mov byte [rax], T_closure
 26002 00012C0B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26003 00012C0F 48C74009[1C2C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a0
 26004 00012C17 E99D070000              	jmp .L_lambda_simple_end_00a0
 26005                                  .L_lambda_simple_code_00a0:	; lambda-simple body
 26006 00012C1C 48837C241002            	cmp qword [rsp + 8 * 2], 2
 26007 00012C22 740B                    	je .L_lambda_simple_arity_check_ok_00a0
 26008 00012C24 FF742410                	push qword [rsp + 8 * 2]
 26009 00012C28 6A02                    	push 2
 26010 00012C2A E9132C0000              	jmp L_error_incorrect_arity_simple
 26011                                  .L_lambda_simple_arity_check_ok_00a0:
 26012 00012C2F C8000000                	enter 0, 0
 26013                                  
 26014 00012C33 BF08000000              	mov rdi, 8
 26015 00012C38 E84C2C0000              	call malloc
 26016 00012C3D 488B5D20                	mov rbx, PARAM(0)	; param run
 26017 00012C41 488918                  	mov [rax], rbx	; box run
 26018 00012C44 48894520                	mov PARAM(0), rax	;replace param run with box
 26019 00012C48 48B8-                   	mov rax, sob_void
 26019 00012C4A [0000000000000000] 
 26020                                  
 26021                                  
 26022 00012C52 BF08000000              	mov rdi, 8
 26023 00012C57 E82D2C0000              	call malloc
 26024 00012C5C 488B5D28                	mov rbx, PARAM(1)	; param add
 26025 00012C60 488918                  	mov [rax], rbx	; box add
 26026 00012C63 48894528                	mov PARAM(1), rax	;replace param add with box
 26027 00012C67 48B8-                   	mov rax, sob_void
 26027 00012C69 [0000000000000000] 
 26028                                  
 26029 00012C71 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26030 00012C76 E80E2C0000              	call malloc
 26031 00012C7B 50                      	push rax
 26032 00012C7C BF10000000              	mov rdi, 8 * 2	; new rib
 26033 00012C81 E8032C0000              	call malloc
 26034 00012C86 50                      	push rax
 26035 00012C87 BF10000000              	mov rdi, 8 * 2	; extended env
 26036 00012C8C E8F82B0000              	call malloc
 26037 00012C91 488B7D10                	mov rdi, ENV
 26038 00012C95 BE00000000              	mov rsi, 0
 26039 00012C9A BA01000000              	mov rdx, 1
 26040                                  .L_lambda_simple_env_loop_00a1:	; ext_env[i + 1] <-- env[i]
 26041 00012C9F 4883FE01                	cmp rsi, 1
 26042 00012CA3 7410                    	je .L_lambda_simple_env_end_00a1
 26043 00012CA5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26044 00012CA9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26045 00012CAD 48FFC6                  	inc rsi
 26046 00012CB0 48FFC2                  	inc rdx
 26047 00012CB3 EBEA                    	jmp .L_lambda_simple_env_loop_00a1
 26048                                  .L_lambda_simple_env_end_00a1:
 26049 00012CB5 5B                      	pop rbx
 26050 00012CB6 BE00000000              	mov rsi, 0
 26051                                  .L_lambda_simple_params_loop_00a1:	; copy params
 26052 00012CBB 4883FE02                	cmp rsi, 2
 26053 00012CBF 740E                    	je .L_lambda_simple_params_end_00a1
 26054 00012CC1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26055 00012CC6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26056 00012CCA 48FFC6                  	inc rsi
 26057 00012CCD EBEC                    	jmp .L_lambda_simple_params_loop_00a1
 26058                                  .L_lambda_simple_params_end_00a1:
 26059 00012CCF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26060 00012CD2 4889C3                  	mov rbx, rax
 26061 00012CD5 58                      	pop rax
 26062 00012CD6 C60004                  	mov byte [rax], T_closure
 26063 00012CD9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26064 00012CDD 48C74009[EA2C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a1
 26065 00012CE5 E96A020000              	jmp .L_lambda_simple_end_00a1
 26066                                  .L_lambda_simple_code_00a1:	; lambda-simple body
 26067 00012CEA 48837C241003            	cmp qword [rsp + 8 * 2], 3
 26068 00012CF0 740B                    	je .L_lambda_simple_arity_check_ok_00a1
 26069 00012CF2 FF742410                	push qword [rsp + 8 * 2]
 26070 00012CF6 6A03                    	push 3
 26071 00012CF8 E9452B0000              	jmp L_error_incorrect_arity_simple
 26072                                  .L_lambda_simple_arity_check_ok_00a1:
 26073 00012CFD C8000000                	enter 0, 0
 26074 00012D01 488B4530                	mov rax, PARAM(2)	; param s
 26075 00012D05 50                      	push rax
 26076 00012D06 6A01                    	push 1	; arg count
 26077 00012D08 488B0425[B10D0000]      	mov rax, qword [free_var_0]	; free var null?
 26078 00012D10 803805                  	cmp byte [rax], T_undefined
 26079 00012D13 0F84432A0000            	je L_error_fvar_undefined
 26080 00012D19 803804                  	cmp byte [rax], T_closure
 26081 00012D1C 0F85BE2A0000            	jne L_error_non_closure
 26082 00012D22 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26083 00012D25 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26084                                  
 26085 00012D28 483D[02000000]          	cmp rax, sob_boolean_false
 26086 00012D2E 7409                    	je .L_if_else_0080
 26087 00012D30 488B4520                	mov rax, PARAM(0)	; param target
 26088                                  
 26089 00012D34 E917020000              	jmp .L_if_end_0080
 26090                                  
 26091                                  	.L_if_else_0080:
 26092                                  	; preparing a tail-call
 26093 00012D39 488B4530                	mov rax, PARAM(2)	; param s
 26094 00012D3D 50                      	push rax
 26095 00012D3E 6A01                    	push 1	; arg count
 26096 00012D40 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 26097 00012D48 803805                  	cmp byte [rax], T_undefined
 26098 00012D4B 0F840B2A0000            	je L_error_fvar_undefined
 26099 00012D51 803804                  	cmp byte [rax], T_closure
 26100 00012D54 0F85862A0000            	jne L_error_non_closure
 26101 00012D5A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26102 00012D5D FF5009                  	call SOB_CLOSURE_CODE(rax)
 26103 00012D60 50                      	push rax
 26104 00012D61 6A01                    	push 1	; arg count
 26105 00012D63 488B0425[F40E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 26106 00012D6B 803805                  	cmp byte [rax], T_undefined
 26107 00012D6E 0F84E8290000            	je L_error_fvar_undefined
 26108 00012D74 803804                  	cmp byte [rax], T_closure
 26109 00012D77 0F85632A0000            	jne L_error_non_closure
 26110 00012D7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26111 00012D80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26112 00012D83 50                      	push rax
 26113 00012D84 48B8-                   	mov rax, L_constants + 2023
 26113 00012D86 [E707000000000000] 
 26114 00012D8E 50                      	push rax
 26115 00012D8F 488B4530                	mov rax, PARAM(2)	; param s
 26116 00012D93 50                      	push rax
 26117 00012D94 6A01                    	push 1	; arg count
 26118 00012D96 488B0425[C10E0000]      	mov rax, qword [free_var_16]	; free var car
 26119 00012D9E 803805                  	cmp byte [rax], T_undefined
 26120 00012DA1 0F84B5290000            	je L_error_fvar_undefined
 26121 00012DA7 803804                  	cmp byte [rax], T_closure
 26122 00012DAA 0F85302A0000            	jne L_error_non_closure
 26123 00012DB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26124 00012DB3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26125 00012DB6 50                      	push rax
 26126 00012DB7 488B4528                	mov rax, PARAM(1)	; param i
 26127 00012DBB 50                      	push rax
 26128 00012DBC 488B4520                	mov rax, PARAM(0)	; param target
 26129 00012DC0 50                      	push rax
 26130 00012DC1 6A05                    	push 5	; arg count
 26131 00012DC3 488B4510                	mov rax, ENV
 26132 00012DC7 488B00                  	mov rax, qword [rax + 8 * 0]
 26133 00012DCA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 26134 00012DCE 488B00                  	mov rax, qword [rax]
 26135 00012DD1 803804                  	cmp byte [rax], T_closure
 26136 00012DD4 0F85062A0000            	jne L_error_non_closure
 26137 00012DDA FF7001                  	push SOB_CLOSURE_ENV(rax)
 26138 00012DDD FF5009                  	call SOB_CLOSURE_CODE(rax)
 26139 00012DE0 50                      	push rax
 26140 00012DE1 6A01                    	push 1	; arg count
 26141 00012DE3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26142 00012DE8 E89C2A0000              	call malloc
 26143 00012DED 50                      	push rax
 26144 00012DEE BF18000000              	mov rdi, 8 * 3	; new rib
 26145 00012DF3 E8912A0000              	call malloc
 26146 00012DF8 50                      	push rax
 26147 00012DF9 BF18000000              	mov rdi, 8 * 3	; extended env
 26148 00012DFE E8862A0000              	call malloc
 26149 00012E03 488B7D10                	mov rdi, ENV
 26150 00012E07 BE00000000              	mov rsi, 0
 26151 00012E0C BA01000000              	mov rdx, 1
 26152                                  .L_lambda_simple_env_loop_00a2:	; ext_env[i + 1] <-- env[i]
 26153 00012E11 4883FE02                	cmp rsi, 2
 26154 00012E15 7410                    	je .L_lambda_simple_env_end_00a2
 26155 00012E17 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26156 00012E1B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26157 00012E1F 48FFC6                  	inc rsi
 26158 00012E22 48FFC2                  	inc rdx
 26159 00012E25 EBEA                    	jmp .L_lambda_simple_env_loop_00a2
 26160                                  .L_lambda_simple_env_end_00a2:
 26161 00012E27 5B                      	pop rbx
 26162 00012E28 BE00000000              	mov rsi, 0
 26163                                  .L_lambda_simple_params_loop_00a2:	; copy params
 26164 00012E2D 4883FE03                	cmp rsi, 3
 26165 00012E31 740E                    	je .L_lambda_simple_params_end_00a2
 26166 00012E33 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26167 00012E38 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26168 00012E3C 48FFC6                  	inc rsi
 26169 00012E3F EBEC                    	jmp .L_lambda_simple_params_loop_00a2
 26170                                  .L_lambda_simple_params_end_00a2:
 26171 00012E41 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26172 00012E44 4889C3                  	mov rbx, rax
 26173 00012E47 58                      	pop rax
 26174 00012E48 C60004                  	mov byte [rax], T_closure
 26175 00012E4B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26176 00012E4F 48C74009[5C2E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a2
 26177 00012E57 E9AF000000              	jmp .L_lambda_simple_end_00a2
 26178                                  .L_lambda_simple_code_00a2:	; lambda-simple body
 26179 00012E5C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26180 00012E62 740B                    	je .L_lambda_simple_arity_check_ok_00a2
 26181 00012E64 FF742410                	push qword [rsp + 8 * 2]
 26182 00012E68 6A01                    	push 1
 26183 00012E6A E9D3290000              	jmp L_error_incorrect_arity_simple
 26184                                  .L_lambda_simple_arity_check_ok_00a2:
 26185 00012E6F C8000000                	enter 0, 0
 26186                                  	; preparing a tail-call
 26187 00012E73 488B4510                	mov rax, ENV
 26188 00012E77 488B00                  	mov rax, qword [rax + 8 * 0]
 26189 00012E7A 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 26190 00012E7E 50                      	push rax
 26191 00012E7F 6A01                    	push 1	; arg count
 26192 00012E81 488B0425[D20E0000]      	mov rax, qword [free_var_17]	; free var cdr
 26193 00012E89 803805                  	cmp byte [rax], T_undefined
 26194 00012E8C 0F84CA280000            	je L_error_fvar_undefined
 26195 00012E92 803804                  	cmp byte [rax], T_closure
 26196 00012E95 0F8545290000            	jne L_error_non_closure
 26197 00012E9B FF7001                  	push SOB_CLOSURE_ENV(rax)
 26198 00012E9E FF5009                  	call SOB_CLOSURE_CODE(rax)
 26199 00012EA1 50                      	push rax
 26200 00012EA2 488B4520                	mov rax, PARAM(0)	; param i
 26201 00012EA6 50                      	push rax
 26202 00012EA7 488B4510                	mov rax, ENV
 26203 00012EAB 488B00                  	mov rax, qword [rax + 8 * 0]
 26204 00012EAE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 26205 00012EB1 50                      	push rax
 26206 00012EB2 6A03                    	push 3	; arg count
 26207 00012EB4 488B4510                	mov rax, ENV
 26208 00012EB8 488B4008                	mov rax, qword [rax + 8 * 1]
 26209 00012EBC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 26210 00012EBF 488B00                  	mov rax, qword [rax]
 26211 00012EC2 803804                  	cmp byte [rax], T_closure
 26212 00012EC5 0F8515290000            	jne L_error_non_closure
 26213 00012ECB FF7001                  	push SOB_CLOSURE_ENV(rax)
 26214                                  
 26215                                  	; recycling the current frame
 26216 00012ECE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26217 00012ED1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26218 00012ED4 B907000000              	mov rcx, 3 + 4
 26219 00012ED9 488B5D18                	mov rbx, COUNT
 26220 00012EDD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26221 00012EE2 488D55F8                	lea rdx, [rbp - 8 * 1]
 26222                                  .L_tc_recycle_frame_loop_00dc:
 26223 00012EE6 4883F900                	cmp rcx, 0
 26224 00012EEA 7413                    	je .L_tc_recycle_frame_done_00dc
 26225 00012EEC 488B32                  	mov rsi, qword [rdx]
 26226 00012EEF 488933                  	mov qword [rbx], rsi
 26227 00012EF2 48FFC9                  	dec rcx
 26228 00012EF5 4883EB08                	sub rbx, 8 * 1
 26229 00012EF9 4883EA08                	sub rdx, 8 * 1
 26230 00012EFD EBE7                    	jmp .L_tc_recycle_frame_loop_00dc
 26231                                  .L_tc_recycle_frame_done_00dc:
 26232 00012EFF 488D6308                	lea rsp, [rbx + 8 * 1]
 26233 00012F03 5D                      	pop rbp	; the proc will restore it!
 26234 00012F04 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26235 00012F07 C9                      	leave
 26236 00012F08 C21800                  	ret AND_KILL_FRAME(1)
 26237                                  .L_lambda_simple_end_00a2:	; new closure is in rax
 26238 00012F0B 803804                  	cmp byte [rax], T_closure
 26239 00012F0E 0F85CC280000            	jne L_error_non_closure
 26240 00012F14 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26241                                  
 26242                                  	; recycling the current frame
 26243 00012F17 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26244 00012F1A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26245 00012F1D B905000000              	mov rcx, 1 + 4
 26246 00012F22 488B5D18                	mov rbx, COUNT
 26247 00012F26 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26248 00012F2B 488D55F8                	lea rdx, [rbp - 8 * 1]
 26249                                  .L_tc_recycle_frame_loop_00dd:
 26250 00012F2F 4883F900                	cmp rcx, 0
 26251 00012F33 7413                    	je .L_tc_recycle_frame_done_00dd
 26252 00012F35 488B32                  	mov rsi, qword [rdx]
 26253 00012F38 488933                  	mov qword [rbx], rsi
 26254 00012F3B 48FFC9                  	dec rcx
 26255 00012F3E 4883EB08                	sub rbx, 8 * 1
 26256 00012F42 4883EA08                	sub rdx, 8 * 1
 26257 00012F46 EBE7                    	jmp .L_tc_recycle_frame_loop_00dd
 26258                                  .L_tc_recycle_frame_done_00dd:
 26259 00012F48 488D6308                	lea rsp, [rbx + 8 * 1]
 26260 00012F4C 5D                      	pop rbp	; the proc will restore it!
 26261 00012F4D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26262                                  
 26263                                  	.L_if_end_0080:
 26264 00012F50 C9                      	leave
 26265 00012F51 C22800                  	ret AND_KILL_FRAME(3)
 26266                                  .L_lambda_simple_end_00a1:	; new closure is in rax
 26267                                  
 26268 00012F54 50                      	push rax
 26269 00012F55 488B4520                	mov rax, PARAM(0)	; param run
 26270                                  
 26271 00012F59 8F00                    	pop qword[rax]
 26272 00012F5B 48B8-                   	mov rax, sob_void
 26272 00012F5D [0000000000000000] 
 26273                                  
 26274 00012F65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26275 00012F6A E81A290000              	call malloc
 26276 00012F6F 50                      	push rax
 26277 00012F70 BF10000000              	mov rdi, 8 * 2	; new rib
 26278 00012F75 E80F290000              	call malloc
 26279 00012F7A 50                      	push rax
 26280 00012F7B BF10000000              	mov rdi, 8 * 2	; extended env
 26281 00012F80 E804290000              	call malloc
 26282 00012F85 488B7D10                	mov rdi, ENV
 26283 00012F89 BE00000000              	mov rsi, 0
 26284 00012F8E BA01000000              	mov rdx, 1
 26285                                  .L_lambda_simple_env_loop_00a3:	; ext_env[i + 1] <-- env[i]
 26286 00012F93 4883FE01                	cmp rsi, 1
 26287 00012F97 7410                    	je .L_lambda_simple_env_end_00a3
 26288 00012F99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26289 00012F9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26290 00012FA1 48FFC6                  	inc rsi
 26291 00012FA4 48FFC2                  	inc rdx
 26292 00012FA7 EBEA                    	jmp .L_lambda_simple_env_loop_00a3
 26293                                  .L_lambda_simple_env_end_00a3:
 26294 00012FA9 5B                      	pop rbx
 26295 00012FAA BE00000000              	mov rsi, 0
 26296                                  .L_lambda_simple_params_loop_00a3:	; copy params
 26297 00012FAF 4883FE02                	cmp rsi, 2
 26298 00012FB3 740E                    	je .L_lambda_simple_params_end_00a3
 26299 00012FB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26300 00012FBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26301 00012FBE 48FFC6                  	inc rsi
 26302 00012FC1 EBEC                    	jmp .L_lambda_simple_params_loop_00a3
 26303                                  .L_lambda_simple_params_end_00a3:
 26304 00012FC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26305 00012FC6 4889C3                  	mov rbx, rax
 26306 00012FC9 58                      	pop rax
 26307 00012FCA C60004                  	mov byte [rax], T_closure
 26308 00012FCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26309 00012FD1 48C74009[DE2F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a3
 26310 00012FD9 E97C010000              	jmp .L_lambda_simple_end_00a3
 26311                                  .L_lambda_simple_code_00a3:	; lambda-simple body
 26312 00012FDE 48837C241005            	cmp qword [rsp + 8 * 2], 5
 26313 00012FE4 740B                    	je .L_lambda_simple_arity_check_ok_00a3
 26314 00012FE6 FF742410                	push qword [rsp + 8 * 2]
 26315 00012FEA 6A05                    	push 5
 26316 00012FEC E951280000              	jmp L_error_incorrect_arity_simple
 26317                                  .L_lambda_simple_arity_check_ok_00a3:
 26318 00012FF1 C8000000                	enter 0, 0
 26319 00012FF5 488B4540                	mov rax, PARAM(4)	; param limit
 26320 00012FF9 50                      	push rax
 26321 00012FFA 488B4538                	mov rax, PARAM(3)	; param j
 26322 00012FFE 50                      	push rax
 26323 00012FFF 6A02                    	push 2	; arg count
 26324 00013001 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 26325 00013009 803805                  	cmp byte [rax], T_undefined
 26326 0001300C 0F844A270000            	je L_error_fvar_undefined
 26327 00013012 803804                  	cmp byte [rax], T_closure
 26328 00013015 0F85C5270000            	jne L_error_non_closure
 26329 0001301B FF7001                  	push SOB_CLOSURE_ENV(rax)
 26330 0001301E FF5009                  	call SOB_CLOSURE_CODE(rax)
 26331                                  
 26332 00013021 483D[02000000]          	cmp rax, sob_boolean_false
 26333 00013027 0F8425010000            	je .L_if_else_0081
 26334 0001302D 488B4538                	mov rax, PARAM(3)	; param j
 26335 00013031 50                      	push rax
 26336 00013032 488B4530                	mov rax, PARAM(2)	; param vec
 26337 00013036 50                      	push rax
 26338 00013037 6A02                    	push 2	; arg count
 26339 00013039 488B0425[47110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 26340 00013041 803805                  	cmp byte [rax], T_undefined
 26341 00013044 0F8412270000            	je L_error_fvar_undefined
 26342 0001304A 803804                  	cmp byte [rax], T_closure
 26343 0001304D 0F858D270000            	jne L_error_non_closure
 26344 00013053 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26345 00013056 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26346 00013059 50                      	push rax
 26347 0001305A 488B4528                	mov rax, PARAM(1)	; param i
 26348 0001305E 50                      	push rax
 26349 0001305F 488B4520                	mov rax, PARAM(0)	; param target
 26350 00013063 50                      	push rax
 26351 00013064 6A03                    	push 3	; arg count
 26352 00013066 488B0425[58110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 26353 0001306E 803805                  	cmp byte [rax], T_undefined
 26354 00013071 0F84E5260000            	je L_error_fvar_undefined
 26355 00013077 803804                  	cmp byte [rax], T_closure
 26356 0001307A 0F8560270000            	jne L_error_non_closure
 26357 00013080 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26358 00013083 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26359                                  
 26360                                  	; preparing a tail-call
 26361 00013086 488B4540                	mov rax, PARAM(4)	; param limit
 26362 0001308A 50                      	push rax
 26363 0001308B 48B8-                   	mov rax, L_constants + 2158
 26363 0001308D [6E08000000000000] 
 26364 00013095 50                      	push rax
 26365 00013096 488B4538                	mov rax, PARAM(3)	; param j
 26366 0001309A 50                      	push rax
 26367 0001309B 6A02                    	push 2	; arg count
 26368 0001309D 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 26369 000130A5 803805                  	cmp byte [rax], T_undefined
 26370 000130A8 0F84AE260000            	je L_error_fvar_undefined
 26371 000130AE 803804                  	cmp byte [rax], T_closure
 26372 000130B1 0F8529270000            	jne L_error_non_closure
 26373 000130B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26374 000130BA FF5009                  	call SOB_CLOSURE_CODE(rax)
 26375 000130BD 50                      	push rax
 26376 000130BE 488B4530                	mov rax, PARAM(2)	; param vec
 26377 000130C2 50                      	push rax
 26378 000130C3 48B8-                   	mov rax, L_constants + 2158
 26378 000130C5 [6E08000000000000] 
 26379 000130CD 50                      	push rax
 26380 000130CE 488B4528                	mov rax, PARAM(1)	; param i
 26381 000130D2 50                      	push rax
 26382 000130D3 6A02                    	push 2	; arg count
 26383 000130D5 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 26384 000130DD 803805                  	cmp byte [rax], T_undefined
 26385 000130E0 0F8476260000            	je L_error_fvar_undefined
 26386 000130E6 803804                  	cmp byte [rax], T_closure
 26387 000130E9 0F85F1260000            	jne L_error_non_closure
 26388 000130EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 26389 000130F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26390 000130F5 50                      	push rax
 26391 000130F6 488B4520                	mov rax, PARAM(0)	; param target
 26392 000130FA 50                      	push rax
 26393 000130FB 6A05                    	push 5	; arg count
 26394 000130FD 488B4510                	mov rax, ENV
 26395 00013101 488B00                  	mov rax, qword [rax + 8 * 0]
 26396 00013104 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 26397 00013108 488B00                  	mov rax, qword [rax]
 26398 0001310B 803804                  	cmp byte [rax], T_closure
 26399 0001310E 0F85CC260000            	jne L_error_non_closure
 26400 00013114 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26401                                  
 26402                                  	; recycling the current frame
 26403 00013117 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26404 0001311A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26405 0001311D B909000000              	mov rcx, 5 + 4
 26406 00013122 488B5D18                	mov rbx, COUNT
 26407 00013126 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26408 0001312B 488D55F8                	lea rdx, [rbp - 8 * 1]
 26409                                  .L_tc_recycle_frame_loop_00de:
 26410 0001312F 4883F900                	cmp rcx, 0
 26411 00013133 7413                    	je .L_tc_recycle_frame_done_00de
 26412 00013135 488B32                  	mov rsi, qword [rdx]
 26413 00013138 488933                  	mov qword [rbx], rsi
 26414 0001313B 48FFC9                  	dec rcx
 26415 0001313E 4883EB08                	sub rbx, 8 * 1
 26416 00013142 4883EA08                	sub rdx, 8 * 1
 26417 00013146 EBE7                    	jmp .L_tc_recycle_frame_loop_00de
 26418                                  .L_tc_recycle_frame_done_00de:
 26419 00013148 488D6308                	lea rsp, [rbx + 8 * 1]
 26420 0001314C 5D                      	pop rbp	; the proc will restore it!
 26421 0001314D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26422                                  
 26423 00013150 EB04                    	jmp .L_if_end_0081
 26424                                  
 26425                                  	.L_if_else_0081:
 26426 00013152 488B4528                	mov rax, PARAM(1)	; param i
 26427                                  
 26428                                  	.L_if_end_0081:
 26429 00013156 C9                      	leave
 26430 00013157 C23800                  	ret AND_KILL_FRAME(5)
 26431                                  .L_lambda_simple_end_00a3:	; new closure is in rax
 26432                                  
 26433 0001315A 50                      	push rax
 26434 0001315B 488B4528                	mov rax, PARAM(1)	; param add
 26435                                  
 26436 0001315F 8F00                    	pop qword[rax]
 26437 00013161 48B8-                   	mov rax, sob_void
 26437 00013163 [0000000000000000] 
 26438                                  
 26439 0001316B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26440 00013170 E814270000              	call malloc
 26441 00013175 50                      	push rax
 26442 00013176 BF10000000              	mov rdi, 8 * 2	; new rib
 26443 0001317B E809270000              	call malloc
 26444 00013180 50                      	push rax
 26445 00013181 BF10000000              	mov rdi, 8 * 2	; extended env
 26446 00013186 E8FE260000              	call malloc
 26447 0001318B 488B7D10                	mov rdi, ENV
 26448 0001318F BE00000000              	mov rsi, 0
 26449 00013194 BA01000000              	mov rdx, 1
 26450                                  .L_lambda_opt_env_loop_0019:	; ext_env[i + 1] <-- env[i]
 26451 00013199 4883FE01                	cmp rsi, 1
 26452 0001319D 7410                    	je .L_lambda_opt_env_end_0019
 26453 0001319F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26454 000131A3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26455 000131A7 48FFC6                  	inc rsi
 26456 000131AA 48FFC2                  	inc rdx
 26457 000131AD EBEA                    	jmp .L_lambda_opt_env_loop_0019
 26458                                  .L_lambda_opt_env_end_0019:
 26459 000131AF 5B                      	pop rbx
 26460 000131B0 BE00000000              	mov rsi, 0
 26461                                  .L_lambda_opt_params_loop_0019:	; copy params
 26462 000131B5 4883FE02                	cmp rsi, 2
 26463 000131B9 740E                    	je .L_lambda_opt_params_end_0019
 26464 000131BB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26465 000131C0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26466 000131C4 48FFC6                  	inc rsi
 26467 000131C7 EBEC                    	jmp .L_lambda_opt_params_loop_0019
 26468                                  .L_lambda_opt_params_end_0019:
 26469 000131C9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26470 000131CC 4889C3                  	mov rbx, rax
 26471 000131CF 58                      	pop rax
 26472 000131D0 C60004                  	mov byte [rax], T_closure
 26473 000131D3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26474 000131D7 48C74009[E4310100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0019
 26475 000131DF E9D1010000              	jmp .L_lambda_opt_end_0019
 26476                                  .L_lambda_opt_code_0019:	; lambda-simple body
 26477 000131E4 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 26478 000131EA 740D                    	je .L_lambda_opt_arity_check_exact_0019 ;	 if equal, go to exact arity
 26479 000131EC 7F42                    	jg .L_lambda_opt_arity_check_more_0019 ;	 if greater than, go to arity more
 26480 000131EE FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 26481 000131F2 6A00                     	push 0
 26482 000131F4 E95D260000              	jmp L_error_incorrect_arity_opt
 26483                                  	.L_lambda_opt_arity_check_exact_0019:
 26484 000131F9 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 26485 000131FE 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 26486 00013203 4883EC08                	sub rsp, 8
 26487 00013207 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 26488                                  	.L_lambda_opt_exact_shifting_loop_0019:
 26489 0001320B 488B5108                	mov rdx, [rcx + 8]
 26490 0001320F 488911                  	mov [rcx], rdx
 26491 00013212 4883C108                	add rcx, 8
 26492 00013216 4839CB                  	cmp rbx, rcx
 26493 00013219 75F0                    	jne .L_lambda_opt_exact_shifting_loop_0019
 26494                                  	.L_lambda_opt_exact_shifting_loop_end_0019:
 26495 0001321B 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 26496 00013222 4883C001                	add rax, 1 ; 	arg count += 1
 26497 00013226 4889442410              	mov qword [rsp + 8 * 2], rax
 26498 0001322B E987000000              	jmp .L_lambda_opt_stack_adjusted_0019
 26499                                  	.L_lambda_opt_arity_check_more_0019:
 26500 00013230 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 26500 00013232 [0100000000000000] 
 26501 0001323A 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 26502 00013240 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_0019
 26503                                  	.L_lambda_opt_stack_shrink_loop_0019:
 26504 00013242 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 26505 00013247 E83D260000              	call malloc ;	 allocated memory for the optional scheme list
 26506 0001324C C60021                  	mov byte[rax], T_pair ;	 set type pair
 26507 0001324F 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 26508 00013253 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 26509 00013256 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 26510 0001325B 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 26511 00013260 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 26512 00013264 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 26513                                  	.L_lambda_opt_more_shifting_loop_0019:
 26514 00013269 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 26515 0001326C 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 26516 00013270 4883EB08                	sub rbx, 8 
 26517 00013274 4839DC                  	cmp rsp, rbx
 26518 00013277 7EF0                    	jle .L_lambda_opt_more_shifting_loop_0019
 26519                                  	.L_lambda_opt_more_shifting_loop_end_0019:
 26520 00013279 4883C408                	add rsp, 8 ;	 update rsp
 26521 0001327D 488B5C2410              	mov rbx, [rsp + 8 * 2]
 26522 00013282 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 26523 00013286 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 26524 0001328B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26525 00013291 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_0019
 26526                                  	.L_lambda_opt_stack_shrink_loop_exit_0019:
 26527 00013293 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 26528 00013298 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 26529 0001329D BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 26530 000132A2 E8E2250000              	call malloc ;	 allocated memory for the optional scheme list
 26531 000132A7 C60021                  	mov byte[rax], T_pair ;	 set type pair
 26532 000132AA 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 26533 000132AE 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 26534 000132B2 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 26535                                  	.L_lambda_opt_stack_adjusted_0019:
 26536 000132B7 C8000000                	enter 0, 0
 26537                                  	; preparing a tail-call
 26538 000132BB 488B4520                	mov rax, PARAM(0)	; param vectors
 26539 000132BF 50                      	push rax
 26540 000132C0 48B8-                   	mov rax, L_constants + 2023
 26540 000132C2 [E707000000000000] 
 26541 000132CA 50                      	push rax
 26542 000132CB 488B4520                	mov rax, PARAM(0)	; param vectors
 26543 000132CF 50                      	push rax
 26544 000132D0 488B0425[F40E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 26545 000132D8 803805                  	cmp byte [rax], T_undefined
 26546 000132DB 0F847B240000            	je L_error_fvar_undefined
 26547 000132E1 50                      	push rax
 26548 000132E2 6A02                    	push 2	; arg count
 26549 000132E4 488B0425[EE140000]      	mov rax, qword [free_var_109]	; free var map
 26550 000132EC 803805                  	cmp byte [rax], T_undefined
 26551 000132EF 0F8467240000            	je L_error_fvar_undefined
 26552 000132F5 803804                  	cmp byte [rax], T_closure
 26553 000132F8 0F85E2240000            	jne L_error_non_closure
 26554 000132FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26555 00013301 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26556 00013304 50                      	push rax
 26557 00013305 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 26558 0001330D 803805                  	cmp byte [rax], T_undefined
 26559 00013310 0F8446240000            	je L_error_fvar_undefined
 26560 00013316 50                      	push rax
 26561 00013317 6A02                    	push 2	; arg count
 26562 00013319 488B0425[CC140000]      	mov rax, qword [free_var_107]	; free var apply
 26563 00013321 803805                  	cmp byte [rax], T_undefined
 26564 00013324 0F8432240000            	je L_error_fvar_undefined
 26565 0001332A 803804                  	cmp byte [rax], T_closure
 26566 0001332D 0F85AD240000            	jne L_error_non_closure
 26567 00013333 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26568 00013336 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26569 00013339 50                      	push rax
 26570 0001333A 6A01                    	push 1	; arg count
 26571 0001333C 488B0425[7A110000]      	mov rax, qword [free_var_57]	; free var make-vector
 26572 00013344 803805                  	cmp byte [rax], T_undefined
 26573 00013347 0F840F240000            	je L_error_fvar_undefined
 26574 0001334D 803804                  	cmp byte [rax], T_closure
 26575 00013350 0F858A240000            	jne L_error_non_closure
 26576 00013356 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26577 00013359 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26578 0001335C 50                      	push rax
 26579 0001335D 6A03                    	push 3	; arg count
 26580 0001335F 488B4510                	mov rax, ENV
 26581 00013363 488B00                  	mov rax, qword [rax + 8 * 0]
 26582 00013366 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 26583 00013369 488B00                  	mov rax, qword [rax]
 26584 0001336C 803804                  	cmp byte [rax], T_closure
 26585 0001336F 0F856B240000            	jne L_error_non_closure
 26586 00013375 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26587                                  
 26588                                  	; recycling the current frame
 26589 00013378 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26590 0001337B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26591 0001337E B907000000              	mov rcx, 3 + 4
 26592 00013383 488B5D18                	mov rbx, COUNT
 26593 00013387 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26594 0001338C 488D55F8                	lea rdx, [rbp - 8 * 1]
 26595                                  .L_tc_recycle_frame_loop_00df:
 26596 00013390 4883F900                	cmp rcx, 0
 26597 00013394 7413                    	je .L_tc_recycle_frame_done_00df
 26598 00013396 488B32                  	mov rsi, qword [rdx]
 26599 00013399 488933                  	mov qword [rbx], rsi
 26600 0001339C 48FFC9                  	dec rcx
 26601 0001339F 4883EB08                	sub rbx, 8 * 1
 26602 000133A3 4883EA08                	sub rdx, 8 * 1
 26603 000133A7 EBE7                    	jmp .L_tc_recycle_frame_loop_00df
 26604                                  .L_tc_recycle_frame_done_00df:
 26605 000133A9 488D6308                	lea rsp, [rbx + 8 * 1]
 26606 000133AD 5D                      	pop rbp	; the proc will restore it!
 26607 000133AE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26608 000133B1 C9                      	leave
 26609 000133B2 C21800                  	ret AND_KILL_FRAME(1)
 26610                                  .L_lambda_opt_end_0019:	; new closure is in rax
 26611 000133B5 C9                      	leave
 26612 000133B6 C22000                  	ret AND_KILL_FRAME(2)
 26613                                  .L_lambda_simple_end_00a0:	; new closure is in rax
 26614 000133B9 803804                  	cmp byte [rax], T_closure
 26615 000133BC 0F851E240000            	jne L_error_non_closure
 26616 000133C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26617 000133C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26618 000133C8 48890425[C8180000]      	mov qword [free_var_167], rax
 26619 000133D0 48B8-                   	mov rax, sob_void
 26619 000133D2 [0000000000000000] 
 26620                                  
 26621 000133DA 4889C7                  	mov rdi, rax
 26622 000133DD E8B9250000              	call print_sexpr_if_not_void
 26623                                  
 26624 000133E2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26625 000133E7 E89D240000              	call malloc
 26626 000133EC 50                      	push rax
 26627 000133ED BF00000000              	mov rdi, 8 * 0	; new rib
 26628 000133F2 E892240000              	call malloc
 26629 000133F7 50                      	push rax
 26630 000133F8 BF08000000              	mov rdi, 8 * 1	; extended env
 26631 000133FD E887240000              	call malloc
 26632 00013402 488B7D10                	mov rdi, ENV
 26633 00013406 BE00000000              	mov rsi, 0
 26634 0001340B BA01000000              	mov rdx, 1
 26635                                  .L_lambda_simple_env_loop_00a4:	; ext_env[i + 1] <-- env[i]
 26636 00013410 4883FE00                	cmp rsi, 0
 26637 00013414 7410                    	je .L_lambda_simple_env_end_00a4
 26638 00013416 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26639 0001341A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26640 0001341E 48FFC6                  	inc rsi
 26641 00013421 48FFC2                  	inc rdx
 26642 00013424 EBEA                    	jmp .L_lambda_simple_env_loop_00a4
 26643                                  .L_lambda_simple_env_end_00a4:
 26644 00013426 5B                      	pop rbx
 26645 00013427 BE00000000              	mov rsi, 0
 26646                                  .L_lambda_simple_params_loop_00a4:	; copy params
 26647 0001342C 4883FE00                	cmp rsi, 0
 26648 00013430 740E                    	je .L_lambda_simple_params_end_00a4
 26649 00013432 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26650 00013437 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26651 0001343B 48FFC6                  	inc rsi
 26652 0001343E EBEC                    	jmp .L_lambda_simple_params_loop_00a4
 26653                                  .L_lambda_simple_params_end_00a4:
 26654 00013440 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26655 00013443 4889C3                  	mov rbx, rax
 26656 00013446 58                      	pop rax
 26657 00013447 C60004                  	mov byte [rax], T_closure
 26658 0001344A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26659 0001344E 48C74009[5B340100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a4
 26660 00013456 E9BE000000              	jmp .L_lambda_simple_end_00a4
 26661                                  .L_lambda_simple_code_00a4:	; lambda-simple body
 26662 0001345B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26663 00013461 740B                    	je .L_lambda_simple_arity_check_ok_00a4
 26664 00013463 FF742410                	push qword [rsp + 8 * 2]
 26665 00013467 6A01                    	push 1
 26666 00013469 E9D4230000              	jmp L_error_incorrect_arity_simple
 26667                                  .L_lambda_simple_arity_check_ok_00a4:
 26668 0001346E C8000000                	enter 0, 0
 26669                                  	; preparing a tail-call
 26670 00013472 488B4520                	mov rax, PARAM(0)	; param str
 26671 00013476 50                      	push rax
 26672 00013477 6A01                    	push 1	; arg count
 26673 00013479 488B0425[30170000]      	mov rax, qword [free_var_143]	; free var string->list
 26674 00013481 803805                  	cmp byte [rax], T_undefined
 26675 00013484 0F84D2220000            	je L_error_fvar_undefined
 26676 0001348A 803804                  	cmp byte [rax], T_closure
 26677 0001348D 0F854D230000            	jne L_error_non_closure
 26678 00013493 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26679 00013496 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26680 00013499 50                      	push rax
 26681 0001349A 6A01                    	push 1	; arg count
 26682 0001349C 488B0425[10150000]      	mov rax, qword [free_var_111]	; free var reverse
 26683 000134A4 803805                  	cmp byte [rax], T_undefined
 26684 000134A7 0F84AF220000            	je L_error_fvar_undefined
 26685 000134AD 803804                  	cmp byte [rax], T_closure
 26686 000134B0 0F852A230000            	jne L_error_non_closure
 26687 000134B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26688 000134B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26689 000134BC 50                      	push rax
 26690 000134BD 6A01                    	push 1	; arg count
 26691 000134BF 488B0425[1F170000]      	mov rax, qword [free_var_142]	; free var list->string
 26692 000134C7 803805                  	cmp byte [rax], T_undefined
 26693 000134CA 0F848C220000            	je L_error_fvar_undefined
 26694 000134D0 803804                  	cmp byte [rax], T_closure
 26695 000134D3 0F8507230000            	jne L_error_non_closure
 26696 000134D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26697                                  
 26698                                  	; recycling the current frame
 26699 000134DC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26700 000134DF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26701 000134E2 B905000000              	mov rcx, 1 + 4
 26702 000134E7 488B5D18                	mov rbx, COUNT
 26703 000134EB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26704 000134F0 488D55F8                	lea rdx, [rbp - 8 * 1]
 26705                                  .L_tc_recycle_frame_loop_00e0:
 26706 000134F4 4883F900                	cmp rcx, 0
 26707 000134F8 7413                    	je .L_tc_recycle_frame_done_00e0
 26708 000134FA 488B32                  	mov rsi, qword [rdx]
 26709 000134FD 488933                  	mov qword [rbx], rsi
 26710 00013500 48FFC9                  	dec rcx
 26711 00013503 4883EB08                	sub rbx, 8 * 1
 26712 00013507 4883EA08                	sub rdx, 8 * 1
 26713 0001350B EBE7                    	jmp .L_tc_recycle_frame_loop_00e0
 26714                                  .L_tc_recycle_frame_done_00e0:
 26715 0001350D 488D6308                	lea rsp, [rbx + 8 * 1]
 26716 00013511 5D                      	pop rbp	; the proc will restore it!
 26717 00013512 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26718 00013515 C9                      	leave
 26719 00013516 C21800                  	ret AND_KILL_FRAME(1)
 26720                                  .L_lambda_simple_end_00a4:	; new closure is in rax
 26721 00013519 48890425[D9180000]      	mov qword [free_var_168], rax
 26722 00013521 48B8-                   	mov rax, sob_void
 26722 00013523 [0000000000000000] 
 26723                                  
 26724 0001352B 4889C7                  	mov rdi, rax
 26725 0001352E E868240000              	call print_sexpr_if_not_void
 26726                                  
 26727 00013533 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26728 00013538 E84C230000              	call malloc
 26729 0001353D 50                      	push rax
 26730 0001353E BF00000000              	mov rdi, 8 * 0	; new rib
 26731 00013543 E841230000              	call malloc
 26732 00013548 50                      	push rax
 26733 00013549 BF08000000              	mov rdi, 8 * 1	; extended env
 26734 0001354E E836230000              	call malloc
 26735 00013553 488B7D10                	mov rdi, ENV
 26736 00013557 BE00000000              	mov rsi, 0
 26737 0001355C BA01000000              	mov rdx, 1
 26738                                  .L_lambda_simple_env_loop_00a5:	; ext_env[i + 1] <-- env[i]
 26739 00013561 4883FE00                	cmp rsi, 0
 26740 00013565 7410                    	je .L_lambda_simple_env_end_00a5
 26741 00013567 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26742 0001356B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26743 0001356F 48FFC6                  	inc rsi
 26744 00013572 48FFC2                  	inc rdx
 26745 00013575 EBEA                    	jmp .L_lambda_simple_env_loop_00a5
 26746                                  .L_lambda_simple_env_end_00a5:
 26747 00013577 5B                      	pop rbx
 26748 00013578 BE00000000              	mov rsi, 0
 26749                                  .L_lambda_simple_params_loop_00a5:	; copy params
 26750 0001357D 4883FE00                	cmp rsi, 0
 26751 00013581 740E                    	je .L_lambda_simple_params_end_00a5
 26752 00013583 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26753 00013588 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26754 0001358C 48FFC6                  	inc rsi
 26755 0001358F EBEC                    	jmp .L_lambda_simple_params_loop_00a5
 26756                                  .L_lambda_simple_params_end_00a5:
 26757 00013591 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26758 00013594 4889C3                  	mov rbx, rax
 26759 00013597 58                      	pop rax
 26760 00013598 C60004                  	mov byte [rax], T_closure
 26761 0001359B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26762 0001359F 48C74009[AC350100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a5
 26763 000135A7 E9BE000000              	jmp .L_lambda_simple_end_00a5
 26764                                  .L_lambda_simple_code_00a5:	; lambda-simple body
 26765 000135AC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26766 000135B2 740B                    	je .L_lambda_simple_arity_check_ok_00a5
 26767 000135B4 FF742410                	push qword [rsp + 8 * 2]
 26768 000135B8 6A01                    	push 1
 26769 000135BA E983220000              	jmp L_error_incorrect_arity_simple
 26770                                  .L_lambda_simple_arity_check_ok_00a5:
 26771 000135BF C8000000                	enter 0, 0
 26772                                  	; preparing a tail-call
 26773 000135C3 488B4520                	mov rax, PARAM(0)	; param vec
 26774 000135C7 50                      	push rax
 26775 000135C8 6A01                    	push 1	; arg count
 26776 000135CA 488B0425[1E180000]      	mov rax, qword [free_var_157]	; free var vector->list
 26777 000135D2 803805                  	cmp byte [rax], T_undefined
 26778 000135D5 0F8481210000            	je L_error_fvar_undefined
 26779 000135DB 803804                  	cmp byte [rax], T_closure
 26780 000135DE 0F85FC210000            	jne L_error_non_closure
 26781 000135E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26782 000135E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26783 000135EA 50                      	push rax
 26784 000135EB 6A01                    	push 1	; arg count
 26785 000135ED 488B0425[10150000]      	mov rax, qword [free_var_111]	; free var reverse
 26786 000135F5 803805                  	cmp byte [rax], T_undefined
 26787 000135F8 0F845E210000            	je L_error_fvar_undefined
 26788 000135FE 803804                  	cmp byte [rax], T_closure
 26789 00013601 0F85D9210000            	jne L_error_non_closure
 26790 00013607 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26791 0001360A FF5009                  	call SOB_CLOSURE_CODE(rax)
 26792 0001360D 50                      	push rax
 26793 0001360E 6A01                    	push 1	; arg count
 26794 00013610 488B0425[FC170000]      	mov rax, qword [free_var_155]	; free var list->vector
 26795 00013618 803805                  	cmp byte [rax], T_undefined
 26796 0001361B 0F843B210000            	je L_error_fvar_undefined
 26797 00013621 803804                  	cmp byte [rax], T_closure
 26798 00013624 0F85B6210000            	jne L_error_non_closure
 26799 0001362A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26800                                  
 26801                                  	; recycling the current frame
 26802 0001362D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26803 00013630 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26804 00013633 B905000000              	mov rcx, 1 + 4
 26805 00013638 488B5D18                	mov rbx, COUNT
 26806 0001363C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26807 00013641 488D55F8                	lea rdx, [rbp - 8 * 1]
 26808                                  .L_tc_recycle_frame_loop_00e1:
 26809 00013645 4883F900                	cmp rcx, 0
 26810 00013649 7413                    	je .L_tc_recycle_frame_done_00e1
 26811 0001364B 488B32                  	mov rsi, qword [rdx]
 26812 0001364E 488933                  	mov qword [rbx], rsi
 26813 00013651 48FFC9                  	dec rcx
 26814 00013654 4883EB08                	sub rbx, 8 * 1
 26815 00013658 4883EA08                	sub rdx, 8 * 1
 26816 0001365C EBE7                    	jmp .L_tc_recycle_frame_loop_00e1
 26817                                  .L_tc_recycle_frame_done_00e1:
 26818 0001365E 488D6308                	lea rsp, [rbx + 8 * 1]
 26819 00013662 5D                      	pop rbp	; the proc will restore it!
 26820 00013663 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26821 00013666 C9                      	leave
 26822 00013667 C21800                  	ret AND_KILL_FRAME(1)
 26823                                  .L_lambda_simple_end_00a5:	; new closure is in rax
 26824 0001366A 48890425[EA180000]      	mov qword [free_var_169], rax
 26825 00013672 48B8-                   	mov rax, sob_void
 26825 00013674 [0000000000000000] 
 26826                                  
 26827 0001367C 4889C7                  	mov rdi, rax
 26828 0001367F E817230000              	call print_sexpr_if_not_void
 26829                                  
 26830 00013684 48B8-                   	mov rax, L_constants + 1881
 26830 00013686 [5907000000000000] 
 26831 0001368E 50                      	push rax
 26832 0001368F 6A01                    	push 1	; arg count
 26833 00013691 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26834 00013696 E8EE210000              	call malloc
 26835 0001369B 50                      	push rax
 26836 0001369C BF00000000              	mov rdi, 8 * 0	; new rib
 26837 000136A1 E8E3210000              	call malloc
 26838 000136A6 50                      	push rax
 26839 000136A7 BF08000000              	mov rdi, 8 * 1	; extended env
 26840 000136AC E8D8210000              	call malloc
 26841 000136B1 488B7D10                	mov rdi, ENV
 26842 000136B5 BE00000000              	mov rsi, 0
 26843 000136BA BA01000000              	mov rdx, 1
 26844                                  .L_lambda_simple_env_loop_00a6:	; ext_env[i + 1] <-- env[i]
 26845 000136BF 4883FE00                	cmp rsi, 0
 26846 000136C3 7410                    	je .L_lambda_simple_env_end_00a6
 26847 000136C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26848 000136C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26849 000136CD 48FFC6                  	inc rsi
 26850 000136D0 48FFC2                  	inc rdx
 26851 000136D3 EBEA                    	jmp .L_lambda_simple_env_loop_00a6
 26852                                  .L_lambda_simple_env_end_00a6:
 26853 000136D5 5B                      	pop rbx
 26854 000136D6 BE00000000              	mov rsi, 0
 26855                                  .L_lambda_simple_params_loop_00a6:	; copy params
 26856 000136DB 4883FE00                	cmp rsi, 0
 26857 000136DF 740E                    	je .L_lambda_simple_params_end_00a6
 26858 000136E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26859 000136E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26860 000136EA 48FFC6                  	inc rsi
 26861 000136ED EBEC                    	jmp .L_lambda_simple_params_loop_00a6
 26862                                  .L_lambda_simple_params_end_00a6:
 26863 000136EF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26864 000136F2 4889C3                  	mov rbx, rax
 26865 000136F5 58                      	pop rax
 26866 000136F6 C60004                  	mov byte [rax], T_closure
 26867 000136F9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26868 000136FD 48C74009[0A370100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a6
 26869 00013705 E91D060000              	jmp .L_lambda_simple_end_00a6
 26870                                  .L_lambda_simple_code_00a6:	; lambda-simple body
 26871 0001370A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26872 00013710 740B                    	je .L_lambda_simple_arity_check_ok_00a6
 26873 00013712 FF742410                	push qword [rsp + 8 * 2]
 26874 00013716 6A01                    	push 1
 26875 00013718 E925210000              	jmp L_error_incorrect_arity_simple
 26876                                  .L_lambda_simple_arity_check_ok_00a6:
 26877 0001371D C8000000                	enter 0, 0
 26878                                  
 26879 00013721 BF08000000              	mov rdi, 8
 26880 00013726 E85E210000              	call malloc
 26881 0001372B 488B5D20                	mov rbx, PARAM(0)	; param run
 26882 0001372F 488918                  	mov [rax], rbx	; box run
 26883 00013732 48894520                	mov PARAM(0), rax	;replace param run with box
 26884 00013736 48B8-                   	mov rax, sob_void
 26884 00013738 [0000000000000000] 
 26885                                  
 26886 00013740 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26887 00013745 E83F210000              	call malloc
 26888 0001374A 50                      	push rax
 26889 0001374B BF08000000              	mov rdi, 8 * 1	; new rib
 26890 00013750 E834210000              	call malloc
 26891 00013755 50                      	push rax
 26892 00013756 BF10000000              	mov rdi, 8 * 2	; extended env
 26893 0001375B E829210000              	call malloc
 26894 00013760 488B7D10                	mov rdi, ENV
 26895 00013764 BE00000000              	mov rsi, 0
 26896 00013769 BA01000000              	mov rdx, 1
 26897                                  .L_lambda_simple_env_loop_00a7:	; ext_env[i + 1] <-- env[i]
 26898 0001376E 4883FE01                	cmp rsi, 1
 26899 00013772 7410                    	je .L_lambda_simple_env_end_00a7
 26900 00013774 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26901 00013778 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26902 0001377C 48FFC6                  	inc rsi
 26903 0001377F 48FFC2                  	inc rdx
 26904 00013782 EBEA                    	jmp .L_lambda_simple_env_loop_00a7
 26905                                  .L_lambda_simple_env_end_00a7:
 26906 00013784 5B                      	pop rbx
 26907 00013785 BE00000000              	mov rsi, 0
 26908                                  .L_lambda_simple_params_loop_00a7:	; copy params
 26909 0001378A 4883FE01                	cmp rsi, 1
 26910 0001378E 740E                    	je .L_lambda_simple_params_end_00a7
 26911 00013790 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26912 00013795 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26913 00013799 48FFC6                  	inc rsi
 26914 0001379C EBEC                    	jmp .L_lambda_simple_params_loop_00a7
 26915                                  .L_lambda_simple_params_end_00a7:
 26916 0001379E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26917 000137A1 4889C3                  	mov rbx, rax
 26918 000137A4 58                      	pop rax
 26919 000137A5 C60004                  	mov byte [rax], T_closure
 26920 000137A8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26921 000137AC 48C74009[B9370100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a7
 26922 000137B4 E9E6020000              	jmp .L_lambda_simple_end_00a7
 26923                                  .L_lambda_simple_code_00a7:	; lambda-simple body
 26924 000137B9 48837C241003            	cmp qword [rsp + 8 * 2], 3
 26925 000137BF 740B                    	je .L_lambda_simple_arity_check_ok_00a7
 26926 000137C1 FF742410                	push qword [rsp + 8 * 2]
 26927 000137C5 6A03                    	push 3
 26928 000137C7 E976200000              	jmp L_error_incorrect_arity_simple
 26929                                  .L_lambda_simple_arity_check_ok_00a7:
 26930 000137CC C8000000                	enter 0, 0
 26931 000137D0 488B4530                	mov rax, PARAM(2)	; param j
 26932 000137D4 50                      	push rax
 26933 000137D5 488B4528                	mov rax, PARAM(1)	; param i
 26934 000137D9 50                      	push rax
 26935 000137DA 6A02                    	push 2	; arg count
 26936 000137DC 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 26937 000137E4 803805                  	cmp byte [rax], T_undefined
 26938 000137E7 0F846F1F0000            	je L_error_fvar_undefined
 26939 000137ED 803804                  	cmp byte [rax], T_closure
 26940 000137F0 0F85EA1F0000            	jne L_error_non_closure
 26941 000137F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26942 000137F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26943                                  
 26944 000137FC 483D[02000000]          	cmp rax, sob_boolean_false
 26945 00013802 0F848F020000            	je .L_if_else_0082
 26946                                  	; preparing a tail-call
 26947 00013808 488B4528                	mov rax, PARAM(1)	; param i
 26948 0001380C 50                      	push rax
 26949 0001380D 488B4520                	mov rax, PARAM(0)	; param str
 26950 00013811 50                      	push rax
 26951 00013812 6A02                    	push 2	; arg count
 26952 00013814 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 26953 0001381C 803805                  	cmp byte [rax], T_undefined
 26954 0001381F 0F84371F0000            	je L_error_fvar_undefined
 26955 00013825 803804                  	cmp byte [rax], T_closure
 26956 00013828 0F85B21F0000            	jne L_error_non_closure
 26957 0001382E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26958 00013831 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26959 00013834 50                      	push rax
 26960 00013835 6A01                    	push 1	; arg count
 26961 00013837 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26962 0001383C E848200000              	call malloc
 26963 00013841 50                      	push rax
 26964 00013842 BF18000000              	mov rdi, 8 * 3	; new rib
 26965 00013847 E83D200000              	call malloc
 26966 0001384C 50                      	push rax
 26967 0001384D BF18000000              	mov rdi, 8 * 3	; extended env
 26968 00013852 E832200000              	call malloc
 26969 00013857 488B7D10                	mov rdi, ENV
 26970 0001385B BE00000000              	mov rsi, 0
 26971 00013860 BA01000000              	mov rdx, 1
 26972                                  .L_lambda_simple_env_loop_00a8:	; ext_env[i + 1] <-- env[i]
 26973 00013865 4883FE02                	cmp rsi, 2
 26974 00013869 7410                    	je .L_lambda_simple_env_end_00a8
 26975 0001386B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26976 0001386F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26977 00013873 48FFC6                  	inc rsi
 26978 00013876 48FFC2                  	inc rdx
 26979 00013879 EBEA                    	jmp .L_lambda_simple_env_loop_00a8
 26980                                  .L_lambda_simple_env_end_00a8:
 26981 0001387B 5B                      	pop rbx
 26982 0001387C BE00000000              	mov rsi, 0
 26983                                  .L_lambda_simple_params_loop_00a8:	; copy params
 26984 00013881 4883FE03                	cmp rsi, 3
 26985 00013885 740E                    	je .L_lambda_simple_params_end_00a8
 26986 00013887 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26987 0001388C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26988 00013890 48FFC6                  	inc rsi
 26989 00013893 EBEC                    	jmp .L_lambda_simple_params_loop_00a8
 26990                                  .L_lambda_simple_params_end_00a8:
 26991 00013895 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26992 00013898 4889C3                  	mov rbx, rax
 26993 0001389B 58                      	pop rax
 26994 0001389C C60004                  	mov byte [rax], T_closure
 26995 0001389F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26996 000138A3 48C74009[B0380100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a8
 26997 000138AB E9A0010000              	jmp .L_lambda_simple_end_00a8
 26998                                  .L_lambda_simple_code_00a8:	; lambda-simple body
 26999 000138B0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27000 000138B6 740B                    	je .L_lambda_simple_arity_check_ok_00a8
 27001 000138B8 FF742410                	push qword [rsp + 8 * 2]
 27002 000138BC 6A01                    	push 1
 27003 000138BE E97F1F0000              	jmp L_error_incorrect_arity_simple
 27004                                  .L_lambda_simple_arity_check_ok_00a8:
 27005 000138C3 C8000000                	enter 0, 0
 27006 000138C7 488B4510                	mov rax, ENV
 27007 000138CB 488B00                  	mov rax, qword [rax + 8 * 0]
 27008 000138CE 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27009 000138D2 50                      	push rax
 27010 000138D3 488B4510                	mov rax, ENV
 27011 000138D7 488B00                  	mov rax, qword [rax + 8 * 0]
 27012 000138DA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27013 000138DD 50                      	push rax
 27014 000138DE 6A02                    	push 2	; arg count
 27015 000138E0 488B0425[36110000]      	mov rax, qword [free_var_53]	; free var string-ref
 27016 000138E8 803805                  	cmp byte [rax], T_undefined
 27017 000138EB 0F846B1E0000            	je L_error_fvar_undefined
 27018 000138F1 803804                  	cmp byte [rax], T_closure
 27019 000138F4 0F85E61E0000            	jne L_error_non_closure
 27020 000138FA FF7001                  	push SOB_CLOSURE_ENV(rax)
 27021 000138FD FF5009                  	call SOB_CLOSURE_CODE(rax)
 27022 00013900 50                      	push rax
 27023 00013901 488B4510                	mov rax, ENV
 27024 00013905 488B00                  	mov rax, qword [rax + 8 * 0]
 27025 00013908 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27026 0001390C 50                      	push rax
 27027 0001390D 488B4510                	mov rax, ENV
 27028 00013911 488B00                  	mov rax, qword [rax + 8 * 0]
 27029 00013914 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27030 00013917 50                      	push rax
 27031 00013918 6A03                    	push 3	; arg count
 27032 0001391A 488B0425[69110000]      	mov rax, qword [free_var_56]	; free var string-set!
 27033 00013922 803805                  	cmp byte [rax], T_undefined
 27034 00013925 0F84311E0000            	je L_error_fvar_undefined
 27035 0001392B 803804                  	cmp byte [rax], T_closure
 27036 0001392E 0F85AC1E0000            	jne L_error_non_closure
 27037 00013934 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27038 00013937 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27039                                  
 27040 0001393A 488B4520                	mov rax, PARAM(0)	; param ch
 27041 0001393E 50                      	push rax
 27042 0001393F 488B4510                	mov rax, ENV
 27043 00013943 488B00                  	mov rax, qword [rax + 8 * 0]
 27044 00013946 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27045 0001394A 50                      	push rax
 27046 0001394B 488B4510                	mov rax, ENV
 27047 0001394F 488B00                  	mov rax, qword [rax + 8 * 0]
 27048 00013952 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27049 00013955 50                      	push rax
 27050 00013956 6A03                    	push 3	; arg count
 27051 00013958 488B0425[69110000]      	mov rax, qword [free_var_56]	; free var string-set!
 27052 00013960 803805                  	cmp byte [rax], T_undefined
 27053 00013963 0F84F31D0000            	je L_error_fvar_undefined
 27054 00013969 803804                  	cmp byte [rax], T_closure
 27055 0001396C 0F856E1E0000            	jne L_error_non_closure
 27056 00013972 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27057 00013975 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27058                                  
 27059                                  	; preparing a tail-call
 27060 00013978 48B8-                   	mov rax, L_constants + 2158
 27060 0001397A [6E08000000000000] 
 27061 00013982 50                      	push rax
 27062 00013983 488B4510                	mov rax, ENV
 27063 00013987 488B00                  	mov rax, qword [rax + 8 * 0]
 27064 0001398A 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27065 0001398E 50                      	push rax
 27066 0001398F 6A02                    	push 2	; arg count
 27067 00013991 488B0425[76150000]      	mov rax, qword [free_var_117]	; free var -
 27068 00013999 803805                  	cmp byte [rax], T_undefined
 27069 0001399C 0F84BA1D0000            	je L_error_fvar_undefined
 27070 000139A2 803804                  	cmp byte [rax], T_closure
 27071 000139A5 0F85351E0000            	jne L_error_non_closure
 27072 000139AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 27073 000139AE FF5009                  	call SOB_CLOSURE_CODE(rax)
 27074 000139B1 50                      	push rax
 27075 000139B2 48B8-                   	mov rax, L_constants + 2158
 27075 000139B4 [6E08000000000000] 
 27076 000139BC 50                      	push rax
 27077 000139BD 488B4510                	mov rax, ENV
 27078 000139C1 488B00                  	mov rax, qword [rax + 8 * 0]
 27079 000139C4 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27080 000139C8 50                      	push rax
 27081 000139C9 6A02                    	push 2	; arg count
 27082 000139CB 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 27083 000139D3 803805                  	cmp byte [rax], T_undefined
 27084 000139D6 0F84801D0000            	je L_error_fvar_undefined
 27085 000139DC 803804                  	cmp byte [rax], T_closure
 27086 000139DF 0F85FB1D0000            	jne L_error_non_closure
 27087 000139E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27088 000139E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27089 000139EB 50                      	push rax
 27090 000139EC 488B4510                	mov rax, ENV
 27091 000139F0 488B00                  	mov rax, qword [rax + 8 * 0]
 27092 000139F3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27093 000139F6 50                      	push rax
 27094 000139F7 6A03                    	push 3	; arg count
 27095 000139F9 488B4510                	mov rax, ENV
 27096 000139FD 488B4008                	mov rax, qword [rax + 8 * 1]
 27097 00013A01 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27098 00013A04 488B00                  	mov rax, qword [rax]
 27099 00013A07 803804                  	cmp byte [rax], T_closure
 27100 00013A0A 0F85D01D0000            	jne L_error_non_closure
 27101 00013A10 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27102                                  
 27103                                  	; recycling the current frame
 27104 00013A13 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27105 00013A16 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27106 00013A19 B907000000              	mov rcx, 3 + 4
 27107 00013A1E 488B5D18                	mov rbx, COUNT
 27108 00013A22 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27109 00013A27 488D55F8                	lea rdx, [rbp - 8 * 1]
 27110                                  .L_tc_recycle_frame_loop_00e2:
 27111 00013A2B 4883F900                	cmp rcx, 0
 27112 00013A2F 7413                    	je .L_tc_recycle_frame_done_00e2
 27113 00013A31 488B32                  	mov rsi, qword [rdx]
 27114 00013A34 488933                  	mov qword [rbx], rsi
 27115 00013A37 48FFC9                  	dec rcx
 27116 00013A3A 4883EB08                	sub rbx, 8 * 1
 27117 00013A3E 4883EA08                	sub rdx, 8 * 1
 27118 00013A42 EBE7                    	jmp .L_tc_recycle_frame_loop_00e2
 27119                                  .L_tc_recycle_frame_done_00e2:
 27120 00013A44 488D6308                	lea rsp, [rbx + 8 * 1]
 27121 00013A48 5D                      	pop rbp	; the proc will restore it!
 27122 00013A49 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27123 00013A4C C9                      	leave
 27124 00013A4D C21800                  	ret AND_KILL_FRAME(1)
 27125                                  .L_lambda_simple_end_00a8:	; new closure is in rax
 27126 00013A50 803804                  	cmp byte [rax], T_closure
 27127 00013A53 0F85871D0000            	jne L_error_non_closure
 27128 00013A59 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27129                                  
 27130                                  	; recycling the current frame
 27131 00013A5C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27132 00013A5F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27133 00013A62 B905000000              	mov rcx, 1 + 4
 27134 00013A67 488B5D18                	mov rbx, COUNT
 27135 00013A6B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27136 00013A70 488D55F8                	lea rdx, [rbp - 8 * 1]
 27137                                  .L_tc_recycle_frame_loop_00e3:
 27138 00013A74 4883F900                	cmp rcx, 0
 27139 00013A78 7413                    	je .L_tc_recycle_frame_done_00e3
 27140 00013A7A 488B32                  	mov rsi, qword [rdx]
 27141 00013A7D 488933                  	mov qword [rbx], rsi
 27142 00013A80 48FFC9                  	dec rcx
 27143 00013A83 4883EB08                	sub rbx, 8 * 1
 27144 00013A87 4883EA08                	sub rdx, 8 * 1
 27145 00013A8B EBE7                    	jmp .L_tc_recycle_frame_loop_00e3
 27146                                  .L_tc_recycle_frame_done_00e3:
 27147 00013A8D 488D6308                	lea rsp, [rbx + 8 * 1]
 27148 00013A91 5D                      	pop rbp	; the proc will restore it!
 27149 00013A92 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27150                                  
 27151 00013A95 EB04                    	jmp .L_if_end_0082
 27152                                  
 27153                                  	.L_if_else_0082:
 27154 00013A97 488B4520                	mov rax, PARAM(0)	; param str
 27155                                  
 27156                                  	.L_if_end_0082:
 27157 00013A9B C9                      	leave
 27158 00013A9C C22800                  	ret AND_KILL_FRAME(3)
 27159                                  .L_lambda_simple_end_00a7:	; new closure is in rax
 27160                                  
 27161 00013A9F 50                      	push rax
 27162 00013AA0 488B4520                	mov rax, PARAM(0)	; param run
 27163                                  
 27164 00013AA4 8F00                    	pop qword[rax]
 27165 00013AA6 48B8-                   	mov rax, sob_void
 27165 00013AA8 [0000000000000000] 
 27166                                  
 27167 00013AB0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27168 00013AB5 E8CF1D0000              	call malloc
 27169 00013ABA 50                      	push rax
 27170 00013ABB BF08000000              	mov rdi, 8 * 1	; new rib
 27171 00013AC0 E8C41D0000              	call malloc
 27172 00013AC5 50                      	push rax
 27173 00013AC6 BF10000000              	mov rdi, 8 * 2	; extended env
 27174 00013ACB E8B91D0000              	call malloc
 27175 00013AD0 488B7D10                	mov rdi, ENV
 27176 00013AD4 BE00000000              	mov rsi, 0
 27177 00013AD9 BA01000000              	mov rdx, 1
 27178                                  .L_lambda_simple_env_loop_00a9:	; ext_env[i + 1] <-- env[i]
 27179 00013ADE 4883FE01                	cmp rsi, 1
 27180 00013AE2 7410                    	je .L_lambda_simple_env_end_00a9
 27181 00013AE4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27182 00013AE8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27183 00013AEC 48FFC6                  	inc rsi
 27184 00013AEF 48FFC2                  	inc rdx
 27185 00013AF2 EBEA                    	jmp .L_lambda_simple_env_loop_00a9
 27186                                  .L_lambda_simple_env_end_00a9:
 27187 00013AF4 5B                      	pop rbx
 27188 00013AF5 BE00000000              	mov rsi, 0
 27189                                  .L_lambda_simple_params_loop_00a9:	; copy params
 27190 00013AFA 4883FE01                	cmp rsi, 1
 27191 00013AFE 740E                    	je .L_lambda_simple_params_end_00a9
 27192 00013B00 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27193 00013B05 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27194 00013B09 48FFC6                  	inc rsi
 27195 00013B0C EBEC                    	jmp .L_lambda_simple_params_loop_00a9
 27196                                  .L_lambda_simple_params_end_00a9:
 27197 00013B0E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27198 00013B11 4889C3                  	mov rbx, rax
 27199 00013B14 58                      	pop rax
 27200 00013B15 C60004                  	mov byte [rax], T_closure
 27201 00013B18 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27202 00013B1C 48C74009[293B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a9
 27203 00013B24 E9FA010000              	jmp .L_lambda_simple_end_00a9
 27204                                  .L_lambda_simple_code_00a9:	; lambda-simple body
 27205 00013B29 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27206 00013B2F 740B                    	je .L_lambda_simple_arity_check_ok_00a9
 27207 00013B31 FF742410                	push qword [rsp + 8 * 2]
 27208 00013B35 6A01                    	push 1
 27209 00013B37 E9061D0000              	jmp L_error_incorrect_arity_simple
 27210                                  .L_lambda_simple_arity_check_ok_00a9:
 27211 00013B3C C8000000                	enter 0, 0
 27212                                  	; preparing a tail-call
 27213 00013B40 488B4520                	mov rax, PARAM(0)	; param str
 27214 00013B44 50                      	push rax
 27215 00013B45 6A01                    	push 1	; arg count
 27216 00013B47 488B0425[E30E0000]      	mov rax, qword [free_var_18]	; free var string-length
 27217 00013B4F 803805                  	cmp byte [rax], T_undefined
 27218 00013B52 0F84041C0000            	je L_error_fvar_undefined
 27219 00013B58 803804                  	cmp byte [rax], T_closure
 27220 00013B5B 0F857F1C0000            	jne L_error_non_closure
 27221 00013B61 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27222 00013B64 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27223 00013B67 50                      	push rax
 27224 00013B68 6A01                    	push 1	; arg count
 27225 00013B6A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27226 00013B6F E8151D0000              	call malloc
 27227 00013B74 50                      	push rax
 27228 00013B75 BF08000000              	mov rdi, 8 * 1	; new rib
 27229 00013B7A E80A1D0000              	call malloc
 27230 00013B7F 50                      	push rax
 27231 00013B80 BF18000000              	mov rdi, 8 * 3	; extended env
 27232 00013B85 E8FF1C0000              	call malloc
 27233 00013B8A 488B7D10                	mov rdi, ENV
 27234 00013B8E BE00000000              	mov rsi, 0
 27235 00013B93 BA01000000              	mov rdx, 1
 27236                                  .L_lambda_simple_env_loop_00aa:	; ext_env[i + 1] <-- env[i]
 27237 00013B98 4883FE02                	cmp rsi, 2
 27238 00013B9C 7410                    	je .L_lambda_simple_env_end_00aa
 27239 00013B9E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27240 00013BA2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27241 00013BA6 48FFC6                  	inc rsi
 27242 00013BA9 48FFC2                  	inc rdx
 27243 00013BAC EBEA                    	jmp .L_lambda_simple_env_loop_00aa
 27244                                  .L_lambda_simple_env_end_00aa:
 27245 00013BAE 5B                      	pop rbx
 27246 00013BAF BE00000000              	mov rsi, 0
 27247                                  .L_lambda_simple_params_loop_00aa:	; copy params
 27248 00013BB4 4883FE01                	cmp rsi, 1
 27249 00013BB8 740E                    	je .L_lambda_simple_params_end_00aa
 27250 00013BBA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27251 00013BBF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27252 00013BC3 48FFC6                  	inc rsi
 27253 00013BC6 EBEC                    	jmp .L_lambda_simple_params_loop_00aa
 27254                                  .L_lambda_simple_params_end_00aa:
 27255 00013BC8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27256 00013BCB 4889C3                  	mov rbx, rax
 27257 00013BCE 58                      	pop rax
 27258 00013BCF C60004                  	mov byte [rax], T_closure
 27259 00013BD2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27260 00013BD6 48C74009[E33B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00aa
 27261 00013BDE E9F7000000              	jmp .L_lambda_simple_end_00aa
 27262                                  .L_lambda_simple_code_00aa:	; lambda-simple body
 27263 00013BE3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27264 00013BE9 740B                    	je .L_lambda_simple_arity_check_ok_00aa
 27265 00013BEB FF742410                	push qword [rsp + 8 * 2]
 27266 00013BEF 6A01                    	push 1
 27267 00013BF1 E94C1C0000              	jmp L_error_incorrect_arity_simple
 27268                                  .L_lambda_simple_arity_check_ok_00aa:
 27269 00013BF6 C8000000                	enter 0, 0
 27270 00013BFA 488B4520                	mov rax, PARAM(0)	; param n
 27271 00013BFE 50                      	push rax
 27272 00013BFF 6A01                    	push 1	; arg count
 27273 00013C01 488B0425[7C0F0000]      	mov rax, qword [free_var_27]	; free var zero?
 27274 00013C09 803805                  	cmp byte [rax], T_undefined
 27275 00013C0C 0F844A1B0000            	je L_error_fvar_undefined
 27276 00013C12 803804                  	cmp byte [rax], T_closure
 27277 00013C15 0F85C51B0000            	jne L_error_non_closure
 27278 00013C1B FF7001                  	push SOB_CLOSURE_ENV(rax)
 27279 00013C1E FF5009                  	call SOB_CLOSURE_CODE(rax)
 27280                                  
 27281 00013C21 483D[02000000]          	cmp rax, sob_boolean_false
 27282 00013C27 740F                    	je .L_if_else_0083
 27283 00013C29 488B4510                	mov rax, ENV
 27284 00013C2D 488B00                  	mov rax, qword [rax + 8 * 0]
 27285 00013C30 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27286                                  
 27287 00013C33 E99E000000              	jmp .L_if_end_0083
 27288                                  
 27289                                  	.L_if_else_0083:
 27290                                  	; preparing a tail-call
 27291 00013C38 48B8-                   	mov rax, L_constants + 2158
 27291 00013C3A [6E08000000000000] 
 27292 00013C42 50                      	push rax
 27293 00013C43 488B4520                	mov rax, PARAM(0)	; param n
 27294 00013C47 50                      	push rax
 27295 00013C48 6A02                    	push 2	; arg count
 27296 00013C4A 488B0425[76150000]      	mov rax, qword [free_var_117]	; free var -
 27297 00013C52 803805                  	cmp byte [rax], T_undefined
 27298 00013C55 0F84011B0000            	je L_error_fvar_undefined
 27299 00013C5B 803804                  	cmp byte [rax], T_closure
 27300 00013C5E 0F857C1B0000            	jne L_error_non_closure
 27301 00013C64 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27302 00013C67 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27303 00013C6A 50                      	push rax
 27304 00013C6B 48B8-                   	mov rax, L_constants + 2023
 27304 00013C6D [E707000000000000] 
 27305 00013C75 50                      	push rax
 27306 00013C76 488B4510                	mov rax, ENV
 27307 00013C7A 488B00                  	mov rax, qword [rax + 8 * 0]
 27308 00013C7D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27309 00013C80 50                      	push rax
 27310 00013C81 6A03                    	push 3	; arg count
 27311 00013C83 488B4510                	mov rax, ENV
 27312 00013C87 488B4008                	mov rax, qword [rax + 8 * 1]
 27313 00013C8B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27314 00013C8E 488B00                  	mov rax, qword [rax]
 27315 00013C91 803804                  	cmp byte [rax], T_closure
 27316 00013C94 0F85461B0000            	jne L_error_non_closure
 27317 00013C9A FF7001                  	push SOB_CLOSURE_ENV(rax)
 27318                                  
 27319                                  	; recycling the current frame
 27320 00013C9D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27321 00013CA0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27322 00013CA3 B907000000              	mov rcx, 3 + 4
 27323 00013CA8 488B5D18                	mov rbx, COUNT
 27324 00013CAC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27325 00013CB1 488D55F8                	lea rdx, [rbp - 8 * 1]
 27326                                  .L_tc_recycle_frame_loop_00e4:
 27327 00013CB5 4883F900                	cmp rcx, 0
 27328 00013CB9 7413                    	je .L_tc_recycle_frame_done_00e4
 27329 00013CBB 488B32                  	mov rsi, qword [rdx]
 27330 00013CBE 488933                  	mov qword [rbx], rsi
 27331 00013CC1 48FFC9                  	dec rcx
 27332 00013CC4 4883EB08                	sub rbx, 8 * 1
 27333 00013CC8 4883EA08                	sub rdx, 8 * 1
 27334 00013CCC EBE7                    	jmp .L_tc_recycle_frame_loop_00e4
 27335                                  .L_tc_recycle_frame_done_00e4:
 27336 00013CCE 488D6308                	lea rsp, [rbx + 8 * 1]
 27337 00013CD2 5D                      	pop rbp	; the proc will restore it!
 27338 00013CD3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27339                                  
 27340                                  	.L_if_end_0083:
 27341 00013CD6 C9                      	leave
 27342 00013CD7 C21800                  	ret AND_KILL_FRAME(1)
 27343                                  .L_lambda_simple_end_00aa:	; new closure is in rax
 27344 00013CDA 803804                  	cmp byte [rax], T_closure
 27345 00013CDD 0F85FD1A0000            	jne L_error_non_closure
 27346 00013CE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27347                                  
 27348                                  	; recycling the current frame
 27349 00013CE6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27350 00013CE9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27351 00013CEC B905000000              	mov rcx, 1 + 4
 27352 00013CF1 488B5D18                	mov rbx, COUNT
 27353 00013CF5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27354 00013CFA 488D55F8                	lea rdx, [rbp - 8 * 1]
 27355                                  .L_tc_recycle_frame_loop_00e5:
 27356 00013CFE 4883F900                	cmp rcx, 0
 27357 00013D02 7413                    	je .L_tc_recycle_frame_done_00e5
 27358 00013D04 488B32                  	mov rsi, qword [rdx]
 27359 00013D07 488933                  	mov qword [rbx], rsi
 27360 00013D0A 48FFC9                  	dec rcx
 27361 00013D0D 4883EB08                	sub rbx, 8 * 1
 27362 00013D11 4883EA08                	sub rdx, 8 * 1
 27363 00013D15 EBE7                    	jmp .L_tc_recycle_frame_loop_00e5
 27364                                  .L_tc_recycle_frame_done_00e5:
 27365 00013D17 488D6308                	lea rsp, [rbx + 8 * 1]
 27366 00013D1B 5D                      	pop rbp	; the proc will restore it!
 27367 00013D1C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27368 00013D1F C9                      	leave
 27369 00013D20 C21800                  	ret AND_KILL_FRAME(1)
 27370                                  .L_lambda_simple_end_00a9:	; new closure is in rax
 27371 00013D23 C9                      	leave
 27372 00013D24 C21800                  	ret AND_KILL_FRAME(1)
 27373                                  .L_lambda_simple_end_00a6:	; new closure is in rax
 27374 00013D27 803804                  	cmp byte [rax], T_closure
 27375 00013D2A 0F85B01A0000            	jne L_error_non_closure
 27376 00013D30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27377 00013D33 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27378 00013D36 48890425[FB180000]      	mov qword [free_var_170], rax
 27379 00013D3E 48B8-                   	mov rax, sob_void
 27379 00013D40 [0000000000000000] 
 27380                                  
 27381 00013D48 4889C7                  	mov rdi, rax
 27382 00013D4B E84B1C0000              	call print_sexpr_if_not_void
 27383                                  
 27384 00013D50 48B8-                   	mov rax, L_constants + 1881
 27384 00013D52 [5907000000000000] 
 27385 00013D5A 50                      	push rax
 27386 00013D5B 6A01                    	push 1	; arg count
 27387 00013D5D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27388 00013D62 E8221B0000              	call malloc
 27389 00013D67 50                      	push rax
 27390 00013D68 BF00000000              	mov rdi, 8 * 0	; new rib
 27391 00013D6D E8171B0000              	call malloc
 27392 00013D72 50                      	push rax
 27393 00013D73 BF08000000              	mov rdi, 8 * 1	; extended env
 27394 00013D78 E80C1B0000              	call malloc
 27395 00013D7D 488B7D10                	mov rdi, ENV
 27396 00013D81 BE00000000              	mov rsi, 0
 27397 00013D86 BA01000000              	mov rdx, 1
 27398                                  .L_lambda_simple_env_loop_00ab:	; ext_env[i + 1] <-- env[i]
 27399 00013D8B 4883FE00                	cmp rsi, 0
 27400 00013D8F 7410                    	je .L_lambda_simple_env_end_00ab
 27401 00013D91 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27402 00013D95 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27403 00013D99 48FFC6                  	inc rsi
 27404 00013D9C 48FFC2                  	inc rdx
 27405 00013D9F EBEA                    	jmp .L_lambda_simple_env_loop_00ab
 27406                                  .L_lambda_simple_env_end_00ab:
 27407 00013DA1 5B                      	pop rbx
 27408 00013DA2 BE00000000              	mov rsi, 0
 27409                                  .L_lambda_simple_params_loop_00ab:	; copy params
 27410 00013DA7 4883FE00                	cmp rsi, 0
 27411 00013DAB 740E                    	je .L_lambda_simple_params_end_00ab
 27412 00013DAD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27413 00013DB2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27414 00013DB6 48FFC6                  	inc rsi
 27415 00013DB9 EBEC                    	jmp .L_lambda_simple_params_loop_00ab
 27416                                  .L_lambda_simple_params_end_00ab:
 27417 00013DBB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27418 00013DBE 4889C3                  	mov rbx, rax
 27419 00013DC1 58                      	pop rax
 27420 00013DC2 C60004                  	mov byte [rax], T_closure
 27421 00013DC5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27422 00013DC9 48C74009[D63D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ab
 27423 00013DD1 E91D060000              	jmp .L_lambda_simple_end_00ab
 27424                                  .L_lambda_simple_code_00ab:	; lambda-simple body
 27425 00013DD6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27426 00013DDC 740B                    	je .L_lambda_simple_arity_check_ok_00ab
 27427 00013DDE FF742410                	push qword [rsp + 8 * 2]
 27428 00013DE2 6A01                    	push 1
 27429 00013DE4 E9591A0000              	jmp L_error_incorrect_arity_simple
 27430                                  .L_lambda_simple_arity_check_ok_00ab:
 27431 00013DE9 C8000000                	enter 0, 0
 27432                                  
 27433 00013DED BF08000000              	mov rdi, 8
 27434 00013DF2 E8921A0000              	call malloc
 27435 00013DF7 488B5D20                	mov rbx, PARAM(0)	; param run
 27436 00013DFB 488918                  	mov [rax], rbx	; box run
 27437 00013DFE 48894520                	mov PARAM(0), rax	;replace param run with box
 27438 00013E02 48B8-                   	mov rax, sob_void
 27438 00013E04 [0000000000000000] 
 27439                                  
 27440 00013E0C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27441 00013E11 E8731A0000              	call malloc
 27442 00013E16 50                      	push rax
 27443 00013E17 BF08000000              	mov rdi, 8 * 1	; new rib
 27444 00013E1C E8681A0000              	call malloc
 27445 00013E21 50                      	push rax
 27446 00013E22 BF10000000              	mov rdi, 8 * 2	; extended env
 27447 00013E27 E85D1A0000              	call malloc
 27448 00013E2C 488B7D10                	mov rdi, ENV
 27449 00013E30 BE00000000              	mov rsi, 0
 27450 00013E35 BA01000000              	mov rdx, 1
 27451                                  .L_lambda_simple_env_loop_00ac:	; ext_env[i + 1] <-- env[i]
 27452 00013E3A 4883FE01                	cmp rsi, 1
 27453 00013E3E 7410                    	je .L_lambda_simple_env_end_00ac
 27454 00013E40 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27455 00013E44 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27456 00013E48 48FFC6                  	inc rsi
 27457 00013E4B 48FFC2                  	inc rdx
 27458 00013E4E EBEA                    	jmp .L_lambda_simple_env_loop_00ac
 27459                                  .L_lambda_simple_env_end_00ac:
 27460 00013E50 5B                      	pop rbx
 27461 00013E51 BE00000000              	mov rsi, 0
 27462                                  .L_lambda_simple_params_loop_00ac:	; copy params
 27463 00013E56 4883FE01                	cmp rsi, 1
 27464 00013E5A 740E                    	je .L_lambda_simple_params_end_00ac
 27465 00013E5C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27466 00013E61 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27467 00013E65 48FFC6                  	inc rsi
 27468 00013E68 EBEC                    	jmp .L_lambda_simple_params_loop_00ac
 27469                                  .L_lambda_simple_params_end_00ac:
 27470 00013E6A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27471 00013E6D 4889C3                  	mov rbx, rax
 27472 00013E70 58                      	pop rax
 27473 00013E71 C60004                  	mov byte [rax], T_closure
 27474 00013E74 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27475 00013E78 48C74009[853E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ac
 27476 00013E80 E9E6020000              	jmp .L_lambda_simple_end_00ac
 27477                                  .L_lambda_simple_code_00ac:	; lambda-simple body
 27478 00013E85 48837C241003            	cmp qword [rsp + 8 * 2], 3
 27479 00013E8B 740B                    	je .L_lambda_simple_arity_check_ok_00ac
 27480 00013E8D FF742410                	push qword [rsp + 8 * 2]
 27481 00013E91 6A03                    	push 3
 27482 00013E93 E9AA190000              	jmp L_error_incorrect_arity_simple
 27483                                  .L_lambda_simple_arity_check_ok_00ac:
 27484 00013E98 C8000000                	enter 0, 0
 27485 00013E9C 488B4530                	mov rax, PARAM(2)	; param j
 27486 00013EA0 50                      	push rax
 27487 00013EA1 488B4528                	mov rax, PARAM(1)	; param i
 27488 00013EA5 50                      	push rax
 27489 00013EA6 6A02                    	push 2	; arg count
 27490 00013EA8 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 27491 00013EB0 803805                  	cmp byte [rax], T_undefined
 27492 00013EB3 0F84A3180000            	je L_error_fvar_undefined
 27493 00013EB9 803804                  	cmp byte [rax], T_closure
 27494 00013EBC 0F851E190000            	jne L_error_non_closure
 27495 00013EC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27496 00013EC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27497                                  
 27498 00013EC8 483D[02000000]          	cmp rax, sob_boolean_false
 27499 00013ECE 0F848F020000            	je .L_if_else_0084
 27500                                  	; preparing a tail-call
 27501 00013ED4 488B4528                	mov rax, PARAM(1)	; param i
 27502 00013ED8 50                      	push rax
 27503 00013ED9 488B4520                	mov rax, PARAM(0)	; param vec
 27504 00013EDD 50                      	push rax
 27505 00013EDE 6A02                    	push 2	; arg count
 27506 00013EE0 488B0425[47110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 27507 00013EE8 803805                  	cmp byte [rax], T_undefined
 27508 00013EEB 0F846B180000            	je L_error_fvar_undefined
 27509 00013EF1 803804                  	cmp byte [rax], T_closure
 27510 00013EF4 0F85E6180000            	jne L_error_non_closure
 27511 00013EFA FF7001                  	push SOB_CLOSURE_ENV(rax)
 27512 00013EFD FF5009                  	call SOB_CLOSURE_CODE(rax)
 27513 00013F00 50                      	push rax
 27514 00013F01 6A01                    	push 1	; arg count
 27515 00013F03 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27516 00013F08 E87C190000              	call malloc
 27517 00013F0D 50                      	push rax
 27518 00013F0E BF18000000              	mov rdi, 8 * 3	; new rib
 27519 00013F13 E871190000              	call malloc
 27520 00013F18 50                      	push rax
 27521 00013F19 BF18000000              	mov rdi, 8 * 3	; extended env
 27522 00013F1E E866190000              	call malloc
 27523 00013F23 488B7D10                	mov rdi, ENV
 27524 00013F27 BE00000000              	mov rsi, 0
 27525 00013F2C BA01000000              	mov rdx, 1
 27526                                  .L_lambda_simple_env_loop_00ad:	; ext_env[i + 1] <-- env[i]
 27527 00013F31 4883FE02                	cmp rsi, 2
 27528 00013F35 7410                    	je .L_lambda_simple_env_end_00ad
 27529 00013F37 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27530 00013F3B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27531 00013F3F 48FFC6                  	inc rsi
 27532 00013F42 48FFC2                  	inc rdx
 27533 00013F45 EBEA                    	jmp .L_lambda_simple_env_loop_00ad
 27534                                  .L_lambda_simple_env_end_00ad:
 27535 00013F47 5B                      	pop rbx
 27536 00013F48 BE00000000              	mov rsi, 0
 27537                                  .L_lambda_simple_params_loop_00ad:	; copy params
 27538 00013F4D 4883FE03                	cmp rsi, 3
 27539 00013F51 740E                    	je .L_lambda_simple_params_end_00ad
 27540 00013F53 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27541 00013F58 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27542 00013F5C 48FFC6                  	inc rsi
 27543 00013F5F EBEC                    	jmp .L_lambda_simple_params_loop_00ad
 27544                                  .L_lambda_simple_params_end_00ad:
 27545 00013F61 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27546 00013F64 4889C3                  	mov rbx, rax
 27547 00013F67 58                      	pop rax
 27548 00013F68 C60004                  	mov byte [rax], T_closure
 27549 00013F6B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27550 00013F6F 48C74009[7C3F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ad
 27551 00013F77 E9A0010000              	jmp .L_lambda_simple_end_00ad
 27552                                  .L_lambda_simple_code_00ad:	; lambda-simple body
 27553 00013F7C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27554 00013F82 740B                    	je .L_lambda_simple_arity_check_ok_00ad
 27555 00013F84 FF742410                	push qword [rsp + 8 * 2]
 27556 00013F88 6A01                    	push 1
 27557 00013F8A E9B3180000              	jmp L_error_incorrect_arity_simple
 27558                                  .L_lambda_simple_arity_check_ok_00ad:
 27559 00013F8F C8000000                	enter 0, 0
 27560 00013F93 488B4510                	mov rax, ENV
 27561 00013F97 488B00                  	mov rax, qword [rax + 8 * 0]
 27562 00013F9A 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27563 00013F9E 50                      	push rax
 27564 00013F9F 488B4510                	mov rax, ENV
 27565 00013FA3 488B00                  	mov rax, qword [rax + 8 * 0]
 27566 00013FA6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27567 00013FA9 50                      	push rax
 27568 00013FAA 6A02                    	push 2	; arg count
 27569 00013FAC 488B0425[47110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 27570 00013FB4 803805                  	cmp byte [rax], T_undefined
 27571 00013FB7 0F849F170000            	je L_error_fvar_undefined
 27572 00013FBD 803804                  	cmp byte [rax], T_closure
 27573 00013FC0 0F851A180000            	jne L_error_non_closure
 27574 00013FC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27575 00013FC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27576 00013FCC 50                      	push rax
 27577 00013FCD 488B4510                	mov rax, ENV
 27578 00013FD1 488B00                  	mov rax, qword [rax + 8 * 0]
 27579 00013FD4 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27580 00013FD8 50                      	push rax
 27581 00013FD9 488B4510                	mov rax, ENV
 27582 00013FDD 488B00                  	mov rax, qword [rax + 8 * 0]
 27583 00013FE0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27584 00013FE3 50                      	push rax
 27585 00013FE4 6A03                    	push 3	; arg count
 27586 00013FE6 488B0425[58110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 27587 00013FEE 803805                  	cmp byte [rax], T_undefined
 27588 00013FF1 0F8465170000            	je L_error_fvar_undefined
 27589 00013FF7 803804                  	cmp byte [rax], T_closure
 27590 00013FFA 0F85E0170000            	jne L_error_non_closure
 27591 00014000 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27592 00014003 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27593                                  
 27594 00014006 488B4520                	mov rax, PARAM(0)	; param ch
 27595 0001400A 50                      	push rax
 27596 0001400B 488B4510                	mov rax, ENV
 27597 0001400F 488B00                  	mov rax, qword [rax + 8 * 0]
 27598 00014012 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27599 00014016 50                      	push rax
 27600 00014017 488B4510                	mov rax, ENV
 27601 0001401B 488B00                  	mov rax, qword [rax + 8 * 0]
 27602 0001401E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27603 00014021 50                      	push rax
 27604 00014022 6A03                    	push 3	; arg count
 27605 00014024 488B0425[58110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 27606 0001402C 803805                  	cmp byte [rax], T_undefined
 27607 0001402F 0F8427170000            	je L_error_fvar_undefined
 27608 00014035 803804                  	cmp byte [rax], T_closure
 27609 00014038 0F85A2170000            	jne L_error_non_closure
 27610 0001403E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27611 00014041 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27612                                  
 27613                                  	; preparing a tail-call
 27614 00014044 48B8-                   	mov rax, L_constants + 2158
 27614 00014046 [6E08000000000000] 
 27615 0001404E 50                      	push rax
 27616 0001404F 488B4510                	mov rax, ENV
 27617 00014053 488B00                  	mov rax, qword [rax + 8 * 0]
 27618 00014056 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27619 0001405A 50                      	push rax
 27620 0001405B 6A02                    	push 2	; arg count
 27621 0001405D 488B0425[76150000]      	mov rax, qword [free_var_117]	; free var -
 27622 00014065 803805                  	cmp byte [rax], T_undefined
 27623 00014068 0F84EE160000            	je L_error_fvar_undefined
 27624 0001406E 803804                  	cmp byte [rax], T_closure
 27625 00014071 0F8569170000            	jne L_error_non_closure
 27626 00014077 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27627 0001407A FF5009                  	call SOB_CLOSURE_CODE(rax)
 27628 0001407D 50                      	push rax
 27629 0001407E 48B8-                   	mov rax, L_constants + 2158
 27629 00014080 [6E08000000000000] 
 27630 00014088 50                      	push rax
 27631 00014089 488B4510                	mov rax, ENV
 27632 0001408D 488B00                  	mov rax, qword [rax + 8 * 0]
 27633 00014090 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27634 00014094 50                      	push rax
 27635 00014095 6A02                    	push 2	; arg count
 27636 00014097 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 27637 0001409F 803805                  	cmp byte [rax], T_undefined
 27638 000140A2 0F84B4160000            	je L_error_fvar_undefined
 27639 000140A8 803804                  	cmp byte [rax], T_closure
 27640 000140AB 0F852F170000            	jne L_error_non_closure
 27641 000140B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27642 000140B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27643 000140B7 50                      	push rax
 27644 000140B8 488B4510                	mov rax, ENV
 27645 000140BC 488B00                  	mov rax, qword [rax + 8 * 0]
 27646 000140BF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27647 000140C2 50                      	push rax
 27648 000140C3 6A03                    	push 3	; arg count
 27649 000140C5 488B4510                	mov rax, ENV
 27650 000140C9 488B4008                	mov rax, qword [rax + 8 * 1]
 27651 000140CD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27652 000140D0 488B00                  	mov rax, qword [rax]
 27653 000140D3 803804                  	cmp byte [rax], T_closure
 27654 000140D6 0F8504170000            	jne L_error_non_closure
 27655 000140DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 27656                                  
 27657                                  	; recycling the current frame
 27658 000140DF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27659 000140E2 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27660 000140E5 B907000000              	mov rcx, 3 + 4
 27661 000140EA 488B5D18                	mov rbx, COUNT
 27662 000140EE 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27663 000140F3 488D55F8                	lea rdx, [rbp - 8 * 1]
 27664                                  .L_tc_recycle_frame_loop_00e6:
 27665 000140F7 4883F900                	cmp rcx, 0
 27666 000140FB 7413                    	je .L_tc_recycle_frame_done_00e6
 27667 000140FD 488B32                  	mov rsi, qword [rdx]
 27668 00014100 488933                  	mov qword [rbx], rsi
 27669 00014103 48FFC9                  	dec rcx
 27670 00014106 4883EB08                	sub rbx, 8 * 1
 27671 0001410A 4883EA08                	sub rdx, 8 * 1
 27672 0001410E EBE7                    	jmp .L_tc_recycle_frame_loop_00e6
 27673                                  .L_tc_recycle_frame_done_00e6:
 27674 00014110 488D6308                	lea rsp, [rbx + 8 * 1]
 27675 00014114 5D                      	pop rbp	; the proc will restore it!
 27676 00014115 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27677 00014118 C9                      	leave
 27678 00014119 C21800                  	ret AND_KILL_FRAME(1)
 27679                                  .L_lambda_simple_end_00ad:	; new closure is in rax
 27680 0001411C 803804                  	cmp byte [rax], T_closure
 27681 0001411F 0F85BB160000            	jne L_error_non_closure
 27682 00014125 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27683                                  
 27684                                  	; recycling the current frame
 27685 00014128 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27686 0001412B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27687 0001412E B905000000              	mov rcx, 1 + 4
 27688 00014133 488B5D18                	mov rbx, COUNT
 27689 00014137 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27690 0001413C 488D55F8                	lea rdx, [rbp - 8 * 1]
 27691                                  .L_tc_recycle_frame_loop_00e7:
 27692 00014140 4883F900                	cmp rcx, 0
 27693 00014144 7413                    	je .L_tc_recycle_frame_done_00e7
 27694 00014146 488B32                  	mov rsi, qword [rdx]
 27695 00014149 488933                  	mov qword [rbx], rsi
 27696 0001414C 48FFC9                  	dec rcx
 27697 0001414F 4883EB08                	sub rbx, 8 * 1
 27698 00014153 4883EA08                	sub rdx, 8 * 1
 27699 00014157 EBE7                    	jmp .L_tc_recycle_frame_loop_00e7
 27700                                  .L_tc_recycle_frame_done_00e7:
 27701 00014159 488D6308                	lea rsp, [rbx + 8 * 1]
 27702 0001415D 5D                      	pop rbp	; the proc will restore it!
 27703 0001415E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27704                                  
 27705 00014161 EB04                    	jmp .L_if_end_0084
 27706                                  
 27707                                  	.L_if_else_0084:
 27708 00014163 488B4520                	mov rax, PARAM(0)	; param vec
 27709                                  
 27710                                  	.L_if_end_0084:
 27711 00014167 C9                      	leave
 27712 00014168 C22800                  	ret AND_KILL_FRAME(3)
 27713                                  .L_lambda_simple_end_00ac:	; new closure is in rax
 27714                                  
 27715 0001416B 50                      	push rax
 27716 0001416C 488B4520                	mov rax, PARAM(0)	; param run
 27717                                  
 27718 00014170 8F00                    	pop qword[rax]
 27719 00014172 48B8-                   	mov rax, sob_void
 27719 00014174 [0000000000000000] 
 27720                                  
 27721 0001417C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27722 00014181 E803170000              	call malloc
 27723 00014186 50                      	push rax
 27724 00014187 BF08000000              	mov rdi, 8 * 1	; new rib
 27725 0001418C E8F8160000              	call malloc
 27726 00014191 50                      	push rax
 27727 00014192 BF10000000              	mov rdi, 8 * 2	; extended env
 27728 00014197 E8ED160000              	call malloc
 27729 0001419C 488B7D10                	mov rdi, ENV
 27730 000141A0 BE00000000              	mov rsi, 0
 27731 000141A5 BA01000000              	mov rdx, 1
 27732                                  .L_lambda_simple_env_loop_00ae:	; ext_env[i + 1] <-- env[i]
 27733 000141AA 4883FE01                	cmp rsi, 1
 27734 000141AE 7410                    	je .L_lambda_simple_env_end_00ae
 27735 000141B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27736 000141B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27737 000141B8 48FFC6                  	inc rsi
 27738 000141BB 48FFC2                  	inc rdx
 27739 000141BE EBEA                    	jmp .L_lambda_simple_env_loop_00ae
 27740                                  .L_lambda_simple_env_end_00ae:
 27741 000141C0 5B                      	pop rbx
 27742 000141C1 BE00000000              	mov rsi, 0
 27743                                  .L_lambda_simple_params_loop_00ae:	; copy params
 27744 000141C6 4883FE01                	cmp rsi, 1
 27745 000141CA 740E                    	je .L_lambda_simple_params_end_00ae
 27746 000141CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27747 000141D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27748 000141D5 48FFC6                  	inc rsi
 27749 000141D8 EBEC                    	jmp .L_lambda_simple_params_loop_00ae
 27750                                  .L_lambda_simple_params_end_00ae:
 27751 000141DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27752 000141DD 4889C3                  	mov rbx, rax
 27753 000141E0 58                      	pop rax
 27754 000141E1 C60004                  	mov byte [rax], T_closure
 27755 000141E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27756 000141E8 48C74009[F5410100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ae
 27757 000141F0 E9FA010000              	jmp .L_lambda_simple_end_00ae
 27758                                  .L_lambda_simple_code_00ae:	; lambda-simple body
 27759 000141F5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27760 000141FB 740B                    	je .L_lambda_simple_arity_check_ok_00ae
 27761 000141FD FF742410                	push qword [rsp + 8 * 2]
 27762 00014201 6A01                    	push 1
 27763 00014203 E93A160000              	jmp L_error_incorrect_arity_simple
 27764                                  .L_lambda_simple_arity_check_ok_00ae:
 27765 00014208 C8000000                	enter 0, 0
 27766                                  	; preparing a tail-call
 27767 0001420C 488B4520                	mov rax, PARAM(0)	; param vec
 27768 00014210 50                      	push rax
 27769 00014211 6A01                    	push 1	; arg count
 27770 00014213 488B0425[F40E0000]      	mov rax, qword [free_var_19]	; free var vector-length
 27771 0001421B 803805                  	cmp byte [rax], T_undefined
 27772 0001421E 0F8438150000            	je L_error_fvar_undefined
 27773 00014224 803804                  	cmp byte [rax], T_closure
 27774 00014227 0F85B3150000            	jne L_error_non_closure
 27775 0001422D FF7001                  	push SOB_CLOSURE_ENV(rax)
 27776 00014230 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27777 00014233 50                      	push rax
 27778 00014234 6A01                    	push 1	; arg count
 27779 00014236 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27780 0001423B E849160000              	call malloc
 27781 00014240 50                      	push rax
 27782 00014241 BF08000000              	mov rdi, 8 * 1	; new rib
 27783 00014246 E83E160000              	call malloc
 27784 0001424B 50                      	push rax
 27785 0001424C BF18000000              	mov rdi, 8 * 3	; extended env
 27786 00014251 E833160000              	call malloc
 27787 00014256 488B7D10                	mov rdi, ENV
 27788 0001425A BE00000000              	mov rsi, 0
 27789 0001425F BA01000000              	mov rdx, 1
 27790                                  .L_lambda_simple_env_loop_00af:	; ext_env[i + 1] <-- env[i]
 27791 00014264 4883FE02                	cmp rsi, 2
 27792 00014268 7410                    	je .L_lambda_simple_env_end_00af
 27793 0001426A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27794 0001426E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27795 00014272 48FFC6                  	inc rsi
 27796 00014275 48FFC2                  	inc rdx
 27797 00014278 EBEA                    	jmp .L_lambda_simple_env_loop_00af
 27798                                  .L_lambda_simple_env_end_00af:
 27799 0001427A 5B                      	pop rbx
 27800 0001427B BE00000000              	mov rsi, 0
 27801                                  .L_lambda_simple_params_loop_00af:	; copy params
 27802 00014280 4883FE01                	cmp rsi, 1
 27803 00014284 740E                    	je .L_lambda_simple_params_end_00af
 27804 00014286 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27805 0001428B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27806 0001428F 48FFC6                  	inc rsi
 27807 00014292 EBEC                    	jmp .L_lambda_simple_params_loop_00af
 27808                                  .L_lambda_simple_params_end_00af:
 27809 00014294 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27810 00014297 4889C3                  	mov rbx, rax
 27811 0001429A 58                      	pop rax
 27812 0001429B C60004                  	mov byte [rax], T_closure
 27813 0001429E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27814 000142A2 48C74009[AF420100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00af
 27815 000142AA E9F7000000              	jmp .L_lambda_simple_end_00af
 27816                                  .L_lambda_simple_code_00af:	; lambda-simple body
 27817 000142AF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27818 000142B5 740B                    	je .L_lambda_simple_arity_check_ok_00af
 27819 000142B7 FF742410                	push qword [rsp + 8 * 2]
 27820 000142BB 6A01                    	push 1
 27821 000142BD E980150000              	jmp L_error_incorrect_arity_simple
 27822                                  .L_lambda_simple_arity_check_ok_00af:
 27823 000142C2 C8000000                	enter 0, 0
 27824 000142C6 488B4520                	mov rax, PARAM(0)	; param n
 27825 000142CA 50                      	push rax
 27826 000142CB 6A01                    	push 1	; arg count
 27827 000142CD 488B0425[7C0F0000]      	mov rax, qword [free_var_27]	; free var zero?
 27828 000142D5 803805                  	cmp byte [rax], T_undefined
 27829 000142D8 0F847E140000            	je L_error_fvar_undefined
 27830 000142DE 803804                  	cmp byte [rax], T_closure
 27831 000142E1 0F85F9140000            	jne L_error_non_closure
 27832 000142E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27833 000142EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 27834                                  
 27835 000142ED 483D[02000000]          	cmp rax, sob_boolean_false
 27836 000142F3 740F                    	je .L_if_else_0085
 27837 000142F5 488B4510                	mov rax, ENV
 27838 000142F9 488B00                  	mov rax, qword [rax + 8 * 0]
 27839 000142FC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27840                                  
 27841 000142FF E99E000000              	jmp .L_if_end_0085
 27842                                  
 27843                                  	.L_if_else_0085:
 27844                                  	; preparing a tail-call
 27845 00014304 48B8-                   	mov rax, L_constants + 2158
 27845 00014306 [6E08000000000000] 
 27846 0001430E 50                      	push rax
 27847 0001430F 488B4520                	mov rax, PARAM(0)	; param n
 27848 00014313 50                      	push rax
 27849 00014314 6A02                    	push 2	; arg count
 27850 00014316 488B0425[76150000]      	mov rax, qword [free_var_117]	; free var -
 27851 0001431E 803805                  	cmp byte [rax], T_undefined
 27852 00014321 0F8435140000            	je L_error_fvar_undefined
 27853 00014327 803804                  	cmp byte [rax], T_closure
 27854 0001432A 0F85B0140000            	jne L_error_non_closure
 27855 00014330 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27856 00014333 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27857 00014336 50                      	push rax
 27858 00014337 48B8-                   	mov rax, L_constants + 2023
 27858 00014339 [E707000000000000] 
 27859 00014341 50                      	push rax
 27860 00014342 488B4510                	mov rax, ENV
 27861 00014346 488B00                  	mov rax, qword [rax + 8 * 0]
 27862 00014349 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27863 0001434C 50                      	push rax
 27864 0001434D 6A03                    	push 3	; arg count
 27865 0001434F 488B4510                	mov rax, ENV
 27866 00014353 488B4008                	mov rax, qword [rax + 8 * 1]
 27867 00014357 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27868 0001435A 488B00                  	mov rax, qword [rax]
 27869 0001435D 803804                  	cmp byte [rax], T_closure
 27870 00014360 0F857A140000            	jne L_error_non_closure
 27871 00014366 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27872                                  
 27873                                  	; recycling the current frame
 27874 00014369 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27875 0001436C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27876 0001436F B907000000              	mov rcx, 3 + 4
 27877 00014374 488B5D18                	mov rbx, COUNT
 27878 00014378 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27879 0001437D 488D55F8                	lea rdx, [rbp - 8 * 1]
 27880                                  .L_tc_recycle_frame_loop_00e8:
 27881 00014381 4883F900                	cmp rcx, 0
 27882 00014385 7413                    	je .L_tc_recycle_frame_done_00e8
 27883 00014387 488B32                  	mov rsi, qword [rdx]
 27884 0001438A 488933                  	mov qword [rbx], rsi
 27885 0001438D 48FFC9                  	dec rcx
 27886 00014390 4883EB08                	sub rbx, 8 * 1
 27887 00014394 4883EA08                	sub rdx, 8 * 1
 27888 00014398 EBE7                    	jmp .L_tc_recycle_frame_loop_00e8
 27889                                  .L_tc_recycle_frame_done_00e8:
 27890 0001439A 488D6308                	lea rsp, [rbx + 8 * 1]
 27891 0001439E 5D                      	pop rbp	; the proc will restore it!
 27892 0001439F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27893                                  
 27894                                  	.L_if_end_0085:
 27895 000143A2 C9                      	leave
 27896 000143A3 C21800                  	ret AND_KILL_FRAME(1)
 27897                                  .L_lambda_simple_end_00af:	; new closure is in rax
 27898 000143A6 803804                  	cmp byte [rax], T_closure
 27899 000143A9 0F8531140000            	jne L_error_non_closure
 27900 000143AF FF7001                  	push SOB_CLOSURE_ENV(rax)
 27901                                  
 27902                                  	; recycling the current frame
 27903 000143B2 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27904 000143B5 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27905 000143B8 B905000000              	mov rcx, 1 + 4
 27906 000143BD 488B5D18                	mov rbx, COUNT
 27907 000143C1 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27908 000143C6 488D55F8                	lea rdx, [rbp - 8 * 1]
 27909                                  .L_tc_recycle_frame_loop_00e9:
 27910 000143CA 4883F900                	cmp rcx, 0
 27911 000143CE 7413                    	je .L_tc_recycle_frame_done_00e9
 27912 000143D0 488B32                  	mov rsi, qword [rdx]
 27913 000143D3 488933                  	mov qword [rbx], rsi
 27914 000143D6 48FFC9                  	dec rcx
 27915 000143D9 4883EB08                	sub rbx, 8 * 1
 27916 000143DD 4883EA08                	sub rdx, 8 * 1
 27917 000143E1 EBE7                    	jmp .L_tc_recycle_frame_loop_00e9
 27918                                  .L_tc_recycle_frame_done_00e9:
 27919 000143E3 488D6308                	lea rsp, [rbx + 8 * 1]
 27920 000143E7 5D                      	pop rbp	; the proc will restore it!
 27921 000143E8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27922 000143EB C9                      	leave
 27923 000143EC C21800                  	ret AND_KILL_FRAME(1)
 27924                                  .L_lambda_simple_end_00ae:	; new closure is in rax
 27925 000143EF C9                      	leave
 27926 000143F0 C21800                  	ret AND_KILL_FRAME(1)
 27927                                  .L_lambda_simple_end_00ab:	; new closure is in rax
 27928 000143F3 803804                  	cmp byte [rax], T_closure
 27929 000143F6 0F85E4130000            	jne L_error_non_closure
 27930 000143FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 27931 000143FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 27932 00014402 48890425[0C190000]      	mov qword [free_var_171], rax
 27933 0001440A 48B8-                   	mov rax, sob_void
 27933 0001440C [0000000000000000] 
 27934                                  
 27935 00014414 4889C7                  	mov rdi, rax
 27936 00014417 E87F150000              	call print_sexpr_if_not_void
 27937                                  
 27938 0001441C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27939 00014421 E863140000              	call malloc
 27940 00014426 50                      	push rax
 27941 00014427 BF00000000              	mov rdi, 8 * 0	; new rib
 27942 0001442C E858140000              	call malloc
 27943 00014431 50                      	push rax
 27944 00014432 BF08000000              	mov rdi, 8 * 1	; extended env
 27945 00014437 E84D140000              	call malloc
 27946 0001443C 488B7D10                	mov rdi, ENV
 27947 00014440 BE00000000              	mov rsi, 0
 27948 00014445 BA01000000              	mov rdx, 1
 27949                                  .L_lambda_simple_env_loop_00b0:	; ext_env[i + 1] <-- env[i]
 27950 0001444A 4883FE00                	cmp rsi, 0
 27951 0001444E 7410                    	je .L_lambda_simple_env_end_00b0
 27952 00014450 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27953 00014454 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27954 00014458 48FFC6                  	inc rsi
 27955 0001445B 48FFC2                  	inc rdx
 27956 0001445E EBEA                    	jmp .L_lambda_simple_env_loop_00b0
 27957                                  .L_lambda_simple_env_end_00b0:
 27958 00014460 5B                      	pop rbx
 27959 00014461 BE00000000              	mov rsi, 0
 27960                                  .L_lambda_simple_params_loop_00b0:	; copy params
 27961 00014466 4883FE00                	cmp rsi, 0
 27962 0001446A 740E                    	je .L_lambda_simple_params_end_00b0
 27963 0001446C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27964 00014471 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27965 00014475 48FFC6                  	inc rsi
 27966 00014478 EBEC                    	jmp .L_lambda_simple_params_loop_00b0
 27967                                  .L_lambda_simple_params_end_00b0:
 27968 0001447A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27969 0001447D 4889C3                  	mov rbx, rax
 27970 00014480 58                      	pop rax
 27971 00014481 C60004                  	mov byte [rax], T_closure
 27972 00014484 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27973 00014488 48C74009[95440100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b0
 27974 00014490 E936030000              	jmp .L_lambda_simple_end_00b0
 27975                                  .L_lambda_simple_code_00b0:	; lambda-simple body
 27976 00014495 48837C241002            	cmp qword [rsp + 8 * 2], 2
 27977 0001449B 740B                    	je .L_lambda_simple_arity_check_ok_00b0
 27978 0001449D FF742410                	push qword [rsp + 8 * 2]
 27979 000144A1 6A02                    	push 2
 27980 000144A3 E99A130000              	jmp L_error_incorrect_arity_simple
 27981                                  .L_lambda_simple_arity_check_ok_00b0:
 27982 000144A8 C8000000                	enter 0, 0
 27983                                  	; preparing a tail-call
 27984 000144AC 48B8-                   	mov rax, L_constants + 1881
 27984 000144AE [5907000000000000] 
 27985 000144B6 50                      	push rax
 27986 000144B7 6A01                    	push 1	; arg count
 27987 000144B9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27988 000144BE E8C6130000              	call malloc
 27989 000144C3 50                      	push rax
 27990 000144C4 BF10000000              	mov rdi, 8 * 2	; new rib
 27991 000144C9 E8BB130000              	call malloc
 27992 000144CE 50                      	push rax
 27993 000144CF BF10000000              	mov rdi, 8 * 2	; extended env
 27994 000144D4 E8B0130000              	call malloc
 27995 000144D9 488B7D10                	mov rdi, ENV
 27996 000144DD BE00000000              	mov rsi, 0
 27997 000144E2 BA01000000              	mov rdx, 1
 27998                                  .L_lambda_simple_env_loop_00b1:	; ext_env[i + 1] <-- env[i]
 27999 000144E7 4883FE01                	cmp rsi, 1
 28000 000144EB 7410                    	je .L_lambda_simple_env_end_00b1
 28001 000144ED 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28002 000144F1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28003 000144F5 48FFC6                  	inc rsi
 28004 000144F8 48FFC2                  	inc rdx
 28005 000144FB EBEA                    	jmp .L_lambda_simple_env_loop_00b1
 28006                                  .L_lambda_simple_env_end_00b1:
 28007 000144FD 5B                      	pop rbx
 28008 000144FE BE00000000              	mov rsi, 0
 28009                                  .L_lambda_simple_params_loop_00b1:	; copy params
 28010 00014503 4883FE02                	cmp rsi, 2
 28011 00014507 740E                    	je .L_lambda_simple_params_end_00b1
 28012 00014509 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28013 0001450E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28014 00014512 48FFC6                  	inc rsi
 28015 00014515 EBEC                    	jmp .L_lambda_simple_params_loop_00b1
 28016                                  .L_lambda_simple_params_end_00b1:
 28017 00014517 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28018 0001451A 4889C3                  	mov rbx, rax
 28019 0001451D 58                      	pop rax
 28020 0001451E C60004                  	mov byte [rax], T_closure
 28021 00014521 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28022 00014525 48C74009[32450100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b1
 28023 0001452D E950020000              	jmp .L_lambda_simple_end_00b1
 28024                                  .L_lambda_simple_code_00b1:	; lambda-simple body
 28025 00014532 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28026 00014538 740B                    	je .L_lambda_simple_arity_check_ok_00b1
 28027 0001453A FF742410                	push qword [rsp + 8 * 2]
 28028 0001453E 6A01                    	push 1
 28029 00014540 E9FD120000              	jmp L_error_incorrect_arity_simple
 28030                                  .L_lambda_simple_arity_check_ok_00b1:
 28031 00014545 C8000000                	enter 0, 0
 28032                                  
 28033 00014549 BF08000000              	mov rdi, 8
 28034 0001454E E836130000              	call malloc
 28035 00014553 488B5D20                	mov rbx, PARAM(0)	; param run
 28036 00014557 488918                  	mov [rax], rbx	; box run
 28037 0001455A 48894520                	mov PARAM(0), rax	;replace param run with box
 28038 0001455E 48B8-                   	mov rax, sob_void
 28038 00014560 [0000000000000000] 
 28039                                  
 28040 00014568 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28041 0001456D E817130000              	call malloc
 28042 00014572 50                      	push rax
 28043 00014573 BF08000000              	mov rdi, 8 * 1	; new rib
 28044 00014578 E80C130000              	call malloc
 28045 0001457D 50                      	push rax
 28046 0001457E BF18000000              	mov rdi, 8 * 3	; extended env
 28047 00014583 E801130000              	call malloc
 28048 00014588 488B7D10                	mov rdi, ENV
 28049 0001458C BE00000000              	mov rsi, 0
 28050 00014591 BA01000000              	mov rdx, 1
 28051                                  .L_lambda_simple_env_loop_00b2:	; ext_env[i + 1] <-- env[i]
 28052 00014596 4883FE02                	cmp rsi, 2
 28053 0001459A 7410                    	je .L_lambda_simple_env_end_00b2
 28054 0001459C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28055 000145A0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28056 000145A4 48FFC6                  	inc rsi
 28057 000145A7 48FFC2                  	inc rdx
 28058 000145AA EBEA                    	jmp .L_lambda_simple_env_loop_00b2
 28059                                  .L_lambda_simple_env_end_00b2:
 28060 000145AC 5B                      	pop rbx
 28061 000145AD BE00000000              	mov rsi, 0
 28062                                  .L_lambda_simple_params_loop_00b2:	; copy params
 28063 000145B2 4883FE01                	cmp rsi, 1
 28064 000145B6 740E                    	je .L_lambda_simple_params_end_00b2
 28065 000145B8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28066 000145BD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28067 000145C1 48FFC6                  	inc rsi
 28068 000145C4 EBEC                    	jmp .L_lambda_simple_params_loop_00b2
 28069                                  .L_lambda_simple_params_end_00b2:
 28070 000145C6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28071 000145C9 4889C3                  	mov rbx, rax
 28072 000145CC 58                      	pop rax
 28073 000145CD C60004                  	mov byte [rax], T_closure
 28074 000145D0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28075 000145D4 48C74009[E1450100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b2
 28076 000145DC E933010000              	jmp .L_lambda_simple_end_00b2
 28077                                  .L_lambda_simple_code_00b2:	; lambda-simple body
 28078 000145E1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28079 000145E7 740B                    	je .L_lambda_simple_arity_check_ok_00b2
 28080 000145E9 FF742410                	push qword [rsp + 8 * 2]
 28081 000145ED 6A01                    	push 1
 28082 000145EF E94E120000              	jmp L_error_incorrect_arity_simple
 28083                                  .L_lambda_simple_arity_check_ok_00b2:
 28084 000145F4 C8000000                	enter 0, 0
 28085 000145F8 488B4510                	mov rax, ENV
 28086 000145FC 488B4008                	mov rax, qword [rax + 8 * 1]
 28087 00014600 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 28088 00014603 50                      	push rax
 28089 00014604 488B4520                	mov rax, PARAM(0)	; param i
 28090 00014608 50                      	push rax
 28091 00014609 6A02                    	push 2	; arg count
 28092 0001460B 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 28093 00014613 803805                  	cmp byte [rax], T_undefined
 28094 00014616 0F8440110000            	je L_error_fvar_undefined
 28095 0001461C 803804                  	cmp byte [rax], T_closure
 28096 0001461F 0F85BB110000            	jne L_error_non_closure
 28097 00014625 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28098 00014628 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28099                                  
 28100 0001462B 483D[02000000]          	cmp rax, sob_boolean_false
 28101 00014631 0F84CF000000            	je .L_if_else_0086
 28102                                  	; preparing a tail-call
 28103 00014637 48B8-                   	mov rax, L_constants + 2158
 28103 00014639 [6E08000000000000] 
 28104 00014641 50                      	push rax
 28105 00014642 488B4520                	mov rax, PARAM(0)	; param i
 28106 00014646 50                      	push rax
 28107 00014647 6A02                    	push 2	; arg count
 28108 00014649 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 28109 00014651 803805                  	cmp byte [rax], T_undefined
 28110 00014654 0F8402110000            	je L_error_fvar_undefined
 28111 0001465A 803804                  	cmp byte [rax], T_closure
 28112 0001465D 0F857D110000            	jne L_error_non_closure
 28113 00014663 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28114 00014666 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28115 00014669 50                      	push rax
 28116 0001466A 6A01                    	push 1	; arg count
 28117 0001466C 488B4510                	mov rax, ENV
 28118 00014670 488B00                  	mov rax, qword [rax + 8 * 0]
 28119 00014673 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28120 00014676 488B00                  	mov rax, qword [rax]
 28121 00014679 803804                  	cmp byte [rax], T_closure
 28122 0001467C 0F855E110000            	jne L_error_non_closure
 28123 00014682 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28124 00014685 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28125 00014688 50                      	push rax
 28126 00014689 488B4520                	mov rax, PARAM(0)	; param i
 28127 0001468D 50                      	push rax
 28128 0001468E 6A01                    	push 1	; arg count
 28129 00014690 488B4510                	mov rax, ENV
 28130 00014694 488B4008                	mov rax, qword [rax + 8 * 1]
 28131 00014698 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 28132 0001469C 803804                  	cmp byte [rax], T_closure
 28133 0001469F 0F853B110000            	jne L_error_non_closure
 28134 000146A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28135 000146A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28136 000146AB 50                      	push rax
 28137 000146AC 6A02                    	push 2	; arg count
 28138 000146AE 488B0425[8E0E0000]      	mov rax, qword [free_var_13]	; free var cons
 28139 000146B6 803805                  	cmp byte [rax], T_undefined
 28140 000146B9 0F849D100000            	je L_error_fvar_undefined
 28141 000146BF 803804                  	cmp byte [rax], T_closure
 28142 000146C2 0F8518110000            	jne L_error_non_closure
 28143 000146C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28144                                  
 28145                                  	; recycling the current frame
 28146 000146CB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28147 000146CE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28148 000146D1 B906000000              	mov rcx, 2 + 4
 28149 000146D6 488B5D18                	mov rbx, COUNT
 28150 000146DA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28151 000146DF 488D55F8                	lea rdx, [rbp - 8 * 1]
 28152                                  .L_tc_recycle_frame_loop_00ea:
 28153 000146E3 4883F900                	cmp rcx, 0
 28154 000146E7 7413                    	je .L_tc_recycle_frame_done_00ea
 28155 000146E9 488B32                  	mov rsi, qword [rdx]
 28156 000146EC 488933                  	mov qword [rbx], rsi
 28157 000146EF 48FFC9                  	dec rcx
 28158 000146F2 4883EB08                	sub rbx, 8 * 1
 28159 000146F6 4883EA08                	sub rdx, 8 * 1
 28160 000146FA EBE7                    	jmp .L_tc_recycle_frame_loop_00ea
 28161                                  .L_tc_recycle_frame_done_00ea:
 28162 000146FC 488D6308                	lea rsp, [rbx + 8 * 1]
 28163 00014700 5D                      	pop rbp	; the proc will restore it!
 28164 00014701 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28165                                  
 28166 00014704 EB0A                    	jmp .L_if_end_0086
 28167                                  
 28168                                  	.L_if_else_0086:
 28169 00014706 48B8-                   	mov rax, L_constants + 1
 28169 00014708 [0100000000000000] 
 28170                                  
 28171                                  	.L_if_end_0086:
 28172 00014710 C9                      	leave
 28173 00014711 C21800                  	ret AND_KILL_FRAME(1)
 28174                                  .L_lambda_simple_end_00b2:	; new closure is in rax
 28175                                  
 28176 00014714 50                      	push rax
 28177 00014715 488B4520                	mov rax, PARAM(0)	; param run
 28178                                  
 28179 00014719 8F00                    	pop qword[rax]
 28180 0001471B 48B8-                   	mov rax, sob_void
 28180 0001471D [0000000000000000] 
 28181                                  
 28182                                  	; preparing a tail-call
 28183 00014725 48B8-                   	mov rax, L_constants + 2023
 28183 00014727 [E707000000000000] 
 28184 0001472F 50                      	push rax
 28185 00014730 6A01                    	push 1	; arg count
 28186 00014732 488B4520                	mov rax, PARAM(0)	; param run
 28187 00014736 488B00                  	mov rax, qword [rax]
 28188 00014739 803804                  	cmp byte [rax], T_closure
 28189 0001473C 0F859E100000            	jne L_error_non_closure
 28190 00014742 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28191                                  
 28192                                  	; recycling the current frame
 28193 00014745 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28194 00014748 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28195 0001474B B905000000              	mov rcx, 1 + 4
 28196 00014750 488B5D18                	mov rbx, COUNT
 28197 00014754 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28198 00014759 488D55F8                	lea rdx, [rbp - 8 * 1]
 28199                                  .L_tc_recycle_frame_loop_00eb:
 28200 0001475D 4883F900                	cmp rcx, 0
 28201 00014761 7413                    	je .L_tc_recycle_frame_done_00eb
 28202 00014763 488B32                  	mov rsi, qword [rdx]
 28203 00014766 488933                  	mov qword [rbx], rsi
 28204 00014769 48FFC9                  	dec rcx
 28205 0001476C 4883EB08                	sub rbx, 8 * 1
 28206 00014770 4883EA08                	sub rdx, 8 * 1
 28207 00014774 EBE7                    	jmp .L_tc_recycle_frame_loop_00eb
 28208                                  .L_tc_recycle_frame_done_00eb:
 28209 00014776 488D6308                	lea rsp, [rbx + 8 * 1]
 28210 0001477A 5D                      	pop rbp	; the proc will restore it!
 28211 0001477B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28212 0001477E C9                      	leave
 28213 0001477F C21800                  	ret AND_KILL_FRAME(1)
 28214                                  .L_lambda_simple_end_00b1:	; new closure is in rax
 28215 00014782 803804                  	cmp byte [rax], T_closure
 28216 00014785 0F8555100000            	jne L_error_non_closure
 28217 0001478B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28218                                  
 28219                                  	; recycling the current frame
 28220 0001478E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28221 00014791 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28222 00014794 B905000000              	mov rcx, 1 + 4
 28223 00014799 488B5D18                	mov rbx, COUNT
 28224 0001479D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28225 000147A2 488D55F8                	lea rdx, [rbp - 8 * 1]
 28226                                  .L_tc_recycle_frame_loop_00ec:
 28227 000147A6 4883F900                	cmp rcx, 0
 28228 000147AA 7413                    	je .L_tc_recycle_frame_done_00ec
 28229 000147AC 488B32                  	mov rsi, qword [rdx]
 28230 000147AF 488933                  	mov qword [rbx], rsi
 28231 000147B2 48FFC9                  	dec rcx
 28232 000147B5 4883EB08                	sub rbx, 8 * 1
 28233 000147B9 4883EA08                	sub rdx, 8 * 1
 28234 000147BD EBE7                    	jmp .L_tc_recycle_frame_loop_00ec
 28235                                  .L_tc_recycle_frame_done_00ec:
 28236 000147BF 488D6308                	lea rsp, [rbx + 8 * 1]
 28237 000147C3 5D                      	pop rbp	; the proc will restore it!
 28238 000147C4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28239 000147C7 C9                      	leave
 28240 000147C8 C22000                  	ret AND_KILL_FRAME(2)
 28241                                  .L_lambda_simple_end_00b0:	; new closure is in rax
 28242 000147CB 48890425[1D190000]      	mov qword [free_var_172], rax
 28243 000147D3 48B8-                   	mov rax, sob_void
 28243 000147D5 [0000000000000000] 
 28244                                  
 28245 000147DD 4889C7                  	mov rdi, rax
 28246 000147E0 E8B6110000              	call print_sexpr_if_not_void
 28247                                  
 28248 000147E5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28249 000147EA E89A100000              	call malloc
 28250 000147EF 50                      	push rax
 28251 000147F0 BF00000000              	mov rdi, 8 * 0	; new rib
 28252 000147F5 E88F100000              	call malloc
 28253 000147FA 50                      	push rax
 28254 000147FB BF08000000              	mov rdi, 8 * 1	; extended env
 28255 00014800 E884100000              	call malloc
 28256 00014805 488B7D10                	mov rdi, ENV
 28257 00014809 BE00000000              	mov rsi, 0
 28258 0001480E BA01000000              	mov rdx, 1
 28259                                  .L_lambda_simple_env_loop_00b3:	; ext_env[i + 1] <-- env[i]
 28260 00014813 4883FE00                	cmp rsi, 0
 28261 00014817 7410                    	je .L_lambda_simple_env_end_00b3
 28262 00014819 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28263 0001481D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28264 00014821 48FFC6                  	inc rsi
 28265 00014824 48FFC2                  	inc rdx
 28266 00014827 EBEA                    	jmp .L_lambda_simple_env_loop_00b3
 28267                                  .L_lambda_simple_env_end_00b3:
 28268 00014829 5B                      	pop rbx
 28269 0001482A BE00000000              	mov rsi, 0
 28270                                  .L_lambda_simple_params_loop_00b3:	; copy params
 28271 0001482F 4883FE00                	cmp rsi, 0
 28272 00014833 740E                    	je .L_lambda_simple_params_end_00b3
 28273 00014835 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28274 0001483A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28275 0001483E 48FFC6                  	inc rsi
 28276 00014841 EBEC                    	jmp .L_lambda_simple_params_loop_00b3
 28277                                  .L_lambda_simple_params_end_00b3:
 28278 00014843 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28279 00014846 4889C3                  	mov rbx, rax
 28280 00014849 58                      	pop rax
 28281 0001484A C60004                  	mov byte [rax], T_closure
 28282 0001484D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28283 00014851 48C74009[5E480100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b3
 28284 00014859 E94A040000              	jmp .L_lambda_simple_end_00b3
 28285                                  .L_lambda_simple_code_00b3:	; lambda-simple body
 28286 0001485E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 28287 00014864 740B                    	je .L_lambda_simple_arity_check_ok_00b3
 28288 00014866 FF742410                	push qword [rsp + 8 * 2]
 28289 0001486A 6A02                    	push 2
 28290 0001486C E9D10F0000              	jmp L_error_incorrect_arity_simple
 28291                                  .L_lambda_simple_arity_check_ok_00b3:
 28292 00014871 C8000000                	enter 0, 0
 28293                                  	; preparing a tail-call
 28294 00014875 488B4520                	mov rax, PARAM(0)	; param n
 28295 00014879 50                      	push rax
 28296 0001487A 6A01                    	push 1	; arg count
 28297 0001487C 488B0425[8B110000]      	mov rax, qword [free_var_58]	; free var make-string
 28298 00014884 803805                  	cmp byte [rax], T_undefined
 28299 00014887 0F84CF0E0000            	je L_error_fvar_undefined
 28300 0001488D 803804                  	cmp byte [rax], T_closure
 28301 00014890 0F854A0F0000            	jne L_error_non_closure
 28302 00014896 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28303 00014899 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28304 0001489C 50                      	push rax
 28305 0001489D 6A01                    	push 1	; arg count
 28306 0001489F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28307 000148A4 E8E00F0000              	call malloc
 28308 000148A9 50                      	push rax
 28309 000148AA BF10000000              	mov rdi, 8 * 2	; new rib
 28310 000148AF E8D50F0000              	call malloc
 28311 000148B4 50                      	push rax
 28312 000148B5 BF10000000              	mov rdi, 8 * 2	; extended env
 28313 000148BA E8CA0F0000              	call malloc
 28314 000148BF 488B7D10                	mov rdi, ENV
 28315 000148C3 BE00000000              	mov rsi, 0
 28316 000148C8 BA01000000              	mov rdx, 1
 28317                                  .L_lambda_simple_env_loop_00b4:	; ext_env[i + 1] <-- env[i]
 28318 000148CD 4883FE01                	cmp rsi, 1
 28319 000148D1 7410                    	je .L_lambda_simple_env_end_00b4
 28320 000148D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28321 000148D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28322 000148DB 48FFC6                  	inc rsi
 28323 000148DE 48FFC2                  	inc rdx
 28324 000148E1 EBEA                    	jmp .L_lambda_simple_env_loop_00b4
 28325                                  .L_lambda_simple_env_end_00b4:
 28326 000148E3 5B                      	pop rbx
 28327 000148E4 BE00000000              	mov rsi, 0
 28328                                  .L_lambda_simple_params_loop_00b4:	; copy params
 28329 000148E9 4883FE02                	cmp rsi, 2
 28330 000148ED 740E                    	je .L_lambda_simple_params_end_00b4
 28331 000148EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28332 000148F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28333 000148F8 48FFC6                  	inc rsi
 28334 000148FB EBEC                    	jmp .L_lambda_simple_params_loop_00b4
 28335                                  .L_lambda_simple_params_end_00b4:
 28336 000148FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28337 00014900 4889C3                  	mov rbx, rax
 28338 00014903 58                      	pop rax
 28339 00014904 C60004                  	mov byte [rax], T_closure
 28340 00014907 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28341 0001490B 48C74009[18490100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b4
 28342 00014913 E947030000              	jmp .L_lambda_simple_end_00b4
 28343                                  .L_lambda_simple_code_00b4:	; lambda-simple body
 28344 00014918 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28345 0001491E 740B                    	je .L_lambda_simple_arity_check_ok_00b4
 28346 00014920 FF742410                	push qword [rsp + 8 * 2]
 28347 00014924 6A01                    	push 1
 28348 00014926 E9170F0000              	jmp L_error_incorrect_arity_simple
 28349                                  .L_lambda_simple_arity_check_ok_00b4:
 28350 0001492B C8000000                	enter 0, 0
 28351                                  	; preparing a tail-call
 28352 0001492F 48B8-                   	mov rax, L_constants + 1881
 28352 00014931 [5907000000000000] 
 28353 00014939 50                      	push rax
 28354 0001493A 6A01                    	push 1	; arg count
 28355 0001493C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28356 00014941 E8430F0000              	call malloc
 28357 00014946 50                      	push rax
 28358 00014947 BF08000000              	mov rdi, 8 * 1	; new rib
 28359 0001494C E8380F0000              	call malloc
 28360 00014951 50                      	push rax
 28361 00014952 BF18000000              	mov rdi, 8 * 3	; extended env
 28362 00014957 E82D0F0000              	call malloc
 28363 0001495C 488B7D10                	mov rdi, ENV
 28364 00014960 BE00000000              	mov rsi, 0
 28365 00014965 BA01000000              	mov rdx, 1
 28366                                  .L_lambda_simple_env_loop_00b5:	; ext_env[i + 1] <-- env[i]
 28367 0001496A 4883FE02                	cmp rsi, 2
 28368 0001496E 7410                    	je .L_lambda_simple_env_end_00b5
 28369 00014970 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28370 00014974 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28371 00014978 48FFC6                  	inc rsi
 28372 0001497B 48FFC2                  	inc rdx
 28373 0001497E EBEA                    	jmp .L_lambda_simple_env_loop_00b5
 28374                                  .L_lambda_simple_env_end_00b5:
 28375 00014980 5B                      	pop rbx
 28376 00014981 BE00000000              	mov rsi, 0
 28377                                  .L_lambda_simple_params_loop_00b5:	; copy params
 28378 00014986 4883FE01                	cmp rsi, 1
 28379 0001498A 740E                    	je .L_lambda_simple_params_end_00b5
 28380 0001498C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28381 00014991 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28382 00014995 48FFC6                  	inc rsi
 28383 00014998 EBEC                    	jmp .L_lambda_simple_params_loop_00b5
 28384                                  .L_lambda_simple_params_end_00b5:
 28385 0001499A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28386 0001499D 4889C3                  	mov rbx, rax
 28387 000149A0 58                      	pop rax
 28388 000149A1 C60004                  	mov byte [rax], T_closure
 28389 000149A4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28390 000149A8 48C74009[B5490100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b5
 28391 000149B0 E961020000              	jmp .L_lambda_simple_end_00b5
 28392                                  .L_lambda_simple_code_00b5:	; lambda-simple body
 28393 000149B5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28394 000149BB 740B                    	je .L_lambda_simple_arity_check_ok_00b5
 28395 000149BD FF742410                	push qword [rsp + 8 * 2]
 28396 000149C1 6A01                    	push 1
 28397 000149C3 E97A0E0000              	jmp L_error_incorrect_arity_simple
 28398                                  .L_lambda_simple_arity_check_ok_00b5:
 28399 000149C8 C8000000                	enter 0, 0
 28400                                  
 28401 000149CC BF08000000              	mov rdi, 8
 28402 000149D1 E8B30E0000              	call malloc
 28403 000149D6 488B5D20                	mov rbx, PARAM(0)	; param run
 28404 000149DA 488918                  	mov [rax], rbx	; box run
 28405 000149DD 48894520                	mov PARAM(0), rax	;replace param run with box
 28406 000149E1 48B8-                   	mov rax, sob_void
 28406 000149E3 [0000000000000000] 
 28407                                  
 28408 000149EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28409 000149F0 E8940E0000              	call malloc
 28410 000149F5 50                      	push rax
 28411 000149F6 BF08000000              	mov rdi, 8 * 1	; new rib
 28412 000149FB E8890E0000              	call malloc
 28413 00014A00 50                      	push rax
 28414 00014A01 BF20000000              	mov rdi, 8 * 4	; extended env
 28415 00014A06 E87E0E0000              	call malloc
 28416 00014A0B 488B7D10                	mov rdi, ENV
 28417 00014A0F BE00000000              	mov rsi, 0
 28418 00014A14 BA01000000              	mov rdx, 1
 28419                                  .L_lambda_simple_env_loop_00b6:	; ext_env[i + 1] <-- env[i]
 28420 00014A19 4883FE03                	cmp rsi, 3
 28421 00014A1D 7410                    	je .L_lambda_simple_env_end_00b6
 28422 00014A1F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28423 00014A23 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28424 00014A27 48FFC6                  	inc rsi
 28425 00014A2A 48FFC2                  	inc rdx
 28426 00014A2D EBEA                    	jmp .L_lambda_simple_env_loop_00b6
 28427                                  .L_lambda_simple_env_end_00b6:
 28428 00014A2F 5B                      	pop rbx
 28429 00014A30 BE00000000              	mov rsi, 0
 28430                                  .L_lambda_simple_params_loop_00b6:	; copy params
 28431 00014A35 4883FE01                	cmp rsi, 1
 28432 00014A39 740E                    	je .L_lambda_simple_params_end_00b6
 28433 00014A3B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28434 00014A40 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28435 00014A44 48FFC6                  	inc rsi
 28436 00014A47 EBEC                    	jmp .L_lambda_simple_params_loop_00b6
 28437                                  .L_lambda_simple_params_end_00b6:
 28438 00014A49 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28439 00014A4C 4889C3                  	mov rbx, rax
 28440 00014A4F 58                      	pop rax
 28441 00014A50 C60004                  	mov byte [rax], T_closure
 28442 00014A53 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28443 00014A57 48C74009[644A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b6
 28444 00014A5F E944010000              	jmp .L_lambda_simple_end_00b6
 28445                                  .L_lambda_simple_code_00b6:	; lambda-simple body
 28446 00014A64 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28447 00014A6A 740B                    	je .L_lambda_simple_arity_check_ok_00b6
 28448 00014A6C FF742410                	push qword [rsp + 8 * 2]
 28449 00014A70 6A01                    	push 1
 28450 00014A72 E9CB0D0000              	jmp L_error_incorrect_arity_simple
 28451                                  .L_lambda_simple_arity_check_ok_00b6:
 28452 00014A77 C8000000                	enter 0, 0
 28453 00014A7B 488B4510                	mov rax, ENV
 28454 00014A7F 488B4010                	mov rax, qword [rax + 8 * 2]
 28455 00014A83 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 28456 00014A86 50                      	push rax
 28457 00014A87 488B4520                	mov rax, PARAM(0)	; param i
 28458 00014A8B 50                      	push rax
 28459 00014A8C 6A02                    	push 2	; arg count
 28460 00014A8E 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 28461 00014A96 803805                  	cmp byte [rax], T_undefined
 28462 00014A99 0F84BD0C0000            	je L_error_fvar_undefined
 28463 00014A9F 803804                  	cmp byte [rax], T_closure
 28464 00014AA2 0F85380D0000            	jne L_error_non_closure
 28465 00014AA8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28466 00014AAB FF5009                  	call SOB_CLOSURE_CODE(rax)
 28467                                  
 28468 00014AAE 483D[02000000]          	cmp rax, sob_boolean_false
 28469 00014AB4 0F84DF000000            	je .L_if_else_0087
 28470 00014ABA 488B4520                	mov rax, PARAM(0)	; param i
 28471 00014ABE 50                      	push rax
 28472 00014ABF 6A01                    	push 1	; arg count
 28473 00014AC1 488B4510                	mov rax, ENV
 28474 00014AC5 488B4010                	mov rax, qword [rax + 8 * 2]
 28475 00014AC9 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 28476 00014ACD 803804                  	cmp byte [rax], T_closure
 28477 00014AD0 0F850A0D0000            	jne L_error_non_closure
 28478 00014AD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28479 00014AD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28480 00014ADC 50                      	push rax
 28481 00014ADD 488B4520                	mov rax, PARAM(0)	; param i
 28482 00014AE1 50                      	push rax
 28483 00014AE2 488B4510                	mov rax, ENV
 28484 00014AE6 488B4008                	mov rax, qword [rax + 8 * 1]
 28485 00014AEA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28486 00014AED 50                      	push rax
 28487 00014AEE 6A03                    	push 3	; arg count
 28488 00014AF0 488B0425[69110000]      	mov rax, qword [free_var_56]	; free var string-set!
 28489 00014AF8 803805                  	cmp byte [rax], T_undefined
 28490 00014AFB 0F845B0C0000            	je L_error_fvar_undefined
 28491 00014B01 803804                  	cmp byte [rax], T_closure
 28492 00014B04 0F85D60C0000            	jne L_error_non_closure
 28493 00014B0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 28494 00014B0D FF5009                  	call SOB_CLOSURE_CODE(rax)
 28495                                  
 28496                                  	; preparing a tail-call
 28497 00014B10 48B8-                   	mov rax, L_constants + 2158
 28497 00014B12 [6E08000000000000] 
 28498 00014B1A 50                      	push rax
 28499 00014B1B 488B4520                	mov rax, PARAM(0)	; param i
 28500 00014B1F 50                      	push rax
 28501 00014B20 6A02                    	push 2	; arg count
 28502 00014B22 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 28503 00014B2A 803805                  	cmp byte [rax], T_undefined
 28504 00014B2D 0F84290C0000            	je L_error_fvar_undefined
 28505 00014B33 803804                  	cmp byte [rax], T_closure
 28506 00014B36 0F85A40C0000            	jne L_error_non_closure
 28507 00014B3C FF7001                  	push SOB_CLOSURE_ENV(rax)
 28508 00014B3F FF5009                  	call SOB_CLOSURE_CODE(rax)
 28509 00014B42 50                      	push rax
 28510 00014B43 6A01                    	push 1	; arg count
 28511 00014B45 488B4510                	mov rax, ENV
 28512 00014B49 488B00                  	mov rax, qword [rax + 8 * 0]
 28513 00014B4C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28514 00014B4F 488B00                  	mov rax, qword [rax]
 28515 00014B52 803804                  	cmp byte [rax], T_closure
 28516 00014B55 0F85850C0000            	jne L_error_non_closure
 28517 00014B5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28518                                  
 28519                                  	; recycling the current frame
 28520 00014B5E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28521 00014B61 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28522 00014B64 B905000000              	mov rcx, 1 + 4
 28523 00014B69 488B5D18                	mov rbx, COUNT
 28524 00014B6D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28525 00014B72 488D55F8                	lea rdx, [rbp - 8 * 1]
 28526                                  .L_tc_recycle_frame_loop_00ed:
 28527 00014B76 4883F900                	cmp rcx, 0
 28528 00014B7A 7413                    	je .L_tc_recycle_frame_done_00ed
 28529 00014B7C 488B32                  	mov rsi, qword [rdx]
 28530 00014B7F 488933                  	mov qword [rbx], rsi
 28531 00014B82 48FFC9                  	dec rcx
 28532 00014B85 4883EB08                	sub rbx, 8 * 1
 28533 00014B89 4883EA08                	sub rdx, 8 * 1
 28534 00014B8D EBE7                    	jmp .L_tc_recycle_frame_loop_00ed
 28535                                  .L_tc_recycle_frame_done_00ed:
 28536 00014B8F 488D6308                	lea rsp, [rbx + 8 * 1]
 28537 00014B93 5D                      	pop rbp	; the proc will restore it!
 28538 00014B94 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28539                                  
 28540 00014B97 EB0B                    	jmp .L_if_end_0087
 28541                                  
 28542                                  	.L_if_else_0087:
 28543 00014B99 488B4510                	mov rax, ENV
 28544 00014B9D 488B4008                	mov rax, qword [rax + 8 * 1]
 28545 00014BA1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28546                                  
 28547                                  	.L_if_end_0087:
 28548 00014BA4 C9                      	leave
 28549 00014BA5 C21800                  	ret AND_KILL_FRAME(1)
 28550                                  .L_lambda_simple_end_00b6:	; new closure is in rax
 28551                                  
 28552 00014BA8 50                      	push rax
 28553 00014BA9 488B4520                	mov rax, PARAM(0)	; param run
 28554                                  
 28555 00014BAD 8F00                    	pop qword[rax]
 28556 00014BAF 48B8-                   	mov rax, sob_void
 28556 00014BB1 [0000000000000000] 
 28557                                  
 28558                                  	; preparing a tail-call
 28559 00014BB9 48B8-                   	mov rax, L_constants + 2023
 28559 00014BBB [E707000000000000] 
 28560 00014BC3 50                      	push rax
 28561 00014BC4 6A01                    	push 1	; arg count
 28562 00014BC6 488B4520                	mov rax, PARAM(0)	; param run
 28563 00014BCA 488B00                  	mov rax, qword [rax]
 28564 00014BCD 803804                  	cmp byte [rax], T_closure
 28565 00014BD0 0F850A0C0000            	jne L_error_non_closure
 28566 00014BD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28567                                  
 28568                                  	; recycling the current frame
 28569 00014BD9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28570 00014BDC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28571 00014BDF B905000000              	mov rcx, 1 + 4
 28572 00014BE4 488B5D18                	mov rbx, COUNT
 28573 00014BE8 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28574 00014BED 488D55F8                	lea rdx, [rbp - 8 * 1]
 28575                                  .L_tc_recycle_frame_loop_00ee:
 28576 00014BF1 4883F900                	cmp rcx, 0
 28577 00014BF5 7413                    	je .L_tc_recycle_frame_done_00ee
 28578 00014BF7 488B32                  	mov rsi, qword [rdx]
 28579 00014BFA 488933                  	mov qword [rbx], rsi
 28580 00014BFD 48FFC9                  	dec rcx
 28581 00014C00 4883EB08                	sub rbx, 8 * 1
 28582 00014C04 4883EA08                	sub rdx, 8 * 1
 28583 00014C08 EBE7                    	jmp .L_tc_recycle_frame_loop_00ee
 28584                                  .L_tc_recycle_frame_done_00ee:
 28585 00014C0A 488D6308                	lea rsp, [rbx + 8 * 1]
 28586 00014C0E 5D                      	pop rbp	; the proc will restore it!
 28587 00014C0F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28588 00014C12 C9                      	leave
 28589 00014C13 C21800                  	ret AND_KILL_FRAME(1)
 28590                                  .L_lambda_simple_end_00b5:	; new closure is in rax
 28591 00014C16 803804                  	cmp byte [rax], T_closure
 28592 00014C19 0F85C10B0000            	jne L_error_non_closure
 28593 00014C1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 28594                                  
 28595                                  	; recycling the current frame
 28596 00014C22 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28597 00014C25 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28598 00014C28 B905000000              	mov rcx, 1 + 4
 28599 00014C2D 488B5D18                	mov rbx, COUNT
 28600 00014C31 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28601 00014C36 488D55F8                	lea rdx, [rbp - 8 * 1]
 28602                                  .L_tc_recycle_frame_loop_00ef:
 28603 00014C3A 4883F900                	cmp rcx, 0
 28604 00014C3E 7413                    	je .L_tc_recycle_frame_done_00ef
 28605 00014C40 488B32                  	mov rsi, qword [rdx]
 28606 00014C43 488933                  	mov qword [rbx], rsi
 28607 00014C46 48FFC9                  	dec rcx
 28608 00014C49 4883EB08                	sub rbx, 8 * 1
 28609 00014C4D 4883EA08                	sub rdx, 8 * 1
 28610 00014C51 EBE7                    	jmp .L_tc_recycle_frame_loop_00ef
 28611                                  .L_tc_recycle_frame_done_00ef:
 28612 00014C53 488D6308                	lea rsp, [rbx + 8 * 1]
 28613 00014C57 5D                      	pop rbp	; the proc will restore it!
 28614 00014C58 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28615 00014C5B C9                      	leave
 28616 00014C5C C21800                  	ret AND_KILL_FRAME(1)
 28617                                  .L_lambda_simple_end_00b4:	; new closure is in rax
 28618 00014C5F 803804                  	cmp byte [rax], T_closure
 28619 00014C62 0F85780B0000            	jne L_error_non_closure
 28620 00014C68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28621                                  
 28622                                  	; recycling the current frame
 28623 00014C6B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28624 00014C6E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28625 00014C71 B905000000              	mov rcx, 1 + 4
 28626 00014C76 488B5D18                	mov rbx, COUNT
 28627 00014C7A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28628 00014C7F 488D55F8                	lea rdx, [rbp - 8 * 1]
 28629                                  .L_tc_recycle_frame_loop_00f0:
 28630 00014C83 4883F900                	cmp rcx, 0
 28631 00014C87 7413                    	je .L_tc_recycle_frame_done_00f0
 28632 00014C89 488B32                  	mov rsi, qword [rdx]
 28633 00014C8C 488933                  	mov qword [rbx], rsi
 28634 00014C8F 48FFC9                  	dec rcx
 28635 00014C92 4883EB08                	sub rbx, 8 * 1
 28636 00014C96 4883EA08                	sub rdx, 8 * 1
 28637 00014C9A EBE7                    	jmp .L_tc_recycle_frame_loop_00f0
 28638                                  .L_tc_recycle_frame_done_00f0:
 28639 00014C9C 488D6308                	lea rsp, [rbx + 8 * 1]
 28640 00014CA0 5D                      	pop rbp	; the proc will restore it!
 28641 00014CA1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28642 00014CA4 C9                      	leave
 28643 00014CA5 C22000                  	ret AND_KILL_FRAME(2)
 28644                                  .L_lambda_simple_end_00b3:	; new closure is in rax
 28645 00014CA8 48890425[2E190000]      	mov qword [free_var_173], rax
 28646 00014CB0 48B8-                   	mov rax, sob_void
 28646 00014CB2 [0000000000000000] 
 28647                                  
 28648 00014CBA 4889C7                  	mov rdi, rax
 28649 00014CBD E8D90C0000              	call print_sexpr_if_not_void
 28650                                  
 28651 00014CC2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28652 00014CC7 E8BD0B0000              	call malloc
 28653 00014CCC 50                      	push rax
 28654 00014CCD BF00000000              	mov rdi, 8 * 0	; new rib
 28655 00014CD2 E8B20B0000              	call malloc
 28656 00014CD7 50                      	push rax
 28657 00014CD8 BF08000000              	mov rdi, 8 * 1	; extended env
 28658 00014CDD E8A70B0000              	call malloc
 28659 00014CE2 488B7D10                	mov rdi, ENV
 28660 00014CE6 BE00000000              	mov rsi, 0
 28661 00014CEB BA01000000              	mov rdx, 1
 28662                                  .L_lambda_simple_env_loop_00b7:	; ext_env[i + 1] <-- env[i]
 28663 00014CF0 4883FE00                	cmp rsi, 0
 28664 00014CF4 7410                    	je .L_lambda_simple_env_end_00b7
 28665 00014CF6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28666 00014CFA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28667 00014CFE 48FFC6                  	inc rsi
 28668 00014D01 48FFC2                  	inc rdx
 28669 00014D04 EBEA                    	jmp .L_lambda_simple_env_loop_00b7
 28670                                  .L_lambda_simple_env_end_00b7:
 28671 00014D06 5B                      	pop rbx
 28672 00014D07 BE00000000              	mov rsi, 0
 28673                                  .L_lambda_simple_params_loop_00b7:	; copy params
 28674 00014D0C 4883FE00                	cmp rsi, 0
 28675 00014D10 740E                    	je .L_lambda_simple_params_end_00b7
 28676 00014D12 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28677 00014D17 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28678 00014D1B 48FFC6                  	inc rsi
 28679 00014D1E EBEC                    	jmp .L_lambda_simple_params_loop_00b7
 28680                                  .L_lambda_simple_params_end_00b7:
 28681 00014D20 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28682 00014D23 4889C3                  	mov rbx, rax
 28683 00014D26 58                      	pop rax
 28684 00014D27 C60004                  	mov byte [rax], T_closure
 28685 00014D2A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28686 00014D2E 48C74009[3B4D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b7
 28687 00014D36 E94A040000              	jmp .L_lambda_simple_end_00b7
 28688                                  .L_lambda_simple_code_00b7:	; lambda-simple body
 28689 00014D3B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 28690 00014D41 740B                    	je .L_lambda_simple_arity_check_ok_00b7
 28691 00014D43 FF742410                	push qword [rsp + 8 * 2]
 28692 00014D47 6A02                    	push 2
 28693 00014D49 E9F40A0000              	jmp L_error_incorrect_arity_simple
 28694                                  .L_lambda_simple_arity_check_ok_00b7:
 28695 00014D4E C8000000                	enter 0, 0
 28696                                  	; preparing a tail-call
 28697 00014D52 488B4520                	mov rax, PARAM(0)	; param n
 28698 00014D56 50                      	push rax
 28699 00014D57 6A01                    	push 1	; arg count
 28700 00014D59 488B0425[7A110000]      	mov rax, qword [free_var_57]	; free var make-vector
 28701 00014D61 803805                  	cmp byte [rax], T_undefined
 28702 00014D64 0F84F2090000            	je L_error_fvar_undefined
 28703 00014D6A 803804                  	cmp byte [rax], T_closure
 28704 00014D6D 0F856D0A0000            	jne L_error_non_closure
 28705 00014D73 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28706 00014D76 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28707 00014D79 50                      	push rax
 28708 00014D7A 6A01                    	push 1	; arg count
 28709 00014D7C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28710 00014D81 E8030B0000              	call malloc
 28711 00014D86 50                      	push rax
 28712 00014D87 BF10000000              	mov rdi, 8 * 2	; new rib
 28713 00014D8C E8F80A0000              	call malloc
 28714 00014D91 50                      	push rax
 28715 00014D92 BF10000000              	mov rdi, 8 * 2	; extended env
 28716 00014D97 E8ED0A0000              	call malloc
 28717 00014D9C 488B7D10                	mov rdi, ENV
 28718 00014DA0 BE00000000              	mov rsi, 0
 28719 00014DA5 BA01000000              	mov rdx, 1
 28720                                  .L_lambda_simple_env_loop_00b8:	; ext_env[i + 1] <-- env[i]
 28721 00014DAA 4883FE01                	cmp rsi, 1
 28722 00014DAE 7410                    	je .L_lambda_simple_env_end_00b8
 28723 00014DB0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28724 00014DB4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28725 00014DB8 48FFC6                  	inc rsi
 28726 00014DBB 48FFC2                  	inc rdx
 28727 00014DBE EBEA                    	jmp .L_lambda_simple_env_loop_00b8
 28728                                  .L_lambda_simple_env_end_00b8:
 28729 00014DC0 5B                      	pop rbx
 28730 00014DC1 BE00000000              	mov rsi, 0
 28731                                  .L_lambda_simple_params_loop_00b8:	; copy params
 28732 00014DC6 4883FE02                	cmp rsi, 2
 28733 00014DCA 740E                    	je .L_lambda_simple_params_end_00b8
 28734 00014DCC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28735 00014DD1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28736 00014DD5 48FFC6                  	inc rsi
 28737 00014DD8 EBEC                    	jmp .L_lambda_simple_params_loop_00b8
 28738                                  .L_lambda_simple_params_end_00b8:
 28739 00014DDA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28740 00014DDD 4889C3                  	mov rbx, rax
 28741 00014DE0 58                      	pop rax
 28742 00014DE1 C60004                  	mov byte [rax], T_closure
 28743 00014DE4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28744 00014DE8 48C74009[F54D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b8
 28745 00014DF0 E947030000              	jmp .L_lambda_simple_end_00b8
 28746                                  .L_lambda_simple_code_00b8:	; lambda-simple body
 28747 00014DF5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28748 00014DFB 740B                    	je .L_lambda_simple_arity_check_ok_00b8
 28749 00014DFD FF742410                	push qword [rsp + 8 * 2]
 28750 00014E01 6A01                    	push 1
 28751 00014E03 E93A0A0000              	jmp L_error_incorrect_arity_simple
 28752                                  .L_lambda_simple_arity_check_ok_00b8:
 28753 00014E08 C8000000                	enter 0, 0
 28754                                  	; preparing a tail-call
 28755 00014E0C 48B8-                   	mov rax, L_constants + 1881
 28755 00014E0E [5907000000000000] 
 28756 00014E16 50                      	push rax
 28757 00014E17 6A01                    	push 1	; arg count
 28758 00014E19 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28759 00014E1E E8660A0000              	call malloc
 28760 00014E23 50                      	push rax
 28761 00014E24 BF08000000              	mov rdi, 8 * 1	; new rib
 28762 00014E29 E85B0A0000              	call malloc
 28763 00014E2E 50                      	push rax
 28764 00014E2F BF18000000              	mov rdi, 8 * 3	; extended env
 28765 00014E34 E8500A0000              	call malloc
 28766 00014E39 488B7D10                	mov rdi, ENV
 28767 00014E3D BE00000000              	mov rsi, 0
 28768 00014E42 BA01000000              	mov rdx, 1
 28769                                  .L_lambda_simple_env_loop_00b9:	; ext_env[i + 1] <-- env[i]
 28770 00014E47 4883FE02                	cmp rsi, 2
 28771 00014E4B 7410                    	je .L_lambda_simple_env_end_00b9
 28772 00014E4D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28773 00014E51 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28774 00014E55 48FFC6                  	inc rsi
 28775 00014E58 48FFC2                  	inc rdx
 28776 00014E5B EBEA                    	jmp .L_lambda_simple_env_loop_00b9
 28777                                  .L_lambda_simple_env_end_00b9:
 28778 00014E5D 5B                      	pop rbx
 28779 00014E5E BE00000000              	mov rsi, 0
 28780                                  .L_lambda_simple_params_loop_00b9:	; copy params
 28781 00014E63 4883FE01                	cmp rsi, 1
 28782 00014E67 740E                    	je .L_lambda_simple_params_end_00b9
 28783 00014E69 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28784 00014E6E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28785 00014E72 48FFC6                  	inc rsi
 28786 00014E75 EBEC                    	jmp .L_lambda_simple_params_loop_00b9
 28787                                  .L_lambda_simple_params_end_00b9:
 28788 00014E77 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28789 00014E7A 4889C3                  	mov rbx, rax
 28790 00014E7D 58                      	pop rax
 28791 00014E7E C60004                  	mov byte [rax], T_closure
 28792 00014E81 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28793 00014E85 48C74009[924E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b9
 28794 00014E8D E961020000              	jmp .L_lambda_simple_end_00b9
 28795                                  .L_lambda_simple_code_00b9:	; lambda-simple body
 28796 00014E92 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28797 00014E98 740B                    	je .L_lambda_simple_arity_check_ok_00b9
 28798 00014E9A FF742410                	push qword [rsp + 8 * 2]
 28799 00014E9E 6A01                    	push 1
 28800 00014EA0 E99D090000              	jmp L_error_incorrect_arity_simple
 28801                                  .L_lambda_simple_arity_check_ok_00b9:
 28802 00014EA5 C8000000                	enter 0, 0
 28803                                  
 28804 00014EA9 BF08000000              	mov rdi, 8
 28805 00014EAE E8D6090000              	call malloc
 28806 00014EB3 488B5D20                	mov rbx, PARAM(0)	; param run
 28807 00014EB7 488918                  	mov [rax], rbx	; box run
 28808 00014EBA 48894520                	mov PARAM(0), rax	;replace param run with box
 28809 00014EBE 48B8-                   	mov rax, sob_void
 28809 00014EC0 [0000000000000000] 
 28810                                  
 28811 00014EC8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28812 00014ECD E8B7090000              	call malloc
 28813 00014ED2 50                      	push rax
 28814 00014ED3 BF08000000              	mov rdi, 8 * 1	; new rib
 28815 00014ED8 E8AC090000              	call malloc
 28816 00014EDD 50                      	push rax
 28817 00014EDE BF20000000              	mov rdi, 8 * 4	; extended env
 28818 00014EE3 E8A1090000              	call malloc
 28819 00014EE8 488B7D10                	mov rdi, ENV
 28820 00014EEC BE00000000              	mov rsi, 0
 28821 00014EF1 BA01000000              	mov rdx, 1
 28822                                  .L_lambda_simple_env_loop_00ba:	; ext_env[i + 1] <-- env[i]
 28823 00014EF6 4883FE03                	cmp rsi, 3
 28824 00014EFA 7410                    	je .L_lambda_simple_env_end_00ba
 28825 00014EFC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28826 00014F00 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28827 00014F04 48FFC6                  	inc rsi
 28828 00014F07 48FFC2                  	inc rdx
 28829 00014F0A EBEA                    	jmp .L_lambda_simple_env_loop_00ba
 28830                                  .L_lambda_simple_env_end_00ba:
 28831 00014F0C 5B                      	pop rbx
 28832 00014F0D BE00000000              	mov rsi, 0
 28833                                  .L_lambda_simple_params_loop_00ba:	; copy params
 28834 00014F12 4883FE01                	cmp rsi, 1
 28835 00014F16 740E                    	je .L_lambda_simple_params_end_00ba
 28836 00014F18 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28837 00014F1D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28838 00014F21 48FFC6                  	inc rsi
 28839 00014F24 EBEC                    	jmp .L_lambda_simple_params_loop_00ba
 28840                                  .L_lambda_simple_params_end_00ba:
 28841 00014F26 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28842 00014F29 4889C3                  	mov rbx, rax
 28843 00014F2C 58                      	pop rax
 28844 00014F2D C60004                  	mov byte [rax], T_closure
 28845 00014F30 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28846 00014F34 48C74009[414F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ba
 28847 00014F3C E944010000              	jmp .L_lambda_simple_end_00ba
 28848                                  .L_lambda_simple_code_00ba:	; lambda-simple body
 28849 00014F41 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28850 00014F47 740B                    	je .L_lambda_simple_arity_check_ok_00ba
 28851 00014F49 FF742410                	push qword [rsp + 8 * 2]
 28852 00014F4D 6A01                    	push 1
 28853 00014F4F E9EE080000              	jmp L_error_incorrect_arity_simple
 28854                                  .L_lambda_simple_arity_check_ok_00ba:
 28855 00014F54 C8000000                	enter 0, 0
 28856 00014F58 488B4510                	mov rax, ENV
 28857 00014F5C 488B4010                	mov rax, qword [rax + 8 * 2]
 28858 00014F60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 28859 00014F63 50                      	push rax
 28860 00014F64 488B4520                	mov rax, PARAM(0)	; param i
 28861 00014F68 50                      	push rax
 28862 00014F69 6A02                    	push 2	; arg count
 28863 00014F6B 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 28864 00014F73 803805                  	cmp byte [rax], T_undefined
 28865 00014F76 0F84E0070000            	je L_error_fvar_undefined
 28866 00014F7C 803804                  	cmp byte [rax], T_closure
 28867 00014F7F 0F855B080000            	jne L_error_non_closure
 28868 00014F85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28869 00014F88 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28870                                  
 28871 00014F8B 483D[02000000]          	cmp rax, sob_boolean_false
 28872 00014F91 0F84DF000000            	je .L_if_else_0088
 28873 00014F97 488B4520                	mov rax, PARAM(0)	; param i
 28874 00014F9B 50                      	push rax
 28875 00014F9C 6A01                    	push 1	; arg count
 28876 00014F9E 488B4510                	mov rax, ENV
 28877 00014FA2 488B4010                	mov rax, qword [rax + 8 * 2]
 28878 00014FA6 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 28879 00014FAA 803804                  	cmp byte [rax], T_closure
 28880 00014FAD 0F852D080000            	jne L_error_non_closure
 28881 00014FB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28882 00014FB6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28883 00014FB9 50                      	push rax
 28884 00014FBA 488B4520                	mov rax, PARAM(0)	; param i
 28885 00014FBE 50                      	push rax
 28886 00014FBF 488B4510                	mov rax, ENV
 28887 00014FC3 488B4008                	mov rax, qword [rax + 8 * 1]
 28888 00014FC7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28889 00014FCA 50                      	push rax
 28890 00014FCB 6A03                    	push 3	; arg count
 28891 00014FCD 488B0425[58110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 28892 00014FD5 803805                  	cmp byte [rax], T_undefined
 28893 00014FD8 0F847E070000            	je L_error_fvar_undefined
 28894 00014FDE 803804                  	cmp byte [rax], T_closure
 28895 00014FE1 0F85F9070000            	jne L_error_non_closure
 28896 00014FE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28897 00014FEA FF5009                  	call SOB_CLOSURE_CODE(rax)
 28898                                  
 28899                                  	; preparing a tail-call
 28900 00014FED 48B8-                   	mov rax, L_constants + 2158
 28900 00014FEF [6E08000000000000] 
 28901 00014FF7 50                      	push rax
 28902 00014FF8 488B4520                	mov rax, PARAM(0)	; param i
 28903 00014FFC 50                      	push rax
 28904 00014FFD 6A02                    	push 2	; arg count
 28905 00014FFF 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 28906 00015007 803805                  	cmp byte [rax], T_undefined
 28907 0001500A 0F844C070000            	je L_error_fvar_undefined
 28908 00015010 803804                  	cmp byte [rax], T_closure
 28909 00015013 0F85C7070000            	jne L_error_non_closure
 28910 00015019 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28911 0001501C FF5009                  	call SOB_CLOSURE_CODE(rax)
 28912 0001501F 50                      	push rax
 28913 00015020 6A01                    	push 1	; arg count
 28914 00015022 488B4510                	mov rax, ENV
 28915 00015026 488B00                  	mov rax, qword [rax + 8 * 0]
 28916 00015029 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28917 0001502C 488B00                  	mov rax, qword [rax]
 28918 0001502F 803804                  	cmp byte [rax], T_closure
 28919 00015032 0F85A8070000            	jne L_error_non_closure
 28920 00015038 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28921                                  
 28922                                  	; recycling the current frame
 28923 0001503B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28924 0001503E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28925 00015041 B905000000              	mov rcx, 1 + 4
 28926 00015046 488B5D18                	mov rbx, COUNT
 28927 0001504A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28928 0001504F 488D55F8                	lea rdx, [rbp - 8 * 1]
 28929                                  .L_tc_recycle_frame_loop_00f1:
 28930 00015053 4883F900                	cmp rcx, 0
 28931 00015057 7413                    	je .L_tc_recycle_frame_done_00f1
 28932 00015059 488B32                  	mov rsi, qword [rdx]
 28933 0001505C 488933                  	mov qword [rbx], rsi
 28934 0001505F 48FFC9                  	dec rcx
 28935 00015062 4883EB08                	sub rbx, 8 * 1
 28936 00015066 4883EA08                	sub rdx, 8 * 1
 28937 0001506A EBE7                    	jmp .L_tc_recycle_frame_loop_00f1
 28938                                  .L_tc_recycle_frame_done_00f1:
 28939 0001506C 488D6308                	lea rsp, [rbx + 8 * 1]
 28940 00015070 5D                      	pop rbp	; the proc will restore it!
 28941 00015071 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28942                                  
 28943 00015074 EB0B                    	jmp .L_if_end_0088
 28944                                  
 28945                                  	.L_if_else_0088:
 28946 00015076 488B4510                	mov rax, ENV
 28947 0001507A 488B4008                	mov rax, qword [rax + 8 * 1]
 28948 0001507E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28949                                  
 28950                                  	.L_if_end_0088:
 28951 00015081 C9                      	leave
 28952 00015082 C21800                  	ret AND_KILL_FRAME(1)
 28953                                  .L_lambda_simple_end_00ba:	; new closure is in rax
 28954                                  
 28955 00015085 50                      	push rax
 28956 00015086 488B4520                	mov rax, PARAM(0)	; param run
 28957                                  
 28958 0001508A 8F00                    	pop qword[rax]
 28959 0001508C 48B8-                   	mov rax, sob_void
 28959 0001508E [0000000000000000] 
 28960                                  
 28961                                  	; preparing a tail-call
 28962 00015096 48B8-                   	mov rax, L_constants + 2023
 28962 00015098 [E707000000000000] 
 28963 000150A0 50                      	push rax
 28964 000150A1 6A01                    	push 1	; arg count
 28965 000150A3 488B4520                	mov rax, PARAM(0)	; param run
 28966 000150A7 488B00                  	mov rax, qword [rax]
 28967 000150AA 803804                  	cmp byte [rax], T_closure
 28968 000150AD 0F852D070000            	jne L_error_non_closure
 28969 000150B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28970                                  
 28971                                  	; recycling the current frame
 28972 000150B6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28973 000150B9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28974 000150BC B905000000              	mov rcx, 1 + 4
 28975 000150C1 488B5D18                	mov rbx, COUNT
 28976 000150C5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28977 000150CA 488D55F8                	lea rdx, [rbp - 8 * 1]
 28978                                  .L_tc_recycle_frame_loop_00f2:
 28979 000150CE 4883F900                	cmp rcx, 0
 28980 000150D2 7413                    	je .L_tc_recycle_frame_done_00f2
 28981 000150D4 488B32                  	mov rsi, qword [rdx]
 28982 000150D7 488933                  	mov qword [rbx], rsi
 28983 000150DA 48FFC9                  	dec rcx
 28984 000150DD 4883EB08                	sub rbx, 8 * 1
 28985 000150E1 4883EA08                	sub rdx, 8 * 1
 28986 000150E5 EBE7                    	jmp .L_tc_recycle_frame_loop_00f2
 28987                                  .L_tc_recycle_frame_done_00f2:
 28988 000150E7 488D6308                	lea rsp, [rbx + 8 * 1]
 28989 000150EB 5D                      	pop rbp	; the proc will restore it!
 28990 000150EC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28991 000150EF C9                      	leave
 28992 000150F0 C21800                  	ret AND_KILL_FRAME(1)
 28993                                  .L_lambda_simple_end_00b9:	; new closure is in rax
 28994 000150F3 803804                  	cmp byte [rax], T_closure
 28995 000150F6 0F85E4060000            	jne L_error_non_closure
 28996 000150FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 28997                                  
 28998                                  	; recycling the current frame
 28999 000150FF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29000 00015102 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29001 00015105 B905000000              	mov rcx, 1 + 4
 29002 0001510A 488B5D18                	mov rbx, COUNT
 29003 0001510E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29004 00015113 488D55F8                	lea rdx, [rbp - 8 * 1]
 29005                                  .L_tc_recycle_frame_loop_00f3:
 29006 00015117 4883F900                	cmp rcx, 0
 29007 0001511B 7413                    	je .L_tc_recycle_frame_done_00f3
 29008 0001511D 488B32                  	mov rsi, qword [rdx]
 29009 00015120 488933                  	mov qword [rbx], rsi
 29010 00015123 48FFC9                  	dec rcx
 29011 00015126 4883EB08                	sub rbx, 8 * 1
 29012 0001512A 4883EA08                	sub rdx, 8 * 1
 29013 0001512E EBE7                    	jmp .L_tc_recycle_frame_loop_00f3
 29014                                  .L_tc_recycle_frame_done_00f3:
 29015 00015130 488D6308                	lea rsp, [rbx + 8 * 1]
 29016 00015134 5D                      	pop rbp	; the proc will restore it!
 29017 00015135 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29018 00015138 C9                      	leave
 29019 00015139 C21800                  	ret AND_KILL_FRAME(1)
 29020                                  .L_lambda_simple_end_00b8:	; new closure is in rax
 29021 0001513C 803804                  	cmp byte [rax], T_closure
 29022 0001513F 0F859B060000            	jne L_error_non_closure
 29023 00015145 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29024                                  
 29025                                  	; recycling the current frame
 29026 00015148 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29027 0001514B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29028 0001514E B905000000              	mov rcx, 1 + 4
 29029 00015153 488B5D18                	mov rbx, COUNT
 29030 00015157 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29031 0001515C 488D55F8                	lea rdx, [rbp - 8 * 1]
 29032                                  .L_tc_recycle_frame_loop_00f4:
 29033 00015160 4883F900                	cmp rcx, 0
 29034 00015164 7413                    	je .L_tc_recycle_frame_done_00f4
 29035 00015166 488B32                  	mov rsi, qword [rdx]
 29036 00015169 488933                  	mov qword [rbx], rsi
 29037 0001516C 48FFC9                  	dec rcx
 29038 0001516F 4883EB08                	sub rbx, 8 * 1
 29039 00015173 4883EA08                	sub rdx, 8 * 1
 29040 00015177 EBE7                    	jmp .L_tc_recycle_frame_loop_00f4
 29041                                  .L_tc_recycle_frame_done_00f4:
 29042 00015179 488D6308                	lea rsp, [rbx + 8 * 1]
 29043 0001517D 5D                      	pop rbp	; the proc will restore it!
 29044 0001517E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29045 00015181 C9                      	leave
 29046 00015182 C22000                  	ret AND_KILL_FRAME(2)
 29047                                  .L_lambda_simple_end_00b7:	; new closure is in rax
 29048 00015185 48890425[3F190000]      	mov qword [free_var_174], rax
 29049 0001518D 48B8-                   	mov rax, sob_void
 29049 0001518F [0000000000000000] 
 29050                                  
 29051 00015197 4889C7                  	mov rdi, rax
 29052 0001519A E8FC070000              	call print_sexpr_if_not_void
 29053                                  
 29054 0001519F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29055 000151A4 E8E0060000              	call malloc
 29056 000151A9 50                      	push rax
 29057 000151AA BF00000000              	mov rdi, 8 * 0	; new rib
 29058 000151AF E8D5060000              	call malloc
 29059 000151B4 50                      	push rax
 29060 000151B5 BF08000000              	mov rdi, 8 * 1	; extended env
 29061 000151BA E8CA060000              	call malloc
 29062 000151BF 488B7D10                	mov rdi, ENV
 29063 000151C3 BE00000000              	mov rsi, 0
 29064 000151C8 BA01000000              	mov rdx, 1
 29065                                  .L_lambda_simple_env_loop_00bb:	; ext_env[i + 1] <-- env[i]
 29066 000151CD 4883FE00                	cmp rsi, 0
 29067 000151D1 7410                    	je .L_lambda_simple_env_end_00bb
 29068 000151D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29069 000151D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29070 000151DB 48FFC6                  	inc rsi
 29071 000151DE 48FFC2                  	inc rdx
 29072 000151E1 EBEA                    	jmp .L_lambda_simple_env_loop_00bb
 29073                                  .L_lambda_simple_env_end_00bb:
 29074 000151E3 5B                      	pop rbx
 29075 000151E4 BE00000000              	mov rsi, 0
 29076                                  .L_lambda_simple_params_loop_00bb:	; copy params
 29077 000151E9 4883FE00                	cmp rsi, 0
 29078 000151ED 740E                    	je .L_lambda_simple_params_end_00bb
 29079 000151EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29080 000151F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29081 000151F8 48FFC6                  	inc rsi
 29082 000151FB EBEC                    	jmp .L_lambda_simple_params_loop_00bb
 29083                                  .L_lambda_simple_params_end_00bb:
 29084 000151FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29085 00015200 4889C3                  	mov rbx, rax
 29086 00015203 58                      	pop rax
 29087 00015204 C60004                  	mov byte [rax], T_closure
 29088 00015207 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29089 0001520B 48C74009[18520100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bb
 29090 00015213 E959020000              	jmp .L_lambda_simple_end_00bb
 29091                                  .L_lambda_simple_code_00bb:	; lambda-simple body
 29092 00015218 48837C241003            	cmp qword [rsp + 8 * 2], 3
 29093 0001521E 740B                    	je .L_lambda_simple_arity_check_ok_00bb
 29094 00015220 FF742410                	push qword [rsp + 8 * 2]
 29095 00015224 6A03                    	push 3
 29096 00015226 E917060000              	jmp L_error_incorrect_arity_simple
 29097                                  .L_lambda_simple_arity_check_ok_00bb:
 29098 0001522B C8000000                	enter 0, 0
 29099 0001522F 488B4530                	mov rax, PARAM(2)	; param n
 29100 00015233 50                      	push rax
 29101 00015234 6A01                    	push 1	; arg count
 29102 00015236 488B0425[7C0F0000]      	mov rax, qword [free_var_27]	; free var zero?
 29103 0001523E 803805                  	cmp byte [rax], T_undefined
 29104 00015241 0F8415050000            	je L_error_fvar_undefined
 29105 00015247 803804                  	cmp byte [rax], T_closure
 29106 0001524A 0F8590050000            	jne L_error_non_closure
 29107 00015250 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29108 00015253 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29109                                  
 29110 00015256 483D[02000000]          	cmp rax, sob_boolean_false
 29111 0001525C 740F                    	je .L_if_else_0089
 29112 0001525E 48B8-                   	mov rax, L_constants + 3469
 29112 00015260 [8D0D000000000000] 
 29113                                  
 29114 00015268 E900020000              	jmp .L_if_end_0089
 29115                                  
 29116                                  	.L_if_else_0089:
 29117 0001526D 488B4528                	mov rax, PARAM(1)	; param b
 29118 00015271 50                      	push rax
 29119 00015272 488B4520                	mov rax, PARAM(0)	; param a
 29120 00015276 50                      	push rax
 29121 00015277 6A02                    	push 2	; arg count
 29122 00015279 488B0425[CB150000]      	mov rax, qword [free_var_122]	; free var <
 29123 00015281 803805                  	cmp byte [rax], T_undefined
 29124 00015284 0F84D2040000            	je L_error_fvar_undefined
 29125 0001528A 803804                  	cmp byte [rax], T_closure
 29126 0001528D 0F854D050000            	jne L_error_non_closure
 29127 00015293 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29128 00015296 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29129                                  
 29130 00015299 483D[02000000]          	cmp rax, sob_boolean_false
 29131 0001529F 0F84C2000000            	je .L_if_else_008a
 29132                                  	; preparing a tail-call
 29133 000152A5 488B4530                	mov rax, PARAM(2)	; param n
 29134 000152A9 50                      	push rax
 29135 000152AA 488B4520                	mov rax, PARAM(0)	; param a
 29136 000152AE 50                      	push rax
 29137 000152AF 488B4528                	mov rax, PARAM(1)	; param b
 29138 000152B3 50                      	push rax
 29139 000152B4 6A02                    	push 2	; arg count
 29140 000152B6 488B0425[A9150000]      	mov rax, qword [free_var_120]	; free var /
 29141 000152BE 803805                  	cmp byte [rax], T_undefined
 29142 000152C1 0F8495040000            	je L_error_fvar_undefined
 29143 000152C7 803804                  	cmp byte [rax], T_closure
 29144 000152CA 0F8510050000            	jne L_error_non_closure
 29145 000152D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29146 000152D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29147 000152D6 50                      	push rax
 29148 000152D7 488B4520                	mov rax, PARAM(0)	; param a
 29149 000152DB 50                      	push rax
 29150 000152DC 6A03                    	push 3	; arg count
 29151 000152DE 488B0425[50190000]      	mov rax, qword [free_var_175]	; free var logarithm
 29152 000152E6 803805                  	cmp byte [rax], T_undefined
 29153 000152E9 0F846D040000            	je L_error_fvar_undefined
 29154 000152EF 803804                  	cmp byte [rax], T_closure
 29155 000152F2 0F85E8040000            	jne L_error_non_closure
 29156 000152F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29157 000152FB FF5009                  	call SOB_CLOSURE_CODE(rax)
 29158 000152FE 50                      	push rax
 29159 000152FF 48B8-                   	mov rax, L_constants + 3469
 29159 00015301 [8D0D000000000000] 
 29160 00015309 50                      	push rax
 29161 0001530A 6A02                    	push 2	; arg count
 29162 0001530C 488B0425[54150000]      	mov rax, qword [free_var_115]	; free var +
 29163 00015314 803805                  	cmp byte [rax], T_undefined
 29164 00015317 0F843F040000            	je L_error_fvar_undefined
 29165 0001531D 803804                  	cmp byte [rax], T_closure
 29166 00015320 0F85BA040000            	jne L_error_non_closure
 29167 00015326 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29168                                  
 29169                                  	; recycling the current frame
 29170 00015329 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29171 0001532C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29172 0001532F B906000000              	mov rcx, 2 + 4
 29173 00015334 488B5D18                	mov rbx, COUNT
 29174 00015338 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29175 0001533D 488D55F8                	lea rdx, [rbp - 8 * 1]
 29176                                  .L_tc_recycle_frame_loop_00f5:
 29177 00015341 4883F900                	cmp rcx, 0
 29178 00015345 7413                    	je .L_tc_recycle_frame_done_00f5
 29179 00015347 488B32                  	mov rsi, qword [rdx]
 29180 0001534A 488933                  	mov qword [rbx], rsi
 29181 0001534D 48FFC9                  	dec rcx
 29182 00015350 4883EB08                	sub rbx, 8 * 1
 29183 00015354 4883EA08                	sub rdx, 8 * 1
 29184 00015358 EBE7                    	jmp .L_tc_recycle_frame_loop_00f5
 29185                                  .L_tc_recycle_frame_done_00f5:
 29186 0001535A 488D6308                	lea rsp, [rbx + 8 * 1]
 29187 0001535E 5D                      	pop rbp	; the proc will restore it!
 29188 0001535F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29189                                  
 29190 00015362 E906010000              	jmp .L_if_end_008a
 29191                                  
 29192                                  	.L_if_else_008a:
 29193 00015367 488B4528                	mov rax, PARAM(1)	; param b
 29194 0001536B 50                      	push rax
 29195 0001536C 488B4520                	mov rax, PARAM(0)	; param a
 29196 00015370 50                      	push rax
 29197 00015371 6A02                    	push 2	; arg count
 29198 00015373 488B0425[0F160000]      	mov rax, qword [free_var_126]	; free var =
 29199 0001537B 803805                  	cmp byte [rax], T_undefined
 29200 0001537E 0F84D8030000            	je L_error_fvar_undefined
 29201 00015384 803804                  	cmp byte [rax], T_closure
 29202 00015387 0F8553040000            	jne L_error_non_closure
 29203 0001538D FF7001                  	push SOB_CLOSURE_ENV(rax)
 29204 00015390 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29205                                  
 29206 00015393 483D[02000000]          	cmp rax, sob_boolean_false
 29207 00015399 740F                    	je .L_if_else_008b
 29208 0001539B 48B8-                   	mov rax, L_constants + 3469
 29208 0001539D [8D0D000000000000] 
 29209                                  
 29210 000153A5 E9C3000000              	jmp .L_if_end_008b
 29211                                  
 29212                                  	.L_if_else_008b:
 29213                                  	; preparing a tail-call
 29214 000153AA 48B8-                   	mov rax, L_constants + 2158
 29214 000153AC [6E08000000000000] 
 29215 000153B4 50                      	push rax
 29216 000153B5 488B4530                	mov rax, PARAM(2)	; param n
 29217 000153B9 50                      	push rax
 29218 000153BA 6A02                    	push 2	; arg count
 29219 000153BC 488B0425[76150000]      	mov rax, qword [free_var_117]	; free var -
 29220 000153C4 803805                  	cmp byte [rax], T_undefined
 29221 000153C7 0F848F030000            	je L_error_fvar_undefined
 29222 000153CD 803804                  	cmp byte [rax], T_closure
 29223 000153D0 0F850A040000            	jne L_error_non_closure
 29224 000153D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29225 000153D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29226 000153DC 50                      	push rax
 29227 000153DD 488B4520                	mov rax, PARAM(0)	; param a
 29228 000153E1 50                      	push rax
 29229 000153E2 488B4528                	mov rax, PARAM(1)	; param b
 29230 000153E6 50                      	push rax
 29231 000153E7 6A03                    	push 3	; arg count
 29232 000153E9 488B0425[50190000]      	mov rax, qword [free_var_175]	; free var logarithm
 29233 000153F1 803805                  	cmp byte [rax], T_undefined
 29234 000153F4 0F8462030000            	je L_error_fvar_undefined
 29235 000153FA 803804                  	cmp byte [rax], T_closure
 29236 000153FD 0F85DD030000            	jne L_error_non_closure
 29237 00015403 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29238 00015406 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29239 00015409 50                      	push rax
 29240 0001540A 48B8-                   	mov rax, L_constants + 3469
 29240 0001540C [8D0D000000000000] 
 29241 00015414 50                      	push rax
 29242 00015415 6A02                    	push 2	; arg count
 29243 00015417 488B0425[A9150000]      	mov rax, qword [free_var_120]	; free var /
 29244 0001541F 803805                  	cmp byte [rax], T_undefined
 29245 00015422 0F8434030000            	je L_error_fvar_undefined
 29246 00015428 803804                  	cmp byte [rax], T_closure
 29247 0001542B 0F85AF030000            	jne L_error_non_closure
 29248 00015431 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29249                                  
 29250                                  	; recycling the current frame
 29251 00015434 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29252 00015437 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29253 0001543A B906000000              	mov rcx, 2 + 4
 29254 0001543F 488B5D18                	mov rbx, COUNT
 29255 00015443 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29256 00015448 488D55F8                	lea rdx, [rbp - 8 * 1]
 29257                                  .L_tc_recycle_frame_loop_00f6:
 29258 0001544C 4883F900                	cmp rcx, 0
 29259 00015450 7413                    	je .L_tc_recycle_frame_done_00f6
 29260 00015452 488B32                  	mov rsi, qword [rdx]
 29261 00015455 488933                  	mov qword [rbx], rsi
 29262 00015458 48FFC9                  	dec rcx
 29263 0001545B 4883EB08                	sub rbx, 8 * 1
 29264 0001545F 4883EA08                	sub rdx, 8 * 1
 29265 00015463 EBE7                    	jmp .L_tc_recycle_frame_loop_00f6
 29266                                  .L_tc_recycle_frame_done_00f6:
 29267 00015465 488D6308                	lea rsp, [rbx + 8 * 1]
 29268 00015469 5D                      	pop rbp	; the proc will restore it!
 29269 0001546A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29270                                  
 29271                                  	.L_if_end_008b:
 29272                                  
 29273                                  	.L_if_end_008a:
 29274                                  
 29275                                  	.L_if_end_0089:
 29276 0001546D C9                      	leave
 29277 0001546E C22800                  	ret AND_KILL_FRAME(3)
 29278                                  .L_lambda_simple_end_00bb:	; new closure is in rax
 29279 00015471 48890425[50190000]      	mov qword [free_var_175], rax
 29280 00015479 48B8-                   	mov rax, sob_void
 29280 0001547B [0000000000000000] 
 29281                                  
 29282 00015483 4889C7                  	mov rdi, rax
 29283 00015486 E810050000              	call print_sexpr_if_not_void
 29284                                  
 29285 0001548B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29286 00015490 E8F4030000              	call malloc
 29287 00015495 50                      	push rax
 29288 00015496 BF00000000              	mov rdi, 8 * 0	; new rib
 29289 0001549B E8E9030000              	call malloc
 29290 000154A0 50                      	push rax
 29291 000154A1 BF08000000              	mov rdi, 8 * 1	; extended env
 29292 000154A6 E8DE030000              	call malloc
 29293 000154AB 488B7D10                	mov rdi, ENV
 29294 000154AF BE00000000              	mov rsi, 0
 29295 000154B4 BA01000000              	mov rdx, 1
 29296                                  .L_lambda_simple_env_loop_00bc:	; ext_env[i + 1] <-- env[i]
 29297 000154B9 4883FE00                	cmp rsi, 0
 29298 000154BD 7410                    	je .L_lambda_simple_env_end_00bc
 29299 000154BF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29300 000154C3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29301 000154C7 48FFC6                  	inc rsi
 29302 000154CA 48FFC2                  	inc rdx
 29303 000154CD EBEA                    	jmp .L_lambda_simple_env_loop_00bc
 29304                                  .L_lambda_simple_env_end_00bc:
 29305 000154CF 5B                      	pop rbx
 29306 000154D0 BE00000000              	mov rsi, 0
 29307                                  .L_lambda_simple_params_loop_00bc:	; copy params
 29308 000154D5 4883FE00                	cmp rsi, 0
 29309 000154D9 740E                    	je .L_lambda_simple_params_end_00bc
 29310 000154DB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29311 000154E0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29312 000154E4 48FFC6                  	inc rsi
 29313 000154E7 EBEC                    	jmp .L_lambda_simple_params_loop_00bc
 29314                                  .L_lambda_simple_params_end_00bc:
 29315 000154E9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29316 000154EC 4889C3                  	mov rbx, rax
 29317 000154EF 58                      	pop rax
 29318 000154F0 C60004                  	mov byte [rax], T_closure
 29319 000154F3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29320 000154F7 48C74009[04550100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bc
 29321 000154FF E97E000000              	jmp .L_lambda_simple_end_00bc
 29322                                  .L_lambda_simple_code_00bc:	; lambda-simple body
 29323 00015504 48837C241000            	cmp qword [rsp + 8 * 2], 0
 29324 0001550A 740B                    	je .L_lambda_simple_arity_check_ok_00bc
 29325 0001550C FF742410                	push qword [rsp + 8 * 2]
 29326 00015510 6A00                    	push 0
 29327 00015512 E92B030000              	jmp L_error_incorrect_arity_simple
 29328                                  .L_lambda_simple_arity_check_ok_00bc:
 29329 00015517 C8000000                	enter 0, 0
 29330                                  	; preparing a tail-call
 29331 0001551B 48B8-                   	mov rax, L_constants + 3494
 29331 0001551D [A60D000000000000] 
 29332 00015525 50                      	push rax
 29333 00015526 6A01                    	push 1	; arg count
 29334 00015528 488B0425[B00E0000]      	mov rax, qword [free_var_15]	; free var write-char
 29335 00015530 803805                  	cmp byte [rax], T_undefined
 29336 00015533 0F8423020000            	je L_error_fvar_undefined
 29337 00015539 803804                  	cmp byte [rax], T_closure
 29338 0001553C 0F859E020000            	jne L_error_non_closure
 29339 00015542 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29340                                  
 29341                                  	; recycling the current frame
 29342 00015545 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29343 00015548 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29344 0001554B B905000000              	mov rcx, 1 + 4
 29345 00015550 488B5D18                	mov rbx, COUNT
 29346 00015554 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29347 00015559 488D55F8                	lea rdx, [rbp - 8 * 1]
 29348                                  .L_tc_recycle_frame_loop_00f7:
 29349 0001555D 4883F900                	cmp rcx, 0
 29350 00015561 7413                    	je .L_tc_recycle_frame_done_00f7
 29351 00015563 488B32                  	mov rsi, qword [rdx]
 29352 00015566 488933                  	mov qword [rbx], rsi
 29353 00015569 48FFC9                  	dec rcx
 29354 0001556C 4883EB08                	sub rbx, 8 * 1
 29355 00015570 4883EA08                	sub rdx, 8 * 1
 29356 00015574 EBE7                    	jmp .L_tc_recycle_frame_loop_00f7
 29357                                  .L_tc_recycle_frame_done_00f7:
 29358 00015576 488D6308                	lea rsp, [rbx + 8 * 1]
 29359 0001557A 5D                      	pop rbp	; the proc will restore it!
 29360 0001557B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29361 0001557E C9                      	leave
 29362 0001557F C21000                  	ret AND_KILL_FRAME(0)
 29363                                  .L_lambda_simple_end_00bc:	; new closure is in rax
 29364 00015582 48890425[61190000]      	mov qword [free_var_176], rax
 29365 0001558A 48B8-                   	mov rax, sob_void
 29365 0001558C [0000000000000000] 
 29366                                  
 29367 00015594 4889C7                  	mov rdi, rax
 29368 00015597 E8FF030000              	call print_sexpr_if_not_void
 29369                                  
 29370 0001559C 48B8-                   	mov rax, L_constants + 3496
 29370 0001559E [A80D000000000000] 
 29371 000155A6 50                      	push rax
 29372 000155A7 48B8-                   	mov rax, L_constants + 3174
 29372 000155A9 [660C000000000000] 
 29373 000155B1 50                      	push rax
 29374 000155B2 48B8-                   	mov rax, L_constants + 2158
 29374 000155B4 [6E08000000000000] 
 29375 000155BC 50                      	push rax
 29376 000155BD 6A03                    	push 3	; arg count
 29377 000155BF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29378 000155C4 E8C0020000              	call malloc
 29379 000155C9 50                      	push rax
 29380 000155CA BF00000000              	mov rdi, 8 * 0	; new rib
 29381 000155CF E8B5020000              	call malloc
 29382 000155D4 50                      	push rax
 29383 000155D5 BF08000000              	mov rdi, 8 * 1	; extended env
 29384 000155DA E8AA020000              	call malloc
 29385 000155DF 488B7D10                	mov rdi, ENV
 29386 000155E3 BE00000000              	mov rsi, 0
 29387 000155E8 BA01000000              	mov rdx, 1
 29388                                  .L_lambda_opt_env_loop_001a:	; ext_env[i + 1] <-- env[i]
 29389 000155ED 4883FE00                	cmp rsi, 0
 29390 000155F1 7410                    	je .L_lambda_opt_env_end_001a
 29391 000155F3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29392 000155F7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29393 000155FB 48FFC6                  	inc rsi
 29394 000155FE 48FFC2                  	inc rdx
 29395 00015601 EBEA                    	jmp .L_lambda_opt_env_loop_001a
 29396                                  .L_lambda_opt_env_end_001a:
 29397 00015603 5B                      	pop rbx
 29398 00015604 BE00000000              	mov rsi, 0
 29399                                  .L_lambda_opt_params_loop_001a:	; copy params
 29400 00015609 4883FE00                	cmp rsi, 0
 29401 0001560D 740E                    	je .L_lambda_opt_params_end_001a
 29402 0001560F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29403 00015614 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29404 00015618 48FFC6                  	inc rsi
 29405 0001561B EBEC                    	jmp .L_lambda_opt_params_loop_001a
 29406                                  .L_lambda_opt_params_end_001a:
 29407 0001561D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29408 00015620 4889C3                  	mov rbx, rax
 29409 00015623 58                      	pop rax
 29410 00015624 C60004                  	mov byte [rax], T_closure
 29411 00015627 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29412 0001562B 48C74009[38560100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001a
 29413 00015633 E9DF000000              	jmp .L_lambda_opt_end_001a
 29414                                  .L_lambda_opt_code_001a:	; lambda-simple body
 29415 00015638 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 29416 0001563E 740D                    	je .L_lambda_opt_arity_check_exact_001a ;	 if equal, go to exact arity
 29417 00015640 7F42                    	jg .L_lambda_opt_arity_check_more_001a ;	 if greater than, go to arity more
 29418 00015642 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 29419 00015646 6A01                     	push 1
 29420 00015648 E909020000              	jmp L_error_incorrect_arity_opt
 29421                                  	.L_lambda_opt_arity_check_exact_001a:
 29422 0001564D 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 29423 00015652 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 29424 00015657 4883EC08                	sub rsp, 8
 29425 0001565B 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 29426                                  	.L_lambda_opt_exact_shifting_loop_001a:
 29427 0001565F 488B5108                	mov rdx, [rcx + 8]
 29428 00015663 488911                  	mov [rcx], rdx
 29429 00015666 4883C108                	add rcx, 8
 29430 0001566A 4839CB                  	cmp rbx, rcx
 29431 0001566D 75F0                    	jne .L_lambda_opt_exact_shifting_loop_001a
 29432                                  	.L_lambda_opt_exact_shifting_loop_end_001a:
 29433 0001566F 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 29434 00015676 4883C001                	add rax, 1 ; 	arg count += 1
 29435 0001567A 4889442410              	mov qword [rsp + 8 * 2], rax
 29436 0001567F E987000000              	jmp .L_lambda_opt_stack_adjusted_001a
 29437                                  	.L_lambda_opt_arity_check_more_001a:
 29438 00015684 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 29438 00015686 [0100000000000000] 
 29439 0001568E 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 29440 00015694 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_001a
 29441                                  	.L_lambda_opt_stack_shrink_loop_001a:
 29442 00015696 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 29443 0001569B E8E9010000              	call malloc ;	 allocated memory for the optional scheme list
 29444 000156A0 C60021                  	mov byte[rax], T_pair ;	 set type pair
 29445 000156A3 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 29446 000156A7 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 29447 000156AA 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 29448 000156AF 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 29449 000156B4 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 29450 000156B8 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 29451                                  	.L_lambda_opt_more_shifting_loop_001a:
 29452 000156BD 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 29453 000156C0 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 29454 000156C4 4883EB08                	sub rbx, 8 
 29455 000156C8 4839DC                  	cmp rsp, rbx
 29456 000156CB 7EF0                    	jle .L_lambda_opt_more_shifting_loop_001a
 29457                                  	.L_lambda_opt_more_shifting_loop_end_001a:
 29458 000156CD 4883C408                	add rsp, 8 ;	 update rsp
 29459 000156D1 488B5C2410              	mov rbx, [rsp + 8 * 2]
 29460 000156D6 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 29461 000156DA 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 29462 000156DF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 29463 000156E5 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_001a
 29464                                  	.L_lambda_opt_stack_shrink_loop_exit_001a:
 29465 000156E7 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 29466 000156EC 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 29467 000156F1 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 29468 000156F6 E88E010000              	call malloc ;	 allocated memory for the optional scheme list
 29469 000156FB C60021                  	mov byte[rax], T_pair ;	 set type pair
 29470 000156FE 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 29471 00015702 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 29472 00015706 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 29473                                  	.L_lambda_opt_stack_adjusted_001a:
 29474 0001570B C8000000                	enter 0, 0
 29475 0001570F 488B4528                	mov rax, PARAM(1)	; param b
 29476 00015713 C9                      	leave
 29477 00015714 C22000                  	ret AND_KILL_FRAME(2)
 29478                                  .L_lambda_opt_end_001a:	; new closure is in rax
 29479 00015717 803804                  	cmp byte [rax], T_closure
 29480 0001571A 0F85C0000000            	jne L_error_non_closure
 29481 00015720 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29482 00015723 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29483                                  
 29484 00015726 4889C7                  	mov rdi, rax
 29485 00015729 E86D020000              	call print_sexpr_if_not_void
 29486                                  
 29487 0001572E 48BF-                           mov rdi, fmt_memory_usage
 29487 00015730 [0A1A000000000000] 
 29488 00015738 488B3425[901A0000]              mov rsi, qword [top_of_memory]
 29489 00015740 4881EE[00000000]                sub rsi, memory
 29490 00015747 B800000000                      mov rax, 0
 29491                                          ENTER
    44 0001574C C8000000            <1>  enter 0, 0
    45 00015750 4883E4F0            <1>  and rsp, ~15
 29492 00015754 E8(00000000)                    call printf
 29493                                          LEAVE
    49 00015759 C9                  <1>  leave
 29494 0001575A C9                      	leave
 29495 0001575B C3                      	ret
 29496                                  
 29497                                  L_error_fvar_undefined:
 29498 0001575C 50                              push rax
 29499 0001575D 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
 29500 00015765 48BE-                           mov rsi, fmt_undefined_free_var_1
 29500 00015767 [7219000000000000] 
 29501 0001576F B800000000                      mov rax, 0
 29502                                          ENTER
    44 00015774 C8000000            <1>  enter 0, 0
    45 00015778 4883E4F0            <1>  and rsp, ~15
 29503 0001577C E8(00000000)                    call fprintf
 29504                                          LEAVE
    49 00015781 C9                  <1>  leave
 29505 00015782 58                              pop rax
 29506 00015783 488B4001                        mov rax, qword [rax + 1] ; string
 29507 00015787 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 29508 0001578B BE01000000                      mov rsi, 1               ; sizeof(char)
 29509 00015790 488B5001                        mov rdx, qword [rax + 1] ; string-length
 29510 00015794 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
 29511 0001579C B800000000                      mov rax, 0
 29512                                          ENTER
    44 000157A1 C8000000            <1>  enter 0, 0
    45 000157A5 4883E4F0            <1>  and rsp, ~15
 29513 000157A9 E8(00000000)                    call fwrite
 29514                                          LEAVE
    49 000157AE C9                  <1>  leave
 29515 000157AF 488B3C25[00000000]              mov rdi, [stderr]       ; destination
 29516 000157B7 48BE-                           mov rsi, fmt_undefined_free_var_2
 29516 000157B9 [8919000000000000] 
 29517 000157C1 B800000000                      mov rax, 0
 29518                                          ENTER
    44 000157C6 C8000000            <1>  enter 0, 0
    45 000157CA 4883E4F0            <1>  and rsp, ~15
 29519 000157CE E8(00000000)                    call fprintf
 29520                                          LEAVE
    49 000157D3 C9                  <1>  leave
 29521 000157D4 48C7C0F6FFFFFF                  mov rax, -10
 29522 000157DB E8(00000000)                    call exit
 29523                                  
 29524                                  L_error_non_closure:
 29525 000157E0 488B3C25[00000000]              mov rdi, qword [stderr]
 29526 000157E8 48BE-                           mov rsi, fmt_non_closure
 29526 000157EA [401A000000000000] 
 29527 000157F2 B800000000                      mov rax, 0
 29528                                          ENTER
    44 000157F7 C8000000            <1>  enter 0, 0
    45 000157FB 4883E4F0            <1>  and rsp, ~15
 29529 000157FF E8(00000000)                    call fprintf
 29530                                          LEAVE
    49 00015804 C9                  <1>  leave
 29531 00015805 48C7C0FEFFFFFF                  mov rax, -2
 29532 0001580C E8(00000000)                    call exit
 29533                                  
 29534                                  L_error_improper_list:
 29535 00015811 488B3C25[00000000]      	mov rdi, qword [stderr]
 29536 00015819 48BE-                   	mov rsi, fmt_error_improper_list
 29536 0001581B [681A000000000000] 
 29537 00015823 B800000000              	mov rax, 0
 29538                                          ENTER
    44 00015828 C8000000            <1>  enter 0, 0
    45 0001582C 4883E4F0            <1>  and rsp, ~15
 29539 00015830 E8(00000000)            	call fprintf
 29540                                          LEAVE
    49 00015835 C9                  <1>  leave
 29541 00015836 48C7C0F9FFFFFF          	mov rax, -7
 29542 0001583D E8(00000000)            	call exit
 29543                                  
 29544                                  L_error_incorrect_arity_simple:
 29545 00015842 488B3C25[00000000]              mov rdi, qword [stderr]
 29546 0001584A 48BE-                           mov rsi, fmt_incorrect_arity_simple
 29546 0001584C [AB19000000000000] 
 29547 00015854 EB12                            jmp L_error_incorrect_arity_common
 29548                                  L_error_incorrect_arity_opt:
 29549 00015856 488B3C25[00000000]              mov rdi, qword [stderr]
 29550 0001585E 48BE-                           mov rsi, fmt_incorrect_arity_opt
 29550 00015860 [D619000000000000] 
 29551                                  L_error_incorrect_arity_common:
 29552 00015868 5A                              pop rdx
 29553 00015869 59                              pop rcx
 29554 0001586A B800000000                      mov rax, 0
 29555                                          ENTER
    44 0001586F C8000000            <1>  enter 0, 0
    45 00015873 4883E4F0            <1>  and rsp, ~15
 29556 00015877 E8(00000000)                    call fprintf
 29557                                          LEAVE
    49 0001587C C9                  <1>  leave
 29558 0001587D 48C7C0FAFFFFFF                  mov rax, -6
 29559 00015884 E8(00000000)                    call exit
 29560                                  
 29561                                  section .data
 29562                                  fmt_undefined_free_var_1:
 29563 00001972 212121205468652066-             db `!!! The free variable \0`
 29563 0000197B 726565207661726961-
 29563 00001984 626C652000         
 29564                                  fmt_undefined_free_var_2:
 29565 00001989 207761732075736564-             db ` was used before it was defined.\n\0`
 29565 00001992 206265666F72652069-
 29565 0000199B 742077617320646566-
 29565 000019A4 696E65642E0A00     
 29566                                  fmt_incorrect_arity_simple:
 29567 000019AB 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 29567 000019B4 74656420256C642061-
 29567 000019BD 7267756D656E74732C-
 29567 000019C6 206275742067697665-
 29567 000019CF 6E20256C640A00     
 29568                                  fmt_incorrect_arity_opt:
 29569 000019D6 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 29569 000019DF 746564206174206C65-
 29569 000019E8 61737420256C642061-
 29569 000019F1 7267756D656E74732C-
 29569 000019FA 206275742067697665-
 29569 00001A03 6E20256C640A00     
 29570                                  fmt_memory_usage:
 29571 00001A0A 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 29571 00001A13 20256C642062797465-
 29571 00001A1C 73206F662064796E61-
 29571 00001A25 6D6963616C6C792D61-
 29571 00001A2E 6C6C6F636174656420-
 29571 00001A37 6D656D6F72790A0A00 
 29572                                  fmt_non_closure:
 29573 00001A40 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 29573 00001A49 7074696E6720746F20-
 29573 00001A52 6170706C792061206E-
 29573 00001A5B 6F6E2D636C6F737572-
 29573 00001A64 65210A00           
 29574                                  fmt_error_improper_list:
 29575 00001A68 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 29575 00001A71 7267756D656E742069-
 29575 00001A7A 73206E6F7420612070-
 29575 00001A83 726F706572206C6973-
 29575 00001A8C 74210A00           
 29576                                  
 29577                                  section .bss
 29578                                  memory:
 29579 00000000 <res 40000000h>         	resb gbytes(1)
 29580                                  
 29581                                  section .data
 29582                                  top_of_memory:
 29583 00001A90 [0000000000000000]              dq memory
 29584                                  
 29585                                  section .text
 29586                                  malloc:
 29587 00015889 488B0425[901A0000]              mov rax, qword [top_of_memory]
 29588 00015891 48013C25[901A0000]              add qword [top_of_memory], rdi
 29589 00015899 C3                              ret
 29590                                  
 29591                                  L_code_ptr_break:
 29592 0001589A 48837C241000                    cmp qword [rsp + 8 * 2], 0
 29593 000158A0 0F85861A0000                    jne L_error_arg_count_0
 29594 000158A6 CC                              int3
 29595 000158A7 48B8-                           mov rax, sob_void
 29595 000158A9 [0000000000000000] 
 29596 000158B1 C21000                          ret AND_KILL_FRAME(0)        
 29597                                  
 29598                                  L_code_ptr_frame:
 29599 000158B4 C8000000                        enter 0, 0
 29600 000158B8 48837D1800                      cmp COUNT, 0
 29601 000158BD 0F85691A0000                    jne L_error_arg_count_0
 29602                                  
 29603 000158C3 48BF-                           mov rdi, fmt_frame
 29603 000158C5 [981A000000000000] 
 29604 000158CD 488B7500                        mov rsi, qword [rbp]    ; old rbp
 29605 000158D1 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
 29606 000158D5 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
 29607 000158D9 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
 29608 000158DD 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
 29609 000158E1 6A00                            push 0
 29610 000158E3 4151                            push r9
 29611 000158E5 4150                            push r8                   ; we'll use it when printing the params
 29612 000158E7 B800000000                      mov rax, 0
 29613                                          
 29614                                          ENTER
    44 000158EC C8000000            <1>  enter 0, 0
    45 000158F0 4883E4F0            <1>  and rsp, ~15
 29615 000158F4 E8(00000000)                    call printf
 29616                                          LEAVE
    49 000158F9 C9                  <1>  leave
 29617                                  
 29618                                  .L:
 29619 000158FA 488B0C24                        mov rcx, qword [rsp]
 29620 000158FE 4883F900                        cmp rcx, 0
 29621 00015902 7467                            je .L_out
 29622 00015904 48BF-                           mov rdi, fmt_frame_param_prefix
 29622 00015906 [D11A000000000000] 
 29623 0001590E 488B742410                      mov rsi, qword [rsp + 8*2]
 29624 00015913 B800000000                      mov rax, 0
 29625                                          
 29626                                          ENTER
    44 00015918 C8000000            <1>  enter 0, 0
    45 0001591C 4883E4F0            <1>  and rsp, ~15
 29627 00015920 E8(00000000)                    call printf
 29628                                          LEAVE
    49 00015925 C9                  <1>  leave
 29629                                  
 29630 00015926 488B0C24                        mov rcx, qword [rsp]
 29631 0001592A 48FFC9                          dec rcx
 29632 0001592D 48890C24                        mov qword [rsp], rcx    ; dec arg count
 29633 00015931 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
 29634 00015936 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
 29635 0001593B 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
 29636 0001593F 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
 29637 00015944 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
 29638 00015947 E87B000000                      call print_sexpr
 29639 0001594C 48BF-                           mov rdi, fmt_newline
 29639 0001594E [FD1A000000000000] 
 29640 00015956 B800000000                      mov rax, 0
 29641                                          ENTER
    44 0001595B C8000000            <1>  enter 0, 0
    45 0001595F 4883E4F0            <1>  and rsp, ~15
 29642 00015963 E8(00000000)                    call printf
 29643                                          LEAVE
    49 00015968 C9                  <1>  leave
 29644 00015969 EB8F                            jmp .L
 29645                                  .L_out:
 29646 0001596B 48BF-                           mov rdi, fmt_frame_continue
 29646 0001596D [E21A000000000000] 
 29647 00015975 B800000000                      mov rax, 0
 29648                                          ENTER
    44 0001597A C8000000            <1>  enter 0, 0
    45 0001597E 4883E4F0            <1>  and rsp, ~15
 29649 00015982 E8(00000000)                    call printf
 29650 00015987 E8(00000000)                    call getchar
 29651                                          LEAVE
    49 0001598C C9                  <1>  leave
 29652                                          
 29653 0001598D 48B8-                           mov rax, sob_void
 29653 0001598F [0000000000000000] 
 29654 00015997 C9                              leave
 29655 00015998 C21000                          ret AND_KILL_FRAME(0)
 29656                                          
 29657                                  print_sexpr_if_not_void:
 29658 0001599B 4881FF[00000000]        	cmp rdi, sob_void
 29659 000159A2 7422                    	je .done
 29660 000159A4 E81E000000              	call print_sexpr
 29661 000159A9 48BF-                   	mov rdi, fmt_newline
 29661 000159AB [FD1A000000000000] 
 29662 000159B3 B800000000              	mov rax, 0
 29663                                  	ENTER
    44 000159B8 C8000000            <1>  enter 0, 0
    45 000159BC 4883E4F0            <1>  and rsp, ~15
 29664 000159C0 E8(00000000)            	call printf
 29665                                  	LEAVE
    49 000159C5 C9                  <1>  leave
 29666                                  .done:
 29667 000159C6 C3                      	ret
 29668                                  
 29669                                  section .data
 29670                                  fmt_frame:
 29671 00001A98 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
 29671 00001AA1 207265742061646472-
 29671 00001AAA 203D2025703B206C65-
 29671 00001AB3 7820656E76203D2025-
 29671 00001ABC 703B20706172616D20-
 29671 00001AC5 636F756E74203D2025-
 29671 00001ACE 640A00             
 29672                                  fmt_frame_param_prefix:
 29673 00001AD1 3D3D5B706172616D20-             db `==[param %d]==> \0`
 29673 00001ADA 25645D3D3D3E2000   
 29674                                  fmt_frame_continue:
 29675 00001AE2 486974203C456E7465-             db `Hit <Enter> to continue...\0`
 29675 00001AEB 723E20746F20636F6E-
 29675 00001AF4 74696E75652E2E2E00 
 29676                                  fmt_newline:
 29677 00001AFD 0A00                    	db `\n\0`
 29678                                  fmt_void:
 29679 00001AFF 233C766F69643E00        	db `#<void>\0`
 29680                                  fmt_nil:
 29681 00001B07 282900                  	db `()\0`
 29682                                  fmt_boolean_false:
 29683 00001B0A 236600                  	db `#f\0`
 29684                                  fmt_boolean_true:
 29685 00001B0D 237400                  	db `#t\0`
 29686                                  fmt_char_backslash:
 29687 00001B10 235C5C00                	db `#\\\\\0`
 29688                                  fmt_char_dquote:
 29689 00001B14 235C2200                	db `#\\"\0`
 29690                                  fmt_char_simple:
 29691 00001B18 235C256300              	db `#\\%c\0`
 29692                                  fmt_char_null:
 29693 00001B1D 235C6E756C00            	db `#\\nul\0`
 29694                                  fmt_char_bell:
 29695 00001B23 235C62656C6C00          	db `#\\bell\0`
 29696                                  fmt_char_backspace:
 29697 00001B2A 235C6261636B737061-     	db `#\\backspace\0`
 29697 00001B33 636500             
 29698                                  fmt_char_tab:
 29699 00001B36 235C74616200            	db `#\\tab\0`
 29700                                  fmt_char_newline:
 29701 00001B3C 235C6E65776C696E65-     	db `#\\newline\0`
 29701 00001B45 00                 
 29702                                  fmt_char_formfeed:
 29703 00001B46 235C7061676500          	db `#\\page\0`
 29704                                  fmt_char_return:
 29705 00001B4D 235C72657475726E00      	db `#\\return\0`
 29706                                  fmt_char_escape:
 29707 00001B56 235C65736300            	db `#\\esc\0`
 29708                                  fmt_char_space:
 29709 00001B5C 235C737061636500        	db `#\\space\0`
 29710                                  fmt_char_hex:
 29711 00001B64 235C782530325800        	db `#\\x%02X\0`
 29712                                  fmt_gensym:
 29713 00001B6C 47256C6400                      db `G%ld\0`
 29714                                  fmt_closure:
 29715 00001B71 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 29715 00001B7A 206174203078253038-
 29715 00001B83 5820656E763D307825-
 29715 00001B8C 30385820636F64653D-
 29715 00001B95 3078253038583E00   
 29716                                  fmt_lparen:
 29717 00001B9D 2800                    	db `(\0`
 29718                                  fmt_dotted_pair:
 29719 00001B9F 202E2000                	db ` . \0`
 29720                                  fmt_rparen:
 29721 00001BA3 2900                    	db `)\0`
 29722                                  fmt_space:
 29723 00001BA5 2000                    	db ` \0`
 29724                                  fmt_empty_vector:
 29725 00001BA7 23282900                	db `#()\0`
 29726                                  fmt_vector:
 29727 00001BAB 232800                  	db `#(\0`
 29728                                  fmt_real:
 29729 00001BAE 256600                  	db `%f\0`
 29730                                  fmt_fraction:
 29731 00001BB1 256C642F256C6400        	db `%ld/%ld\0`
 29732                                  fmt_zero:
 29733 00001BB9 3000                    	db `0\0`
 29734                                  fmt_int:
 29735 00001BBB 256C6400                	db `%ld\0`
 29736                                  fmt_unknown_scheme_object_error:
 29737 00001BBF 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
 29737 00001BC8 6F723A20556E6B6E6F-
 29737 00001BD1 776E20536368656D65-
 29737 00001BDA 2D6F626A6563742028-
 29737 00001BE3 525454492030782530-
 29737 00001BEC 32582920           
 29738 00001BF0 617420616464726573-     	db `at address 0x%08X\n\n\0`
 29738 00001BF9 73203078253038580A-
 29738 00001C02 0A00               
 29739                                  fmt_dquote:
 29740 00001C04 2200                    	db `\"\0`
 29741                                  fmt_string_char:
 29742 00001C06 256300                          db `%c\0`
 29743                                  fmt_string_char_7:
 29744 00001C09 5C6100                          db `\\a\0`
 29745                                  fmt_string_char_8:
 29746 00001C0C 5C6200                          db `\\b\0`
 29747                                  fmt_string_char_9:
 29748 00001C0F 5C7400                          db `\\t\0`
 29749                                  fmt_string_char_10:
 29750 00001C12 5C6E00                          db `\\n\0`
 29751                                  fmt_string_char_11:
 29752 00001C15 5C7600                          db `\\v\0`
 29753                                  fmt_string_char_12:
 29754 00001C18 5C6600                          db `\\f\0`
 29755                                  fmt_string_char_13:
 29756 00001C1B 5C7200                          db `\\r\0`
 29757                                  fmt_string_char_34:
 29758 00001C1E 5C2200                          db `\\"\0`
 29759                                  fmt_string_char_92:
 29760 00001C21 5C5C00                          db `\\\\\0`
 29761                                  fmt_string_char_hex:
 29762 00001C24 5C7825583B00                    db `\\x%X;\0`
 29763                                  
 29764                                  section .text
 29765                                  
 29766                                  print_sexpr:
 29767 000159C7 C8000000                	enter 0, 0
 29768 000159CB 8A07                    	mov al, byte [rdi]
 29769 000159CD 3C00                    	cmp al, T_void
 29770 000159CF 7465                    	je .Lvoid
 29771 000159D1 3C01                    	cmp al, T_nil
 29772 000159D3 7470                    	je .Lnil
 29773 000159D5 3C09                    	cmp al, T_boolean_false
 29774 000159D7 747B                    	je .Lboolean_false
 29775 000159D9 3C0A                    	cmp al, T_boolean_true
 29776 000159DB 0F8482000000            	je .Lboolean_true
 29777 000159E1 3C02                    	cmp al, T_char
 29778 000159E3 0F8489000000            	je .Lchar
 29779 000159E9 3C41                    	cmp al, T_interned_symbol
 29780 000159EB 0F84CB010000            	je .Linterned_symbol
 29781 000159F1 3C42                            cmp al, T_uninterned_symbol
 29782 000159F3 0F84E6010000                    je .Luninterned_symbol
 29783 000159F9 3C21                    	cmp al, T_pair
 29784 000159FB 0F84F1010000            	je .Lpair
 29785 00015A01 3C22                    	cmp al, T_vector
 29786 00015A03 0F84BA020000            	je .Lvector
 29787 00015A09 3C04                    	cmp al, T_closure
 29788 00015A0B 0F8491010000            	je .Lclosure
 29789 00015A11 3C13                    	cmp al, T_real
 29790 00015A13 0F844B030000            	je .Lreal
 29791 00015A19 3C12                    	cmp al, T_fraction
 29792 00015A1B 0F8471030000            	je .Lfraction
 29793 00015A21 3C11                    	cmp al, T_integer
 29794 00015A23 0F84AA030000            	je .Linteger
 29795 00015A29 3C03                    	cmp al, T_string
 29796 00015A2B 0F84B5030000            	je .Lstring
 29797                                  
 29798 00015A31 E9ED040000              	jmp .Lunknown_sexpr_type
 29799                                  
 29800                                  .Lvoid:
 29801 00015A36 48BF-                   	mov rdi, fmt_void
 29801 00015A38 [FF1A000000000000] 
 29802 00015A40 E911050000              	jmp .Lemit
 29803                                  
 29804                                  .Lnil:
 29805 00015A45 48BF-                   	mov rdi, fmt_nil
 29805 00015A47 [071B000000000000] 
 29806 00015A4F E902050000              	jmp .Lemit
 29807                                  
 29808                                  .Lboolean_false:
 29809 00015A54 48BF-                   	mov rdi, fmt_boolean_false
 29809 00015A56 [0A1B000000000000] 
 29810 00015A5E E9F3040000              	jmp .Lemit
 29811                                  
 29812                                  .Lboolean_true:
 29813 00015A63 48BF-                   	mov rdi, fmt_boolean_true
 29813 00015A65 [0D1B000000000000] 
 29814 00015A6D E9E4040000              	jmp .Lemit
 29815                                  
 29816                                  .Lchar:
 29817 00015A72 8A4701                  	mov al, byte [rdi + 1]
 29818 00015A75 3C20                    	cmp al, ' '
 29819 00015A77 7E28                    	jle .Lchar_whitespace
 29820 00015A79 3C5C                    	cmp al, 92 		; backslash
 29821 00015A7B 0F847C000000            	je .Lchar_backslash
 29822 00015A81 3C22                    	cmp al, '"'
 29823 00015A83 0F8483000000            	je .Lchar_dquote
 29824 00015A89 4825FF000000            	and rax, 255
 29825 00015A8F 48BF-                   	mov rdi, fmt_char_simple
 29825 00015A91 [181B000000000000] 
 29826 00015A99 4889C6                  	mov rsi, rax
 29827 00015A9C E9B5040000              	jmp .Lemit
 29828                                  
 29829                                  .Lchar_whitespace:
 29830 00015AA1 3C00                    	cmp al, 0
 29831 00015AA3 7476                    	je .Lchar_null
 29832 00015AA5 3C07                    	cmp al, 7
 29833 00015AA7 0F847D000000            	je .Lchar_bell
 29834 00015AAD 3C08                    	cmp al, 8
 29835 00015AAF 0F8484000000            	je .Lchar_backspace
 29836 00015AB5 3C09                    	cmp al, 9
 29837 00015AB7 0F848B000000            	je .Lchar_tab
 29838 00015ABD 3C0A                    	cmp al, 10
 29839 00015ABF 0F8492000000            	je .Lchar_newline
 29840 00015AC5 3C0C                    	cmp al, 12
 29841 00015AC7 0F8499000000            	je .Lchar_formfeed
 29842 00015ACD 3C0D                    	cmp al, 13
 29843 00015ACF 0F84A0000000            	je .Lchar_return
 29844 00015AD5 3C1B                    	cmp al, 27
 29845 00015AD7 0F84A7000000            	je .Lchar_escape
 29846 00015ADD 4825FF000000            	and rax, 255
 29847 00015AE3 3C20                    	cmp al, ' '
 29848 00015AE5 0F84A8000000            	je .Lchar_space
 29849 00015AEB 48BF-                   	mov rdi, fmt_char_hex
 29849 00015AED [641B000000000000] 
 29850 00015AF5 4889C6                  	mov rsi, rax
 29851 00015AF8 E959040000              	jmp .Lemit	
 29852                                  
 29853                                  .Lchar_backslash:
 29854 00015AFD 48BF-                   	mov rdi, fmt_char_backslash
 29854 00015AFF [101B000000000000] 
 29855 00015B07 E94A040000              	jmp .Lemit
 29856                                  
 29857                                  .Lchar_dquote:
 29858 00015B0C 48BF-                   	mov rdi, fmt_char_dquote
 29858 00015B0E [141B000000000000] 
 29859 00015B16 E93B040000              	jmp .Lemit
 29860                                  
 29861                                  .Lchar_null:
 29862 00015B1B 48BF-                   	mov rdi, fmt_char_null
 29862 00015B1D [1D1B000000000000] 
 29863 00015B25 E92C040000              	jmp .Lemit
 29864                                  
 29865                                  .Lchar_bell:
 29866 00015B2A 48BF-                   	mov rdi, fmt_char_bell
 29866 00015B2C [231B000000000000] 
 29867 00015B34 E91D040000              	jmp .Lemit
 29868                                  
 29869                                  .Lchar_backspace:
 29870 00015B39 48BF-                   	mov rdi, fmt_char_backspace
 29870 00015B3B [2A1B000000000000] 
 29871 00015B43 E90E040000              	jmp .Lemit
 29872                                  
 29873                                  .Lchar_tab:
 29874 00015B48 48BF-                   	mov rdi, fmt_char_tab
 29874 00015B4A [361B000000000000] 
 29875 00015B52 E9FF030000              	jmp .Lemit
 29876                                  
 29877                                  .Lchar_newline:
 29878 00015B57 48BF-                   	mov rdi, fmt_char_newline
 29878 00015B59 [3C1B000000000000] 
 29879 00015B61 E9F0030000              	jmp .Lemit
 29880                                  
 29881                                  .Lchar_formfeed:
 29882 00015B66 48BF-                   	mov rdi, fmt_char_formfeed
 29882 00015B68 [461B000000000000] 
 29883 00015B70 E9E1030000              	jmp .Lemit
 29884                                  
 29885                                  .Lchar_return:
 29886 00015B75 48BF-                   	mov rdi, fmt_char_return
 29886 00015B77 [4D1B000000000000] 
 29887 00015B7F E9D2030000              	jmp .Lemit
 29888                                  
 29889                                  .Lchar_escape:
 29890 00015B84 48BF-                   	mov rdi, fmt_char_escape
 29890 00015B86 [561B000000000000] 
 29891 00015B8E E9C3030000              	jmp .Lemit
 29892                                  
 29893                                  .Lchar_space:
 29894 00015B93 48BF-                   	mov rdi, fmt_char_space
 29894 00015B95 [5C1B000000000000] 
 29895 00015B9D E9B4030000              	jmp .Lemit
 29896                                  
 29897                                  .Lclosure:
 29898 00015BA2 4889FE                  	mov rsi, qword rdi
 29899 00015BA5 48BF-                   	mov rdi, fmt_closure
 29899 00015BA7 [711B000000000000] 
 29900 00015BAF 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 29901 00015BB3 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 29902 00015BB7 E99A030000              	jmp .Lemit
 29903                                  
 29904                                  .Linterned_symbol:
 29905 00015BBC 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 29906 00015BC0 BE01000000              	mov rsi, 1		 ; size = 1 byte
 29907 00015BC5 488B5701                	mov rdx, qword [rdi + 1] ; length
 29908 00015BC9 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 29909 00015BCD 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 29910 00015BD5 E8(00000000)            	call fwrite
 29911 00015BDA E98C030000              	jmp .Lend
 29912                                  
 29913                                  .Luninterned_symbol:
 29914 00015BDF 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
 29915 00015BE3 48BF-                           mov rdi, fmt_gensym
 29915 00015BE5 [6C1B000000000000] 
 29916 00015BED E964030000                      jmp .Lemit
 29917                                  	
 29918                                  .Lpair:
 29919 00015BF2 57                      	push rdi
 29920 00015BF3 48BF-                   	mov rdi, fmt_lparen
 29920 00015BF5 [9D1B000000000000] 
 29921 00015BFD B800000000              	mov rax, 0
 29922                                          ENTER
    44 00015C02 C8000000            <1>  enter 0, 0
    45 00015C06 4883E4F0            <1>  and rsp, ~15
 29923 00015C0A E8(00000000)            	call printf
 29924                                          LEAVE
    49 00015C0F C9                  <1>  leave
 29925 00015C10 488B3C24                	mov rdi, qword [rsp] 	; pair
 29926 00015C14 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 29927 00015C18 E8AAFDFFFF              	call print_sexpr
 29928 00015C1D 5F                      	pop rdi 		; pair
 29929 00015C1E 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 29930                                  .Lcdr:
 29931 00015C22 8A07                    	mov al, byte [rdi]
 29932 00015C24 3C01                    	cmp al, T_nil
 29933 00015C26 7447                    	je .Lcdr_nil
 29934 00015C28 3C21                    	cmp al, T_pair
 29935 00015C2A 7462                    	je .Lcdr_pair
 29936 00015C2C 57                      	push rdi
 29937 00015C2D 48BF-                   	mov rdi, fmt_dotted_pair
 29937 00015C2F [9F1B000000000000] 
 29938 00015C37 B800000000              	mov rax, 0
 29939                                          ENTER
    44 00015C3C C8000000            <1>  enter 0, 0
    45 00015C40 4883E4F0            <1>  and rsp, ~15
 29940 00015C44 E8(00000000)            	call printf
 29941                                          LEAVE
    49 00015C49 C9                  <1>  leave
 29942 00015C4A 5F                      	pop rdi
 29943 00015C4B E877FDFFFF              	call print_sexpr
 29944 00015C50 48BF-                   	mov rdi, fmt_rparen
 29944 00015C52 [A31B000000000000] 
 29945 00015C5A B800000000              	mov rax, 0
 29946                                          ENTER
    44 00015C5F C8000000            <1>  enter 0, 0
    45 00015C63 4883E4F0            <1>  and rsp, ~15
 29947 00015C67 E8(00000000)            	call printf
 29948                                          LEAVE
    49 00015C6C C9                  <1>  leave
 29949 00015C6D C9                      	leave
 29950 00015C6E C3                      	ret
 29951                                  
 29952                                  .Lcdr_nil:
 29953 00015C6F 48BF-                   	mov rdi, fmt_rparen
 29953 00015C71 [A31B000000000000] 
 29954 00015C79 B800000000              	mov rax, 0
 29955                                          ENTER
    44 00015C7E C8000000            <1>  enter 0, 0
    45 00015C82 4883E4F0            <1>  and rsp, ~15
 29956 00015C86 E8(00000000)            	call printf
 29957                                          LEAVE
    49 00015C8B C9                  <1>  leave
 29958 00015C8C C9                      	leave
 29959 00015C8D C3                      	ret
 29960                                  
 29961                                  .Lcdr_pair:
 29962 00015C8E 57                      	push rdi
 29963 00015C8F 48BF-                   	mov rdi, fmt_space
 29963 00015C91 [A51B000000000000] 
 29964 00015C99 B800000000              	mov rax, 0
 29965                                          ENTER
    44 00015C9E C8000000            <1>  enter 0, 0
    45 00015CA2 4883E4F0            <1>  and rsp, ~15
 29966 00015CA6 E8(00000000)            	call printf
 29967                                          LEAVE
    49 00015CAB C9                  <1>  leave
 29968 00015CAC 488B3C24                	mov rdi, qword [rsp]
 29969 00015CB0 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 29970 00015CB4 E80EFDFFFF              	call print_sexpr
 29971 00015CB9 5F                      	pop rdi
 29972 00015CBA 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 29973 00015CBE E95FFFFFFF              	jmp .Lcdr
 29974                                  
 29975                                  .Lvector:
 29976 00015CC3 488B4701                	mov rax, qword [rdi + 1] ; length
 29977 00015CC7 4883F800                	cmp rax, 0
 29978 00015CCB 0F8484000000            	je .Lvector_empty
 29979 00015CD1 57                      	push rdi
 29980 00015CD2 48BF-                   	mov rdi, fmt_vector
 29980 00015CD4 [AB1B000000000000] 
 29981 00015CDC B800000000              	mov rax, 0
 29982                                          ENTER
    44 00015CE1 C8000000            <1>  enter 0, 0
    45 00015CE5 4883E4F0            <1>  and rsp, ~15
 29983 00015CE9 E8(00000000)            	call printf
 29984                                          LEAVE
    49 00015CEE C9                  <1>  leave
 29985 00015CEF 488B3C24                	mov rdi, qword [rsp]
 29986 00015CF3 FF7701                  	push qword [rdi + 1]
 29987 00015CF6 6A01                    	push 1
 29988 00015CF8 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 29989 00015CFC E8C6FCFFFF              	call print_sexpr
 29990                                  .Lvector_loop:
 29991                                  	; [rsp] index
 29992                                  	; [rsp + 8*1] limit
 29993                                  	; [rsp + 8*2] vector
 29994 00015D01 488B0424                	mov rax, qword [rsp]
 29995 00015D05 483B442408              	cmp rax, qword [rsp + 8*1]
 29996 00015D0A 7436                    	je .Lvector_end
 29997 00015D0C 48BF-                   	mov rdi, fmt_space
 29997 00015D0E [A51B000000000000] 
 29998 00015D16 B800000000              	mov rax, 0
 29999                                          ENTER
    44 00015D1B C8000000            <1>  enter 0, 0
    45 00015D1F 4883E4F0            <1>  and rsp, ~15
 30000 00015D23 E8(00000000)            	call printf
 30001                                          LEAVE
    49 00015D28 C9                  <1>  leave
 30002 00015D29 488B0424                	mov rax, qword [rsp]
 30003 00015D2D 488B5C2410              	mov rbx, qword [rsp + 8*2]
 30004 00015D32 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 30005 00015D37 E88BFCFFFF              	call print_sexpr
 30006 00015D3C 48FF0424                	inc qword [rsp]
 30007 00015D40 EBBF                    	jmp .Lvector_loop
 30008                                  
 30009                                  .Lvector_end:
 30010 00015D42 4883C418                	add rsp, 8*3
 30011 00015D46 48BF-                   	mov rdi, fmt_rparen
 30011 00015D48 [A31B000000000000] 
 30012 00015D50 E901020000              	jmp .Lemit	
 30013                                  
 30014                                  .Lvector_empty:
 30015 00015D55 48BF-                   	mov rdi, fmt_empty_vector
 30015 00015D57 [A71B000000000000] 
 30016 00015D5F E9F2010000              	jmp .Lemit
 30017                                  
 30018                                  .Lreal:
 30019 00015D64 FF7701                  	push qword [rdi + 1]
 30020 00015D67 F20F100424              	movsd xmm0, qword [rsp]
 30021 00015D6C 4883C408                	add rsp, 8*1
 30022 00015D70 48BF-                   	mov rdi, fmt_real
 30022 00015D72 [AE1B000000000000] 
 30023 00015D7A B801000000              	mov rax, 1
 30024                                  	ENTER
    44 00015D7F C8000000            <1>  enter 0, 0
    45 00015D83 4883E4F0            <1>  and rsp, ~15
 30025 00015D87 E8(00000000)            	call printf
 30026                                  	LEAVE
    49 00015D8C C9                  <1>  leave
 30027 00015D8D E9D9010000              	jmp .Lend
 30028                                  
 30029                                  .Lfraction:
 30030 00015D92 488B7701                	mov rsi, qword [rdi + 1]
 30031 00015D96 488B5709                	mov rdx, qword [rdi + 1 + 8]
 30032 00015D9A 4883FE00                	cmp rsi, 0
 30033 00015D9E 7415                    	je .Lrat_zero
 30034 00015DA0 4883FA01                	cmp rdx, 1
 30035 00015DA4 741E                    	je .Lrat_int
 30036 00015DA6 48BF-                   	mov rdi, fmt_fraction
 30036 00015DA8 [B11B000000000000] 
 30037 00015DB0 E9A1010000              	jmp .Lemit
 30038                                  
 30039                                  .Lrat_zero:
 30040 00015DB5 48BF-                   	mov rdi, fmt_zero
 30040 00015DB7 [B91B000000000000] 
 30041 00015DBF E992010000              	jmp .Lemit
 30042                                  
 30043                                  .Lrat_int:
 30044 00015DC4 48BF-                   	mov rdi, fmt_int
 30044 00015DC6 [BB1B000000000000] 
 30045 00015DCE E983010000              	jmp .Lemit
 30046                                  
 30047                                  .Linteger:
 30048 00015DD3 488B7701                	mov rsi, qword [rdi + 1]
 30049 00015DD7 48BF-                   	mov rdi, fmt_int
 30049 00015DD9 [BB1B000000000000] 
 30050 00015DE1 E970010000              	jmp .Lemit
 30051                                  
 30052                                  .Lstring:
 30053 00015DE6 488D4709                	lea rax, [rdi + 1 + 8]
 30054 00015DEA 50                      	push rax
 30055 00015DEB FF7701                  	push qword [rdi + 1]
 30056 00015DEE 48BF-                   	mov rdi, fmt_dquote
 30056 00015DF0 [041C000000000000] 
 30057 00015DF8 B800000000              	mov rax, 0
 30058                                  	ENTER
    44 00015DFD C8000000            <1>  enter 0, 0
    45 00015E01 4883E4F0            <1>  and rsp, ~15
 30059 00015E05 E8(00000000)            	call printf
 30060                                  	LEAVE
    49 00015E0A C9                  <1>  leave
 30061                                  .Lstring_loop:
 30062                                  	; qword [rsp]: limit
 30063                                  	; qword [rsp + 8*1]: char *
 30064 00015E0B 48833C2400              	cmp qword [rsp], 0
 30065 00015E10 0F84FD000000            	je .Lstring_end
 30066 00015E16 488B442408              	mov rax, qword [rsp + 8*1]
 30067 00015E1B 8A00                    	mov al, byte [rax]
 30068 00015E1D 4825FF000000            	and rax, 255
 30069 00015E23 3C07                    	cmp al, 7
 30070 00015E25 7468                            je .Lstring_char_7
 30071 00015E27 3C08                            cmp al, 8
 30072 00015E29 7470                            je .Lstring_char_8
 30073 00015E2B 3C09                            cmp al, 9
 30074 00015E2D 7478                            je .Lstring_char_9
 30075 00015E2F 3C0A                            cmp al, 10
 30076 00015E31 0F847C000000                    je .Lstring_char_10
 30077 00015E37 3C0B                            cmp al, 11
 30078 00015E39 0F8480000000                    je .Lstring_char_11
 30079 00015E3F 3C0C                            cmp al, 12
 30080 00015E41 0F8484000000                    je .Lstring_char_12
 30081 00015E47 3C0D                            cmp al, 13
 30082 00015E49 0F8488000000                    je .Lstring_char_13
 30083 00015E4F 3C22                            cmp al, 34
 30084 00015E51 0F848C000000                    je .Lstring_char_34
 30085 00015E57 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 30087 00015E59 3C20                            cmp al, ' '
 30088 00015E5B 0F8CA0000000                    jl .Lstring_char_hex
 30089 00015E61 48BF-                           mov rdi, fmt_string_char
 30089 00015E63 [061C000000000000] 
 30090 00015E6B 4889C6                          mov rsi, rax
 30091                                  .Lstring_char_emit:
 30092 00015E6E B800000000                      mov rax, 0
 30093                                          ENTER
    44 00015E73 C8000000            <1>  enter 0, 0
    45 00015E77 4883E4F0            <1>  and rsp, ~15
 30094 00015E7B E8(00000000)                    call printf
 30095                                          LEAVE
    49 00015E80 C9                  <1>  leave
 30096 00015E81 48FF0C24                        dec qword [rsp]
 30097 00015E85 48FF442408                      inc qword [rsp + 8*1]
 30098 00015E8A E97CFFFFFF                      jmp .Lstring_loop
 30099                                  
 30100                                  .Lstring_char_7:
 30101 00015E8F 48BF-                           mov rdi, fmt_string_char_7
 30101 00015E91 [091C000000000000] 
 30102 00015E99 EBD3                            jmp .Lstring_char_emit
 30103                                  
 30104                                  .Lstring_char_8:
 30105 00015E9B 48BF-                           mov rdi, fmt_string_char_8
 30105 00015E9D [0C1C000000000000] 
 30106 00015EA5 EBC7                            jmp .Lstring_char_emit
 30107                                          
 30108                                  .Lstring_char_9:
 30109 00015EA7 48BF-                           mov rdi, fmt_string_char_9
 30109 00015EA9 [0F1C000000000000] 
 30110 00015EB1 EBBB                            jmp .Lstring_char_emit
 30111                                  
 30112                                  .Lstring_char_10:
 30113 00015EB3 48BF-                           mov rdi, fmt_string_char_10
 30113 00015EB5 [121C000000000000] 
 30114 00015EBD EBAF                            jmp .Lstring_char_emit
 30115                                  
 30116                                  .Lstring_char_11:
 30117 00015EBF 48BF-                           mov rdi, fmt_string_char_11
 30117 00015EC1 [151C000000000000] 
 30118 00015EC9 EBA3                            jmp .Lstring_char_emit
 30119                                  
 30120                                  .Lstring_char_12:
 30121 00015ECB 48BF-                           mov rdi, fmt_string_char_12
 30121 00015ECD [181C000000000000] 
 30122 00015ED5 EB97                            jmp .Lstring_char_emit
 30123                                  
 30124                                  .Lstring_char_13:
 30125 00015ED7 48BF-                           mov rdi, fmt_string_char_13
 30125 00015ED9 [1B1C000000000000] 
 30126 00015EE1 EB8B                            jmp .Lstring_char_emit
 30127                                  
 30128                                  .Lstring_char_34:
 30129 00015EE3 48BF-                           mov rdi, fmt_string_char_34
 30129 00015EE5 [1E1C000000000000] 
 30130 00015EED E97CFFFFFF                      jmp .Lstring_char_emit
 30131                                  
 30132                                  .Lstring_char_92:
 30133 00015EF2 48BF-                           mov rdi, fmt_string_char_92
 30133 00015EF4 [211C000000000000] 
 30134 00015EFC E96DFFFFFF                      jmp .Lstring_char_emit
 30135                                  
 30136                                  .Lstring_char_hex:
 30137 00015F01 48BF-                           mov rdi, fmt_string_char_hex
 30137 00015F03 [241C000000000000] 
 30138 00015F0B 4889C6                          mov rsi, rax
 30139 00015F0E E95BFFFFFF                      jmp .Lstring_char_emit        
 30140                                  
 30141                                  .Lstring_end:
 30142 00015F13 4883C410                	add rsp, 8 * 2
 30143 00015F17 48BF-                   	mov rdi, fmt_dquote
 30143 00015F19 [041C000000000000] 
 30144 00015F21 EB33                    	jmp .Lemit
 30145                                  
 30146                                  .Lunknown_sexpr_type:
 30147 00015F23 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
 30147 00015F25 [BF1B000000000000] 
 30148 00015F2D 4825FF000000            	and rax, 255
 30149 00015F33 4889C2                  	mov rdx, rax
 30150 00015F36 4889F9                  	mov rcx, rdi
 30151 00015F39 488B3C25[00000000]      	mov rdi, qword [stderr]
 30152 00015F41 B800000000              	mov rax, 0
 30153                                          ENTER
    44 00015F46 C8000000            <1>  enter 0, 0
    45 00015F4A 4883E4F0            <1>  and rsp, ~15
 30154 00015F4E E8(00000000)            	call fprintf
 30155                                          LEAVE
    49 00015F53 C9                  <1>  leave
 30156 00015F54 C9                              leave
 30157 00015F55 C3                              ret
 30158                                  
 30159                                  .Lemit:
 30160 00015F56 B800000000              	mov rax, 0
 30161                                          ENTER
    44 00015F5B C8000000            <1>  enter 0, 0
    45 00015F5F 4883E4F0            <1>  and rsp, ~15
 30162 00015F63 E8(00000000)            	call printf
 30163                                          LEAVE
    49 00015F68 C9                  <1>  leave
 30164 00015F69 EB00                    	jmp .Lend
 30165                                  
 30166                                  .Lend:
 30167                                  	LEAVE
    49 00015F6B C9                  <1>  leave
 30168 00015F6C C3                      	ret
 30169                                  
 30170                                  ;;; rdi: address of free variable
 30171                                  ;;; rsi: address of code-pointer
 30172                                  bind_primitive:
 30173 00015F6D C8000000                        enter 0, 0
 30174 00015F71 57                              push rdi
 30175 00015F72 BF11000000                      mov rdi, (1 + 8 + 8)
 30176 00015F77 E80DF9FFFF                      call malloc
 30177 00015F7C 5F                              pop rdi
 30178 00015F7D C60004                          mov byte [rax], T_closure
 30179 00015F80 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 30180 00015F88 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 30181 00015F8C 488907                          mov qword [rdi], rax
 30182 00015F8F 48B8-                           mov rax, sob_void
 30182 00015F91 [0000000000000000] 
 30183 00015F99 C9                              leave
 30184 00015F9A C3                              ret
 30185                                  
 30186                                  L_code_ptr_ash:
 30187 00015F9B C8000000                        enter 0, 0
 30188 00015F9F 48837D1802                      cmp COUNT, 2
 30189 00015FA4 0F85EC130000                    jne L_error_arg_count_2
 30190 00015FAA 488B7D20                        mov rdi, PARAM(0)
 30191                                          assert_integer(rdi)
    53 00015FAE 803F11              <1>  cmp byte [%1], %2
    54 00015FB1 0F857E140000        <1>  jne L_error_incorrect_type
 30192 00015FB7 488B4D28                        mov rcx, PARAM(1)
 30193                                          assert_integer(rcx)
    53 00015FBB 803911              <1>  cmp byte [%1], %2
    54 00015FBE 0F8571140000        <1>  jne L_error_incorrect_type
 30194 00015FC4 488B7F01                        mov rdi, qword [rdi + 1]
 30195 00015FC8 488B4901                        mov rcx, qword [rcx + 1]
 30196 00015FCC 4883F900                        cmp rcx, 0
 30197 00015FD0 7C0F                            jl .L_negative
 30198                                  .L_loop_positive:
 30199 00015FD2 4883F900                        cmp rcx, 0
 30200 00015FD6 741B                            je .L_exit
 30201 00015FD8 48D3E7                          sal rdi, cl
 30202 00015FDB 48C1E908                        shr rcx, 8
 30203 00015FDF EBF1                            jmp .L_loop_positive
 30204                                  .L_negative:
 30205 00015FE1 48F7D9                          neg rcx
 30206                                  .L_loop_negative:
 30207 00015FE4 4883F900                        cmp rcx, 0
 30208 00015FE8 7409                            je .L_exit
 30209 00015FEA 48D3FF                          sar rdi, cl
 30210 00015FED 48C1E908                        shr rcx, 8
 30211 00015FF1 EBF1                            jmp .L_loop_negative
 30212                                  .L_exit:
 30213 00015FF3 E8E9120000                      call make_integer
 30214 00015FF8 C9                              leave
 30215 00015FF9 C22000                          ret AND_KILL_FRAME(2)
 30216                                  
 30217                                  L_code_ptr_logand:
 30218 00015FFC C8000000                        enter 0, 0
 30219 00016000 48837D1802                      cmp COUNT, 2
 30220 00016005 0F858B130000                    jne L_error_arg_count_2
 30221 0001600B 4C8B4520                        mov r8, PARAM(0)
 30222                                          assert_integer(r8)
    53 0001600F 41803811            <1>  cmp byte [%1], %2
    54 00016013 0F851C140000        <1>  jne L_error_incorrect_type
 30223 00016019 4C8B4D28                        mov r9, PARAM(1)
 30224                                          assert_integer(r9)
    53 0001601D 41803911            <1>  cmp byte [%1], %2
    54 00016021 0F850E140000        <1>  jne L_error_incorrect_type
 30225 00016027 498B7801                        mov rdi, qword [r8 + 1]
 30226 0001602B 49237901                        and rdi, qword [r9 + 1]
 30227 0001602F E8AD120000                      call make_integer
 30228 00016034 C9                              leave
 30229 00016035 C22000                          ret AND_KILL_FRAME(2)
 30230                                  
 30231                                  L_code_ptr_logor:
 30232 00016038 C8000000                        enter 0, 0
 30233 0001603C 48837D1802                      cmp COUNT, 2
 30234 00016041 0F854F130000                    jne L_error_arg_count_2
 30235 00016047 4C8B4520                        mov r8, PARAM(0)
 30236                                          assert_integer(r8)
    53 0001604B 41803811            <1>  cmp byte [%1], %2
    54 0001604F 0F85E0130000        <1>  jne L_error_incorrect_type
 30237 00016055 4C8B4D28                        mov r9, PARAM(1)
 30238                                          assert_integer(r9)
    53 00016059 41803911            <1>  cmp byte [%1], %2
    54 0001605D 0F85D2130000        <1>  jne L_error_incorrect_type
 30239 00016063 498B7801                        mov rdi, qword [r8 + 1]
 30240 00016067 490B7901                        or rdi, qword [r9 + 1]
 30241 0001606B E871120000                      call make_integer
 30242 00016070 C9                              leave
 30243 00016071 C22000                          ret AND_KILL_FRAME(2)
 30244                                  
 30245                                  L_code_ptr_logxor:
 30246 00016074 C8000000                        enter 0, 0
 30247 00016078 48837D1802                      cmp COUNT, 2
 30248 0001607D 0F8513130000                    jne L_error_arg_count_2
 30249 00016083 4C8B4520                        mov r8, PARAM(0)
 30250                                          assert_integer(r8)
    53 00016087 41803811            <1>  cmp byte [%1], %2
    54 0001608B 0F85A4130000        <1>  jne L_error_incorrect_type
 30251 00016091 4C8B4D28                        mov r9, PARAM(1)
 30252                                          assert_integer(r9)
    53 00016095 41803911            <1>  cmp byte [%1], %2
    54 00016099 0F8596130000        <1>  jne L_error_incorrect_type
 30253 0001609F 498B7801                        mov rdi, qword [r8 + 1]
 30254 000160A3 49337901                        xor rdi, qword [r9 + 1]
 30255 000160A7 E835120000                      call make_integer
 30256                                          LEAVE
    49 000160AC C9                  <1>  leave
 30257 000160AD C22000                          ret AND_KILL_FRAME(2)
 30258                                  
 30259                                  L_code_ptr_lognot:
 30260 000160B0 C8000000                        enter 0, 0
 30261 000160B4 48837D1801                      cmp COUNT, 1
 30262 000160B9 0F85A2120000                    jne L_error_arg_count_1
 30263 000160BF 4C8B4520                        mov r8, PARAM(0)
 30264                                          assert_integer(r8)
    53 000160C3 41803811            <1>  cmp byte [%1], %2
    54 000160C7 0F8568130000        <1>  jne L_error_incorrect_type
 30265 000160CD 498B7801                        mov rdi, qword [r8 + 1]
 30266 000160D1 48F7D7                          not rdi
 30267 000160D4 E808120000                      call make_integer
 30268 000160D9 C9                              leave
 30269 000160DA C21800                          ret AND_KILL_FRAME(1)
 30270                                  
 30271                                  L_code_ptr_bin_apply:
 30272 000160DD 48837C241002                    cmp qword [rsp + 8 * 2], 2
 30273 000160E3 0F85AD120000                    jne L_error_arg_count_2
 30274 000160E9 4C8B642418                      mov r12, qword [rsp + 8 * 3]
 30275                                          assert_closure(r12)
    53 000160EE 41803C2404          <1>  cmp byte [%1], %2
    54 000160F3 0F853C130000        <1>  jne L_error_incorrect_type
 30276 000160F9 4C8D542420                      lea r10, [rsp + 8 * 4]
 30277 000160FE 4D8B1A                          mov r11, qword [r10]
 30278 00016101 4C8B0C24                        mov r9, qword [rsp]
 30279 00016105 B900000000                      mov rcx, 0
 30280 0001610A 4C89DE                          mov rsi, r11
 30281                                  .L0:
 30282 0001610D 4881FE[01000000]                cmp rsi, sob_nil
 30283 00016114 7412                            je .L0_out
 30284                                          assert_pair(rsi)
    53 00016116 803E21              <1>  cmp byte [%1], %2
    54 00016119 0F8516130000        <1>  jne L_error_incorrect_type
 30285 0001611F 48FFC1                          inc rcx
 30286 00016122 488B7609                        mov rsi, SOB_PAIR_CDR(rsi)
 30287 00016126 EBE5                            jmp .L0
 30288                                  .L0_out:
 30289 00016128 488D1CCDF0FFFFFF                lea rbx, [8 * (rcx - 2)]
 30290 00016130 4829DC                          sub rsp, rbx
 30291 00016133 4889E7                          mov rdi, rsp
 30292 00016136 FC                              cld
 30293                                          ; place ret addr
 30294 00016137 4C89C8                          mov rax, r9
 30295 0001613A 48AB                            stosq
 30296                                          ; place env_f
 30297 0001613C 498B442401                      mov rax, SOB_CLOSURE_ENV(r12)
 30298 00016141 48AB                            stosq
 30299                                          ; place COUNT = rcx
 30300 00016143 4889C8                          mov rax, rcx
 30301 00016146 48AB                            stosq
 30302                                  .L1:
 30303 00016148 4883F900                        cmp rcx, 0
 30304 0001614C 740F                            je .L1_out
 30305 0001614E 498B4301                        mov rax, SOB_PAIR_CAR(r11)
 30306 00016152 48AB                            stosq
 30307 00016154 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11)
 30308 00016158 48FFC9                          dec rcx
 30309 0001615B EBEB                            jmp .L1
 30310                                  .L1_out:
 30311 0001615D 4883EF08                        sub rdi, 8*1
 30312 00016161 4939FA                          cmp r10, rdi
 30313 00016164 7505                            jne .L_error_apply_stack_corrupted
 30314 00016166 41FF642409                      jmp SOB_CLOSURE_CODE(r12)
 30315                                  .L_error_apply_stack_corrupted:
 30316 0001616B CC                              int3
 30317                                  
 30318                                  L_code_ptr_is_null:
 30319 0001616C C8000000                        enter 0, 0
 30320 00016170 48837D1801                      cmp COUNT, 1
 30321 00016175 0F85E6110000                    jne L_error_arg_count_1
 30322 0001617B 488B4520                        mov rax, PARAM(0)
 30323 0001617F 803801                          cmp byte [rax], T_nil
 30324 00016182 750C                            jne .L_false
 30325 00016184 48B8-                           mov rax, sob_boolean_true
 30325 00016186 [0300000000000000] 
 30326 0001618E EB0A                            jmp .L_end
 30327                                  .L_false:
 30328 00016190 48B8-                           mov rax, sob_boolean_false
 30328 00016192 [0200000000000000] 
 30329                                  .L_end:
 30330 0001619A C9                              leave
 30331 0001619B C21800                          ret AND_KILL_FRAME(1)
 30332                                  
 30333                                  L_code_ptr_is_pair:
 30334 0001619E C8000000                        enter 0, 0
 30335 000161A2 48837D1801                      cmp COUNT, 1
 30336 000161A7 0F85B4110000                    jne L_error_arg_count_1
 30337 000161AD 488B4520                        mov rax, PARAM(0)
 30338 000161B1 803821                          cmp byte [rax], T_pair
 30339 000161B4 750C                            jne .L_false
 30340 000161B6 48B8-                           mov rax, sob_boolean_true
 30340 000161B8 [0300000000000000] 
 30341 000161C0 EB0A                            jmp .L_end
 30342                                  .L_false:
 30343 000161C2 48B8-                           mov rax, sob_boolean_false
 30343 000161C4 [0200000000000000] 
 30344                                  .L_end:
 30345 000161CC C9                              leave
 30346 000161CD C21800                          ret AND_KILL_FRAME(1)
 30347                                          
 30348                                  L_code_ptr_is_void:
 30349 000161D0 C8000000                        enter 0, 0
 30350 000161D4 48837D1801                      cmp COUNT, 1
 30351 000161D9 0F8582110000                    jne L_error_arg_count_1
 30352 000161DF 488B4520                        mov rax, PARAM(0)
 30353 000161E3 803800                          cmp byte [rax], T_void
 30354 000161E6 750C                            jne .L_false
 30355 000161E8 48B8-                           mov rax, sob_boolean_true
 30355 000161EA [0300000000000000] 
 30356 000161F2 EB0A                            jmp .L_end
 30357                                  .L_false:
 30358 000161F4 48B8-                           mov rax, sob_boolean_false
 30358 000161F6 [0200000000000000] 
 30359                                  .L_end:
 30360 000161FE C9                              leave
 30361 000161FF C21800                          ret AND_KILL_FRAME(1)
 30362                                  
 30363                                  L_code_ptr_is_char:
 30364 00016202 C8000000                        enter 0, 0
 30365 00016206 48837D1801                      cmp COUNT, 1
 30366 0001620B 0F8550110000                    jne L_error_arg_count_1
 30367 00016211 488B4520                        mov rax, PARAM(0)
 30368 00016215 803802                          cmp byte [rax], T_char
 30369 00016218 750C                            jne .L_false
 30370 0001621A 48B8-                           mov rax, sob_boolean_true
 30370 0001621C [0300000000000000] 
 30371 00016224 EB0A                            jmp .L_end
 30372                                  .L_false:
 30373 00016226 48B8-                           mov rax, sob_boolean_false
 30373 00016228 [0200000000000000] 
 30374                                  .L_end:
 30375 00016230 C9                              leave
 30376 00016231 C21800                          ret AND_KILL_FRAME(1)
 30377                                  
 30378                                  L_code_ptr_is_string:
 30379 00016234 C8000000                        enter 0, 0
 30380 00016238 48837D1801                      cmp COUNT, 1
 30381 0001623D 0F851E110000                    jne L_error_arg_count_1
 30382 00016243 488B4520                        mov rax, PARAM(0)
 30383 00016247 803803                          cmp byte [rax], T_string
 30384 0001624A 750C                            jne .L_false
 30385 0001624C 48B8-                           mov rax, sob_boolean_true
 30385 0001624E [0300000000000000] 
 30386 00016256 EB0A                            jmp .L_end
 30387                                  .L_false:
 30388 00016258 48B8-                           mov rax, sob_boolean_false
 30388 0001625A [0200000000000000] 
 30389                                  .L_end:
 30390 00016262 C9                              leave
 30391 00016263 C21800                          ret AND_KILL_FRAME(1)
 30392                                  
 30393                                  L_code_ptr_is_symbol:
 30394 00016266 C8000000                        enter 0, 0
 30395 0001626A 48837D1801                      cmp COUNT, 1
 30396 0001626F 0F85EC100000                    jne L_error_arg_count_1
 30397 00016275 4C8B4520                        mov r8, PARAM(0)
 30398 00016279 41802040                        and byte [r8], T_symbol
 30399 0001627D 740C                            jz .L_false
 30400 0001627F 48B8-                           mov rax, sob_boolean_true
 30400 00016281 [0300000000000000] 
 30401 00016289 EB0A                            jmp .L_exit
 30402                                  .L_false:
 30403 0001628B 48B8-                           mov rax, sob_boolean_false
 30403 0001628D [0200000000000000] 
 30404                                  .L_exit:
 30405 00016295 C9                              leave
 30406 00016296 C21800                          ret AND_KILL_FRAME(1)
 30407                                  
 30408                                  L_code_ptr_is_uninterned_symbol:
 30409 00016299 C8000000                        enter 0, 0
 30410 0001629D 48837D1801                      cmp COUNT, 1
 30411 000162A2 0F85B9100000                    jne L_error_arg_count_1
 30412 000162A8 4C8B4520                        mov r8, PARAM(0)
 30413 000162AC 41803842                        cmp byte [r8], T_uninterned_symbol
 30414 000162B0 750C                            jne .L_false
 30415 000162B2 48B8-                           mov rax, sob_boolean_true
 30415 000162B4 [0300000000000000] 
 30416 000162BC EB0A                            jmp .L_exit
 30417                                  .L_false:
 30418 000162BE 48B8-                           mov rax, sob_boolean_false
 30418 000162C0 [0200000000000000] 
 30419                                  .L_exit:
 30420 000162C8 C9                              leave
 30421 000162C9 C21800                          ret AND_KILL_FRAME(1)
 30422                                  
 30423                                  L_code_ptr_is_interned_symbol:
 30424 000162CC C8000000                        enter 0, 0
 30425 000162D0 48837D1801                      cmp COUNT, 1
 30426 000162D5 0F8586100000                    jne L_error_arg_count_1
 30427 000162DB 488B4520                        mov rax, PARAM(0)
 30428 000162DF 803841                          cmp byte [rax], T_interned_symbol
 30429 000162E2 750C                            jne .L_false
 30430 000162E4 48B8-                           mov rax, sob_boolean_true
 30430 000162E6 [0300000000000000] 
 30431 000162EE EB0A                            jmp .L_end
 30432                                  .L_false:
 30433 000162F0 48B8-                           mov rax, sob_boolean_false
 30433 000162F2 [0200000000000000] 
 30434                                  .L_end:
 30435 000162FA C9                              leave
 30436 000162FB C21800                          ret AND_KILL_FRAME(1)
 30437                                  
 30438                                  L_code_ptr_gensym:
 30439 000162FE C8000000                        enter 0, 0
 30440 00016302 48837D1800                      cmp COUNT, 0
 30441 00016307 0F851F100000                    jne L_error_arg_count_0
 30442 0001630D 48FF0425[2A1C0000]              inc qword [gensym_count]
 30443 00016315 BF09000000                      mov rdi, (1 + 8)
 30444 0001631A E86AF5FFFF                      call malloc
 30445 0001631F C60042                          mov byte [rax], T_uninterned_symbol
 30446 00016322 488B0C25[2A1C0000]              mov rcx, qword [gensym_count]
 30447 0001632A 48894801                        mov qword [rax + 1], rcx
 30448 0001632E C9                              leave
 30449 0001632F C21000                          ret AND_KILL_FRAME(0)
 30450                                  
 30451                                  L_code_ptr_is_vector:
 30452 00016332 C8000000                        enter 0, 0
 30453 00016336 48837D1801                      cmp COUNT, 1
 30454 0001633B 0F8520100000                    jne L_error_arg_count_1
 30455 00016341 488B4520                        mov rax, PARAM(0)
 30456 00016345 803822                          cmp byte [rax], T_vector
 30457 00016348 750C                            jne .L_false
 30458 0001634A 48B8-                           mov rax, sob_boolean_true
 30458 0001634C [0300000000000000] 
 30459 00016354 EB0A                            jmp .L_end
 30460                                  .L_false:
 30461 00016356 48B8-                           mov rax, sob_boolean_false
 30461 00016358 [0200000000000000] 
 30462                                  .L_end:
 30463 00016360 C9                              leave
 30464 00016361 C21800                          ret AND_KILL_FRAME(1)
 30465                                  
 30466                                  L_code_ptr_is_closure:
 30467 00016364 C8000000                        enter 0, 0
 30468 00016368 48837D1801                      cmp COUNT, 1
 30469 0001636D 0F85EE0F0000                    jne L_error_arg_count_1
 30470 00016373 488B4520                        mov rax, PARAM(0)
 30471 00016377 803804                          cmp byte [rax], T_closure
 30472 0001637A 750C                            jne .L_false
 30473 0001637C 48B8-                           mov rax, sob_boolean_true
 30473 0001637E [0300000000000000] 
 30474 00016386 EB0A                            jmp .L_end
 30475                                  .L_false:
 30476 00016388 48B8-                           mov rax, sob_boolean_false
 30476 0001638A [0200000000000000] 
 30477                                  .L_end:
 30478 00016392 C9                              leave
 30479 00016393 C21800                          ret AND_KILL_FRAME(1)
 30480                                  
 30481                                  L_code_ptr_is_real:
 30482 00016396 C8000000                        enter 0, 0
 30483 0001639A 48837D1801                      cmp COUNT, 1
 30484 0001639F 0F85BC0F0000                    jne L_error_arg_count_1
 30485 000163A5 488B4520                        mov rax, PARAM(0)
 30486 000163A9 803813                          cmp byte [rax], T_real
 30487 000163AC 750C                            jne .L_false
 30488 000163AE 48B8-                           mov rax, sob_boolean_true
 30488 000163B0 [0300000000000000] 
 30489 000163B8 EB0A                            jmp .L_end
 30490                                  .L_false:
 30491 000163BA 48B8-                           mov rax, sob_boolean_false
 30491 000163BC [0200000000000000] 
 30492                                  .L_end:
 30493 000163C4 C9                              leave
 30494 000163C5 C21800                          ret AND_KILL_FRAME(1)
 30495                                  
 30496                                  L_code_ptr_is_fraction:
 30497 000163C8 C8000000                        enter 0, 0
 30498 000163CC 48837D1801                      cmp COUNT, 1
 30499 000163D1 0F858A0F0000                    jne L_error_arg_count_1
 30500 000163D7 488B4520                        mov rax, PARAM(0)
 30501 000163DB 803812                          cmp byte [rax], T_fraction
 30502 000163DE 750C                            jne .L_false
 30503 000163E0 48B8-                           mov rax, sob_boolean_true
 30503 000163E2 [0300000000000000] 
 30504 000163EA EB0A                            jmp .L_end
 30505                                  .L_false:
 30506 000163EC 48B8-                           mov rax, sob_boolean_false
 30506 000163EE [0200000000000000] 
 30507                                  .L_end:
 30508 000163F6 C9                              leave
 30509 000163F7 C21800                          ret AND_KILL_FRAME(1)
 30510                                  
 30511                                  L_code_ptr_is_boolean:
 30512 000163FA C8000000                        enter 0, 0
 30513 000163FE 48837D1801                      cmp COUNT, 1
 30514 00016403 0F85580F0000                    jne L_error_arg_count_1
 30515 00016409 488B4520                        mov rax, PARAM(0)
 30516 0001640D 8A18                            mov bl, byte [rax]
 30517 0001640F 80E308                          and bl, T_boolean
 30518 00016412 740C                            je .L_false
 30519 00016414 48B8-                           mov rax, sob_boolean_true
 30519 00016416 [0300000000000000] 
 30520 0001641E EB0A                            jmp .L_end
 30521                                  .L_false:
 30522 00016420 48B8-                           mov rax, sob_boolean_false
 30522 00016422 [0200000000000000] 
 30523                                  .L_end:
 30524 0001642A C9                              leave
 30525 0001642B C21800                          ret AND_KILL_FRAME(1)
 30526                                          
 30527                                  L_code_ptr_is_number:
 30528 0001642E C8000000                        enter 0, 0
 30529 00016432 48837D1801                      cmp COUNT, 1
 30530 00016437 0F85240F0000                    jne L_error_arg_count_1
 30531 0001643D 488B4520                        mov rax, PARAM(0)
 30532 00016441 8A18                            mov bl, byte [rax]
 30533 00016443 80E310                          and bl, T_number
 30534 00016446 740C                            jz .L_false
 30535 00016448 48B8-                           mov rax, sob_boolean_true
 30535 0001644A [0300000000000000] 
 30536 00016452 EB0A                            jmp .L_end
 30537                                  .L_false:
 30538 00016454 48B8-                           mov rax, sob_boolean_false
 30538 00016456 [0200000000000000] 
 30539                                  .L_end:
 30540 0001645E C9                              leave
 30541 0001645F C21800                          ret AND_KILL_FRAME(1)
 30542                                          
 30543                                  L_code_ptr_is_collection:
 30544 00016462 C8000000                        enter 0, 0
 30545 00016466 48837D1801                      cmp COUNT, 1
 30546 0001646B 0F85F00E0000                    jne L_error_arg_count_1
 30547 00016471 488B4520                        mov rax, PARAM(0)
 30548 00016475 8A18                            mov bl, byte [rax]
 30549 00016477 80E320                          and bl, T_collection
 30550 0001647A 740C                            je .L_false
 30551 0001647C 48B8-                           mov rax, sob_boolean_true
 30551 0001647E [0300000000000000] 
 30552 00016486 EB0A                            jmp .L_end
 30553                                  .L_false:
 30554 00016488 48B8-                           mov rax, sob_boolean_false
 30554 0001648A [0200000000000000] 
 30555                                  .L_end:
 30556 00016492 C9                              leave
 30557 00016493 C21800                          ret AND_KILL_FRAME(1)
 30558                                  
 30559                                  L_code_ptr_cons:
 30560 00016496 C8000000                        enter 0, 0
 30561 0001649A 48837D1802                      cmp COUNT, 2
 30562 0001649F 0F85F10E0000                    jne L_error_arg_count_2
 30563 000164A5 BF11000000                      mov rdi, (1 + 8 + 8)
 30564 000164AA E8DAF3FFFF                      call malloc
 30565 000164AF C60021                          mov byte [rax], T_pair
 30566 000164B2 488B5D20                        mov rbx, PARAM(0)
 30567 000164B6 48895801                        mov SOB_PAIR_CAR(rax), rbx
 30568 000164BA 488B5D28                        mov rbx, PARAM(1)
 30569 000164BE 48895809                        mov SOB_PAIR_CDR(rax), rbx
 30570 000164C2 C9                              leave
 30571 000164C3 C22000                          ret AND_KILL_FRAME(2)
 30572                                  
 30573                                  L_code_ptr_display_sexpr:
 30574 000164C6 C8000000                        enter 0, 0
 30575 000164CA 48837D1801                      cmp COUNT, 1
 30576 000164CF 0F858C0E0000                    jne L_error_arg_count_1
 30577 000164D5 488B7D20                        mov rdi, PARAM(0)
 30578 000164D9 E8E9F4FFFF                      call print_sexpr
 30579 000164DE 48B8-                           mov rax, sob_void
 30579 000164E0 [0000000000000000] 
 30580 000164E8 C9                              leave
 30581 000164E9 C21800                          ret AND_KILL_FRAME(1)
 30582                                  
 30583                                  L_code_ptr_write_char:
 30584 000164EC C8000000                        enter 0, 0
 30585 000164F0 48837D1801                      cmp COUNT, 1
 30586 000164F5 0F85660E0000                    jne L_error_arg_count_1
 30587 000164FB 488B4520                        mov rax, PARAM(0)
 30588                                          assert_char(rax)
    53 000164FF 803802              <1>  cmp byte [%1], %2
    54 00016502 0F852D0F0000        <1>  jne L_error_incorrect_type
 30589 00016508 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 30590 0001650B 4825FF000000                    and rax, 255
 30591 00016511 48BF-                           mov rdi, fmt_char
 30591 00016513 [321C000000000000] 
 30592 0001651B 4889C6                          mov rsi, rax
 30593 0001651E B800000000                      mov rax, 0
 30594                                          ENTER
    44 00016523 C8000000            <1>  enter 0, 0
    45 00016527 4883E4F0            <1>  and rsp, ~15
 30595 0001652B E8(00000000)                    call printf
 30596                                          LEAVE
    49 00016530 C9                  <1>  leave
 30597 00016531 48B8-                           mov rax, sob_void
 30597 00016533 [0000000000000000] 
 30598 0001653B C9                              leave
 30599 0001653C C21800                          ret AND_KILL_FRAME(1)
 30600                                  
 30601                                  L_code_ptr_car:
 30602 0001653F C8000000                        enter 0, 0
 30603 00016543 48837D1801                      cmp COUNT, 1
 30604 00016548 0F85130E0000                    jne L_error_arg_count_1
 30605 0001654E 488B4520                        mov rax, PARAM(0)
 30606                                          assert_pair(rax)
    53 00016552 803821              <1>  cmp byte [%1], %2
    54 00016555 0F85DA0E0000        <1>  jne L_error_incorrect_type
 30607 0001655B 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 30608 0001655F C9                              leave
 30609 00016560 C21800                          ret AND_KILL_FRAME(1)
 30610                                          
 30611                                  L_code_ptr_cdr:
 30612 00016563 C8000000                        enter 0, 0
 30613 00016567 48837D1801                      cmp COUNT, 1
 30614 0001656C 0F85EF0D0000                    jne L_error_arg_count_1
 30615 00016572 488B4520                        mov rax, PARAM(0)
 30616                                          assert_pair(rax)
    53 00016576 803821              <1>  cmp byte [%1], %2
    54 00016579 0F85B60E0000        <1>  jne L_error_incorrect_type
 30617 0001657F 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 30618 00016583 C9                              leave
 30619 00016584 C21800                          ret AND_KILL_FRAME(1)
 30620                                          
 30621                                  L_code_ptr_string_length:
 30622 00016587 C8000000                        enter 0, 0
 30623 0001658B 48837D1801                      cmp COUNT, 1
 30624 00016590 0F85CB0D0000                    jne L_error_arg_count_1
 30625 00016596 488B4520                        mov rax, PARAM(0)
 30626                                          assert_string(rax)
    53 0001659A 803803              <1>  cmp byte [%1], %2
    54 0001659D 0F85920E0000        <1>  jne L_error_incorrect_type
 30627 000165A3 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 30628 000165A7 E8350D0000                      call make_integer
 30629 000165AC C9                              leave
 30630 000165AD C21800                          ret AND_KILL_FRAME(1)
 30631                                  
 30632                                  L_code_ptr_vector_length:
 30633 000165B0 C8000000                        enter 0, 0
 30634 000165B4 48837D1801                      cmp COUNT, 1
 30635 000165B9 0F85A20D0000                    jne L_error_arg_count_1
 30636 000165BF 488B4520                        mov rax, PARAM(0)
 30637                                          assert_vector(rax)
    53 000165C3 803822              <1>  cmp byte [%1], %2
    54 000165C6 0F85690E0000        <1>  jne L_error_incorrect_type
 30638 000165CC 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 30639 000165D0 E80C0D0000                      call make_integer
 30640 000165D5 C9                              leave
 30641 000165D6 C21800                          ret AND_KILL_FRAME(1)
 30642                                  
 30643                                  L_code_ptr_real_to_integer:
 30644 000165D9 C8000000                        enter 0, 0
 30645 000165DD 48837D1801                      cmp COUNT, 1
 30646 000165E2 0F85790D0000                    jne L_error_arg_count_1
 30647 000165E8 488B5D20                        mov rbx, PARAM(0)
 30648                                          assert_real(rbx)
    53 000165EC 803B13              <1>  cmp byte [%1], %2
    54 000165EF 0F85400E0000        <1>  jne L_error_incorrect_type
 30649 000165F5 F20F104301                      movsd xmm0, qword [rbx + 1]
 30650 000165FA F2480F2CF8                      cvttsd2si rdi, xmm0
 30651 000165FF E8DD0C0000                      call make_integer
 30652 00016604 C9                              leave
 30653 00016605 C21800                          ret AND_KILL_FRAME(1)
 30654                                  
 30655                                  L_code_ptr_exit:
 30656 00016608 C8000000                        enter 0, 0
 30657 0001660C 48837D1800                      cmp COUNT, 0
 30658 00016611 0F85150D0000                    jne L_error_arg_count_0
 30659 00016617 B800000000                      mov rax, 0
 30660 0001661C E8(00000000)                    call exit
 30661                                  
 30662                                  L_code_ptr_integer_to_real:
 30663 00016621 C8000000                        enter 0, 0
 30664 00016625 48837D1801                      cmp COUNT, 1
 30665 0001662A 0F85310D0000                    jne L_error_arg_count_1
 30666 00016630 488B4520                        mov rax, PARAM(0)
 30667                                          assert_integer(rax)
    53 00016634 803811              <1>  cmp byte [%1], %2
    54 00016637 0F85F80D0000        <1>  jne L_error_incorrect_type
 30668 0001663D FF7001                          push qword [rax + 1]
 30669 00016640 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 30670 00016646 E87E0C0000                      call make_real
 30671 0001664B C9                              leave
 30672 0001664C C21800                          ret AND_KILL_FRAME(1)
 30673                                  
 30674                                  L_code_ptr_fraction_to_real:
 30675 0001664F C8000000                        enter 0, 0
 30676 00016653 48837D1801                      cmp COUNT, 1
 30677 00016658 0F85030D0000                    jne L_error_arg_count_1
 30678 0001665E 488B4520                        mov rax, PARAM(0)
 30679                                          assert_fraction(rax)
    53 00016662 803812              <1>  cmp byte [%1], %2
    54 00016665 0F85CA0D0000        <1>  jne L_error_incorrect_type
 30680 0001666B FF7001                          push qword [rax + 1]
 30681 0001666E F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 30682 00016674 FF7009                          push qword [rax + 1 + 8]
 30683 00016677 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 30684 0001667D F20F5EC1                        divsd xmm0, xmm1
 30685 00016681 E8430C0000                      call make_real
 30686 00016686 C9                              leave
 30687 00016687 C21800                          ret AND_KILL_FRAME(1)
 30688                                  
 30689                                  L_code_ptr_char_to_integer:
 30690 0001668A C8000000                        enter 0, 0
 30691 0001668E 48837D1801                      cmp COUNT, 1
 30692 00016693 0F85C80C0000                    jne L_error_arg_count_1
 30693 00016699 488B4520                        mov rax, PARAM(0)
 30694                                          assert_char(rax)
    53 0001669D 803802              <1>  cmp byte [%1], %2
    54 000166A0 0F858F0D0000        <1>  jne L_error_incorrect_type
 30695 000166A6 8A4001                          mov al, byte [rax + 1]
 30696 000166A9 4825FF000000                    and rax, 255
 30697 000166AF 4889C7                          mov rdi, rax
 30698 000166B2 E82A0C0000                      call make_integer
 30699 000166B7 C9                              leave
 30700 000166B8 C21800                          ret AND_KILL_FRAME(1)
 30701                                  
 30702                                  L_code_ptr_integer_to_fraction:
 30703 000166BB C8000000                        enter 0, 0
 30704 000166BF 48837D1801                      cmp COUNT, 1
 30705 000166C4 0F85970C0000                    jne L_error_arg_count_1
 30706 000166CA 4C8B4520                        mov r8, PARAM(0)
 30707                                          assert_integer(r8)
    53 000166CE 41803811            <1>  cmp byte [%1], %2
    54 000166D2 0F855D0D0000        <1>  jne L_error_incorrect_type
 30708 000166D8 BF11000000                      mov rdi, (1 + 8 + 8)
 30709 000166DD E8A7F1FFFF                      call malloc
 30710 000166E2 498B5801                        mov rbx, qword [r8 + 1]
 30711 000166E6 C60012                          mov byte [rax], T_fraction
 30712 000166E9 48895801                        mov qword [rax + 1], rbx
 30713 000166ED 48C7400901000000                mov qword [rax + 1 + 8], 1
 30714 000166F5 C9                              leave
 30715 000166F6 C21800                          ret AND_KILL_FRAME(1)
 30716                                  
 30717                                  L_code_ptr_integer_to_char:
 30718 000166F9 C8000000                        enter 0, 0
 30719 000166FD 48837D1801                      cmp COUNT, 1
 30720 00016702 0F85590C0000                    jne L_error_arg_count_1
 30721 00016708 488B4520                        mov rax, PARAM(0)
 30722                                          assert_integer(rax)
    53 0001670C 803811              <1>  cmp byte [%1], %2
    54 0001670F 0F85200D0000        <1>  jne L_error_incorrect_type
 30723 00016715 488B5801                        mov rbx, qword [rax + 1]
 30724 00016719 4883FB00                        cmp rbx, 0
 30725 0001671D 0F8ED80B0000                    jle L_error_integer_range
 30726 00016723 4881FB00010000                  cmp rbx, 256
 30727 0001672A 0F8DCB0B0000                    jge L_error_integer_range
 30728 00016730 BF02000000                      mov rdi, (1 + 1)
 30729 00016735 E84FF1FFFF                      call malloc
 30730 0001673A C60002                          mov byte [rax], T_char
 30731 0001673D 885801                          mov byte [rax + 1], bl
 30732 00016740 C9                              leave
 30733 00016741 C21800                          ret AND_KILL_FRAME(1)
 30734                                  
 30735                                  L_code_ptr_trng:
 30736 00016744 C8000000                        enter 0, 0
 30737 00016748 48837D1800                      cmp COUNT, 0
 30738 0001674D 0F85D90B0000                    jne L_error_arg_count_0
 30739 00016753 480FC7F7                        rdrand rdi
 30740 00016757 48D1EF                          shr rdi, 1
 30741 0001675A E8820B0000                      call make_integer
 30742 0001675F C9                              leave
 30743 00016760 C21000                          ret AND_KILL_FRAME(0)
 30744                                  
 30745                                  L_code_ptr_is_zero:
 30746 00016763 C8000000                        enter 0, 0
 30747 00016767 48837D1801                      cmp COUNT, 1
 30748 0001676C 0F85EF0B0000                    jne L_error_arg_count_1
 30749 00016772 488B4520                        mov rax, PARAM(0)
 30750 00016776 803811                          cmp byte [rax], T_integer
 30751 00016779 740F                            je .L_integer
 30752 0001677B 803812                          cmp byte [rax], T_fraction
 30753 0001677E 7413                            je .L_fraction
 30754 00016780 803813                          cmp byte [rax], T_real
 30755 00016783 7417                            je .L_real
 30756 00016785 E9AB0C0000                      jmp L_error_incorrect_type
 30757                                  .L_integer:
 30758 0001678A 4883780100                      cmp qword [rax + 1], 0
 30759 0001678F 7429                            je .L_zero
 30760 00016791 EB1B                            jmp .L_not_zero
 30761                                  .L_fraction:
 30762 00016793 4883780100                      cmp qword [rax + 1], 0
 30763 00016798 7420                            je .L_zero
 30764 0001679A EB12                            jmp .L_not_zero
 30765                                  .L_real:
 30766 0001679C 660FEFC0                        pxor xmm0, xmm0
 30767 000167A0 FF7001                          push qword [rax + 1]
 30768 000167A3 F20F100C24                      movsd xmm1, qword [rsp]
 30769 000167A8 660F2EC1                        ucomisd xmm0, xmm1
 30770 000167AC 740C                            je .L_zero
 30771                                  .L_not_zero:
 30772 000167AE 48B8-                           mov rax, sob_boolean_false
 30772 000167B0 [0200000000000000] 
 30773 000167B8 EB0A                            jmp .L_end
 30774                                  .L_zero:
 30775 000167BA 48B8-                           mov rax, sob_boolean_true
 30775 000167BC [0300000000000000] 
 30776                                  .L_end:
 30777 000167C4 C9                              leave
 30778 000167C5 C21800                          ret AND_KILL_FRAME(1)
 30779                                  
 30780                                  L_code_ptr_is_integer:
 30781 000167C8 C8000000                        enter 0, 0
 30782 000167CC 48837D1801                      cmp COUNT, 1
 30783 000167D1 0F858A0B0000                    jne L_error_arg_count_1
 30784 000167D7 488B4520                        mov rax, PARAM(0)
 30785 000167DB 803811                          cmp byte [rax], T_integer
 30786 000167DE 750C                            jne .L_false
 30787 000167E0 48B8-                           mov rax, sob_boolean_true
 30787 000167E2 [0300000000000000] 
 30788 000167EA EB0A                            jmp .L_exit
 30789                                  .L_false:
 30790 000167EC 48B8-                           mov rax, sob_boolean_false
 30790 000167EE [0200000000000000] 
 30791                                  .L_exit:
 30792 000167F6 C9                              leave
 30793 000167F7 C21800                          ret AND_KILL_FRAME(1)
 30794                                  
 30795                                  L_code_ptr_raw_bin_add_rr:
 30796 000167FA C8000000                        enter 0, 0
 30797 000167FE 48837D1802                      cmp COUNT, 2
 30798 00016803 0F858D0B0000                    jne L_error_arg_count_2
 30799 00016809 488B5D20                        mov rbx, PARAM(0)
 30800                                          assert_real(rbx)
    53 0001680D 803B13              <1>  cmp byte [%1], %2
    54 00016810 0F851F0C0000        <1>  jne L_error_incorrect_type
 30801 00016816 488B4D28                        mov rcx, PARAM(1)
 30802                                          assert_real(rcx)
    53 0001681A 803913              <1>  cmp byte [%1], %2
    54 0001681D 0F85120C0000        <1>  jne L_error_incorrect_type
 30803 00016823 F20F104301                      movsd xmm0, qword [rbx + 1]
 30804 00016828 F20F104901                      movsd xmm1, qword [rcx + 1]
 30805 0001682D F20F58C1                        addsd xmm0, xmm1
 30806 00016831 E8930A0000                      call make_real
 30807 00016836 C9                              leave
 30808 00016837 C22000                          ret AND_KILL_FRAME(2)
 30809                                  
 30810                                  L_code_ptr_raw_bin_sub_rr:
 30811 0001683A C8000000                        enter 0, 0
 30812 0001683E 48837D1802                      cmp COUNT, 2
 30813 00016843 0F854D0B0000                    jne L_error_arg_count_2
 30814 00016849 488B5D20                        mov rbx, PARAM(0)
 30815                                          assert_real(rbx)
    53 0001684D 803B13              <1>  cmp byte [%1], %2
    54 00016850 0F85DF0B0000        <1>  jne L_error_incorrect_type
 30816 00016856 488B4D28                        mov rcx, PARAM(1)
 30817                                          assert_real(rcx)
    53 0001685A 803913              <1>  cmp byte [%1], %2
    54 0001685D 0F85D20B0000        <1>  jne L_error_incorrect_type
 30818 00016863 F20F104301                      movsd xmm0, qword [rbx + 1]
 30819 00016868 F20F104901                      movsd xmm1, qword [rcx + 1]
 30820 0001686D F20F5CC1                        subsd xmm0, xmm1
 30821 00016871 E8530A0000                      call make_real
 30822 00016876 C9                              leave
 30823 00016877 C22000                          ret AND_KILL_FRAME(2)
 30824                                  
 30825                                  L_code_ptr_raw_bin_mul_rr:
 30826 0001687A C8000000                        enter 0, 0
 30827 0001687E 48837D1802                      cmp COUNT, 2
 30828 00016883 0F850D0B0000                    jne L_error_arg_count_2
 30829 00016889 488B5D20                        mov rbx, PARAM(0)
 30830                                          assert_real(rbx)
    53 0001688D 803B13              <1>  cmp byte [%1], %2
    54 00016890 0F859F0B0000        <1>  jne L_error_incorrect_type
 30831 00016896 488B4D28                        mov rcx, PARAM(1)
 30832                                          assert_real(rcx)
    53 0001689A 803913              <1>  cmp byte [%1], %2
    54 0001689D 0F85920B0000        <1>  jne L_error_incorrect_type
 30833 000168A3 F20F104301                      movsd xmm0, qword [rbx + 1]
 30834 000168A8 F20F104901                      movsd xmm1, qword [rcx + 1]
 30835 000168AD F20F59C1                        mulsd xmm0, xmm1
 30836 000168B1 E8130A0000                      call make_real
 30837 000168B6 C9                              leave
 30838 000168B7 C22000                          ret AND_KILL_FRAME(2)
 30839                                  
 30840                                  L_code_ptr_raw_bin_div_rr:
 30841 000168BA C8000000                        enter 0, 0
 30842 000168BE 48837D1802                      cmp COUNT, 2
 30843 000168C3 0F85CD0A0000                    jne L_error_arg_count_2
 30844 000168C9 488B5D20                        mov rbx, PARAM(0)
 30845                                          assert_real(rbx)
    53 000168CD 803B13              <1>  cmp byte [%1], %2
    54 000168D0 0F855F0B0000        <1>  jne L_error_incorrect_type
 30846 000168D6 488B4D28                        mov rcx, PARAM(1)
 30847                                          assert_real(rcx)
    53 000168DA 803913              <1>  cmp byte [%1], %2
    54 000168DD 0F85520B0000        <1>  jne L_error_incorrect_type
 30848 000168E3 F20F104301                      movsd xmm0, qword [rbx + 1]
 30849 000168E8 F20F104901                      movsd xmm1, qword [rcx + 1]
 30850 000168ED 660FEFD2                        pxor xmm2, xmm2
 30851 000168F1 660F2ECA                        ucomisd xmm1, xmm2
 30852 000168F5 0F846B0B0000                    je L_error_division_by_zero
 30853 000168FB F20F5EC1                        divsd xmm0, xmm1
 30854 000168FF E8C5090000                      call make_real
 30855 00016904 C9                              leave
 30856 00016905 C22000                          ret AND_KILL_FRAME(2)
 30857                                  
 30858                                  L_code_ptr_raw_bin_add_zz:
 30859 00016908 C8000000                	enter 0, 0
 30860 0001690C 48837D1802              	cmp COUNT, 2
 30861 00016911 0F857F0A0000            	jne L_error_arg_count_2
 30862 00016917 4C8B4520                	mov r8, PARAM(0)
 30863                                  	assert_integer(r8)
    53 0001691B 41803811            <1>  cmp byte [%1], %2
    54 0001691F 0F85100B0000        <1>  jne L_error_incorrect_type
 30864 00016925 4C8B4D28                	mov r9, PARAM(1)
 30865                                  	assert_integer(r9)
    53 00016929 41803911            <1>  cmp byte [%1], %2
    54 0001692D 0F85020B0000        <1>  jne L_error_incorrect_type
 30866 00016933 498B7801                	mov rdi, qword [r8 + 1]
 30867 00016937 49037901                	add rdi, qword [r9 + 1]
 30868 0001693B E8A1090000              	call make_integer
 30869 00016940 C9                      	leave
 30870 00016941 C22000                  	ret AND_KILL_FRAME(2)
 30871                                  	
 30872                                  L_code_ptr_raw_bin_add_qq:
 30873 00016944 C8000000                        enter 0, 0
 30874 00016948 48837D1802                      cmp COUNT, 2
 30875 0001694D 0F85430A0000                    jne L_error_arg_count_2
 30876 00016953 4C8B4520                        mov r8, PARAM(0)
 30877                                          assert_fraction(r8)
    53 00016957 41803812            <1>  cmp byte [%1], %2
    54 0001695B 0F85D40A0000        <1>  jne L_error_incorrect_type
 30878 00016961 4C8B4D28                        mov r9, PARAM(1)
 30879                                          assert_fraction(r9)
    53 00016965 41803912            <1>  cmp byte [%1], %2
    54 00016969 0F85C60A0000        <1>  jne L_error_incorrect_type
 30880 0001696F 498B4001                        mov rax, qword [r8 + 1] ; num1
 30881 00016973 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 30882 00016977 4899                            cqo
 30883 00016979 48F7EB                          imul rbx
 30884 0001697C 4889C6                          mov rsi, rax
 30885 0001697F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30886 00016983 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 30887 00016987 4899                            cqo
 30888 00016989 48F7EB                          imul rbx
 30889 0001698C 4801C6                          add rsi, rax
 30890 0001698F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30891 00016993 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 30892 00016997 4899                            cqo
 30893 00016999 48F7EB                          imul rbx
 30894 0001699C 4889C7                          mov rdi, rax
 30895 0001699F E8DE010000                      call normalize_fraction
 30896 000169A4 C9                              leave
 30897 000169A5 C22000                          ret AND_KILL_FRAME(2)
 30898                                  
 30899                                  L_code_ptr_raw_bin_sub_zz:
 30900 000169A8 C8000000                	enter 0, 0
 30901 000169AC 48837D1802              	cmp COUNT, 2
 30902 000169B1 0F85DF090000            	jne L_error_arg_count_2
 30903 000169B7 4C8B4520                	mov r8, PARAM(0)
 30904                                  	assert_integer(r8)
    53 000169BB 41803811            <1>  cmp byte [%1], %2
    54 000169BF 0F85700A0000        <1>  jne L_error_incorrect_type
 30905 000169C5 4C8B4D28                	mov r9, PARAM(1)
 30906                                  	assert_integer(r9)
    53 000169C9 41803911            <1>  cmp byte [%1], %2
    54 000169CD 0F85620A0000        <1>  jne L_error_incorrect_type
 30907 000169D3 498B7801                	mov rdi, qword [r8 + 1]
 30908 000169D7 492B7901                	sub rdi, qword [r9 + 1]
 30909 000169DB E801090000              	call make_integer
 30910 000169E0 C9                      	leave
 30911 000169E1 C22000                  	ret AND_KILL_FRAME(2)
 30912                                  
 30913                                  L_code_ptr_raw_bin_sub_qq:
 30914 000169E4 C8000000                        enter 0, 0
 30915 000169E8 48837D1802                      cmp COUNT, 2
 30916 000169ED 0F85A3090000                    jne L_error_arg_count_2
 30917 000169F3 4C8B4520                        mov r8, PARAM(0)
 30918                                          assert_fraction(r8)
    53 000169F7 41803812            <1>  cmp byte [%1], %2
    54 000169FB 0F85340A0000        <1>  jne L_error_incorrect_type
 30919 00016A01 4C8B4D28                        mov r9, PARAM(1)
 30920                                          assert_fraction(r9)
    53 00016A05 41803912            <1>  cmp byte [%1], %2
    54 00016A09 0F85260A0000        <1>  jne L_error_incorrect_type
 30921 00016A0F 498B4001                        mov rax, qword [r8 + 1] ; num1
 30922 00016A13 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 30923 00016A17 4899                            cqo
 30924 00016A19 48F7EB                          imul rbx
 30925 00016A1C 4889C6                          mov rsi, rax
 30926 00016A1F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30927 00016A23 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 30928 00016A27 4899                            cqo
 30929 00016A29 48F7EB                          imul rbx
 30930 00016A2C 4829C6                          sub rsi, rax
 30931 00016A2F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30932 00016A33 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 30933 00016A37 4899                            cqo
 30934 00016A39 48F7EB                          imul rbx
 30935 00016A3C 4889C7                          mov rdi, rax
 30936 00016A3F E83E010000                      call normalize_fraction
 30937 00016A44 C9                              leave
 30938 00016A45 C22000                          ret AND_KILL_FRAME(2)
 30939                                  
 30940                                  L_code_ptr_raw_bin_mul_zz:
 30941 00016A48 C8000000                	enter 0, 0
 30942 00016A4C 48837D1802              	cmp COUNT, 2
 30943 00016A51 0F853F090000            	jne L_error_arg_count_2
 30944 00016A57 4C8B4520                	mov r8, PARAM(0)
 30945                                  	assert_integer(r8)
    53 00016A5B 41803811            <1>  cmp byte [%1], %2
    54 00016A5F 0F85D0090000        <1>  jne L_error_incorrect_type
 30946 00016A65 4C8B4D28                	mov r9, PARAM(1)
 30947                                  	assert_integer(r9)
    53 00016A69 41803911            <1>  cmp byte [%1], %2
    54 00016A6D 0F85C2090000        <1>  jne L_error_incorrect_type
 30948 00016A73 4899                    	cqo
 30949 00016A75 498B4001                	mov rax, qword [r8 + 1]
 30950 00016A79 49F76101                	mul qword [r9 + 1]
 30951 00016A7D 4889C7                  	mov rdi, rax
 30952 00016A80 E85C080000              	call make_integer
 30953 00016A85 C9                      	leave
 30954 00016A86 C22000                  	ret AND_KILL_FRAME(2)
 30955                                  
 30956                                  L_code_ptr_raw_bin_mul_qq:
 30957 00016A89 C8000000                        enter 0, 0
 30958 00016A8D 48837D1802                      cmp COUNT, 2
 30959 00016A92 0F85FE080000                    jne L_error_arg_count_2
 30960 00016A98 4C8B4520                        mov r8, PARAM(0)
 30961                                          assert_fraction(r8)
    53 00016A9C 41803812            <1>  cmp byte [%1], %2
    54 00016AA0 0F858F090000        <1>  jne L_error_incorrect_type
 30962 00016AA6 4C8B4D28                        mov r9, PARAM(1)
 30963                                          assert_fraction(r9)
    53 00016AAA 41803912            <1>  cmp byte [%1], %2
    54 00016AAE 0F8581090000        <1>  jne L_error_incorrect_type
 30964 00016AB4 498B4001                        mov rax, qword [r8 + 1] ; num1
 30965 00016AB8 498B5901                        mov rbx, qword [r9 + 1] ; num2
 30966 00016ABC 4899                            cqo
 30967 00016ABE 48F7EB                          imul rbx
 30968 00016AC1 4889C6                          mov rsi, rax
 30969 00016AC4 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30970 00016AC8 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 30971 00016ACC 4899                            cqo
 30972 00016ACE 48F7EB                          imul rbx
 30973 00016AD1 4889C7                          mov rdi, rax
 30974 00016AD4 E8A9000000                      call normalize_fraction
 30975 00016AD9 C9                              leave
 30976 00016ADA C22000                          ret AND_KILL_FRAME(2)
 30977                                          
 30978                                  L_code_ptr_raw_bin_div_zz:
 30979 00016ADD C8000000                	enter 0, 0
 30980 00016AE1 48837D1802              	cmp COUNT, 2
 30981 00016AE6 0F85AA080000            	jne L_error_arg_count_2
 30982 00016AEC 4C8B4520                	mov r8, PARAM(0)
 30983                                  	assert_integer(r8)
    53 00016AF0 41803811            <1>  cmp byte [%1], %2
    54 00016AF4 0F853B090000        <1>  jne L_error_incorrect_type
 30984 00016AFA 4C8B4D28                	mov r9, PARAM(1)
 30985                                  	assert_integer(r9)
    53 00016AFE 41803911            <1>  cmp byte [%1], %2
    54 00016B02 0F852D090000        <1>  jne L_error_incorrect_type
 30986 00016B08 498B7901                	mov rdi, qword [r9 + 1]
 30987 00016B0C 4883FF00                	cmp rdi, 0
 30988 00016B10 0F8450090000            	je L_error_division_by_zero
 30989 00016B16 498B7001                	mov rsi, qword [r8 + 1]
 30990 00016B1A E863000000              	call normalize_fraction
 30991 00016B1F C9                      	leave
 30992 00016B20 C22000                  	ret AND_KILL_FRAME(2)
 30993                                  
 30994                                  L_code_ptr_raw_bin_div_qq:
 30995 00016B23 C8000000                        enter 0, 0
 30996 00016B27 48837D1802                      cmp COUNT, 2
 30997 00016B2C 0F8564080000                    jne L_error_arg_count_2
 30998 00016B32 4C8B4520                        mov r8, PARAM(0)
 30999                                          assert_fraction(r8)
    53 00016B36 41803812            <1>  cmp byte [%1], %2
    54 00016B3A 0F85F5080000        <1>  jne L_error_incorrect_type
 31000 00016B40 4C8B4D28                        mov r9, PARAM(1)
 31001                                          assert_fraction(r9)
    53 00016B44 41803912            <1>  cmp byte [%1], %2
    54 00016B48 0F85E7080000        <1>  jne L_error_incorrect_type
 31002 00016B4E 4983790100                      cmp qword [r9 + 1], 0
 31003 00016B53 0F840D090000                    je L_error_division_by_zero
 31004 00016B59 498B4001                        mov rax, qword [r8 + 1] ; num1
 31005 00016B5D 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 31006 00016B61 4899                            cqo
 31007 00016B63 48F7EB                          imul rbx
 31008 00016B66 4889C6                          mov rsi, rax
 31009 00016B69 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 31010 00016B6D 498B5901                        mov rbx, qword [r9 + 1] ; num2
 31011 00016B71 4899                            cqo
 31012 00016B73 48F7EB                          imul rbx
 31013 00016B76 4889C7                          mov rdi, rax
 31014 00016B79 E804000000                      call normalize_fraction
 31015 00016B7E C9                              leave
 31016 00016B7F C22000                          ret AND_KILL_FRAME(2)
 31017                                          
 31018                                  normalize_fraction:
 31019 00016B82 56                              push rsi
 31020 00016B83 57                              push rdi
 31021 00016B84 E859000000                      call gcd
 31022 00016B89 4889C3                          mov rbx, rax
 31023 00016B8C 58                              pop rax
 31024 00016B8D 4899                            cqo
 31025 00016B8F 48F7FB                          idiv rbx
 31026 00016B92 4989C0                          mov r8, rax
 31027 00016B95 58                              pop rax
 31028 00016B96 4899                            cqo
 31029 00016B98 48F7FB                          idiv rbx
 31030 00016B9B 4989C1                          mov r9, rax
 31031 00016B9E 4983F900                        cmp r9, 0
 31032 00016BA2 741C                            je .L_zero
 31033 00016BA4 4983F801                        cmp r8, 1
 31034 00016BA8 7421                            je .L_int
 31035 00016BAA BF11000000                      mov rdi, (1 + 8 + 8)
 31036 00016BAF E8D5ECFFFF                      call malloc
 31037 00016BB4 C60012                          mov byte [rax], T_fraction
 31038 00016BB7 4C894801                        mov qword [rax + 1], r9
 31039 00016BBB 4C894009                        mov qword [rax + 1 + 8], r8
 31040 00016BBF C3                              ret
 31041                                  .L_zero:
 31042 00016BC0 BF00000000                      mov rdi, 0
 31043 00016BC5 E817070000                      call make_integer
 31044 00016BCA C3                              ret
 31045                                  .L_int:
 31046 00016BCB 4C89CF                          mov rdi, r9
 31047 00016BCE E80E070000                      call make_integer
 31048 00016BD3 C3                              ret
 31049                                  
 31050                                  iabs:
 31051 00016BD4 4889F8                          mov rax, rdi
 31052 00016BD7 4883F800                        cmp rax, 0
 31053 00016BDB 7C01                            jl .Lneg
 31054 00016BDD C3                              ret
 31055                                  .Lneg:
 31056 00016BDE 48F7D8                          neg rax
 31057 00016BE1 C3                              ret
 31058                                  
 31059                                  gcd:
 31060 00016BE2 E8EDFFFFFF                      call iabs
 31061 00016BE7 4889C3                          mov rbx, rax
 31062 00016BEA 4889F7                          mov rdi, rsi
 31063 00016BED E8E2FFFFFF                      call iabs
 31064 00016BF2 4883F800                        cmp rax, 0
 31065 00016BF6 7502                            jne .L0
 31066 00016BF8 4893                            xchg rax, rbx
 31067                                  .L0:
 31068 00016BFA 4883FB00                        cmp rbx, 0
 31069 00016BFE 740C                            je .L1
 31070 00016C00 4899                            cqo
 31071 00016C02 48F7F3                          div rbx
 31072 00016C05 4889D0                          mov rax, rdx
 31073 00016C08 4893                            xchg rax, rbx
 31074 00016C0A EBEE                            jmp .L0
 31075                                  .L1:
 31076 00016C0C C3                              ret
 31077                                  
 31078                                  L_code_ptr_error:
 31079 00016C0D C8000000                        enter 0, 0
 31080 00016C11 48837D1802                      cmp COUNT, 2
 31081 00016C16 0F857A070000                    jne L_error_arg_count_2
 31082 00016C1C 488B7520                        mov rsi, PARAM(0)
 31083                                          assert_interned_symbol(rsi)
    53 00016C20 803E41              <1>  cmp byte [%1], %2
    54 00016C23 0F850C080000        <1>  jne L_error_incorrect_type
 31084 00016C29 488B7528                        mov rsi, PARAM(1)
 31085                                          assert_string(rsi)
    53 00016C2D 803E03              <1>  cmp byte [%1], %2
    54 00016C30 0F85FF070000        <1>  jne L_error_incorrect_type
 31086 00016C36 48BF-                           mov rdi, fmt_scheme_error_part_1
 31086 00016C38 [6A1D000000000000] 
 31087 00016C40 B800000000                      mov rax, 0
 31088                                          ENTER
    44 00016C45 C8000000            <1>  enter 0, 0
    45 00016C49 4883E4F0            <1>  and rsp, ~15
 31089 00016C4D E8(00000000)                    call printf
 31090                                          LEAVE
    49 00016C52 C9                  <1>  leave
 31091 00016C53 488B7D20                        mov rdi, PARAM(0)
 31092 00016C57 E86BEDFFFF                      call print_sexpr
 31093 00016C5C 48BF-                           mov rdi, fmt_scheme_error_part_2
 31093 00016C5E [7E1D000000000000] 
 31094 00016C66 B800000000                      mov rax, 0
 31095                                          ENTER
    44 00016C6B C8000000            <1>  enter 0, 0
    45 00016C6F 4883E4F0            <1>  and rsp, ~15
 31096 00016C73 E8(00000000)                    call printf
 31097                                          LEAVE
    49 00016C78 C9                  <1>  leave
 31098 00016C79 488B4528                        mov rax, PARAM(1)       ; sob_string
 31099 00016C7D BE01000000                      mov rsi, 1              ; size = 1 byte
 31100 00016C82 488B5001                        mov rdx, qword [rax + 1] ; length
 31101 00016C86 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 31102 00016C8A 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 31103 00016C92 E8(00000000)                    call fwrite
 31104 00016C97 48BF-                           mov rdi, fmt_scheme_error_part_3
 31104 00016C99 [C01D000000000000] 
 31105 00016CA1 B800000000                      mov rax, 0
 31106                                          ENTER
    44 00016CA6 C8000000            <1>  enter 0, 0
    45 00016CAA 4883E4F0            <1>  and rsp, ~15
 31107 00016CAE E8(00000000)                    call printf
 31108                                          LEAVE
    49 00016CB3 C9                  <1>  leave
 31109 00016CB4 48C7C0F7FFFFFF                  mov rax, -9
 31110 00016CBB E8(00000000)                    call exit
 31111                                  
 31112                                  L_code_ptr_raw_less_than_rr:
 31113 00016CC0 C8000000                        enter 0, 0
 31114 00016CC4 48837D1802                      cmp COUNT, 2
 31115 00016CC9 0F85C7060000                    jne L_error_arg_count_2
 31116 00016CCF 488B7520                        mov rsi, PARAM(0)
 31117                                          assert_real(rsi)
    53 00016CD3 803E13              <1>  cmp byte [%1], %2
    54 00016CD6 0F8559070000        <1>  jne L_error_incorrect_type
 31118 00016CDC 488B7D28                        mov rdi, PARAM(1)
 31119                                          assert_real(rdi)
    53 00016CE0 803F13              <1>  cmp byte [%1], %2
    54 00016CE3 0F854C070000        <1>  jne L_error_incorrect_type
 31120 00016CE9 F20F104601                      movsd xmm0, qword [rsi + 1]
 31121 00016CEE F20F104F01                      movsd xmm1, qword [rdi + 1]
 31122 00016CF3 660F2FC1                        comisd xmm0, xmm1
 31123 00016CF7 730C                            jae .L_false
 31124 00016CF9 48B8-                           mov rax, sob_boolean_true
 31124 00016CFB [0300000000000000] 
 31125 00016D03 EB0A                            jmp .L_exit
 31126                                  .L_false:
 31127 00016D05 48B8-                           mov rax, sob_boolean_false
 31127 00016D07 [0200000000000000] 
 31128                                  .L_exit:
 31129 00016D0F C9                              leave
 31130 00016D10 C22000                          ret AND_KILL_FRAME(2)
 31131                                          
 31132                                  L_code_ptr_raw_less_than_zz:
 31133 00016D13 C8000000                	enter 0, 0
 31134 00016D17 48837D1802              	cmp COUNT, 2
 31135 00016D1C 0F8574060000            	jne L_error_arg_count_2
 31136 00016D22 4C8B4520                	mov r8, PARAM(0)
 31137                                  	assert_integer(r8)
    53 00016D26 41803811            <1>  cmp byte [%1], %2
    54 00016D2A 0F8505070000        <1>  jne L_error_incorrect_type
 31138 00016D30 4C8B4D28                	mov r9, PARAM(1)
 31139                                  	assert_integer(r9)
    53 00016D34 41803911            <1>  cmp byte [%1], %2
    54 00016D38 0F85F7060000        <1>  jne L_error_incorrect_type
 31140 00016D3E 498B7801                	mov rdi, qword [r8 + 1]
 31141 00016D42 493B7901                	cmp rdi, qword [r9 + 1]
 31142 00016D46 7D0C                    	jge .L_false
 31143 00016D48 48B8-                   	mov rax, sob_boolean_true
 31143 00016D4A [0300000000000000] 
 31144 00016D52 EB0A                    	jmp .L_exit
 31145                                  .L_false:
 31146 00016D54 48B8-                   	mov rax, sob_boolean_false
 31146 00016D56 [0200000000000000] 
 31147                                  .L_exit:
 31148 00016D5E C9                      	leave
 31149 00016D5F C22000                  	ret AND_KILL_FRAME(2)
 31150                                  
 31151                                  L_code_ptr_raw_less_than_qq:
 31152 00016D62 C8000000                        enter 0, 0
 31153 00016D66 48837D1802                      cmp COUNT, 2
 31154 00016D6B 0F8525060000                    jne L_error_arg_count_2
 31155 00016D71 488B7520                        mov rsi, PARAM(0)
 31156                                          assert_fraction(rsi)
    53 00016D75 803E12              <1>  cmp byte [%1], %2
    54 00016D78 0F85B7060000        <1>  jne L_error_incorrect_type
 31157 00016D7E 488B7D28                        mov rdi, PARAM(1)
 31158                                          assert_fraction(rdi)
    53 00016D82 803F12              <1>  cmp byte [%1], %2
    54 00016D85 0F85AA060000        <1>  jne L_error_incorrect_type
 31159 00016D8B 488B4601                        mov rax, qword [rsi + 1] ; num1
 31160 00016D8F 4899                            cqo
 31161 00016D91 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 31162 00016D95 4889C1                          mov rcx, rax
 31163 00016D98 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 31164 00016D9C 4899                            cqo
 31165 00016D9E 48F76F01                        imul qword [rdi + 1]          ; num2
 31166 00016DA2 4829C1                          sub rcx, rax
 31167 00016DA5 7D0C                            jge .L_false
 31168 00016DA7 48B8-                           mov rax, sob_boolean_true
 31168 00016DA9 [0300000000000000] 
 31169 00016DB1 EB0A                            jmp .L_exit
 31170                                  .L_false:
 31171 00016DB3 48B8-                           mov rax, sob_boolean_false
 31171 00016DB5 [0200000000000000] 
 31172                                  .L_exit:
 31173 00016DBD C9                              leave
 31174 00016DBE C22000                          ret AND_KILL_FRAME(2)
 31175                                  
 31176                                  L_code_ptr_raw_equal_rr:
 31177 00016DC1 C8000000                        enter 0, 0
 31178 00016DC5 48837D1802                      cmp COUNT, 2
 31179 00016DCA 0F85C6050000                    jne L_error_arg_count_2
 31180 00016DD0 488B7520                        mov rsi, PARAM(0)
 31181                                          assert_real(rsi)
    53 00016DD4 803E13              <1>  cmp byte [%1], %2
    54 00016DD7 0F8558060000        <1>  jne L_error_incorrect_type
 31182 00016DDD 488B7D28                        mov rdi, PARAM(1)
 31183                                          assert_real(rdi)
    53 00016DE1 803F13              <1>  cmp byte [%1], %2
    54 00016DE4 0F854B060000        <1>  jne L_error_incorrect_type
 31184 00016DEA F20F104601                      movsd xmm0, qword [rsi + 1]
 31185 00016DEF F20F104F01                      movsd xmm1, qword [rdi + 1]
 31186 00016DF4 660F2FC1                        comisd xmm0, xmm1
 31187 00016DF8 750C                            jne .L_false
 31188 00016DFA 48B8-                           mov rax, sob_boolean_true
 31188 00016DFC [0300000000000000] 
 31189 00016E04 EB0A                            jmp .L_exit
 31190                                  .L_false:
 31191 00016E06 48B8-                           mov rax, sob_boolean_false
 31191 00016E08 [0200000000000000] 
 31192                                  .L_exit:
 31193 00016E10 C9                              leave
 31194 00016E11 C22000                          ret AND_KILL_FRAME(2)
 31195                                          
 31196                                  L_code_ptr_raw_equal_zz:
 31197 00016E14 C8000000                	enter 0, 0
 31198 00016E18 48837D1802              	cmp COUNT, 2
 31199 00016E1D 0F8573050000            	jne L_error_arg_count_2
 31200 00016E23 4C8B4520                	mov r8, PARAM(0)
 31201                                  	assert_integer(r8)
    53 00016E27 41803811            <1>  cmp byte [%1], %2
    54 00016E2B 0F8504060000        <1>  jne L_error_incorrect_type
 31202 00016E31 4C8B4D28                	mov r9, PARAM(1)
 31203                                  	assert_integer(r9)
    53 00016E35 41803911            <1>  cmp byte [%1], %2
    54 00016E39 0F85F6050000        <1>  jne L_error_incorrect_type
 31204 00016E3F 498B7801                	mov rdi, qword [r8 + 1]
 31205 00016E43 493B7901                	cmp rdi, qword [r9 + 1]
 31206 00016E47 750C                    	jne .L_false
 31207 00016E49 48B8-                   	mov rax, sob_boolean_true
 31207 00016E4B [0300000000000000] 
 31208 00016E53 EB0A                    	jmp .L_exit
 31209                                  .L_false:
 31210 00016E55 48B8-                   	mov rax, sob_boolean_false
 31210 00016E57 [0200000000000000] 
 31211                                  .L_exit:
 31212 00016E5F C9                      	leave
 31213 00016E60 C22000                  	ret AND_KILL_FRAME(2)
 31214                                  
 31215                                  L_code_ptr_raw_equal_qq:
 31216 00016E63 C8000000                        enter 0, 0
 31217 00016E67 48837D1802                      cmp COUNT, 2
 31218 00016E6C 0F8524050000                    jne L_error_arg_count_2
 31219 00016E72 488B7520                        mov rsi, PARAM(0)
 31220                                          assert_fraction(rsi)
    53 00016E76 803E12              <1>  cmp byte [%1], %2
    54 00016E79 0F85B6050000        <1>  jne L_error_incorrect_type
 31221 00016E7F 488B7D28                        mov rdi, PARAM(1)
 31222                                          assert_fraction(rdi)
    53 00016E83 803F12              <1>  cmp byte [%1], %2
    54 00016E86 0F85A9050000        <1>  jne L_error_incorrect_type
 31223 00016E8C 488B4601                        mov rax, qword [rsi + 1] ; num1
 31224 00016E90 4899                            cqo
 31225 00016E92 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 31226 00016E96 4889C1                          mov rcx, rax
 31227 00016E99 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 31228 00016E9D 4899                            cqo
 31229 00016E9F 48F76F01                        imul qword [rdi + 1]          ; num2
 31230 00016EA3 4829C1                          sub rcx, rax
 31231 00016EA6 750C                            jne .L_false
 31232 00016EA8 48B8-                           mov rax, sob_boolean_true
 31232 00016EAA [0300000000000000] 
 31233 00016EB2 EB0A                            jmp .L_exit
 31234                                  .L_false:
 31235 00016EB4 48B8-                           mov rax, sob_boolean_false
 31235 00016EB6 [0200000000000000] 
 31236                                  .L_exit:
 31237 00016EBE C9                              leave
 31238 00016EBF C22000                          ret AND_KILL_FRAME(2)
 31239                                  
 31240                                  L_code_ptr_quotient:
 31241 00016EC2 C8000000                        enter 0, 0
 31242 00016EC6 48837D1802                      cmp COUNT, 2
 31243 00016ECB 0F85C5040000                    jne L_error_arg_count_2
 31244 00016ED1 488B7520                        mov rsi, PARAM(0)
 31245                                          assert_integer(rsi)
    53 00016ED5 803E11              <1>  cmp byte [%1], %2
    54 00016ED8 0F8557050000        <1>  jne L_error_incorrect_type
 31246 00016EDE 488B7D28                        mov rdi, PARAM(1)
 31247                                          assert_integer(rdi)
    53 00016EE2 803F11              <1>  cmp byte [%1], %2
    54 00016EE5 0F854A050000        <1>  jne L_error_incorrect_type
 31248 00016EEB 488B4601                        mov rax, qword [rsi + 1]
 31249 00016EEF 488B5F01                        mov rbx, qword [rdi + 1]
 31250 00016EF3 4883FB00                        cmp rbx, 0
 31251 00016EF7 0F8469050000                    je L_error_division_by_zero
 31252 00016EFD 4899                            cqo
 31253 00016EFF 48F7FB                          idiv rbx
 31254 00016F02 4889C7                          mov rdi, rax
 31255 00016F05 E8D7030000                      call make_integer
 31256 00016F0A C9                              leave
 31257 00016F0B C22000                          ret AND_KILL_FRAME(2)
 31258                                          
 31259                                  L_code_ptr_remainder:
 31260 00016F0E C8000000                        enter 0, 0
 31261 00016F12 48837D1802                      cmp COUNT, 2
 31262 00016F17 0F8579040000                    jne L_error_arg_count_2
 31263 00016F1D 488B7520                        mov rsi, PARAM(0)
 31264                                          assert_integer(rsi)
    53 00016F21 803E11              <1>  cmp byte [%1], %2
    54 00016F24 0F850B050000        <1>  jne L_error_incorrect_type
 31265 00016F2A 488B7D28                        mov rdi, PARAM(1)
 31266                                          assert_integer(rdi)
    53 00016F2E 803F11              <1>  cmp byte [%1], %2
    54 00016F31 0F85FE040000        <1>  jne L_error_incorrect_type
 31267 00016F37 488B4601                        mov rax, qword [rsi + 1]
 31268 00016F3B 488B5F01                        mov rbx, qword [rdi + 1]
 31269 00016F3F 4883FB00                        cmp rbx, 0
 31270 00016F43 0F841D050000                    je L_error_division_by_zero
 31271 00016F49 4899                            cqo
 31272 00016F4B 48F7FB                          idiv rbx
 31273 00016F4E 4889D7                          mov rdi, rdx
 31274 00016F51 E88B030000                      call make_integer
 31275 00016F56 C9                              leave
 31276 00016F57 C22000                          ret AND_KILL_FRAME(2)
 31277                                  
 31278                                  L_code_ptr_set_car:
 31279 00016F5A C8000000                        enter 0, 0
 31280 00016F5E 48837D1802                      cmp COUNT, 2
 31281 00016F63 0F852D040000                    jne L_error_arg_count_2
 31282 00016F69 488B4520                        mov rax, PARAM(0)
 31283                                          assert_pair(rax)
    53 00016F6D 803821              <1>  cmp byte [%1], %2
    54 00016F70 0F85BF040000        <1>  jne L_error_incorrect_type
 31284 00016F76 488B5D28                        mov rbx, PARAM(1)
 31285 00016F7A 48895801                        mov SOB_PAIR_CAR(rax), rbx
 31286 00016F7E 48B8-                           mov rax, sob_void
 31286 00016F80 [0000000000000000] 
 31287 00016F88 C9                              leave
 31288 00016F89 C22000                          ret AND_KILL_FRAME(2)
 31289                                  
 31290                                  L_code_ptr_set_cdr:
 31291 00016F8C C8000000                        enter 0, 0
 31292 00016F90 48837D1802                      cmp COUNT, 2
 31293 00016F95 0F85FB030000                    jne L_error_arg_count_2
 31294 00016F9B 488B4520                        mov rax, PARAM(0)
 31295                                          assert_pair(rax)
    53 00016F9F 803821              <1>  cmp byte [%1], %2
    54 00016FA2 0F858D040000        <1>  jne L_error_incorrect_type
 31296 00016FA8 488B5D28                        mov rbx, PARAM(1)
 31297 00016FAC 48895809                        mov SOB_PAIR_CDR(rax), rbx
 31298 00016FB0 48B8-                           mov rax, sob_void
 31298 00016FB2 [0000000000000000] 
 31299 00016FBA C9                              leave
 31300 00016FBB C22000                          ret AND_KILL_FRAME(2)
 31301                                  
 31302                                  L_code_ptr_string_ref:
 31303 00016FBE C8000000                        enter 0, 0
 31304 00016FC2 48837D1802                      cmp COUNT, 2
 31305 00016FC7 0F85C9030000                    jne L_error_arg_count_2
 31306 00016FCD 488B7D20                        mov rdi, PARAM(0)
 31307                                          assert_string(rdi)
    53 00016FD1 803F03              <1>  cmp byte [%1], %2
    54 00016FD4 0F855B040000        <1>  jne L_error_incorrect_type
 31308 00016FDA 488B7528                        mov rsi, PARAM(1)
 31309                                          assert_integer(rsi)
    53 00016FDE 803E11              <1>  cmp byte [%1], %2
    54 00016FE1 0F854E040000        <1>  jne L_error_incorrect_type
 31310 00016FE7 488B5701                        mov rdx, qword [rdi + 1]
 31311 00016FEB 488B4E01                        mov rcx, qword [rsi + 1]
 31312 00016FEF 4839D1                          cmp rcx, rdx
 31313 00016FF2 0F8D03030000                    jge L_error_integer_range
 31314 00016FF8 4883F900                        cmp rcx, 0
 31315 00016FFC 0F8CF9020000                    jl L_error_integer_range
 31316 00017002 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 31317 00017006 BF02000000                      mov rdi, 2
 31318 0001700B E879E8FFFF                      call malloc
 31319 00017010 C60002                          mov byte [rax], T_char
 31320 00017013 885801                          mov byte [rax + 1], bl
 31321 00017016 C9                              leave
 31322 00017017 C22000                          ret AND_KILL_FRAME(2)
 31323                                  
 31324                                  L_code_ptr_vector_ref:
 31325 0001701A C8000000                        enter 0, 0
 31326 0001701E 48837D1802                      cmp COUNT, 2
 31327 00017023 0F856D030000                    jne L_error_arg_count_2
 31328 00017029 488B7D20                        mov rdi, PARAM(0)
 31329                                          assert_vector(rdi)
    53 0001702D 803F22              <1>  cmp byte [%1], %2
    54 00017030 0F85FF030000        <1>  jne L_error_incorrect_type
 31330 00017036 488B7528                        mov rsi, PARAM(1)
 31331                                          assert_integer(rsi)
    53 0001703A 803E11              <1>  cmp byte [%1], %2
    54 0001703D 0F85F2030000        <1>  jne L_error_incorrect_type
 31332 00017043 488B5701                        mov rdx, qword [rdi + 1]
 31333 00017047 488B4E01                        mov rcx, qword [rsi + 1]
 31334 0001704B 4839D1                          cmp rcx, rdx
 31335 0001704E 0F8DA7020000                    jge L_error_integer_range
 31336 00017054 4883F900                        cmp rcx, 0
 31337 00017058 0F8C9D020000                    jl L_error_integer_range
 31338 0001705E 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 31339 00017063 C9                              leave
 31340 00017064 C22000                          ret AND_KILL_FRAME(2)
 31341                                  
 31342                                  L_code_ptr_vector_set:
 31343 00017067 C8000000                        enter 0, 0
 31344 0001706B 48837D1803                      cmp COUNT, 3
 31345 00017070 0F858A030000                    jne L_error_arg_count_3
 31346 00017076 488B7D20                        mov rdi, PARAM(0)
 31347                                          assert_vector(rdi)
    53 0001707A 803F22              <1>  cmp byte [%1], %2
    54 0001707D 0F85B2030000        <1>  jne L_error_incorrect_type
 31348 00017083 488B7528                        mov rsi, PARAM(1)
 31349                                          assert_integer(rsi)
    53 00017087 803E11              <1>  cmp byte [%1], %2
    54 0001708A 0F85A5030000        <1>  jne L_error_incorrect_type
 31350 00017090 488B5701                        mov rdx, qword [rdi + 1]
 31351 00017094 488B4E01                        mov rcx, qword [rsi + 1]
 31352 00017098 4839D1                          cmp rcx, rdx
 31353 0001709B 0F8D5A020000                    jge L_error_integer_range
 31354 000170A1 4883F900                        cmp rcx, 0
 31355 000170A5 0F8C50020000                    jl L_error_integer_range
 31356 000170AB 488B4530                        mov rax, PARAM(2)
 31357 000170AF 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 31358 000170B4 48B8-                           mov rax, sob_void
 31358 000170B6 [0000000000000000] 
 31359 000170BE C9                              leave
 31360 000170BF C22800                          ret AND_KILL_FRAME(3)
 31361                                  
 31362                                  L_code_ptr_string_set:
 31363 000170C2 C8000000                        enter 0, 0
 31364 000170C6 48837D1803                      cmp COUNT, 3
 31365 000170CB 0F852F030000                    jne L_error_arg_count_3
 31366 000170D1 488B7D20                        mov rdi, PARAM(0)
 31367                                          assert_string(rdi)
    53 000170D5 803F03              <1>  cmp byte [%1], %2
    54 000170D8 0F8557030000        <1>  jne L_error_incorrect_type
 31368 000170DE 488B7528                        mov rsi, PARAM(1)
 31369                                          assert_integer(rsi)
    53 000170E2 803E11              <1>  cmp byte [%1], %2
    54 000170E5 0F854A030000        <1>  jne L_error_incorrect_type
 31370 000170EB 488B5701                        mov rdx, qword [rdi + 1]
 31371 000170EF 488B4E01                        mov rcx, qword [rsi + 1]
 31372 000170F3 4839D1                          cmp rcx, rdx
 31373 000170F6 0F8DFF010000                    jge L_error_integer_range
 31374 000170FC 4883F900                        cmp rcx, 0
 31375 00017100 0F8CF5010000                    jl L_error_integer_range
 31376 00017106 488B4530                        mov rax, PARAM(2)
 31377                                          assert_char(rax)
    53 0001710A 803802              <1>  cmp byte [%1], %2
    54 0001710D 0F8522030000        <1>  jne L_error_incorrect_type
 31378 00017113 8A4001                          mov al, byte [rax + 1]
 31379 00017116 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 31380 0001711A 48B8-                           mov rax, sob_void
 31380 0001711C [0000000000000000] 
 31381 00017124 C9                              leave
 31382 00017125 C22800                          ret AND_KILL_FRAME(3)
 31383                                  
 31384                                  L_code_ptr_make_vector:
 31385 00017128 C8000000                        enter 0, 0
 31386 0001712C 48837D1802                      cmp COUNT, 2
 31387 00017131 0F855F020000                    jne L_error_arg_count_2
 31388 00017137 488B4D20                        mov rcx, PARAM(0)
 31389                                          assert_integer(rcx)
    53 0001713B 803911              <1>  cmp byte [%1], %2
    54 0001713E 0F85F1020000        <1>  jne L_error_incorrect_type
 31390 00017144 488B4901                        mov rcx, qword [rcx + 1]
 31391 00017148 4883F900                        cmp rcx, 0
 31392 0001714C 0F8CA9010000                    jl L_error_integer_range
 31393 00017152 488B5528                        mov rdx, PARAM(1)
 31394 00017156 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 31395 0001715E E826E7FFFF                      call malloc
 31396 00017163 C60022                          mov byte [rax], T_vector
 31397 00017166 48894801                        mov qword [rax + 1], rcx
 31398 0001716A 41B800000000                    mov r8, 0
 31399                                  .L0:
 31400 00017170 4939C8                          cmp r8, rcx
 31401 00017173 740A                            je .L1
 31402 00017175 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 31403 0001717A 49FFC0                          inc r8
 31404 0001717D EBF1                            jmp .L0
 31405                                  .L1:
 31406 0001717F C9                              leave
 31407 00017180 C22000                          ret AND_KILL_FRAME(2)
 31408                                          
 31409                                  L_code_ptr_make_string:
 31410 00017183 C8000000                        enter 0, 0
 31411 00017187 48837D1802                      cmp COUNT, 2
 31412 0001718C 0F8504020000                    jne L_error_arg_count_2
 31413 00017192 488B4D20                        mov rcx, PARAM(0)
 31414                                          assert_integer(rcx)
    53 00017196 803911              <1>  cmp byte [%1], %2
    54 00017199 0F8596020000        <1>  jne L_error_incorrect_type
 31415 0001719F 488B4901                        mov rcx, qword [rcx + 1]
 31416 000171A3 4883F900                        cmp rcx, 0
 31417 000171A7 0F8C4E010000                    jl L_error_integer_range
 31418 000171AD 488B5528                        mov rdx, PARAM(1)
 31419                                          assert_char(rdx)
    53 000171B1 803A02              <1>  cmp byte [%1], %2
    54 000171B4 0F857B020000        <1>  jne L_error_incorrect_type
 31420 000171BA 8A5201                          mov dl, byte [rdx + 1]
 31421 000171BD 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 31422 000171C1 E8C3E6FFFF                      call malloc
 31423 000171C6 C60003                          mov byte [rax], T_string
 31424 000171C9 48894801                        mov qword [rax + 1], rcx
 31425 000171CD 41B800000000                    mov r8, 0
 31426                                  .L0:
 31427 000171D3 4939C8                          cmp r8, rcx
 31428 000171D6 740A                            je .L1
 31429 000171D8 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 31430 000171DD 49FFC0                          inc r8
 31431 000171E0 EBF1                            jmp .L0
 31432                                  .L1:
 31433 000171E2 C9                              leave
 31434 000171E3 C22000                          ret AND_KILL_FRAME(2)
 31435                                  
 31436                                  L_code_ptr_numerator:
 31437 000171E6 C8000000                        enter 0, 0
 31438 000171EA 48837D1801                      cmp COUNT, 1
 31439 000171EF 0F856C010000                    jne L_error_arg_count_1
 31440 000171F5 488B4520                        mov rax, PARAM(0)
 31441                                          assert_fraction(rax)
    53 000171F9 803812              <1>  cmp byte [%1], %2
    54 000171FC 0F8533020000        <1>  jne L_error_incorrect_type
 31442 00017202 488B7801                        mov rdi, qword [rax + 1]
 31443 00017206 E8D6000000                      call make_integer
 31444 0001720B C9                              leave
 31445 0001720C C21800                          ret AND_KILL_FRAME(1)
 31446                                          
 31447                                  L_code_ptr_denominator:
 31448 0001720F C8000000                        enter 0, 0
 31449 00017213 48837D1801                      cmp COUNT, 1
 31450 00017218 0F8543010000                    jne L_error_arg_count_1
 31451 0001721E 488B4520                        mov rax, PARAM(0)
 31452                                          assert_fraction(rax)
    53 00017222 803812              <1>  cmp byte [%1], %2
    54 00017225 0F850A020000        <1>  jne L_error_incorrect_type
 31453 0001722B 488B7809                        mov rdi, qword [rax + 1 + 8]
 31454 0001722F E8AD000000                      call make_integer
 31455 00017234 C9                              leave
 31456 00017235 C21800                          ret AND_KILL_FRAME(1)
 31457                                  
 31458                                  L_code_ptr_is_eq:
 31459 00017238 C8000000                	enter 0, 0
 31460 0001723C 48837D1802              	cmp COUNT, 2
 31461 00017241 0F854F010000            	jne L_error_arg_count_2
 31462 00017247 488B7D20                	mov rdi, PARAM(0)
 31463 0001724B 488B7528                	mov rsi, PARAM(1)
 31464 0001724F 4839F7                  	cmp rdi, rsi
 31465 00017252 745B                    	je .L_eq_true
 31466 00017254 8A17                    	mov dl, byte [rdi]
 31467 00017256 3A16                    	cmp dl, byte [rsi]
 31468 00017258 7561                    	jne .L_eq_false
 31469 0001725A 80FA02                  	cmp dl, T_char
 31470 0001725D 7448                    	je .L_char
 31471 0001725F 80FA41                  	cmp dl, T_interned_symbol
 31472 00017262 742F                    	je .L_interned_symbol
 31473 00017264 80FA42                          cmp dl, T_uninterned_symbol
 31474 00017267 7432                            je .L_uninterned_symbol
 31475 00017269 80FA13                  	cmp dl, T_real
 31476 0001726C 741D                    	je .L_real
 31477 0001726E 80FA12                  	cmp dl, T_fraction
 31478 00017271 7402                    	je .L_fraction
 31479 00017273 EB46                    	jmp .L_eq_false
 31480                                  .L_fraction:
 31481 00017275 488B4601                	mov rax, qword [rsi + 1]
 31482 00017279 483B4701                	cmp rax, qword [rdi + 1]
 31483 0001727D 753C                    	jne .L_eq_false
 31484 0001727F 488B4609                	mov rax, qword [rsi + 1 + 8]
 31485 00017283 483B4709                	cmp rax, qword [rdi + 1 + 8]
 31486 00017287 7532                    	jne .L_eq_false
 31487 00017289 EB24                    	jmp .L_eq_true
 31488                                  .L_real:
 31489 0001728B 488B4601                	mov rax, qword [rsi + 1]
 31490 0001728F 483B4701                	cmp rax, qword [rdi + 1]
 31491                                  .L_interned_symbol:
 31492                                  	; never reached, because interned_symbols are static!
 31493                                  	; but I'm keeping it in case, I'll ever change
 31494                                  	; the implementation
 31495 00017293 488B4601                	mov rax, qword [rsi + 1]
 31496 00017297 483B4701                	cmp rax, qword [rdi + 1]
 31497                                  .L_uninterned_symbol:
 31498 0001729B 4C8B4701                        mov r8, qword [rdi + 1]
 31499 0001729F 4C3B4601                        cmp r8, qword [rsi + 1]
 31500 000172A3 7516                            jne .L_eq_false
 31501 000172A5 EB08                            jmp .L_eq_true
 31502                                  .L_char:
 31503 000172A7 8A5E01                  	mov bl, byte [rsi + 1]
 31504 000172AA 3A5F01                  	cmp bl, byte [rdi + 1]
 31505 000172AD 750C                    	jne .L_eq_false
 31506                                  .L_eq_true:
 31507 000172AF 48B8-                   	mov rax, sob_boolean_true
 31507 000172B1 [0300000000000000] 
 31508 000172B9 EB0A                    	jmp .L_eq_exit
 31509                                  .L_eq_false:
 31510 000172BB 48B8-                   	mov rax, sob_boolean_false
 31510 000172BD [0200000000000000] 
 31511                                  .L_eq_exit:
 31512 000172C5 C9                      	leave
 31513 000172C6 C22000                  	ret AND_KILL_FRAME(2)
 31514                                  
 31515                                  make_real:
 31516 000172C9 C8000000                        enter 0, 0
 31517 000172CD BF09000000                      mov rdi, (1 + 8)
 31518 000172D2 E8B2E5FFFF                      call malloc
 31519 000172D7 C60013                          mov byte [rax], T_real
 31520 000172DA F20F114001                      movsd qword [rax + 1], xmm0
 31521 000172DF C9                              leave 
 31522 000172E0 C3                              ret
 31523                                          
 31524                                  make_integer:
 31525 000172E1 C8000000                        enter 0, 0
 31526 000172E5 4889FE                          mov rsi, rdi
 31527 000172E8 BF09000000                      mov rdi, (1 + 8)
 31528 000172ED E897E5FFFF                      call malloc
 31529 000172F2 C60011                          mov byte [rax], T_integer
 31530 000172F5 48897001                        mov qword [rax + 1], rsi
 31531 000172F9 C9                              leave
 31532 000172FA C3                              ret
 31533                                          
 31534                                  L_error_integer_range:
 31535 000172FB 488B3C25[00000000]              mov rdi, qword [stderr]
 31536 00017303 48BE-                           mov rsi, fmt_integer_range
 31536 00017305 [371D000000000000] 
 31537 0001730D B800000000                      mov rax, 0
 31538                                          ENTER
    44 00017312 C8000000            <1>  enter 0, 0
    45 00017316 4883E4F0            <1>  and rsp, ~15
 31539 0001731A E8(00000000)                    call fprintf
 31540                                          LEAVE
    49 0001731F C9                  <1>  leave
 31541 00017320 48C7C0FBFFFFFF                  mov rax, -5
 31542 00017327 E8(00000000)                    call exit
 31543                                  
 31544                                  L_error_arg_count_0:
 31545 0001732C 488B3C25[00000000]              mov rdi, qword [stderr]
 31546 00017334 48BE-                           mov rsi, fmt_arg_count_0
 31546 00017336 [351C000000000000] 
 31547 0001733E 488B5518                        mov rdx, COUNT
 31548 00017342 B800000000                      mov rax, 0
 31549                                          ENTER
    44 00017347 C8000000            <1>  enter 0, 0
    45 0001734B 4883E4F0            <1>  and rsp, ~15
 31550 0001734F E8(00000000)                    call fprintf
 31551                                          LEAVE
    49 00017354 C9                  <1>  leave
 31552 00017355 48C7C0FDFFFFFF                  mov rax, -3
 31553 0001735C E8(00000000)                    call exit
 31554                                  
 31555                                  L_error_arg_count_1:
 31556 00017361 488B3C25[00000000]              mov rdi, qword [stderr]
 31557 00017369 48BE-                           mov rsi, fmt_arg_count_1
 31557 0001736B [5D1C000000000000] 
 31558 00017373 488B5518                        mov rdx, COUNT
 31559 00017377 B800000000                      mov rax, 0
 31560                                          ENTER
    44 0001737C C8000000            <1>  enter 0, 0
    45 00017380 4883E4F0            <1>  and rsp, ~15
 31561 00017384 E8(00000000)                    call fprintf
 31562                                          LEAVE
    49 00017389 C9                  <1>  leave
 31563 0001738A 48C7C0FDFFFFFF                  mov rax, -3
 31564 00017391 E8(00000000)                    call exit
 31565                                  
 31566                                  L_error_arg_count_2:
 31567 00017396 488B3C25[00000000]              mov rdi, qword [stderr]
 31568 0001739E 48BE-                           mov rsi, fmt_arg_count_2
 31568 000173A0 [C31C000000000000] 
 31569 000173A8 488B5518                        mov rdx, COUNT
 31570 000173AC B800000000                      mov rax, 0
 31571                                          ENTER
    44 000173B1 C8000000            <1>  enter 0, 0
    45 000173B5 4883E4F0            <1>  and rsp, ~15
 31572 000173B9 E8(00000000)                    call fprintf
 31573                                          LEAVE
    49 000173BE C9                  <1>  leave
 31574 000173BF 48C7C0FDFFFFFF                  mov rax, -3
 31575 000173C6 E8(00000000)                    call exit
 31576                                  
 31577                                  L_error_arg_count_12:
 31578 000173CB 488B3C25[00000000]              mov rdi, qword [stderr]
 31579 000173D3 48BE-                           mov rsi, fmt_arg_count_12
 31579 000173D5 [831C000000000000] 
 31580 000173DD 488B5518                        mov rdx, COUNT
 31581 000173E1 B800000000                      mov rax, 0
 31582                                          ENTER
    44 000173E6 C8000000            <1>  enter 0, 0
    45 000173EA 4883E4F0            <1>  and rsp, ~15
 31583 000173EE E8(00000000)                    call fprintf
 31584                                          LEAVE
    49 000173F3 C9                  <1>  leave
 31585 000173F4 48C7C0FDFFFFFF                  mov rax, -3
 31586 000173FB E8(00000000)                    call exit
 31587                                  
 31588                                  L_error_arg_count_3:
 31589 00017400 488B3C25[00000000]              mov rdi, qword [stderr]
 31590 00017408 48BE-                           mov rsi, fmt_arg_count_3
 31590 0001740A [EA1C000000000000] 
 31591 00017412 488B5518                        mov rdx, COUNT
 31592 00017416 B800000000                      mov rax, 0
 31593                                          ENTER
    44 0001741B C8000000            <1>  enter 0, 0
    45 0001741F 4883E4F0            <1>  and rsp, ~15
 31594 00017423 E8(00000000)                    call fprintf
 31595                                          LEAVE
    49 00017428 C9                  <1>  leave
 31596 00017429 48C7C0FDFFFFFF                  mov rax, -3
 31597 00017430 E8(00000000)                    call exit
 31598                                          
 31599                                  L_error_incorrect_type:
 31600 00017435 488B3C25[00000000]              mov rdi, qword [stderr]
 31601 0001743D 48BE-                           mov rsi, fmt_type
 31601 0001743F [131D000000000000] 
 31602 00017447 B800000000                      mov rax, 0
 31603                                          ENTER
    44 0001744C C8000000            <1>  enter 0, 0
    45 00017450 4883E4F0            <1>  and rsp, ~15
 31604 00017454 E8(00000000)                    call fprintf
 31605                                          LEAVE
    49 00017459 C9                  <1>  leave
 31606 0001745A 48C7C0FCFFFFFF                  mov rax, -4
 31607 00017461 E8(00000000)                    call exit
 31608                                  
 31609                                  L_error_division_by_zero:
 31610 00017466 488B3C25[00000000]              mov rdi, qword [stderr]
 31611 0001746E 48BE-                           mov rsi, fmt_division_by_zero
 31611 00017470 [541D000000000000] 
 31612 00017478 B800000000                      mov rax, 0
 31613                                          ENTER
    44 0001747D C8000000            <1>  enter 0, 0
    45 00017481 4883E4F0            <1>  and rsp, ~15
 31614 00017485 E8(00000000)                    call fprintf
 31615                                          LEAVE
    49 0001748A C9                  <1>  leave
 31616 0001748B 48C7C0F8FFFFFF                  mov rax, -8
 31617 00017492 E8(00000000)                    call exit
 31618                                  
 31619                                  section .data
 31620                                  gensym_count:
 31621 00001C2A 0000000000000000                dq 0
 31622                                  fmt_char:
 31623 00001C32 256300                          db `%c\0`
 31624                                  fmt_arg_count_0:
 31625 00001C35 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 31625 00001C3E 74696E67207A65726F-
 31625 00001C47 20617267756D656E74-
 31625 00001C50 732E20466F756E6420-
 31625 00001C59 25640A00           
 31626                                  fmt_arg_count_1:
 31627 00001C5D 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 31627 00001C66 74696E67206F6E6520-
 31627 00001C6F 617267756D656E742E-
 31627 00001C78 20466F756E64202564-
 31627 00001C81 0A00               
 31628                                  fmt_arg_count_12:
 31629 00001C83 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 31629 00001C8C 74696E67206F6E6520-
 31629 00001C95 726571756972656420-
 31629 00001C9E 616E64206F6E65206F-
 31629 00001CA7 7074696F6E616C2061-
 31629 00001CB0 7267756D656E742E20-
 31629 00001CB9 466F756E642025640A-
 31629 00001CC2 00                 
 31630                                  fmt_arg_count_2:
 31631 00001CC3 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 31631 00001CCC 74696E672074776F20-
 31631 00001CD5 617267756D656E7473-
 31631 00001CDE 2E20466F756E642025-
 31631 00001CE7 640A00             
 31632                                  fmt_arg_count_3:
 31633 00001CEA 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 31633 00001CF3 74696E672074687265-
 31633 00001CFC 6520617267756D656E-
 31633 00001D05 74732E20466F756E64-
 31633 00001D0E 2025640A00         
 31634                                  fmt_type:
 31635 00001D13 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 31635 00001D1C 696F6E207061737365-
 31635 00001D25 6420696E636F727265-
 31635 00001D2E 637420747970650A00 
 31636                                  fmt_integer_range:
 31637 00001D37 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 31637 00001D40 7265637420696E7465-
 31637 00001D49 6765722072616E6765-
 31637 00001D52 0A00               
 31638                                  fmt_division_by_zero:
 31639 00001D54 212121204469766973-             db `!!! Division by zero\n\0`
 31639 00001D5D 696F6E206279207A65-
 31639 00001D66 726F0A00           
 31640                                  fmt_scheme_error_part_1:
 31641 00001D6A 0A2121212054686520-             db `\n!!! The procedure \0`
 31641 00001D73 70726F636564757265-
 31641 00001D7C 2000               
 31642                                  fmt_scheme_error_part_2:
 31643 00001D7E 2061736B656420746F-             db ` asked to terminate the program\n`
 31643 00001D87 207465726D696E6174-
 31643 00001D90 65207468652070726F-
 31643 00001D99 6772616D0A         
 31644 00001D9E 202020207769746820-             db `    with the following message:\n\n\0`
 31644 00001DA7 74686520666F6C6C6F-
 31644 00001DB0 77696E67206D657373-
 31644 00001DB9 6167653A0A0A00     
 31645                                  fmt_scheme_error_part_3:
 31646 00001DC0 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 31646 00001DC9 210A0A00           
