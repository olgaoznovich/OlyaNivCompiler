     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RDP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "caar"
   441 0000056E 0400000000000000        	dq 4
   442 00000576 63616172                	db 0x63, 0x61, 0x61, 0x72
   443                                  	; L_constants + 1402:
   444 0000057A 03                      	db T_string	; "cadr"
   445 0000057B 0400000000000000        	dq 4
   446 00000583 63616472                	db 0x63, 0x61, 0x64, 0x72
   447                                  	; L_constants + 1415:
   448 00000587 03                      	db T_string	; "cdar"
   449 00000588 0400000000000000        	dq 4
   450 00000590 63646172                	db 0x63, 0x64, 0x61, 0x72
   451                                  	; L_constants + 1428:
   452 00000594 03                      	db T_string	; "cddr"
   453 00000595 0400000000000000        	dq 4
   454 0000059D 63646472                	db 0x63, 0x64, 0x64, 0x72
   455                                  	; L_constants + 1441:
   456 000005A1 03                      	db T_string	; "caaar"
   457 000005A2 0500000000000000        	dq 5
   458 000005AA 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   459                                  	; L_constants + 1455:
   460 000005AF 03                      	db T_string	; "caadr"
   461 000005B0 0500000000000000        	dq 5
   462 000005B8 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   463                                  	; L_constants + 1469:
   464 000005BD 03                      	db T_string	; "cadar"
   465 000005BE 0500000000000000        	dq 5
   466 000005C6 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   467                                  	; L_constants + 1483:
   468 000005CB 03                      	db T_string	; "caddr"
   469 000005CC 0500000000000000        	dq 5
   470 000005D4 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   471                                  	; L_constants + 1497:
   472 000005D9 03                      	db T_string	; "cdaar"
   473 000005DA 0500000000000000        	dq 5
   474 000005E2 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   475                                  	; L_constants + 1511:
   476 000005E7 03                      	db T_string	; "cdadr"
   477 000005E8 0500000000000000        	dq 5
   478 000005F0 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   479                                  	; L_constants + 1525:
   480 000005F5 03                      	db T_string	; "cddar"
   481 000005F6 0500000000000000        	dq 5
   482 000005FE 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   483                                  	; L_constants + 1539:
   484 00000603 03                      	db T_string	; "cdddr"
   485 00000604 0500000000000000        	dq 5
   486 0000060C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   487                                  	; L_constants + 1553:
   488 00000611 03                      	db T_string	; "caaaar"
   489 00000612 0600000000000000        	dq 6
   490 0000061A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   491                                  	; L_constants + 1568:
   492 00000620 03                      	db T_string	; "caaadr"
   493 00000621 0600000000000000        	dq 6
   494 00000629 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   495                                  	; L_constants + 1583:
   496 0000062F 03                      	db T_string	; "caadar"
   497 00000630 0600000000000000        	dq 6
   498 00000638 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   499                                  	; L_constants + 1598:
   500 0000063E 03                      	db T_string	; "caaddr"
   501 0000063F 0600000000000000        	dq 6
   502 00000647 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   503                                  	; L_constants + 1613:
   504 0000064D 03                      	db T_string	; "cadaar"
   505 0000064E 0600000000000000        	dq 6
   506 00000656 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   507                                  	; L_constants + 1628:
   508 0000065C 03                      	db T_string	; "cadadr"
   509 0000065D 0600000000000000        	dq 6
   510 00000665 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   511                                  	; L_constants + 1643:
   512 0000066B 03                      	db T_string	; "caddar"
   513 0000066C 0600000000000000        	dq 6
   514 00000674 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   515                                  	; L_constants + 1658:
   516 0000067A 03                      	db T_string	; "cadddr"
   517 0000067B 0600000000000000        	dq 6
   518 00000683 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   519                                  	; L_constants + 1673:
   520 00000689 03                      	db T_string	; "cdaaar"
   521 0000068A 0600000000000000        	dq 6
   522 00000692 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   523                                  	; L_constants + 1688:
   524 00000698 03                      	db T_string	; "cdaadr"
   525 00000699 0600000000000000        	dq 6
   526 000006A1 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   527                                  	; L_constants + 1703:
   528 000006A7 03                      	db T_string	; "cdadar"
   529 000006A8 0600000000000000        	dq 6
   530 000006B0 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   531                                  	; L_constants + 1718:
   532 000006B6 03                      	db T_string	; "cdaddr"
   533 000006B7 0600000000000000        	dq 6
   534 000006BF 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   535                                  	; L_constants + 1733:
   536 000006C5 03                      	db T_string	; "cddaar"
   537 000006C6 0600000000000000        	dq 6
   538 000006CE 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   539                                  	; L_constants + 1748:
   540 000006D4 03                      	db T_string	; "cddadr"
   541 000006D5 0600000000000000        	dq 6
   542 000006DD 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   543                                  	; L_constants + 1763:
   544 000006E3 03                      	db T_string	; "cdddar"
   545 000006E4 0600000000000000        	dq 6
   546 000006EC 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   547                                  	; L_constants + 1778:
   548 000006F2 03                      	db T_string	; "cddddr"
   549 000006F3 0600000000000000        	dq 6
   550 000006FB 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   551                                  	; L_constants + 1793:
   552 00000701 03                      	db T_string	; "list?"
   553 00000702 0500000000000000        	dq 5
   554 0000070A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   555                                  	; L_constants + 1807:
   556 0000070F 03                      	db T_string	; "list"
   557 00000710 0400000000000000        	dq 4
   558 00000718 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   559                                  	; L_constants + 1820:
   560 0000071C 03                      	db T_string	; "not"
   561 0000071D 0300000000000000        	dq 3
   562 00000725 6E6F74                  	db 0x6E, 0x6F, 0x74
   563                                  	; L_constants + 1832:
   564 00000728 03                      	db T_string	; "rational?"
   565 00000729 0900000000000000        	dq 9
   566 00000731 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   567 00000739 3F                      	db 0x3F
   568                                  	; L_constants + 1850:
   569 0000073A 03                      	db T_string	; "list*"
   570 0000073B 0500000000000000        	dq 5
   571 00000743 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   572                                  	; L_constants + 1864:
   573 00000748 03                      	db T_string	; "whatever"
   574 00000749 0800000000000000        	dq 8
   575 00000751 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   576                                  	; L_constants + 1881:
   577 00000759 41                      	db T_interned_symbol	; whatever
   578 0000075A [4807000000000000]      	dq L_constants + 1864
   579                                  	; L_constants + 1890:
   580 00000762 03                      	db T_string	; "apply"
   581 00000763 0500000000000000        	dq 5
   582 0000076B 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   583                                  	; L_constants + 1904:
   584 00000770 03                      	db T_string	; "ormap"
   585 00000771 0500000000000000        	dq 5
   586 00000779 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   587                                  	; L_constants + 1918:
   588 0000077E 03                      	db T_string	; "map"
   589 0000077F 0300000000000000        	dq 3
   590 00000787 6D6170                  	db 0x6D, 0x61, 0x70
   591                                  	; L_constants + 1930:
   592 0000078A 03                      	db T_string	; "andmap"
   593 0000078B 0600000000000000        	dq 6
   594 00000793 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   595                                  	; L_constants + 1945:
   596 00000799 03                      	db T_string	; "reverse"
   597 0000079A 0700000000000000        	dq 7
   598 000007A2 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   599                                  	; L_constants + 1961:
   600 000007A9 03                      	db T_string	; "fold-left"
   601 000007AA 0900000000000000        	dq 9
   602 000007B2 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   603 000007BA 74                      	db 0x74
   604                                  	; L_constants + 1979:
   605 000007BB 03                      	db T_string	; "append"
   606 000007BC 0600000000000000        	dq 6
   607 000007C4 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   608                                  	; L_constants + 1994:
   609 000007CA 03                      	db T_string	; "fold-right"
   610 000007CB 0A00000000000000        	dq 10
   611 000007D3 666F6C642D726967        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x72, 0x69, 0x67
   612 000007DB 6874                    	db 0x68, 0x74
   613                                  	; L_constants + 2013:
   614 000007DD 03                      	db T_string	; "+"
   615 000007DE 0100000000000000        	dq 1
   616 000007E6 2B                      	db 0x2B
   617                                  	; L_constants + 2023:
   618 000007E7 11                      	db T_integer	; 0
   619 000007E8 0000000000000000        	dq 0
   620                                  	; L_constants + 2032:
   621 000007F0 03                      	db T_string	; "__bin_integer_to_fr...
   622 000007F1 1900000000000000        	dq 25
   623 000007F9 5F5F62696E5F696E        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x5F, 0x69, 0x6E
   624 00000801 74656765725F746F        	db 0x74, 0x65, 0x67, 0x65, 0x72, 0x5F, 0x74, 0x6F
   625 00000809 5F6672616374696F        	db 0x5F, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F
   626 00000811 6E                      	db 0x6E
   627                                  	; L_constants + 2066:
   628 00000812 41                      	db T_interned_symbol	; +
   629 00000813 [DD07000000000000]      	dq L_constants + 2013
   630                                  	; L_constants + 2075:
   631 0000081B 03                      	db T_string	; "all arguments need ...
   632 0000081C 2000000000000000        	dq 32
   633 00000824 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   634 0000082C 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   635 00000834 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   636 0000083C 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   637                                  	; L_constants + 2116:
   638 00000844 03                      	db T_string	; "-"
   639 00000845 0100000000000000        	dq 1
   640 0000084D 2D                      	db 0x2D
   641                                  	; L_constants + 2126:
   642 0000084E 03                      	db T_string	; "real"
   643 0000084F 0400000000000000        	dq 4
   644 00000857 7265616C                	db 0x72, 0x65, 0x61, 0x6C
   645                                  	; L_constants + 2139:
   646 0000085B 41                      	db T_interned_symbol	; -
   647 0000085C [4408000000000000]      	dq L_constants + 2116
   648                                  	; L_constants + 2148:
   649 00000864 03                      	db T_string	; "*"
   650 00000865 0100000000000000        	dq 1
   651 0000086D 2A                      	db 0x2A
   652                                  	; L_constants + 2158:
   653 0000086E 11                      	db T_integer	; 1
   654 0000086F 0100000000000000        	dq 1
   655                                  	; L_constants + 2167:
   656 00000877 41                      	db T_interned_symbol	; *
   657 00000878 [6408000000000000]      	dq L_constants + 2148
   658                                  	; L_constants + 2176:
   659 00000880 03                      	db T_string	; "/"
   660 00000881 0100000000000000        	dq 1
   661 00000889 2F                      	db 0x2F
   662                                  	; L_constants + 2186:
   663 0000088A 41                      	db T_interned_symbol	; /
   664 0000088B [8008000000000000]      	dq L_constants + 2176
   665                                  	; L_constants + 2195:
   666 00000893 03                      	db T_string	; "fact"
   667 00000894 0400000000000000        	dq 4
   668 0000089C 66616374                	db 0x66, 0x61, 0x63, 0x74
   669                                  	; L_constants + 2208:
   670 000008A0 03                      	db T_string	; "<"
   671 000008A1 0100000000000000        	dq 1
   672 000008A9 3C                      	db 0x3C
   673                                  	; L_constants + 2218:
   674 000008AA 03                      	db T_string	; "<="
   675 000008AB 0200000000000000        	dq 2
   676 000008B3 3C3D                    	db 0x3C, 0x3D
   677                                  	; L_constants + 2229:
   678 000008B5 03                      	db T_string	; ">"
   679 000008B6 0100000000000000        	dq 1
   680 000008BE 3E                      	db 0x3E
   681                                  	; L_constants + 2239:
   682 000008BF 03                      	db T_string	; ">="
   683 000008C0 0200000000000000        	dq 2
   684 000008C8 3E3D                    	db 0x3E, 0x3D
   685                                  	; L_constants + 2250:
   686 000008CA 03                      	db T_string	; "="
   687 000008CB 0100000000000000        	dq 1
   688 000008D3 3D                      	db 0x3D
   689                                  	; L_constants + 2260:
   690 000008D4 03                      	db T_string	; "generic-comparator"
   691 000008D5 1200000000000000        	dq 18
   692 000008DD 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   693 000008E5 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   694 000008ED 6F72                    	db 0x6F, 0x72
   695                                  	; L_constants + 2287:
   696 000008EF 41                      	db T_interned_symbol	; generic-comparator
   697 000008F0 [D408000000000000]      	dq L_constants + 2260
   698                                  	; L_constants + 2296:
   699 000008F8 03                      	db T_string	; "all the arguments m...
   700 000008F9 2100000000000000        	dq 33
   701 00000901 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   702 00000909 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   703 00000911 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   704 00000919 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   705 00000921 73                      	db 0x73
   706                                  	; L_constants + 2338:
   707 00000922 03                      	db T_string	; "make-list"
   708 00000923 0900000000000000        	dq 9
   709 0000092B 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   710 00000933 74                      	db 0x74
   711                                  	; L_constants + 2356:
   712 00000934 41                      	db T_interned_symbol	; make-list
   713 00000935 [2209000000000000]      	dq L_constants + 2338
   714                                  	; L_constants + 2365:
   715 0000093D 03                      	db T_string	; "Usage: (make-list l...
   716 0000093E 2D00000000000000        	dq 45
   717 00000946 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   718 0000094E 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   719 00000956 74206C656E677468        	db 0x74, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   720 0000095E 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   721 00000966 616C2D696E69742D        	db 0x61, 0x6C, 0x2D, 0x69, 0x6E, 0x69, 0x74, 0x2D
   722 0000096E 6368617229              	db 0x63, 0x68, 0x61, 0x72, 0x29
   723                                  	; L_constants + 2419:
   724 00000973 03                      	db T_string	; "char<?"
   725 00000974 0600000000000000        	dq 6
   726 0000097C 636861723C3F            	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3F
   727                                  	; L_constants + 2434:
   728 00000982 03                      	db T_string	; "char<=?"
   729 00000983 0700000000000000        	dq 7
   730 0000098B 636861723C3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3D, 0x3F
   731                                  	; L_constants + 2450:
   732 00000992 03                      	db T_string	; "char=?"
   733 00000993 0600000000000000        	dq 6
   734 0000099B 636861723D3F            	db 0x63, 0x68, 0x61, 0x72, 0x3D, 0x3F
   735                                  	; L_constants + 2465:
   736 000009A1 03                      	db T_string	; "char>?"
   737 000009A2 0600000000000000        	dq 6
   738 000009AA 636861723E3F            	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3F
   739                                  	; L_constants + 2480:
   740 000009B0 03                      	db T_string	; "char>=?"
   741 000009B1 0700000000000000        	dq 7
   742 000009B9 636861723E3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3D, 0x3F
   743                                  	; L_constants + 2496:
   744 000009C0 03                      	db T_string	; "char-downcase"
   745 000009C1 0D00000000000000        	dq 13
   746 000009C9 636861722D646F77        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x64, 0x6F, 0x77
   747 000009D1 6E63617365              	db 0x6E, 0x63, 0x61, 0x73, 0x65
   748                                  	; L_constants + 2518:
   749 000009D6 03                      	db T_string	; "char-upcase"
   750 000009D7 0B00000000000000        	dq 11
   751 000009DF 636861722D757063        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x75, 0x70, 0x63
   752 000009E7 617365                  	db 0x61, 0x73, 0x65
   753                                  	; L_constants + 2538:
   754 000009EA 0241                    	db T_char, 0x41	; #\A
   755                                  	; L_constants + 2540:
   756 000009EC 025A                    	db T_char, 0x5A	; #\Z
   757                                  	; L_constants + 2542:
   758 000009EE 0261                    	db T_char, 0x61	; #\a
   759                                  	; L_constants + 2544:
   760 000009F0 027A                    	db T_char, 0x7A	; #\z
   761                                  	; L_constants + 2546:
   762 000009F2 03                      	db T_string	; "char-ci<?"
   763 000009F3 0900000000000000        	dq 9
   764 000009FB 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   765 00000A03 3F                      	db 0x3F
   766                                  	; L_constants + 2564:
   767 00000A04 03                      	db T_string	; "char-ci<=?"
   768 00000A05 0A00000000000000        	dq 10
   769 00000A0D 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   770 00000A15 3D3F                    	db 0x3D, 0x3F
   771                                  	; L_constants + 2583:
   772 00000A17 03                      	db T_string	; "char-ci=?"
   773 00000A18 0900000000000000        	dq 9
   774 00000A20 636861722D63693D        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3D
   775 00000A28 3F                      	db 0x3F
   776                                  	; L_constants + 2601:
   777 00000A29 03                      	db T_string	; "char-ci>?"
   778 00000A2A 0900000000000000        	dq 9
   779 00000A32 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   780 00000A3A 3F                      	db 0x3F
   781                                  	; L_constants + 2619:
   782 00000A3B 03                      	db T_string	; "char-ci>=?"
   783 00000A3C 0A00000000000000        	dq 10
   784 00000A44 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   785 00000A4C 3D3F                    	db 0x3D, 0x3F
   786                                  	; L_constants + 2638:
   787 00000A4E 03                      	db T_string	; "string-downcase"
   788 00000A4F 0F00000000000000        	dq 15
   789 00000A57 737472696E672D64        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x64
   790 00000A5F 6F776E63617365          	db 0x6F, 0x77, 0x6E, 0x63, 0x61, 0x73, 0x65
   791                                  	; L_constants + 2662:
   792 00000A66 03                      	db T_string	; "string-upcase"
   793 00000A67 0D00000000000000        	dq 13
   794 00000A6F 737472696E672D75        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x75
   795 00000A77 7063617365              	db 0x70, 0x63, 0x61, 0x73, 0x65
   796                                  	; L_constants + 2684:
   797 00000A7C 03                      	db T_string	; "list->string"
   798 00000A7D 0C00000000000000        	dq 12
   799 00000A85 6C6973742D3E7374        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x73, 0x74
   800 00000A8D 72696E67                	db 0x72, 0x69, 0x6E, 0x67
   801                                  	; L_constants + 2705:
   802 00000A91 03                      	db T_string	; "string->list"
   803 00000A92 0C00000000000000        	dq 12
   804 00000A9A 737472696E672D3E        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x3E
   805 00000AA2 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   806                                  	; L_constants + 2726:
   807 00000AA6 03                      	db T_string	; "string<?"
   808 00000AA7 0800000000000000        	dq 8
   809 00000AAF 737472696E673C3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3F
   810                                  	; L_constants + 2743:
   811 00000AB7 03                      	db T_string	; "string<=?"
   812 00000AB8 0900000000000000        	dq 9
   813 00000AC0 737472696E673C3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3D
   814 00000AC8 3F                      	db 0x3F
   815                                  	; L_constants + 2761:
   816 00000AC9 03                      	db T_string	; "string=?"
   817 00000ACA 0800000000000000        	dq 8
   818 00000AD2 737472696E673D3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3D, 0x3F
   819                                  	; L_constants + 2778:
   820 00000ADA 03                      	db T_string	; "string>=?"
   821 00000ADB 0900000000000000        	dq 9
   822 00000AE3 737472696E673E3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3D
   823 00000AEB 3F                      	db 0x3F
   824                                  	; L_constants + 2796:
   825 00000AEC 03                      	db T_string	; "string>?"
   826 00000AED 0800000000000000        	dq 8
   827 00000AF5 737472696E673E3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3F
   828                                  	; L_constants + 2813:
   829 00000AFD 03                      	db T_string	; "string-ci<?"
   830 00000AFE 0B00000000000000        	dq 11
   831 00000B06 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   832 00000B0E 693C3F                  	db 0x69, 0x3C, 0x3F
   833                                  	; L_constants + 2833:
   834 00000B11 03                      	db T_string	; "string-ci<=?"
   835 00000B12 0C00000000000000        	dq 12
   836 00000B1A 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   837 00000B22 693C3D3F                	db 0x69, 0x3C, 0x3D, 0x3F
   838                                  	; L_constants + 2854:
   839 00000B26 03                      	db T_string	; "string-ci=?"
   840 00000B27 0B00000000000000        	dq 11
   841 00000B2F 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   842 00000B37 693D3F                  	db 0x69, 0x3D, 0x3F
   843                                  	; L_constants + 2874:
   844 00000B3A 03                      	db T_string	; "string-ci>=?"
   845 00000B3B 0C00000000000000        	dq 12
   846 00000B43 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   847 00000B4B 693E3D3F                	db 0x69, 0x3E, 0x3D, 0x3F
   848                                  	; L_constants + 2895:
   849 00000B4F 03                      	db T_string	; "string-ci>?"
   850 00000B50 0B00000000000000        	dq 11
   851 00000B58 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   852 00000B60 693E3F                  	db 0x69, 0x3E, 0x3F
   853                                  	; L_constants + 2915:
   854 00000B63 03                      	db T_string	; "length"
   855 00000B64 0600000000000000        	dq 6
   856 00000B6C 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   857                                  	; L_constants + 2930:
   858 00000B72 41                      	db T_interned_symbol	; make-vector
   859 00000B73 [4804000000000000]      	dq L_constants + 1096
   860                                  	; L_constants + 2939:
   861 00000B7B 03                      	db T_string	; "Usage: (make-vector...
   862 00000B7C 2B00000000000000        	dq 43
   863 00000B84 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   864 00000B8C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   865 00000B94 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   866 00000B9C 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   867 00000BA4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   868 00000BAC 6C7429                  	db 0x6C, 0x74, 0x29
   869                                  	; L_constants + 2991:
   870 00000BAF 41                      	db T_interned_symbol	; make-string
   871 00000BB0 [5C04000000000000]      	dq L_constants + 1116
   872                                  	; L_constants + 3000:
   873 00000BB8 03                      	db T_string	; "Usage: (make-string...
   874 00000BB9 2B00000000000000        	dq 43
   875 00000BC1 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   876 00000BC9 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   877 00000BD1 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   878 00000BD9 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   879 00000BE1 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   880 00000BE9 6C7429                  	db 0x6C, 0x74, 0x29
   881                                  	; L_constants + 3052:
   882 00000BEC 03                      	db T_string	; "list->vector"
   883 00000BED 0C00000000000000        	dq 12
   884 00000BF5 6C6973742D3E7665        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x76, 0x65
   885 00000BFD 63746F72                	db 0x63, 0x74, 0x6F, 0x72
   886                                  	; L_constants + 3073:
   887 00000C01 03                      	db T_string	; "vector"
   888 00000C02 0600000000000000        	dq 6
   889 00000C0A 766563746F72            	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72
   890                                  	; L_constants + 3088:
   891 00000C10 03                      	db T_string	; "vector->list"
   892 00000C11 0C00000000000000        	dq 12
   893 00000C19 766563746F722D3E        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x3E
   894 00000C21 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   895                                  	; L_constants + 3109:
   896 00000C25 03                      	db T_string	; "random"
   897 00000C26 0600000000000000        	dq 6
   898 00000C2E 72616E646F6D            	db 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D
   899                                  	; L_constants + 3124:
   900 00000C34 03                      	db T_string	; "positive?"
   901 00000C35 0900000000000000        	dq 9
   902 00000C3D 706F736974697665        	db 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65
   903 00000C45 3F                      	db 0x3F
   904                                  	; L_constants + 3142:
   905 00000C46 03                      	db T_string	; "negative?"
   906 00000C47 0900000000000000        	dq 9
   907 00000C4F 6E65676174697665        	db 0x6E, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65
   908 00000C57 3F                      	db 0x3F
   909                                  	; L_constants + 3160:
   910 00000C58 03                      	db T_string	; "even?"
   911 00000C59 0500000000000000        	dq 5
   912 00000C61 6576656E3F              	db 0x65, 0x76, 0x65, 0x6E, 0x3F
   913                                  	; L_constants + 3174:
   914 00000C66 11                      	db T_integer	; 2
   915 00000C67 0200000000000000        	dq 2
   916                                  	; L_constants + 3183:
   917 00000C6F 03                      	db T_string	; "odd?"
   918 00000C70 0400000000000000        	dq 4
   919 00000C78 6F64643F                	db 0x6F, 0x64, 0x64, 0x3F
   920                                  	; L_constants + 3196:
   921 00000C7C 03                      	db T_string	; "abs"
   922 00000C7D 0300000000000000        	dq 3
   923 00000C85 616273                  	db 0x61, 0x62, 0x73
   924                                  	; L_constants + 3208:
   925 00000C88 03                      	db T_string	; "equal?"
   926 00000C89 0600000000000000        	dq 6
   927 00000C91 657175616C3F            	db 0x65, 0x71, 0x75, 0x61, 0x6C, 0x3F
   928                                  	; L_constants + 3223:
   929 00000C97 03                      	db T_string	; "assoc"
   930 00000C98 0500000000000000        	dq 5
   931 00000CA0 6173736F63              	db 0x61, 0x73, 0x73, 0x6F, 0x63
   932                                  	; L_constants + 3237:
   933 00000CA5 03                      	db T_string	; "string-append"
   934 00000CA6 0D00000000000000        	dq 13
   935 00000CAE 737472696E672D61        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x61
   936 00000CB6 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   937                                  	; L_constants + 3259:
   938 00000CBB 03                      	db T_string	; "vector-append"
   939 00000CBC 0D00000000000000        	dq 13
   940 00000CC4 766563746F722D61        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x61
   941 00000CCC 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   942                                  	; L_constants + 3281:
   943 00000CD1 03                      	db T_string	; "string-reverse"
   944 00000CD2 0E00000000000000        	dq 14
   945 00000CDA 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   946 00000CE2 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   947                                  	; L_constants + 3304:
   948 00000CE8 03                      	db T_string	; "vector-reverse"
   949 00000CE9 0E00000000000000        	dq 14
   950 00000CF1 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   951 00000CF9 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   952                                  	; L_constants + 3327:
   953 00000CFF 03                      	db T_string	; "string-reverse!"
   954 00000D00 0F00000000000000        	dq 15
   955 00000D08 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   956 00000D10 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   957                                  	; L_constants + 3351:
   958 00000D17 03                      	db T_string	; "vector-reverse!"
   959 00000D18 0F00000000000000        	dq 15
   960 00000D20 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   961 00000D28 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   962                                  	; L_constants + 3375:
   963 00000D2F 03                      	db T_string	; "make-list-thunk"
   964 00000D30 0F00000000000000        	dq 15
   965 00000D38 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   966 00000D40 742D7468756E6B          	db 0x74, 0x2D, 0x74, 0x68, 0x75, 0x6E, 0x6B
   967                                  	; L_constants + 3399:
   968 00000D47 03                      	db T_string	; "make-string-thunk"
   969 00000D48 1100000000000000        	dq 17
   970 00000D50 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   971 00000D58 696E672D7468756E        	db 0x69, 0x6E, 0x67, 0x2D, 0x74, 0x68, 0x75, 0x6E
   972 00000D60 6B                      	db 0x6B
   973                                  	; L_constants + 3425:
   974 00000D61 03                      	db T_string	; "make-vector-thunk"
   975 00000D62 1100000000000000        	dq 17
   976 00000D6A 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   977 00000D72 746F722D7468756E        	db 0x74, 0x6F, 0x72, 0x2D, 0x74, 0x68, 0x75, 0x6E
   978 00000D7A 6B                      	db 0x6B
   979                                  	; L_constants + 3451:
   980 00000D7B 03                      	db T_string	; "logarithm"
   981 00000D7C 0900000000000000        	dq 9
   982 00000D84 6C6F676172697468        	db 0x6C, 0x6F, 0x67, 0x61, 0x72, 0x69, 0x74, 0x68
   983 00000D8C 6D                      	db 0x6D
   984                                  	; L_constants + 3469:
   985 00000D8D 13                      	db T_real	; 1.000000
   986 00000D8E 000000000000F03F        	dq 1.000000
   987                                  	; L_constants + 3478:
   988 00000D96 03                      	db T_string	; "newline"
   989 00000D97 0700000000000000        	dq 7
   990 00000D9F 6E65776C696E65          	db 0x6E, 0x65, 0x77, 0x6C, 0x69, 0x6E, 0x65
   991                                  	; L_constants + 3494:
   992 00000DA6 020A                    	db T_char, 0x0A	; #\newline
   993                                  	; L_constants + 3496:
   994 00000DA8 03                      	db T_string	; "a"
   995 00000DA9 0100000000000000        	dq 1
   996 00000DB1 61                      	db 0x61
   997                                  	; L_constants + 3506:
   998 00000DB2 41                      	db T_interned_symbol	; a
   999 00000DB3 [A80D000000000000]      	dq L_constants + 3496
  1000                                  	; L_constants + 3515:
  1001 00000DBB 21                      	db T_pair	; (a)
  1002 00000DBC [B20D000000000000]-     	dq L_constants + 3506, L_constants + 1
  1002 00000DC4 [0100000000000000] 
  1003                                  free_var_0:	; location of null?
  1004 00000DCC [D40D000000000000]      	dq .undefined_object
  1005                                  .undefined_object:
  1006 00000DD4 05                      	db T_undefined
  1007 00000DD5 [0600000000000000]      	dq L_constants + 6
  1008                                  
  1009                                  free_var_1:	; location of pair?
  1010 00000DDD [E50D000000000000]      	dq .undefined_object
  1011                                  .undefined_object:
  1012 00000DE5 05                      	db T_undefined
  1013 00000DE6 [1400000000000000]      	dq L_constants + 20
  1014                                  
  1015                                  free_var_2:	; location of void?
  1016 00000DEE [F60D000000000000]      	dq .undefined_object
  1017                                  .undefined_object:
  1018 00000DF6 05                      	db T_undefined
  1019 00000DF7 [2200000000000000]      	dq L_constants + 34
  1020                                  
  1021                                  free_var_3:	; location of char?
  1022 00000DFF [070E000000000000]      	dq .undefined_object
  1023                                  .undefined_object:
  1024 00000E07 05                      	db T_undefined
  1025 00000E08 [3000000000000000]      	dq L_constants + 48
  1026                                  
  1027                                  free_var_4:	; location of string?
  1028 00000E10 [180E000000000000]      	dq .undefined_object
  1029                                  .undefined_object:
  1030 00000E18 05                      	db T_undefined
  1031 00000E19 [3E00000000000000]      	dq L_constants + 62
  1032                                  
  1033                                  free_var_5:	; location of interned-symbol?
  1034 00000E21 [290E000000000000]      	dq .undefined_object
  1035                                  .undefined_object:
  1036 00000E29 05                      	db T_undefined
  1037 00000E2A [4E00000000000000]      	dq L_constants + 78
  1038                                  
  1039                                  free_var_6:	; location of vector?
  1040 00000E32 [3A0E000000000000]      	dq .undefined_object
  1041                                  .undefined_object:
  1042 00000E3A 05                      	db T_undefined
  1043 00000E3B [6700000000000000]      	dq L_constants + 103
  1044                                  
  1045                                  free_var_7:	; location of procedure?
  1046 00000E43 [4B0E000000000000]      	dq .undefined_object
  1047                                  .undefined_object:
  1048 00000E4B 05                      	db T_undefined
  1049 00000E4C [7700000000000000]      	dq L_constants + 119
  1050                                  
  1051                                  free_var_8:	; location of real?
  1052 00000E54 [5C0E000000000000]      	dq .undefined_object
  1053                                  .undefined_object:
  1054 00000E5C 05                      	db T_undefined
  1055 00000E5D [8A00000000000000]      	dq L_constants + 138
  1056                                  
  1057                                  free_var_9:	; location of fraction?
  1058 00000E65 [6D0E000000000000]      	dq .undefined_object
  1059                                  .undefined_object:
  1060 00000E6D 05                      	db T_undefined
  1061 00000E6E [9800000000000000]      	dq L_constants + 152
  1062                                  
  1063                                  free_var_10:	; location of boolean?
  1064 00000E76 [7E0E000000000000]      	dq .undefined_object
  1065                                  .undefined_object:
  1066 00000E7E 05                      	db T_undefined
  1067 00000E7F [AA00000000000000]      	dq L_constants + 170
  1068                                  
  1069                                  free_var_11:	; location of number?
  1070 00000E87 [8F0E000000000000]      	dq .undefined_object
  1071                                  .undefined_object:
  1072 00000E8F 05                      	db T_undefined
  1073 00000E90 [BB00000000000000]      	dq L_constants + 187
  1074                                  
  1075                                  free_var_12:	; location of collection?
  1076 00000E98 [A00E000000000000]      	dq .undefined_object
  1077                                  .undefined_object:
  1078 00000EA0 05                      	db T_undefined
  1079 00000EA1 [CB00000000000000]      	dq L_constants + 203
  1080                                  
  1081                                  free_var_13:	; location of cons
  1082 00000EA9 [B10E000000000000]      	dq .undefined_object
  1083                                  .undefined_object:
  1084 00000EB1 05                      	db T_undefined
  1085 00000EB2 [DF00000000000000]      	dq L_constants + 223
  1086                                  
  1087                                  free_var_14:	; location of display-sexpr
  1088 00000EBA [C20E000000000000]      	dq .undefined_object
  1089                                  .undefined_object:
  1090 00000EC2 05                      	db T_undefined
  1091 00000EC3 [EC00000000000000]      	dq L_constants + 236
  1092                                  
  1093                                  free_var_15:	; location of write-char
  1094 00000ECB [D30E000000000000]      	dq .undefined_object
  1095                                  .undefined_object:
  1096 00000ED3 05                      	db T_undefined
  1097 00000ED4 [0201000000000000]      	dq L_constants + 258
  1098                                  
  1099                                  free_var_16:	; location of car
  1100 00000EDC [E40E000000000000]      	dq .undefined_object
  1101                                  .undefined_object:
  1102 00000EE4 05                      	db T_undefined
  1103 00000EE5 [1501000000000000]      	dq L_constants + 277
  1104                                  
  1105                                  free_var_17:	; location of cdr
  1106 00000EED [F50E000000000000]      	dq .undefined_object
  1107                                  .undefined_object:
  1108 00000EF5 05                      	db T_undefined
  1109 00000EF6 [2101000000000000]      	dq L_constants + 289
  1110                                  
  1111                                  free_var_18:	; location of string-length
  1112 00000EFE [060F000000000000]      	dq .undefined_object
  1113                                  .undefined_object:
  1114 00000F06 05                      	db T_undefined
  1115 00000F07 [2D01000000000000]      	dq L_constants + 301
  1116                                  
  1117                                  free_var_19:	; location of vector-length
  1118 00000F0F [170F000000000000]      	dq .undefined_object
  1119                                  .undefined_object:
  1120 00000F17 05                      	db T_undefined
  1121 00000F18 [4301000000000000]      	dq L_constants + 323
  1122                                  
  1123                                  free_var_20:	; location of real->integer
  1124 00000F20 [280F000000000000]      	dq .undefined_object
  1125                                  .undefined_object:
  1126 00000F28 05                      	db T_undefined
  1127 00000F29 [5901000000000000]      	dq L_constants + 345
  1128                                  
  1129                                  free_var_21:	; location of exit
  1130 00000F31 [390F000000000000]      	dq .undefined_object
  1131                                  .undefined_object:
  1132 00000F39 05                      	db T_undefined
  1133 00000F3A [6F01000000000000]      	dq L_constants + 367
  1134                                  
  1135                                  free_var_22:	; location of integer->real
  1136 00000F42 [4A0F000000000000]      	dq .undefined_object
  1137                                  .undefined_object:
  1138 00000F4A 05                      	db T_undefined
  1139 00000F4B [7C01000000000000]      	dq L_constants + 380
  1140                                  
  1141                                  free_var_23:	; location of fraction->real
  1142 00000F53 [5B0F000000000000]      	dq .undefined_object
  1143                                  .undefined_object:
  1144 00000F5B 05                      	db T_undefined
  1145 00000F5C [9201000000000000]      	dq L_constants + 402
  1146                                  
  1147                                  free_var_24:	; location of char->integer
  1148 00000F64 [6C0F000000000000]      	dq .undefined_object
  1149                                  .undefined_object:
  1150 00000F6C 05                      	db T_undefined
  1151 00000F6D [A901000000000000]      	dq L_constants + 425
  1152                                  
  1153                                  free_var_25:	; location of integer->char
  1154 00000F75 [7D0F000000000000]      	dq .undefined_object
  1155                                  .undefined_object:
  1156 00000F7D 05                      	db T_undefined
  1157 00000F7E [BF01000000000000]      	dq L_constants + 447
  1158                                  
  1159                                  free_var_26:	; location of trng
  1160 00000F86 [8E0F000000000000]      	dq .undefined_object
  1161                                  .undefined_object:
  1162 00000F8E 05                      	db T_undefined
  1163 00000F8F [D501000000000000]      	dq L_constants + 469
  1164                                  
  1165                                  free_var_27:	; location of zero?
  1166 00000F97 [9F0F000000000000]      	dq .undefined_object
  1167                                  .undefined_object:
  1168 00000F9F 05                      	db T_undefined
  1169 00000FA0 [E201000000000000]      	dq L_constants + 482
  1170                                  
  1171                                  free_var_28:	; location of integer?
  1172 00000FA8 [B00F000000000000]      	dq .undefined_object
  1173                                  .undefined_object:
  1174 00000FB0 05                      	db T_undefined
  1175 00000FB1 [F001000000000000]      	dq L_constants + 496
  1176                                  
  1177                                  free_var_29:	; location of __bin-apply
  1178 00000FB9 [C10F000000000000]      	dq .undefined_object
  1179                                  .undefined_object:
  1180 00000FC1 05                      	db T_undefined
  1181 00000FC2 [0102000000000000]      	dq L_constants + 513
  1182                                  
  1183                                  free_var_30:	; location of __bin-add-rr
  1184 00000FCA [D20F000000000000]      	dq .undefined_object
  1185                                  .undefined_object:
  1186 00000FD2 05                      	db T_undefined
  1187 00000FD3 [1502000000000000]      	dq L_constants + 533
  1188                                  
  1189                                  free_var_31:	; location of __bin-sub-rr
  1190 00000FDB [E30F000000000000]      	dq .undefined_object
  1191                                  .undefined_object:
  1192 00000FE3 05                      	db T_undefined
  1193 00000FE4 [2A02000000000000]      	dq L_constants + 554
  1194                                  
  1195                                  free_var_32:	; location of __bin-mul-rr
  1196 00000FEC [F40F000000000000]      	dq .undefined_object
  1197                                  .undefined_object:
  1198 00000FF4 05                      	db T_undefined
  1199 00000FF5 [3F02000000000000]      	dq L_constants + 575
  1200                                  
  1201                                  free_var_33:	; location of __bin-div-rr
  1202 00000FFD [0510000000000000]      	dq .undefined_object
  1203                                  .undefined_object:
  1204 00001005 05                      	db T_undefined
  1205 00001006 [5402000000000000]      	dq L_constants + 596
  1206                                  
  1207                                  free_var_34:	; location of __bin-add-qq
  1208 0000100E [1610000000000000]      	dq .undefined_object
  1209                                  .undefined_object:
  1210 00001016 05                      	db T_undefined
  1211 00001017 [6902000000000000]      	dq L_constants + 617
  1212                                  
  1213                                  free_var_35:	; location of __bin-sub-qq
  1214 0000101F [2710000000000000]      	dq .undefined_object
  1215                                  .undefined_object:
  1216 00001027 05                      	db T_undefined
  1217 00001028 [7E02000000000000]      	dq L_constants + 638
  1218                                  
  1219                                  free_var_36:	; location of __bin-mul-qq
  1220 00001030 [3810000000000000]      	dq .undefined_object
  1221                                  .undefined_object:
  1222 00001038 05                      	db T_undefined
  1223 00001039 [9302000000000000]      	dq L_constants + 659
  1224                                  
  1225                                  free_var_37:	; location of __bin-div-qq
  1226 00001041 [4910000000000000]      	dq .undefined_object
  1227                                  .undefined_object:
  1228 00001049 05                      	db T_undefined
  1229 0000104A [A802000000000000]      	dq L_constants + 680
  1230                                  
  1231                                  free_var_38:	; location of __bin-add-zz
  1232 00001052 [5A10000000000000]      	dq .undefined_object
  1233                                  .undefined_object:
  1234 0000105A 05                      	db T_undefined
  1235 0000105B [BD02000000000000]      	dq L_constants + 701
  1236                                  
  1237                                  free_var_39:	; location of __bin-sub-zz
  1238 00001063 [6B10000000000000]      	dq .undefined_object
  1239                                  .undefined_object:
  1240 0000106B 05                      	db T_undefined
  1241 0000106C [D202000000000000]      	dq L_constants + 722
  1242                                  
  1243                                  free_var_40:	; location of __bin-mul-zz
  1244 00001074 [7C10000000000000]      	dq .undefined_object
  1245                                  .undefined_object:
  1246 0000107C 05                      	db T_undefined
  1247 0000107D [E702000000000000]      	dq L_constants + 743
  1248                                  
  1249                                  free_var_41:	; location of __bin-div-zz
  1250 00001085 [8D10000000000000]      	dq .undefined_object
  1251                                  .undefined_object:
  1252 0000108D 05                      	db T_undefined
  1253 0000108E [FC02000000000000]      	dq L_constants + 764
  1254                                  
  1255                                  free_var_42:	; location of error
  1256 00001096 [9E10000000000000]      	dq .undefined_object
  1257                                  .undefined_object:
  1258 0000109E 05                      	db T_undefined
  1259 0000109F [1103000000000000]      	dq L_constants + 785
  1260                                  
  1261                                  free_var_43:	; location of __bin-less-than-rr
  1262 000010A7 [AF10000000000000]      	dq .undefined_object
  1263                                  .undefined_object:
  1264 000010AF 05                      	db T_undefined
  1265 000010B0 [1F03000000000000]      	dq L_constants + 799
  1266                                  
  1267                                  free_var_44:	; location of __bin-less-than-qq
  1268 000010B8 [C010000000000000]      	dq .undefined_object
  1269                                  .undefined_object:
  1270 000010C0 05                      	db T_undefined
  1271 000010C1 [3A03000000000000]      	dq L_constants + 826
  1272                                  
  1273                                  free_var_45:	; location of __bin-less-than-zz
  1274 000010C9 [D110000000000000]      	dq .undefined_object
  1275                                  .undefined_object:
  1276 000010D1 05                      	db T_undefined
  1277 000010D2 [5503000000000000]      	dq L_constants + 853
  1278                                  
  1279                                  free_var_46:	; location of __bin-equal-rr
  1280 000010DA [E210000000000000]      	dq .undefined_object
  1281                                  .undefined_object:
  1282 000010E2 05                      	db T_undefined
  1283 000010E3 [7003000000000000]      	dq L_constants + 880
  1284                                  
  1285                                  free_var_47:	; location of __bin-equal-qq
  1286 000010EB [F310000000000000]      	dq .undefined_object
  1287                                  .undefined_object:
  1288 000010F3 05                      	db T_undefined
  1289 000010F4 [8703000000000000]      	dq L_constants + 903
  1290                                  
  1291                                  free_var_48:	; location of __bin-equal-zz
  1292 000010FC [0411000000000000]      	dq .undefined_object
  1293                                  .undefined_object:
  1294 00001104 05                      	db T_undefined
  1295 00001105 [9E03000000000000]      	dq L_constants + 926
  1296                                  
  1297                                  free_var_49:	; location of quotient
  1298 0000110D [1511000000000000]      	dq .undefined_object
  1299                                  .undefined_object:
  1300 00001115 05                      	db T_undefined
  1301 00001116 [B503000000000000]      	dq L_constants + 949
  1302                                  
  1303                                  free_var_50:	; location of remainder
  1304 0000111E [2611000000000000]      	dq .undefined_object
  1305                                  .undefined_object:
  1306 00001126 05                      	db T_undefined
  1307 00001127 [C603000000000000]      	dq L_constants + 966
  1308                                  
  1309                                  free_var_51:	; location of set-car!
  1310 0000112F [3711000000000000]      	dq .undefined_object
  1311                                  .undefined_object:
  1312 00001137 05                      	db T_undefined
  1313 00001138 [D803000000000000]      	dq L_constants + 984
  1314                                  
  1315                                  free_var_52:	; location of set-cdr!
  1316 00001140 [4811000000000000]      	dq .undefined_object
  1317                                  .undefined_object:
  1318 00001148 05                      	db T_undefined
  1319 00001149 [E903000000000000]      	dq L_constants + 1001
  1320                                  
  1321                                  free_var_53:	; location of string-ref
  1322 00001151 [5911000000000000]      	dq .undefined_object
  1323                                  .undefined_object:
  1324 00001159 05                      	db T_undefined
  1325 0000115A [FA03000000000000]      	dq L_constants + 1018
  1326                                  
  1327                                  free_var_54:	; location of vector-ref
  1328 00001162 [6A11000000000000]      	dq .undefined_object
  1329                                  .undefined_object:
  1330 0000116A 05                      	db T_undefined
  1331 0000116B [0D04000000000000]      	dq L_constants + 1037
  1332                                  
  1333                                  free_var_55:	; location of vector-set!
  1334 00001173 [7B11000000000000]      	dq .undefined_object
  1335                                  .undefined_object:
  1336 0000117B 05                      	db T_undefined
  1337 0000117C [2004000000000000]      	dq L_constants + 1056
  1338                                  
  1339                                  free_var_56:	; location of string-set!
  1340 00001184 [8C11000000000000]      	dq .undefined_object
  1341                                  .undefined_object:
  1342 0000118C 05                      	db T_undefined
  1343 0000118D [3404000000000000]      	dq L_constants + 1076
  1344                                  
  1345                                  free_var_57:	; location of make-vector
  1346 00001195 [9D11000000000000]      	dq .undefined_object
  1347                                  .undefined_object:
  1348 0000119D 05                      	db T_undefined
  1349 0000119E [4804000000000000]      	dq L_constants + 1096
  1350                                  
  1351                                  free_var_58:	; location of make-string
  1352 000011A6 [AE11000000000000]      	dq .undefined_object
  1353                                  .undefined_object:
  1354 000011AE 05                      	db T_undefined
  1355 000011AF [5C04000000000000]      	dq L_constants + 1116
  1356                                  
  1357                                  free_var_59:	; location of numerator
  1358 000011B7 [BF11000000000000]      	dq .undefined_object
  1359                                  .undefined_object:
  1360 000011BF 05                      	db T_undefined
  1361 000011C0 [7004000000000000]      	dq L_constants + 1136
  1362                                  
  1363                                  free_var_60:	; location of denominator
  1364 000011C8 [D011000000000000]      	dq .undefined_object
  1365                                  .undefined_object:
  1366 000011D0 05                      	db T_undefined
  1367 000011D1 [8204000000000000]      	dq L_constants + 1154
  1368                                  
  1369                                  free_var_61:	; location of eq?
  1370 000011D9 [E111000000000000]      	dq .undefined_object
  1371                                  .undefined_object:
  1372 000011E1 05                      	db T_undefined
  1373 000011E2 [9604000000000000]      	dq L_constants + 1174
  1374                                  
  1375                                  free_var_62:	; location of __integer-to-fraction
  1376 000011EA [F211000000000000]      	dq .undefined_object
  1377                                  .undefined_object:
  1378 000011F2 05                      	db T_undefined
  1379 000011F3 [A204000000000000]      	dq L_constants + 1186
  1380                                  
  1381                                  free_var_63:	; location of logand
  1382 000011FB [0312000000000000]      	dq .undefined_object
  1383                                  .undefined_object:
  1384 00001203 05                      	db T_undefined
  1385 00001204 [C004000000000000]      	dq L_constants + 1216
  1386                                  
  1387                                  free_var_64:	; location of logor
  1388 0000120C [1412000000000000]      	dq .undefined_object
  1389                                  .undefined_object:
  1390 00001214 05                      	db T_undefined
  1391 00001215 [CF04000000000000]      	dq L_constants + 1231
  1392                                  
  1393                                  free_var_65:	; location of logxor
  1394 0000121D [2512000000000000]      	dq .undefined_object
  1395                                  .undefined_object:
  1396 00001225 05                      	db T_undefined
  1397 00001226 [DD04000000000000]      	dq L_constants + 1245
  1398                                  
  1399                                  free_var_66:	; location of lognot
  1400 0000122E [3612000000000000]      	dq .undefined_object
  1401                                  .undefined_object:
  1402 00001236 05                      	db T_undefined
  1403 00001237 [EC04000000000000]      	dq L_constants + 1260
  1404                                  
  1405                                  free_var_67:	; location of ash
  1406 0000123F [4712000000000000]      	dq .undefined_object
  1407                                  .undefined_object:
  1408 00001247 05                      	db T_undefined
  1409 00001248 [FB04000000000000]      	dq L_constants + 1275
  1410                                  
  1411                                  free_var_68:	; location of symbol?
  1412 00001250 [5812000000000000]      	dq .undefined_object
  1413                                  .undefined_object:
  1414 00001258 05                      	db T_undefined
  1415 00001259 [0705000000000000]      	dq L_constants + 1287
  1416                                  
  1417                                  free_var_69:	; location of uninterned-symbol?
  1418 00001261 [6912000000000000]      	dq .undefined_object
  1419                                  .undefined_object:
  1420 00001269 05                      	db T_undefined
  1421 0000126A [1705000000000000]      	dq L_constants + 1303
  1422                                  
  1423                                  free_var_70:	; location of gensym?
  1424 00001272 [7A12000000000000]      	dq .undefined_object
  1425                                  .undefined_object:
  1426 0000127A 05                      	db T_undefined
  1427 0000127B [3205000000000000]      	dq L_constants + 1330
  1428                                  
  1429                                  free_var_71:	; location of gensym
  1430 00001283 [8B12000000000000]      	dq .undefined_object
  1431                                  .undefined_object:
  1432 0000128B 05                      	db T_undefined
  1433 0000128C [4205000000000000]      	dq L_constants + 1346
  1434                                  
  1435                                  free_var_72:	; location of frame
  1436 00001294 [9C12000000000000]      	dq .undefined_object
  1437                                  .undefined_object:
  1438 0000129C 05                      	db T_undefined
  1439 0000129D [5105000000000000]      	dq L_constants + 1361
  1440                                  
  1441                                  free_var_73:	; location of break
  1442 000012A5 [AD12000000000000]      	dq .undefined_object
  1443                                  .undefined_object:
  1444 000012AD 05                      	db T_undefined
  1445 000012AE [5F05000000000000]      	dq L_constants + 1375
  1446                                  
  1447                                  free_var_74:	; location of caar
  1448 000012B6 [BE12000000000000]      	dq .undefined_object
  1449                                  .undefined_object:
  1450 000012BE 05                      	db T_undefined
  1451 000012BF [6D05000000000000]      	dq L_constants + 1389
  1452                                  
  1453                                  free_var_75:	; location of cadr
  1454 000012C7 [CF12000000000000]      	dq .undefined_object
  1455                                  .undefined_object:
  1456 000012CF 05                      	db T_undefined
  1457 000012D0 [7A05000000000000]      	dq L_constants + 1402
  1458                                  
  1459                                  free_var_76:	; location of cdar
  1460 000012D8 [E012000000000000]      	dq .undefined_object
  1461                                  .undefined_object:
  1462 000012E0 05                      	db T_undefined
  1463 000012E1 [8705000000000000]      	dq L_constants + 1415
  1464                                  
  1465                                  free_var_77:	; location of cddr
  1466 000012E9 [F112000000000000]      	dq .undefined_object
  1467                                  .undefined_object:
  1468 000012F1 05                      	db T_undefined
  1469 000012F2 [9405000000000000]      	dq L_constants + 1428
  1470                                  
  1471                                  free_var_78:	; location of caaar
  1472 000012FA [0213000000000000]      	dq .undefined_object
  1473                                  .undefined_object:
  1474 00001302 05                      	db T_undefined
  1475 00001303 [A105000000000000]      	dq L_constants + 1441
  1476                                  
  1477                                  free_var_79:	; location of caadr
  1478 0000130B [1313000000000000]      	dq .undefined_object
  1479                                  .undefined_object:
  1480 00001313 05                      	db T_undefined
  1481 00001314 [AF05000000000000]      	dq L_constants + 1455
  1482                                  
  1483                                  free_var_80:	; location of cadar
  1484 0000131C [2413000000000000]      	dq .undefined_object
  1485                                  .undefined_object:
  1486 00001324 05                      	db T_undefined
  1487 00001325 [BD05000000000000]      	dq L_constants + 1469
  1488                                  
  1489                                  free_var_81:	; location of caddr
  1490 0000132D [3513000000000000]      	dq .undefined_object
  1491                                  .undefined_object:
  1492 00001335 05                      	db T_undefined
  1493 00001336 [CB05000000000000]      	dq L_constants + 1483
  1494                                  
  1495                                  free_var_82:	; location of cdaar
  1496 0000133E [4613000000000000]      	dq .undefined_object
  1497                                  .undefined_object:
  1498 00001346 05                      	db T_undefined
  1499 00001347 [D905000000000000]      	dq L_constants + 1497
  1500                                  
  1501                                  free_var_83:	; location of cdadr
  1502 0000134F [5713000000000000]      	dq .undefined_object
  1503                                  .undefined_object:
  1504 00001357 05                      	db T_undefined
  1505 00001358 [E705000000000000]      	dq L_constants + 1511
  1506                                  
  1507                                  free_var_84:	; location of cddar
  1508 00001360 [6813000000000000]      	dq .undefined_object
  1509                                  .undefined_object:
  1510 00001368 05                      	db T_undefined
  1511 00001369 [F505000000000000]      	dq L_constants + 1525
  1512                                  
  1513                                  free_var_85:	; location of cdddr
  1514 00001371 [7913000000000000]      	dq .undefined_object
  1515                                  .undefined_object:
  1516 00001379 05                      	db T_undefined
  1517 0000137A [0306000000000000]      	dq L_constants + 1539
  1518                                  
  1519                                  free_var_86:	; location of caaaar
  1520 00001382 [8A13000000000000]      	dq .undefined_object
  1521                                  .undefined_object:
  1522 0000138A 05                      	db T_undefined
  1523 0000138B [1106000000000000]      	dq L_constants + 1553
  1524                                  
  1525                                  free_var_87:	; location of caaadr
  1526 00001393 [9B13000000000000]      	dq .undefined_object
  1527                                  .undefined_object:
  1528 0000139B 05                      	db T_undefined
  1529 0000139C [2006000000000000]      	dq L_constants + 1568
  1530                                  
  1531                                  free_var_88:	; location of caadar
  1532 000013A4 [AC13000000000000]      	dq .undefined_object
  1533                                  .undefined_object:
  1534 000013AC 05                      	db T_undefined
  1535 000013AD [2F06000000000000]      	dq L_constants + 1583
  1536                                  
  1537                                  free_var_89:	; location of caaddr
  1538 000013B5 [BD13000000000000]      	dq .undefined_object
  1539                                  .undefined_object:
  1540 000013BD 05                      	db T_undefined
  1541 000013BE [3E06000000000000]      	dq L_constants + 1598
  1542                                  
  1543                                  free_var_90:	; location of cadaar
  1544 000013C6 [CE13000000000000]      	dq .undefined_object
  1545                                  .undefined_object:
  1546 000013CE 05                      	db T_undefined
  1547 000013CF [4D06000000000000]      	dq L_constants + 1613
  1548                                  
  1549                                  free_var_91:	; location of cadadr
  1550 000013D7 [DF13000000000000]      	dq .undefined_object
  1551                                  .undefined_object:
  1552 000013DF 05                      	db T_undefined
  1553 000013E0 [5C06000000000000]      	dq L_constants + 1628
  1554                                  
  1555                                  free_var_92:	; location of caddar
  1556 000013E8 [F013000000000000]      	dq .undefined_object
  1557                                  .undefined_object:
  1558 000013F0 05                      	db T_undefined
  1559 000013F1 [6B06000000000000]      	dq L_constants + 1643
  1560                                  
  1561                                  free_var_93:	; location of cadddr
  1562 000013F9 [0114000000000000]      	dq .undefined_object
  1563                                  .undefined_object:
  1564 00001401 05                      	db T_undefined
  1565 00001402 [7A06000000000000]      	dq L_constants + 1658
  1566                                  
  1567                                  free_var_94:	; location of cdaaar
  1568 0000140A [1214000000000000]      	dq .undefined_object
  1569                                  .undefined_object:
  1570 00001412 05                      	db T_undefined
  1571 00001413 [8906000000000000]      	dq L_constants + 1673
  1572                                  
  1573                                  free_var_95:	; location of cdaadr
  1574 0000141B [2314000000000000]      	dq .undefined_object
  1575                                  .undefined_object:
  1576 00001423 05                      	db T_undefined
  1577 00001424 [9806000000000000]      	dq L_constants + 1688
  1578                                  
  1579                                  free_var_96:	; location of cdadar
  1580 0000142C [3414000000000000]      	dq .undefined_object
  1581                                  .undefined_object:
  1582 00001434 05                      	db T_undefined
  1583 00001435 [A706000000000000]      	dq L_constants + 1703
  1584                                  
  1585                                  free_var_97:	; location of cdaddr
  1586 0000143D [4514000000000000]      	dq .undefined_object
  1587                                  .undefined_object:
  1588 00001445 05                      	db T_undefined
  1589 00001446 [B606000000000000]      	dq L_constants + 1718
  1590                                  
  1591                                  free_var_98:	; location of cddaar
  1592 0000144E [5614000000000000]      	dq .undefined_object
  1593                                  .undefined_object:
  1594 00001456 05                      	db T_undefined
  1595 00001457 [C506000000000000]      	dq L_constants + 1733
  1596                                  
  1597                                  free_var_99:	; location of cddadr
  1598 0000145F [6714000000000000]      	dq .undefined_object
  1599                                  .undefined_object:
  1600 00001467 05                      	db T_undefined
  1601 00001468 [D406000000000000]      	dq L_constants + 1748
  1602                                  
  1603                                  free_var_100:	; location of cdddar
  1604 00001470 [7814000000000000]      	dq .undefined_object
  1605                                  .undefined_object:
  1606 00001478 05                      	db T_undefined
  1607 00001479 [E306000000000000]      	dq L_constants + 1763
  1608                                  
  1609                                  free_var_101:	; location of cddddr
  1610 00001481 [8914000000000000]      	dq .undefined_object
  1611                                  .undefined_object:
  1612 00001489 05                      	db T_undefined
  1613 0000148A [F206000000000000]      	dq L_constants + 1778
  1614                                  
  1615                                  free_var_102:	; location of list?
  1616 00001492 [9A14000000000000]      	dq .undefined_object
  1617                                  .undefined_object:
  1618 0000149A 05                      	db T_undefined
  1619 0000149B [0107000000000000]      	dq L_constants + 1793
  1620                                  
  1621                                  free_var_103:	; location of list
  1622 000014A3 [AB14000000000000]      	dq .undefined_object
  1623                                  .undefined_object:
  1624 000014AB 05                      	db T_undefined
  1625 000014AC [0F07000000000000]      	dq L_constants + 1807
  1626                                  
  1627                                  free_var_104:	; location of not
  1628 000014B4 [BC14000000000000]      	dq .undefined_object
  1629                                  .undefined_object:
  1630 000014BC 05                      	db T_undefined
  1631 000014BD [1C07000000000000]      	dq L_constants + 1820
  1632                                  
  1633                                  free_var_105:	; location of rational?
  1634 000014C5 [CD14000000000000]      	dq .undefined_object
  1635                                  .undefined_object:
  1636 000014CD 05                      	db T_undefined
  1637 000014CE [2807000000000000]      	dq L_constants + 1832
  1638                                  
  1639                                  free_var_106:	; location of list*
  1640 000014D6 [DE14000000000000]      	dq .undefined_object
  1641                                  .undefined_object:
  1642 000014DE 05                      	db T_undefined
  1643 000014DF [3A07000000000000]      	dq L_constants + 1850
  1644                                  
  1645                                  free_var_107:	; location of apply
  1646 000014E7 [EF14000000000000]      	dq .undefined_object
  1647                                  .undefined_object:
  1648 000014EF 05                      	db T_undefined
  1649 000014F0 [6207000000000000]      	dq L_constants + 1890
  1650                                  
  1651                                  free_var_108:	; location of ormap
  1652 000014F8 [0015000000000000]      	dq .undefined_object
  1653                                  .undefined_object:
  1654 00001500 05                      	db T_undefined
  1655 00001501 [7007000000000000]      	dq L_constants + 1904
  1656                                  
  1657                                  free_var_109:	; location of map
  1658 00001509 [1115000000000000]      	dq .undefined_object
  1659                                  .undefined_object:
  1660 00001511 05                      	db T_undefined
  1661 00001512 [7E07000000000000]      	dq L_constants + 1918
  1662                                  
  1663                                  free_var_110:	; location of andmap
  1664 0000151A [2215000000000000]      	dq .undefined_object
  1665                                  .undefined_object:
  1666 00001522 05                      	db T_undefined
  1667 00001523 [8A07000000000000]      	dq L_constants + 1930
  1668                                  
  1669                                  free_var_111:	; location of reverse
  1670 0000152B [3315000000000000]      	dq .undefined_object
  1671                                  .undefined_object:
  1672 00001533 05                      	db T_undefined
  1673 00001534 [9907000000000000]      	dq L_constants + 1945
  1674                                  
  1675                                  free_var_112:	; location of fold-left
  1676 0000153C [4415000000000000]      	dq .undefined_object
  1677                                  .undefined_object:
  1678 00001544 05                      	db T_undefined
  1679 00001545 [A907000000000000]      	dq L_constants + 1961
  1680                                  
  1681                                  free_var_113:	; location of append
  1682 0000154D [5515000000000000]      	dq .undefined_object
  1683                                  .undefined_object:
  1684 00001555 05                      	db T_undefined
  1685 00001556 [BB07000000000000]      	dq L_constants + 1979
  1686                                  
  1687                                  free_var_114:	; location of fold-right
  1688 0000155E [6615000000000000]      	dq .undefined_object
  1689                                  .undefined_object:
  1690 00001566 05                      	db T_undefined
  1691 00001567 [CA07000000000000]      	dq L_constants + 1994
  1692                                  
  1693                                  free_var_115:	; location of +
  1694 0000156F [7715000000000000]      	dq .undefined_object
  1695                                  .undefined_object:
  1696 00001577 05                      	db T_undefined
  1697 00001578 [DD07000000000000]      	dq L_constants + 2013
  1698                                  
  1699                                  free_var_116:	; location of __bin_integer_to_fraction
  1700 00001580 [8815000000000000]      	dq .undefined_object
  1701                                  .undefined_object:
  1702 00001588 05                      	db T_undefined
  1703 00001589 [F007000000000000]      	dq L_constants + 2032
  1704                                  
  1705                                  free_var_117:	; location of -
  1706 00001591 [9915000000000000]      	dq .undefined_object
  1707                                  .undefined_object:
  1708 00001599 05                      	db T_undefined
  1709 0000159A [4408000000000000]      	dq L_constants + 2116
  1710                                  
  1711                                  free_var_118:	; location of real
  1712 000015A2 [AA15000000000000]      	dq .undefined_object
  1713                                  .undefined_object:
  1714 000015AA 05                      	db T_undefined
  1715 000015AB [4E08000000000000]      	dq L_constants + 2126
  1716                                  
  1717                                  free_var_119:	; location of *
  1718 000015B3 [BB15000000000000]      	dq .undefined_object
  1719                                  .undefined_object:
  1720 000015BB 05                      	db T_undefined
  1721 000015BC [6408000000000000]      	dq L_constants + 2148
  1722                                  
  1723                                  free_var_120:	; location of /
  1724 000015C4 [CC15000000000000]      	dq .undefined_object
  1725                                  .undefined_object:
  1726 000015CC 05                      	db T_undefined
  1727 000015CD [8008000000000000]      	dq L_constants + 2176
  1728                                  
  1729                                  free_var_121:	; location of fact
  1730 000015D5 [DD15000000000000]      	dq .undefined_object
  1731                                  .undefined_object:
  1732 000015DD 05                      	db T_undefined
  1733 000015DE [9308000000000000]      	dq L_constants + 2195
  1734                                  
  1735                                  free_var_122:	; location of <
  1736 000015E6 [EE15000000000000]      	dq .undefined_object
  1737                                  .undefined_object:
  1738 000015EE 05                      	db T_undefined
  1739 000015EF [A008000000000000]      	dq L_constants + 2208
  1740                                  
  1741                                  free_var_123:	; location of <=
  1742 000015F7 [FF15000000000000]      	dq .undefined_object
  1743                                  .undefined_object:
  1744 000015FF 05                      	db T_undefined
  1745 00001600 [AA08000000000000]      	dq L_constants + 2218
  1746                                  
  1747                                  free_var_124:	; location of >
  1748 00001608 [1016000000000000]      	dq .undefined_object
  1749                                  .undefined_object:
  1750 00001610 05                      	db T_undefined
  1751 00001611 [B508000000000000]      	dq L_constants + 2229
  1752                                  
  1753                                  free_var_125:	; location of >=
  1754 00001619 [2116000000000000]      	dq .undefined_object
  1755                                  .undefined_object:
  1756 00001621 05                      	db T_undefined
  1757 00001622 [BF08000000000000]      	dq L_constants + 2239
  1758                                  
  1759                                  free_var_126:	; location of =
  1760 0000162A [3216000000000000]      	dq .undefined_object
  1761                                  .undefined_object:
  1762 00001632 05                      	db T_undefined
  1763 00001633 [CA08000000000000]      	dq L_constants + 2250
  1764                                  
  1765                                  free_var_127:	; location of make-list
  1766 0000163B [4316000000000000]      	dq .undefined_object
  1767                                  .undefined_object:
  1768 00001643 05                      	db T_undefined
  1769 00001644 [2209000000000000]      	dq L_constants + 2338
  1770                                  
  1771                                  free_var_128:	; location of char<?
  1772 0000164C [5416000000000000]      	dq .undefined_object
  1773                                  .undefined_object:
  1774 00001654 05                      	db T_undefined
  1775 00001655 [7309000000000000]      	dq L_constants + 2419
  1776                                  
  1777                                  free_var_129:	; location of char<=?
  1778 0000165D [6516000000000000]      	dq .undefined_object
  1779                                  .undefined_object:
  1780 00001665 05                      	db T_undefined
  1781 00001666 [8209000000000000]      	dq L_constants + 2434
  1782                                  
  1783                                  free_var_130:	; location of char=?
  1784 0000166E [7616000000000000]      	dq .undefined_object
  1785                                  .undefined_object:
  1786 00001676 05                      	db T_undefined
  1787 00001677 [9209000000000000]      	dq L_constants + 2450
  1788                                  
  1789                                  free_var_131:	; location of char>?
  1790 0000167F [8716000000000000]      	dq .undefined_object
  1791                                  .undefined_object:
  1792 00001687 05                      	db T_undefined
  1793 00001688 [A109000000000000]      	dq L_constants + 2465
  1794                                  
  1795                                  free_var_132:	; location of char>=?
  1796 00001690 [9816000000000000]      	dq .undefined_object
  1797                                  .undefined_object:
  1798 00001698 05                      	db T_undefined
  1799 00001699 [B009000000000000]      	dq L_constants + 2480
  1800                                  
  1801                                  free_var_133:	; location of char-downcase
  1802 000016A1 [A916000000000000]      	dq .undefined_object
  1803                                  .undefined_object:
  1804 000016A9 05                      	db T_undefined
  1805 000016AA [C009000000000000]      	dq L_constants + 2496
  1806                                  
  1807                                  free_var_134:	; location of char-upcase
  1808 000016B2 [BA16000000000000]      	dq .undefined_object
  1809                                  .undefined_object:
  1810 000016BA 05                      	db T_undefined
  1811 000016BB [D609000000000000]      	dq L_constants + 2518
  1812                                  
  1813                                  free_var_135:	; location of char-ci<?
  1814 000016C3 [CB16000000000000]      	dq .undefined_object
  1815                                  .undefined_object:
  1816 000016CB 05                      	db T_undefined
  1817 000016CC [F209000000000000]      	dq L_constants + 2546
  1818                                  
  1819                                  free_var_136:	; location of char-ci<=?
  1820 000016D4 [DC16000000000000]      	dq .undefined_object
  1821                                  .undefined_object:
  1822 000016DC 05                      	db T_undefined
  1823 000016DD [040A000000000000]      	dq L_constants + 2564
  1824                                  
  1825                                  free_var_137:	; location of char-ci=?
  1826 000016E5 [ED16000000000000]      	dq .undefined_object
  1827                                  .undefined_object:
  1828 000016ED 05                      	db T_undefined
  1829 000016EE [170A000000000000]      	dq L_constants + 2583
  1830                                  
  1831                                  free_var_138:	; location of char-ci>?
  1832 000016F6 [FE16000000000000]      	dq .undefined_object
  1833                                  .undefined_object:
  1834 000016FE 05                      	db T_undefined
  1835 000016FF [290A000000000000]      	dq L_constants + 2601
  1836                                  
  1837                                  free_var_139:	; location of char-ci>=?
  1838 00001707 [0F17000000000000]      	dq .undefined_object
  1839                                  .undefined_object:
  1840 0000170F 05                      	db T_undefined
  1841 00001710 [3B0A000000000000]      	dq L_constants + 2619
  1842                                  
  1843                                  free_var_140:	; location of string-downcase
  1844 00001718 [2017000000000000]      	dq .undefined_object
  1845                                  .undefined_object:
  1846 00001720 05                      	db T_undefined
  1847 00001721 [4E0A000000000000]      	dq L_constants + 2638
  1848                                  
  1849                                  free_var_141:	; location of string-upcase
  1850 00001729 [3117000000000000]      	dq .undefined_object
  1851                                  .undefined_object:
  1852 00001731 05                      	db T_undefined
  1853 00001732 [660A000000000000]      	dq L_constants + 2662
  1854                                  
  1855                                  free_var_142:	; location of list->string
  1856 0000173A [4217000000000000]      	dq .undefined_object
  1857                                  .undefined_object:
  1858 00001742 05                      	db T_undefined
  1859 00001743 [7C0A000000000000]      	dq L_constants + 2684
  1860                                  
  1861                                  free_var_143:	; location of string->list
  1862 0000174B [5317000000000000]      	dq .undefined_object
  1863                                  .undefined_object:
  1864 00001753 05                      	db T_undefined
  1865 00001754 [910A000000000000]      	dq L_constants + 2705
  1866                                  
  1867                                  free_var_144:	; location of string<?
  1868 0000175C [6417000000000000]      	dq .undefined_object
  1869                                  .undefined_object:
  1870 00001764 05                      	db T_undefined
  1871 00001765 [A60A000000000000]      	dq L_constants + 2726
  1872                                  
  1873                                  free_var_145:	; location of string<=?
  1874 0000176D [7517000000000000]      	dq .undefined_object
  1875                                  .undefined_object:
  1876 00001775 05                      	db T_undefined
  1877 00001776 [B70A000000000000]      	dq L_constants + 2743
  1878                                  
  1879                                  free_var_146:	; location of string=?
  1880 0000177E [8617000000000000]      	dq .undefined_object
  1881                                  .undefined_object:
  1882 00001786 05                      	db T_undefined
  1883 00001787 [C90A000000000000]      	dq L_constants + 2761
  1884                                  
  1885                                  free_var_147:	; location of string>=?
  1886 0000178F [9717000000000000]      	dq .undefined_object
  1887                                  .undefined_object:
  1888 00001797 05                      	db T_undefined
  1889 00001798 [DA0A000000000000]      	dq L_constants + 2778
  1890                                  
  1891                                  free_var_148:	; location of string>?
  1892 000017A0 [A817000000000000]      	dq .undefined_object
  1893                                  .undefined_object:
  1894 000017A8 05                      	db T_undefined
  1895 000017A9 [EC0A000000000000]      	dq L_constants + 2796
  1896                                  
  1897                                  free_var_149:	; location of string-ci<?
  1898 000017B1 [B917000000000000]      	dq .undefined_object
  1899                                  .undefined_object:
  1900 000017B9 05                      	db T_undefined
  1901 000017BA [FD0A000000000000]      	dq L_constants + 2813
  1902                                  
  1903                                  free_var_150:	; location of string-ci<=?
  1904 000017C2 [CA17000000000000]      	dq .undefined_object
  1905                                  .undefined_object:
  1906 000017CA 05                      	db T_undefined
  1907 000017CB [110B000000000000]      	dq L_constants + 2833
  1908                                  
  1909                                  free_var_151:	; location of string-ci=?
  1910 000017D3 [DB17000000000000]      	dq .undefined_object
  1911                                  .undefined_object:
  1912 000017DB 05                      	db T_undefined
  1913 000017DC [260B000000000000]      	dq L_constants + 2854
  1914                                  
  1915                                  free_var_152:	; location of string-ci>=?
  1916 000017E4 [EC17000000000000]      	dq .undefined_object
  1917                                  .undefined_object:
  1918 000017EC 05                      	db T_undefined
  1919 000017ED [3A0B000000000000]      	dq L_constants + 2874
  1920                                  
  1921                                  free_var_153:	; location of string-ci>?
  1922 000017F5 [FD17000000000000]      	dq .undefined_object
  1923                                  .undefined_object:
  1924 000017FD 05                      	db T_undefined
  1925 000017FE [4F0B000000000000]      	dq L_constants + 2895
  1926                                  
  1927                                  free_var_154:	; location of length
  1928 00001806 [0E18000000000000]      	dq .undefined_object
  1929                                  .undefined_object:
  1930 0000180E 05                      	db T_undefined
  1931 0000180F [630B000000000000]      	dq L_constants + 2915
  1932                                  
  1933                                  free_var_155:	; location of list->vector
  1934 00001817 [1F18000000000000]      	dq .undefined_object
  1935                                  .undefined_object:
  1936 0000181F 05                      	db T_undefined
  1937 00001820 [EC0B000000000000]      	dq L_constants + 3052
  1938                                  
  1939                                  free_var_156:	; location of vector
  1940 00001828 [3018000000000000]      	dq .undefined_object
  1941                                  .undefined_object:
  1942 00001830 05                      	db T_undefined
  1943 00001831 [010C000000000000]      	dq L_constants + 3073
  1944                                  
  1945                                  free_var_157:	; location of vector->list
  1946 00001839 [4118000000000000]      	dq .undefined_object
  1947                                  .undefined_object:
  1948 00001841 05                      	db T_undefined
  1949 00001842 [100C000000000000]      	dq L_constants + 3088
  1950                                  
  1951                                  free_var_158:	; location of random
  1952 0000184A [5218000000000000]      	dq .undefined_object
  1953                                  .undefined_object:
  1954 00001852 05                      	db T_undefined
  1955 00001853 [250C000000000000]      	dq L_constants + 3109
  1956                                  
  1957                                  free_var_159:	; location of positive?
  1958 0000185B [6318000000000000]      	dq .undefined_object
  1959                                  .undefined_object:
  1960 00001863 05                      	db T_undefined
  1961 00001864 [340C000000000000]      	dq L_constants + 3124
  1962                                  
  1963                                  free_var_160:	; location of negative?
  1964 0000186C [7418000000000000]      	dq .undefined_object
  1965                                  .undefined_object:
  1966 00001874 05                      	db T_undefined
  1967 00001875 [460C000000000000]      	dq L_constants + 3142
  1968                                  
  1969                                  free_var_161:	; location of even?
  1970 0000187D [8518000000000000]      	dq .undefined_object
  1971                                  .undefined_object:
  1972 00001885 05                      	db T_undefined
  1973 00001886 [580C000000000000]      	dq L_constants + 3160
  1974                                  
  1975                                  free_var_162:	; location of odd?
  1976 0000188E [9618000000000000]      	dq .undefined_object
  1977                                  .undefined_object:
  1978 00001896 05                      	db T_undefined
  1979 00001897 [6F0C000000000000]      	dq L_constants + 3183
  1980                                  
  1981                                  free_var_163:	; location of abs
  1982 0000189F [A718000000000000]      	dq .undefined_object
  1983                                  .undefined_object:
  1984 000018A7 05                      	db T_undefined
  1985 000018A8 [7C0C000000000000]      	dq L_constants + 3196
  1986                                  
  1987                                  free_var_164:	; location of equal?
  1988 000018B0 [B818000000000000]      	dq .undefined_object
  1989                                  .undefined_object:
  1990 000018B8 05                      	db T_undefined
  1991 000018B9 [880C000000000000]      	dq L_constants + 3208
  1992                                  
  1993                                  free_var_165:	; location of assoc
  1994 000018C1 [C918000000000000]      	dq .undefined_object
  1995                                  .undefined_object:
  1996 000018C9 05                      	db T_undefined
  1997 000018CA [970C000000000000]      	dq L_constants + 3223
  1998                                  
  1999                                  free_var_166:	; location of string-append
  2000 000018D2 [DA18000000000000]      	dq .undefined_object
  2001                                  .undefined_object:
  2002 000018DA 05                      	db T_undefined
  2003 000018DB [A50C000000000000]      	dq L_constants + 3237
  2004                                  
  2005                                  free_var_167:	; location of vector-append
  2006 000018E3 [EB18000000000000]      	dq .undefined_object
  2007                                  .undefined_object:
  2008 000018EB 05                      	db T_undefined
  2009 000018EC [BB0C000000000000]      	dq L_constants + 3259
  2010                                  
  2011                                  free_var_168:	; location of string-reverse
  2012 000018F4 [FC18000000000000]      	dq .undefined_object
  2013                                  .undefined_object:
  2014 000018FC 05                      	db T_undefined
  2015 000018FD [D10C000000000000]      	dq L_constants + 3281
  2016                                  
  2017                                  free_var_169:	; location of vector-reverse
  2018 00001905 [0D19000000000000]      	dq .undefined_object
  2019                                  .undefined_object:
  2020 0000190D 05                      	db T_undefined
  2021 0000190E [E80C000000000000]      	dq L_constants + 3304
  2022                                  
  2023                                  free_var_170:	; location of string-reverse!
  2024 00001916 [1E19000000000000]      	dq .undefined_object
  2025                                  .undefined_object:
  2026 0000191E 05                      	db T_undefined
  2027 0000191F [FF0C000000000000]      	dq L_constants + 3327
  2028                                  
  2029                                  free_var_171:	; location of vector-reverse!
  2030 00001927 [2F19000000000000]      	dq .undefined_object
  2031                                  .undefined_object:
  2032 0000192F 05                      	db T_undefined
  2033 00001930 [170D000000000000]      	dq L_constants + 3351
  2034                                  
  2035                                  free_var_172:	; location of make-list-thunk
  2036 00001938 [4019000000000000]      	dq .undefined_object
  2037                                  .undefined_object:
  2038 00001940 05                      	db T_undefined
  2039 00001941 [2F0D000000000000]      	dq L_constants + 3375
  2040                                  
  2041                                  free_var_173:	; location of make-string-thunk
  2042 00001949 [5119000000000000]      	dq .undefined_object
  2043                                  .undefined_object:
  2044 00001951 05                      	db T_undefined
  2045 00001952 [470D000000000000]      	dq L_constants + 3399
  2046                                  
  2047                                  free_var_174:	; location of make-vector-thunk
  2048 0000195A [6219000000000000]      	dq .undefined_object
  2049                                  .undefined_object:
  2050 00001962 05                      	db T_undefined
  2051 00001963 [610D000000000000]      	dq L_constants + 3425
  2052                                  
  2053                                  free_var_175:	; location of logarithm
  2054 0000196B [7319000000000000]      	dq .undefined_object
  2055                                  .undefined_object:
  2056 00001973 05                      	db T_undefined
  2057 00001974 [7B0D000000000000]      	dq L_constants + 3451
  2058                                  
  2059                                  free_var_176:	; location of newline
  2060 0000197C [8419000000000000]      	dq .undefined_object
  2061                                  .undefined_object:
  2062 00001984 05                      	db T_undefined
  2063 00001985 [960D000000000000]      	dq L_constants + 3478
  2064                                  
  2065                                  
  2066                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
  2067                                  global main
  2068                                  section .text
  2069                                  main:
  2070 00000000 C8000000                        enter 0, 0
  2071                                          
  2072                                  	; building closure for null?
  2073 00000004 48BF-                   	mov rdi, free_var_0
  2073 00000006 [CC0D000000000000] 
  2074 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
  2074 00000010 [1460010000000000] 
  2075 00000018 E8F85D0100              	call bind_primitive
  2076                                  
  2077                                  	; building closure for pair?
  2078 0000001D 48BF-                   	mov rdi, free_var_1
  2078 0000001F [DD0D000000000000] 
  2079 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
  2079 00000029 [4660010000000000] 
  2080 00000031 E8DF5D0100              	call bind_primitive
  2081                                  
  2082                                  	; building closure for void?
  2083 00000036 48BF-                   	mov rdi, free_var_2
  2083 00000038 [EE0D000000000000] 
  2084 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
  2084 00000042 [7860010000000000] 
  2085 0000004A E8C65D0100              	call bind_primitive
  2086                                  
  2087                                  	; building closure for char?
  2088 0000004F 48BF-                   	mov rdi, free_var_3
  2088 00000051 [FF0D000000000000] 
  2089 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
  2089 0000005B [AA60010000000000] 
  2090 00000063 E8AD5D0100              	call bind_primitive
  2091                                  
  2092                                  	; building closure for string?
  2093 00000068 48BF-                   	mov rdi, free_var_4
  2093 0000006A [100E000000000000] 
  2094 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
  2094 00000074 [DC60010000000000] 
  2095 0000007C E8945D0100              	call bind_primitive
  2096                                  
  2097                                  	; building closure for interned-symbol?
  2098 00000081 48BF-                   	mov rdi, free_var_5
  2098 00000083 [210E000000000000] 
  2099 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
  2099 0000008D [0E61010000000000] 
  2100 00000095 E87B5D0100              	call bind_primitive
  2101                                  
  2102                                  	; building closure for vector?
  2103 0000009A 48BF-                   	mov rdi, free_var_6
  2103 0000009C [320E000000000000] 
  2104 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
  2104 000000A6 [DA61010000000000] 
  2105 000000AE E8625D0100              	call bind_primitive
  2106                                  
  2107                                  	; building closure for procedure?
  2108 000000B3 48BF-                   	mov rdi, free_var_7
  2108 000000B5 [430E000000000000] 
  2109 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
  2109 000000BF [0C62010000000000] 
  2110 000000C7 E8495D0100              	call bind_primitive
  2111                                  
  2112                                  	; building closure for real?
  2113 000000CC 48BF-                   	mov rdi, free_var_8
  2113 000000CE [540E000000000000] 
  2114 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
  2114 000000D8 [3E62010000000000] 
  2115 000000E0 E8305D0100              	call bind_primitive
  2116                                  
  2117                                  	; building closure for fraction?
  2118 000000E5 48BF-                   	mov rdi, free_var_9
  2118 000000E7 [650E000000000000] 
  2119 000000EF 48BE-                   	mov rsi, L_code_ptr_is_fraction
  2119 000000F1 [7062010000000000] 
  2120 000000F9 E8175D0100              	call bind_primitive
  2121                                  
  2122                                  	; building closure for boolean?
  2123 000000FE 48BF-                   	mov rdi, free_var_10
  2123 00000100 [760E000000000000] 
  2124 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
  2124 0000010A [A262010000000000] 
  2125 00000112 E8FE5C0100              	call bind_primitive
  2126                                  
  2127                                  	; building closure for number?
  2128 00000117 48BF-                   	mov rdi, free_var_11
  2128 00000119 [870E000000000000] 
  2129 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
  2129 00000123 [3E63010000000000] 
  2130 0000012B E8E55C0100              	call bind_primitive
  2131                                  
  2132                                  	; building closure for collection?
  2133 00000130 48BF-                   	mov rdi, free_var_12
  2133 00000132 [980E000000000000] 
  2134 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
  2134 0000013C [7263010000000000] 
  2135 00000144 E8CC5C0100              	call bind_primitive
  2136                                  
  2137                                  	; building closure for cons
  2138 00000149 48BF-                   	mov rdi, free_var_13
  2138 0000014B [A90E000000000000] 
  2139 00000153 48BE-                   	mov rsi, L_code_ptr_cons
  2139 00000155 [A663010000000000] 
  2140 0000015D E8B35C0100              	call bind_primitive
  2141                                  
  2142                                  	; building closure for display-sexpr
  2143 00000162 48BF-                   	mov rdi, free_var_14
  2143 00000164 [BA0E000000000000] 
  2144 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
  2144 0000016E [D663010000000000] 
  2145 00000176 E89A5C0100              	call bind_primitive
  2146                                  
  2147                                  	; building closure for write-char
  2148 0000017B 48BF-                   	mov rdi, free_var_15
  2148 0000017D [CB0E000000000000] 
  2149 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
  2149 00000187 [FC63010000000000] 
  2150 0000018F E8815C0100              	call bind_primitive
  2151                                  
  2152                                  	; building closure for car
  2153 00000194 48BF-                   	mov rdi, free_var_16
  2153 00000196 [DC0E000000000000] 
  2154 0000019E 48BE-                   	mov rsi, L_code_ptr_car
  2154 000001A0 [4F64010000000000] 
  2155 000001A8 E8685C0100              	call bind_primitive
  2156                                  
  2157                                  	; building closure for cdr
  2158 000001AD 48BF-                   	mov rdi, free_var_17
  2158 000001AF [ED0E000000000000] 
  2159 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
  2159 000001B9 [7364010000000000] 
  2160 000001C1 E84F5C0100              	call bind_primitive
  2161                                  
  2162                                  	; building closure for string-length
  2163 000001C6 48BF-                   	mov rdi, free_var_18
  2163 000001C8 [FE0E000000000000] 
  2164 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
  2164 000001D2 [9764010000000000] 
  2165 000001DA E8365C0100              	call bind_primitive
  2166                                  
  2167                                  	; building closure for vector-length
  2168 000001DF 48BF-                   	mov rdi, free_var_19
  2168 000001E1 [0F0F000000000000] 
  2169 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
  2169 000001EB [C064010000000000] 
  2170 000001F3 E81D5C0100              	call bind_primitive
  2171                                  
  2172                                  	; building closure for real->integer
  2173 000001F8 48BF-                   	mov rdi, free_var_20
  2173 000001FA [200F000000000000] 
  2174 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
  2174 00000204 [E964010000000000] 
  2175 0000020C E8045C0100              	call bind_primitive
  2176                                  
  2177                                  	; building closure for exit
  2178 00000211 48BF-                   	mov rdi, free_var_21
  2178 00000213 [310F000000000000] 
  2179 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
  2179 0000021D [1865010000000000] 
  2180 00000225 E8EB5B0100              	call bind_primitive
  2181                                  
  2182                                  	; building closure for integer->real
  2183 0000022A 48BF-                   	mov rdi, free_var_22
  2183 0000022C [420F000000000000] 
  2184 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  2184 00000236 [3165010000000000] 
  2185 0000023E E8D25B0100              	call bind_primitive
  2186                                  
  2187                                  	; building closure for fraction->real
  2188 00000243 48BF-                   	mov rdi, free_var_23
  2188 00000245 [530F000000000000] 
  2189 0000024D 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  2189 0000024F [5F65010000000000] 
  2190 00000257 E8B95B0100              	call bind_primitive
  2191                                  
  2192                                  	; building closure for char->integer
  2193 0000025C 48BF-                   	mov rdi, free_var_24
  2193 0000025E [640F000000000000] 
  2194 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
  2194 00000268 [9A65010000000000] 
  2195 00000270 E8A05B0100              	call bind_primitive
  2196                                  
  2197                                  	; building closure for integer->char
  2198 00000275 48BF-                   	mov rdi, free_var_25
  2198 00000277 [750F000000000000] 
  2199 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
  2199 00000281 [0966010000000000] 
  2200 00000289 E8875B0100              	call bind_primitive
  2201                                  
  2202                                  	; building closure for trng
  2203 0000028E 48BF-                   	mov rdi, free_var_26
  2203 00000290 [860F000000000000] 
  2204 00000298 48BE-                   	mov rsi, L_code_ptr_trng
  2204 0000029A [5466010000000000] 
  2205 000002A2 E86E5B0100              	call bind_primitive
  2206                                  
  2207                                  	; building closure for zero?
  2208 000002A7 48BF-                   	mov rdi, free_var_27
  2208 000002A9 [970F000000000000] 
  2209 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
  2209 000002B3 [7366010000000000] 
  2210 000002BB E8555B0100              	call bind_primitive
  2211                                  
  2212                                  	; building closure for integer?
  2213 000002C0 48BF-                   	mov rdi, free_var_28
  2213 000002C2 [A80F000000000000] 
  2214 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
  2214 000002CC [D866010000000000] 
  2215 000002D4 E83C5B0100              	call bind_primitive
  2216                                  
  2217                                  	; building closure for __bin-apply
  2218 000002D9 48BF-                   	mov rdi, free_var_29
  2218 000002DB [B90F000000000000] 
  2219 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
  2219 000002E5 [855F010000000000] 
  2220 000002ED E8235B0100              	call bind_primitive
  2221                                  
  2222                                  	; building closure for __bin-add-rr
  2223 000002F2 48BF-                   	mov rdi, free_var_30
  2223 000002F4 [CA0F000000000000] 
  2224 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  2224 000002FE [0A67010000000000] 
  2225 00000306 E80A5B0100              	call bind_primitive
  2226                                  
  2227                                  	; building closure for __bin-sub-rr
  2228 0000030B 48BF-                   	mov rdi, free_var_31
  2228 0000030D [DB0F000000000000] 
  2229 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
  2229 00000317 [4A67010000000000] 
  2230 0000031F E8F15A0100              	call bind_primitive
  2231                                  
  2232                                  	; building closure for __bin-mul-rr
  2233 00000324 48BF-                   	mov rdi, free_var_32
  2233 00000326 [EC0F000000000000] 
  2234 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
  2234 00000330 [8A67010000000000] 
  2235 00000338 E8D85A0100              	call bind_primitive
  2236                                  
  2237                                  	; building closure for __bin-div-rr
  2238 0000033D 48BF-                   	mov rdi, free_var_33
  2238 0000033F [FD0F000000000000] 
  2239 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
  2239 00000349 [CA67010000000000] 
  2240 00000351 E8BF5A0100              	call bind_primitive
  2241                                  
  2242                                  	; building closure for __bin-add-qq
  2243 00000356 48BF-                   	mov rdi, free_var_34
  2243 00000358 [0E10000000000000] 
  2244 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  2244 00000362 [5468010000000000] 
  2245 0000036A E8A65A0100              	call bind_primitive
  2246                                  
  2247                                  	; building closure for __bin-sub-qq
  2248 0000036F 48BF-                   	mov rdi, free_var_35
  2248 00000371 [1F10000000000000] 
  2249 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
  2249 0000037B [F468010000000000] 
  2250 00000383 E88D5A0100              	call bind_primitive
  2251                                  
  2252                                  	; building closure for __bin-mul-qq
  2253 00000388 48BF-                   	mov rdi, free_var_36
  2253 0000038A [3010000000000000] 
  2254 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
  2254 00000394 [9969010000000000] 
  2255 0000039C E8745A0100              	call bind_primitive
  2256                                  
  2257                                  	; building closure for __bin-div-qq
  2258 000003A1 48BF-                   	mov rdi, free_var_37
  2258 000003A3 [4110000000000000] 
  2259 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
  2259 000003AD [336A010000000000] 
  2260 000003B5 E85B5A0100              	call bind_primitive
  2261                                  
  2262                                  	; building closure for __bin-add-zz
  2263 000003BA 48BF-                   	mov rdi, free_var_38
  2263 000003BC [5210000000000000] 
  2264 000003C4 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  2264 000003C6 [1868010000000000] 
  2265 000003CE E8425A0100              	call bind_primitive
  2266                                  
  2267                                  	; building closure for __bin-sub-zz
  2268 000003D3 48BF-                   	mov rdi, free_var_39
  2268 000003D5 [6310000000000000] 
  2269 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_zz
  2269 000003DF [B868010000000000] 
  2270 000003E7 E8295A0100              	call bind_primitive
  2271                                  
  2272                                  	; building closure for __bin-mul-zz
  2273 000003EC 48BF-                   	mov rdi, free_var_40
  2273 000003EE [7410000000000000] 
  2274 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_zz
  2274 000003F8 [5869010000000000] 
  2275 00000400 E8105A0100              	call bind_primitive
  2276                                  
  2277                                  	; building closure for __bin-div-zz
  2278 00000405 48BF-                   	mov rdi, free_var_41
  2278 00000407 [8510000000000000] 
  2279 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_zz
  2279 00000411 [ED69010000000000] 
  2280 00000419 E8F7590100              	call bind_primitive
  2281                                  
  2282                                  	; building closure for error
  2283 0000041E 48BF-                   	mov rdi, free_var_42
  2283 00000420 [9610000000000000] 
  2284 00000428 48BE-                   	mov rsi, L_code_ptr_error
  2284 0000042A [1D6B010000000000] 
  2285 00000432 E8DE590100              	call bind_primitive
  2286                                  
  2287                                  	; building closure for __bin-less-than-rr
  2288 00000437 48BF-                   	mov rdi, free_var_43
  2288 00000439 [A710000000000000] 
  2289 00000441 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
  2289 00000443 [D96B010000000000] 
  2290 0000044B E8C5590100              	call bind_primitive
  2291                                  
  2292                                  	; building closure for __bin-less-than-qq
  2293 00000450 48BF-                   	mov rdi, free_var_44
  2293 00000452 [B810000000000000] 
  2294 0000045A 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
  2294 0000045C [7B6C010000000000] 
  2295 00000464 E8AC590100              	call bind_primitive
  2296                                  
  2297                                  	; building closure for __bin-less-than-zz
  2298 00000469 48BF-                   	mov rdi, free_var_45
  2298 0000046B [C910000000000000] 
  2299 00000473 48BE-                   	mov rsi, L_code_ptr_raw_less_than_zz
  2299 00000475 [2C6C010000000000] 
  2300 0000047D E893590100              	call bind_primitive
  2301                                  
  2302                                  	; building closure for __bin-equal-rr
  2303 00000482 48BF-                   	mov rdi, free_var_46
  2303 00000484 [DA10000000000000] 
  2304 0000048C 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
  2304 0000048E [DA6C010000000000] 
  2305 00000496 E87A590100              	call bind_primitive
  2306                                  
  2307                                  	; building closure for __bin-equal-qq
  2308 0000049B 48BF-                   	mov rdi, free_var_47
  2308 0000049D [EB10000000000000] 
  2309 000004A5 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
  2309 000004A7 [7C6D010000000000] 
  2310 000004AF E861590100              	call bind_primitive
  2311                                  
  2312                                  	; building closure for __bin-equal-zz
  2313 000004B4 48BF-                   	mov rdi, free_var_48
  2313 000004B6 [FC10000000000000] 
  2314 000004BE 48BE-                   	mov rsi, L_code_ptr_raw_equal_zz
  2314 000004C0 [2D6D010000000000] 
  2315 000004C8 E848590100              	call bind_primitive
  2316                                  
  2317                                  	; building closure for quotient
  2318 000004CD 48BF-                   	mov rdi, free_var_49
  2318 000004CF [0D11000000000000] 
  2319 000004D7 48BE-                   	mov rsi, L_code_ptr_quotient
  2319 000004D9 [DB6D010000000000] 
  2320 000004E1 E82F590100              	call bind_primitive
  2321                                  
  2322                                  	; building closure for remainder
  2323 000004E6 48BF-                   	mov rdi, free_var_50
  2323 000004E8 [1E11000000000000] 
  2324 000004F0 48BE-                   	mov rsi, L_code_ptr_remainder
  2324 000004F2 [276E010000000000] 
  2325 000004FA E816590100              	call bind_primitive
  2326                                  
  2327                                  	; building closure for set-car!
  2328 000004FF 48BF-                   	mov rdi, free_var_51
  2328 00000501 [2F11000000000000] 
  2329 00000509 48BE-                   	mov rsi, L_code_ptr_set_car
  2329 0000050B [736E010000000000] 
  2330 00000513 E8FD580100              	call bind_primitive
  2331                                  
  2332                                  	; building closure for set-cdr!
  2333 00000518 48BF-                   	mov rdi, free_var_52
  2333 0000051A [4011000000000000] 
  2334 00000522 48BE-                   	mov rsi, L_code_ptr_set_cdr
  2334 00000524 [A56E010000000000] 
  2335 0000052C E8E4580100              	call bind_primitive
  2336                                  
  2337                                  	; building closure for string-ref
  2338 00000531 48BF-                   	mov rdi, free_var_53
  2338 00000533 [5111000000000000] 
  2339 0000053B 48BE-                   	mov rsi, L_code_ptr_string_ref
  2339 0000053D [D76E010000000000] 
  2340 00000545 E8CB580100              	call bind_primitive
  2341                                  
  2342                                  	; building closure for vector-ref
  2343 0000054A 48BF-                   	mov rdi, free_var_54
  2343 0000054C [6211000000000000] 
  2344 00000554 48BE-                   	mov rsi, L_code_ptr_vector_ref
  2344 00000556 [336F010000000000] 
  2345 0000055E E8B2580100              	call bind_primitive
  2346                                  
  2347                                  	; building closure for vector-set!
  2348 00000563 48BF-                   	mov rdi, free_var_55
  2348 00000565 [7311000000000000] 
  2349 0000056D 48BE-                   	mov rsi, L_code_ptr_vector_set
  2349 0000056F [806F010000000000] 
  2350 00000577 E899580100              	call bind_primitive
  2351                                  
  2352                                  	; building closure for string-set!
  2353 0000057C 48BF-                   	mov rdi, free_var_56
  2353 0000057E [8411000000000000] 
  2354 00000586 48BE-                   	mov rsi, L_code_ptr_string_set
  2354 00000588 [DB6F010000000000] 
  2355 00000590 E880580100              	call bind_primitive
  2356                                  
  2357                                  	; building closure for make-vector
  2358 00000595 48BF-                   	mov rdi, free_var_57
  2358 00000597 [9511000000000000] 
  2359 0000059F 48BE-                   	mov rsi, L_code_ptr_make_vector
  2359 000005A1 [4170010000000000] 
  2360 000005A9 E867580100              	call bind_primitive
  2361                                  
  2362                                  	; building closure for make-string
  2363 000005AE 48BF-                   	mov rdi, free_var_58
  2363 000005B0 [A611000000000000] 
  2364 000005B8 48BE-                   	mov rsi, L_code_ptr_make_string
  2364 000005BA [9C70010000000000] 
  2365 000005C2 E84E580100              	call bind_primitive
  2366                                  
  2367                                  	; building closure for numerator
  2368 000005C7 48BF-                   	mov rdi, free_var_59
  2368 000005C9 [B711000000000000] 
  2369 000005D1 48BE-                   	mov rsi, L_code_ptr_numerator
  2369 000005D3 [FF70010000000000] 
  2370 000005DB E835580100              	call bind_primitive
  2371                                  
  2372                                  	; building closure for denominator
  2373 000005E0 48BF-                   	mov rdi, free_var_60
  2373 000005E2 [C811000000000000] 
  2374 000005EA 48BE-                   	mov rsi, L_code_ptr_denominator
  2374 000005EC [2871010000000000] 
  2375 000005F4 E81C580100              	call bind_primitive
  2376                                  
  2377                                  	; building closure for eq?
  2378 000005F9 48BF-                   	mov rdi, free_var_61
  2378 000005FB [D911000000000000] 
  2379 00000603 48BE-                   	mov rsi, L_code_ptr_is_eq
  2379 00000605 [5171010000000000] 
  2380 0000060D E803580100              	call bind_primitive
  2381                                  
  2382                                  	; building closure for __integer-to-fraction
  2383 00000612 48BF-                   	mov rdi, free_var_62
  2383 00000614 [EA11000000000000] 
  2384 0000061C 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  2384 0000061E [CB65010000000000] 
  2385 00000626 E8EA570100              	call bind_primitive
  2386                                  
  2387                                  	; building closure for logand
  2388 0000062B 48BF-                   	mov rdi, free_var_63
  2388 0000062D [FB11000000000000] 
  2389 00000635 48BE-                   	mov rsi, L_code_ptr_logand
  2389 00000637 [A45E010000000000] 
  2390 0000063F E8D1570100              	call bind_primitive
  2391                                  
  2392                                  	; building closure for logor
  2393 00000644 48BF-                   	mov rdi, free_var_64
  2393 00000646 [0C12000000000000] 
  2394 0000064E 48BE-                   	mov rsi, L_code_ptr_logor
  2394 00000650 [E05E010000000000] 
  2395 00000658 E8B8570100              	call bind_primitive
  2396                                  
  2397                                  	; building closure for logxor
  2398 0000065D 48BF-                   	mov rdi, free_var_65
  2398 0000065F [1D12000000000000] 
  2399 00000667 48BE-                   	mov rsi, L_code_ptr_logxor
  2399 00000669 [1C5F010000000000] 
  2400 00000671 E89F570100              	call bind_primitive
  2401                                  
  2402                                  	; building closure for lognot
  2403 00000676 48BF-                   	mov rdi, free_var_66
  2403 00000678 [2E12000000000000] 
  2404 00000680 48BE-                   	mov rsi, L_code_ptr_lognot
  2404 00000682 [585F010000000000] 
  2405 0000068A E886570100              	call bind_primitive
  2406                                  
  2407                                  	; building closure for ash
  2408 0000068F 48BF-                   	mov rdi, free_var_67
  2408 00000691 [3F12000000000000] 
  2409 00000699 48BE-                   	mov rsi, L_code_ptr_ash
  2409 0000069B [435E010000000000] 
  2410 000006A3 E86D570100              	call bind_primitive
  2411                                  
  2412                                  	; building closure for symbol?
  2413 000006A8 48BF-                   	mov rdi, free_var_68
  2413 000006AA [5012000000000000] 
  2414 000006B2 48BE-                   	mov rsi, L_code_ptr_is_symbol
  2414 000006B4 [0E61010000000000] 
  2415 000006BC E854570100              	call bind_primitive
  2416                                  
  2417                                  	; building closure for uninterned-symbol?
  2418 000006C1 48BF-                   	mov rdi, free_var_69
  2418 000006C3 [6112000000000000] 
  2419 000006CB 48BE-                   	mov rsi, L_code_ptr_is_uninterned_symbol
  2419 000006CD [4161010000000000] 
  2420 000006D5 E83B570100              	call bind_primitive
  2421                                  
  2422                                  	; building closure for gensym?
  2423 000006DA 48BF-                   	mov rdi, free_var_70
  2423 000006DC [7212000000000000] 
  2424 000006E4 48BE-                   	mov rsi, L_code_ptr_is_uninterned_symbol
  2424 000006E6 [4161010000000000] 
  2425 000006EE E822570100              	call bind_primitive
  2426                                  
  2427                                  	; building closure for interned-symbol?
  2428 000006F3 48BF-                   	mov rdi, free_var_5
  2428 000006F5 [210E000000000000] 
  2429 000006FD 48BE-                   	mov rsi, L_code_ptr_is_interned_symbol
  2429 000006FF [7461010000000000] 
  2430 00000707 E809570100              	call bind_primitive
  2431                                  
  2432                                  	; building closure for gensym
  2433 0000070C 48BF-                   	mov rdi, free_var_71
  2433 0000070E [8312000000000000] 
  2434 00000716 48BE-                   	mov rsi, L_code_ptr_gensym
  2434 00000718 [A661010000000000] 
  2435 00000720 E8F0560100              	call bind_primitive
  2436                                  
  2437                                  	; building closure for frame
  2438 00000725 48BF-                   	mov rdi, free_var_72
  2438 00000727 [9412000000000000] 
  2439 0000072F 48BE-                   	mov rsi, L_code_ptr_frame
  2439 00000731 [5357010000000000] 
  2440 00000739 E8D7560100              	call bind_primitive
  2441                                  
  2442                                  	; building closure for break
  2443 0000073E 48BF-                   	mov rdi, free_var_73
  2443 00000740 [A512000000000000] 
  2444 00000748 48BE-                   	mov rsi, L_code_ptr_break
  2444 0000074A [3957010000000000] 
  2445 00000752 E8BE560100              	call bind_primitive
  2446                                  
  2447 00000757 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2448 0000075C E8C74F0100              	call malloc
  2449 00000761 50                      	push rax
  2450 00000762 BF00000000              	mov rdi, 8 * 0	; new rib
  2451 00000767 E8BC4F0100              	call malloc
  2452 0000076C 50                      	push rax
  2453 0000076D BF08000000              	mov rdi, 8 * 1	; extended env
  2454 00000772 E8B14F0100              	call malloc
  2455 00000777 488B7D10                	mov rdi, ENV
  2456 0000077B BE00000000              	mov rsi, 0
  2457 00000780 BA01000000              	mov rdx, 1
  2458                                  .L_lambda_simple_env_loop_0525:	; ext_env[i + 1] <-- env[i]
  2459 00000785 4883FE00                	cmp rsi, 0
  2460 00000789 7410                    	je .L_lambda_simple_env_end_0525
  2461 0000078B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2462 0000078F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2463 00000793 48FFC6                  	inc rsi
  2464 00000796 48FFC2                  	inc rdx
  2465 00000799 EBEA                    	jmp .L_lambda_simple_env_loop_0525
  2466                                  .L_lambda_simple_env_end_0525:
  2467 0000079B 5B                      	pop rbx
  2468 0000079C BE00000000              	mov rsi, 0
  2469                                  .L_lambda_simple_params_loop_0525:	; copy params
  2470 000007A1 4883FE00                	cmp rsi, 0
  2471 000007A5 740E                    	je .L_lambda_simple_params_end_0525
  2472 000007A7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2473 000007AC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2474 000007B0 48FFC6                  	inc rsi
  2475 000007B3 EBEC                    	jmp .L_lambda_simple_params_loop_0525
  2476                                  .L_lambda_simple_params_end_0525:
  2477 000007B5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2478 000007B8 4889C3                  	mov rbx, rax
  2479 000007BB 58                      	pop rax
  2480 000007BC C60004                  	mov byte [rax], T_closure
  2481 000007BF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2482 000007C3 48C74009[D0070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0525
  2483 000007CB E99B000000              	jmp .L_lambda_simple_end_0525
  2484                                  .L_lambda_simple_code_0525:	; lambda-simple body
  2485 000007D0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2486 000007D6 740B                    	je .L_lambda_simple_arity_check_ok_0525
  2487 000007D8 FF742410                	push qword [rsp + 8 * 2]
  2488 000007DC 6A01                    	push 1
  2489 000007DE E9FE4E0100              	jmp L_error_incorrect_arity_simple
  2490                                  .L_lambda_simple_arity_check_ok_0525:
  2491 000007E3 C8000000                	enter 0, 0
  2492                                  	; preparing a tail-call
  2493 000007E7 488B4520                	mov rax, PARAM(0)	; param x
  2494 000007EB 50                      	push rax
  2495 000007EC 6A01                    	push 1	; arg count
  2496 000007EE 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  2497 000007F6 803805                  	cmp byte [rax], T_undefined
  2498 000007F9 0F84FC4D0100            	je L_error_fvar_undefined
  2499 000007FF 803804                  	cmp byte [rax], T_closure
  2500 00000802 0F85774E0100            	jne L_error_non_closure
  2501 00000808 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2502 0000080B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2503 0000080E 50                      	push rax
  2504 0000080F 6A01                    	push 1	; arg count
  2505 00000811 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  2506 00000819 803805                  	cmp byte [rax], T_undefined
  2507 0000081C 0F84D94D0100            	je L_error_fvar_undefined
  2508 00000822 803804                  	cmp byte [rax], T_closure
  2509 00000825 0F85544E0100            	jne L_error_non_closure
  2510 0000082B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2511                                  
  2512                                  	; recycling the current frame
  2513 0000082E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2514 00000831 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2515 00000834 B905000000              	mov rcx, 1 + 4
  2516 00000839 488B5D18                	mov rbx, COUNT
  2517 0000083D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2518 00000842 488D55F8                	lea rdx, [rbp - 8 * 1]
  2519                                  .L_tc_recycle_frame_loop_06c2:
  2520 00000846 4883F900                	cmp rcx, 0
  2521 0000084A 7413                    	je .L_tc_recycle_frame_done_06c2
  2522 0000084C 488B32                  	mov rsi, qword [rdx]
  2523 0000084F 488933                  	mov qword [rbx], rsi
  2524 00000852 48FFC9                  	dec rcx
  2525 00000855 4883EB08                	sub rbx, 8 * 1
  2526 00000859 4883EA08                	sub rdx, 8 * 1
  2527 0000085D EBE7                    	jmp .L_tc_recycle_frame_loop_06c2
  2528                                  .L_tc_recycle_frame_done_06c2:
  2529 0000085F 488D6308                	lea rsp, [rbx + 8 * 1]
  2530 00000863 5D                      	pop rbp	; the proc will restore it!
  2531 00000864 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2532 00000867 C9                      	leave
  2533 00000868 C21800                  	ret AND_KILL_FRAME(1)
  2534                                  .L_lambda_simple_end_0525:	; new closure is in rax
  2535 0000086B 48890425[B6120000]      	mov qword [free_var_74], rax
  2536 00000873 48B8-                   	mov rax, sob_void
  2536 00000875 [0000000000000000] 
  2537                                  
  2538 0000087D 4889C7                  	mov rdi, rax
  2539 00000880 E8B54F0100              	call print_sexpr_if_not_void
  2540                                  
  2541 00000885 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2542 0000088A E8994E0100              	call malloc
  2543 0000088F 50                      	push rax
  2544 00000890 BF00000000              	mov rdi, 8 * 0	; new rib
  2545 00000895 E88E4E0100              	call malloc
  2546 0000089A 50                      	push rax
  2547 0000089B BF08000000              	mov rdi, 8 * 1	; extended env
  2548 000008A0 E8834E0100              	call malloc
  2549 000008A5 488B7D10                	mov rdi, ENV
  2550 000008A9 BE00000000              	mov rsi, 0
  2551 000008AE BA01000000              	mov rdx, 1
  2552                                  .L_lambda_simple_env_loop_0526:	; ext_env[i + 1] <-- env[i]
  2553 000008B3 4883FE00                	cmp rsi, 0
  2554 000008B7 7410                    	je .L_lambda_simple_env_end_0526
  2555 000008B9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2556 000008BD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2557 000008C1 48FFC6                  	inc rsi
  2558 000008C4 48FFC2                  	inc rdx
  2559 000008C7 EBEA                    	jmp .L_lambda_simple_env_loop_0526
  2560                                  .L_lambda_simple_env_end_0526:
  2561 000008C9 5B                      	pop rbx
  2562 000008CA BE00000000              	mov rsi, 0
  2563                                  .L_lambda_simple_params_loop_0526:	; copy params
  2564 000008CF 4883FE00                	cmp rsi, 0
  2565 000008D3 740E                    	je .L_lambda_simple_params_end_0526
  2566 000008D5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2567 000008DA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2568 000008DE 48FFC6                  	inc rsi
  2569 000008E1 EBEC                    	jmp .L_lambda_simple_params_loop_0526
  2570                                  .L_lambda_simple_params_end_0526:
  2571 000008E3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2572 000008E6 4889C3                  	mov rbx, rax
  2573 000008E9 58                      	pop rax
  2574 000008EA C60004                  	mov byte [rax], T_closure
  2575 000008ED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2576 000008F1 48C74009[FE080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0526
  2577 000008F9 E99B000000              	jmp .L_lambda_simple_end_0526
  2578                                  .L_lambda_simple_code_0526:	; lambda-simple body
  2579 000008FE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2580 00000904 740B                    	je .L_lambda_simple_arity_check_ok_0526
  2581 00000906 FF742410                	push qword [rsp + 8 * 2]
  2582 0000090A 6A01                    	push 1
  2583 0000090C E9D04D0100              	jmp L_error_incorrect_arity_simple
  2584                                  .L_lambda_simple_arity_check_ok_0526:
  2585 00000911 C8000000                	enter 0, 0
  2586                                  	; preparing a tail-call
  2587 00000915 488B4520                	mov rax, PARAM(0)	; param x
  2588 00000919 50                      	push rax
  2589 0000091A 6A01                    	push 1	; arg count
  2590 0000091C 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2591 00000924 803805                  	cmp byte [rax], T_undefined
  2592 00000927 0F84CE4C0100            	je L_error_fvar_undefined
  2593 0000092D 803804                  	cmp byte [rax], T_closure
  2594 00000930 0F85494D0100            	jne L_error_non_closure
  2595 00000936 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2596 00000939 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2597 0000093C 50                      	push rax
  2598 0000093D 6A01                    	push 1	; arg count
  2599 0000093F 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  2600 00000947 803805                  	cmp byte [rax], T_undefined
  2601 0000094A 0F84AB4C0100            	je L_error_fvar_undefined
  2602 00000950 803804                  	cmp byte [rax], T_closure
  2603 00000953 0F85264D0100            	jne L_error_non_closure
  2604 00000959 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2605                                  
  2606                                  	; recycling the current frame
  2607 0000095C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2608 0000095F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2609 00000962 B905000000              	mov rcx, 1 + 4
  2610 00000967 488B5D18                	mov rbx, COUNT
  2611 0000096B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2612 00000970 488D55F8                	lea rdx, [rbp - 8 * 1]
  2613                                  .L_tc_recycle_frame_loop_06c3:
  2614 00000974 4883F900                	cmp rcx, 0
  2615 00000978 7413                    	je .L_tc_recycle_frame_done_06c3
  2616 0000097A 488B32                  	mov rsi, qword [rdx]
  2617 0000097D 488933                  	mov qword [rbx], rsi
  2618 00000980 48FFC9                  	dec rcx
  2619 00000983 4883EB08                	sub rbx, 8 * 1
  2620 00000987 4883EA08                	sub rdx, 8 * 1
  2621 0000098B EBE7                    	jmp .L_tc_recycle_frame_loop_06c3
  2622                                  .L_tc_recycle_frame_done_06c3:
  2623 0000098D 488D6308                	lea rsp, [rbx + 8 * 1]
  2624 00000991 5D                      	pop rbp	; the proc will restore it!
  2625 00000992 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2626 00000995 C9                      	leave
  2627 00000996 C21800                  	ret AND_KILL_FRAME(1)
  2628                                  .L_lambda_simple_end_0526:	; new closure is in rax
  2629 00000999 48890425[C7120000]      	mov qword [free_var_75], rax
  2630 000009A1 48B8-                   	mov rax, sob_void
  2630 000009A3 [0000000000000000] 
  2631                                  
  2632 000009AB 4889C7                  	mov rdi, rax
  2633 000009AE E8874E0100              	call print_sexpr_if_not_void
  2634                                  
  2635 000009B3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2636 000009B8 E86B4D0100              	call malloc
  2637 000009BD 50                      	push rax
  2638 000009BE BF00000000              	mov rdi, 8 * 0	; new rib
  2639 000009C3 E8604D0100              	call malloc
  2640 000009C8 50                      	push rax
  2641 000009C9 BF08000000              	mov rdi, 8 * 1	; extended env
  2642 000009CE E8554D0100              	call malloc
  2643 000009D3 488B7D10                	mov rdi, ENV
  2644 000009D7 BE00000000              	mov rsi, 0
  2645 000009DC BA01000000              	mov rdx, 1
  2646                                  .L_lambda_simple_env_loop_0527:	; ext_env[i + 1] <-- env[i]
  2647 000009E1 4883FE00                	cmp rsi, 0
  2648 000009E5 7410                    	je .L_lambda_simple_env_end_0527
  2649 000009E7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2650 000009EB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2651 000009EF 48FFC6                  	inc rsi
  2652 000009F2 48FFC2                  	inc rdx
  2653 000009F5 EBEA                    	jmp .L_lambda_simple_env_loop_0527
  2654                                  .L_lambda_simple_env_end_0527:
  2655 000009F7 5B                      	pop rbx
  2656 000009F8 BE00000000              	mov rsi, 0
  2657                                  .L_lambda_simple_params_loop_0527:	; copy params
  2658 000009FD 4883FE00                	cmp rsi, 0
  2659 00000A01 740E                    	je .L_lambda_simple_params_end_0527
  2660 00000A03 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2661 00000A08 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2662 00000A0C 48FFC6                  	inc rsi
  2663 00000A0F EBEC                    	jmp .L_lambda_simple_params_loop_0527
  2664                                  .L_lambda_simple_params_end_0527:
  2665 00000A11 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2666 00000A14 4889C3                  	mov rbx, rax
  2667 00000A17 58                      	pop rax
  2668 00000A18 C60004                  	mov byte [rax], T_closure
  2669 00000A1B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2670 00000A1F 48C74009[2C0A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0527
  2671 00000A27 E99B000000              	jmp .L_lambda_simple_end_0527
  2672                                  .L_lambda_simple_code_0527:	; lambda-simple body
  2673 00000A2C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2674 00000A32 740B                    	je .L_lambda_simple_arity_check_ok_0527
  2675 00000A34 FF742410                	push qword [rsp + 8 * 2]
  2676 00000A38 6A01                    	push 1
  2677 00000A3A E9A24C0100              	jmp L_error_incorrect_arity_simple
  2678                                  .L_lambda_simple_arity_check_ok_0527:
  2679 00000A3F C8000000                	enter 0, 0
  2680                                  	; preparing a tail-call
  2681 00000A43 488B4520                	mov rax, PARAM(0)	; param x
  2682 00000A47 50                      	push rax
  2683 00000A48 6A01                    	push 1	; arg count
  2684 00000A4A 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  2685 00000A52 803805                  	cmp byte [rax], T_undefined
  2686 00000A55 0F84A04B0100            	je L_error_fvar_undefined
  2687 00000A5B 803804                  	cmp byte [rax], T_closure
  2688 00000A5E 0F851B4C0100            	jne L_error_non_closure
  2689 00000A64 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2690 00000A67 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2691 00000A6A 50                      	push rax
  2692 00000A6B 6A01                    	push 1	; arg count
  2693 00000A6D 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2694 00000A75 803805                  	cmp byte [rax], T_undefined
  2695 00000A78 0F847D4B0100            	je L_error_fvar_undefined
  2696 00000A7E 803804                  	cmp byte [rax], T_closure
  2697 00000A81 0F85F84B0100            	jne L_error_non_closure
  2698 00000A87 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2699                                  
  2700                                  	; recycling the current frame
  2701 00000A8A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2702 00000A8D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2703 00000A90 B905000000              	mov rcx, 1 + 4
  2704 00000A95 488B5D18                	mov rbx, COUNT
  2705 00000A99 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2706 00000A9E 488D55F8                	lea rdx, [rbp - 8 * 1]
  2707                                  .L_tc_recycle_frame_loop_06c4:
  2708 00000AA2 4883F900                	cmp rcx, 0
  2709 00000AA6 7413                    	je .L_tc_recycle_frame_done_06c4
  2710 00000AA8 488B32                  	mov rsi, qword [rdx]
  2711 00000AAB 488933                  	mov qword [rbx], rsi
  2712 00000AAE 48FFC9                  	dec rcx
  2713 00000AB1 4883EB08                	sub rbx, 8 * 1
  2714 00000AB5 4883EA08                	sub rdx, 8 * 1
  2715 00000AB9 EBE7                    	jmp .L_tc_recycle_frame_loop_06c4
  2716                                  .L_tc_recycle_frame_done_06c4:
  2717 00000ABB 488D6308                	lea rsp, [rbx + 8 * 1]
  2718 00000ABF 5D                      	pop rbp	; the proc will restore it!
  2719 00000AC0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2720 00000AC3 C9                      	leave
  2721 00000AC4 C21800                  	ret AND_KILL_FRAME(1)
  2722                                  .L_lambda_simple_end_0527:	; new closure is in rax
  2723 00000AC7 48890425[D8120000]      	mov qword [free_var_76], rax
  2724 00000ACF 48B8-                   	mov rax, sob_void
  2724 00000AD1 [0000000000000000] 
  2725                                  
  2726 00000AD9 4889C7                  	mov rdi, rax
  2727 00000ADC E8594D0100              	call print_sexpr_if_not_void
  2728                                  
  2729 00000AE1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2730 00000AE6 E83D4C0100              	call malloc
  2731 00000AEB 50                      	push rax
  2732 00000AEC BF00000000              	mov rdi, 8 * 0	; new rib
  2733 00000AF1 E8324C0100              	call malloc
  2734 00000AF6 50                      	push rax
  2735 00000AF7 BF08000000              	mov rdi, 8 * 1	; extended env
  2736 00000AFC E8274C0100              	call malloc
  2737 00000B01 488B7D10                	mov rdi, ENV
  2738 00000B05 BE00000000              	mov rsi, 0
  2739 00000B0A BA01000000              	mov rdx, 1
  2740                                  .L_lambda_simple_env_loop_0528:	; ext_env[i + 1] <-- env[i]
  2741 00000B0F 4883FE00                	cmp rsi, 0
  2742 00000B13 7410                    	je .L_lambda_simple_env_end_0528
  2743 00000B15 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2744 00000B19 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2745 00000B1D 48FFC6                  	inc rsi
  2746 00000B20 48FFC2                  	inc rdx
  2747 00000B23 EBEA                    	jmp .L_lambda_simple_env_loop_0528
  2748                                  .L_lambda_simple_env_end_0528:
  2749 00000B25 5B                      	pop rbx
  2750 00000B26 BE00000000              	mov rsi, 0
  2751                                  .L_lambda_simple_params_loop_0528:	; copy params
  2752 00000B2B 4883FE00                	cmp rsi, 0
  2753 00000B2F 740E                    	je .L_lambda_simple_params_end_0528
  2754 00000B31 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2755 00000B36 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2756 00000B3A 48FFC6                  	inc rsi
  2757 00000B3D EBEC                    	jmp .L_lambda_simple_params_loop_0528
  2758                                  .L_lambda_simple_params_end_0528:
  2759 00000B3F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2760 00000B42 4889C3                  	mov rbx, rax
  2761 00000B45 58                      	pop rax
  2762 00000B46 C60004                  	mov byte [rax], T_closure
  2763 00000B49 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2764 00000B4D 48C74009[5A0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0528
  2765 00000B55 E99B000000              	jmp .L_lambda_simple_end_0528
  2766                                  .L_lambda_simple_code_0528:	; lambda-simple body
  2767 00000B5A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2768 00000B60 740B                    	je .L_lambda_simple_arity_check_ok_0528
  2769 00000B62 FF742410                	push qword [rsp + 8 * 2]
  2770 00000B66 6A01                    	push 1
  2771 00000B68 E9744B0100              	jmp L_error_incorrect_arity_simple
  2772                                  .L_lambda_simple_arity_check_ok_0528:
  2773 00000B6D C8000000                	enter 0, 0
  2774                                  	; preparing a tail-call
  2775 00000B71 488B4520                	mov rax, PARAM(0)	; param x
  2776 00000B75 50                      	push rax
  2777 00000B76 6A01                    	push 1	; arg count
  2778 00000B78 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2779 00000B80 803805                  	cmp byte [rax], T_undefined
  2780 00000B83 0F84724A0100            	je L_error_fvar_undefined
  2781 00000B89 803804                  	cmp byte [rax], T_closure
  2782 00000B8C 0F85ED4A0100            	jne L_error_non_closure
  2783 00000B92 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2784 00000B95 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2785 00000B98 50                      	push rax
  2786 00000B99 6A01                    	push 1	; arg count
  2787 00000B9B 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  2788 00000BA3 803805                  	cmp byte [rax], T_undefined
  2789 00000BA6 0F844F4A0100            	je L_error_fvar_undefined
  2790 00000BAC 803804                  	cmp byte [rax], T_closure
  2791 00000BAF 0F85CA4A0100            	jne L_error_non_closure
  2792 00000BB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2793                                  
  2794                                  	; recycling the current frame
  2795 00000BB8 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2796 00000BBB FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2797 00000BBE B905000000              	mov rcx, 1 + 4
  2798 00000BC3 488B5D18                	mov rbx, COUNT
  2799 00000BC7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2800 00000BCC 488D55F8                	lea rdx, [rbp - 8 * 1]
  2801                                  .L_tc_recycle_frame_loop_06c5:
  2802 00000BD0 4883F900                	cmp rcx, 0
  2803 00000BD4 7413                    	je .L_tc_recycle_frame_done_06c5
  2804 00000BD6 488B32                  	mov rsi, qword [rdx]
  2805 00000BD9 488933                  	mov qword [rbx], rsi
  2806 00000BDC 48FFC9                  	dec rcx
  2807 00000BDF 4883EB08                	sub rbx, 8 * 1
  2808 00000BE3 4883EA08                	sub rdx, 8 * 1
  2809 00000BE7 EBE7                    	jmp .L_tc_recycle_frame_loop_06c5
  2810                                  .L_tc_recycle_frame_done_06c5:
  2811 00000BE9 488D6308                	lea rsp, [rbx + 8 * 1]
  2812 00000BED 5D                      	pop rbp	; the proc will restore it!
  2813 00000BEE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2814 00000BF1 C9                      	leave
  2815 00000BF2 C21800                  	ret AND_KILL_FRAME(1)
  2816                                  .L_lambda_simple_end_0528:	; new closure is in rax
  2817 00000BF5 48890425[E9120000]      	mov qword [free_var_77], rax
  2818 00000BFD 48B8-                   	mov rax, sob_void
  2818 00000BFF [0000000000000000] 
  2819                                  
  2820 00000C07 4889C7                  	mov rdi, rax
  2821 00000C0A E82B4C0100              	call print_sexpr_if_not_void
  2822                                  
  2823 00000C0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2824 00000C14 E80F4B0100              	call malloc
  2825 00000C19 50                      	push rax
  2826 00000C1A BF00000000              	mov rdi, 8 * 0	; new rib
  2827 00000C1F E8044B0100              	call malloc
  2828 00000C24 50                      	push rax
  2829 00000C25 BF08000000              	mov rdi, 8 * 1	; extended env
  2830 00000C2A E8F94A0100              	call malloc
  2831 00000C2F 488B7D10                	mov rdi, ENV
  2832 00000C33 BE00000000              	mov rsi, 0
  2833 00000C38 BA01000000              	mov rdx, 1
  2834                                  .L_lambda_simple_env_loop_0529:	; ext_env[i + 1] <-- env[i]
  2835 00000C3D 4883FE00                	cmp rsi, 0
  2836 00000C41 7410                    	je .L_lambda_simple_env_end_0529
  2837 00000C43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2838 00000C47 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2839 00000C4B 48FFC6                  	inc rsi
  2840 00000C4E 48FFC2                  	inc rdx
  2841 00000C51 EBEA                    	jmp .L_lambda_simple_env_loop_0529
  2842                                  .L_lambda_simple_env_end_0529:
  2843 00000C53 5B                      	pop rbx
  2844 00000C54 BE00000000              	mov rsi, 0
  2845                                  .L_lambda_simple_params_loop_0529:	; copy params
  2846 00000C59 4883FE00                	cmp rsi, 0
  2847 00000C5D 740E                    	je .L_lambda_simple_params_end_0529
  2848 00000C5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2849 00000C64 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2850 00000C68 48FFC6                  	inc rsi
  2851 00000C6B EBEC                    	jmp .L_lambda_simple_params_loop_0529
  2852                                  .L_lambda_simple_params_end_0529:
  2853 00000C6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2854 00000C70 4889C3                  	mov rbx, rax
  2855 00000C73 58                      	pop rax
  2856 00000C74 C60004                  	mov byte [rax], T_closure
  2857 00000C77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2858 00000C7B 48C74009[880C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0529
  2859 00000C83 E99B000000              	jmp .L_lambda_simple_end_0529
  2860                                  .L_lambda_simple_code_0529:	; lambda-simple body
  2861 00000C88 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2862 00000C8E 740B                    	je .L_lambda_simple_arity_check_ok_0529
  2863 00000C90 FF742410                	push qword [rsp + 8 * 2]
  2864 00000C94 6A01                    	push 1
  2865 00000C96 E9464A0100              	jmp L_error_incorrect_arity_simple
  2866                                  .L_lambda_simple_arity_check_ok_0529:
  2867 00000C9B C8000000                	enter 0, 0
  2868                                  	; preparing a tail-call
  2869 00000C9F 488B4520                	mov rax, PARAM(0)	; param x
  2870 00000CA3 50                      	push rax
  2871 00000CA4 6A01                    	push 1	; arg count
  2872 00000CA6 488B0425[B6120000]      	mov rax, qword [free_var_74]	; free var caar
  2873 00000CAE 803805                  	cmp byte [rax], T_undefined
  2874 00000CB1 0F8444490100            	je L_error_fvar_undefined
  2875 00000CB7 803804                  	cmp byte [rax], T_closure
  2876 00000CBA 0F85BF490100            	jne L_error_non_closure
  2877 00000CC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2878 00000CC3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2879 00000CC6 50                      	push rax
  2880 00000CC7 6A01                    	push 1	; arg count
  2881 00000CC9 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  2882 00000CD1 803805                  	cmp byte [rax], T_undefined
  2883 00000CD4 0F8421490100            	je L_error_fvar_undefined
  2884 00000CDA 803804                  	cmp byte [rax], T_closure
  2885 00000CDD 0F859C490100            	jne L_error_non_closure
  2886 00000CE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2887                                  
  2888                                  	; recycling the current frame
  2889 00000CE6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2890 00000CE9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2891 00000CEC B905000000              	mov rcx, 1 + 4
  2892 00000CF1 488B5D18                	mov rbx, COUNT
  2893 00000CF5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2894 00000CFA 488D55F8                	lea rdx, [rbp - 8 * 1]
  2895                                  .L_tc_recycle_frame_loop_06c6:
  2896 00000CFE 4883F900                	cmp rcx, 0
  2897 00000D02 7413                    	je .L_tc_recycle_frame_done_06c6
  2898 00000D04 488B32                  	mov rsi, qword [rdx]
  2899 00000D07 488933                  	mov qword [rbx], rsi
  2900 00000D0A 48FFC9                  	dec rcx
  2901 00000D0D 4883EB08                	sub rbx, 8 * 1
  2902 00000D11 4883EA08                	sub rdx, 8 * 1
  2903 00000D15 EBE7                    	jmp .L_tc_recycle_frame_loop_06c6
  2904                                  .L_tc_recycle_frame_done_06c6:
  2905 00000D17 488D6308                	lea rsp, [rbx + 8 * 1]
  2906 00000D1B 5D                      	pop rbp	; the proc will restore it!
  2907 00000D1C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2908 00000D1F C9                      	leave
  2909 00000D20 C21800                  	ret AND_KILL_FRAME(1)
  2910                                  .L_lambda_simple_end_0529:	; new closure is in rax
  2911 00000D23 48890425[FA120000]      	mov qword [free_var_78], rax
  2912 00000D2B 48B8-                   	mov rax, sob_void
  2912 00000D2D [0000000000000000] 
  2913                                  
  2914 00000D35 4889C7                  	mov rdi, rax
  2915 00000D38 E8FD4A0100              	call print_sexpr_if_not_void
  2916                                  
  2917 00000D3D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2918 00000D42 E8E1490100              	call malloc
  2919 00000D47 50                      	push rax
  2920 00000D48 BF00000000              	mov rdi, 8 * 0	; new rib
  2921 00000D4D E8D6490100              	call malloc
  2922 00000D52 50                      	push rax
  2923 00000D53 BF08000000              	mov rdi, 8 * 1	; extended env
  2924 00000D58 E8CB490100              	call malloc
  2925 00000D5D 488B7D10                	mov rdi, ENV
  2926 00000D61 BE00000000              	mov rsi, 0
  2927 00000D66 BA01000000              	mov rdx, 1
  2928                                  .L_lambda_simple_env_loop_052a:	; ext_env[i + 1] <-- env[i]
  2929 00000D6B 4883FE00                	cmp rsi, 0
  2930 00000D6F 7410                    	je .L_lambda_simple_env_end_052a
  2931 00000D71 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2932 00000D75 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2933 00000D79 48FFC6                  	inc rsi
  2934 00000D7C 48FFC2                  	inc rdx
  2935 00000D7F EBEA                    	jmp .L_lambda_simple_env_loop_052a
  2936                                  .L_lambda_simple_env_end_052a:
  2937 00000D81 5B                      	pop rbx
  2938 00000D82 BE00000000              	mov rsi, 0
  2939                                  .L_lambda_simple_params_loop_052a:	; copy params
  2940 00000D87 4883FE00                	cmp rsi, 0
  2941 00000D8B 740E                    	je .L_lambda_simple_params_end_052a
  2942 00000D8D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2943 00000D92 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2944 00000D96 48FFC6                  	inc rsi
  2945 00000D99 EBEC                    	jmp .L_lambda_simple_params_loop_052a
  2946                                  .L_lambda_simple_params_end_052a:
  2947 00000D9B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2948 00000D9E 4889C3                  	mov rbx, rax
  2949 00000DA1 58                      	pop rax
  2950 00000DA2 C60004                  	mov byte [rax], T_closure
  2951 00000DA5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2952 00000DA9 48C74009[B60D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_052a
  2953 00000DB1 E99B000000              	jmp .L_lambda_simple_end_052a
  2954                                  .L_lambda_simple_code_052a:	; lambda-simple body
  2955 00000DB6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2956 00000DBC 740B                    	je .L_lambda_simple_arity_check_ok_052a
  2957 00000DBE FF742410                	push qword [rsp + 8 * 2]
  2958 00000DC2 6A01                    	push 1
  2959 00000DC4 E918490100              	jmp L_error_incorrect_arity_simple
  2960                                  .L_lambda_simple_arity_check_ok_052a:
  2961 00000DC9 C8000000                	enter 0, 0
  2962                                  	; preparing a tail-call
  2963 00000DCD 488B4520                	mov rax, PARAM(0)	; param x
  2964 00000DD1 50                      	push rax
  2965 00000DD2 6A01                    	push 1	; arg count
  2966 00000DD4 488B0425[C7120000]      	mov rax, qword [free_var_75]	; free var cadr
  2967 00000DDC 803805                  	cmp byte [rax], T_undefined
  2968 00000DDF 0F8416480100            	je L_error_fvar_undefined
  2969 00000DE5 803804                  	cmp byte [rax], T_closure
  2970 00000DE8 0F8591480100            	jne L_error_non_closure
  2971 00000DEE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2972 00000DF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2973 00000DF4 50                      	push rax
  2974 00000DF5 6A01                    	push 1	; arg count
  2975 00000DF7 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  2976 00000DFF 803805                  	cmp byte [rax], T_undefined
  2977 00000E02 0F84F3470100            	je L_error_fvar_undefined
  2978 00000E08 803804                  	cmp byte [rax], T_closure
  2979 00000E0B 0F856E480100            	jne L_error_non_closure
  2980 00000E11 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2981                                  
  2982                                  	; recycling the current frame
  2983 00000E14 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  2984 00000E17 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  2985 00000E1A B905000000              	mov rcx, 1 + 4
  2986 00000E1F 488B5D18                	mov rbx, COUNT
  2987 00000E23 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  2988 00000E28 488D55F8                	lea rdx, [rbp - 8 * 1]
  2989                                  .L_tc_recycle_frame_loop_06c7:
  2990 00000E2C 4883F900                	cmp rcx, 0
  2991 00000E30 7413                    	je .L_tc_recycle_frame_done_06c7
  2992 00000E32 488B32                  	mov rsi, qword [rdx]
  2993 00000E35 488933                  	mov qword [rbx], rsi
  2994 00000E38 48FFC9                  	dec rcx
  2995 00000E3B 4883EB08                	sub rbx, 8 * 1
  2996 00000E3F 4883EA08                	sub rdx, 8 * 1
  2997 00000E43 EBE7                    	jmp .L_tc_recycle_frame_loop_06c7
  2998                                  .L_tc_recycle_frame_done_06c7:
  2999 00000E45 488D6308                	lea rsp, [rbx + 8 * 1]
  3000 00000E49 5D                      	pop rbp	; the proc will restore it!
  3001 00000E4A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3002 00000E4D C9                      	leave
  3003 00000E4E C21800                  	ret AND_KILL_FRAME(1)
  3004                                  .L_lambda_simple_end_052a:	; new closure is in rax
  3005 00000E51 48890425[0B130000]      	mov qword [free_var_79], rax
  3006 00000E59 48B8-                   	mov rax, sob_void
  3006 00000E5B [0000000000000000] 
  3007                                  
  3008 00000E63 4889C7                  	mov rdi, rax
  3009 00000E66 E8CF490100              	call print_sexpr_if_not_void
  3010                                  
  3011 00000E6B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3012 00000E70 E8B3480100              	call malloc
  3013 00000E75 50                      	push rax
  3014 00000E76 BF00000000              	mov rdi, 8 * 0	; new rib
  3015 00000E7B E8A8480100              	call malloc
  3016 00000E80 50                      	push rax
  3017 00000E81 BF08000000              	mov rdi, 8 * 1	; extended env
  3018 00000E86 E89D480100              	call malloc
  3019 00000E8B 488B7D10                	mov rdi, ENV
  3020 00000E8F BE00000000              	mov rsi, 0
  3021 00000E94 BA01000000              	mov rdx, 1
  3022                                  .L_lambda_simple_env_loop_052b:	; ext_env[i + 1] <-- env[i]
  3023 00000E99 4883FE00                	cmp rsi, 0
  3024 00000E9D 7410                    	je .L_lambda_simple_env_end_052b
  3025 00000E9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3026 00000EA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3027 00000EA7 48FFC6                  	inc rsi
  3028 00000EAA 48FFC2                  	inc rdx
  3029 00000EAD EBEA                    	jmp .L_lambda_simple_env_loop_052b
  3030                                  .L_lambda_simple_env_end_052b:
  3031 00000EAF 5B                      	pop rbx
  3032 00000EB0 BE00000000              	mov rsi, 0
  3033                                  .L_lambda_simple_params_loop_052b:	; copy params
  3034 00000EB5 4883FE00                	cmp rsi, 0
  3035 00000EB9 740E                    	je .L_lambda_simple_params_end_052b
  3036 00000EBB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3037 00000EC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3038 00000EC4 48FFC6                  	inc rsi
  3039 00000EC7 EBEC                    	jmp .L_lambda_simple_params_loop_052b
  3040                                  .L_lambda_simple_params_end_052b:
  3041 00000EC9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3042 00000ECC 4889C3                  	mov rbx, rax
  3043 00000ECF 58                      	pop rax
  3044 00000ED0 C60004                  	mov byte [rax], T_closure
  3045 00000ED3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3046 00000ED7 48C74009[E40E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_052b
  3047 00000EDF E99B000000              	jmp .L_lambda_simple_end_052b
  3048                                  .L_lambda_simple_code_052b:	; lambda-simple body
  3049 00000EE4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3050 00000EEA 740B                    	je .L_lambda_simple_arity_check_ok_052b
  3051 00000EEC FF742410                	push qword [rsp + 8 * 2]
  3052 00000EF0 6A01                    	push 1
  3053 00000EF2 E9EA470100              	jmp L_error_incorrect_arity_simple
  3054                                  .L_lambda_simple_arity_check_ok_052b:
  3055 00000EF7 C8000000                	enter 0, 0
  3056                                  	; preparing a tail-call
  3057 00000EFB 488B4520                	mov rax, PARAM(0)	; param x
  3058 00000EFF 50                      	push rax
  3059 00000F00 6A01                    	push 1	; arg count
  3060 00000F02 488B0425[D8120000]      	mov rax, qword [free_var_76]	; free var cdar
  3061 00000F0A 803805                  	cmp byte [rax], T_undefined
  3062 00000F0D 0F84E8460100            	je L_error_fvar_undefined
  3063 00000F13 803804                  	cmp byte [rax], T_closure
  3064 00000F16 0F8563470100            	jne L_error_non_closure
  3065 00000F1C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3066 00000F1F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3067 00000F22 50                      	push rax
  3068 00000F23 6A01                    	push 1	; arg count
  3069 00000F25 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  3070 00000F2D 803805                  	cmp byte [rax], T_undefined
  3071 00000F30 0F84C5460100            	je L_error_fvar_undefined
  3072 00000F36 803804                  	cmp byte [rax], T_closure
  3073 00000F39 0F8540470100            	jne L_error_non_closure
  3074 00000F3F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3075                                  
  3076                                  	; recycling the current frame
  3077 00000F42 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3078 00000F45 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3079 00000F48 B905000000              	mov rcx, 1 + 4
  3080 00000F4D 488B5D18                	mov rbx, COUNT
  3081 00000F51 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3082 00000F56 488D55F8                	lea rdx, [rbp - 8 * 1]
  3083                                  .L_tc_recycle_frame_loop_06c8:
  3084 00000F5A 4883F900                	cmp rcx, 0
  3085 00000F5E 7413                    	je .L_tc_recycle_frame_done_06c8
  3086 00000F60 488B32                  	mov rsi, qword [rdx]
  3087 00000F63 488933                  	mov qword [rbx], rsi
  3088 00000F66 48FFC9                  	dec rcx
  3089 00000F69 4883EB08                	sub rbx, 8 * 1
  3090 00000F6D 4883EA08                	sub rdx, 8 * 1
  3091 00000F71 EBE7                    	jmp .L_tc_recycle_frame_loop_06c8
  3092                                  .L_tc_recycle_frame_done_06c8:
  3093 00000F73 488D6308                	lea rsp, [rbx + 8 * 1]
  3094 00000F77 5D                      	pop rbp	; the proc will restore it!
  3095 00000F78 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3096 00000F7B C9                      	leave
  3097 00000F7C C21800                  	ret AND_KILL_FRAME(1)
  3098                                  .L_lambda_simple_end_052b:	; new closure is in rax
  3099 00000F7F 48890425[1C130000]      	mov qword [free_var_80], rax
  3100 00000F87 48B8-                   	mov rax, sob_void
  3100 00000F89 [0000000000000000] 
  3101                                  
  3102 00000F91 4889C7                  	mov rdi, rax
  3103 00000F94 E8A1480100              	call print_sexpr_if_not_void
  3104                                  
  3105 00000F99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3106 00000F9E E885470100              	call malloc
  3107 00000FA3 50                      	push rax
  3108 00000FA4 BF00000000              	mov rdi, 8 * 0	; new rib
  3109 00000FA9 E87A470100              	call malloc
  3110 00000FAE 50                      	push rax
  3111 00000FAF BF08000000              	mov rdi, 8 * 1	; extended env
  3112 00000FB4 E86F470100              	call malloc
  3113 00000FB9 488B7D10                	mov rdi, ENV
  3114 00000FBD BE00000000              	mov rsi, 0
  3115 00000FC2 BA01000000              	mov rdx, 1
  3116                                  .L_lambda_simple_env_loop_052c:	; ext_env[i + 1] <-- env[i]
  3117 00000FC7 4883FE00                	cmp rsi, 0
  3118 00000FCB 7410                    	je .L_lambda_simple_env_end_052c
  3119 00000FCD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3120 00000FD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3121 00000FD5 48FFC6                  	inc rsi
  3122 00000FD8 48FFC2                  	inc rdx
  3123 00000FDB EBEA                    	jmp .L_lambda_simple_env_loop_052c
  3124                                  .L_lambda_simple_env_end_052c:
  3125 00000FDD 5B                      	pop rbx
  3126 00000FDE BE00000000              	mov rsi, 0
  3127                                  .L_lambda_simple_params_loop_052c:	; copy params
  3128 00000FE3 4883FE00                	cmp rsi, 0
  3129 00000FE7 740E                    	je .L_lambda_simple_params_end_052c
  3130 00000FE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3131 00000FEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3132 00000FF2 48FFC6                  	inc rsi
  3133 00000FF5 EBEC                    	jmp .L_lambda_simple_params_loop_052c
  3134                                  .L_lambda_simple_params_end_052c:
  3135 00000FF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3136 00000FFA 4889C3                  	mov rbx, rax
  3137 00000FFD 58                      	pop rax
  3138 00000FFE C60004                  	mov byte [rax], T_closure
  3139 00001001 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3140 00001005 48C74009[12100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_052c
  3141 0000100D E99B000000              	jmp .L_lambda_simple_end_052c
  3142                                  .L_lambda_simple_code_052c:	; lambda-simple body
  3143 00001012 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3144 00001018 740B                    	je .L_lambda_simple_arity_check_ok_052c
  3145 0000101A FF742410                	push qword [rsp + 8 * 2]
  3146 0000101E 6A01                    	push 1
  3147 00001020 E9BC460100              	jmp L_error_incorrect_arity_simple
  3148                                  .L_lambda_simple_arity_check_ok_052c:
  3149 00001025 C8000000                	enter 0, 0
  3150                                  	; preparing a tail-call
  3151 00001029 488B4520                	mov rax, PARAM(0)	; param x
  3152 0000102D 50                      	push rax
  3153 0000102E 6A01                    	push 1	; arg count
  3154 00001030 488B0425[E9120000]      	mov rax, qword [free_var_77]	; free var cddr
  3155 00001038 803805                  	cmp byte [rax], T_undefined
  3156 0000103B 0F84BA450100            	je L_error_fvar_undefined
  3157 00001041 803804                  	cmp byte [rax], T_closure
  3158 00001044 0F8535460100            	jne L_error_non_closure
  3159 0000104A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3160 0000104D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3161 00001050 50                      	push rax
  3162 00001051 6A01                    	push 1	; arg count
  3163 00001053 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  3164 0000105B 803805                  	cmp byte [rax], T_undefined
  3165 0000105E 0F8497450100            	je L_error_fvar_undefined
  3166 00001064 803804                  	cmp byte [rax], T_closure
  3167 00001067 0F8512460100            	jne L_error_non_closure
  3168 0000106D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3169                                  
  3170                                  	; recycling the current frame
  3171 00001070 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3172 00001073 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3173 00001076 B905000000              	mov rcx, 1 + 4
  3174 0000107B 488B5D18                	mov rbx, COUNT
  3175 0000107F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3176 00001084 488D55F8                	lea rdx, [rbp - 8 * 1]
  3177                                  .L_tc_recycle_frame_loop_06c9:
  3178 00001088 4883F900                	cmp rcx, 0
  3179 0000108C 7413                    	je .L_tc_recycle_frame_done_06c9
  3180 0000108E 488B32                  	mov rsi, qword [rdx]
  3181 00001091 488933                  	mov qword [rbx], rsi
  3182 00001094 48FFC9                  	dec rcx
  3183 00001097 4883EB08                	sub rbx, 8 * 1
  3184 0000109B 4883EA08                	sub rdx, 8 * 1
  3185 0000109F EBE7                    	jmp .L_tc_recycle_frame_loop_06c9
  3186                                  .L_tc_recycle_frame_done_06c9:
  3187 000010A1 488D6308                	lea rsp, [rbx + 8 * 1]
  3188 000010A5 5D                      	pop rbp	; the proc will restore it!
  3189 000010A6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3190 000010A9 C9                      	leave
  3191 000010AA C21800                  	ret AND_KILL_FRAME(1)
  3192                                  .L_lambda_simple_end_052c:	; new closure is in rax
  3193 000010AD 48890425[2D130000]      	mov qword [free_var_81], rax
  3194 000010B5 48B8-                   	mov rax, sob_void
  3194 000010B7 [0000000000000000] 
  3195                                  
  3196 000010BF 4889C7                  	mov rdi, rax
  3197 000010C2 E873470100              	call print_sexpr_if_not_void
  3198                                  
  3199 000010C7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3200 000010CC E857460100              	call malloc
  3201 000010D1 50                      	push rax
  3202 000010D2 BF00000000              	mov rdi, 8 * 0	; new rib
  3203 000010D7 E84C460100              	call malloc
  3204 000010DC 50                      	push rax
  3205 000010DD BF08000000              	mov rdi, 8 * 1	; extended env
  3206 000010E2 E841460100              	call malloc
  3207 000010E7 488B7D10                	mov rdi, ENV
  3208 000010EB BE00000000              	mov rsi, 0
  3209 000010F0 BA01000000              	mov rdx, 1
  3210                                  .L_lambda_simple_env_loop_052d:	; ext_env[i + 1] <-- env[i]
  3211 000010F5 4883FE00                	cmp rsi, 0
  3212 000010F9 7410                    	je .L_lambda_simple_env_end_052d
  3213 000010FB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3214 000010FF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3215 00001103 48FFC6                  	inc rsi
  3216 00001106 48FFC2                  	inc rdx
  3217 00001109 EBEA                    	jmp .L_lambda_simple_env_loop_052d
  3218                                  .L_lambda_simple_env_end_052d:
  3219 0000110B 5B                      	pop rbx
  3220 0000110C BE00000000              	mov rsi, 0
  3221                                  .L_lambda_simple_params_loop_052d:	; copy params
  3222 00001111 4883FE00                	cmp rsi, 0
  3223 00001115 740E                    	je .L_lambda_simple_params_end_052d
  3224 00001117 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3225 0000111C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3226 00001120 48FFC6                  	inc rsi
  3227 00001123 EBEC                    	jmp .L_lambda_simple_params_loop_052d
  3228                                  .L_lambda_simple_params_end_052d:
  3229 00001125 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3230 00001128 4889C3                  	mov rbx, rax
  3231 0000112B 58                      	pop rax
  3232 0000112C C60004                  	mov byte [rax], T_closure
  3233 0000112F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3234 00001133 48C74009[40110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_052d
  3235 0000113B E99B000000              	jmp .L_lambda_simple_end_052d
  3236                                  .L_lambda_simple_code_052d:	; lambda-simple body
  3237 00001140 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3238 00001146 740B                    	je .L_lambda_simple_arity_check_ok_052d
  3239 00001148 FF742410                	push qword [rsp + 8 * 2]
  3240 0000114C 6A01                    	push 1
  3241 0000114E E98E450100              	jmp L_error_incorrect_arity_simple
  3242                                  .L_lambda_simple_arity_check_ok_052d:
  3243 00001153 C8000000                	enter 0, 0
  3244                                  	; preparing a tail-call
  3245 00001157 488B4520                	mov rax, PARAM(0)	; param x
  3246 0000115B 50                      	push rax
  3247 0000115C 6A01                    	push 1	; arg count
  3248 0000115E 488B0425[B6120000]      	mov rax, qword [free_var_74]	; free var caar
  3249 00001166 803805                  	cmp byte [rax], T_undefined
  3250 00001169 0F848C440100            	je L_error_fvar_undefined
  3251 0000116F 803804                  	cmp byte [rax], T_closure
  3252 00001172 0F8507450100            	jne L_error_non_closure
  3253 00001178 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3254 0000117B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3255 0000117E 50                      	push rax
  3256 0000117F 6A01                    	push 1	; arg count
  3257 00001181 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3258 00001189 803805                  	cmp byte [rax], T_undefined
  3259 0000118C 0F8469440100            	je L_error_fvar_undefined
  3260 00001192 803804                  	cmp byte [rax], T_closure
  3261 00001195 0F85E4440100            	jne L_error_non_closure
  3262 0000119B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3263                                  
  3264                                  	; recycling the current frame
  3265 0000119E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3266 000011A1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3267 000011A4 B905000000              	mov rcx, 1 + 4
  3268 000011A9 488B5D18                	mov rbx, COUNT
  3269 000011AD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3270 000011B2 488D55F8                	lea rdx, [rbp - 8 * 1]
  3271                                  .L_tc_recycle_frame_loop_06ca:
  3272 000011B6 4883F900                	cmp rcx, 0
  3273 000011BA 7413                    	je .L_tc_recycle_frame_done_06ca
  3274 000011BC 488B32                  	mov rsi, qword [rdx]
  3275 000011BF 488933                  	mov qword [rbx], rsi
  3276 000011C2 48FFC9                  	dec rcx
  3277 000011C5 4883EB08                	sub rbx, 8 * 1
  3278 000011C9 4883EA08                	sub rdx, 8 * 1
  3279 000011CD EBE7                    	jmp .L_tc_recycle_frame_loop_06ca
  3280                                  .L_tc_recycle_frame_done_06ca:
  3281 000011CF 488D6308                	lea rsp, [rbx + 8 * 1]
  3282 000011D3 5D                      	pop rbp	; the proc will restore it!
  3283 000011D4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3284 000011D7 C9                      	leave
  3285 000011D8 C21800                  	ret AND_KILL_FRAME(1)
  3286                                  .L_lambda_simple_end_052d:	; new closure is in rax
  3287 000011DB 48890425[3E130000]      	mov qword [free_var_82], rax
  3288 000011E3 48B8-                   	mov rax, sob_void
  3288 000011E5 [0000000000000000] 
  3289                                  
  3290 000011ED 4889C7                  	mov rdi, rax
  3291 000011F0 E845460100              	call print_sexpr_if_not_void
  3292                                  
  3293 000011F5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3294 000011FA E829450100              	call malloc
  3295 000011FF 50                      	push rax
  3296 00001200 BF00000000              	mov rdi, 8 * 0	; new rib
  3297 00001205 E81E450100              	call malloc
  3298 0000120A 50                      	push rax
  3299 0000120B BF08000000              	mov rdi, 8 * 1	; extended env
  3300 00001210 E813450100              	call malloc
  3301 00001215 488B7D10                	mov rdi, ENV
  3302 00001219 BE00000000              	mov rsi, 0
  3303 0000121E BA01000000              	mov rdx, 1
  3304                                  .L_lambda_simple_env_loop_052e:	; ext_env[i + 1] <-- env[i]
  3305 00001223 4883FE00                	cmp rsi, 0
  3306 00001227 7410                    	je .L_lambda_simple_env_end_052e
  3307 00001229 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3308 0000122D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3309 00001231 48FFC6                  	inc rsi
  3310 00001234 48FFC2                  	inc rdx
  3311 00001237 EBEA                    	jmp .L_lambda_simple_env_loop_052e
  3312                                  .L_lambda_simple_env_end_052e:
  3313 00001239 5B                      	pop rbx
  3314 0000123A BE00000000              	mov rsi, 0
  3315                                  .L_lambda_simple_params_loop_052e:	; copy params
  3316 0000123F 4883FE00                	cmp rsi, 0
  3317 00001243 740E                    	je .L_lambda_simple_params_end_052e
  3318 00001245 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3319 0000124A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3320 0000124E 48FFC6                  	inc rsi
  3321 00001251 EBEC                    	jmp .L_lambda_simple_params_loop_052e
  3322                                  .L_lambda_simple_params_end_052e:
  3323 00001253 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3324 00001256 4889C3                  	mov rbx, rax
  3325 00001259 58                      	pop rax
  3326 0000125A C60004                  	mov byte [rax], T_closure
  3327 0000125D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3328 00001261 48C74009[6E120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_052e
  3329 00001269 E99B000000              	jmp .L_lambda_simple_end_052e
  3330                                  .L_lambda_simple_code_052e:	; lambda-simple body
  3331 0000126E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3332 00001274 740B                    	je .L_lambda_simple_arity_check_ok_052e
  3333 00001276 FF742410                	push qword [rsp + 8 * 2]
  3334 0000127A 6A01                    	push 1
  3335 0000127C E960440100              	jmp L_error_incorrect_arity_simple
  3336                                  .L_lambda_simple_arity_check_ok_052e:
  3337 00001281 C8000000                	enter 0, 0
  3338                                  	; preparing a tail-call
  3339 00001285 488B4520                	mov rax, PARAM(0)	; param x
  3340 00001289 50                      	push rax
  3341 0000128A 6A01                    	push 1	; arg count
  3342 0000128C 488B0425[C7120000]      	mov rax, qword [free_var_75]	; free var cadr
  3343 00001294 803805                  	cmp byte [rax], T_undefined
  3344 00001297 0F845E430100            	je L_error_fvar_undefined
  3345 0000129D 803804                  	cmp byte [rax], T_closure
  3346 000012A0 0F85D9430100            	jne L_error_non_closure
  3347 000012A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3348 000012A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3349 000012AC 50                      	push rax
  3350 000012AD 6A01                    	push 1	; arg count
  3351 000012AF 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3352 000012B7 803805                  	cmp byte [rax], T_undefined
  3353 000012BA 0F843B430100            	je L_error_fvar_undefined
  3354 000012C0 803804                  	cmp byte [rax], T_closure
  3355 000012C3 0F85B6430100            	jne L_error_non_closure
  3356 000012C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3357                                  
  3358                                  	; recycling the current frame
  3359 000012CC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3360 000012CF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3361 000012D2 B905000000              	mov rcx, 1 + 4
  3362 000012D7 488B5D18                	mov rbx, COUNT
  3363 000012DB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3364 000012E0 488D55F8                	lea rdx, [rbp - 8 * 1]
  3365                                  .L_tc_recycle_frame_loop_06cb:
  3366 000012E4 4883F900                	cmp rcx, 0
  3367 000012E8 7413                    	je .L_tc_recycle_frame_done_06cb
  3368 000012EA 488B32                  	mov rsi, qword [rdx]
  3369 000012ED 488933                  	mov qword [rbx], rsi
  3370 000012F0 48FFC9                  	dec rcx
  3371 000012F3 4883EB08                	sub rbx, 8 * 1
  3372 000012F7 4883EA08                	sub rdx, 8 * 1
  3373 000012FB EBE7                    	jmp .L_tc_recycle_frame_loop_06cb
  3374                                  .L_tc_recycle_frame_done_06cb:
  3375 000012FD 488D6308                	lea rsp, [rbx + 8 * 1]
  3376 00001301 5D                      	pop rbp	; the proc will restore it!
  3377 00001302 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3378 00001305 C9                      	leave
  3379 00001306 C21800                  	ret AND_KILL_FRAME(1)
  3380                                  .L_lambda_simple_end_052e:	; new closure is in rax
  3381 00001309 48890425[4F130000]      	mov qword [free_var_83], rax
  3382 00001311 48B8-                   	mov rax, sob_void
  3382 00001313 [0000000000000000] 
  3383                                  
  3384 0000131B 4889C7                  	mov rdi, rax
  3385 0000131E E817450100              	call print_sexpr_if_not_void
  3386                                  
  3387 00001323 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3388 00001328 E8FB430100              	call malloc
  3389 0000132D 50                      	push rax
  3390 0000132E BF00000000              	mov rdi, 8 * 0	; new rib
  3391 00001333 E8F0430100              	call malloc
  3392 00001338 50                      	push rax
  3393 00001339 BF08000000              	mov rdi, 8 * 1	; extended env
  3394 0000133E E8E5430100              	call malloc
  3395 00001343 488B7D10                	mov rdi, ENV
  3396 00001347 BE00000000              	mov rsi, 0
  3397 0000134C BA01000000              	mov rdx, 1
  3398                                  .L_lambda_simple_env_loop_052f:	; ext_env[i + 1] <-- env[i]
  3399 00001351 4883FE00                	cmp rsi, 0
  3400 00001355 7410                    	je .L_lambda_simple_env_end_052f
  3401 00001357 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3402 0000135B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3403 0000135F 48FFC6                  	inc rsi
  3404 00001362 48FFC2                  	inc rdx
  3405 00001365 EBEA                    	jmp .L_lambda_simple_env_loop_052f
  3406                                  .L_lambda_simple_env_end_052f:
  3407 00001367 5B                      	pop rbx
  3408 00001368 BE00000000              	mov rsi, 0
  3409                                  .L_lambda_simple_params_loop_052f:	; copy params
  3410 0000136D 4883FE00                	cmp rsi, 0
  3411 00001371 740E                    	je .L_lambda_simple_params_end_052f
  3412 00001373 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3413 00001378 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3414 0000137C 48FFC6                  	inc rsi
  3415 0000137F EBEC                    	jmp .L_lambda_simple_params_loop_052f
  3416                                  .L_lambda_simple_params_end_052f:
  3417 00001381 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3418 00001384 4889C3                  	mov rbx, rax
  3419 00001387 58                      	pop rax
  3420 00001388 C60004                  	mov byte [rax], T_closure
  3421 0000138B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3422 0000138F 48C74009[9C130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_052f
  3423 00001397 E99B000000              	jmp .L_lambda_simple_end_052f
  3424                                  .L_lambda_simple_code_052f:	; lambda-simple body
  3425 0000139C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3426 000013A2 740B                    	je .L_lambda_simple_arity_check_ok_052f
  3427 000013A4 FF742410                	push qword [rsp + 8 * 2]
  3428 000013A8 6A01                    	push 1
  3429 000013AA E932430100              	jmp L_error_incorrect_arity_simple
  3430                                  .L_lambda_simple_arity_check_ok_052f:
  3431 000013AF C8000000                	enter 0, 0
  3432                                  	; preparing a tail-call
  3433 000013B3 488B4520                	mov rax, PARAM(0)	; param x
  3434 000013B7 50                      	push rax
  3435 000013B8 6A01                    	push 1	; arg count
  3436 000013BA 488B0425[D8120000]      	mov rax, qword [free_var_76]	; free var cdar
  3437 000013C2 803805                  	cmp byte [rax], T_undefined
  3438 000013C5 0F8430420100            	je L_error_fvar_undefined
  3439 000013CB 803804                  	cmp byte [rax], T_closure
  3440 000013CE 0F85AB420100            	jne L_error_non_closure
  3441 000013D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3442 000013D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3443 000013DA 50                      	push rax
  3444 000013DB 6A01                    	push 1	; arg count
  3445 000013DD 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3446 000013E5 803805                  	cmp byte [rax], T_undefined
  3447 000013E8 0F840D420100            	je L_error_fvar_undefined
  3448 000013EE 803804                  	cmp byte [rax], T_closure
  3449 000013F1 0F8588420100            	jne L_error_non_closure
  3450 000013F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3451                                  
  3452                                  	; recycling the current frame
  3453 000013FA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3454 000013FD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3455 00001400 B905000000              	mov rcx, 1 + 4
  3456 00001405 488B5D18                	mov rbx, COUNT
  3457 00001409 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3458 0000140E 488D55F8                	lea rdx, [rbp - 8 * 1]
  3459                                  .L_tc_recycle_frame_loop_06cc:
  3460 00001412 4883F900                	cmp rcx, 0
  3461 00001416 7413                    	je .L_tc_recycle_frame_done_06cc
  3462 00001418 488B32                  	mov rsi, qword [rdx]
  3463 0000141B 488933                  	mov qword [rbx], rsi
  3464 0000141E 48FFC9                  	dec rcx
  3465 00001421 4883EB08                	sub rbx, 8 * 1
  3466 00001425 4883EA08                	sub rdx, 8 * 1
  3467 00001429 EBE7                    	jmp .L_tc_recycle_frame_loop_06cc
  3468                                  .L_tc_recycle_frame_done_06cc:
  3469 0000142B 488D6308                	lea rsp, [rbx + 8 * 1]
  3470 0000142F 5D                      	pop rbp	; the proc will restore it!
  3471 00001430 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3472 00001433 C9                      	leave
  3473 00001434 C21800                  	ret AND_KILL_FRAME(1)
  3474                                  .L_lambda_simple_end_052f:	; new closure is in rax
  3475 00001437 48890425[60130000]      	mov qword [free_var_84], rax
  3476 0000143F 48B8-                   	mov rax, sob_void
  3476 00001441 [0000000000000000] 
  3477                                  
  3478 00001449 4889C7                  	mov rdi, rax
  3479 0000144C E8E9430100              	call print_sexpr_if_not_void
  3480                                  
  3481 00001451 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3482 00001456 E8CD420100              	call malloc
  3483 0000145B 50                      	push rax
  3484 0000145C BF00000000              	mov rdi, 8 * 0	; new rib
  3485 00001461 E8C2420100              	call malloc
  3486 00001466 50                      	push rax
  3487 00001467 BF08000000              	mov rdi, 8 * 1	; extended env
  3488 0000146C E8B7420100              	call malloc
  3489 00001471 488B7D10                	mov rdi, ENV
  3490 00001475 BE00000000              	mov rsi, 0
  3491 0000147A BA01000000              	mov rdx, 1
  3492                                  .L_lambda_simple_env_loop_0530:	; ext_env[i + 1] <-- env[i]
  3493 0000147F 4883FE00                	cmp rsi, 0
  3494 00001483 7410                    	je .L_lambda_simple_env_end_0530
  3495 00001485 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3496 00001489 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3497 0000148D 48FFC6                  	inc rsi
  3498 00001490 48FFC2                  	inc rdx
  3499 00001493 EBEA                    	jmp .L_lambda_simple_env_loop_0530
  3500                                  .L_lambda_simple_env_end_0530:
  3501 00001495 5B                      	pop rbx
  3502 00001496 BE00000000              	mov rsi, 0
  3503                                  .L_lambda_simple_params_loop_0530:	; copy params
  3504 0000149B 4883FE00                	cmp rsi, 0
  3505 0000149F 740E                    	je .L_lambda_simple_params_end_0530
  3506 000014A1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3507 000014A6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3508 000014AA 48FFC6                  	inc rsi
  3509 000014AD EBEC                    	jmp .L_lambda_simple_params_loop_0530
  3510                                  .L_lambda_simple_params_end_0530:
  3511 000014AF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3512 000014B2 4889C3                  	mov rbx, rax
  3513 000014B5 58                      	pop rax
  3514 000014B6 C60004                  	mov byte [rax], T_closure
  3515 000014B9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3516 000014BD 48C74009[CA140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0530
  3517 000014C5 E99B000000              	jmp .L_lambda_simple_end_0530
  3518                                  .L_lambda_simple_code_0530:	; lambda-simple body
  3519 000014CA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3520 000014D0 740B                    	je .L_lambda_simple_arity_check_ok_0530
  3521 000014D2 FF742410                	push qword [rsp + 8 * 2]
  3522 000014D6 6A01                    	push 1
  3523 000014D8 E904420100              	jmp L_error_incorrect_arity_simple
  3524                                  .L_lambda_simple_arity_check_ok_0530:
  3525 000014DD C8000000                	enter 0, 0
  3526                                  	; preparing a tail-call
  3527 000014E1 488B4520                	mov rax, PARAM(0)	; param x
  3528 000014E5 50                      	push rax
  3529 000014E6 6A01                    	push 1	; arg count
  3530 000014E8 488B0425[E9120000]      	mov rax, qword [free_var_77]	; free var cddr
  3531 000014F0 803805                  	cmp byte [rax], T_undefined
  3532 000014F3 0F8402410100            	je L_error_fvar_undefined
  3533 000014F9 803804                  	cmp byte [rax], T_closure
  3534 000014FC 0F857D410100            	jne L_error_non_closure
  3535 00001502 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3536 00001505 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3537 00001508 50                      	push rax
  3538 00001509 6A01                    	push 1	; arg count
  3539 0000150B 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  3540 00001513 803805                  	cmp byte [rax], T_undefined
  3541 00001516 0F84DF400100            	je L_error_fvar_undefined
  3542 0000151C 803804                  	cmp byte [rax], T_closure
  3543 0000151F 0F855A410100            	jne L_error_non_closure
  3544 00001525 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3545                                  
  3546                                  	; recycling the current frame
  3547 00001528 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3548 0000152B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3549 0000152E B905000000              	mov rcx, 1 + 4
  3550 00001533 488B5D18                	mov rbx, COUNT
  3551 00001537 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3552 0000153C 488D55F8                	lea rdx, [rbp - 8 * 1]
  3553                                  .L_tc_recycle_frame_loop_06cd:
  3554 00001540 4883F900                	cmp rcx, 0
  3555 00001544 7413                    	je .L_tc_recycle_frame_done_06cd
  3556 00001546 488B32                  	mov rsi, qword [rdx]
  3557 00001549 488933                  	mov qword [rbx], rsi
  3558 0000154C 48FFC9                  	dec rcx
  3559 0000154F 4883EB08                	sub rbx, 8 * 1
  3560 00001553 4883EA08                	sub rdx, 8 * 1
  3561 00001557 EBE7                    	jmp .L_tc_recycle_frame_loop_06cd
  3562                                  .L_tc_recycle_frame_done_06cd:
  3563 00001559 488D6308                	lea rsp, [rbx + 8 * 1]
  3564 0000155D 5D                      	pop rbp	; the proc will restore it!
  3565 0000155E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3566 00001561 C9                      	leave
  3567 00001562 C21800                  	ret AND_KILL_FRAME(1)
  3568                                  .L_lambda_simple_end_0530:	; new closure is in rax
  3569 00001565 48890425[71130000]      	mov qword [free_var_85], rax
  3570 0000156D 48B8-                   	mov rax, sob_void
  3570 0000156F [0000000000000000] 
  3571                                  
  3572 00001577 4889C7                  	mov rdi, rax
  3573 0000157A E8BB420100              	call print_sexpr_if_not_void
  3574                                  
  3575 0000157F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3576 00001584 E89F410100              	call malloc
  3577 00001589 50                      	push rax
  3578 0000158A BF00000000              	mov rdi, 8 * 0	; new rib
  3579 0000158F E894410100              	call malloc
  3580 00001594 50                      	push rax
  3581 00001595 BF08000000              	mov rdi, 8 * 1	; extended env
  3582 0000159A E889410100              	call malloc
  3583 0000159F 488B7D10                	mov rdi, ENV
  3584 000015A3 BE00000000              	mov rsi, 0
  3585 000015A8 BA01000000              	mov rdx, 1
  3586                                  .L_lambda_simple_env_loop_0531:	; ext_env[i + 1] <-- env[i]
  3587 000015AD 4883FE00                	cmp rsi, 0
  3588 000015B1 7410                    	je .L_lambda_simple_env_end_0531
  3589 000015B3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3590 000015B7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3591 000015BB 48FFC6                  	inc rsi
  3592 000015BE 48FFC2                  	inc rdx
  3593 000015C1 EBEA                    	jmp .L_lambda_simple_env_loop_0531
  3594                                  .L_lambda_simple_env_end_0531:
  3595 000015C3 5B                      	pop rbx
  3596 000015C4 BE00000000              	mov rsi, 0
  3597                                  .L_lambda_simple_params_loop_0531:	; copy params
  3598 000015C9 4883FE00                	cmp rsi, 0
  3599 000015CD 740E                    	je .L_lambda_simple_params_end_0531
  3600 000015CF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3601 000015D4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3602 000015D8 48FFC6                  	inc rsi
  3603 000015DB EBEC                    	jmp .L_lambda_simple_params_loop_0531
  3604                                  .L_lambda_simple_params_end_0531:
  3605 000015DD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3606 000015E0 4889C3                  	mov rbx, rax
  3607 000015E3 58                      	pop rax
  3608 000015E4 C60004                  	mov byte [rax], T_closure
  3609 000015E7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3610 000015EB 48C74009[F8150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0531
  3611 000015F3 E99B000000              	jmp .L_lambda_simple_end_0531
  3612                                  .L_lambda_simple_code_0531:	; lambda-simple body
  3613 000015F8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3614 000015FE 740B                    	je .L_lambda_simple_arity_check_ok_0531
  3615 00001600 FF742410                	push qword [rsp + 8 * 2]
  3616 00001604 6A01                    	push 1
  3617 00001606 E9D6400100              	jmp L_error_incorrect_arity_simple
  3618                                  .L_lambda_simple_arity_check_ok_0531:
  3619 0000160B C8000000                	enter 0, 0
  3620                                  	; preparing a tail-call
  3621 0000160F 488B4520                	mov rax, PARAM(0)	; param x
  3622 00001613 50                      	push rax
  3623 00001614 6A01                    	push 1	; arg count
  3624 00001616 488B0425[B6120000]      	mov rax, qword [free_var_74]	; free var caar
  3625 0000161E 803805                  	cmp byte [rax], T_undefined
  3626 00001621 0F84D43F0100            	je L_error_fvar_undefined
  3627 00001627 803804                  	cmp byte [rax], T_closure
  3628 0000162A 0F854F400100            	jne L_error_non_closure
  3629 00001630 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3630 00001633 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3631 00001636 50                      	push rax
  3632 00001637 6A01                    	push 1	; arg count
  3633 00001639 488B0425[B6120000]      	mov rax, qword [free_var_74]	; free var caar
  3634 00001641 803805                  	cmp byte [rax], T_undefined
  3635 00001644 0F84B13F0100            	je L_error_fvar_undefined
  3636 0000164A 803804                  	cmp byte [rax], T_closure
  3637 0000164D 0F852C400100            	jne L_error_non_closure
  3638 00001653 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3639                                  
  3640                                  	; recycling the current frame
  3641 00001656 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3642 00001659 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3643 0000165C B905000000              	mov rcx, 1 + 4
  3644 00001661 488B5D18                	mov rbx, COUNT
  3645 00001665 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3646 0000166A 488D55F8                	lea rdx, [rbp - 8 * 1]
  3647                                  .L_tc_recycle_frame_loop_06ce:
  3648 0000166E 4883F900                	cmp rcx, 0
  3649 00001672 7413                    	je .L_tc_recycle_frame_done_06ce
  3650 00001674 488B32                  	mov rsi, qword [rdx]
  3651 00001677 488933                  	mov qword [rbx], rsi
  3652 0000167A 48FFC9                  	dec rcx
  3653 0000167D 4883EB08                	sub rbx, 8 * 1
  3654 00001681 4883EA08                	sub rdx, 8 * 1
  3655 00001685 EBE7                    	jmp .L_tc_recycle_frame_loop_06ce
  3656                                  .L_tc_recycle_frame_done_06ce:
  3657 00001687 488D6308                	lea rsp, [rbx + 8 * 1]
  3658 0000168B 5D                      	pop rbp	; the proc will restore it!
  3659 0000168C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3660 0000168F C9                      	leave
  3661 00001690 C21800                  	ret AND_KILL_FRAME(1)
  3662                                  .L_lambda_simple_end_0531:	; new closure is in rax
  3663 00001693 48890425[82130000]      	mov qword [free_var_86], rax
  3664 0000169B 48B8-                   	mov rax, sob_void
  3664 0000169D [0000000000000000] 
  3665                                  
  3666 000016A5 4889C7                  	mov rdi, rax
  3667 000016A8 E88D410100              	call print_sexpr_if_not_void
  3668                                  
  3669 000016AD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3670 000016B2 E871400100              	call malloc
  3671 000016B7 50                      	push rax
  3672 000016B8 BF00000000              	mov rdi, 8 * 0	; new rib
  3673 000016BD E866400100              	call malloc
  3674 000016C2 50                      	push rax
  3675 000016C3 BF08000000              	mov rdi, 8 * 1	; extended env
  3676 000016C8 E85B400100              	call malloc
  3677 000016CD 488B7D10                	mov rdi, ENV
  3678 000016D1 BE00000000              	mov rsi, 0
  3679 000016D6 BA01000000              	mov rdx, 1
  3680                                  .L_lambda_simple_env_loop_0532:	; ext_env[i + 1] <-- env[i]
  3681 000016DB 4883FE00                	cmp rsi, 0
  3682 000016DF 7410                    	je .L_lambda_simple_env_end_0532
  3683 000016E1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3684 000016E5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3685 000016E9 48FFC6                  	inc rsi
  3686 000016EC 48FFC2                  	inc rdx
  3687 000016EF EBEA                    	jmp .L_lambda_simple_env_loop_0532
  3688                                  .L_lambda_simple_env_end_0532:
  3689 000016F1 5B                      	pop rbx
  3690 000016F2 BE00000000              	mov rsi, 0
  3691                                  .L_lambda_simple_params_loop_0532:	; copy params
  3692 000016F7 4883FE00                	cmp rsi, 0
  3693 000016FB 740E                    	je .L_lambda_simple_params_end_0532
  3694 000016FD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3695 00001702 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3696 00001706 48FFC6                  	inc rsi
  3697 00001709 EBEC                    	jmp .L_lambda_simple_params_loop_0532
  3698                                  .L_lambda_simple_params_end_0532:
  3699 0000170B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3700 0000170E 4889C3                  	mov rbx, rax
  3701 00001711 58                      	pop rax
  3702 00001712 C60004                  	mov byte [rax], T_closure
  3703 00001715 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3704 00001719 48C74009[26170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0532
  3705 00001721 E99B000000              	jmp .L_lambda_simple_end_0532
  3706                                  .L_lambda_simple_code_0532:	; lambda-simple body
  3707 00001726 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3708 0000172C 740B                    	je .L_lambda_simple_arity_check_ok_0532
  3709 0000172E FF742410                	push qword [rsp + 8 * 2]
  3710 00001732 6A01                    	push 1
  3711 00001734 E9A83F0100              	jmp L_error_incorrect_arity_simple
  3712                                  .L_lambda_simple_arity_check_ok_0532:
  3713 00001739 C8000000                	enter 0, 0
  3714                                  	; preparing a tail-call
  3715 0000173D 488B4520                	mov rax, PARAM(0)	; param x
  3716 00001741 50                      	push rax
  3717 00001742 6A01                    	push 1	; arg count
  3718 00001744 488B0425[C7120000]      	mov rax, qword [free_var_75]	; free var cadr
  3719 0000174C 803805                  	cmp byte [rax], T_undefined
  3720 0000174F 0F84A63E0100            	je L_error_fvar_undefined
  3721 00001755 803804                  	cmp byte [rax], T_closure
  3722 00001758 0F85213F0100            	jne L_error_non_closure
  3723 0000175E FF7001                  	push SOB_CLOSURE_ENV(rax)
  3724 00001761 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3725 00001764 50                      	push rax
  3726 00001765 6A01                    	push 1	; arg count
  3727 00001767 488B0425[B6120000]      	mov rax, qword [free_var_74]	; free var caar
  3728 0000176F 803805                  	cmp byte [rax], T_undefined
  3729 00001772 0F84833E0100            	je L_error_fvar_undefined
  3730 00001778 803804                  	cmp byte [rax], T_closure
  3731 0000177B 0F85FE3E0100            	jne L_error_non_closure
  3732 00001781 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3733                                  
  3734                                  	; recycling the current frame
  3735 00001784 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3736 00001787 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3737 0000178A B905000000              	mov rcx, 1 + 4
  3738 0000178F 488B5D18                	mov rbx, COUNT
  3739 00001793 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3740 00001798 488D55F8                	lea rdx, [rbp - 8 * 1]
  3741                                  .L_tc_recycle_frame_loop_06cf:
  3742 0000179C 4883F900                	cmp rcx, 0
  3743 000017A0 7413                    	je .L_tc_recycle_frame_done_06cf
  3744 000017A2 488B32                  	mov rsi, qword [rdx]
  3745 000017A5 488933                  	mov qword [rbx], rsi
  3746 000017A8 48FFC9                  	dec rcx
  3747 000017AB 4883EB08                	sub rbx, 8 * 1
  3748 000017AF 4883EA08                	sub rdx, 8 * 1
  3749 000017B3 EBE7                    	jmp .L_tc_recycle_frame_loop_06cf
  3750                                  .L_tc_recycle_frame_done_06cf:
  3751 000017B5 488D6308                	lea rsp, [rbx + 8 * 1]
  3752 000017B9 5D                      	pop rbp	; the proc will restore it!
  3753 000017BA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3754 000017BD C9                      	leave
  3755 000017BE C21800                  	ret AND_KILL_FRAME(1)
  3756                                  .L_lambda_simple_end_0532:	; new closure is in rax
  3757 000017C1 48890425[93130000]      	mov qword [free_var_87], rax
  3758 000017C9 48B8-                   	mov rax, sob_void
  3758 000017CB [0000000000000000] 
  3759                                  
  3760 000017D3 4889C7                  	mov rdi, rax
  3761 000017D6 E85F400100              	call print_sexpr_if_not_void
  3762                                  
  3763 000017DB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3764 000017E0 E8433F0100              	call malloc
  3765 000017E5 50                      	push rax
  3766 000017E6 BF00000000              	mov rdi, 8 * 0	; new rib
  3767 000017EB E8383F0100              	call malloc
  3768 000017F0 50                      	push rax
  3769 000017F1 BF08000000              	mov rdi, 8 * 1	; extended env
  3770 000017F6 E82D3F0100              	call malloc
  3771 000017FB 488B7D10                	mov rdi, ENV
  3772 000017FF BE00000000              	mov rsi, 0
  3773 00001804 BA01000000              	mov rdx, 1
  3774                                  .L_lambda_simple_env_loop_0533:	; ext_env[i + 1] <-- env[i]
  3775 00001809 4883FE00                	cmp rsi, 0
  3776 0000180D 7410                    	je .L_lambda_simple_env_end_0533
  3777 0000180F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3778 00001813 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3779 00001817 48FFC6                  	inc rsi
  3780 0000181A 48FFC2                  	inc rdx
  3781 0000181D EBEA                    	jmp .L_lambda_simple_env_loop_0533
  3782                                  .L_lambda_simple_env_end_0533:
  3783 0000181F 5B                      	pop rbx
  3784 00001820 BE00000000              	mov rsi, 0
  3785                                  .L_lambda_simple_params_loop_0533:	; copy params
  3786 00001825 4883FE00                	cmp rsi, 0
  3787 00001829 740E                    	je .L_lambda_simple_params_end_0533
  3788 0000182B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3789 00001830 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3790 00001834 48FFC6                  	inc rsi
  3791 00001837 EBEC                    	jmp .L_lambda_simple_params_loop_0533
  3792                                  .L_lambda_simple_params_end_0533:
  3793 00001839 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3794 0000183C 4889C3                  	mov rbx, rax
  3795 0000183F 58                      	pop rax
  3796 00001840 C60004                  	mov byte [rax], T_closure
  3797 00001843 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3798 00001847 48C74009[54180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0533
  3799 0000184F E99B000000              	jmp .L_lambda_simple_end_0533
  3800                                  .L_lambda_simple_code_0533:	; lambda-simple body
  3801 00001854 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3802 0000185A 740B                    	je .L_lambda_simple_arity_check_ok_0533
  3803 0000185C FF742410                	push qword [rsp + 8 * 2]
  3804 00001860 6A01                    	push 1
  3805 00001862 E97A3E0100              	jmp L_error_incorrect_arity_simple
  3806                                  .L_lambda_simple_arity_check_ok_0533:
  3807 00001867 C8000000                	enter 0, 0
  3808                                  	; preparing a tail-call
  3809 0000186B 488B4520                	mov rax, PARAM(0)	; param x
  3810 0000186F 50                      	push rax
  3811 00001870 6A01                    	push 1	; arg count
  3812 00001872 488B0425[D8120000]      	mov rax, qword [free_var_76]	; free var cdar
  3813 0000187A 803805                  	cmp byte [rax], T_undefined
  3814 0000187D 0F84783D0100            	je L_error_fvar_undefined
  3815 00001883 803804                  	cmp byte [rax], T_closure
  3816 00001886 0F85F33D0100            	jne L_error_non_closure
  3817 0000188C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3818 0000188F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3819 00001892 50                      	push rax
  3820 00001893 6A01                    	push 1	; arg count
  3821 00001895 488B0425[B6120000]      	mov rax, qword [free_var_74]	; free var caar
  3822 0000189D 803805                  	cmp byte [rax], T_undefined
  3823 000018A0 0F84553D0100            	je L_error_fvar_undefined
  3824 000018A6 803804                  	cmp byte [rax], T_closure
  3825 000018A9 0F85D03D0100            	jne L_error_non_closure
  3826 000018AF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3827                                  
  3828                                  	; recycling the current frame
  3829 000018B2 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3830 000018B5 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3831 000018B8 B905000000              	mov rcx, 1 + 4
  3832 000018BD 488B5D18                	mov rbx, COUNT
  3833 000018C1 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3834 000018C6 488D55F8                	lea rdx, [rbp - 8 * 1]
  3835                                  .L_tc_recycle_frame_loop_06d0:
  3836 000018CA 4883F900                	cmp rcx, 0
  3837 000018CE 7413                    	je .L_tc_recycle_frame_done_06d0
  3838 000018D0 488B32                  	mov rsi, qword [rdx]
  3839 000018D3 488933                  	mov qword [rbx], rsi
  3840 000018D6 48FFC9                  	dec rcx
  3841 000018D9 4883EB08                	sub rbx, 8 * 1
  3842 000018DD 4883EA08                	sub rdx, 8 * 1
  3843 000018E1 EBE7                    	jmp .L_tc_recycle_frame_loop_06d0
  3844                                  .L_tc_recycle_frame_done_06d0:
  3845 000018E3 488D6308                	lea rsp, [rbx + 8 * 1]
  3846 000018E7 5D                      	pop rbp	; the proc will restore it!
  3847 000018E8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3848 000018EB C9                      	leave
  3849 000018EC C21800                  	ret AND_KILL_FRAME(1)
  3850                                  .L_lambda_simple_end_0533:	; new closure is in rax
  3851 000018EF 48890425[A4130000]      	mov qword [free_var_88], rax
  3852 000018F7 48B8-                   	mov rax, sob_void
  3852 000018F9 [0000000000000000] 
  3853                                  
  3854 00001901 4889C7                  	mov rdi, rax
  3855 00001904 E8313F0100              	call print_sexpr_if_not_void
  3856                                  
  3857 00001909 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3858 0000190E E8153E0100              	call malloc
  3859 00001913 50                      	push rax
  3860 00001914 BF00000000              	mov rdi, 8 * 0	; new rib
  3861 00001919 E80A3E0100              	call malloc
  3862 0000191E 50                      	push rax
  3863 0000191F BF08000000              	mov rdi, 8 * 1	; extended env
  3864 00001924 E8FF3D0100              	call malloc
  3865 00001929 488B7D10                	mov rdi, ENV
  3866 0000192D BE00000000              	mov rsi, 0
  3867 00001932 BA01000000              	mov rdx, 1
  3868                                  .L_lambda_simple_env_loop_0534:	; ext_env[i + 1] <-- env[i]
  3869 00001937 4883FE00                	cmp rsi, 0
  3870 0000193B 7410                    	je .L_lambda_simple_env_end_0534
  3871 0000193D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3872 00001941 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3873 00001945 48FFC6                  	inc rsi
  3874 00001948 48FFC2                  	inc rdx
  3875 0000194B EBEA                    	jmp .L_lambda_simple_env_loop_0534
  3876                                  .L_lambda_simple_env_end_0534:
  3877 0000194D 5B                      	pop rbx
  3878 0000194E BE00000000              	mov rsi, 0
  3879                                  .L_lambda_simple_params_loop_0534:	; copy params
  3880 00001953 4883FE00                	cmp rsi, 0
  3881 00001957 740E                    	je .L_lambda_simple_params_end_0534
  3882 00001959 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3883 0000195E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3884 00001962 48FFC6                  	inc rsi
  3885 00001965 EBEC                    	jmp .L_lambda_simple_params_loop_0534
  3886                                  .L_lambda_simple_params_end_0534:
  3887 00001967 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3888 0000196A 4889C3                  	mov rbx, rax
  3889 0000196D 58                      	pop rax
  3890 0000196E C60004                  	mov byte [rax], T_closure
  3891 00001971 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3892 00001975 48C74009[82190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0534
  3893 0000197D E99B000000              	jmp .L_lambda_simple_end_0534
  3894                                  .L_lambda_simple_code_0534:	; lambda-simple body
  3895 00001982 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3896 00001988 740B                    	je .L_lambda_simple_arity_check_ok_0534
  3897 0000198A FF742410                	push qword [rsp + 8 * 2]
  3898 0000198E 6A01                    	push 1
  3899 00001990 E94C3D0100              	jmp L_error_incorrect_arity_simple
  3900                                  .L_lambda_simple_arity_check_ok_0534:
  3901 00001995 C8000000                	enter 0, 0
  3902                                  	; preparing a tail-call
  3903 00001999 488B4520                	mov rax, PARAM(0)	; param x
  3904 0000199D 50                      	push rax
  3905 0000199E 6A01                    	push 1	; arg count
  3906 000019A0 488B0425[E9120000]      	mov rax, qword [free_var_77]	; free var cddr
  3907 000019A8 803805                  	cmp byte [rax], T_undefined
  3908 000019AB 0F844A3C0100            	je L_error_fvar_undefined
  3909 000019B1 803804                  	cmp byte [rax], T_closure
  3910 000019B4 0F85C53C0100            	jne L_error_non_closure
  3911 000019BA FF7001                  	push SOB_CLOSURE_ENV(rax)
  3912 000019BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  3913 000019C0 50                      	push rax
  3914 000019C1 6A01                    	push 1	; arg count
  3915 000019C3 488B0425[B6120000]      	mov rax, qword [free_var_74]	; free var caar
  3916 000019CB 803805                  	cmp byte [rax], T_undefined
  3917 000019CE 0F84273C0100            	je L_error_fvar_undefined
  3918 000019D4 803804                  	cmp byte [rax], T_closure
  3919 000019D7 0F85A23C0100            	jne L_error_non_closure
  3920 000019DD FF7001                  	push SOB_CLOSURE_ENV(rax)
  3921                                  
  3922                                  	; recycling the current frame
  3923 000019E0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  3924 000019E3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  3925 000019E6 B905000000              	mov rcx, 1 + 4
  3926 000019EB 488B5D18                	mov rbx, COUNT
  3927 000019EF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  3928 000019F4 488D55F8                	lea rdx, [rbp - 8 * 1]
  3929                                  .L_tc_recycle_frame_loop_06d1:
  3930 000019F8 4883F900                	cmp rcx, 0
  3931 000019FC 7413                    	je .L_tc_recycle_frame_done_06d1
  3932 000019FE 488B32                  	mov rsi, qword [rdx]
  3933 00001A01 488933                  	mov qword [rbx], rsi
  3934 00001A04 48FFC9                  	dec rcx
  3935 00001A07 4883EB08                	sub rbx, 8 * 1
  3936 00001A0B 4883EA08                	sub rdx, 8 * 1
  3937 00001A0F EBE7                    	jmp .L_tc_recycle_frame_loop_06d1
  3938                                  .L_tc_recycle_frame_done_06d1:
  3939 00001A11 488D6308                	lea rsp, [rbx + 8 * 1]
  3940 00001A15 5D                      	pop rbp	; the proc will restore it!
  3941 00001A16 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3942 00001A19 C9                      	leave
  3943 00001A1A C21800                  	ret AND_KILL_FRAME(1)
  3944                                  .L_lambda_simple_end_0534:	; new closure is in rax
  3945 00001A1D 48890425[B5130000]      	mov qword [free_var_89], rax
  3946 00001A25 48B8-                   	mov rax, sob_void
  3946 00001A27 [0000000000000000] 
  3947                                  
  3948 00001A2F 4889C7                  	mov rdi, rax
  3949 00001A32 E8033E0100              	call print_sexpr_if_not_void
  3950                                  
  3951 00001A37 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3952 00001A3C E8E73C0100              	call malloc
  3953 00001A41 50                      	push rax
  3954 00001A42 BF00000000              	mov rdi, 8 * 0	; new rib
  3955 00001A47 E8DC3C0100              	call malloc
  3956 00001A4C 50                      	push rax
  3957 00001A4D BF08000000              	mov rdi, 8 * 1	; extended env
  3958 00001A52 E8D13C0100              	call malloc
  3959 00001A57 488B7D10                	mov rdi, ENV
  3960 00001A5B BE00000000              	mov rsi, 0
  3961 00001A60 BA01000000              	mov rdx, 1
  3962                                  .L_lambda_simple_env_loop_0535:	; ext_env[i + 1] <-- env[i]
  3963 00001A65 4883FE00                	cmp rsi, 0
  3964 00001A69 7410                    	je .L_lambda_simple_env_end_0535
  3965 00001A6B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3966 00001A6F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3967 00001A73 48FFC6                  	inc rsi
  3968 00001A76 48FFC2                  	inc rdx
  3969 00001A79 EBEA                    	jmp .L_lambda_simple_env_loop_0535
  3970                                  .L_lambda_simple_env_end_0535:
  3971 00001A7B 5B                      	pop rbx
  3972 00001A7C BE00000000              	mov rsi, 0
  3973                                  .L_lambda_simple_params_loop_0535:	; copy params
  3974 00001A81 4883FE00                	cmp rsi, 0
  3975 00001A85 740E                    	je .L_lambda_simple_params_end_0535
  3976 00001A87 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3977 00001A8C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3978 00001A90 48FFC6                  	inc rsi
  3979 00001A93 EBEC                    	jmp .L_lambda_simple_params_loop_0535
  3980                                  .L_lambda_simple_params_end_0535:
  3981 00001A95 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3982 00001A98 4889C3                  	mov rbx, rax
  3983 00001A9B 58                      	pop rax
  3984 00001A9C C60004                  	mov byte [rax], T_closure
  3985 00001A9F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3986 00001AA3 48C74009[B01A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0535
  3987 00001AAB E99B000000              	jmp .L_lambda_simple_end_0535
  3988                                  .L_lambda_simple_code_0535:	; lambda-simple body
  3989 00001AB0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3990 00001AB6 740B                    	je .L_lambda_simple_arity_check_ok_0535
  3991 00001AB8 FF742410                	push qword [rsp + 8 * 2]
  3992 00001ABC 6A01                    	push 1
  3993 00001ABE E91E3C0100              	jmp L_error_incorrect_arity_simple
  3994                                  .L_lambda_simple_arity_check_ok_0535:
  3995 00001AC3 C8000000                	enter 0, 0
  3996                                  	; preparing a tail-call
  3997 00001AC7 488B4520                	mov rax, PARAM(0)	; param x
  3998 00001ACB 50                      	push rax
  3999 00001ACC 6A01                    	push 1	; arg count
  4000 00001ACE 488B0425[B6120000]      	mov rax, qword [free_var_74]	; free var caar
  4001 00001AD6 803805                  	cmp byte [rax], T_undefined
  4002 00001AD9 0F841C3B0100            	je L_error_fvar_undefined
  4003 00001ADF 803804                  	cmp byte [rax], T_closure
  4004 00001AE2 0F85973B0100            	jne L_error_non_closure
  4005 00001AE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4006 00001AEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  4007 00001AEE 50                      	push rax
  4008 00001AEF 6A01                    	push 1	; arg count
  4009 00001AF1 488B0425[C7120000]      	mov rax, qword [free_var_75]	; free var cadr
  4010 00001AF9 803805                  	cmp byte [rax], T_undefined
  4011 00001AFC 0F84F93A0100            	je L_error_fvar_undefined
  4012 00001B02 803804                  	cmp byte [rax], T_closure
  4013 00001B05 0F85743B0100            	jne L_error_non_closure
  4014 00001B0B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4015                                  
  4016                                  	; recycling the current frame
  4017 00001B0E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4018 00001B11 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4019 00001B14 B905000000              	mov rcx, 1 + 4
  4020 00001B19 488B5D18                	mov rbx, COUNT
  4021 00001B1D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4022 00001B22 488D55F8                	lea rdx, [rbp - 8 * 1]
  4023                                  .L_tc_recycle_frame_loop_06d2:
  4024 00001B26 4883F900                	cmp rcx, 0
  4025 00001B2A 7413                    	je .L_tc_recycle_frame_done_06d2
  4026 00001B2C 488B32                  	mov rsi, qword [rdx]
  4027 00001B2F 488933                  	mov qword [rbx], rsi
  4028 00001B32 48FFC9                  	dec rcx
  4029 00001B35 4883EB08                	sub rbx, 8 * 1
  4030 00001B39 4883EA08                	sub rdx, 8 * 1
  4031 00001B3D EBE7                    	jmp .L_tc_recycle_frame_loop_06d2
  4032                                  .L_tc_recycle_frame_done_06d2:
  4033 00001B3F 488D6308                	lea rsp, [rbx + 8 * 1]
  4034 00001B43 5D                      	pop rbp	; the proc will restore it!
  4035 00001B44 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4036 00001B47 C9                      	leave
  4037 00001B48 C21800                  	ret AND_KILL_FRAME(1)
  4038                                  .L_lambda_simple_end_0535:	; new closure is in rax
  4039 00001B4B 48890425[C6130000]      	mov qword [free_var_90], rax
  4040 00001B53 48B8-                   	mov rax, sob_void
  4040 00001B55 [0000000000000000] 
  4041                                  
  4042 00001B5D 4889C7                  	mov rdi, rax
  4043 00001B60 E8D53C0100              	call print_sexpr_if_not_void
  4044                                  
  4045 00001B65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4046 00001B6A E8B93B0100              	call malloc
  4047 00001B6F 50                      	push rax
  4048 00001B70 BF00000000              	mov rdi, 8 * 0	; new rib
  4049 00001B75 E8AE3B0100              	call malloc
  4050 00001B7A 50                      	push rax
  4051 00001B7B BF08000000              	mov rdi, 8 * 1	; extended env
  4052 00001B80 E8A33B0100              	call malloc
  4053 00001B85 488B7D10                	mov rdi, ENV
  4054 00001B89 BE00000000              	mov rsi, 0
  4055 00001B8E BA01000000              	mov rdx, 1
  4056                                  .L_lambda_simple_env_loop_0536:	; ext_env[i + 1] <-- env[i]
  4057 00001B93 4883FE00                	cmp rsi, 0
  4058 00001B97 7410                    	je .L_lambda_simple_env_end_0536
  4059 00001B99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4060 00001B9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4061 00001BA1 48FFC6                  	inc rsi
  4062 00001BA4 48FFC2                  	inc rdx
  4063 00001BA7 EBEA                    	jmp .L_lambda_simple_env_loop_0536
  4064                                  .L_lambda_simple_env_end_0536:
  4065 00001BA9 5B                      	pop rbx
  4066 00001BAA BE00000000              	mov rsi, 0
  4067                                  .L_lambda_simple_params_loop_0536:	; copy params
  4068 00001BAF 4883FE00                	cmp rsi, 0
  4069 00001BB3 740E                    	je .L_lambda_simple_params_end_0536
  4070 00001BB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4071 00001BBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4072 00001BBE 48FFC6                  	inc rsi
  4073 00001BC1 EBEC                    	jmp .L_lambda_simple_params_loop_0536
  4074                                  .L_lambda_simple_params_end_0536:
  4075 00001BC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4076 00001BC6 4889C3                  	mov rbx, rax
  4077 00001BC9 58                      	pop rax
  4078 00001BCA C60004                  	mov byte [rax], T_closure
  4079 00001BCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4080 00001BD1 48C74009[DE1B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0536
  4081 00001BD9 E99B000000              	jmp .L_lambda_simple_end_0536
  4082                                  .L_lambda_simple_code_0536:	; lambda-simple body
  4083 00001BDE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4084 00001BE4 740B                    	je .L_lambda_simple_arity_check_ok_0536
  4085 00001BE6 FF742410                	push qword [rsp + 8 * 2]
  4086 00001BEA 6A01                    	push 1
  4087 00001BEC E9F03A0100              	jmp L_error_incorrect_arity_simple
  4088                                  .L_lambda_simple_arity_check_ok_0536:
  4089 00001BF1 C8000000                	enter 0, 0
  4090                                  	; preparing a tail-call
  4091 00001BF5 488B4520                	mov rax, PARAM(0)	; param x
  4092 00001BF9 50                      	push rax
  4093 00001BFA 6A01                    	push 1	; arg count
  4094 00001BFC 488B0425[C7120000]      	mov rax, qword [free_var_75]	; free var cadr
  4095 00001C04 803805                  	cmp byte [rax], T_undefined
  4096 00001C07 0F84EE390100            	je L_error_fvar_undefined
  4097 00001C0D 803804                  	cmp byte [rax], T_closure
  4098 00001C10 0F85693A0100            	jne L_error_non_closure
  4099 00001C16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4100 00001C19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4101 00001C1C 50                      	push rax
  4102 00001C1D 6A01                    	push 1	; arg count
  4103 00001C1F 488B0425[C7120000]      	mov rax, qword [free_var_75]	; free var cadr
  4104 00001C27 803805                  	cmp byte [rax], T_undefined
  4105 00001C2A 0F84CB390100            	je L_error_fvar_undefined
  4106 00001C30 803804                  	cmp byte [rax], T_closure
  4107 00001C33 0F85463A0100            	jne L_error_non_closure
  4108 00001C39 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4109                                  
  4110                                  	; recycling the current frame
  4111 00001C3C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4112 00001C3F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4113 00001C42 B905000000              	mov rcx, 1 + 4
  4114 00001C47 488B5D18                	mov rbx, COUNT
  4115 00001C4B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4116 00001C50 488D55F8                	lea rdx, [rbp - 8 * 1]
  4117                                  .L_tc_recycle_frame_loop_06d3:
  4118 00001C54 4883F900                	cmp rcx, 0
  4119 00001C58 7413                    	je .L_tc_recycle_frame_done_06d3
  4120 00001C5A 488B32                  	mov rsi, qword [rdx]
  4121 00001C5D 488933                  	mov qword [rbx], rsi
  4122 00001C60 48FFC9                  	dec rcx
  4123 00001C63 4883EB08                	sub rbx, 8 * 1
  4124 00001C67 4883EA08                	sub rdx, 8 * 1
  4125 00001C6B EBE7                    	jmp .L_tc_recycle_frame_loop_06d3
  4126                                  .L_tc_recycle_frame_done_06d3:
  4127 00001C6D 488D6308                	lea rsp, [rbx + 8 * 1]
  4128 00001C71 5D                      	pop rbp	; the proc will restore it!
  4129 00001C72 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4130 00001C75 C9                      	leave
  4131 00001C76 C21800                  	ret AND_KILL_FRAME(1)
  4132                                  .L_lambda_simple_end_0536:	; new closure is in rax
  4133 00001C79 48890425[D7130000]      	mov qword [free_var_91], rax
  4134 00001C81 48B8-                   	mov rax, sob_void
  4134 00001C83 [0000000000000000] 
  4135                                  
  4136 00001C8B 4889C7                  	mov rdi, rax
  4137 00001C8E E8A73B0100              	call print_sexpr_if_not_void
  4138                                  
  4139 00001C93 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4140 00001C98 E88B3A0100              	call malloc
  4141 00001C9D 50                      	push rax
  4142 00001C9E BF00000000              	mov rdi, 8 * 0	; new rib
  4143 00001CA3 E8803A0100              	call malloc
  4144 00001CA8 50                      	push rax
  4145 00001CA9 BF08000000              	mov rdi, 8 * 1	; extended env
  4146 00001CAE E8753A0100              	call malloc
  4147 00001CB3 488B7D10                	mov rdi, ENV
  4148 00001CB7 BE00000000              	mov rsi, 0
  4149 00001CBC BA01000000              	mov rdx, 1
  4150                                  .L_lambda_simple_env_loop_0537:	; ext_env[i + 1] <-- env[i]
  4151 00001CC1 4883FE00                	cmp rsi, 0
  4152 00001CC5 7410                    	je .L_lambda_simple_env_end_0537
  4153 00001CC7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4154 00001CCB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4155 00001CCF 48FFC6                  	inc rsi
  4156 00001CD2 48FFC2                  	inc rdx
  4157 00001CD5 EBEA                    	jmp .L_lambda_simple_env_loop_0537
  4158                                  .L_lambda_simple_env_end_0537:
  4159 00001CD7 5B                      	pop rbx
  4160 00001CD8 BE00000000              	mov rsi, 0
  4161                                  .L_lambda_simple_params_loop_0537:	; copy params
  4162 00001CDD 4883FE00                	cmp rsi, 0
  4163 00001CE1 740E                    	je .L_lambda_simple_params_end_0537
  4164 00001CE3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4165 00001CE8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4166 00001CEC 48FFC6                  	inc rsi
  4167 00001CEF EBEC                    	jmp .L_lambda_simple_params_loop_0537
  4168                                  .L_lambda_simple_params_end_0537:
  4169 00001CF1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4170 00001CF4 4889C3                  	mov rbx, rax
  4171 00001CF7 58                      	pop rax
  4172 00001CF8 C60004                  	mov byte [rax], T_closure
  4173 00001CFB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4174 00001CFF 48C74009[0C1D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0537
  4175 00001D07 E99B000000              	jmp .L_lambda_simple_end_0537
  4176                                  .L_lambda_simple_code_0537:	; lambda-simple body
  4177 00001D0C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4178 00001D12 740B                    	je .L_lambda_simple_arity_check_ok_0537
  4179 00001D14 FF742410                	push qword [rsp + 8 * 2]
  4180 00001D18 6A01                    	push 1
  4181 00001D1A E9C2390100              	jmp L_error_incorrect_arity_simple
  4182                                  .L_lambda_simple_arity_check_ok_0537:
  4183 00001D1F C8000000                	enter 0, 0
  4184                                  	; preparing a tail-call
  4185 00001D23 488B4520                	mov rax, PARAM(0)	; param x
  4186 00001D27 50                      	push rax
  4187 00001D28 6A01                    	push 1	; arg count
  4188 00001D2A 488B0425[D8120000]      	mov rax, qword [free_var_76]	; free var cdar
  4189 00001D32 803805                  	cmp byte [rax], T_undefined
  4190 00001D35 0F84C0380100            	je L_error_fvar_undefined
  4191 00001D3B 803804                  	cmp byte [rax], T_closure
  4192 00001D3E 0F853B390100            	jne L_error_non_closure
  4193 00001D44 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4194 00001D47 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4195 00001D4A 50                      	push rax
  4196 00001D4B 6A01                    	push 1	; arg count
  4197 00001D4D 488B0425[C7120000]      	mov rax, qword [free_var_75]	; free var cadr
  4198 00001D55 803805                  	cmp byte [rax], T_undefined
  4199 00001D58 0F849D380100            	je L_error_fvar_undefined
  4200 00001D5E 803804                  	cmp byte [rax], T_closure
  4201 00001D61 0F8518390100            	jne L_error_non_closure
  4202 00001D67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4203                                  
  4204                                  	; recycling the current frame
  4205 00001D6A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4206 00001D6D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4207 00001D70 B905000000              	mov rcx, 1 + 4
  4208 00001D75 488B5D18                	mov rbx, COUNT
  4209 00001D79 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4210 00001D7E 488D55F8                	lea rdx, [rbp - 8 * 1]
  4211                                  .L_tc_recycle_frame_loop_06d4:
  4212 00001D82 4883F900                	cmp rcx, 0
  4213 00001D86 7413                    	je .L_tc_recycle_frame_done_06d4
  4214 00001D88 488B32                  	mov rsi, qword [rdx]
  4215 00001D8B 488933                  	mov qword [rbx], rsi
  4216 00001D8E 48FFC9                  	dec rcx
  4217 00001D91 4883EB08                	sub rbx, 8 * 1
  4218 00001D95 4883EA08                	sub rdx, 8 * 1
  4219 00001D99 EBE7                    	jmp .L_tc_recycle_frame_loop_06d4
  4220                                  .L_tc_recycle_frame_done_06d4:
  4221 00001D9B 488D6308                	lea rsp, [rbx + 8 * 1]
  4222 00001D9F 5D                      	pop rbp	; the proc will restore it!
  4223 00001DA0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4224 00001DA3 C9                      	leave
  4225 00001DA4 C21800                  	ret AND_KILL_FRAME(1)
  4226                                  .L_lambda_simple_end_0537:	; new closure is in rax
  4227 00001DA7 48890425[E8130000]      	mov qword [free_var_92], rax
  4228 00001DAF 48B8-                   	mov rax, sob_void
  4228 00001DB1 [0000000000000000] 
  4229                                  
  4230 00001DB9 4889C7                  	mov rdi, rax
  4231 00001DBC E8793A0100              	call print_sexpr_if_not_void
  4232                                  
  4233 00001DC1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4234 00001DC6 E85D390100              	call malloc
  4235 00001DCB 50                      	push rax
  4236 00001DCC BF00000000              	mov rdi, 8 * 0	; new rib
  4237 00001DD1 E852390100              	call malloc
  4238 00001DD6 50                      	push rax
  4239 00001DD7 BF08000000              	mov rdi, 8 * 1	; extended env
  4240 00001DDC E847390100              	call malloc
  4241 00001DE1 488B7D10                	mov rdi, ENV
  4242 00001DE5 BE00000000              	mov rsi, 0
  4243 00001DEA BA01000000              	mov rdx, 1
  4244                                  .L_lambda_simple_env_loop_0538:	; ext_env[i + 1] <-- env[i]
  4245 00001DEF 4883FE00                	cmp rsi, 0
  4246 00001DF3 7410                    	je .L_lambda_simple_env_end_0538
  4247 00001DF5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4248 00001DF9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4249 00001DFD 48FFC6                  	inc rsi
  4250 00001E00 48FFC2                  	inc rdx
  4251 00001E03 EBEA                    	jmp .L_lambda_simple_env_loop_0538
  4252                                  .L_lambda_simple_env_end_0538:
  4253 00001E05 5B                      	pop rbx
  4254 00001E06 BE00000000              	mov rsi, 0
  4255                                  .L_lambda_simple_params_loop_0538:	; copy params
  4256 00001E0B 4883FE00                	cmp rsi, 0
  4257 00001E0F 740E                    	je .L_lambda_simple_params_end_0538
  4258 00001E11 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4259 00001E16 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4260 00001E1A 48FFC6                  	inc rsi
  4261 00001E1D EBEC                    	jmp .L_lambda_simple_params_loop_0538
  4262                                  .L_lambda_simple_params_end_0538:
  4263 00001E1F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4264 00001E22 4889C3                  	mov rbx, rax
  4265 00001E25 58                      	pop rax
  4266 00001E26 C60004                  	mov byte [rax], T_closure
  4267 00001E29 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4268 00001E2D 48C74009[3A1E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0538
  4269 00001E35 E99B000000              	jmp .L_lambda_simple_end_0538
  4270                                  .L_lambda_simple_code_0538:	; lambda-simple body
  4271 00001E3A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4272 00001E40 740B                    	je .L_lambda_simple_arity_check_ok_0538
  4273 00001E42 FF742410                	push qword [rsp + 8 * 2]
  4274 00001E46 6A01                    	push 1
  4275 00001E48 E994380100              	jmp L_error_incorrect_arity_simple
  4276                                  .L_lambda_simple_arity_check_ok_0538:
  4277 00001E4D C8000000                	enter 0, 0
  4278                                  	; preparing a tail-call
  4279 00001E51 488B4520                	mov rax, PARAM(0)	; param x
  4280 00001E55 50                      	push rax
  4281 00001E56 6A01                    	push 1	; arg count
  4282 00001E58 488B0425[E9120000]      	mov rax, qword [free_var_77]	; free var cddr
  4283 00001E60 803805                  	cmp byte [rax], T_undefined
  4284 00001E63 0F8492370100            	je L_error_fvar_undefined
  4285 00001E69 803804                  	cmp byte [rax], T_closure
  4286 00001E6C 0F850D380100            	jne L_error_non_closure
  4287 00001E72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4288 00001E75 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4289 00001E78 50                      	push rax
  4290 00001E79 6A01                    	push 1	; arg count
  4291 00001E7B 488B0425[C7120000]      	mov rax, qword [free_var_75]	; free var cadr
  4292 00001E83 803805                  	cmp byte [rax], T_undefined
  4293 00001E86 0F846F370100            	je L_error_fvar_undefined
  4294 00001E8C 803804                  	cmp byte [rax], T_closure
  4295 00001E8F 0F85EA370100            	jne L_error_non_closure
  4296 00001E95 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4297                                  
  4298                                  	; recycling the current frame
  4299 00001E98 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4300 00001E9B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4301 00001E9E B905000000              	mov rcx, 1 + 4
  4302 00001EA3 488B5D18                	mov rbx, COUNT
  4303 00001EA7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4304 00001EAC 488D55F8                	lea rdx, [rbp - 8 * 1]
  4305                                  .L_tc_recycle_frame_loop_06d5:
  4306 00001EB0 4883F900                	cmp rcx, 0
  4307 00001EB4 7413                    	je .L_tc_recycle_frame_done_06d5
  4308 00001EB6 488B32                  	mov rsi, qword [rdx]
  4309 00001EB9 488933                  	mov qword [rbx], rsi
  4310 00001EBC 48FFC9                  	dec rcx
  4311 00001EBF 4883EB08                	sub rbx, 8 * 1
  4312 00001EC3 4883EA08                	sub rdx, 8 * 1
  4313 00001EC7 EBE7                    	jmp .L_tc_recycle_frame_loop_06d5
  4314                                  .L_tc_recycle_frame_done_06d5:
  4315 00001EC9 488D6308                	lea rsp, [rbx + 8 * 1]
  4316 00001ECD 5D                      	pop rbp	; the proc will restore it!
  4317 00001ECE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4318 00001ED1 C9                      	leave
  4319 00001ED2 C21800                  	ret AND_KILL_FRAME(1)
  4320                                  .L_lambda_simple_end_0538:	; new closure is in rax
  4321 00001ED5 48890425[F9130000]      	mov qword [free_var_93], rax
  4322 00001EDD 48B8-                   	mov rax, sob_void
  4322 00001EDF [0000000000000000] 
  4323                                  
  4324 00001EE7 4889C7                  	mov rdi, rax
  4325 00001EEA E84B390100              	call print_sexpr_if_not_void
  4326                                  
  4327 00001EEF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4328 00001EF4 E82F380100              	call malloc
  4329 00001EF9 50                      	push rax
  4330 00001EFA BF00000000              	mov rdi, 8 * 0	; new rib
  4331 00001EFF E824380100              	call malloc
  4332 00001F04 50                      	push rax
  4333 00001F05 BF08000000              	mov rdi, 8 * 1	; extended env
  4334 00001F0A E819380100              	call malloc
  4335 00001F0F 488B7D10                	mov rdi, ENV
  4336 00001F13 BE00000000              	mov rsi, 0
  4337 00001F18 BA01000000              	mov rdx, 1
  4338                                  .L_lambda_simple_env_loop_0539:	; ext_env[i + 1] <-- env[i]
  4339 00001F1D 4883FE00                	cmp rsi, 0
  4340 00001F21 7410                    	je .L_lambda_simple_env_end_0539
  4341 00001F23 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4342 00001F27 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4343 00001F2B 48FFC6                  	inc rsi
  4344 00001F2E 48FFC2                  	inc rdx
  4345 00001F31 EBEA                    	jmp .L_lambda_simple_env_loop_0539
  4346                                  .L_lambda_simple_env_end_0539:
  4347 00001F33 5B                      	pop rbx
  4348 00001F34 BE00000000              	mov rsi, 0
  4349                                  .L_lambda_simple_params_loop_0539:	; copy params
  4350 00001F39 4883FE00                	cmp rsi, 0
  4351 00001F3D 740E                    	je .L_lambda_simple_params_end_0539
  4352 00001F3F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4353 00001F44 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4354 00001F48 48FFC6                  	inc rsi
  4355 00001F4B EBEC                    	jmp .L_lambda_simple_params_loop_0539
  4356                                  .L_lambda_simple_params_end_0539:
  4357 00001F4D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4358 00001F50 4889C3                  	mov rbx, rax
  4359 00001F53 58                      	pop rax
  4360 00001F54 C60004                  	mov byte [rax], T_closure
  4361 00001F57 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4362 00001F5B 48C74009[681F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0539
  4363 00001F63 E99B000000              	jmp .L_lambda_simple_end_0539
  4364                                  .L_lambda_simple_code_0539:	; lambda-simple body
  4365 00001F68 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4366 00001F6E 740B                    	je .L_lambda_simple_arity_check_ok_0539
  4367 00001F70 FF742410                	push qword [rsp + 8 * 2]
  4368 00001F74 6A01                    	push 1
  4369 00001F76 E966370100              	jmp L_error_incorrect_arity_simple
  4370                                  .L_lambda_simple_arity_check_ok_0539:
  4371 00001F7B C8000000                	enter 0, 0
  4372                                  	; preparing a tail-call
  4373 00001F7F 488B4520                	mov rax, PARAM(0)	; param x
  4374 00001F83 50                      	push rax
  4375 00001F84 6A01                    	push 1	; arg count
  4376 00001F86 488B0425[B6120000]      	mov rax, qword [free_var_74]	; free var caar
  4377 00001F8E 803805                  	cmp byte [rax], T_undefined
  4378 00001F91 0F8464360100            	je L_error_fvar_undefined
  4379 00001F97 803804                  	cmp byte [rax], T_closure
  4380 00001F9A 0F85DF360100            	jne L_error_non_closure
  4381 00001FA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4382 00001FA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4383 00001FA6 50                      	push rax
  4384 00001FA7 6A01                    	push 1	; arg count
  4385 00001FA9 488B0425[D8120000]      	mov rax, qword [free_var_76]	; free var cdar
  4386 00001FB1 803805                  	cmp byte [rax], T_undefined
  4387 00001FB4 0F8441360100            	je L_error_fvar_undefined
  4388 00001FBA 803804                  	cmp byte [rax], T_closure
  4389 00001FBD 0F85BC360100            	jne L_error_non_closure
  4390 00001FC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4391                                  
  4392                                  	; recycling the current frame
  4393 00001FC6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4394 00001FC9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4395 00001FCC B905000000              	mov rcx, 1 + 4
  4396 00001FD1 488B5D18                	mov rbx, COUNT
  4397 00001FD5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4398 00001FDA 488D55F8                	lea rdx, [rbp - 8 * 1]
  4399                                  .L_tc_recycle_frame_loop_06d6:
  4400 00001FDE 4883F900                	cmp rcx, 0
  4401 00001FE2 7413                    	je .L_tc_recycle_frame_done_06d6
  4402 00001FE4 488B32                  	mov rsi, qword [rdx]
  4403 00001FE7 488933                  	mov qword [rbx], rsi
  4404 00001FEA 48FFC9                  	dec rcx
  4405 00001FED 4883EB08                	sub rbx, 8 * 1
  4406 00001FF1 4883EA08                	sub rdx, 8 * 1
  4407 00001FF5 EBE7                    	jmp .L_tc_recycle_frame_loop_06d6
  4408                                  .L_tc_recycle_frame_done_06d6:
  4409 00001FF7 488D6308                	lea rsp, [rbx + 8 * 1]
  4410 00001FFB 5D                      	pop rbp	; the proc will restore it!
  4411 00001FFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4412 00001FFF C9                      	leave
  4413 00002000 C21800                  	ret AND_KILL_FRAME(1)
  4414                                  .L_lambda_simple_end_0539:	; new closure is in rax
  4415 00002003 48890425[0A140000]      	mov qword [free_var_94], rax
  4416 0000200B 48B8-                   	mov rax, sob_void
  4416 0000200D [0000000000000000] 
  4417                                  
  4418 00002015 4889C7                  	mov rdi, rax
  4419 00002018 E81D380100              	call print_sexpr_if_not_void
  4420                                  
  4421 0000201D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4422 00002022 E801370100              	call malloc
  4423 00002027 50                      	push rax
  4424 00002028 BF00000000              	mov rdi, 8 * 0	; new rib
  4425 0000202D E8F6360100              	call malloc
  4426 00002032 50                      	push rax
  4427 00002033 BF08000000              	mov rdi, 8 * 1	; extended env
  4428 00002038 E8EB360100              	call malloc
  4429 0000203D 488B7D10                	mov rdi, ENV
  4430 00002041 BE00000000              	mov rsi, 0
  4431 00002046 BA01000000              	mov rdx, 1
  4432                                  .L_lambda_simple_env_loop_053a:	; ext_env[i + 1] <-- env[i]
  4433 0000204B 4883FE00                	cmp rsi, 0
  4434 0000204F 7410                    	je .L_lambda_simple_env_end_053a
  4435 00002051 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4436 00002055 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4437 00002059 48FFC6                  	inc rsi
  4438 0000205C 48FFC2                  	inc rdx
  4439 0000205F EBEA                    	jmp .L_lambda_simple_env_loop_053a
  4440                                  .L_lambda_simple_env_end_053a:
  4441 00002061 5B                      	pop rbx
  4442 00002062 BE00000000              	mov rsi, 0
  4443                                  .L_lambda_simple_params_loop_053a:	; copy params
  4444 00002067 4883FE00                	cmp rsi, 0
  4445 0000206B 740E                    	je .L_lambda_simple_params_end_053a
  4446 0000206D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4447 00002072 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4448 00002076 48FFC6                  	inc rsi
  4449 00002079 EBEC                    	jmp .L_lambda_simple_params_loop_053a
  4450                                  .L_lambda_simple_params_end_053a:
  4451 0000207B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4452 0000207E 4889C3                  	mov rbx, rax
  4453 00002081 58                      	pop rax
  4454 00002082 C60004                  	mov byte [rax], T_closure
  4455 00002085 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4456 00002089 48C74009[96200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_053a
  4457 00002091 E99B000000              	jmp .L_lambda_simple_end_053a
  4458                                  .L_lambda_simple_code_053a:	; lambda-simple body
  4459 00002096 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4460 0000209C 740B                    	je .L_lambda_simple_arity_check_ok_053a
  4461 0000209E FF742410                	push qword [rsp + 8 * 2]
  4462 000020A2 6A01                    	push 1
  4463 000020A4 E938360100              	jmp L_error_incorrect_arity_simple
  4464                                  .L_lambda_simple_arity_check_ok_053a:
  4465 000020A9 C8000000                	enter 0, 0
  4466                                  	; preparing a tail-call
  4467 000020AD 488B4520                	mov rax, PARAM(0)	; param x
  4468 000020B1 50                      	push rax
  4469 000020B2 6A01                    	push 1	; arg count
  4470 000020B4 488B0425[C7120000]      	mov rax, qword [free_var_75]	; free var cadr
  4471 000020BC 803805                  	cmp byte [rax], T_undefined
  4472 000020BF 0F8436350100            	je L_error_fvar_undefined
  4473 000020C5 803804                  	cmp byte [rax], T_closure
  4474 000020C8 0F85B1350100            	jne L_error_non_closure
  4475 000020CE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4476 000020D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4477 000020D4 50                      	push rax
  4478 000020D5 6A01                    	push 1	; arg count
  4479 000020D7 488B0425[D8120000]      	mov rax, qword [free_var_76]	; free var cdar
  4480 000020DF 803805                  	cmp byte [rax], T_undefined
  4481 000020E2 0F8413350100            	je L_error_fvar_undefined
  4482 000020E8 803804                  	cmp byte [rax], T_closure
  4483 000020EB 0F858E350100            	jne L_error_non_closure
  4484 000020F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4485                                  
  4486                                  	; recycling the current frame
  4487 000020F4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4488 000020F7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4489 000020FA B905000000              	mov rcx, 1 + 4
  4490 000020FF 488B5D18                	mov rbx, COUNT
  4491 00002103 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4492 00002108 488D55F8                	lea rdx, [rbp - 8 * 1]
  4493                                  .L_tc_recycle_frame_loop_06d7:
  4494 0000210C 4883F900                	cmp rcx, 0
  4495 00002110 7413                    	je .L_tc_recycle_frame_done_06d7
  4496 00002112 488B32                  	mov rsi, qword [rdx]
  4497 00002115 488933                  	mov qword [rbx], rsi
  4498 00002118 48FFC9                  	dec rcx
  4499 0000211B 4883EB08                	sub rbx, 8 * 1
  4500 0000211F 4883EA08                	sub rdx, 8 * 1
  4501 00002123 EBE7                    	jmp .L_tc_recycle_frame_loop_06d7
  4502                                  .L_tc_recycle_frame_done_06d7:
  4503 00002125 488D6308                	lea rsp, [rbx + 8 * 1]
  4504 00002129 5D                      	pop rbp	; the proc will restore it!
  4505 0000212A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4506 0000212D C9                      	leave
  4507 0000212E C21800                  	ret AND_KILL_FRAME(1)
  4508                                  .L_lambda_simple_end_053a:	; new closure is in rax
  4509 00002131 48890425[1B140000]      	mov qword [free_var_95], rax
  4510 00002139 48B8-                   	mov rax, sob_void
  4510 0000213B [0000000000000000] 
  4511                                  
  4512 00002143 4889C7                  	mov rdi, rax
  4513 00002146 E8EF360100              	call print_sexpr_if_not_void
  4514                                  
  4515 0000214B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4516 00002150 E8D3350100              	call malloc
  4517 00002155 50                      	push rax
  4518 00002156 BF00000000              	mov rdi, 8 * 0	; new rib
  4519 0000215B E8C8350100              	call malloc
  4520 00002160 50                      	push rax
  4521 00002161 BF08000000              	mov rdi, 8 * 1	; extended env
  4522 00002166 E8BD350100              	call malloc
  4523 0000216B 488B7D10                	mov rdi, ENV
  4524 0000216F BE00000000              	mov rsi, 0
  4525 00002174 BA01000000              	mov rdx, 1
  4526                                  .L_lambda_simple_env_loop_053b:	; ext_env[i + 1] <-- env[i]
  4527 00002179 4883FE00                	cmp rsi, 0
  4528 0000217D 7410                    	je .L_lambda_simple_env_end_053b
  4529 0000217F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4530 00002183 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4531 00002187 48FFC6                  	inc rsi
  4532 0000218A 48FFC2                  	inc rdx
  4533 0000218D EBEA                    	jmp .L_lambda_simple_env_loop_053b
  4534                                  .L_lambda_simple_env_end_053b:
  4535 0000218F 5B                      	pop rbx
  4536 00002190 BE00000000              	mov rsi, 0
  4537                                  .L_lambda_simple_params_loop_053b:	; copy params
  4538 00002195 4883FE00                	cmp rsi, 0
  4539 00002199 740E                    	je .L_lambda_simple_params_end_053b
  4540 0000219B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4541 000021A0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4542 000021A4 48FFC6                  	inc rsi
  4543 000021A7 EBEC                    	jmp .L_lambda_simple_params_loop_053b
  4544                                  .L_lambda_simple_params_end_053b:
  4545 000021A9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4546 000021AC 4889C3                  	mov rbx, rax
  4547 000021AF 58                      	pop rax
  4548 000021B0 C60004                  	mov byte [rax], T_closure
  4549 000021B3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4550 000021B7 48C74009[C4210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_053b
  4551 000021BF E99B000000              	jmp .L_lambda_simple_end_053b
  4552                                  .L_lambda_simple_code_053b:	; lambda-simple body
  4553 000021C4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4554 000021CA 740B                    	je .L_lambda_simple_arity_check_ok_053b
  4555 000021CC FF742410                	push qword [rsp + 8 * 2]
  4556 000021D0 6A01                    	push 1
  4557 000021D2 E90A350100              	jmp L_error_incorrect_arity_simple
  4558                                  .L_lambda_simple_arity_check_ok_053b:
  4559 000021D7 C8000000                	enter 0, 0
  4560                                  	; preparing a tail-call
  4561 000021DB 488B4520                	mov rax, PARAM(0)	; param x
  4562 000021DF 50                      	push rax
  4563 000021E0 6A01                    	push 1	; arg count
  4564 000021E2 488B0425[D8120000]      	mov rax, qword [free_var_76]	; free var cdar
  4565 000021EA 803805                  	cmp byte [rax], T_undefined
  4566 000021ED 0F8408340100            	je L_error_fvar_undefined
  4567 000021F3 803804                  	cmp byte [rax], T_closure
  4568 000021F6 0F8583340100            	jne L_error_non_closure
  4569 000021FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  4570 000021FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  4571 00002202 50                      	push rax
  4572 00002203 6A01                    	push 1	; arg count
  4573 00002205 488B0425[D8120000]      	mov rax, qword [free_var_76]	; free var cdar
  4574 0000220D 803805                  	cmp byte [rax], T_undefined
  4575 00002210 0F84E5330100            	je L_error_fvar_undefined
  4576 00002216 803804                  	cmp byte [rax], T_closure
  4577 00002219 0F8560340100            	jne L_error_non_closure
  4578 0000221F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4579                                  
  4580                                  	; recycling the current frame
  4581 00002222 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4582 00002225 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4583 00002228 B905000000              	mov rcx, 1 + 4
  4584 0000222D 488B5D18                	mov rbx, COUNT
  4585 00002231 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4586 00002236 488D55F8                	lea rdx, [rbp - 8 * 1]
  4587                                  .L_tc_recycle_frame_loop_06d8:
  4588 0000223A 4883F900                	cmp rcx, 0
  4589 0000223E 7413                    	je .L_tc_recycle_frame_done_06d8
  4590 00002240 488B32                  	mov rsi, qword [rdx]
  4591 00002243 488933                  	mov qword [rbx], rsi
  4592 00002246 48FFC9                  	dec rcx
  4593 00002249 4883EB08                	sub rbx, 8 * 1
  4594 0000224D 4883EA08                	sub rdx, 8 * 1
  4595 00002251 EBE7                    	jmp .L_tc_recycle_frame_loop_06d8
  4596                                  .L_tc_recycle_frame_done_06d8:
  4597 00002253 488D6308                	lea rsp, [rbx + 8 * 1]
  4598 00002257 5D                      	pop rbp	; the proc will restore it!
  4599 00002258 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4600 0000225B C9                      	leave
  4601 0000225C C21800                  	ret AND_KILL_FRAME(1)
  4602                                  .L_lambda_simple_end_053b:	; new closure is in rax
  4603 0000225F 48890425[2C140000]      	mov qword [free_var_96], rax
  4604 00002267 48B8-                   	mov rax, sob_void
  4604 00002269 [0000000000000000] 
  4605                                  
  4606 00002271 4889C7                  	mov rdi, rax
  4607 00002274 E8C1350100              	call print_sexpr_if_not_void
  4608                                  
  4609 00002279 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4610 0000227E E8A5340100              	call malloc
  4611 00002283 50                      	push rax
  4612 00002284 BF00000000              	mov rdi, 8 * 0	; new rib
  4613 00002289 E89A340100              	call malloc
  4614 0000228E 50                      	push rax
  4615 0000228F BF08000000              	mov rdi, 8 * 1	; extended env
  4616 00002294 E88F340100              	call malloc
  4617 00002299 488B7D10                	mov rdi, ENV
  4618 0000229D BE00000000              	mov rsi, 0
  4619 000022A2 BA01000000              	mov rdx, 1
  4620                                  .L_lambda_simple_env_loop_053c:	; ext_env[i + 1] <-- env[i]
  4621 000022A7 4883FE00                	cmp rsi, 0
  4622 000022AB 7410                    	je .L_lambda_simple_env_end_053c
  4623 000022AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4624 000022B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4625 000022B5 48FFC6                  	inc rsi
  4626 000022B8 48FFC2                  	inc rdx
  4627 000022BB EBEA                    	jmp .L_lambda_simple_env_loop_053c
  4628                                  .L_lambda_simple_env_end_053c:
  4629 000022BD 5B                      	pop rbx
  4630 000022BE BE00000000              	mov rsi, 0
  4631                                  .L_lambda_simple_params_loop_053c:	; copy params
  4632 000022C3 4883FE00                	cmp rsi, 0
  4633 000022C7 740E                    	je .L_lambda_simple_params_end_053c
  4634 000022C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4635 000022CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4636 000022D2 48FFC6                  	inc rsi
  4637 000022D5 EBEC                    	jmp .L_lambda_simple_params_loop_053c
  4638                                  .L_lambda_simple_params_end_053c:
  4639 000022D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4640 000022DA 4889C3                  	mov rbx, rax
  4641 000022DD 58                      	pop rax
  4642 000022DE C60004                  	mov byte [rax], T_closure
  4643 000022E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4644 000022E5 48C74009[F2220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_053c
  4645 000022ED E99B000000              	jmp .L_lambda_simple_end_053c
  4646                                  .L_lambda_simple_code_053c:	; lambda-simple body
  4647 000022F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4648 000022F8 740B                    	je .L_lambda_simple_arity_check_ok_053c
  4649 000022FA FF742410                	push qword [rsp + 8 * 2]
  4650 000022FE 6A01                    	push 1
  4651 00002300 E9DC330100              	jmp L_error_incorrect_arity_simple
  4652                                  .L_lambda_simple_arity_check_ok_053c:
  4653 00002305 C8000000                	enter 0, 0
  4654                                  	; preparing a tail-call
  4655 00002309 488B4520                	mov rax, PARAM(0)	; param x
  4656 0000230D 50                      	push rax
  4657 0000230E 6A01                    	push 1	; arg count
  4658 00002310 488B0425[E9120000]      	mov rax, qword [free_var_77]	; free var cddr
  4659 00002318 803805                  	cmp byte [rax], T_undefined
  4660 0000231B 0F84DA320100            	je L_error_fvar_undefined
  4661 00002321 803804                  	cmp byte [rax], T_closure
  4662 00002324 0F8555330100            	jne L_error_non_closure
  4663 0000232A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4664 0000232D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4665 00002330 50                      	push rax
  4666 00002331 6A01                    	push 1	; arg count
  4667 00002333 488B0425[D8120000]      	mov rax, qword [free_var_76]	; free var cdar
  4668 0000233B 803805                  	cmp byte [rax], T_undefined
  4669 0000233E 0F84B7320100            	je L_error_fvar_undefined
  4670 00002344 803804                  	cmp byte [rax], T_closure
  4671 00002347 0F8532330100            	jne L_error_non_closure
  4672 0000234D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4673                                  
  4674                                  	; recycling the current frame
  4675 00002350 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4676 00002353 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4677 00002356 B905000000              	mov rcx, 1 + 4
  4678 0000235B 488B5D18                	mov rbx, COUNT
  4679 0000235F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4680 00002364 488D55F8                	lea rdx, [rbp - 8 * 1]
  4681                                  .L_tc_recycle_frame_loop_06d9:
  4682 00002368 4883F900                	cmp rcx, 0
  4683 0000236C 7413                    	je .L_tc_recycle_frame_done_06d9
  4684 0000236E 488B32                  	mov rsi, qword [rdx]
  4685 00002371 488933                  	mov qword [rbx], rsi
  4686 00002374 48FFC9                  	dec rcx
  4687 00002377 4883EB08                	sub rbx, 8 * 1
  4688 0000237B 4883EA08                	sub rdx, 8 * 1
  4689 0000237F EBE7                    	jmp .L_tc_recycle_frame_loop_06d9
  4690                                  .L_tc_recycle_frame_done_06d9:
  4691 00002381 488D6308                	lea rsp, [rbx + 8 * 1]
  4692 00002385 5D                      	pop rbp	; the proc will restore it!
  4693 00002386 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4694 00002389 C9                      	leave
  4695 0000238A C21800                  	ret AND_KILL_FRAME(1)
  4696                                  .L_lambda_simple_end_053c:	; new closure is in rax
  4697 0000238D 48890425[3D140000]      	mov qword [free_var_97], rax
  4698 00002395 48B8-                   	mov rax, sob_void
  4698 00002397 [0000000000000000] 
  4699                                  
  4700 0000239F 4889C7                  	mov rdi, rax
  4701 000023A2 E893340100              	call print_sexpr_if_not_void
  4702                                  
  4703 000023A7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4704 000023AC E877330100              	call malloc
  4705 000023B1 50                      	push rax
  4706 000023B2 BF00000000              	mov rdi, 8 * 0	; new rib
  4707 000023B7 E86C330100              	call malloc
  4708 000023BC 50                      	push rax
  4709 000023BD BF08000000              	mov rdi, 8 * 1	; extended env
  4710 000023C2 E861330100              	call malloc
  4711 000023C7 488B7D10                	mov rdi, ENV
  4712 000023CB BE00000000              	mov rsi, 0
  4713 000023D0 BA01000000              	mov rdx, 1
  4714                                  .L_lambda_simple_env_loop_053d:	; ext_env[i + 1] <-- env[i]
  4715 000023D5 4883FE00                	cmp rsi, 0
  4716 000023D9 7410                    	je .L_lambda_simple_env_end_053d
  4717 000023DB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4718 000023DF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4719 000023E3 48FFC6                  	inc rsi
  4720 000023E6 48FFC2                  	inc rdx
  4721 000023E9 EBEA                    	jmp .L_lambda_simple_env_loop_053d
  4722                                  .L_lambda_simple_env_end_053d:
  4723 000023EB 5B                      	pop rbx
  4724 000023EC BE00000000              	mov rsi, 0
  4725                                  .L_lambda_simple_params_loop_053d:	; copy params
  4726 000023F1 4883FE00                	cmp rsi, 0
  4727 000023F5 740E                    	je .L_lambda_simple_params_end_053d
  4728 000023F7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4729 000023FC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4730 00002400 48FFC6                  	inc rsi
  4731 00002403 EBEC                    	jmp .L_lambda_simple_params_loop_053d
  4732                                  .L_lambda_simple_params_end_053d:
  4733 00002405 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4734 00002408 4889C3                  	mov rbx, rax
  4735 0000240B 58                      	pop rax
  4736 0000240C C60004                  	mov byte [rax], T_closure
  4737 0000240F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4738 00002413 48C74009[20240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_053d
  4739 0000241B E99B000000              	jmp .L_lambda_simple_end_053d
  4740                                  .L_lambda_simple_code_053d:	; lambda-simple body
  4741 00002420 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4742 00002426 740B                    	je .L_lambda_simple_arity_check_ok_053d
  4743 00002428 FF742410                	push qword [rsp + 8 * 2]
  4744 0000242C 6A01                    	push 1
  4745 0000242E E9AE320100              	jmp L_error_incorrect_arity_simple
  4746                                  .L_lambda_simple_arity_check_ok_053d:
  4747 00002433 C8000000                	enter 0, 0
  4748                                  	; preparing a tail-call
  4749 00002437 488B4520                	mov rax, PARAM(0)	; param x
  4750 0000243B 50                      	push rax
  4751 0000243C 6A01                    	push 1	; arg count
  4752 0000243E 488B0425[B6120000]      	mov rax, qword [free_var_74]	; free var caar
  4753 00002446 803805                  	cmp byte [rax], T_undefined
  4754 00002449 0F84AC310100            	je L_error_fvar_undefined
  4755 0000244F 803804                  	cmp byte [rax], T_closure
  4756 00002452 0F8527320100            	jne L_error_non_closure
  4757 00002458 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4758 0000245B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4759 0000245E 50                      	push rax
  4760 0000245F 6A01                    	push 1	; arg count
  4761 00002461 488B0425[E9120000]      	mov rax, qword [free_var_77]	; free var cddr
  4762 00002469 803805                  	cmp byte [rax], T_undefined
  4763 0000246C 0F8489310100            	je L_error_fvar_undefined
  4764 00002472 803804                  	cmp byte [rax], T_closure
  4765 00002475 0F8504320100            	jne L_error_non_closure
  4766 0000247B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4767                                  
  4768                                  	; recycling the current frame
  4769 0000247E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4770 00002481 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4771 00002484 B905000000              	mov rcx, 1 + 4
  4772 00002489 488B5D18                	mov rbx, COUNT
  4773 0000248D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4774 00002492 488D55F8                	lea rdx, [rbp - 8 * 1]
  4775                                  .L_tc_recycle_frame_loop_06da:
  4776 00002496 4883F900                	cmp rcx, 0
  4777 0000249A 7413                    	je .L_tc_recycle_frame_done_06da
  4778 0000249C 488B32                  	mov rsi, qword [rdx]
  4779 0000249F 488933                  	mov qword [rbx], rsi
  4780 000024A2 48FFC9                  	dec rcx
  4781 000024A5 4883EB08                	sub rbx, 8 * 1
  4782 000024A9 4883EA08                	sub rdx, 8 * 1
  4783 000024AD EBE7                    	jmp .L_tc_recycle_frame_loop_06da
  4784                                  .L_tc_recycle_frame_done_06da:
  4785 000024AF 488D6308                	lea rsp, [rbx + 8 * 1]
  4786 000024B3 5D                      	pop rbp	; the proc will restore it!
  4787 000024B4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4788 000024B7 C9                      	leave
  4789 000024B8 C21800                  	ret AND_KILL_FRAME(1)
  4790                                  .L_lambda_simple_end_053d:	; new closure is in rax
  4791 000024BB 48890425[4E140000]      	mov qword [free_var_98], rax
  4792 000024C3 48B8-                   	mov rax, sob_void
  4792 000024C5 [0000000000000000] 
  4793                                  
  4794 000024CD 4889C7                  	mov rdi, rax
  4795 000024D0 E865330100              	call print_sexpr_if_not_void
  4796                                  
  4797 000024D5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4798 000024DA E849320100              	call malloc
  4799 000024DF 50                      	push rax
  4800 000024E0 BF00000000              	mov rdi, 8 * 0	; new rib
  4801 000024E5 E83E320100              	call malloc
  4802 000024EA 50                      	push rax
  4803 000024EB BF08000000              	mov rdi, 8 * 1	; extended env
  4804 000024F0 E833320100              	call malloc
  4805 000024F5 488B7D10                	mov rdi, ENV
  4806 000024F9 BE00000000              	mov rsi, 0
  4807 000024FE BA01000000              	mov rdx, 1
  4808                                  .L_lambda_simple_env_loop_053e:	; ext_env[i + 1] <-- env[i]
  4809 00002503 4883FE00                	cmp rsi, 0
  4810 00002507 7410                    	je .L_lambda_simple_env_end_053e
  4811 00002509 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4812 0000250D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4813 00002511 48FFC6                  	inc rsi
  4814 00002514 48FFC2                  	inc rdx
  4815 00002517 EBEA                    	jmp .L_lambda_simple_env_loop_053e
  4816                                  .L_lambda_simple_env_end_053e:
  4817 00002519 5B                      	pop rbx
  4818 0000251A BE00000000              	mov rsi, 0
  4819                                  .L_lambda_simple_params_loop_053e:	; copy params
  4820 0000251F 4883FE00                	cmp rsi, 0
  4821 00002523 740E                    	je .L_lambda_simple_params_end_053e
  4822 00002525 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4823 0000252A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4824 0000252E 48FFC6                  	inc rsi
  4825 00002531 EBEC                    	jmp .L_lambda_simple_params_loop_053e
  4826                                  .L_lambda_simple_params_end_053e:
  4827 00002533 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4828 00002536 4889C3                  	mov rbx, rax
  4829 00002539 58                      	pop rax
  4830 0000253A C60004                  	mov byte [rax], T_closure
  4831 0000253D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4832 00002541 48C74009[4E250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_053e
  4833 00002549 E99B000000              	jmp .L_lambda_simple_end_053e
  4834                                  .L_lambda_simple_code_053e:	; lambda-simple body
  4835 0000254E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4836 00002554 740B                    	je .L_lambda_simple_arity_check_ok_053e
  4837 00002556 FF742410                	push qword [rsp + 8 * 2]
  4838 0000255A 6A01                    	push 1
  4839 0000255C E980310100              	jmp L_error_incorrect_arity_simple
  4840                                  .L_lambda_simple_arity_check_ok_053e:
  4841 00002561 C8000000                	enter 0, 0
  4842                                  	; preparing a tail-call
  4843 00002565 488B4520                	mov rax, PARAM(0)	; param x
  4844 00002569 50                      	push rax
  4845 0000256A 6A01                    	push 1	; arg count
  4846 0000256C 488B0425[C7120000]      	mov rax, qword [free_var_75]	; free var cadr
  4847 00002574 803805                  	cmp byte [rax], T_undefined
  4848 00002577 0F847E300100            	je L_error_fvar_undefined
  4849 0000257D 803804                  	cmp byte [rax], T_closure
  4850 00002580 0F85F9300100            	jne L_error_non_closure
  4851 00002586 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4852 00002589 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4853 0000258C 50                      	push rax
  4854 0000258D 6A01                    	push 1	; arg count
  4855 0000258F 488B0425[E9120000]      	mov rax, qword [free_var_77]	; free var cddr
  4856 00002597 803805                  	cmp byte [rax], T_undefined
  4857 0000259A 0F845B300100            	je L_error_fvar_undefined
  4858 000025A0 803804                  	cmp byte [rax], T_closure
  4859 000025A3 0F85D6300100            	jne L_error_non_closure
  4860 000025A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4861                                  
  4862                                  	; recycling the current frame
  4863 000025AC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4864 000025AF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4865 000025B2 B905000000              	mov rcx, 1 + 4
  4866 000025B7 488B5D18                	mov rbx, COUNT
  4867 000025BB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4868 000025C0 488D55F8                	lea rdx, [rbp - 8 * 1]
  4869                                  .L_tc_recycle_frame_loop_06db:
  4870 000025C4 4883F900                	cmp rcx, 0
  4871 000025C8 7413                    	je .L_tc_recycle_frame_done_06db
  4872 000025CA 488B32                  	mov rsi, qword [rdx]
  4873 000025CD 488933                  	mov qword [rbx], rsi
  4874 000025D0 48FFC9                  	dec rcx
  4875 000025D3 4883EB08                	sub rbx, 8 * 1
  4876 000025D7 4883EA08                	sub rdx, 8 * 1
  4877 000025DB EBE7                    	jmp .L_tc_recycle_frame_loop_06db
  4878                                  .L_tc_recycle_frame_done_06db:
  4879 000025DD 488D6308                	lea rsp, [rbx + 8 * 1]
  4880 000025E1 5D                      	pop rbp	; the proc will restore it!
  4881 000025E2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4882 000025E5 C9                      	leave
  4883 000025E6 C21800                  	ret AND_KILL_FRAME(1)
  4884                                  .L_lambda_simple_end_053e:	; new closure is in rax
  4885 000025E9 48890425[5F140000]      	mov qword [free_var_99], rax
  4886 000025F1 48B8-                   	mov rax, sob_void
  4886 000025F3 [0000000000000000] 
  4887                                  
  4888 000025FB 4889C7                  	mov rdi, rax
  4889 000025FE E837320100              	call print_sexpr_if_not_void
  4890                                  
  4891 00002603 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4892 00002608 E81B310100              	call malloc
  4893 0000260D 50                      	push rax
  4894 0000260E BF00000000              	mov rdi, 8 * 0	; new rib
  4895 00002613 E810310100              	call malloc
  4896 00002618 50                      	push rax
  4897 00002619 BF08000000              	mov rdi, 8 * 1	; extended env
  4898 0000261E E805310100              	call malloc
  4899 00002623 488B7D10                	mov rdi, ENV
  4900 00002627 BE00000000              	mov rsi, 0
  4901 0000262C BA01000000              	mov rdx, 1
  4902                                  .L_lambda_simple_env_loop_053f:	; ext_env[i + 1] <-- env[i]
  4903 00002631 4883FE00                	cmp rsi, 0
  4904 00002635 7410                    	je .L_lambda_simple_env_end_053f
  4905 00002637 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4906 0000263B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4907 0000263F 48FFC6                  	inc rsi
  4908 00002642 48FFC2                  	inc rdx
  4909 00002645 EBEA                    	jmp .L_lambda_simple_env_loop_053f
  4910                                  .L_lambda_simple_env_end_053f:
  4911 00002647 5B                      	pop rbx
  4912 00002648 BE00000000              	mov rsi, 0
  4913                                  .L_lambda_simple_params_loop_053f:	; copy params
  4914 0000264D 4883FE00                	cmp rsi, 0
  4915 00002651 740E                    	je .L_lambda_simple_params_end_053f
  4916 00002653 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4917 00002658 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4918 0000265C 48FFC6                  	inc rsi
  4919 0000265F EBEC                    	jmp .L_lambda_simple_params_loop_053f
  4920                                  .L_lambda_simple_params_end_053f:
  4921 00002661 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4922 00002664 4889C3                  	mov rbx, rax
  4923 00002667 58                      	pop rax
  4924 00002668 C60004                  	mov byte [rax], T_closure
  4925 0000266B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4926 0000266F 48C74009[7C260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_053f
  4927 00002677 E99B000000              	jmp .L_lambda_simple_end_053f
  4928                                  .L_lambda_simple_code_053f:	; lambda-simple body
  4929 0000267C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4930 00002682 740B                    	je .L_lambda_simple_arity_check_ok_053f
  4931 00002684 FF742410                	push qword [rsp + 8 * 2]
  4932 00002688 6A01                    	push 1
  4933 0000268A E952300100              	jmp L_error_incorrect_arity_simple
  4934                                  .L_lambda_simple_arity_check_ok_053f:
  4935 0000268F C8000000                	enter 0, 0
  4936                                  	; preparing a tail-call
  4937 00002693 488B4520                	mov rax, PARAM(0)	; param x
  4938 00002697 50                      	push rax
  4939 00002698 6A01                    	push 1	; arg count
  4940 0000269A 488B0425[D8120000]      	mov rax, qword [free_var_76]	; free var cdar
  4941 000026A2 803805                  	cmp byte [rax], T_undefined
  4942 000026A5 0F84502F0100            	je L_error_fvar_undefined
  4943 000026AB 803804                  	cmp byte [rax], T_closure
  4944 000026AE 0F85CB2F0100            	jne L_error_non_closure
  4945 000026B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4946 000026B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4947 000026BA 50                      	push rax
  4948 000026BB 6A01                    	push 1	; arg count
  4949 000026BD 488B0425[E9120000]      	mov rax, qword [free_var_77]	; free var cddr
  4950 000026C5 803805                  	cmp byte [rax], T_undefined
  4951 000026C8 0F842D2F0100            	je L_error_fvar_undefined
  4952 000026CE 803804                  	cmp byte [rax], T_closure
  4953 000026D1 0F85A82F0100            	jne L_error_non_closure
  4954 000026D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4955                                  
  4956                                  	; recycling the current frame
  4957 000026DA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  4958 000026DD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  4959 000026E0 B905000000              	mov rcx, 1 + 4
  4960 000026E5 488B5D18                	mov rbx, COUNT
  4961 000026E9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  4962 000026EE 488D55F8                	lea rdx, [rbp - 8 * 1]
  4963                                  .L_tc_recycle_frame_loop_06dc:
  4964 000026F2 4883F900                	cmp rcx, 0
  4965 000026F6 7413                    	je .L_tc_recycle_frame_done_06dc
  4966 000026F8 488B32                  	mov rsi, qword [rdx]
  4967 000026FB 488933                  	mov qword [rbx], rsi
  4968 000026FE 48FFC9                  	dec rcx
  4969 00002701 4883EB08                	sub rbx, 8 * 1
  4970 00002705 4883EA08                	sub rdx, 8 * 1
  4971 00002709 EBE7                    	jmp .L_tc_recycle_frame_loop_06dc
  4972                                  .L_tc_recycle_frame_done_06dc:
  4973 0000270B 488D6308                	lea rsp, [rbx + 8 * 1]
  4974 0000270F 5D                      	pop rbp	; the proc will restore it!
  4975 00002710 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4976 00002713 C9                      	leave
  4977 00002714 C21800                  	ret AND_KILL_FRAME(1)
  4978                                  .L_lambda_simple_end_053f:	; new closure is in rax
  4979 00002717 48890425[70140000]      	mov qword [free_var_100], rax
  4980 0000271F 48B8-                   	mov rax, sob_void
  4980 00002721 [0000000000000000] 
  4981                                  
  4982 00002729 4889C7                  	mov rdi, rax
  4983 0000272C E809310100              	call print_sexpr_if_not_void
  4984                                  
  4985 00002731 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4986 00002736 E8ED2F0100              	call malloc
  4987 0000273B 50                      	push rax
  4988 0000273C BF00000000              	mov rdi, 8 * 0	; new rib
  4989 00002741 E8E22F0100              	call malloc
  4990 00002746 50                      	push rax
  4991 00002747 BF08000000              	mov rdi, 8 * 1	; extended env
  4992 0000274C E8D72F0100              	call malloc
  4993 00002751 488B7D10                	mov rdi, ENV
  4994 00002755 BE00000000              	mov rsi, 0
  4995 0000275A BA01000000              	mov rdx, 1
  4996                                  .L_lambda_simple_env_loop_0540:	; ext_env[i + 1] <-- env[i]
  4997 0000275F 4883FE00                	cmp rsi, 0
  4998 00002763 7410                    	je .L_lambda_simple_env_end_0540
  4999 00002765 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5000 00002769 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5001 0000276D 48FFC6                  	inc rsi
  5002 00002770 48FFC2                  	inc rdx
  5003 00002773 EBEA                    	jmp .L_lambda_simple_env_loop_0540
  5004                                  .L_lambda_simple_env_end_0540:
  5005 00002775 5B                      	pop rbx
  5006 00002776 BE00000000              	mov rsi, 0
  5007                                  .L_lambda_simple_params_loop_0540:	; copy params
  5008 0000277B 4883FE00                	cmp rsi, 0
  5009 0000277F 740E                    	je .L_lambda_simple_params_end_0540
  5010 00002781 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5011 00002786 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5012 0000278A 48FFC6                  	inc rsi
  5013 0000278D EBEC                    	jmp .L_lambda_simple_params_loop_0540
  5014                                  .L_lambda_simple_params_end_0540:
  5015 0000278F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5016 00002792 4889C3                  	mov rbx, rax
  5017 00002795 58                      	pop rax
  5018 00002796 C60004                  	mov byte [rax], T_closure
  5019 00002799 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5020 0000279D 48C74009[AA270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0540
  5021 000027A5 E99B000000              	jmp .L_lambda_simple_end_0540
  5022                                  .L_lambda_simple_code_0540:	; lambda-simple body
  5023 000027AA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5024 000027B0 740B                    	je .L_lambda_simple_arity_check_ok_0540
  5025 000027B2 FF742410                	push qword [rsp + 8 * 2]
  5026 000027B6 6A01                    	push 1
  5027 000027B8 E9242F0100              	jmp L_error_incorrect_arity_simple
  5028                                  .L_lambda_simple_arity_check_ok_0540:
  5029 000027BD C8000000                	enter 0, 0
  5030                                  	; preparing a tail-call
  5031 000027C1 488B4520                	mov rax, PARAM(0)	; param x
  5032 000027C5 50                      	push rax
  5033 000027C6 6A01                    	push 1	; arg count
  5034 000027C8 488B0425[E9120000]      	mov rax, qword [free_var_77]	; free var cddr
  5035 000027D0 803805                  	cmp byte [rax], T_undefined
  5036 000027D3 0F84222E0100            	je L_error_fvar_undefined
  5037 000027D9 803804                  	cmp byte [rax], T_closure
  5038 000027DC 0F859D2E0100            	jne L_error_non_closure
  5039 000027E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5040 000027E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5041 000027E8 50                      	push rax
  5042 000027E9 6A01                    	push 1	; arg count
  5043 000027EB 488B0425[E9120000]      	mov rax, qword [free_var_77]	; free var cddr
  5044 000027F3 803805                  	cmp byte [rax], T_undefined
  5045 000027F6 0F84FF2D0100            	je L_error_fvar_undefined
  5046 000027FC 803804                  	cmp byte [rax], T_closure
  5047 000027FF 0F857A2E0100            	jne L_error_non_closure
  5048 00002805 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5049                                  
  5050                                  	; recycling the current frame
  5051 00002808 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5052 0000280B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5053 0000280E B905000000              	mov rcx, 1 + 4
  5054 00002813 488B5D18                	mov rbx, COUNT
  5055 00002817 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5056 0000281C 488D55F8                	lea rdx, [rbp - 8 * 1]
  5057                                  .L_tc_recycle_frame_loop_06dd:
  5058 00002820 4883F900                	cmp rcx, 0
  5059 00002824 7413                    	je .L_tc_recycle_frame_done_06dd
  5060 00002826 488B32                  	mov rsi, qword [rdx]
  5061 00002829 488933                  	mov qword [rbx], rsi
  5062 0000282C 48FFC9                  	dec rcx
  5063 0000282F 4883EB08                	sub rbx, 8 * 1
  5064 00002833 4883EA08                	sub rdx, 8 * 1
  5065 00002837 EBE7                    	jmp .L_tc_recycle_frame_loop_06dd
  5066                                  .L_tc_recycle_frame_done_06dd:
  5067 00002839 488D6308                	lea rsp, [rbx + 8 * 1]
  5068 0000283D 5D                      	pop rbp	; the proc will restore it!
  5069 0000283E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5070 00002841 C9                      	leave
  5071 00002842 C21800                  	ret AND_KILL_FRAME(1)
  5072                                  .L_lambda_simple_end_0540:	; new closure is in rax
  5073 00002845 48890425[81140000]      	mov qword [free_var_101], rax
  5074 0000284D 48B8-                   	mov rax, sob_void
  5074 0000284F [0000000000000000] 
  5075                                  
  5076 00002857 4889C7                  	mov rdi, rax
  5077 0000285A E8DB2F0100              	call print_sexpr_if_not_void
  5078                                  
  5079 0000285F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5080 00002864 E8BF2E0100              	call malloc
  5081 00002869 50                      	push rax
  5082 0000286A BF00000000              	mov rdi, 8 * 0	; new rib
  5083 0000286F E8B42E0100              	call malloc
  5084 00002874 50                      	push rax
  5085 00002875 BF08000000              	mov rdi, 8 * 1	; extended env
  5086 0000287A E8A92E0100              	call malloc
  5087 0000287F 488B7D10                	mov rdi, ENV
  5088 00002883 BE00000000              	mov rsi, 0
  5089 00002888 BA01000000              	mov rdx, 1
  5090                                  .L_lambda_simple_env_loop_0541:	; ext_env[i + 1] <-- env[i]
  5091 0000288D 4883FE00                	cmp rsi, 0
  5092 00002891 7410                    	je .L_lambda_simple_env_end_0541
  5093 00002893 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5094 00002897 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5095 0000289B 48FFC6                  	inc rsi
  5096 0000289E 48FFC2                  	inc rdx
  5097 000028A1 EBEA                    	jmp .L_lambda_simple_env_loop_0541
  5098                                  .L_lambda_simple_env_end_0541:
  5099 000028A3 5B                      	pop rbx
  5100 000028A4 BE00000000              	mov rsi, 0
  5101                                  .L_lambda_simple_params_loop_0541:	; copy params
  5102 000028A9 4883FE00                	cmp rsi, 0
  5103 000028AD 740E                    	je .L_lambda_simple_params_end_0541
  5104 000028AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5105 000028B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5106 000028B8 48FFC6                  	inc rsi
  5107 000028BB EBEC                    	jmp .L_lambda_simple_params_loop_0541
  5108                                  .L_lambda_simple_params_end_0541:
  5109 000028BD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5110 000028C0 4889C3                  	mov rbx, rax
  5111 000028C3 58                      	pop rax
  5112 000028C4 C60004                  	mov byte [rax], T_closure
  5113 000028C7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5114 000028CB 48C74009[D8280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0541
  5115 000028D3 E90D010000              	jmp .L_lambda_simple_end_0541
  5116                                  .L_lambda_simple_code_0541:	; lambda-simple body
  5117 000028D8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5118 000028DE 740B                    	je .L_lambda_simple_arity_check_ok_0541
  5119 000028E0 FF742410                	push qword [rsp + 8 * 2]
  5120 000028E4 6A01                    	push 1
  5121 000028E6 E9F62D0100              	jmp L_error_incorrect_arity_simple
  5122                                  .L_lambda_simple_arity_check_ok_0541:
  5123 000028EB C8000000                	enter 0, 0
  5124 000028EF 488B4520                	mov rax, PARAM(0)	; param e
  5125 000028F3 50                      	push rax
  5126 000028F4 6A01                    	push 1	; arg count
  5127 000028F6 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
  5128 000028FE 803805                  	cmp byte [rax], T_undefined
  5129 00002901 0F84F42C0100            	je L_error_fvar_undefined
  5130 00002907 803804                  	cmp byte [rax], T_closure
  5131 0000290A 0F856F2D0100            	jne L_error_non_closure
  5132 00002910 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5133 00002913 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5134 00002916 483D[02000000]          	cmp rax, sob_boolean_false
  5135 0000291C 0F85BF000000            	jne .L_or_end_005c
  5136 00002922 488B4520                	mov rax, PARAM(0)	; param e
  5137 00002926 50                      	push rax
  5138 00002927 6A01                    	push 1	; arg count
  5139 00002929 488B0425[DD0D0000]      	mov rax, qword [free_var_1]	; free var pair?
  5140 00002931 803805                  	cmp byte [rax], T_undefined
  5141 00002934 0F84C12C0100            	je L_error_fvar_undefined
  5142 0000293A 803804                  	cmp byte [rax], T_closure
  5143 0000293D 0F853C2D0100            	jne L_error_non_closure
  5144 00002943 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5145 00002946 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5146                                  
  5147 00002949 483D[02000000]          	cmp rax, sob_boolean_false
  5148 0000294F 0F8482000000            	je .L_if_else_03ce
  5149                                  	; preparing a tail-call
  5150 00002955 488B4520                	mov rax, PARAM(0)	; param e
  5151 00002959 50                      	push rax
  5152 0000295A 6A01                    	push 1	; arg count
  5153 0000295C 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  5154 00002964 803805                  	cmp byte [rax], T_undefined
  5155 00002967 0F848E2C0100            	je L_error_fvar_undefined
  5156 0000296D 803804                  	cmp byte [rax], T_closure
  5157 00002970 0F85092D0100            	jne L_error_non_closure
  5158 00002976 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5159 00002979 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5160 0000297C 50                      	push rax
  5161 0000297D 6A01                    	push 1	; arg count
  5162 0000297F 488B0425[92140000]      	mov rax, qword [free_var_102]	; free var list?
  5163 00002987 803805                  	cmp byte [rax], T_undefined
  5164 0000298A 0F846B2C0100            	je L_error_fvar_undefined
  5165 00002990 803804                  	cmp byte [rax], T_closure
  5166 00002993 0F85E62C0100            	jne L_error_non_closure
  5167 00002999 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5168                                  
  5169                                  	; recycling the current frame
  5170 0000299C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5171 0000299F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5172 000029A2 B905000000              	mov rcx, 1 + 4
  5173 000029A7 488B5D18                	mov rbx, COUNT
  5174 000029AB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5175 000029B0 488D55F8                	lea rdx, [rbp - 8 * 1]
  5176                                  .L_tc_recycle_frame_loop_06de:
  5177 000029B4 4883F900                	cmp rcx, 0
  5178 000029B8 7413                    	je .L_tc_recycle_frame_done_06de
  5179 000029BA 488B32                  	mov rsi, qword [rdx]
  5180 000029BD 488933                  	mov qword [rbx], rsi
  5181 000029C0 48FFC9                  	dec rcx
  5182 000029C3 4883EB08                	sub rbx, 8 * 1
  5183 000029C7 4883EA08                	sub rdx, 8 * 1
  5184 000029CB EBE7                    	jmp .L_tc_recycle_frame_loop_06de
  5185                                  .L_tc_recycle_frame_done_06de:
  5186 000029CD 488D6308                	lea rsp, [rbx + 8 * 1]
  5187 000029D1 5D                      	pop rbp	; the proc will restore it!
  5188 000029D2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5189                                  
  5190 000029D5 EB0A                    	jmp .L_if_end_03ce
  5191                                  
  5192                                  	.L_if_else_03ce:
  5193 000029D7 48B8-                   	mov rax, L_constants + 2
  5193 000029D9 [0200000000000000] 
  5194                                  
  5195                                  	.L_if_end_03ce:
  5196                                  .L_or_end_005c:
  5197 000029E1 C9                      	leave
  5198 000029E2 C21800                  	ret AND_KILL_FRAME(1)
  5199                                  .L_lambda_simple_end_0541:	; new closure is in rax
  5200 000029E5 48890425[92140000]      	mov qword [free_var_102], rax
  5201 000029ED 48B8-                   	mov rax, sob_void
  5201 000029EF [0000000000000000] 
  5202                                  
  5203 000029F7 4889C7                  	mov rdi, rax
  5204 000029FA E83B2E0100              	call print_sexpr_if_not_void
  5205                                  
  5206 000029FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5207 00002A04 E81F2D0100              	call malloc
  5208 00002A09 50                      	push rax
  5209 00002A0A BF00000000              	mov rdi, 8 * 0	; new rib
  5210 00002A0F E8142D0100              	call malloc
  5211 00002A14 50                      	push rax
  5212 00002A15 BF08000000              	mov rdi, 8 * 1	; extended env
  5213 00002A1A E8092D0100              	call malloc
  5214 00002A1F 488B7D10                	mov rdi, ENV
  5215 00002A23 BE00000000              	mov rsi, 0
  5216 00002A28 BA01000000              	mov rdx, 1
  5217                                  .L_lambda_opt_env_loop_00b0:	; ext_env[i + 1] <-- env[i]
  5218 00002A2D 4883FE00                	cmp rsi, 0
  5219 00002A31 7410                    	je .L_lambda_opt_env_end_00b0
  5220 00002A33 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5221 00002A37 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5222 00002A3B 48FFC6                  	inc rsi
  5223 00002A3E 48FFC2                  	inc rdx
  5224 00002A41 EBEA                    	jmp .L_lambda_opt_env_loop_00b0
  5225                                  .L_lambda_opt_env_end_00b0:
  5226 00002A43 5B                      	pop rbx
  5227 00002A44 BE00000000              	mov rsi, 0
  5228                                  .L_lambda_opt_params_loop_00b0:	; copy params
  5229 00002A49 4883FE00                	cmp rsi, 0
  5230 00002A4D 740E                    	je .L_lambda_opt_params_end_00b0
  5231 00002A4F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5232 00002A54 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5233 00002A58 48FFC6                  	inc rsi
  5234 00002A5B EBEC                    	jmp .L_lambda_opt_params_loop_00b0
  5235                                  .L_lambda_opt_params_end_00b0:
  5236 00002A5D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5237 00002A60 4889C3                  	mov rbx, rax
  5238 00002A63 58                      	pop rax
  5239 00002A64 C60004                  	mov byte [rax], T_closure
  5240 00002A67 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5241 00002A6B 48C74009[782A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b0
  5242 00002A73 E9DF000000              	jmp .L_lambda_opt_end_00b0
  5243                                  .L_lambda_opt_code_00b0:	; lambda-simple body
  5244 00002A78 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
  5245 00002A7E 740D                    	je .L_lambda_opt_arity_check_exact_00b0 ;	 if equal, go to exact arity
  5246 00002A80 7F42                    	jg .L_lambda_opt_arity_check_more_00b0 ;	 if greater than, go to arity more
  5247 00002A82 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  5248 00002A86 6A00                     	push 0
  5249 00002A88 E9682C0100              	jmp L_error_incorrect_arity_opt
  5250                                  	.L_lambda_opt_arity_check_exact_00b0:
  5251 00002A8D 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  5252 00002A92 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  5253 00002A97 4883EC08                	sub rsp, 8
  5254 00002A9B 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  5255                                  	.L_lambda_opt_exact_shifting_loop_00b0:
  5256 00002A9F 488B5108                	mov rdx, [rcx + 8]
  5257 00002AA3 488911                  	mov [rcx], rdx
  5258 00002AA6 4883C108                	add rcx, 8
  5259 00002AAA 4839CB                  	cmp rbx, rcx
  5260 00002AAD 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00b0
  5261                                  	.L_lambda_opt_exact_shifting_loop_end_00b0:
  5262 00002AAF 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  5263 00002AB6 4883C001                	add rax, 1 ; 	arg count += 1
  5264 00002ABA 4889442410              	mov qword [rsp + 8 * 2], rax
  5265 00002ABF E987000000              	jmp .L_lambda_opt_stack_adjusted_00b0
  5266                                  	.L_lambda_opt_arity_check_more_00b0:
  5267 00002AC4 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  5267 00002AC6 [0100000000000000] 
  5268 00002ACE 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
  5269 00002AD4 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00b0
  5270                                  	.L_lambda_opt_stack_shrink_loop_00b0:
  5271 00002AD6 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  5272 00002ADB E8482C0100              	call malloc ;	 allocated memory for the optional scheme list
  5273 00002AE0 C60021                  	mov byte[rax], T_pair ;	 set type pair
  5274 00002AE3 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  5275 00002AE7 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  5276 00002AEA 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  5277 00002AEF 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  5278 00002AF4 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  5279 00002AF8 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  5280                                  	.L_lambda_opt_more_shifting_loop_00b0:
  5281 00002AFD 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  5282 00002B00 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  5283 00002B04 4883EB08                	sub rbx, 8 
  5284 00002B08 4839DC                  	cmp rsp, rbx
  5285 00002B0B 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00b0
  5286                                  	.L_lambda_opt_more_shifting_loop_end_00b0:
  5287 00002B0D 4883C408                	add rsp, 8 ;	 update rsp
  5288 00002B11 488B5C2410              	mov rbx, [rsp + 8 * 2]
  5289 00002B16 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  5290 00002B1A 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  5291 00002B1F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5292 00002B25 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00b0
  5293                                  	.L_lambda_opt_stack_shrink_loop_exit_00b0:
  5294 00002B27 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  5295 00002B2C 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  5296 00002B31 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  5297 00002B36 E8ED2B0100              	call malloc ;	 allocated memory for the optional scheme list
  5298 00002B3B C60021                  	mov byte[rax], T_pair ;	 set type pair
  5299 00002B3E 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  5300 00002B42 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  5301 00002B46 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  5302                                  	.L_lambda_opt_stack_adjusted_00b0:
  5303 00002B4B C8000000                	enter 0, 0
  5304 00002B4F 488B4520                	mov rax, PARAM(0)	; param args
  5305 00002B53 C9                      	leave
  5306 00002B54 C21800                  	ret AND_KILL_FRAME(1)
  5307                                  .L_lambda_opt_end_00b0:	; new closure is in rax
  5308 00002B57 48890425[A3140000]      	mov qword [free_var_103], rax
  5309 00002B5F 48B8-                   	mov rax, sob_void
  5309 00002B61 [0000000000000000] 
  5310                                  
  5311 00002B69 4889C7                  	mov rdi, rax
  5312 00002B6C E8C92C0100              	call print_sexpr_if_not_void
  5313                                  
  5314 00002B71 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5315 00002B76 E8AD2B0100              	call malloc
  5316 00002B7B 50                      	push rax
  5317 00002B7C BF00000000              	mov rdi, 8 * 0	; new rib
  5318 00002B81 E8A22B0100              	call malloc
  5319 00002B86 50                      	push rax
  5320 00002B87 BF08000000              	mov rdi, 8 * 1	; extended env
  5321 00002B8C E8972B0100              	call malloc
  5322 00002B91 488B7D10                	mov rdi, ENV
  5323 00002B95 BE00000000              	mov rsi, 0
  5324 00002B9A BA01000000              	mov rdx, 1
  5325                                  .L_lambda_simple_env_loop_0542:	; ext_env[i + 1] <-- env[i]
  5326 00002B9F 4883FE00                	cmp rsi, 0
  5327 00002BA3 7410                    	je .L_lambda_simple_env_end_0542
  5328 00002BA5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5329 00002BA9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5330 00002BAD 48FFC6                  	inc rsi
  5331 00002BB0 48FFC2                  	inc rdx
  5332 00002BB3 EBEA                    	jmp .L_lambda_simple_env_loop_0542
  5333                                  .L_lambda_simple_env_end_0542:
  5334 00002BB5 5B                      	pop rbx
  5335 00002BB6 BE00000000              	mov rsi, 0
  5336                                  .L_lambda_simple_params_loop_0542:	; copy params
  5337 00002BBB 4883FE00                	cmp rsi, 0
  5338 00002BBF 740E                    	je .L_lambda_simple_params_end_0542
  5339 00002BC1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5340 00002BC6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5341 00002BCA 48FFC6                  	inc rsi
  5342 00002BCD EBEC                    	jmp .L_lambda_simple_params_loop_0542
  5343                                  .L_lambda_simple_params_end_0542:
  5344 00002BCF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5345 00002BD2 4889C3                  	mov rbx, rax
  5346 00002BD5 58                      	pop rax
  5347 00002BD6 C60004                  	mov byte [rax], T_closure
  5348 00002BD9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5349 00002BDD 48C74009[E72B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0542
  5350 00002BE5 EB3D                    	jmp .L_lambda_simple_end_0542
  5351                                  .L_lambda_simple_code_0542:	; lambda-simple body
  5352 00002BE7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5353 00002BED 740B                    	je .L_lambda_simple_arity_check_ok_0542
  5354 00002BEF FF742410                	push qword [rsp + 8 * 2]
  5355 00002BF3 6A01                    	push 1
  5356 00002BF5 E9E72A0100              	jmp L_error_incorrect_arity_simple
  5357                                  .L_lambda_simple_arity_check_ok_0542:
  5358 00002BFA C8000000                	enter 0, 0
  5359 00002BFE 488B4520                	mov rax, PARAM(0)	; param x
  5360                                  
  5361 00002C02 483D[02000000]          	cmp rax, sob_boolean_false
  5362 00002C08 740C                    	je .L_if_else_03cf
  5363 00002C0A 48B8-                   	mov rax, L_constants + 2
  5363 00002C0C [0200000000000000] 
  5364                                  
  5365 00002C14 EB0A                    	jmp .L_if_end_03cf
  5366                                  
  5367                                  	.L_if_else_03cf:
  5368 00002C16 48B8-                   	mov rax, L_constants + 3
  5368 00002C18 [0300000000000000] 
  5369                                  
  5370                                  	.L_if_end_03cf:
  5371 00002C20 C9                      	leave
  5372 00002C21 C21800                  	ret AND_KILL_FRAME(1)
  5373                                  .L_lambda_simple_end_0542:	; new closure is in rax
  5374 00002C24 48890425[B4140000]      	mov qword [free_var_104], rax
  5375 00002C2C 48B8-                   	mov rax, sob_void
  5375 00002C2E [0000000000000000] 
  5376                                  
  5377 00002C36 4889C7                  	mov rdi, rax
  5378 00002C39 E8FC2B0100              	call print_sexpr_if_not_void
  5379                                  
  5380 00002C3E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5381 00002C43 E8E02A0100              	call malloc
  5382 00002C48 50                      	push rax
  5383 00002C49 BF00000000              	mov rdi, 8 * 0	; new rib
  5384 00002C4E E8D52A0100              	call malloc
  5385 00002C53 50                      	push rax
  5386 00002C54 BF08000000              	mov rdi, 8 * 1	; extended env
  5387 00002C59 E8CA2A0100              	call malloc
  5388 00002C5E 488B7D10                	mov rdi, ENV
  5389 00002C62 BE00000000              	mov rsi, 0
  5390 00002C67 BA01000000              	mov rdx, 1
  5391                                  .L_lambda_simple_env_loop_0543:	; ext_env[i + 1] <-- env[i]
  5392 00002C6C 4883FE00                	cmp rsi, 0
  5393 00002C70 7410                    	je .L_lambda_simple_env_end_0543
  5394 00002C72 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5395 00002C76 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5396 00002C7A 48FFC6                  	inc rsi
  5397 00002C7D 48FFC2                  	inc rdx
  5398 00002C80 EBEA                    	jmp .L_lambda_simple_env_loop_0543
  5399                                  .L_lambda_simple_env_end_0543:
  5400 00002C82 5B                      	pop rbx
  5401 00002C83 BE00000000              	mov rsi, 0
  5402                                  .L_lambda_simple_params_loop_0543:	; copy params
  5403 00002C88 4883FE00                	cmp rsi, 0
  5404 00002C8C 740E                    	je .L_lambda_simple_params_end_0543
  5405 00002C8E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5406 00002C93 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5407 00002C97 48FFC6                  	inc rsi
  5408 00002C9A EBEC                    	jmp .L_lambda_simple_params_loop_0543
  5409                                  .L_lambda_simple_params_end_0543:
  5410 00002C9C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5411 00002C9F 4889C3                  	mov rbx, rax
  5412 00002CA2 58                      	pop rax
  5413 00002CA3 C60004                  	mov byte [rax], T_closure
  5414 00002CA6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5415 00002CAA 48C74009[B72C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0543
  5416 00002CB2 E9A7000000              	jmp .L_lambda_simple_end_0543
  5417                                  .L_lambda_simple_code_0543:	; lambda-simple body
  5418 00002CB7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5419 00002CBD 740B                    	je .L_lambda_simple_arity_check_ok_0543
  5420 00002CBF FF742410                	push qword [rsp + 8 * 2]
  5421 00002CC3 6A01                    	push 1
  5422 00002CC5 E9172A0100              	jmp L_error_incorrect_arity_simple
  5423                                  .L_lambda_simple_arity_check_ok_0543:
  5424 00002CCA C8000000                	enter 0, 0
  5425 00002CCE 488B4520                	mov rax, PARAM(0)	; param q
  5426 00002CD2 50                      	push rax
  5427 00002CD3 6A01                    	push 1	; arg count
  5428 00002CD5 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
  5429 00002CDD 803805                  	cmp byte [rax], T_undefined
  5430 00002CE0 0F8415290100            	je L_error_fvar_undefined
  5431 00002CE6 803804                  	cmp byte [rax], T_closure
  5432 00002CE9 0F8590290100            	jne L_error_non_closure
  5433 00002CEF FF7001                  	push SOB_CLOSURE_ENV(rax)
  5434 00002CF2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5435 00002CF5 483D[02000000]          	cmp rax, sob_boolean_false
  5436 00002CFB 755D                    	jne .L_or_end_005d
  5437                                  	; preparing a tail-call
  5438 00002CFD 488B4520                	mov rax, PARAM(0)	; param q
  5439 00002D01 50                      	push rax
  5440 00002D02 6A01                    	push 1	; arg count
  5441 00002D04 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  5442 00002D0C 803805                  	cmp byte [rax], T_undefined
  5443 00002D0F 0F84E6280100            	je L_error_fvar_undefined
  5444 00002D15 803804                  	cmp byte [rax], T_closure
  5445 00002D18 0F8561290100            	jne L_error_non_closure
  5446 00002D1E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5447                                  
  5448                                  	; recycling the current frame
  5449 00002D21 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5450 00002D24 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5451 00002D27 B905000000              	mov rcx, 1 + 4
  5452 00002D2C 488B5D18                	mov rbx, COUNT
  5453 00002D30 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5454 00002D35 488D55F8                	lea rdx, [rbp - 8 * 1]
  5455                                  .L_tc_recycle_frame_loop_06df:
  5456 00002D39 4883F900                	cmp rcx, 0
  5457 00002D3D 7413                    	je .L_tc_recycle_frame_done_06df
  5458 00002D3F 488B32                  	mov rsi, qword [rdx]
  5459 00002D42 488933                  	mov qword [rbx], rsi
  5460 00002D45 48FFC9                  	dec rcx
  5461 00002D48 4883EB08                	sub rbx, 8 * 1
  5462 00002D4C 4883EA08                	sub rdx, 8 * 1
  5463 00002D50 EBE7                    	jmp .L_tc_recycle_frame_loop_06df
  5464                                  .L_tc_recycle_frame_done_06df:
  5465 00002D52 488D6308                	lea rsp, [rbx + 8 * 1]
  5466 00002D56 5D                      	pop rbp	; the proc will restore it!
  5467 00002D57 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5468                                  .L_or_end_005d:
  5469 00002D5A C9                      	leave
  5470 00002D5B C21800                  	ret AND_KILL_FRAME(1)
  5471                                  .L_lambda_simple_end_0543:	; new closure is in rax
  5472 00002D5E 48890425[C5140000]      	mov qword [free_var_105], rax
  5473 00002D66 48B8-                   	mov rax, sob_void
  5473 00002D68 [0000000000000000] 
  5474                                  
  5475 00002D70 4889C7                  	mov rdi, rax
  5476 00002D73 E8C22A0100              	call print_sexpr_if_not_void
  5477                                  
  5478 00002D78 48B8-                   	mov rax, L_constants + 1881
  5478 00002D7A [5907000000000000] 
  5479 00002D82 50                      	push rax
  5480 00002D83 6A01                    	push 1	; arg count
  5481 00002D85 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5482 00002D8A E899290100              	call malloc
  5483 00002D8F 50                      	push rax
  5484 00002D90 BF00000000              	mov rdi, 8 * 0	; new rib
  5485 00002D95 E88E290100              	call malloc
  5486 00002D9A 50                      	push rax
  5487 00002D9B BF08000000              	mov rdi, 8 * 1	; extended env
  5488 00002DA0 E883290100              	call malloc
  5489 00002DA5 488B7D10                	mov rdi, ENV
  5490 00002DA9 BE00000000              	mov rsi, 0
  5491 00002DAE BA01000000              	mov rdx, 1
  5492                                  .L_lambda_simple_env_loop_0544:	; ext_env[i + 1] <-- env[i]
  5493 00002DB3 4883FE00                	cmp rsi, 0
  5494 00002DB7 7410                    	je .L_lambda_simple_env_end_0544
  5495 00002DB9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5496 00002DBD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5497 00002DC1 48FFC6                  	inc rsi
  5498 00002DC4 48FFC2                  	inc rdx
  5499 00002DC7 EBEA                    	jmp .L_lambda_simple_env_loop_0544
  5500                                  .L_lambda_simple_env_end_0544:
  5501 00002DC9 5B                      	pop rbx
  5502 00002DCA BE00000000              	mov rsi, 0
  5503                                  .L_lambda_simple_params_loop_0544:	; copy params
  5504 00002DCF 4883FE00                	cmp rsi, 0
  5505 00002DD3 740E                    	je .L_lambda_simple_params_end_0544
  5506 00002DD5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5507 00002DDA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5508 00002DDE 48FFC6                  	inc rsi
  5509 00002DE1 EBEC                    	jmp .L_lambda_simple_params_loop_0544
  5510                                  .L_lambda_simple_params_end_0544:
  5511 00002DE3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5512 00002DE6 4889C3                  	mov rbx, rax
  5513 00002DE9 58                      	pop rax
  5514 00002DEA C60004                  	mov byte [rax], T_closure
  5515 00002DED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5516 00002DF1 48C74009[FE2D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0544
  5517 00002DF9 E995030000              	jmp .L_lambda_simple_end_0544
  5518                                  .L_lambda_simple_code_0544:	; lambda-simple body
  5519 00002DFE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5520 00002E04 740B                    	je .L_lambda_simple_arity_check_ok_0544
  5521 00002E06 FF742410                	push qword [rsp + 8 * 2]
  5522 00002E0A 6A01                    	push 1
  5523 00002E0C E9D0280100              	jmp L_error_incorrect_arity_simple
  5524                                  .L_lambda_simple_arity_check_ok_0544:
  5525 00002E11 C8000000                	enter 0, 0
  5526                                  
  5527 00002E15 BF08000000              	mov rdi, 8
  5528 00002E1A E809290100              	call malloc
  5529 00002E1F 488B5D20                	mov rbx, PARAM(0)	; param run
  5530 00002E23 488918                  	mov [rax], rbx	; box run
  5531 00002E26 48894520                	mov PARAM(0), rax	;replace param run with box
  5532 00002E2A 48B8-                   	mov rax, sob_void
  5532 00002E2C [0000000000000000] 
  5533                                  
  5534 00002E34 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5535 00002E39 E8EA280100              	call malloc
  5536 00002E3E 50                      	push rax
  5537 00002E3F BF08000000              	mov rdi, 8 * 1	; new rib
  5538 00002E44 E8DF280100              	call malloc
  5539 00002E49 50                      	push rax
  5540 00002E4A BF10000000              	mov rdi, 8 * 2	; extended env
  5541 00002E4F E8D4280100              	call malloc
  5542 00002E54 488B7D10                	mov rdi, ENV
  5543 00002E58 BE00000000              	mov rsi, 0
  5544 00002E5D BA01000000              	mov rdx, 1
  5545                                  .L_lambda_simple_env_loop_0545:	; ext_env[i + 1] <-- env[i]
  5546 00002E62 4883FE01                	cmp rsi, 1
  5547 00002E66 7410                    	je .L_lambda_simple_env_end_0545
  5548 00002E68 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5549 00002E6C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5550 00002E70 48FFC6                  	inc rsi
  5551 00002E73 48FFC2                  	inc rdx
  5552 00002E76 EBEA                    	jmp .L_lambda_simple_env_loop_0545
  5553                                  .L_lambda_simple_env_end_0545:
  5554 00002E78 5B                      	pop rbx
  5555 00002E79 BE00000000              	mov rsi, 0
  5556                                  .L_lambda_simple_params_loop_0545:	; copy params
  5557 00002E7E 4883FE01                	cmp rsi, 1
  5558 00002E82 740E                    	je .L_lambda_simple_params_end_0545
  5559 00002E84 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5560 00002E89 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5561 00002E8D 48FFC6                  	inc rsi
  5562 00002E90 EBEC                    	jmp .L_lambda_simple_params_loop_0545
  5563                                  .L_lambda_simple_params_end_0545:
  5564 00002E92 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5565 00002E95 4889C3                  	mov rbx, rax
  5566 00002E98 58                      	pop rax
  5567 00002E99 C60004                  	mov byte [rax], T_closure
  5568 00002E9C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5569 00002EA0 48C74009[AD2E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0545
  5570 00002EA8 E91F010000              	jmp .L_lambda_simple_end_0545
  5571                                  .L_lambda_simple_code_0545:	; lambda-simple body
  5572 00002EAD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5573 00002EB3 740B                    	je .L_lambda_simple_arity_check_ok_0545
  5574 00002EB5 FF742410                	push qword [rsp + 8 * 2]
  5575 00002EB9 6A02                    	push 2
  5576 00002EBB E921280100              	jmp L_error_incorrect_arity_simple
  5577                                  .L_lambda_simple_arity_check_ok_0545:
  5578 00002EC0 C8000000                	enter 0, 0
  5579 00002EC4 488B4528                	mov rax, PARAM(1)	; param s
  5580 00002EC8 50                      	push rax
  5581 00002EC9 6A01                    	push 1	; arg count
  5582 00002ECB 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
  5583 00002ED3 803805                  	cmp byte [rax], T_undefined
  5584 00002ED6 0F841F270100            	je L_error_fvar_undefined
  5585 00002EDC 803804                  	cmp byte [rax], T_closure
  5586 00002EDF 0F859A270100            	jne L_error_non_closure
  5587 00002EE5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5588 00002EE8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5589                                  
  5590 00002EEB 483D[02000000]          	cmp rax, sob_boolean_false
  5591 00002EF1 7409                    	je .L_if_else_03d0
  5592 00002EF3 488B4520                	mov rax, PARAM(0)	; param a
  5593                                  
  5594 00002EF7 E9CC000000              	jmp .L_if_end_03d0
  5595                                  
  5596                                  	.L_if_else_03d0:
  5597                                  	; preparing a tail-call
  5598 00002EFC 488B4528                	mov rax, PARAM(1)	; param s
  5599 00002F00 50                      	push rax
  5600 00002F01 6A01                    	push 1	; arg count
  5601 00002F03 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  5602 00002F0B 803805                  	cmp byte [rax], T_undefined
  5603 00002F0E 0F84E7260100            	je L_error_fvar_undefined
  5604 00002F14 803804                  	cmp byte [rax], T_closure
  5605 00002F17 0F8562270100            	jne L_error_non_closure
  5606 00002F1D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5607 00002F20 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5608 00002F23 50                      	push rax
  5609 00002F24 488B4528                	mov rax, PARAM(1)	; param s
  5610 00002F28 50                      	push rax
  5611 00002F29 6A01                    	push 1	; arg count
  5612 00002F2B 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  5613 00002F33 803805                  	cmp byte [rax], T_undefined
  5614 00002F36 0F84BF260100            	je L_error_fvar_undefined
  5615 00002F3C 803804                  	cmp byte [rax], T_closure
  5616 00002F3F 0F853A270100            	jne L_error_non_closure
  5617 00002F45 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5618 00002F48 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5619 00002F4B 50                      	push rax
  5620 00002F4C 6A02                    	push 2	; arg count
  5621 00002F4E 488B4510                	mov rax, ENV
  5622 00002F52 488B00                  	mov rax, qword [rax + 8 * 0]
  5623 00002F55 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5624 00002F58 488B00                  	mov rax, qword [rax]
  5625 00002F5B 803804                  	cmp byte [rax], T_closure
  5626 00002F5E 0F851B270100            	jne L_error_non_closure
  5627 00002F64 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5628 00002F67 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5629 00002F6A 50                      	push rax
  5630 00002F6B 488B4520                	mov rax, PARAM(0)	; param a
  5631 00002F6F 50                      	push rax
  5632 00002F70 6A02                    	push 2	; arg count
  5633 00002F72 488B0425[A90E0000]      	mov rax, qword [free_var_13]	; free var cons
  5634 00002F7A 803805                  	cmp byte [rax], T_undefined
  5635 00002F7D 0F8478260100            	je L_error_fvar_undefined
  5636 00002F83 803804                  	cmp byte [rax], T_closure
  5637 00002F86 0F85F3260100            	jne L_error_non_closure
  5638 00002F8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5639                                  
  5640                                  	; recycling the current frame
  5641 00002F8F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5642 00002F92 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5643 00002F95 B906000000              	mov rcx, 2 + 4
  5644 00002F9A 488B5D18                	mov rbx, COUNT
  5645 00002F9E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5646 00002FA3 488D55F8                	lea rdx, [rbp - 8 * 1]
  5647                                  .L_tc_recycle_frame_loop_06e0:
  5648 00002FA7 4883F900                	cmp rcx, 0
  5649 00002FAB 7413                    	je .L_tc_recycle_frame_done_06e0
  5650 00002FAD 488B32                  	mov rsi, qword [rdx]
  5651 00002FB0 488933                  	mov qword [rbx], rsi
  5652 00002FB3 48FFC9                  	dec rcx
  5653 00002FB6 4883EB08                	sub rbx, 8 * 1
  5654 00002FBA 4883EA08                	sub rdx, 8 * 1
  5655 00002FBE EBE7                    	jmp .L_tc_recycle_frame_loop_06e0
  5656                                  .L_tc_recycle_frame_done_06e0:
  5657 00002FC0 488D6308                	lea rsp, [rbx + 8 * 1]
  5658 00002FC4 5D                      	pop rbp	; the proc will restore it!
  5659 00002FC5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5660                                  
  5661                                  	.L_if_end_03d0:
  5662 00002FC8 C9                      	leave
  5663 00002FC9 C22000                  	ret AND_KILL_FRAME(2)
  5664                                  .L_lambda_simple_end_0545:	; new closure is in rax
  5665                                  
  5666 00002FCC 50                      	push rax
  5667 00002FCD 488B4520                	mov rax, PARAM(0)	; param run
  5668                                  
  5669 00002FD1 8F00                    	pop qword[rax]
  5670 00002FD3 48B8-                   	mov rax, sob_void
  5670 00002FD5 [0000000000000000] 
  5671                                  
  5672 00002FDD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5673 00002FE2 E841270100              	call malloc
  5674 00002FE7 50                      	push rax
  5675 00002FE8 BF08000000              	mov rdi, 8 * 1	; new rib
  5676 00002FED E836270100              	call malloc
  5677 00002FF2 50                      	push rax
  5678 00002FF3 BF10000000              	mov rdi, 8 * 2	; extended env
  5679 00002FF8 E82B270100              	call malloc
  5680 00002FFD 488B7D10                	mov rdi, ENV
  5681 00003001 BE00000000              	mov rsi, 0
  5682 00003006 BA01000000              	mov rdx, 1
  5683                                  .L_lambda_opt_env_loop_00b1:	; ext_env[i + 1] <-- env[i]
  5684 0000300B 4883FE01                	cmp rsi, 1
  5685 0000300F 7410                    	je .L_lambda_opt_env_end_00b1
  5686 00003011 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5687 00003015 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5688 00003019 48FFC6                  	inc rsi
  5689 0000301C 48FFC2                  	inc rdx
  5690 0000301F EBEA                    	jmp .L_lambda_opt_env_loop_00b1
  5691                                  .L_lambda_opt_env_end_00b1:
  5692 00003021 5B                      	pop rbx
  5693 00003022 BE00000000              	mov rsi, 0
  5694                                  .L_lambda_opt_params_loop_00b1:	; copy params
  5695 00003027 4883FE01                	cmp rsi, 1
  5696 0000302B 740E                    	je .L_lambda_opt_params_end_00b1
  5697 0000302D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5698 00003032 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5699 00003036 48FFC6                  	inc rsi
  5700 00003039 EBEC                    	jmp .L_lambda_opt_params_loop_00b1
  5701                                  .L_lambda_opt_params_end_00b1:
  5702 0000303B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5703 0000303E 4889C3                  	mov rbx, rax
  5704 00003041 58                      	pop rax
  5705 00003042 C60004                  	mov byte [rax], T_closure
  5706 00003045 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5707 00003049 48C74009[56300000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b1
  5708 00003051 E939010000              	jmp .L_lambda_opt_end_00b1
  5709                                  .L_lambda_opt_code_00b1:	; lambda-simple body
  5710 00003056 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  5711 0000305C 740D                    	je .L_lambda_opt_arity_check_exact_00b1 ;	 if equal, go to exact arity
  5712 0000305E 7F42                    	jg .L_lambda_opt_arity_check_more_00b1 ;	 if greater than, go to arity more
  5713 00003060 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  5714 00003064 6A01                     	push 1
  5715 00003066 E98A260100              	jmp L_error_incorrect_arity_opt
  5716                                  	.L_lambda_opt_arity_check_exact_00b1:
  5717 0000306B 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  5718 00003070 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  5719 00003075 4883EC08                	sub rsp, 8
  5720 00003079 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  5721                                  	.L_lambda_opt_exact_shifting_loop_00b1:
  5722 0000307D 488B5108                	mov rdx, [rcx + 8]
  5723 00003081 488911                  	mov [rcx], rdx
  5724 00003084 4883C108                	add rcx, 8
  5725 00003088 4839CB                  	cmp rbx, rcx
  5726 0000308B 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00b1
  5727                                  	.L_lambda_opt_exact_shifting_loop_end_00b1:
  5728 0000308D 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  5729 00003094 4883C001                	add rax, 1 ; 	arg count += 1
  5730 00003098 4889442410              	mov qword [rsp + 8 * 2], rax
  5731 0000309D E987000000              	jmp .L_lambda_opt_stack_adjusted_00b1
  5732                                  	.L_lambda_opt_arity_check_more_00b1:
  5733 000030A2 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  5733 000030A4 [0100000000000000] 
  5734 000030AC 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  5735 000030B2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00b1
  5736                                  	.L_lambda_opt_stack_shrink_loop_00b1:
  5737 000030B4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  5738 000030B9 E86A260100              	call malloc ;	 allocated memory for the optional scheme list
  5739 000030BE C60021                  	mov byte[rax], T_pair ;	 set type pair
  5740 000030C1 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  5741 000030C5 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  5742 000030C8 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  5743 000030CD 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  5744 000030D2 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  5745 000030D6 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  5746                                  	.L_lambda_opt_more_shifting_loop_00b1:
  5747 000030DB 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  5748 000030DE 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  5749 000030E2 4883EB08                	sub rbx, 8 
  5750 000030E6 4839DC                  	cmp rsp, rbx
  5751 000030E9 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00b1
  5752                                  	.L_lambda_opt_more_shifting_loop_end_00b1:
  5753 000030EB 4883C408                	add rsp, 8 ;	 update rsp
  5754 000030EF 488B5C2410              	mov rbx, [rsp + 8 * 2]
  5755 000030F4 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  5756 000030F8 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  5757 000030FD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5758 00003103 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00b1
  5759                                  	.L_lambda_opt_stack_shrink_loop_exit_00b1:
  5760 00003105 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  5761 0000310A 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  5762 0000310F BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  5763 00003114 E80F260100              	call malloc ;	 allocated memory for the optional scheme list
  5764 00003119 C60021                  	mov byte[rax], T_pair ;	 set type pair
  5765 0000311C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  5766 00003120 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  5767 00003124 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  5768                                  	.L_lambda_opt_stack_adjusted_00b1:
  5769 00003129 C8000000                	enter 0, 0
  5770                                  	; preparing a tail-call
  5771 0000312D 488B4528                	mov rax, PARAM(1)	; param s
  5772 00003131 50                      	push rax
  5773 00003132 488B4520                	mov rax, PARAM(0)	; param a
  5774 00003136 50                      	push rax
  5775 00003137 6A02                    	push 2	; arg count
  5776 00003139 488B4510                	mov rax, ENV
  5777 0000313D 488B00                  	mov rax, qword [rax + 8 * 0]
  5778 00003140 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5779 00003143 488B00                  	mov rax, qword [rax]
  5780 00003146 803804                  	cmp byte [rax], T_closure
  5781 00003149 0F8530250100            	jne L_error_non_closure
  5782 0000314F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5783                                  
  5784                                  	; recycling the current frame
  5785 00003152 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5786 00003155 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5787 00003158 B906000000              	mov rcx, 2 + 4
  5788 0000315D 488B5D18                	mov rbx, COUNT
  5789 00003161 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5790 00003166 488D55F8                	lea rdx, [rbp - 8 * 1]
  5791                                  .L_tc_recycle_frame_loop_06e1:
  5792 0000316A 4883F900                	cmp rcx, 0
  5793 0000316E 7413                    	je .L_tc_recycle_frame_done_06e1
  5794 00003170 488B32                  	mov rsi, qword [rdx]
  5795 00003173 488933                  	mov qword [rbx], rsi
  5796 00003176 48FFC9                  	dec rcx
  5797 00003179 4883EB08                	sub rbx, 8 * 1
  5798 0000317D 4883EA08                	sub rdx, 8 * 1
  5799 00003181 EBE7                    	jmp .L_tc_recycle_frame_loop_06e1
  5800                                  .L_tc_recycle_frame_done_06e1:
  5801 00003183 488D6308                	lea rsp, [rbx + 8 * 1]
  5802 00003187 5D                      	pop rbp	; the proc will restore it!
  5803 00003188 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5804 0000318B C9                      	leave
  5805 0000318C C22000                  	ret AND_KILL_FRAME(2)
  5806                                  .L_lambda_opt_end_00b1:	; new closure is in rax
  5807 0000318F C9                      	leave
  5808 00003190 C21800                  	ret AND_KILL_FRAME(1)
  5809                                  .L_lambda_simple_end_0544:	; new closure is in rax
  5810 00003193 803804                  	cmp byte [rax], T_closure
  5811 00003196 0F85E3240100            	jne L_error_non_closure
  5812 0000319C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5813 0000319F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5814 000031A2 48890425[D6140000]      	mov qword [free_var_106], rax
  5815 000031AA 48B8-                   	mov rax, sob_void
  5815 000031AC [0000000000000000] 
  5816                                  
  5817 000031B4 4889C7                  	mov rdi, rax
  5818 000031B7 E87E260100              	call print_sexpr_if_not_void
  5819                                  
  5820 000031BC 48B8-                   	mov rax, L_constants + 1881
  5820 000031BE [5907000000000000] 
  5821 000031C6 50                      	push rax
  5822 000031C7 6A01                    	push 1	; arg count
  5823 000031C9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5824 000031CE E855250100              	call malloc
  5825 000031D3 50                      	push rax
  5826 000031D4 BF00000000              	mov rdi, 8 * 0	; new rib
  5827 000031D9 E84A250100              	call malloc
  5828 000031DE 50                      	push rax
  5829 000031DF BF08000000              	mov rdi, 8 * 1	; extended env
  5830 000031E4 E83F250100              	call malloc
  5831 000031E9 488B7D10                	mov rdi, ENV
  5832 000031ED BE00000000              	mov rsi, 0
  5833 000031F2 BA01000000              	mov rdx, 1
  5834                                  .L_lambda_simple_env_loop_0546:	; ext_env[i + 1] <-- env[i]
  5835 000031F7 4883FE00                	cmp rsi, 0
  5836 000031FB 7410                    	je .L_lambda_simple_env_end_0546
  5837 000031FD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5838 00003201 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5839 00003205 48FFC6                  	inc rsi
  5840 00003208 48FFC2                  	inc rdx
  5841 0000320B EBEA                    	jmp .L_lambda_simple_env_loop_0546
  5842                                  .L_lambda_simple_env_end_0546:
  5843 0000320D 5B                      	pop rbx
  5844 0000320E BE00000000              	mov rsi, 0
  5845                                  .L_lambda_simple_params_loop_0546:	; copy params
  5846 00003213 4883FE00                	cmp rsi, 0
  5847 00003217 740E                    	je .L_lambda_simple_params_end_0546
  5848 00003219 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5849 0000321E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5850 00003222 48FFC6                  	inc rsi
  5851 00003225 EBEC                    	jmp .L_lambda_simple_params_loop_0546
  5852                                  .L_lambda_simple_params_end_0546:
  5853 00003227 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5854 0000322A 4889C3                  	mov rbx, rax
  5855 0000322D 58                      	pop rax
  5856 0000322E C60004                  	mov byte [rax], T_closure
  5857 00003231 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5858 00003235 48C74009[42320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0546
  5859 0000323D E904040000              	jmp .L_lambda_simple_end_0546
  5860                                  .L_lambda_simple_code_0546:	; lambda-simple body
  5861 00003242 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5862 00003248 740B                    	je .L_lambda_simple_arity_check_ok_0546
  5863 0000324A FF742410                	push qword [rsp + 8 * 2]
  5864 0000324E 6A01                    	push 1
  5865 00003250 E98C240100              	jmp L_error_incorrect_arity_simple
  5866                                  .L_lambda_simple_arity_check_ok_0546:
  5867 00003255 C8000000                	enter 0, 0
  5868                                  
  5869 00003259 BF08000000              	mov rdi, 8
  5870 0000325E E8C5240100              	call malloc
  5871 00003263 488B5D20                	mov rbx, PARAM(0)	; param run
  5872 00003267 488918                  	mov [rax], rbx	; box run
  5873 0000326A 48894520                	mov PARAM(0), rax	;replace param run with box
  5874 0000326E 48B8-                   	mov rax, sob_void
  5874 00003270 [0000000000000000] 
  5875                                  
  5876 00003278 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5877 0000327D E8A6240100              	call malloc
  5878 00003282 50                      	push rax
  5879 00003283 BF08000000              	mov rdi, 8 * 1	; new rib
  5880 00003288 E89B240100              	call malloc
  5881 0000328D 50                      	push rax
  5882 0000328E BF10000000              	mov rdi, 8 * 2	; extended env
  5883 00003293 E890240100              	call malloc
  5884 00003298 488B7D10                	mov rdi, ENV
  5885 0000329C BE00000000              	mov rsi, 0
  5886 000032A1 BA01000000              	mov rdx, 1
  5887                                  .L_lambda_simple_env_loop_0547:	; ext_env[i + 1] <-- env[i]
  5888 000032A6 4883FE01                	cmp rsi, 1
  5889 000032AA 7410                    	je .L_lambda_simple_env_end_0547
  5890 000032AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5891 000032B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5892 000032B4 48FFC6                  	inc rsi
  5893 000032B7 48FFC2                  	inc rdx
  5894 000032BA EBEA                    	jmp .L_lambda_simple_env_loop_0547
  5895                                  .L_lambda_simple_env_end_0547:
  5896 000032BC 5B                      	pop rbx
  5897 000032BD BE00000000              	mov rsi, 0
  5898                                  .L_lambda_simple_params_loop_0547:	; copy params
  5899 000032C2 4883FE01                	cmp rsi, 1
  5900 000032C6 740E                    	je .L_lambda_simple_params_end_0547
  5901 000032C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5902 000032CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5903 000032D1 48FFC6                  	inc rsi
  5904 000032D4 EBEC                    	jmp .L_lambda_simple_params_loop_0547
  5905                                  .L_lambda_simple_params_end_0547:
  5906 000032D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5907 000032D9 4889C3                  	mov rbx, rax
  5908 000032DC 58                      	pop rax
  5909 000032DD C60004                  	mov byte [rax], T_closure
  5910 000032E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5911 000032E4 48C74009[F1320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0547
  5912 000032EC E920010000              	jmp .L_lambda_simple_end_0547
  5913                                  .L_lambda_simple_code_0547:	; lambda-simple body
  5914 000032F1 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5915 000032F7 740B                    	je .L_lambda_simple_arity_check_ok_0547
  5916 000032F9 FF742410                	push qword [rsp + 8 * 2]
  5917 000032FD 6A02                    	push 2
  5918 000032FF E9DD230100              	jmp L_error_incorrect_arity_simple
  5919                                  .L_lambda_simple_arity_check_ok_0547:
  5920 00003304 C8000000                	enter 0, 0
  5921 00003308 488B4528                	mov rax, PARAM(1)	; param s
  5922 0000330C 50                      	push rax
  5923 0000330D 6A01                    	push 1	; arg count
  5924 0000330F 488B0425[DD0D0000]      	mov rax, qword [free_var_1]	; free var pair?
  5925 00003317 803805                  	cmp byte [rax], T_undefined
  5926 0000331A 0F84DB220100            	je L_error_fvar_undefined
  5927 00003320 803804                  	cmp byte [rax], T_closure
  5928 00003323 0F8556230100            	jne L_error_non_closure
  5929 00003329 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5930 0000332C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5931                                  
  5932 0000332F 483D[02000000]          	cmp rax, sob_boolean_false
  5933 00003335 0F84CE000000            	je .L_if_else_03d1
  5934                                  	; preparing a tail-call
  5935 0000333B 488B4528                	mov rax, PARAM(1)	; param s
  5936 0000333F 50                      	push rax
  5937 00003340 6A01                    	push 1	; arg count
  5938 00003342 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  5939 0000334A 803805                  	cmp byte [rax], T_undefined
  5940 0000334D 0F84A8220100            	je L_error_fvar_undefined
  5941 00003353 803804                  	cmp byte [rax], T_closure
  5942 00003356 0F8523230100            	jne L_error_non_closure
  5943 0000335C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5944 0000335F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5945 00003362 50                      	push rax
  5946 00003363 488B4528                	mov rax, PARAM(1)	; param s
  5947 00003367 50                      	push rax
  5948 00003368 6A01                    	push 1	; arg count
  5949 0000336A 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  5950 00003372 803805                  	cmp byte [rax], T_undefined
  5951 00003375 0F8480220100            	je L_error_fvar_undefined
  5952 0000337B 803804                  	cmp byte [rax], T_closure
  5953 0000337E 0F85FB220100            	jne L_error_non_closure
  5954 00003384 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5955 00003387 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5956 0000338A 50                      	push rax
  5957 0000338B 6A02                    	push 2	; arg count
  5958 0000338D 488B4510                	mov rax, ENV
  5959 00003391 488B00                  	mov rax, qword [rax + 8 * 0]
  5960 00003394 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5961 00003397 488B00                  	mov rax, qword [rax]
  5962 0000339A 803804                  	cmp byte [rax], T_closure
  5963 0000339D 0F85DC220100            	jne L_error_non_closure
  5964 000033A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5965 000033A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5966 000033A9 50                      	push rax
  5967 000033AA 488B4520                	mov rax, PARAM(0)	; param a
  5968 000033AE 50                      	push rax
  5969 000033AF 6A02                    	push 2	; arg count
  5970 000033B1 488B0425[A90E0000]      	mov rax, qword [free_var_13]	; free var cons
  5971 000033B9 803805                  	cmp byte [rax], T_undefined
  5972 000033BC 0F8439220100            	je L_error_fvar_undefined
  5973 000033C2 803804                  	cmp byte [rax], T_closure
  5974 000033C5 0F85B4220100            	jne L_error_non_closure
  5975 000033CB FF7001                  	push SOB_CLOSURE_ENV(rax)
  5976                                  
  5977                                  	; recycling the current frame
  5978 000033CE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  5979 000033D1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  5980 000033D4 B906000000              	mov rcx, 2 + 4
  5981 000033D9 488B5D18                	mov rbx, COUNT
  5982 000033DD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  5983 000033E2 488D55F8                	lea rdx, [rbp - 8 * 1]
  5984                                  .L_tc_recycle_frame_loop_06e2:
  5985 000033E6 4883F900                	cmp rcx, 0
  5986 000033EA 7413                    	je .L_tc_recycle_frame_done_06e2
  5987 000033EC 488B32                  	mov rsi, qword [rdx]
  5988 000033EF 488933                  	mov qword [rbx], rsi
  5989 000033F2 48FFC9                  	dec rcx
  5990 000033F5 4883EB08                	sub rbx, 8 * 1
  5991 000033F9 4883EA08                	sub rdx, 8 * 1
  5992 000033FD EBE7                    	jmp .L_tc_recycle_frame_loop_06e2
  5993                                  .L_tc_recycle_frame_done_06e2:
  5994 000033FF 488D6308                	lea rsp, [rbx + 8 * 1]
  5995 00003403 5D                      	pop rbp	; the proc will restore it!
  5996 00003404 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5997                                  
  5998 00003407 EB04                    	jmp .L_if_end_03d1
  5999                                  
  6000                                  	.L_if_else_03d1:
  6001 00003409 488B4520                	mov rax, PARAM(0)	; param a
  6002                                  
  6003                                  	.L_if_end_03d1:
  6004 0000340D C9                      	leave
  6005 0000340E C22000                  	ret AND_KILL_FRAME(2)
  6006                                  .L_lambda_simple_end_0547:	; new closure is in rax
  6007                                  
  6008 00003411 50                      	push rax
  6009 00003412 488B4520                	mov rax, PARAM(0)	; param run
  6010                                  
  6011 00003416 8F00                    	pop qword[rax]
  6012 00003418 48B8-                   	mov rax, sob_void
  6012 0000341A [0000000000000000] 
  6013                                  
  6014 00003422 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6015 00003427 E8FC220100              	call malloc
  6016 0000342C 50                      	push rax
  6017 0000342D BF08000000              	mov rdi, 8 * 1	; new rib
  6018 00003432 E8F1220100              	call malloc
  6019 00003437 50                      	push rax
  6020 00003438 BF10000000              	mov rdi, 8 * 2	; extended env
  6021 0000343D E8E6220100              	call malloc
  6022 00003442 488B7D10                	mov rdi, ENV
  6023 00003446 BE00000000              	mov rsi, 0
  6024 0000344B BA01000000              	mov rdx, 1
  6025                                  .L_lambda_opt_env_loop_00b2:	; ext_env[i + 1] <-- env[i]
  6026 00003450 4883FE01                	cmp rsi, 1
  6027 00003454 7410                    	je .L_lambda_opt_env_end_00b2
  6028 00003456 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6029 0000345A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6030 0000345E 48FFC6                  	inc rsi
  6031 00003461 48FFC2                  	inc rdx
  6032 00003464 EBEA                    	jmp .L_lambda_opt_env_loop_00b2
  6033                                  .L_lambda_opt_env_end_00b2:
  6034 00003466 5B                      	pop rbx
  6035 00003467 BE00000000              	mov rsi, 0
  6036                                  .L_lambda_opt_params_loop_00b2:	; copy params
  6037 0000346C 4883FE01                	cmp rsi, 1
  6038 00003470 740E                    	je .L_lambda_opt_params_end_00b2
  6039 00003472 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6040 00003477 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6041 0000347B 48FFC6                  	inc rsi
  6042 0000347E EBEC                    	jmp .L_lambda_opt_params_loop_00b2
  6043                                  .L_lambda_opt_params_end_00b2:
  6044 00003480 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6045 00003483 4889C3                  	mov rbx, rax
  6046 00003486 58                      	pop rax
  6047 00003487 C60004                  	mov byte [rax], T_closure
  6048 0000348A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6049 0000348E 48C74009[9B340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b2
  6050 00003496 E9A7010000              	jmp .L_lambda_opt_end_00b2
  6051                                  .L_lambda_opt_code_00b2:	; lambda-simple body
  6052 0000349B 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  6053 000034A1 740D                    	je .L_lambda_opt_arity_check_exact_00b2 ;	 if equal, go to exact arity
  6054 000034A3 7F42                    	jg .L_lambda_opt_arity_check_more_00b2 ;	 if greater than, go to arity more
  6055 000034A5 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  6056 000034A9 6A01                     	push 1
  6057 000034AB E945220100              	jmp L_error_incorrect_arity_opt
  6058                                  	.L_lambda_opt_arity_check_exact_00b2:
  6059 000034B0 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  6060 000034B5 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  6061 000034BA 4883EC08                	sub rsp, 8
  6062 000034BE 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  6063                                  	.L_lambda_opt_exact_shifting_loop_00b2:
  6064 000034C2 488B5108                	mov rdx, [rcx + 8]
  6065 000034C6 488911                  	mov [rcx], rdx
  6066 000034C9 4883C108                	add rcx, 8
  6067 000034CD 4839CB                  	cmp rbx, rcx
  6068 000034D0 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00b2
  6069                                  	.L_lambda_opt_exact_shifting_loop_end_00b2:
  6070 000034D2 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  6071 000034D9 4883C001                	add rax, 1 ; 	arg count += 1
  6072 000034DD 4889442410              	mov qword [rsp + 8 * 2], rax
  6073 000034E2 E987000000              	jmp .L_lambda_opt_stack_adjusted_00b2
  6074                                  	.L_lambda_opt_arity_check_more_00b2:
  6075 000034E7 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  6075 000034E9 [0100000000000000] 
  6076 000034F1 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  6077 000034F7 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00b2
  6078                                  	.L_lambda_opt_stack_shrink_loop_00b2:
  6079 000034F9 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6080 000034FE E825220100              	call malloc ;	 allocated memory for the optional scheme list
  6081 00003503 C60021                  	mov byte[rax], T_pair ;	 set type pair
  6082 00003506 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6083 0000350A 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  6084 0000350D 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  6085 00003512 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  6086 00003517 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  6087 0000351B 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  6088                                  	.L_lambda_opt_more_shifting_loop_00b2:
  6089 00003520 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  6090 00003523 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  6091 00003527 4883EB08                	sub rbx, 8 
  6092 0000352B 4839DC                  	cmp rsp, rbx
  6093 0000352E 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00b2
  6094                                  	.L_lambda_opt_more_shifting_loop_end_00b2:
  6095 00003530 4883C408                	add rsp, 8 ;	 update rsp
  6096 00003534 488B5C2410              	mov rbx, [rsp + 8 * 2]
  6097 00003539 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  6098 0000353D 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  6099 00003542 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6100 00003548 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00b2
  6101                                  	.L_lambda_opt_stack_shrink_loop_exit_00b2:
  6102 0000354A 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  6103 0000354F 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  6104 00003554 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6105 00003559 E8CA210100              	call malloc ;	 allocated memory for the optional scheme list
  6106 0000355E C60021                  	mov byte[rax], T_pair ;	 set type pair
  6107 00003561 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6108 00003565 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  6109 00003569 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  6110                                  	.L_lambda_opt_stack_adjusted_00b2:
  6111 0000356E C8000000                	enter 0, 0
  6112                                  	; preparing a tail-call
  6113 00003572 488B4528                	mov rax, PARAM(1)	; param s
  6114 00003576 50                      	push rax
  6115 00003577 6A01                    	push 1	; arg count
  6116 00003579 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  6117 00003581 803805                  	cmp byte [rax], T_undefined
  6118 00003584 0F8471200100            	je L_error_fvar_undefined
  6119 0000358A 803804                  	cmp byte [rax], T_closure
  6120 0000358D 0F85EC200100            	jne L_error_non_closure
  6121 00003593 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6122 00003596 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6123 00003599 50                      	push rax
  6124 0000359A 488B4528                	mov rax, PARAM(1)	; param s
  6125 0000359E 50                      	push rax
  6126 0000359F 6A01                    	push 1	; arg count
  6127 000035A1 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  6128 000035A9 803805                  	cmp byte [rax], T_undefined
  6129 000035AC 0F8449200100            	je L_error_fvar_undefined
  6130 000035B2 803804                  	cmp byte [rax], T_closure
  6131 000035B5 0F85C4200100            	jne L_error_non_closure
  6132 000035BB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6133 000035BE FF5009                  	call SOB_CLOSURE_CODE(rax)
  6134 000035C1 50                      	push rax
  6135 000035C2 6A02                    	push 2	; arg count
  6136 000035C4 488B4510                	mov rax, ENV
  6137 000035C8 488B00                  	mov rax, qword [rax + 8 * 0]
  6138 000035CB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6139 000035CE 488B00                  	mov rax, qword [rax]
  6140 000035D1 803804                  	cmp byte [rax], T_closure
  6141 000035D4 0F85A5200100            	jne L_error_non_closure
  6142 000035DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  6143 000035DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6144 000035E0 50                      	push rax
  6145 000035E1 488B4520                	mov rax, PARAM(0)	; param f
  6146 000035E5 50                      	push rax
  6147 000035E6 6A02                    	push 2	; arg count
  6148 000035E8 488B0425[B90F0000]      	mov rax, qword [free_var_29]	; free var __bin-apply
  6149 000035F0 803805                  	cmp byte [rax], T_undefined
  6150 000035F3 0F8402200100            	je L_error_fvar_undefined
  6151 000035F9 803804                  	cmp byte [rax], T_closure
  6152 000035FC 0F857D200100            	jne L_error_non_closure
  6153 00003602 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6154                                  
  6155                                  	; recycling the current frame
  6156 00003605 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6157 00003608 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6158 0000360B B906000000              	mov rcx, 2 + 4
  6159 00003610 488B5D18                	mov rbx, COUNT
  6160 00003614 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6161 00003619 488D55F8                	lea rdx, [rbp - 8 * 1]
  6162                                  .L_tc_recycle_frame_loop_06e3:
  6163 0000361D 4883F900                	cmp rcx, 0
  6164 00003621 7413                    	je .L_tc_recycle_frame_done_06e3
  6165 00003623 488B32                  	mov rsi, qword [rdx]
  6166 00003626 488933                  	mov qword [rbx], rsi
  6167 00003629 48FFC9                  	dec rcx
  6168 0000362C 4883EB08                	sub rbx, 8 * 1
  6169 00003630 4883EA08                	sub rdx, 8 * 1
  6170 00003634 EBE7                    	jmp .L_tc_recycle_frame_loop_06e3
  6171                                  .L_tc_recycle_frame_done_06e3:
  6172 00003636 488D6308                	lea rsp, [rbx + 8 * 1]
  6173 0000363A 5D                      	pop rbp	; the proc will restore it!
  6174 0000363B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6175 0000363E C9                      	leave
  6176 0000363F C22000                  	ret AND_KILL_FRAME(2)
  6177                                  .L_lambda_opt_end_00b2:	; new closure is in rax
  6178 00003642 C9                      	leave
  6179 00003643 C21800                  	ret AND_KILL_FRAME(1)
  6180                                  .L_lambda_simple_end_0546:	; new closure is in rax
  6181 00003646 803804                  	cmp byte [rax], T_closure
  6182 00003649 0F8530200100            	jne L_error_non_closure
  6183 0000364F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6184 00003652 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6185 00003655 48890425[E7140000]      	mov qword [free_var_107], rax
  6186 0000365D 48B8-                   	mov rax, sob_void
  6186 0000365F [0000000000000000] 
  6187                                  
  6188 00003667 4889C7                  	mov rdi, rax
  6189 0000366A E8CB210100              	call print_sexpr_if_not_void
  6190                                  
  6191 0000366F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6192 00003674 E8AF200100              	call malloc
  6193 00003679 50                      	push rax
  6194 0000367A BF00000000              	mov rdi, 8 * 0	; new rib
  6195 0000367F E8A4200100              	call malloc
  6196 00003684 50                      	push rax
  6197 00003685 BF08000000              	mov rdi, 8 * 1	; extended env
  6198 0000368A E899200100              	call malloc
  6199 0000368F 488B7D10                	mov rdi, ENV
  6200 00003693 BE00000000              	mov rsi, 0
  6201 00003698 BA01000000              	mov rdx, 1
  6202                                  .L_lambda_opt_env_loop_00b3:	; ext_env[i + 1] <-- env[i]
  6203 0000369D 4883FE00                	cmp rsi, 0
  6204 000036A1 7410                    	je .L_lambda_opt_env_end_00b3
  6205 000036A3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6206 000036A7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6207 000036AB 48FFC6                  	inc rsi
  6208 000036AE 48FFC2                  	inc rdx
  6209 000036B1 EBEA                    	jmp .L_lambda_opt_env_loop_00b3
  6210                                  .L_lambda_opt_env_end_00b3:
  6211 000036B3 5B                      	pop rbx
  6212 000036B4 BE00000000              	mov rsi, 0
  6213                                  .L_lambda_opt_params_loop_00b3:	; copy params
  6214 000036B9 4883FE00                	cmp rsi, 0
  6215 000036BD 740E                    	je .L_lambda_opt_params_end_00b3
  6216 000036BF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6217 000036C4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6218 000036C8 48FFC6                  	inc rsi
  6219 000036CB EBEC                    	jmp .L_lambda_opt_params_loop_00b3
  6220                                  .L_lambda_opt_params_end_00b3:
  6221 000036CD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6222 000036D0 4889C3                  	mov rbx, rax
  6223 000036D3 58                      	pop rax
  6224 000036D4 C60004                  	mov byte [rax], T_closure
  6225 000036D7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6226 000036DB 48C74009[E8360000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b3
  6227 000036E3 E943040000              	jmp .L_lambda_opt_end_00b3
  6228                                  .L_lambda_opt_code_00b3:	; lambda-simple body
  6229 000036E8 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  6230 000036EE 740D                    	je .L_lambda_opt_arity_check_exact_00b3 ;	 if equal, go to exact arity
  6231 000036F0 7F42                    	jg .L_lambda_opt_arity_check_more_00b3 ;	 if greater than, go to arity more
  6232 000036F2 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  6233 000036F6 6A01                     	push 1
  6234 000036F8 E9F81F0100              	jmp L_error_incorrect_arity_opt
  6235                                  	.L_lambda_opt_arity_check_exact_00b3:
  6236 000036FD 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  6237 00003702 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  6238 00003707 4883EC08                	sub rsp, 8
  6239 0000370B 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  6240                                  	.L_lambda_opt_exact_shifting_loop_00b3:
  6241 0000370F 488B5108                	mov rdx, [rcx + 8]
  6242 00003713 488911                  	mov [rcx], rdx
  6243 00003716 4883C108                	add rcx, 8
  6244 0000371A 4839CB                  	cmp rbx, rcx
  6245 0000371D 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00b3
  6246                                  	.L_lambda_opt_exact_shifting_loop_end_00b3:
  6247 0000371F 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  6248 00003726 4883C001                	add rax, 1 ; 	arg count += 1
  6249 0000372A 4889442410              	mov qword [rsp + 8 * 2], rax
  6250 0000372F E987000000              	jmp .L_lambda_opt_stack_adjusted_00b3
  6251                                  	.L_lambda_opt_arity_check_more_00b3:
  6252 00003734 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  6252 00003736 [0100000000000000] 
  6253 0000373E 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  6254 00003744 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00b3
  6255                                  	.L_lambda_opt_stack_shrink_loop_00b3:
  6256 00003746 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6257 0000374B E8D81F0100              	call malloc ;	 allocated memory for the optional scheme list
  6258 00003750 C60021                  	mov byte[rax], T_pair ;	 set type pair
  6259 00003753 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6260 00003757 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  6261 0000375A 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  6262 0000375F 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  6263 00003764 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  6264 00003768 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  6265                                  	.L_lambda_opt_more_shifting_loop_00b3:
  6266 0000376D 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  6267 00003770 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  6268 00003774 4883EB08                	sub rbx, 8 
  6269 00003778 4839DC                  	cmp rsp, rbx
  6270 0000377B 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00b3
  6271                                  	.L_lambda_opt_more_shifting_loop_end_00b3:
  6272 0000377D 4883C408                	add rsp, 8 ;	 update rsp
  6273 00003781 488B5C2410              	mov rbx, [rsp + 8 * 2]
  6274 00003786 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  6275 0000378A 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  6276 0000378F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6277 00003795 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00b3
  6278                                  	.L_lambda_opt_stack_shrink_loop_exit_00b3:
  6279 00003797 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  6280 0000379C 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  6281 000037A1 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6282 000037A6 E87D1F0100              	call malloc ;	 allocated memory for the optional scheme list
  6283 000037AB C60021                  	mov byte[rax], T_pair ;	 set type pair
  6284 000037AE 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6285 000037B2 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  6286 000037B6 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  6287                                  	.L_lambda_opt_stack_adjusted_00b3:
  6288 000037BB C8000000                	enter 0, 0
  6289                                  	; preparing a tail-call
  6290 000037BF 48B8-                   	mov rax, L_constants + 1881
  6290 000037C1 [5907000000000000] 
  6291 000037C9 50                      	push rax
  6292 000037CA 6A01                    	push 1	; arg count
  6293 000037CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6294 000037D1 E8521F0100              	call malloc
  6295 000037D6 50                      	push rax
  6296 000037D7 BF10000000              	mov rdi, 8 * 2	; new rib
  6297 000037DC E8471F0100              	call malloc
  6298 000037E1 50                      	push rax
  6299 000037E2 BF10000000              	mov rdi, 8 * 2	; extended env
  6300 000037E7 E83C1F0100              	call malloc
  6301 000037EC 488B7D10                	mov rdi, ENV
  6302 000037F0 BE00000000              	mov rsi, 0
  6303 000037F5 BA01000000              	mov rdx, 1
  6304                                  .L_lambda_simple_env_loop_0548:	; ext_env[i + 1] <-- env[i]
  6305 000037FA 4883FE01                	cmp rsi, 1
  6306 000037FE 7410                    	je .L_lambda_simple_env_end_0548
  6307 00003800 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6308 00003804 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6309 00003808 48FFC6                  	inc rsi
  6310 0000380B 48FFC2                  	inc rdx
  6311 0000380E EBEA                    	jmp .L_lambda_simple_env_loop_0548
  6312                                  .L_lambda_simple_env_end_0548:
  6313 00003810 5B                      	pop rbx
  6314 00003811 BE00000000              	mov rsi, 0
  6315                                  .L_lambda_simple_params_loop_0548:	; copy params
  6316 00003816 4883FE02                	cmp rsi, 2
  6317 0000381A 740E                    	je .L_lambda_simple_params_end_0548
  6318 0000381C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6319 00003821 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6320 00003825 48FFC6                  	inc rsi
  6321 00003828 EBEC                    	jmp .L_lambda_simple_params_loop_0548
  6322                                  .L_lambda_simple_params_end_0548:
  6323 0000382A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6324 0000382D 4889C3                  	mov rbx, rax
  6325 00003830 58                      	pop rax
  6326 00003831 C60004                  	mov byte [rax], T_closure
  6327 00003834 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6328 00003838 48C74009[45380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0548
  6329 00003840 E99D020000              	jmp .L_lambda_simple_end_0548
  6330                                  .L_lambda_simple_code_0548:	; lambda-simple body
  6331 00003845 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6332 0000384B 740B                    	je .L_lambda_simple_arity_check_ok_0548
  6333 0000384D FF742410                	push qword [rsp + 8 * 2]
  6334 00003851 6A01                    	push 1
  6335 00003853 E9891E0100              	jmp L_error_incorrect_arity_simple
  6336                                  .L_lambda_simple_arity_check_ok_0548:
  6337 00003858 C8000000                	enter 0, 0
  6338                                  
  6339 0000385C BF08000000              	mov rdi, 8
  6340 00003861 E8C21E0100              	call malloc
  6341 00003866 488B5D20                	mov rbx, PARAM(0)	; param loop
  6342 0000386A 488918                  	mov [rax], rbx	; box loop
  6343 0000386D 48894520                	mov PARAM(0), rax	;replace param loop with box
  6344 00003871 48B8-                   	mov rax, sob_void
  6344 00003873 [0000000000000000] 
  6345                                  
  6346 0000387B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6347 00003880 E8A31E0100              	call malloc
  6348 00003885 50                      	push rax
  6349 00003886 BF08000000              	mov rdi, 8 * 1	; new rib
  6350 0000388B E8981E0100              	call malloc
  6351 00003890 50                      	push rax
  6352 00003891 BF18000000              	mov rdi, 8 * 3	; extended env
  6353 00003896 E88D1E0100              	call malloc
  6354 0000389B 488B7D10                	mov rdi, ENV
  6355 0000389F BE00000000              	mov rsi, 0
  6356 000038A4 BA01000000              	mov rdx, 1
  6357                                  .L_lambda_simple_env_loop_0549:	; ext_env[i + 1] <-- env[i]
  6358 000038A9 4883FE02                	cmp rsi, 2
  6359 000038AD 7410                    	je .L_lambda_simple_env_end_0549
  6360 000038AF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6361 000038B3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6362 000038B7 48FFC6                  	inc rsi
  6363 000038BA 48FFC2                  	inc rdx
  6364 000038BD EBEA                    	jmp .L_lambda_simple_env_loop_0549
  6365                                  .L_lambda_simple_env_end_0549:
  6366 000038BF 5B                      	pop rbx
  6367 000038C0 BE00000000              	mov rsi, 0
  6368                                  .L_lambda_simple_params_loop_0549:	; copy params
  6369 000038C5 4883FE01                	cmp rsi, 1
  6370 000038C9 740E                    	je .L_lambda_simple_params_end_0549
  6371 000038CB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6372 000038D0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6373 000038D4 48FFC6                  	inc rsi
  6374 000038D7 EBEC                    	jmp .L_lambda_simple_params_loop_0549
  6375                                  .L_lambda_simple_params_end_0549:
  6376 000038D9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6377 000038DC 4889C3                  	mov rbx, rax
  6378 000038DF 58                      	pop rax
  6379 000038E0 C60004                  	mov byte [rax], T_closure
  6380 000038E3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6381 000038E7 48C74009[F4380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0549
  6382 000038EF E97F010000              	jmp .L_lambda_simple_end_0549
  6383                                  .L_lambda_simple_code_0549:	; lambda-simple body
  6384 000038F4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6385 000038FA 740B                    	je .L_lambda_simple_arity_check_ok_0549
  6386 000038FC FF742410                	push qword [rsp + 8 * 2]
  6387 00003900 6A01                    	push 1
  6388 00003902 E9DA1D0100              	jmp L_error_incorrect_arity_simple
  6389                                  .L_lambda_simple_arity_check_ok_0549:
  6390 00003907 C8000000                	enter 0, 0
  6391 0000390B 488B4520                	mov rax, PARAM(0)	; param s
  6392 0000390F 50                      	push rax
  6393 00003910 6A01                    	push 1	; arg count
  6394 00003912 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  6395 0000391A 803805                  	cmp byte [rax], T_undefined
  6396 0000391D 0F84D81C0100            	je L_error_fvar_undefined
  6397 00003923 803804                  	cmp byte [rax], T_closure
  6398 00003926 0F85531D0100            	jne L_error_non_closure
  6399 0000392C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6400 0000392F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6401 00003932 50                      	push rax
  6402 00003933 6A01                    	push 1	; arg count
  6403 00003935 488B0425[DD0D0000]      	mov rax, qword [free_var_1]	; free var pair?
  6404 0000393D 803805                  	cmp byte [rax], T_undefined
  6405 00003940 0F84B51C0100            	je L_error_fvar_undefined
  6406 00003946 803804                  	cmp byte [rax], T_closure
  6407 00003949 0F85301D0100            	jne L_error_non_closure
  6408 0000394F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6409 00003952 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6410                                  
  6411 00003955 483D[02000000]          	cmp rax, sob_boolean_false
  6412 0000395B 0F8404010000            	je .L_if_else_03d2
  6413 00003961 488B4520                	mov rax, PARAM(0)	; param s
  6414 00003965 50                      	push rax
  6415 00003966 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  6416 0000396E 803805                  	cmp byte [rax], T_undefined
  6417 00003971 0F84841C0100            	je L_error_fvar_undefined
  6418 00003977 50                      	push rax
  6419 00003978 6A02                    	push 2	; arg count
  6420 0000397A 488B0425[09150000]      	mov rax, qword [free_var_109]	; free var map
  6421 00003982 803805                  	cmp byte [rax], T_undefined
  6422 00003985 0F84701C0100            	je L_error_fvar_undefined
  6423 0000398B 803804                  	cmp byte [rax], T_closure
  6424 0000398E 0F85EB1C0100            	jne L_error_non_closure
  6425 00003994 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6426 00003997 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6427 0000399A 50                      	push rax
  6428 0000399B 488B4510                	mov rax, ENV
  6429 0000399F 488B4008                	mov rax, qword [rax + 8 * 1]
  6430 000039A3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6431 000039A6 50                      	push rax
  6432 000039A7 6A02                    	push 2	; arg count
  6433 000039A9 488B0425[E7140000]      	mov rax, qword [free_var_107]	; free var apply
  6434 000039B1 803805                  	cmp byte [rax], T_undefined
  6435 000039B4 0F84411C0100            	je L_error_fvar_undefined
  6436 000039BA 803804                  	cmp byte [rax], T_closure
  6437 000039BD 0F85BC1C0100            	jne L_error_non_closure
  6438 000039C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6439 000039C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6440 000039C9 483D[02000000]          	cmp rax, sob_boolean_false
  6441 000039CF 0F858E000000            	jne .L_or_end_005e
  6442                                  	; preparing a tail-call
  6443 000039D5 488B4520                	mov rax, PARAM(0)	; param s
  6444 000039D9 50                      	push rax
  6445 000039DA 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  6446 000039E2 803805                  	cmp byte [rax], T_undefined
  6447 000039E5 0F84101C0100            	je L_error_fvar_undefined
  6448 000039EB 50                      	push rax
  6449 000039EC 6A02                    	push 2	; arg count
  6450 000039EE 488B0425[09150000]      	mov rax, qword [free_var_109]	; free var map
  6451 000039F6 803805                  	cmp byte [rax], T_undefined
  6452 000039F9 0F84FC1B0100            	je L_error_fvar_undefined
  6453 000039FF 803804                  	cmp byte [rax], T_closure
  6454 00003A02 0F85771C0100            	jne L_error_non_closure
  6455 00003A08 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6456 00003A0B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6457 00003A0E 50                      	push rax
  6458 00003A0F 6A01                    	push 1	; arg count
  6459 00003A11 488B4510                	mov rax, ENV
  6460 00003A15 488B00                  	mov rax, qword [rax + 8 * 0]
  6461 00003A18 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6462 00003A1B 488B00                  	mov rax, qword [rax]
  6463 00003A1E 803804                  	cmp byte [rax], T_closure
  6464 00003A21 0F85581C0100            	jne L_error_non_closure
  6465 00003A27 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6466                                  
  6467                                  	; recycling the current frame
  6468 00003A2A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6469 00003A2D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6470 00003A30 B905000000              	mov rcx, 1 + 4
  6471 00003A35 488B5D18                	mov rbx, COUNT
  6472 00003A39 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6473 00003A3E 488D55F8                	lea rdx, [rbp - 8 * 1]
  6474                                  .L_tc_recycle_frame_loop_06e4:
  6475 00003A42 4883F900                	cmp rcx, 0
  6476 00003A46 7413                    	je .L_tc_recycle_frame_done_06e4
  6477 00003A48 488B32                  	mov rsi, qword [rdx]
  6478 00003A4B 488933                  	mov qword [rbx], rsi
  6479 00003A4E 48FFC9                  	dec rcx
  6480 00003A51 4883EB08                	sub rbx, 8 * 1
  6481 00003A55 4883EA08                	sub rdx, 8 * 1
  6482 00003A59 EBE7                    	jmp .L_tc_recycle_frame_loop_06e4
  6483                                  .L_tc_recycle_frame_done_06e4:
  6484 00003A5B 488D6308                	lea rsp, [rbx + 8 * 1]
  6485 00003A5F 5D                      	pop rbp	; the proc will restore it!
  6486 00003A60 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6487                                  .L_or_end_005e:
  6488                                  
  6489 00003A63 EB0A                    	jmp .L_if_end_03d2
  6490                                  
  6491                                  	.L_if_else_03d2:
  6492 00003A65 48B8-                   	mov rax, L_constants + 2
  6492 00003A67 [0200000000000000] 
  6493                                  
  6494                                  	.L_if_end_03d2:
  6495 00003A6F C9                      	leave
  6496 00003A70 C21800                  	ret AND_KILL_FRAME(1)
  6497                                  .L_lambda_simple_end_0549:	; new closure is in rax
  6498                                  
  6499 00003A73 50                      	push rax
  6500 00003A74 488B4520                	mov rax, PARAM(0)	; param loop
  6501                                  
  6502 00003A78 8F00                    	pop qword[rax]
  6503 00003A7A 48B8-                   	mov rax, sob_void
  6503 00003A7C [0000000000000000] 
  6504                                  
  6505                                  	; preparing a tail-call
  6506 00003A84 488B4510                	mov rax, ENV
  6507 00003A88 488B00                  	mov rax, qword [rax + 8 * 0]
  6508 00003A8B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6509 00003A8F 50                      	push rax
  6510 00003A90 6A01                    	push 1	; arg count
  6511 00003A92 488B4520                	mov rax, PARAM(0)	; param loop
  6512 00003A96 488B00                  	mov rax, qword [rax]
  6513 00003A99 803804                  	cmp byte [rax], T_closure
  6514 00003A9C 0F85DD1B0100            	jne L_error_non_closure
  6515 00003AA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6516                                  
  6517                                  	; recycling the current frame
  6518 00003AA5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6519 00003AA8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6520 00003AAB B905000000              	mov rcx, 1 + 4
  6521 00003AB0 488B5D18                	mov rbx, COUNT
  6522 00003AB4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6523 00003AB9 488D55F8                	lea rdx, [rbp - 8 * 1]
  6524                                  .L_tc_recycle_frame_loop_06e5:
  6525 00003ABD 4883F900                	cmp rcx, 0
  6526 00003AC1 7413                    	je .L_tc_recycle_frame_done_06e5
  6527 00003AC3 488B32                  	mov rsi, qword [rdx]
  6528 00003AC6 488933                  	mov qword [rbx], rsi
  6529 00003AC9 48FFC9                  	dec rcx
  6530 00003ACC 4883EB08                	sub rbx, 8 * 1
  6531 00003AD0 4883EA08                	sub rdx, 8 * 1
  6532 00003AD4 EBE7                    	jmp .L_tc_recycle_frame_loop_06e5
  6533                                  .L_tc_recycle_frame_done_06e5:
  6534 00003AD6 488D6308                	lea rsp, [rbx + 8 * 1]
  6535 00003ADA 5D                      	pop rbp	; the proc will restore it!
  6536 00003ADB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6537 00003ADE C9                      	leave
  6538 00003ADF C21800                  	ret AND_KILL_FRAME(1)
  6539                                  .L_lambda_simple_end_0548:	; new closure is in rax
  6540 00003AE2 803804                  	cmp byte [rax], T_closure
  6541 00003AE5 0F85941B0100            	jne L_error_non_closure
  6542 00003AEB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6543                                  
  6544                                  	; recycling the current frame
  6545 00003AEE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6546 00003AF1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6547 00003AF4 B905000000              	mov rcx, 1 + 4
  6548 00003AF9 488B5D18                	mov rbx, COUNT
  6549 00003AFD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6550 00003B02 488D55F8                	lea rdx, [rbp - 8 * 1]
  6551                                  .L_tc_recycle_frame_loop_06e6:
  6552 00003B06 4883F900                	cmp rcx, 0
  6553 00003B0A 7413                    	je .L_tc_recycle_frame_done_06e6
  6554 00003B0C 488B32                  	mov rsi, qword [rdx]
  6555 00003B0F 488933                  	mov qword [rbx], rsi
  6556 00003B12 48FFC9                  	dec rcx
  6557 00003B15 4883EB08                	sub rbx, 8 * 1
  6558 00003B19 4883EA08                	sub rdx, 8 * 1
  6559 00003B1D EBE7                    	jmp .L_tc_recycle_frame_loop_06e6
  6560                                  .L_tc_recycle_frame_done_06e6:
  6561 00003B1F 488D6308                	lea rsp, [rbx + 8 * 1]
  6562 00003B23 5D                      	pop rbp	; the proc will restore it!
  6563 00003B24 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6564 00003B27 C9                      	leave
  6565 00003B28 C22000                  	ret AND_KILL_FRAME(2)
  6566                                  .L_lambda_opt_end_00b3:	; new closure is in rax
  6567 00003B2B 48890425[F8140000]      	mov qword [free_var_108], rax
  6568 00003B33 48B8-                   	mov rax, sob_void
  6568 00003B35 [0000000000000000] 
  6569                                  
  6570 00003B3D 4889C7                  	mov rdi, rax
  6571 00003B40 E8F51C0100              	call print_sexpr_if_not_void
  6572                                  
  6573 00003B45 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6574 00003B4A E8D91B0100              	call malloc
  6575 00003B4F 50                      	push rax
  6576 00003B50 BF00000000              	mov rdi, 8 * 0	; new rib
  6577 00003B55 E8CE1B0100              	call malloc
  6578 00003B5A 50                      	push rax
  6579 00003B5B BF08000000              	mov rdi, 8 * 1	; extended env
  6580 00003B60 E8C31B0100              	call malloc
  6581 00003B65 488B7D10                	mov rdi, ENV
  6582 00003B69 BE00000000              	mov rsi, 0
  6583 00003B6E BA01000000              	mov rdx, 1
  6584                                  .L_lambda_opt_env_loop_00b4:	; ext_env[i + 1] <-- env[i]
  6585 00003B73 4883FE00                	cmp rsi, 0
  6586 00003B77 7410                    	je .L_lambda_opt_env_end_00b4
  6587 00003B79 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6588 00003B7D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6589 00003B81 48FFC6                  	inc rsi
  6590 00003B84 48FFC2                  	inc rdx
  6591 00003B87 EBEA                    	jmp .L_lambda_opt_env_loop_00b4
  6592                                  .L_lambda_opt_env_end_00b4:
  6593 00003B89 5B                      	pop rbx
  6594 00003B8A BE00000000              	mov rsi, 0
  6595                                  .L_lambda_opt_params_loop_00b4:	; copy params
  6596 00003B8F 4883FE00                	cmp rsi, 0
  6597 00003B93 740E                    	je .L_lambda_opt_params_end_00b4
  6598 00003B95 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6599 00003B9A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6600 00003B9E 48FFC6                  	inc rsi
  6601 00003BA1 EBEC                    	jmp .L_lambda_opt_params_loop_00b4
  6602                                  .L_lambda_opt_params_end_00b4:
  6603 00003BA3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6604 00003BA6 4889C3                  	mov rbx, rax
  6605 00003BA9 58                      	pop rax
  6606 00003BAA C60004                  	mov byte [rax], T_closure
  6607 00003BAD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6608 00003BB1 48C74009[BE3B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b4
  6609 00003BB9 E943040000              	jmp .L_lambda_opt_end_00b4
  6610                                  .L_lambda_opt_code_00b4:	; lambda-simple body
  6611 00003BBE 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  6612 00003BC4 740D                    	je .L_lambda_opt_arity_check_exact_00b4 ;	 if equal, go to exact arity
  6613 00003BC6 7F42                    	jg .L_lambda_opt_arity_check_more_00b4 ;	 if greater than, go to arity more
  6614 00003BC8 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  6615 00003BCC 6A01                     	push 1
  6616 00003BCE E9221B0100              	jmp L_error_incorrect_arity_opt
  6617                                  	.L_lambda_opt_arity_check_exact_00b4:
  6618 00003BD3 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  6619 00003BD8 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  6620 00003BDD 4883EC08                	sub rsp, 8
  6621 00003BE1 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  6622                                  	.L_lambda_opt_exact_shifting_loop_00b4:
  6623 00003BE5 488B5108                	mov rdx, [rcx + 8]
  6624 00003BE9 488911                  	mov [rcx], rdx
  6625 00003BEC 4883C108                	add rcx, 8
  6626 00003BF0 4839CB                  	cmp rbx, rcx
  6627 00003BF3 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00b4
  6628                                  	.L_lambda_opt_exact_shifting_loop_end_00b4:
  6629 00003BF5 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  6630 00003BFC 4883C001                	add rax, 1 ; 	arg count += 1
  6631 00003C00 4889442410              	mov qword [rsp + 8 * 2], rax
  6632 00003C05 E987000000              	jmp .L_lambda_opt_stack_adjusted_00b4
  6633                                  	.L_lambda_opt_arity_check_more_00b4:
  6634 00003C0A 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  6634 00003C0C [0100000000000000] 
  6635 00003C14 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  6636 00003C1A 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00b4
  6637                                  	.L_lambda_opt_stack_shrink_loop_00b4:
  6638 00003C1C BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6639 00003C21 E8021B0100              	call malloc ;	 allocated memory for the optional scheme list
  6640 00003C26 C60021                  	mov byte[rax], T_pair ;	 set type pair
  6641 00003C29 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6642 00003C2D 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  6643 00003C30 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  6644 00003C35 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  6645 00003C3A 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  6646 00003C3E 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  6647                                  	.L_lambda_opt_more_shifting_loop_00b4:
  6648 00003C43 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  6649 00003C46 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  6650 00003C4A 4883EB08                	sub rbx, 8 
  6651 00003C4E 4839DC                  	cmp rsp, rbx
  6652 00003C51 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00b4
  6653                                  	.L_lambda_opt_more_shifting_loop_end_00b4:
  6654 00003C53 4883C408                	add rsp, 8 ;	 update rsp
  6655 00003C57 488B5C2410              	mov rbx, [rsp + 8 * 2]
  6656 00003C5C 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  6657 00003C60 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  6658 00003C65 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6659 00003C6B 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00b4
  6660                                  	.L_lambda_opt_stack_shrink_loop_exit_00b4:
  6661 00003C6D 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  6662 00003C72 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  6663 00003C77 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  6664 00003C7C E8A71A0100              	call malloc ;	 allocated memory for the optional scheme list
  6665 00003C81 C60021                  	mov byte[rax], T_pair ;	 set type pair
  6666 00003C84 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  6667 00003C88 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  6668 00003C8C 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  6669                                  	.L_lambda_opt_stack_adjusted_00b4:
  6670 00003C91 C8000000                	enter 0, 0
  6671                                  	; preparing a tail-call
  6672 00003C95 48B8-                   	mov rax, L_constants + 1881
  6672 00003C97 [5907000000000000] 
  6673 00003C9F 50                      	push rax
  6674 00003CA0 6A01                    	push 1	; arg count
  6675 00003CA2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6676 00003CA7 E87C1A0100              	call malloc
  6677 00003CAC 50                      	push rax
  6678 00003CAD BF10000000              	mov rdi, 8 * 2	; new rib
  6679 00003CB2 E8711A0100              	call malloc
  6680 00003CB7 50                      	push rax
  6681 00003CB8 BF10000000              	mov rdi, 8 * 2	; extended env
  6682 00003CBD E8661A0100              	call malloc
  6683 00003CC2 488B7D10                	mov rdi, ENV
  6684 00003CC6 BE00000000              	mov rsi, 0
  6685 00003CCB BA01000000              	mov rdx, 1
  6686                                  .L_lambda_simple_env_loop_054a:	; ext_env[i + 1] <-- env[i]
  6687 00003CD0 4883FE01                	cmp rsi, 1
  6688 00003CD4 7410                    	je .L_lambda_simple_env_end_054a
  6689 00003CD6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6690 00003CDA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6691 00003CDE 48FFC6                  	inc rsi
  6692 00003CE1 48FFC2                  	inc rdx
  6693 00003CE4 EBEA                    	jmp .L_lambda_simple_env_loop_054a
  6694                                  .L_lambda_simple_env_end_054a:
  6695 00003CE6 5B                      	pop rbx
  6696 00003CE7 BE00000000              	mov rsi, 0
  6697                                  .L_lambda_simple_params_loop_054a:	; copy params
  6698 00003CEC 4883FE02                	cmp rsi, 2
  6699 00003CF0 740E                    	je .L_lambda_simple_params_end_054a
  6700 00003CF2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6701 00003CF7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6702 00003CFB 48FFC6                  	inc rsi
  6703 00003CFE EBEC                    	jmp .L_lambda_simple_params_loop_054a
  6704                                  .L_lambda_simple_params_end_054a:
  6705 00003D00 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6706 00003D03 4889C3                  	mov rbx, rax
  6707 00003D06 58                      	pop rax
  6708 00003D07 C60004                  	mov byte [rax], T_closure
  6709 00003D0A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6710 00003D0E 48C74009[1B3D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_054a
  6711 00003D16 E99D020000              	jmp .L_lambda_simple_end_054a
  6712                                  .L_lambda_simple_code_054a:	; lambda-simple body
  6713 00003D1B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6714 00003D21 740B                    	je .L_lambda_simple_arity_check_ok_054a
  6715 00003D23 FF742410                	push qword [rsp + 8 * 2]
  6716 00003D27 6A01                    	push 1
  6717 00003D29 E9B3190100              	jmp L_error_incorrect_arity_simple
  6718                                  .L_lambda_simple_arity_check_ok_054a:
  6719 00003D2E C8000000                	enter 0, 0
  6720                                  
  6721 00003D32 BF08000000              	mov rdi, 8
  6722 00003D37 E8EC190100              	call malloc
  6723 00003D3C 488B5D20                	mov rbx, PARAM(0)	; param loop
  6724 00003D40 488918                  	mov [rax], rbx	; box loop
  6725 00003D43 48894520                	mov PARAM(0), rax	;replace param loop with box
  6726 00003D47 48B8-                   	mov rax, sob_void
  6726 00003D49 [0000000000000000] 
  6727                                  
  6728 00003D51 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6729 00003D56 E8CD190100              	call malloc
  6730 00003D5B 50                      	push rax
  6731 00003D5C BF08000000              	mov rdi, 8 * 1	; new rib
  6732 00003D61 E8C2190100              	call malloc
  6733 00003D66 50                      	push rax
  6734 00003D67 BF18000000              	mov rdi, 8 * 3	; extended env
  6735 00003D6C E8B7190100              	call malloc
  6736 00003D71 488B7D10                	mov rdi, ENV
  6737 00003D75 BE00000000              	mov rsi, 0
  6738 00003D7A BA01000000              	mov rdx, 1
  6739                                  .L_lambda_simple_env_loop_054b:	; ext_env[i + 1] <-- env[i]
  6740 00003D7F 4883FE02                	cmp rsi, 2
  6741 00003D83 7410                    	je .L_lambda_simple_env_end_054b
  6742 00003D85 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6743 00003D89 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6744 00003D8D 48FFC6                  	inc rsi
  6745 00003D90 48FFC2                  	inc rdx
  6746 00003D93 EBEA                    	jmp .L_lambda_simple_env_loop_054b
  6747                                  .L_lambda_simple_env_end_054b:
  6748 00003D95 5B                      	pop rbx
  6749 00003D96 BE00000000              	mov rsi, 0
  6750                                  .L_lambda_simple_params_loop_054b:	; copy params
  6751 00003D9B 4883FE01                	cmp rsi, 1
  6752 00003D9F 740E                    	je .L_lambda_simple_params_end_054b
  6753 00003DA1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6754 00003DA6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6755 00003DAA 48FFC6                  	inc rsi
  6756 00003DAD EBEC                    	jmp .L_lambda_simple_params_loop_054b
  6757                                  .L_lambda_simple_params_end_054b:
  6758 00003DAF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6759 00003DB2 4889C3                  	mov rbx, rax
  6760 00003DB5 58                      	pop rax
  6761 00003DB6 C60004                  	mov byte [rax], T_closure
  6762 00003DB9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6763 00003DBD 48C74009[CA3D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_054b
  6764 00003DC5 E97F010000              	jmp .L_lambda_simple_end_054b
  6765                                  .L_lambda_simple_code_054b:	; lambda-simple body
  6766 00003DCA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6767 00003DD0 740B                    	je .L_lambda_simple_arity_check_ok_054b
  6768 00003DD2 FF742410                	push qword [rsp + 8 * 2]
  6769 00003DD6 6A01                    	push 1
  6770 00003DD8 E904190100              	jmp L_error_incorrect_arity_simple
  6771                                  .L_lambda_simple_arity_check_ok_054b:
  6772 00003DDD C8000000                	enter 0, 0
  6773 00003DE1 488B4520                	mov rax, PARAM(0)	; param s
  6774 00003DE5 50                      	push rax
  6775 00003DE6 6A01                    	push 1	; arg count
  6776 00003DE8 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  6777 00003DF0 803805                  	cmp byte [rax], T_undefined
  6778 00003DF3 0F8402180100            	je L_error_fvar_undefined
  6779 00003DF9 803804                  	cmp byte [rax], T_closure
  6780 00003DFC 0F857D180100            	jne L_error_non_closure
  6781 00003E02 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6782 00003E05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6783 00003E08 50                      	push rax
  6784 00003E09 6A01                    	push 1	; arg count
  6785 00003E0B 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
  6786 00003E13 803805                  	cmp byte [rax], T_undefined
  6787 00003E16 0F84DF170100            	je L_error_fvar_undefined
  6788 00003E1C 803804                  	cmp byte [rax], T_closure
  6789 00003E1F 0F855A180100            	jne L_error_non_closure
  6790 00003E25 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6791 00003E28 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6792 00003E2B 483D[02000000]          	cmp rax, sob_boolean_false
  6793 00003E31 0F850E010000            	jne .L_or_end_005f
  6794 00003E37 488B4520                	mov rax, PARAM(0)	; param s
  6795 00003E3B 50                      	push rax
  6796 00003E3C 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  6797 00003E44 803805                  	cmp byte [rax], T_undefined
  6798 00003E47 0F84AE170100            	je L_error_fvar_undefined
  6799 00003E4D 50                      	push rax
  6800 00003E4E 6A02                    	push 2	; arg count
  6801 00003E50 488B0425[09150000]      	mov rax, qword [free_var_109]	; free var map
  6802 00003E58 803805                  	cmp byte [rax], T_undefined
  6803 00003E5B 0F849A170100            	je L_error_fvar_undefined
  6804 00003E61 803804                  	cmp byte [rax], T_closure
  6805 00003E64 0F8515180100            	jne L_error_non_closure
  6806 00003E6A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6807 00003E6D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6808 00003E70 50                      	push rax
  6809 00003E71 488B4510                	mov rax, ENV
  6810 00003E75 488B4008                	mov rax, qword [rax + 8 * 1]
  6811 00003E79 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6812 00003E7C 50                      	push rax
  6813 00003E7D 6A02                    	push 2	; arg count
  6814 00003E7F 488B0425[E7140000]      	mov rax, qword [free_var_107]	; free var apply
  6815 00003E87 803805                  	cmp byte [rax], T_undefined
  6816 00003E8A 0F846B170100            	je L_error_fvar_undefined
  6817 00003E90 803804                  	cmp byte [rax], T_closure
  6818 00003E93 0F85E6170100            	jne L_error_non_closure
  6819 00003E99 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6820 00003E9C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6821                                  
  6822 00003E9F 483D[02000000]          	cmp rax, sob_boolean_false
  6823 00003EA5 0F8490000000            	je .L_if_else_03d3
  6824                                  	; preparing a tail-call
  6825 00003EAB 488B4520                	mov rax, PARAM(0)	; param s
  6826 00003EAF 50                      	push rax
  6827 00003EB0 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  6828 00003EB8 803805                  	cmp byte [rax], T_undefined
  6829 00003EBB 0F843A170100            	je L_error_fvar_undefined
  6830 00003EC1 50                      	push rax
  6831 00003EC2 6A02                    	push 2	; arg count
  6832 00003EC4 488B0425[09150000]      	mov rax, qword [free_var_109]	; free var map
  6833 00003ECC 803805                  	cmp byte [rax], T_undefined
  6834 00003ECF 0F8426170100            	je L_error_fvar_undefined
  6835 00003ED5 803804                  	cmp byte [rax], T_closure
  6836 00003ED8 0F85A1170100            	jne L_error_non_closure
  6837 00003EDE FF7001                  	push SOB_CLOSURE_ENV(rax)
  6838 00003EE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6839 00003EE4 50                      	push rax
  6840 00003EE5 6A01                    	push 1	; arg count
  6841 00003EE7 488B4510                	mov rax, ENV
  6842 00003EEB 488B00                  	mov rax, qword [rax + 8 * 0]
  6843 00003EEE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6844 00003EF1 488B00                  	mov rax, qword [rax]
  6845 00003EF4 803804                  	cmp byte [rax], T_closure
  6846 00003EF7 0F8582170100            	jne L_error_non_closure
  6847 00003EFD FF7001                  	push SOB_CLOSURE_ENV(rax)
  6848                                  
  6849                                  	; recycling the current frame
  6850 00003F00 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6851 00003F03 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6852 00003F06 B905000000              	mov rcx, 1 + 4
  6853 00003F0B 488B5D18                	mov rbx, COUNT
  6854 00003F0F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6855 00003F14 488D55F8                	lea rdx, [rbp - 8 * 1]
  6856                                  .L_tc_recycle_frame_loop_06e7:
  6857 00003F18 4883F900                	cmp rcx, 0
  6858 00003F1C 7413                    	je .L_tc_recycle_frame_done_06e7
  6859 00003F1E 488B32                  	mov rsi, qword [rdx]
  6860 00003F21 488933                  	mov qword [rbx], rsi
  6861 00003F24 48FFC9                  	dec rcx
  6862 00003F27 4883EB08                	sub rbx, 8 * 1
  6863 00003F2B 4883EA08                	sub rdx, 8 * 1
  6864 00003F2F EBE7                    	jmp .L_tc_recycle_frame_loop_06e7
  6865                                  .L_tc_recycle_frame_done_06e7:
  6866 00003F31 488D6308                	lea rsp, [rbx + 8 * 1]
  6867 00003F35 5D                      	pop rbp	; the proc will restore it!
  6868 00003F36 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6869                                  
  6870 00003F39 EB0A                    	jmp .L_if_end_03d3
  6871                                  
  6872                                  	.L_if_else_03d3:
  6873 00003F3B 48B8-                   	mov rax, L_constants + 2
  6873 00003F3D [0200000000000000] 
  6874                                  
  6875                                  	.L_if_end_03d3:
  6876                                  .L_or_end_005f:
  6877 00003F45 C9                      	leave
  6878 00003F46 C21800                  	ret AND_KILL_FRAME(1)
  6879                                  .L_lambda_simple_end_054b:	; new closure is in rax
  6880                                  
  6881 00003F49 50                      	push rax
  6882 00003F4A 488B4520                	mov rax, PARAM(0)	; param loop
  6883                                  
  6884 00003F4E 8F00                    	pop qword[rax]
  6885 00003F50 48B8-                   	mov rax, sob_void
  6885 00003F52 [0000000000000000] 
  6886                                  
  6887                                  	; preparing a tail-call
  6888 00003F5A 488B4510                	mov rax, ENV
  6889 00003F5E 488B00                  	mov rax, qword [rax + 8 * 0]
  6890 00003F61 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6891 00003F65 50                      	push rax
  6892 00003F66 6A01                    	push 1	; arg count
  6893 00003F68 488B4520                	mov rax, PARAM(0)	; param loop
  6894 00003F6C 488B00                  	mov rax, qword [rax]
  6895 00003F6F 803804                  	cmp byte [rax], T_closure
  6896 00003F72 0F8507170100            	jne L_error_non_closure
  6897 00003F78 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6898                                  
  6899                                  	; recycling the current frame
  6900 00003F7B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6901 00003F7E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6902 00003F81 B905000000              	mov rcx, 1 + 4
  6903 00003F86 488B5D18                	mov rbx, COUNT
  6904 00003F8A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6905 00003F8F 488D55F8                	lea rdx, [rbp - 8 * 1]
  6906                                  .L_tc_recycle_frame_loop_06e8:
  6907 00003F93 4883F900                	cmp rcx, 0
  6908 00003F97 7413                    	je .L_tc_recycle_frame_done_06e8
  6909 00003F99 488B32                  	mov rsi, qword [rdx]
  6910 00003F9C 488933                  	mov qword [rbx], rsi
  6911 00003F9F 48FFC9                  	dec rcx
  6912 00003FA2 4883EB08                	sub rbx, 8 * 1
  6913 00003FA6 4883EA08                	sub rdx, 8 * 1
  6914 00003FAA EBE7                    	jmp .L_tc_recycle_frame_loop_06e8
  6915                                  .L_tc_recycle_frame_done_06e8:
  6916 00003FAC 488D6308                	lea rsp, [rbx + 8 * 1]
  6917 00003FB0 5D                      	pop rbp	; the proc will restore it!
  6918 00003FB1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6919 00003FB4 C9                      	leave
  6920 00003FB5 C21800                  	ret AND_KILL_FRAME(1)
  6921                                  .L_lambda_simple_end_054a:	; new closure is in rax
  6922 00003FB8 803804                  	cmp byte [rax], T_closure
  6923 00003FBB 0F85BE160100            	jne L_error_non_closure
  6924 00003FC1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6925                                  
  6926                                  	; recycling the current frame
  6927 00003FC4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  6928 00003FC7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  6929 00003FCA B905000000              	mov rcx, 1 + 4
  6930 00003FCF 488B5D18                	mov rbx, COUNT
  6931 00003FD3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  6932 00003FD8 488D55F8                	lea rdx, [rbp - 8 * 1]
  6933                                  .L_tc_recycle_frame_loop_06e9:
  6934 00003FDC 4883F900                	cmp rcx, 0
  6935 00003FE0 7413                    	je .L_tc_recycle_frame_done_06e9
  6936 00003FE2 488B32                  	mov rsi, qword [rdx]
  6937 00003FE5 488933                  	mov qword [rbx], rsi
  6938 00003FE8 48FFC9                  	dec rcx
  6939 00003FEB 4883EB08                	sub rbx, 8 * 1
  6940 00003FEF 4883EA08                	sub rdx, 8 * 1
  6941 00003FF3 EBE7                    	jmp .L_tc_recycle_frame_loop_06e9
  6942                                  .L_tc_recycle_frame_done_06e9:
  6943 00003FF5 488D6308                	lea rsp, [rbx + 8 * 1]
  6944 00003FF9 5D                      	pop rbp	; the proc will restore it!
  6945 00003FFA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6946 00003FFD C9                      	leave
  6947 00003FFE C22000                  	ret AND_KILL_FRAME(2)
  6948                                  .L_lambda_opt_end_00b4:	; new closure is in rax
  6949 00004001 48890425[1A150000]      	mov qword [free_var_110], rax
  6950 00004009 48B8-                   	mov rax, sob_void
  6950 0000400B [0000000000000000] 
  6951                                  
  6952 00004013 4889C7                  	mov rdi, rax
  6953 00004016 E81F180100              	call print_sexpr_if_not_void
  6954                                  
  6955 0000401B 48B8-                   	mov rax, L_constants + 1881
  6955 0000401D [5907000000000000] 
  6956 00004025 50                      	push rax
  6957 00004026 48B8-                   	mov rax, L_constants + 1881
  6957 00004028 [5907000000000000] 
  6958 00004030 50                      	push rax
  6959 00004031 6A02                    	push 2	; arg count
  6960 00004033 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6961 00004038 E8EB160100              	call malloc
  6962 0000403D 50                      	push rax
  6963 0000403E BF00000000              	mov rdi, 8 * 0	; new rib
  6964 00004043 E8E0160100              	call malloc
  6965 00004048 50                      	push rax
  6966 00004049 BF08000000              	mov rdi, 8 * 1	; extended env
  6967 0000404E E8D5160100              	call malloc
  6968 00004053 488B7D10                	mov rdi, ENV
  6969 00004057 BE00000000              	mov rsi, 0
  6970 0000405C BA01000000              	mov rdx, 1
  6971                                  .L_lambda_simple_env_loop_054c:	; ext_env[i + 1] <-- env[i]
  6972 00004061 4883FE00                	cmp rsi, 0
  6973 00004065 7410                    	je .L_lambda_simple_env_end_054c
  6974 00004067 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6975 0000406B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6976 0000406F 48FFC6                  	inc rsi
  6977 00004072 48FFC2                  	inc rdx
  6978 00004075 EBEA                    	jmp .L_lambda_simple_env_loop_054c
  6979                                  .L_lambda_simple_env_end_054c:
  6980 00004077 5B                      	pop rbx
  6981 00004078 BE00000000              	mov rsi, 0
  6982                                  .L_lambda_simple_params_loop_054c:	; copy params
  6983 0000407D 4883FE00                	cmp rsi, 0
  6984 00004081 740E                    	je .L_lambda_simple_params_end_054c
  6985 00004083 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6986 00004088 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6987 0000408C 48FFC6                  	inc rsi
  6988 0000408F EBEC                    	jmp .L_lambda_simple_params_loop_054c
  6989                                  .L_lambda_simple_params_end_054c:
  6990 00004091 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6991 00004094 4889C3                  	mov rbx, rax
  6992 00004097 58                      	pop rax
  6993 00004098 C60004                  	mov byte [rax], T_closure
  6994 0000409B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6995 0000409F 48C74009[AC400000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_054c
  6996 000040A7 E923060000              	jmp .L_lambda_simple_end_054c
  6997                                  .L_lambda_simple_code_054c:	; lambda-simple body
  6998 000040AC 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6999 000040B2 740B                    	je .L_lambda_simple_arity_check_ok_054c
  7000 000040B4 FF742410                	push qword [rsp + 8 * 2]
  7001 000040B8 6A02                    	push 2
  7002 000040BA E922160100              	jmp L_error_incorrect_arity_simple
  7003                                  .L_lambda_simple_arity_check_ok_054c:
  7004 000040BF C8000000                	enter 0, 0
  7005                                  
  7006 000040C3 BF08000000              	mov rdi, 8
  7007 000040C8 E85B160100              	call malloc
  7008 000040CD 488B5D20                	mov rbx, PARAM(0)	; param map1
  7009 000040D1 488918                  	mov [rax], rbx	; box map1
  7010 000040D4 48894520                	mov PARAM(0), rax	;replace param map1 with box
  7011 000040D8 48B8-                   	mov rax, sob_void
  7011 000040DA [0000000000000000] 
  7012                                  
  7013                                  
  7014 000040E2 BF08000000              	mov rdi, 8
  7015 000040E7 E83C160100              	call malloc
  7016 000040EC 488B5D28                	mov rbx, PARAM(1)	; param map-list
  7017 000040F0 488918                  	mov [rax], rbx	; box map-list
  7018 000040F3 48894528                	mov PARAM(1), rax	;replace param map-list with box
  7019 000040F7 48B8-                   	mov rax, sob_void
  7019 000040F9 [0000000000000000] 
  7020                                  
  7021 00004101 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7022 00004106 E81D160100              	call malloc
  7023 0000410B 50                      	push rax
  7024 0000410C BF10000000              	mov rdi, 8 * 2	; new rib
  7025 00004111 E812160100              	call malloc
  7026 00004116 50                      	push rax
  7027 00004117 BF10000000              	mov rdi, 8 * 2	; extended env
  7028 0000411C E807160100              	call malloc
  7029 00004121 488B7D10                	mov rdi, ENV
  7030 00004125 BE00000000              	mov rsi, 0
  7031 0000412A BA01000000              	mov rdx, 1
  7032                                  .L_lambda_simple_env_loop_054d:	; ext_env[i + 1] <-- env[i]
  7033 0000412F 4883FE01                	cmp rsi, 1
  7034 00004133 7410                    	je .L_lambda_simple_env_end_054d
  7035 00004135 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7036 00004139 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7037 0000413D 48FFC6                  	inc rsi
  7038 00004140 48FFC2                  	inc rdx
  7039 00004143 EBEA                    	jmp .L_lambda_simple_env_loop_054d
  7040                                  .L_lambda_simple_env_end_054d:
  7041 00004145 5B                      	pop rbx
  7042 00004146 BE00000000              	mov rsi, 0
  7043                                  .L_lambda_simple_params_loop_054d:	; copy params
  7044 0000414B 4883FE02                	cmp rsi, 2
  7045 0000414F 740E                    	je .L_lambda_simple_params_end_054d
  7046 00004151 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7047 00004156 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7048 0000415A 48FFC6                  	inc rsi
  7049 0000415D EBEC                    	jmp .L_lambda_simple_params_loop_054d
  7050                                  .L_lambda_simple_params_end_054d:
  7051 0000415F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7052 00004162 4889C3                  	mov rbx, rax
  7053 00004165 58                      	pop rax
  7054 00004166 C60004                  	mov byte [rax], T_closure
  7055 00004169 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7056 0000416D 48C74009[7A410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_054d
  7057 00004175 E93B010000              	jmp .L_lambda_simple_end_054d
  7058                                  .L_lambda_simple_code_054d:	; lambda-simple body
  7059 0000417A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7060 00004180 740B                    	je .L_lambda_simple_arity_check_ok_054d
  7061 00004182 FF742410                	push qword [rsp + 8 * 2]
  7062 00004186 6A02                    	push 2
  7063 00004188 E954150100              	jmp L_error_incorrect_arity_simple
  7064                                  .L_lambda_simple_arity_check_ok_054d:
  7065 0000418D C8000000                	enter 0, 0
  7066 00004191 488B4528                	mov rax, PARAM(1)	; param s
  7067 00004195 50                      	push rax
  7068 00004196 6A01                    	push 1	; arg count
  7069 00004198 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
  7070 000041A0 803805                  	cmp byte [rax], T_undefined
  7071 000041A3 0F8452140100            	je L_error_fvar_undefined
  7072 000041A9 803804                  	cmp byte [rax], T_closure
  7073 000041AC 0F85CD140100            	jne L_error_non_closure
  7074 000041B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7075 000041B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7076                                  
  7077 000041B8 483D[02000000]          	cmp rax, sob_boolean_false
  7078 000041BE 740F                    	je .L_if_else_03d4
  7079 000041C0 48B8-                   	mov rax, L_constants + 1
  7079 000041C2 [0100000000000000] 
  7080                                  
  7081 000041CA E9E2000000              	jmp .L_if_end_03d4
  7082                                  
  7083                                  	.L_if_else_03d4:
  7084                                  	; preparing a tail-call
  7085 000041CF 488B4528                	mov rax, PARAM(1)	; param s
  7086 000041D3 50                      	push rax
  7087 000041D4 6A01                    	push 1	; arg count
  7088 000041D6 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7089 000041DE 803805                  	cmp byte [rax], T_undefined
  7090 000041E1 0F8414140100            	je L_error_fvar_undefined
  7091 000041E7 803804                  	cmp byte [rax], T_closure
  7092 000041EA 0F858F140100            	jne L_error_non_closure
  7093 000041F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7094 000041F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7095 000041F6 50                      	push rax
  7096 000041F7 488B4520                	mov rax, PARAM(0)	; param f
  7097 000041FB 50                      	push rax
  7098 000041FC 6A02                    	push 2	; arg count
  7099 000041FE 488B4510                	mov rax, ENV
  7100 00004202 488B00                  	mov rax, qword [rax + 8 * 0]
  7101 00004205 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7102 00004208 488B00                  	mov rax, qword [rax]
  7103 0000420B 803804                  	cmp byte [rax], T_closure
  7104 0000420E 0F856B140100            	jne L_error_non_closure
  7105 00004214 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7106 00004217 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7107 0000421A 50                      	push rax
  7108 0000421B 488B4528                	mov rax, PARAM(1)	; param s
  7109 0000421F 50                      	push rax
  7110 00004220 6A01                    	push 1	; arg count
  7111 00004222 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  7112 0000422A 803805                  	cmp byte [rax], T_undefined
  7113 0000422D 0F84C8130100            	je L_error_fvar_undefined
  7114 00004233 803804                  	cmp byte [rax], T_closure
  7115 00004236 0F8543140100            	jne L_error_non_closure
  7116 0000423C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7117 0000423F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7118 00004242 50                      	push rax
  7119 00004243 6A01                    	push 1	; arg count
  7120 00004245 488B4520                	mov rax, PARAM(0)	; param f
  7121 00004249 803804                  	cmp byte [rax], T_closure
  7122 0000424C 0F852D140100            	jne L_error_non_closure
  7123 00004252 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7124 00004255 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7125 00004258 50                      	push rax
  7126 00004259 6A02                    	push 2	; arg count
  7127 0000425B 488B0425[A90E0000]      	mov rax, qword [free_var_13]	; free var cons
  7128 00004263 803805                  	cmp byte [rax], T_undefined
  7129 00004266 0F848F130100            	je L_error_fvar_undefined
  7130 0000426C 803804                  	cmp byte [rax], T_closure
  7131 0000426F 0F850A140100            	jne L_error_non_closure
  7132 00004275 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7133                                  
  7134                                  	; recycling the current frame
  7135 00004278 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7136 0000427B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7137 0000427E B906000000              	mov rcx, 2 + 4
  7138 00004283 488B5D18                	mov rbx, COUNT
  7139 00004287 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7140 0000428C 488D55F8                	lea rdx, [rbp - 8 * 1]
  7141                                  .L_tc_recycle_frame_loop_06ea:
  7142 00004290 4883F900                	cmp rcx, 0
  7143 00004294 7413                    	je .L_tc_recycle_frame_done_06ea
  7144 00004296 488B32                  	mov rsi, qword [rdx]
  7145 00004299 488933                  	mov qword [rbx], rsi
  7146 0000429C 48FFC9                  	dec rcx
  7147 0000429F 4883EB08                	sub rbx, 8 * 1
  7148 000042A3 4883EA08                	sub rdx, 8 * 1
  7149 000042A7 EBE7                    	jmp .L_tc_recycle_frame_loop_06ea
  7150                                  .L_tc_recycle_frame_done_06ea:
  7151 000042A9 488D6308                	lea rsp, [rbx + 8 * 1]
  7152 000042AD 5D                      	pop rbp	; the proc will restore it!
  7153 000042AE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7154                                  
  7155                                  	.L_if_end_03d4:
  7156 000042B1 C9                      	leave
  7157 000042B2 C22000                  	ret AND_KILL_FRAME(2)
  7158                                  .L_lambda_simple_end_054d:	; new closure is in rax
  7159                                  
  7160 000042B5 50                      	push rax
  7161 000042B6 488B4520                	mov rax, PARAM(0)	; param map1
  7162                                  
  7163 000042BA 8F00                    	pop qword[rax]
  7164 000042BC 48B8-                   	mov rax, sob_void
  7164 000042BE [0000000000000000] 
  7165                                  
  7166 000042C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7167 000042CB E858140100              	call malloc
  7168 000042D0 50                      	push rax
  7169 000042D1 BF10000000              	mov rdi, 8 * 2	; new rib
  7170 000042D6 E84D140100              	call malloc
  7171 000042DB 50                      	push rax
  7172 000042DC BF10000000              	mov rdi, 8 * 2	; extended env
  7173 000042E1 E842140100              	call malloc
  7174 000042E6 488B7D10                	mov rdi, ENV
  7175 000042EA BE00000000              	mov rsi, 0
  7176 000042EF BA01000000              	mov rdx, 1
  7177                                  .L_lambda_simple_env_loop_054e:	; ext_env[i + 1] <-- env[i]
  7178 000042F4 4883FE01                	cmp rsi, 1
  7179 000042F8 7410                    	je .L_lambda_simple_env_end_054e
  7180 000042FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7181 000042FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7182 00004302 48FFC6                  	inc rsi
  7183 00004305 48FFC2                  	inc rdx
  7184 00004308 EBEA                    	jmp .L_lambda_simple_env_loop_054e
  7185                                  .L_lambda_simple_env_end_054e:
  7186 0000430A 5B                      	pop rbx
  7187 0000430B BE00000000              	mov rsi, 0
  7188                                  .L_lambda_simple_params_loop_054e:	; copy params
  7189 00004310 4883FE02                	cmp rsi, 2
  7190 00004314 740E                    	je .L_lambda_simple_params_end_054e
  7191 00004316 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7192 0000431B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7193 0000431F 48FFC6                  	inc rsi
  7194 00004322 EBEC                    	jmp .L_lambda_simple_params_loop_054e
  7195                                  .L_lambda_simple_params_end_054e:
  7196 00004324 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7197 00004327 4889C3                  	mov rbx, rax
  7198 0000432A 58                      	pop rax
  7199 0000432B C60004                  	mov byte [rax], T_closure
  7200 0000432E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7201 00004332 48C74009[3F430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_054e
  7202 0000433A E98D010000              	jmp .L_lambda_simple_end_054e
  7203                                  .L_lambda_simple_code_054e:	; lambda-simple body
  7204 0000433F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7205 00004345 740B                    	je .L_lambda_simple_arity_check_ok_054e
  7206 00004347 FF742410                	push qword [rsp + 8 * 2]
  7207 0000434B 6A02                    	push 2
  7208 0000434D E98F130100              	jmp L_error_incorrect_arity_simple
  7209                                  .L_lambda_simple_arity_check_ok_054e:
  7210 00004352 C8000000                	enter 0, 0
  7211 00004356 488B4528                	mov rax, PARAM(1)	; param s
  7212 0000435A 50                      	push rax
  7213 0000435B 6A01                    	push 1	; arg count
  7214 0000435D 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  7215 00004365 803805                  	cmp byte [rax], T_undefined
  7216 00004368 0F848D120100            	je L_error_fvar_undefined
  7217 0000436E 803804                  	cmp byte [rax], T_closure
  7218 00004371 0F8508130100            	jne L_error_non_closure
  7219 00004377 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7220 0000437A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7221 0000437D 50                      	push rax
  7222 0000437E 6A01                    	push 1	; arg count
  7223 00004380 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
  7224 00004388 803805                  	cmp byte [rax], T_undefined
  7225 0000438B 0F846A120100            	je L_error_fvar_undefined
  7226 00004391 803804                  	cmp byte [rax], T_closure
  7227 00004394 0F85E5120100            	jne L_error_non_closure
  7228 0000439A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7229 0000439D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7230                                  
  7231 000043A0 483D[02000000]          	cmp rax, sob_boolean_false
  7232 000043A6 740F                    	je .L_if_else_03d5
  7233 000043A8 48B8-                   	mov rax, L_constants + 1
  7233 000043AA [0100000000000000] 
  7234                                  
  7235 000043B2 E911010000              	jmp .L_if_end_03d5
  7236                                  
  7237                                  	.L_if_else_03d5:
  7238                                  	; preparing a tail-call
  7239 000043B7 488B4528                	mov rax, PARAM(1)	; param s
  7240 000043BB 50                      	push rax
  7241 000043BC 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7242 000043C4 803805                  	cmp byte [rax], T_undefined
  7243 000043C7 0F842E120100            	je L_error_fvar_undefined
  7244 000043CD 50                      	push rax
  7245 000043CE 6A02                    	push 2	; arg count
  7246 000043D0 488B4510                	mov rax, ENV
  7247 000043D4 488B00                  	mov rax, qword [rax + 8 * 0]
  7248 000043D7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7249 000043DA 488B00                  	mov rax, qword [rax]
  7250 000043DD 803804                  	cmp byte [rax], T_closure
  7251 000043E0 0F8599120100            	jne L_error_non_closure
  7252 000043E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7253 000043E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7254 000043EC 50                      	push rax
  7255 000043ED 488B4520                	mov rax, PARAM(0)	; param f
  7256 000043F1 50                      	push rax
  7257 000043F2 6A02                    	push 2	; arg count
  7258 000043F4 488B4510                	mov rax, ENV
  7259 000043F8 488B00                  	mov rax, qword [rax + 8 * 0]
  7260 000043FB 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7261 000043FF 488B00                  	mov rax, qword [rax]
  7262 00004402 803804                  	cmp byte [rax], T_closure
  7263 00004405 0F8574120100            	jne L_error_non_closure
  7264 0000440B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7265 0000440E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7266 00004411 50                      	push rax
  7267 00004412 488B4528                	mov rax, PARAM(1)	; param s
  7268 00004416 50                      	push rax
  7269 00004417 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  7270 0000441F 803805                  	cmp byte [rax], T_undefined
  7271 00004422 0F84D3110100            	je L_error_fvar_undefined
  7272 00004428 50                      	push rax
  7273 00004429 6A02                    	push 2	; arg count
  7274 0000442B 488B4510                	mov rax, ENV
  7275 0000442F 488B00                  	mov rax, qword [rax + 8 * 0]
  7276 00004432 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7277 00004435 488B00                  	mov rax, qword [rax]
  7278 00004438 803804                  	cmp byte [rax], T_closure
  7279 0000443B 0F853E120100            	jne L_error_non_closure
  7280 00004441 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7281 00004444 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7282 00004447 50                      	push rax
  7283 00004448 488B4520                	mov rax, PARAM(0)	; param f
  7284 0000444C 50                      	push rax
  7285 0000444D 6A02                    	push 2	; arg count
  7286 0000444F 488B0425[E7140000]      	mov rax, qword [free_var_107]	; free var apply
  7287 00004457 803805                  	cmp byte [rax], T_undefined
  7288 0000445A 0F849B110100            	je L_error_fvar_undefined
  7289 00004460 803804                  	cmp byte [rax], T_closure
  7290 00004463 0F8516120100            	jne L_error_non_closure
  7291 00004469 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7292 0000446C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7293 0000446F 50                      	push rax
  7294 00004470 6A02                    	push 2	; arg count
  7295 00004472 488B0425[A90E0000]      	mov rax, qword [free_var_13]	; free var cons
  7296 0000447A 803805                  	cmp byte [rax], T_undefined
  7297 0000447D 0F8478110100            	je L_error_fvar_undefined
  7298 00004483 803804                  	cmp byte [rax], T_closure
  7299 00004486 0F85F3110100            	jne L_error_non_closure
  7300 0000448C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7301                                  
  7302                                  	; recycling the current frame
  7303 0000448F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7304 00004492 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7305 00004495 B906000000              	mov rcx, 2 + 4
  7306 0000449A 488B5D18                	mov rbx, COUNT
  7307 0000449E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7308 000044A3 488D55F8                	lea rdx, [rbp - 8 * 1]
  7309                                  .L_tc_recycle_frame_loop_06eb:
  7310 000044A7 4883F900                	cmp rcx, 0
  7311 000044AB 7413                    	je .L_tc_recycle_frame_done_06eb
  7312 000044AD 488B32                  	mov rsi, qword [rdx]
  7313 000044B0 488933                  	mov qword [rbx], rsi
  7314 000044B3 48FFC9                  	dec rcx
  7315 000044B6 4883EB08                	sub rbx, 8 * 1
  7316 000044BA 4883EA08                	sub rdx, 8 * 1
  7317 000044BE EBE7                    	jmp .L_tc_recycle_frame_loop_06eb
  7318                                  .L_tc_recycle_frame_done_06eb:
  7319 000044C0 488D6308                	lea rsp, [rbx + 8 * 1]
  7320 000044C4 5D                      	pop rbp	; the proc will restore it!
  7321 000044C5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7322                                  
  7323                                  	.L_if_end_03d5:
  7324 000044C8 C9                      	leave
  7325 000044C9 C22000                  	ret AND_KILL_FRAME(2)
  7326                                  .L_lambda_simple_end_054e:	; new closure is in rax
  7327                                  
  7328 000044CC 50                      	push rax
  7329 000044CD 488B4528                	mov rax, PARAM(1)	; param map-list
  7330                                  
  7331 000044D1 8F00                    	pop qword[rax]
  7332 000044D3 48B8-                   	mov rax, sob_void
  7332 000044D5 [0000000000000000] 
  7333                                  
  7334 000044DD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7335 000044E2 E841120100              	call malloc
  7336 000044E7 50                      	push rax
  7337 000044E8 BF10000000              	mov rdi, 8 * 2	; new rib
  7338 000044ED E836120100              	call malloc
  7339 000044F2 50                      	push rax
  7340 000044F3 BF10000000              	mov rdi, 8 * 2	; extended env
  7341 000044F8 E82B120100              	call malloc
  7342 000044FD 488B7D10                	mov rdi, ENV
  7343 00004501 BE00000000              	mov rsi, 0
  7344 00004506 BA01000000              	mov rdx, 1
  7345                                  .L_lambda_opt_env_loop_00b5:	; ext_env[i + 1] <-- env[i]
  7346 0000450B 4883FE01                	cmp rsi, 1
  7347 0000450F 7410                    	je .L_lambda_opt_env_end_00b5
  7348 00004511 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7349 00004515 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7350 00004519 48FFC6                  	inc rsi
  7351 0000451C 48FFC2                  	inc rdx
  7352 0000451F EBEA                    	jmp .L_lambda_opt_env_loop_00b5
  7353                                  .L_lambda_opt_env_end_00b5:
  7354 00004521 5B                      	pop rbx
  7355 00004522 BE00000000              	mov rsi, 0
  7356                                  .L_lambda_opt_params_loop_00b5:	; copy params
  7357 00004527 4883FE02                	cmp rsi, 2
  7358 0000452B 740E                    	je .L_lambda_opt_params_end_00b5
  7359 0000452D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7360 00004532 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7361 00004536 48FFC6                  	inc rsi
  7362 00004539 EBEC                    	jmp .L_lambda_opt_params_loop_00b5
  7363                                  .L_lambda_opt_params_end_00b5:
  7364 0000453B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7365 0000453E 4889C3                  	mov rbx, rax
  7366 00004541 58                      	pop rax
  7367 00004542 C60004                  	mov byte [rax], T_closure
  7368 00004545 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7369 00004549 48C74009[56450000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b5
  7370 00004551 E975010000              	jmp .L_lambda_opt_end_00b5
  7371                                  .L_lambda_opt_code_00b5:	; lambda-simple body
  7372 00004556 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
  7373 0000455C 740D                    	je .L_lambda_opt_arity_check_exact_00b5 ;	 if equal, go to exact arity
  7374 0000455E 7F42                    	jg .L_lambda_opt_arity_check_more_00b5 ;	 if greater than, go to arity more
  7375 00004560 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  7376 00004564 6A01                     	push 1
  7377 00004566 E98A110100              	jmp L_error_incorrect_arity_opt
  7378                                  	.L_lambda_opt_arity_check_exact_00b5:
  7379 0000456B 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  7380 00004570 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  7381 00004575 4883EC08                	sub rsp, 8
  7382 00004579 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  7383                                  	.L_lambda_opt_exact_shifting_loop_00b5:
  7384 0000457D 488B5108                	mov rdx, [rcx + 8]
  7385 00004581 488911                  	mov [rcx], rdx
  7386 00004584 4883C108                	add rcx, 8
  7387 00004588 4839CB                  	cmp rbx, rcx
  7388 0000458B 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00b5
  7389                                  	.L_lambda_opt_exact_shifting_loop_end_00b5:
  7390 0000458D 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  7391 00004594 4883C001                	add rax, 1 ; 	arg count += 1
  7392 00004598 4889442410              	mov qword [rsp + 8 * 2], rax
  7393 0000459D E987000000              	jmp .L_lambda_opt_stack_adjusted_00b5
  7394                                  	.L_lambda_opt_arity_check_more_00b5:
  7395 000045A2 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  7395 000045A4 [0100000000000000] 
  7396 000045AC 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
  7397 000045B2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00b5
  7398                                  	.L_lambda_opt_stack_shrink_loop_00b5:
  7399 000045B4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  7400 000045B9 E86A110100              	call malloc ;	 allocated memory for the optional scheme list
  7401 000045BE C60021                  	mov byte[rax], T_pair ;	 set type pair
  7402 000045C1 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  7403 000045C5 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  7404 000045C8 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  7405 000045CD 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  7406 000045D2 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  7407 000045D6 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  7408                                  	.L_lambda_opt_more_shifting_loop_00b5:
  7409 000045DB 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  7410 000045DE 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  7411 000045E2 4883EB08                	sub rbx, 8 
  7412 000045E6 4839DC                  	cmp rsp, rbx
  7413 000045E9 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00b5
  7414                                  	.L_lambda_opt_more_shifting_loop_end_00b5:
  7415 000045EB 4883C408                	add rsp, 8 ;	 update rsp
  7416 000045EF 488B5C2410              	mov rbx, [rsp + 8 * 2]
  7417 000045F4 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  7418 000045F8 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  7419 000045FD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7420 00004603 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00b5
  7421                                  	.L_lambda_opt_stack_shrink_loop_exit_00b5:
  7422 00004605 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  7423 0000460A 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  7424 0000460F BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  7425 00004614 E80F110100              	call malloc ;	 allocated memory for the optional scheme list
  7426 00004619 C60021                  	mov byte[rax], T_pair ;	 set type pair
  7427 0000461C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  7428 00004620 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  7429 00004624 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  7430                                  	.L_lambda_opt_stack_adjusted_00b5:
  7431 00004629 C8000000                	enter 0, 0
  7432 0000462D 488B4528                	mov rax, PARAM(1)	; param s
  7433 00004631 50                      	push rax
  7434 00004632 6A01                    	push 1	; arg count
  7435 00004634 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
  7436 0000463C 803805                  	cmp byte [rax], T_undefined
  7437 0000463F 0F84B60F0100            	je L_error_fvar_undefined
  7438 00004645 803804                  	cmp byte [rax], T_closure
  7439 00004648 0F8531100100            	jne L_error_non_closure
  7440 0000464E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7441 00004651 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7442                                  
  7443 00004654 483D[02000000]          	cmp rax, sob_boolean_false
  7444 0000465A 740C                    	je .L_if_else_03d6
  7445 0000465C 48B8-                   	mov rax, L_constants + 1
  7445 0000465E [0100000000000000] 
  7446                                  
  7447 00004666 EB5F                    	jmp .L_if_end_03d6
  7448                                  
  7449                                  	.L_if_else_03d6:
  7450                                  	; preparing a tail-call
  7451 00004668 488B4528                	mov rax, PARAM(1)	; param s
  7452 0000466C 50                      	push rax
  7453 0000466D 488B4520                	mov rax, PARAM(0)	; param f
  7454 00004671 50                      	push rax
  7455 00004672 6A02                    	push 2	; arg count
  7456 00004674 488B4510                	mov rax, ENV
  7457 00004678 488B00                  	mov rax, qword [rax + 8 * 0]
  7458 0000467B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7459 0000467F 488B00                  	mov rax, qword [rax]
  7460 00004682 803804                  	cmp byte [rax], T_closure
  7461 00004685 0F85F40F0100            	jne L_error_non_closure
  7462 0000468B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7463                                  
  7464                                  	; recycling the current frame
  7465 0000468E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7466 00004691 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7467 00004694 B906000000              	mov rcx, 2 + 4
  7468 00004699 488B5D18                	mov rbx, COUNT
  7469 0000469D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7470 000046A2 488D55F8                	lea rdx, [rbp - 8 * 1]
  7471                                  .L_tc_recycle_frame_loop_06ec:
  7472 000046A6 4883F900                	cmp rcx, 0
  7473 000046AA 7413                    	je .L_tc_recycle_frame_done_06ec
  7474 000046AC 488B32                  	mov rsi, qword [rdx]
  7475 000046AF 488933                  	mov qword [rbx], rsi
  7476 000046B2 48FFC9                  	dec rcx
  7477 000046B5 4883EB08                	sub rbx, 8 * 1
  7478 000046B9 4883EA08                	sub rdx, 8 * 1
  7479 000046BD EBE7                    	jmp .L_tc_recycle_frame_loop_06ec
  7480                                  .L_tc_recycle_frame_done_06ec:
  7481 000046BF 488D6308                	lea rsp, [rbx + 8 * 1]
  7482 000046C3 5D                      	pop rbp	; the proc will restore it!
  7483 000046C4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7484                                  
  7485                                  	.L_if_end_03d6:
  7486 000046C7 C9                      	leave
  7487 000046C8 C22000                  	ret AND_KILL_FRAME(2)
  7488                                  .L_lambda_opt_end_00b5:	; new closure is in rax
  7489 000046CB C9                      	leave
  7490 000046CC C22000                  	ret AND_KILL_FRAME(2)
  7491                                  .L_lambda_simple_end_054c:	; new closure is in rax
  7492 000046CF 803804                  	cmp byte [rax], T_closure
  7493 000046D2 0F85A70F0100            	jne L_error_non_closure
  7494 000046D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7495 000046DB FF5009                  	call SOB_CLOSURE_CODE(rax)
  7496 000046DE 48890425[09150000]      	mov qword [free_var_109], rax
  7497 000046E6 48B8-                   	mov rax, sob_void
  7497 000046E8 [0000000000000000] 
  7498                                  
  7499 000046F0 4889C7                  	mov rdi, rax
  7500 000046F3 E842110100              	call print_sexpr_if_not_void
  7501                                  
  7502 000046F8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7503 000046FD E826100100              	call malloc
  7504 00004702 50                      	push rax
  7505 00004703 BF00000000              	mov rdi, 8 * 0	; new rib
  7506 00004708 E81B100100              	call malloc
  7507 0000470D 50                      	push rax
  7508 0000470E BF08000000              	mov rdi, 8 * 1	; extended env
  7509 00004713 E810100100              	call malloc
  7510 00004718 488B7D10                	mov rdi, ENV
  7511 0000471C BE00000000              	mov rsi, 0
  7512 00004721 BA01000000              	mov rdx, 1
  7513                                  .L_lambda_simple_env_loop_054f:	; ext_env[i + 1] <-- env[i]
  7514 00004726 4883FE00                	cmp rsi, 0
  7515 0000472A 7410                    	je .L_lambda_simple_env_end_054f
  7516 0000472C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7517 00004730 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7518 00004734 48FFC6                  	inc rsi
  7519 00004737 48FFC2                  	inc rdx
  7520 0000473A EBEA                    	jmp .L_lambda_simple_env_loop_054f
  7521                                  .L_lambda_simple_env_end_054f:
  7522 0000473C 5B                      	pop rbx
  7523 0000473D BE00000000              	mov rsi, 0
  7524                                  .L_lambda_simple_params_loop_054f:	; copy params
  7525 00004742 4883FE00                	cmp rsi, 0
  7526 00004746 740E                    	je .L_lambda_simple_params_end_054f
  7527 00004748 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7528 0000474D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7529 00004751 48FFC6                  	inc rsi
  7530 00004754 EBEC                    	jmp .L_lambda_simple_params_loop_054f
  7531                                  .L_lambda_simple_params_end_054f:
  7532 00004756 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7533 00004759 4889C3                  	mov rbx, rax
  7534 0000475C 58                      	pop rax
  7535 0000475D C60004                  	mov byte [rax], T_closure
  7536 00004760 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7537 00004764 48C74009[71470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_054f
  7538 0000476C E97A010000              	jmp .L_lambda_simple_end_054f
  7539                                  .L_lambda_simple_code_054f:	; lambda-simple body
  7540 00004771 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7541 00004777 740B                    	je .L_lambda_simple_arity_check_ok_054f
  7542 00004779 FF742410                	push qword [rsp + 8 * 2]
  7543 0000477D 6A01                    	push 1
  7544 0000477F E95D0F0100              	jmp L_error_incorrect_arity_simple
  7545                                  .L_lambda_simple_arity_check_ok_054f:
  7546 00004784 C8000000                	enter 0, 0
  7547                                  	; preparing a tail-call
  7548 00004788 488B4520                	mov rax, PARAM(0)	; param s
  7549 0000478C 50                      	push rax
  7550 0000478D 48B8-                   	mov rax, L_constants + 1
  7550 0000478F [0100000000000000] 
  7551 00004797 50                      	push rax
  7552 00004798 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7553 0000479D E8860F0100              	call malloc
  7554 000047A2 50                      	push rax
  7555 000047A3 BF08000000              	mov rdi, 8 * 1	; new rib
  7556 000047A8 E87B0F0100              	call malloc
  7557 000047AD 50                      	push rax
  7558 000047AE BF10000000              	mov rdi, 8 * 2	; extended env
  7559 000047B3 E8700F0100              	call malloc
  7560 000047B8 488B7D10                	mov rdi, ENV
  7561 000047BC BE00000000              	mov rsi, 0
  7562 000047C1 BA01000000              	mov rdx, 1
  7563                                  .L_lambda_simple_env_loop_0550:	; ext_env[i + 1] <-- env[i]
  7564 000047C6 4883FE01                	cmp rsi, 1
  7565 000047CA 7410                    	je .L_lambda_simple_env_end_0550
  7566 000047CC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7567 000047D0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7568 000047D4 48FFC6                  	inc rsi
  7569 000047D7 48FFC2                  	inc rdx
  7570 000047DA EBEA                    	jmp .L_lambda_simple_env_loop_0550
  7571                                  .L_lambda_simple_env_end_0550:
  7572 000047DC 5B                      	pop rbx
  7573 000047DD BE00000000              	mov rsi, 0
  7574                                  .L_lambda_simple_params_loop_0550:	; copy params
  7575 000047E2 4883FE01                	cmp rsi, 1
  7576 000047E6 740E                    	je .L_lambda_simple_params_end_0550
  7577 000047E8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7578 000047ED 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7579 000047F1 48FFC6                  	inc rsi
  7580 000047F4 EBEC                    	jmp .L_lambda_simple_params_loop_0550
  7581                                  .L_lambda_simple_params_end_0550:
  7582 000047F6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7583 000047F9 4889C3                  	mov rbx, rax
  7584 000047FC 58                      	pop rax
  7585 000047FD C60004                  	mov byte [rax], T_closure
  7586 00004800 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7587 00004804 48C74009[11480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0550
  7588 0000480C E97D000000              	jmp .L_lambda_simple_end_0550
  7589                                  .L_lambda_simple_code_0550:	; lambda-simple body
  7590 00004811 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7591 00004817 740B                    	je .L_lambda_simple_arity_check_ok_0550
  7592 00004819 FF742410                	push qword [rsp + 8 * 2]
  7593 0000481D 6A02                    	push 2
  7594 0000481F E9BD0E0100              	jmp L_error_incorrect_arity_simple
  7595                                  .L_lambda_simple_arity_check_ok_0550:
  7596 00004824 C8000000                	enter 0, 0
  7597                                  	; preparing a tail-call
  7598 00004828 488B4520                	mov rax, PARAM(0)	; param r
  7599 0000482C 50                      	push rax
  7600 0000482D 488B4528                	mov rax, PARAM(1)	; param a
  7601 00004831 50                      	push rax
  7602 00004832 6A02                    	push 2	; arg count
  7603 00004834 488B0425[A90E0000]      	mov rax, qword [free_var_13]	; free var cons
  7604 0000483C 803805                  	cmp byte [rax], T_undefined
  7605 0000483F 0F84B60D0100            	je L_error_fvar_undefined
  7606 00004845 803804                  	cmp byte [rax], T_closure
  7607 00004848 0F85310E0100            	jne L_error_non_closure
  7608 0000484E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7609                                  
  7610                                  	; recycling the current frame
  7611 00004851 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7612 00004854 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7613 00004857 B906000000              	mov rcx, 2 + 4
  7614 0000485C 488B5D18                	mov rbx, COUNT
  7615 00004860 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7616 00004865 488D55F8                	lea rdx, [rbp - 8 * 1]
  7617                                  .L_tc_recycle_frame_loop_06ed:
  7618 00004869 4883F900                	cmp rcx, 0
  7619 0000486D 7413                    	je .L_tc_recycle_frame_done_06ed
  7620 0000486F 488B32                  	mov rsi, qword [rdx]
  7621 00004872 488933                  	mov qword [rbx], rsi
  7622 00004875 48FFC9                  	dec rcx
  7623 00004878 4883EB08                	sub rbx, 8 * 1
  7624 0000487C 4883EA08                	sub rdx, 8 * 1
  7625 00004880 EBE7                    	jmp .L_tc_recycle_frame_loop_06ed
  7626                                  .L_tc_recycle_frame_done_06ed:
  7627 00004882 488D6308                	lea rsp, [rbx + 8 * 1]
  7628 00004886 5D                      	pop rbp	; the proc will restore it!
  7629 00004887 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7630 0000488A C9                      	leave
  7631 0000488B C22000                  	ret AND_KILL_FRAME(2)
  7632                                  .L_lambda_simple_end_0550:	; new closure is in rax
  7633 0000488E 50                      	push rax
  7634 0000488F 6A03                    	push 3	; arg count
  7635 00004891 488B0425[3C150000]      	mov rax, qword [free_var_112]	; free var fold-left
  7636 00004899 803805                  	cmp byte [rax], T_undefined
  7637 0000489C 0F84590D0100            	je L_error_fvar_undefined
  7638 000048A2 803804                  	cmp byte [rax], T_closure
  7639 000048A5 0F85D40D0100            	jne L_error_non_closure
  7640 000048AB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7641                                  
  7642                                  	; recycling the current frame
  7643 000048AE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7644 000048B1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7645 000048B4 B907000000              	mov rcx, 3 + 4
  7646 000048B9 488B5D18                	mov rbx, COUNT
  7647 000048BD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7648 000048C2 488D55F8                	lea rdx, [rbp - 8 * 1]
  7649                                  .L_tc_recycle_frame_loop_06ee:
  7650 000048C6 4883F900                	cmp rcx, 0
  7651 000048CA 7413                    	je .L_tc_recycle_frame_done_06ee
  7652 000048CC 488B32                  	mov rsi, qword [rdx]
  7653 000048CF 488933                  	mov qword [rbx], rsi
  7654 000048D2 48FFC9                  	dec rcx
  7655 000048D5 4883EB08                	sub rbx, 8 * 1
  7656 000048D9 4883EA08                	sub rdx, 8 * 1
  7657 000048DD EBE7                    	jmp .L_tc_recycle_frame_loop_06ee
  7658                                  .L_tc_recycle_frame_done_06ee:
  7659 000048DF 488D6308                	lea rsp, [rbx + 8 * 1]
  7660 000048E3 5D                      	pop rbp	; the proc will restore it!
  7661 000048E4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7662 000048E7 C9                      	leave
  7663 000048E8 C21800                  	ret AND_KILL_FRAME(1)
  7664                                  .L_lambda_simple_end_054f:	; new closure is in rax
  7665 000048EB 48890425[2B150000]      	mov qword [free_var_111], rax
  7666 000048F3 48B8-                   	mov rax, sob_void
  7666 000048F5 [0000000000000000] 
  7667                                  
  7668 000048FD 4889C7                  	mov rdi, rax
  7669 00004900 E8350F0100              	call print_sexpr_if_not_void
  7670                                  
  7671 00004905 48B8-                   	mov rax, L_constants + 1881
  7671 00004907 [5907000000000000] 
  7672 0000490F 50                      	push rax
  7673 00004910 48B8-                   	mov rax, L_constants + 1881
  7673 00004912 [5907000000000000] 
  7674 0000491A 50                      	push rax
  7675 0000491B 6A02                    	push 2	; arg count
  7676 0000491D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7677 00004922 E8010E0100              	call malloc
  7678 00004927 50                      	push rax
  7679 00004928 BF00000000              	mov rdi, 8 * 0	; new rib
  7680 0000492D E8F60D0100              	call malloc
  7681 00004932 50                      	push rax
  7682 00004933 BF08000000              	mov rdi, 8 * 1	; extended env
  7683 00004938 E8EB0D0100              	call malloc
  7684 0000493D 488B7D10                	mov rdi, ENV
  7685 00004941 BE00000000              	mov rsi, 0
  7686 00004946 BA01000000              	mov rdx, 1
  7687                                  .L_lambda_simple_env_loop_0551:	; ext_env[i + 1] <-- env[i]
  7688 0000494B 4883FE00                	cmp rsi, 0
  7689 0000494F 7410                    	je .L_lambda_simple_env_end_0551
  7690 00004951 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7691 00004955 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7692 00004959 48FFC6                  	inc rsi
  7693 0000495C 48FFC2                  	inc rdx
  7694 0000495F EBEA                    	jmp .L_lambda_simple_env_loop_0551
  7695                                  .L_lambda_simple_env_end_0551:
  7696 00004961 5B                      	pop rbx
  7697 00004962 BE00000000              	mov rsi, 0
  7698                                  .L_lambda_simple_params_loop_0551:	; copy params
  7699 00004967 4883FE00                	cmp rsi, 0
  7700 0000496B 740E                    	je .L_lambda_simple_params_end_0551
  7701 0000496D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7702 00004972 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7703 00004976 48FFC6                  	inc rsi
  7704 00004979 EBEC                    	jmp .L_lambda_simple_params_loop_0551
  7705                                  .L_lambda_simple_params_end_0551:
  7706 0000497B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7707 0000497E 4889C3                  	mov rbx, rax
  7708 00004981 58                      	pop rax
  7709 00004982 C60004                  	mov byte [rax], T_closure
  7710 00004985 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7711 00004989 48C74009[96490000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0551
  7712 00004991 E9DF050000              	jmp .L_lambda_simple_end_0551
  7713                                  .L_lambda_simple_code_0551:	; lambda-simple body
  7714 00004996 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7715 0000499C 740B                    	je .L_lambda_simple_arity_check_ok_0551
  7716 0000499E FF742410                	push qword [rsp + 8 * 2]
  7717 000049A2 6A02                    	push 2
  7718 000049A4 E9380D0100              	jmp L_error_incorrect_arity_simple
  7719                                  .L_lambda_simple_arity_check_ok_0551:
  7720 000049A9 C8000000                	enter 0, 0
  7721                                  
  7722 000049AD BF08000000              	mov rdi, 8
  7723 000049B2 E8710D0100              	call malloc
  7724 000049B7 488B5D20                	mov rbx, PARAM(0)	; param run-1
  7725 000049BB 488918                  	mov [rax], rbx	; box run-1
  7726 000049BE 48894520                	mov PARAM(0), rax	;replace param run-1 with box
  7727 000049C2 48B8-                   	mov rax, sob_void
  7727 000049C4 [0000000000000000] 
  7728                                  
  7729                                  
  7730 000049CC BF08000000              	mov rdi, 8
  7731 000049D1 E8520D0100              	call malloc
  7732 000049D6 488B5D28                	mov rbx, PARAM(1)	; param run-2
  7733 000049DA 488918                  	mov [rax], rbx	; box run-2
  7734 000049DD 48894528                	mov PARAM(1), rax	;replace param run-2 with box
  7735 000049E1 48B8-                   	mov rax, sob_void
  7735 000049E3 [0000000000000000] 
  7736                                  
  7737 000049EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7738 000049F0 E8330D0100              	call malloc
  7739 000049F5 50                      	push rax
  7740 000049F6 BF10000000              	mov rdi, 8 * 2	; new rib
  7741 000049FB E8280D0100              	call malloc
  7742 00004A00 50                      	push rax
  7743 00004A01 BF10000000              	mov rdi, 8 * 2	; extended env
  7744 00004A06 E81D0D0100              	call malloc
  7745 00004A0B 488B7D10                	mov rdi, ENV
  7746 00004A0F BE00000000              	mov rsi, 0
  7747 00004A14 BA01000000              	mov rdx, 1
  7748                                  .L_lambda_simple_env_loop_0552:	; ext_env[i + 1] <-- env[i]
  7749 00004A19 4883FE01                	cmp rsi, 1
  7750 00004A1D 7410                    	je .L_lambda_simple_env_end_0552
  7751 00004A1F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7752 00004A23 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7753 00004A27 48FFC6                  	inc rsi
  7754 00004A2A 48FFC2                  	inc rdx
  7755 00004A2D EBEA                    	jmp .L_lambda_simple_env_loop_0552
  7756                                  .L_lambda_simple_env_end_0552:
  7757 00004A2F 5B                      	pop rbx
  7758 00004A30 BE00000000              	mov rsi, 0
  7759                                  .L_lambda_simple_params_loop_0552:	; copy params
  7760 00004A35 4883FE02                	cmp rsi, 2
  7761 00004A39 740E                    	je .L_lambda_simple_params_end_0552
  7762 00004A3B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7763 00004A40 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7764 00004A44 48FFC6                  	inc rsi
  7765 00004A47 EBEC                    	jmp .L_lambda_simple_params_loop_0552
  7766                                  .L_lambda_simple_params_end_0552:
  7767 00004A49 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7768 00004A4C 4889C3                  	mov rbx, rax
  7769 00004A4F 58                      	pop rax
  7770 00004A50 C60004                  	mov byte [rax], T_closure
  7771 00004A53 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7772 00004A57 48C74009[644A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0552
  7773 00004A5F E91C010000              	jmp .L_lambda_simple_end_0552
  7774                                  .L_lambda_simple_code_0552:	; lambda-simple body
  7775 00004A64 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7776 00004A6A 740B                    	je .L_lambda_simple_arity_check_ok_0552
  7777 00004A6C FF742410                	push qword [rsp + 8 * 2]
  7778 00004A70 6A02                    	push 2
  7779 00004A72 E96A0C0100              	jmp L_error_incorrect_arity_simple
  7780                                  .L_lambda_simple_arity_check_ok_0552:
  7781 00004A77 C8000000                	enter 0, 0
  7782 00004A7B 488B4528                	mov rax, PARAM(1)	; param sr
  7783 00004A7F 50                      	push rax
  7784 00004A80 6A01                    	push 1	; arg count
  7785 00004A82 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
  7786 00004A8A 803805                  	cmp byte [rax], T_undefined
  7787 00004A8D 0F84680B0100            	je L_error_fvar_undefined
  7788 00004A93 803804                  	cmp byte [rax], T_closure
  7789 00004A96 0F85E30B0100            	jne L_error_non_closure
  7790 00004A9C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7791 00004A9F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7792                                  
  7793 00004AA2 483D[02000000]          	cmp rax, sob_boolean_false
  7794 00004AA8 7409                    	je .L_if_else_03d7
  7795 00004AAA 488B4520                	mov rax, PARAM(0)	; param s1
  7796                                  
  7797 00004AAE E9C9000000              	jmp .L_if_end_03d7
  7798                                  
  7799                                  	.L_if_else_03d7:
  7800                                  	; preparing a tail-call
  7801 00004AB3 488B4528                	mov rax, PARAM(1)	; param sr
  7802 00004AB7 50                      	push rax
  7803 00004AB8 6A01                    	push 1	; arg count
  7804 00004ABA 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7805 00004AC2 803805                  	cmp byte [rax], T_undefined
  7806 00004AC5 0F84300B0100            	je L_error_fvar_undefined
  7807 00004ACB 803804                  	cmp byte [rax], T_closure
  7808 00004ACE 0F85AB0B0100            	jne L_error_non_closure
  7809 00004AD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7810 00004AD7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7811 00004ADA 50                      	push rax
  7812 00004ADB 488B4528                	mov rax, PARAM(1)	; param sr
  7813 00004ADF 50                      	push rax
  7814 00004AE0 6A01                    	push 1	; arg count
  7815 00004AE2 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  7816 00004AEA 803805                  	cmp byte [rax], T_undefined
  7817 00004AED 0F84080B0100            	je L_error_fvar_undefined
  7818 00004AF3 803804                  	cmp byte [rax], T_closure
  7819 00004AF6 0F85830B0100            	jne L_error_non_closure
  7820 00004AFC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7821 00004AFF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7822 00004B02 50                      	push rax
  7823 00004B03 6A02                    	push 2	; arg count
  7824 00004B05 488B4510                	mov rax, ENV
  7825 00004B09 488B00                  	mov rax, qword [rax + 8 * 0]
  7826 00004B0C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  7827 00004B0F 488B00                  	mov rax, qword [rax]
  7828 00004B12 803804                  	cmp byte [rax], T_closure
  7829 00004B15 0F85640B0100            	jne L_error_non_closure
  7830 00004B1B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7831 00004B1E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7832 00004B21 50                      	push rax
  7833 00004B22 488B4520                	mov rax, PARAM(0)	; param s1
  7834 00004B26 50                      	push rax
  7835 00004B27 6A02                    	push 2	; arg count
  7836 00004B29 488B4510                	mov rax, ENV
  7837 00004B2D 488B00                  	mov rax, qword [rax + 8 * 0]
  7838 00004B30 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  7839 00004B34 488B00                  	mov rax, qword [rax]
  7840 00004B37 803804                  	cmp byte [rax], T_closure
  7841 00004B3A 0F853F0B0100            	jne L_error_non_closure
  7842 00004B40 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7843                                  
  7844                                  	; recycling the current frame
  7845 00004B43 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7846 00004B46 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7847 00004B49 B906000000              	mov rcx, 2 + 4
  7848 00004B4E 488B5D18                	mov rbx, COUNT
  7849 00004B52 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7850 00004B57 488D55F8                	lea rdx, [rbp - 8 * 1]
  7851                                  .L_tc_recycle_frame_loop_06ef:
  7852 00004B5B 4883F900                	cmp rcx, 0
  7853 00004B5F 7413                    	je .L_tc_recycle_frame_done_06ef
  7854 00004B61 488B32                  	mov rsi, qword [rdx]
  7855 00004B64 488933                  	mov qword [rbx], rsi
  7856 00004B67 48FFC9                  	dec rcx
  7857 00004B6A 4883EB08                	sub rbx, 8 * 1
  7858 00004B6E 4883EA08                	sub rdx, 8 * 1
  7859 00004B72 EBE7                    	jmp .L_tc_recycle_frame_loop_06ef
  7860                                  .L_tc_recycle_frame_done_06ef:
  7861 00004B74 488D6308                	lea rsp, [rbx + 8 * 1]
  7862 00004B78 5D                      	pop rbp	; the proc will restore it!
  7863 00004B79 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7864                                  
  7865                                  	.L_if_end_03d7:
  7866 00004B7C C9                      	leave
  7867 00004B7D C22000                  	ret AND_KILL_FRAME(2)
  7868                                  .L_lambda_simple_end_0552:	; new closure is in rax
  7869                                  
  7870 00004B80 50                      	push rax
  7871 00004B81 488B4520                	mov rax, PARAM(0)	; param run-1
  7872                                  
  7873 00004B85 8F00                    	pop qword[rax]
  7874 00004B87 48B8-                   	mov rax, sob_void
  7874 00004B89 [0000000000000000] 
  7875                                  
  7876 00004B91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7877 00004B96 E88D0B0100              	call malloc
  7878 00004B9B 50                      	push rax
  7879 00004B9C BF10000000              	mov rdi, 8 * 2	; new rib
  7880 00004BA1 E8820B0100              	call malloc
  7881 00004BA6 50                      	push rax
  7882 00004BA7 BF10000000              	mov rdi, 8 * 2	; extended env
  7883 00004BAC E8770B0100              	call malloc
  7884 00004BB1 488B7D10                	mov rdi, ENV
  7885 00004BB5 BE00000000              	mov rsi, 0
  7886 00004BBA BA01000000              	mov rdx, 1
  7887                                  .L_lambda_simple_env_loop_0553:	; ext_env[i + 1] <-- env[i]
  7888 00004BBF 4883FE01                	cmp rsi, 1
  7889 00004BC3 7410                    	je .L_lambda_simple_env_end_0553
  7890 00004BC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7891 00004BC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7892 00004BCD 48FFC6                  	inc rsi
  7893 00004BD0 48FFC2                  	inc rdx
  7894 00004BD3 EBEA                    	jmp .L_lambda_simple_env_loop_0553
  7895                                  .L_lambda_simple_env_end_0553:
  7896 00004BD5 5B                      	pop rbx
  7897 00004BD6 BE00000000              	mov rsi, 0
  7898                                  .L_lambda_simple_params_loop_0553:	; copy params
  7899 00004BDB 4883FE02                	cmp rsi, 2
  7900 00004BDF 740E                    	je .L_lambda_simple_params_end_0553
  7901 00004BE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7902 00004BE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7903 00004BEA 48FFC6                  	inc rsi
  7904 00004BED EBEC                    	jmp .L_lambda_simple_params_loop_0553
  7905                                  .L_lambda_simple_params_end_0553:
  7906 00004BEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7907 00004BF2 4889C3                  	mov rbx, rax
  7908 00004BF5 58                      	pop rax
  7909 00004BF6 C60004                  	mov byte [rax], T_closure
  7910 00004BF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7911 00004BFD 48C74009[0A4C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0553
  7912 00004C05 E920010000              	jmp .L_lambda_simple_end_0553
  7913                                  .L_lambda_simple_code_0553:	; lambda-simple body
  7914 00004C0A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7915 00004C10 740B                    	je .L_lambda_simple_arity_check_ok_0553
  7916 00004C12 FF742410                	push qword [rsp + 8 * 2]
  7917 00004C16 6A02                    	push 2
  7918 00004C18 E9C40A0100              	jmp L_error_incorrect_arity_simple
  7919                                  .L_lambda_simple_arity_check_ok_0553:
  7920 00004C1D C8000000                	enter 0, 0
  7921 00004C21 488B4520                	mov rax, PARAM(0)	; param s1
  7922 00004C25 50                      	push rax
  7923 00004C26 6A01                    	push 1	; arg count
  7924 00004C28 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
  7925 00004C30 803805                  	cmp byte [rax], T_undefined
  7926 00004C33 0F84C2090100            	je L_error_fvar_undefined
  7927 00004C39 803804                  	cmp byte [rax], T_closure
  7928 00004C3C 0F853D0A0100            	jne L_error_non_closure
  7929 00004C42 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7930 00004C45 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7931                                  
  7932 00004C48 483D[02000000]          	cmp rax, sob_boolean_false
  7933 00004C4E 7409                    	je .L_if_else_03d8
  7934 00004C50 488B4528                	mov rax, PARAM(1)	; param s2
  7935                                  
  7936 00004C54 E9CD000000              	jmp .L_if_end_03d8
  7937                                  
  7938                                  	.L_if_else_03d8:
  7939                                  	; preparing a tail-call
  7940 00004C59 488B4528                	mov rax, PARAM(1)	; param s2
  7941 00004C5D 50                      	push rax
  7942 00004C5E 488B4520                	mov rax, PARAM(0)	; param s1
  7943 00004C62 50                      	push rax
  7944 00004C63 6A01                    	push 1	; arg count
  7945 00004C65 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  7946 00004C6D 803805                  	cmp byte [rax], T_undefined
  7947 00004C70 0F8485090100            	je L_error_fvar_undefined
  7948 00004C76 803804                  	cmp byte [rax], T_closure
  7949 00004C79 0F85000A0100            	jne L_error_non_closure
  7950 00004C7F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7951 00004C82 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7952 00004C85 50                      	push rax
  7953 00004C86 6A02                    	push 2	; arg count
  7954 00004C88 488B4510                	mov rax, ENV
  7955 00004C8C 488B00                  	mov rax, qword [rax + 8 * 0]
  7956 00004C8F 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  7957 00004C93 488B00                  	mov rax, qword [rax]
  7958 00004C96 803804                  	cmp byte [rax], T_closure
  7959 00004C99 0F85E0090100            	jne L_error_non_closure
  7960 00004C9F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7961 00004CA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7962 00004CA5 50                      	push rax
  7963 00004CA6 488B4520                	mov rax, PARAM(0)	; param s1
  7964 00004CAA 50                      	push rax
  7965 00004CAB 6A01                    	push 1	; arg count
  7966 00004CAD 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  7967 00004CB5 803805                  	cmp byte [rax], T_undefined
  7968 00004CB8 0F843D090100            	je L_error_fvar_undefined
  7969 00004CBE 803804                  	cmp byte [rax], T_closure
  7970 00004CC1 0F85B8090100            	jne L_error_non_closure
  7971 00004CC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7972 00004CCA FF5009                  	call SOB_CLOSURE_CODE(rax)
  7973 00004CCD 50                      	push rax
  7974 00004CCE 6A02                    	push 2	; arg count
  7975 00004CD0 488B0425[A90E0000]      	mov rax, qword [free_var_13]	; free var cons
  7976 00004CD8 803805                  	cmp byte [rax], T_undefined
  7977 00004CDB 0F841A090100            	je L_error_fvar_undefined
  7978 00004CE1 803804                  	cmp byte [rax], T_closure
  7979 00004CE4 0F8595090100            	jne L_error_non_closure
  7980 00004CEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7981                                  
  7982                                  	; recycling the current frame
  7983 00004CED FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  7984 00004CF0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  7985 00004CF3 B906000000              	mov rcx, 2 + 4
  7986 00004CF8 488B5D18                	mov rbx, COUNT
  7987 00004CFC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  7988 00004D01 488D55F8                	lea rdx, [rbp - 8 * 1]
  7989                                  .L_tc_recycle_frame_loop_06f0:
  7990 00004D05 4883F900                	cmp rcx, 0
  7991 00004D09 7413                    	je .L_tc_recycle_frame_done_06f0
  7992 00004D0B 488B32                  	mov rsi, qword [rdx]
  7993 00004D0E 488933                  	mov qword [rbx], rsi
  7994 00004D11 48FFC9                  	dec rcx
  7995 00004D14 4883EB08                	sub rbx, 8 * 1
  7996 00004D18 4883EA08                	sub rdx, 8 * 1
  7997 00004D1C EBE7                    	jmp .L_tc_recycle_frame_loop_06f0
  7998                                  .L_tc_recycle_frame_done_06f0:
  7999 00004D1E 488D6308                	lea rsp, [rbx + 8 * 1]
  8000 00004D22 5D                      	pop rbp	; the proc will restore it!
  8001 00004D23 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8002                                  
  8003                                  	.L_if_end_03d8:
  8004 00004D26 C9                      	leave
  8005 00004D27 C22000                  	ret AND_KILL_FRAME(2)
  8006                                  .L_lambda_simple_end_0553:	; new closure is in rax
  8007                                  
  8008 00004D2A 50                      	push rax
  8009 00004D2B 488B4528                	mov rax, PARAM(1)	; param run-2
  8010                                  
  8011 00004D2F 8F00                    	pop qword[rax]
  8012 00004D31 48B8-                   	mov rax, sob_void
  8012 00004D33 [0000000000000000] 
  8013                                  
  8014 00004D3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8015 00004D40 E8E3090100              	call malloc
  8016 00004D45 50                      	push rax
  8017 00004D46 BF10000000              	mov rdi, 8 * 2	; new rib
  8018 00004D4B E8D8090100              	call malloc
  8019 00004D50 50                      	push rax
  8020 00004D51 BF10000000              	mov rdi, 8 * 2	; extended env
  8021 00004D56 E8CD090100              	call malloc
  8022 00004D5B 488B7D10                	mov rdi, ENV
  8023 00004D5F BE00000000              	mov rsi, 0
  8024 00004D64 BA01000000              	mov rdx, 1
  8025                                  .L_lambda_opt_env_loop_00b6:	; ext_env[i + 1] <-- env[i]
  8026 00004D69 4883FE01                	cmp rsi, 1
  8027 00004D6D 7410                    	je .L_lambda_opt_env_end_00b6
  8028 00004D6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8029 00004D73 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8030 00004D77 48FFC6                  	inc rsi
  8031 00004D7A 48FFC2                  	inc rdx
  8032 00004D7D EBEA                    	jmp .L_lambda_opt_env_loop_00b6
  8033                                  .L_lambda_opt_env_end_00b6:
  8034 00004D7F 5B                      	pop rbx
  8035 00004D80 BE00000000              	mov rsi, 0
  8036                                  .L_lambda_opt_params_loop_00b6:	; copy params
  8037 00004D85 4883FE02                	cmp rsi, 2
  8038 00004D89 740E                    	je .L_lambda_opt_params_end_00b6
  8039 00004D8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8040 00004D90 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8041 00004D94 48FFC6                  	inc rsi
  8042 00004D97 EBEC                    	jmp .L_lambda_opt_params_loop_00b6
  8043                                  .L_lambda_opt_params_end_00b6:
  8044 00004D99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8045 00004D9C 4889C3                  	mov rbx, rax
  8046 00004D9F 58                      	pop rax
  8047 00004DA0 C60004                  	mov byte [rax], T_closure
  8048 00004DA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8049 00004DA7 48C74009[B44D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b6
  8050 00004DAF E9BD010000              	jmp .L_lambda_opt_end_00b6
  8051                                  .L_lambda_opt_code_00b6:	; lambda-simple body
  8052 00004DB4 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
  8053 00004DBA 740D                    	je .L_lambda_opt_arity_check_exact_00b6 ;	 if equal, go to exact arity
  8054 00004DBC 7F42                    	jg .L_lambda_opt_arity_check_more_00b6 ;	 if greater than, go to arity more
  8055 00004DBE FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  8056 00004DC2 6A00                     	push 0
  8057 00004DC4 E92C090100              	jmp L_error_incorrect_arity_opt
  8058                                  	.L_lambda_opt_arity_check_exact_00b6:
  8059 00004DC9 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  8060 00004DCE 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  8061 00004DD3 4883EC08                	sub rsp, 8
  8062 00004DD7 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  8063                                  	.L_lambda_opt_exact_shifting_loop_00b6:
  8064 00004DDB 488B5108                	mov rdx, [rcx + 8]
  8065 00004DDF 488911                  	mov [rcx], rdx
  8066 00004DE2 4883C108                	add rcx, 8
  8067 00004DE6 4839CB                  	cmp rbx, rcx
  8068 00004DE9 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00b6
  8069                                  	.L_lambda_opt_exact_shifting_loop_end_00b6:
  8070 00004DEB 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  8071 00004DF2 4883C001                	add rax, 1 ; 	arg count += 1
  8072 00004DF6 4889442410              	mov qword [rsp + 8 * 2], rax
  8073 00004DFB E987000000              	jmp .L_lambda_opt_stack_adjusted_00b6
  8074                                  	.L_lambda_opt_arity_check_more_00b6:
  8075 00004E00 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  8075 00004E02 [0100000000000000] 
  8076 00004E0A 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
  8077 00004E10 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00b6
  8078                                  	.L_lambda_opt_stack_shrink_loop_00b6:
  8079 00004E12 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8080 00004E17 E80C090100              	call malloc ;	 allocated memory for the optional scheme list
  8081 00004E1C C60021                  	mov byte[rax], T_pair ;	 set type pair
  8082 00004E1F 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8083 00004E23 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  8084 00004E26 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  8085 00004E2B 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  8086 00004E30 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  8087 00004E34 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  8088                                  	.L_lambda_opt_more_shifting_loop_00b6:
  8089 00004E39 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  8090 00004E3C 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  8091 00004E40 4883EB08                	sub rbx, 8 
  8092 00004E44 4839DC                  	cmp rsp, rbx
  8093 00004E47 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00b6
  8094                                  	.L_lambda_opt_more_shifting_loop_end_00b6:
  8095 00004E49 4883C408                	add rsp, 8 ;	 update rsp
  8096 00004E4D 488B5C2410              	mov rbx, [rsp + 8 * 2]
  8097 00004E52 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  8098 00004E56 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  8099 00004E5B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8100 00004E61 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00b6
  8101                                  	.L_lambda_opt_stack_shrink_loop_exit_00b6:
  8102 00004E63 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  8103 00004E68 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  8104 00004E6D BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8105 00004E72 E8B1080100              	call malloc ;	 allocated memory for the optional scheme list
  8106 00004E77 C60021                  	mov byte[rax], T_pair ;	 set type pair
  8107 00004E7A 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8108 00004E7E 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  8109 00004E82 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  8110                                  	.L_lambda_opt_stack_adjusted_00b6:
  8111 00004E87 C8000000                	enter 0, 0
  8112 00004E8B 488B4520                	mov rax, PARAM(0)	; param s
  8113 00004E8F 50                      	push rax
  8114 00004E90 6A01                    	push 1	; arg count
  8115 00004E92 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
  8116 00004E9A 803805                  	cmp byte [rax], T_undefined
  8117 00004E9D 0F8458070100            	je L_error_fvar_undefined
  8118 00004EA3 803804                  	cmp byte [rax], T_closure
  8119 00004EA6 0F85D3070100            	jne L_error_non_closure
  8120 00004EAC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8121 00004EAF FF5009                  	call SOB_CLOSURE_CODE(rax)
  8122                                  
  8123 00004EB2 483D[02000000]          	cmp rax, sob_boolean_false
  8124 00004EB8 740F                    	je .L_if_else_03d9
  8125 00004EBA 48B8-                   	mov rax, L_constants + 1
  8125 00004EBC [0100000000000000] 
  8126                                  
  8127 00004EC4 E9A4000000              	jmp .L_if_end_03d9
  8128                                  
  8129                                  	.L_if_else_03d9:
  8130                                  	; preparing a tail-call
  8131 00004EC9 488B4520                	mov rax, PARAM(0)	; param s
  8132 00004ECD 50                      	push rax
  8133 00004ECE 6A01                    	push 1	; arg count
  8134 00004ED0 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  8135 00004ED8 803805                  	cmp byte [rax], T_undefined
  8136 00004EDB 0F841A070100            	je L_error_fvar_undefined
  8137 00004EE1 803804                  	cmp byte [rax], T_closure
  8138 00004EE4 0F8595070100            	jne L_error_non_closure
  8139 00004EEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8140 00004EED FF5009                  	call SOB_CLOSURE_CODE(rax)
  8141 00004EF0 50                      	push rax
  8142 00004EF1 488B4520                	mov rax, PARAM(0)	; param s
  8143 00004EF5 50                      	push rax
  8144 00004EF6 6A01                    	push 1	; arg count
  8145 00004EF8 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  8146 00004F00 803805                  	cmp byte [rax], T_undefined
  8147 00004F03 0F84F2060100            	je L_error_fvar_undefined
  8148 00004F09 803804                  	cmp byte [rax], T_closure
  8149 00004F0C 0F856D070100            	jne L_error_non_closure
  8150 00004F12 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8151 00004F15 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8152 00004F18 50                      	push rax
  8153 00004F19 6A02                    	push 2	; arg count
  8154 00004F1B 488B4510                	mov rax, ENV
  8155 00004F1F 488B00                  	mov rax, qword [rax + 8 * 0]
  8156 00004F22 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8157 00004F25 488B00                  	mov rax, qword [rax]
  8158 00004F28 803804                  	cmp byte [rax], T_closure
  8159 00004F2B 0F854E070100            	jne L_error_non_closure
  8160 00004F31 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8161                                  
  8162                                  	; recycling the current frame
  8163 00004F34 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8164 00004F37 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8165 00004F3A B906000000              	mov rcx, 2 + 4
  8166 00004F3F 488B5D18                	mov rbx, COUNT
  8167 00004F43 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8168 00004F48 488D55F8                	lea rdx, [rbp - 8 * 1]
  8169                                  .L_tc_recycle_frame_loop_06f1:
  8170 00004F4C 4883F900                	cmp rcx, 0
  8171 00004F50 7413                    	je .L_tc_recycle_frame_done_06f1
  8172 00004F52 488B32                  	mov rsi, qword [rdx]
  8173 00004F55 488933                  	mov qword [rbx], rsi
  8174 00004F58 48FFC9                  	dec rcx
  8175 00004F5B 4883EB08                	sub rbx, 8 * 1
  8176 00004F5F 4883EA08                	sub rdx, 8 * 1
  8177 00004F63 EBE7                    	jmp .L_tc_recycle_frame_loop_06f1
  8178                                  .L_tc_recycle_frame_done_06f1:
  8179 00004F65 488D6308                	lea rsp, [rbx + 8 * 1]
  8180 00004F69 5D                      	pop rbp	; the proc will restore it!
  8181 00004F6A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8182                                  
  8183                                  	.L_if_end_03d9:
  8184 00004F6D C9                      	leave
  8185 00004F6E C21800                  	ret AND_KILL_FRAME(1)
  8186                                  .L_lambda_opt_end_00b6:	; new closure is in rax
  8187 00004F71 C9                      	leave
  8188 00004F72 C22000                  	ret AND_KILL_FRAME(2)
  8189                                  .L_lambda_simple_end_0551:	; new closure is in rax
  8190 00004F75 803804                  	cmp byte [rax], T_closure
  8191 00004F78 0F8501070100            	jne L_error_non_closure
  8192 00004F7E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8193 00004F81 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8194 00004F84 48890425[4D150000]      	mov qword [free_var_113], rax
  8195 00004F8C 48B8-                   	mov rax, sob_void
  8195 00004F8E [0000000000000000] 
  8196                                  
  8197 00004F96 4889C7                  	mov rdi, rax
  8198 00004F99 E89C080100              	call print_sexpr_if_not_void
  8199                                  
  8200 00004F9E 48B8-                   	mov rax, L_constants + 1881
  8200 00004FA0 [5907000000000000] 
  8201 00004FA8 50                      	push rax
  8202 00004FA9 6A01                    	push 1	; arg count
  8203 00004FAB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8204 00004FB0 E873070100              	call malloc
  8205 00004FB5 50                      	push rax
  8206 00004FB6 BF00000000              	mov rdi, 8 * 0	; new rib
  8207 00004FBB E868070100              	call malloc
  8208 00004FC0 50                      	push rax
  8209 00004FC1 BF08000000              	mov rdi, 8 * 1	; extended env
  8210 00004FC6 E85D070100              	call malloc
  8211 00004FCB 488B7D10                	mov rdi, ENV
  8212 00004FCF BE00000000              	mov rsi, 0
  8213 00004FD4 BA01000000              	mov rdx, 1
  8214                                  .L_lambda_simple_env_loop_0554:	; ext_env[i + 1] <-- env[i]
  8215 00004FD9 4883FE00                	cmp rsi, 0
  8216 00004FDD 7410                    	je .L_lambda_simple_env_end_0554
  8217 00004FDF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8218 00004FE3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8219 00004FE7 48FFC6                  	inc rsi
  8220 00004FEA 48FFC2                  	inc rdx
  8221 00004FED EBEA                    	jmp .L_lambda_simple_env_loop_0554
  8222                                  .L_lambda_simple_env_end_0554:
  8223 00004FEF 5B                      	pop rbx
  8224 00004FF0 BE00000000              	mov rsi, 0
  8225                                  .L_lambda_simple_params_loop_0554:	; copy params
  8226 00004FF5 4883FE00                	cmp rsi, 0
  8227 00004FF9 740E                    	je .L_lambda_simple_params_end_0554
  8228 00004FFB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8229 00005000 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8230 00005004 48FFC6                  	inc rsi
  8231 00005007 EBEC                    	jmp .L_lambda_simple_params_loop_0554
  8232                                  .L_lambda_simple_params_end_0554:
  8233 00005009 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8234 0000500C 4889C3                  	mov rbx, rax
  8235 0000500F 58                      	pop rax
  8236 00005010 C60004                  	mov byte [rax], T_closure
  8237 00005013 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8238 00005017 48C74009[24500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0554
  8239 0000501F E9DA030000              	jmp .L_lambda_simple_end_0554
  8240                                  .L_lambda_simple_code_0554:	; lambda-simple body
  8241 00005024 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8242 0000502A 740B                    	je .L_lambda_simple_arity_check_ok_0554
  8243 0000502C FF742410                	push qword [rsp + 8 * 2]
  8244 00005030 6A01                    	push 1
  8245 00005032 E9AA060100              	jmp L_error_incorrect_arity_simple
  8246                                  .L_lambda_simple_arity_check_ok_0554:
  8247 00005037 C8000000                	enter 0, 0
  8248                                  
  8249 0000503B BF08000000              	mov rdi, 8
  8250 00005040 E8E3060100              	call malloc
  8251 00005045 488B5D20                	mov rbx, PARAM(0)	; param run
  8252 00005049 488918                  	mov [rax], rbx	; box run
  8253 0000504C 48894520                	mov PARAM(0), rax	;replace param run with box
  8254 00005050 48B8-                   	mov rax, sob_void
  8254 00005052 [0000000000000000] 
  8255                                  
  8256 0000505A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8257 0000505F E8C4060100              	call malloc
  8258 00005064 50                      	push rax
  8259 00005065 BF08000000              	mov rdi, 8 * 1	; new rib
  8260 0000506A E8B9060100              	call malloc
  8261 0000506F 50                      	push rax
  8262 00005070 BF10000000              	mov rdi, 8 * 2	; extended env
  8263 00005075 E8AE060100              	call malloc
  8264 0000507A 488B7D10                	mov rdi, ENV
  8265 0000507E BE00000000              	mov rsi, 0
  8266 00005083 BA01000000              	mov rdx, 1
  8267                                  .L_lambda_simple_env_loop_0555:	; ext_env[i + 1] <-- env[i]
  8268 00005088 4883FE01                	cmp rsi, 1
  8269 0000508C 7410                    	je .L_lambda_simple_env_end_0555
  8270 0000508E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8271 00005092 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8272 00005096 48FFC6                  	inc rsi
  8273 00005099 48FFC2                  	inc rdx
  8274 0000509C EBEA                    	jmp .L_lambda_simple_env_loop_0555
  8275                                  .L_lambda_simple_env_end_0555:
  8276 0000509E 5B                      	pop rbx
  8277 0000509F BE00000000              	mov rsi, 0
  8278                                  .L_lambda_simple_params_loop_0555:	; copy params
  8279 000050A4 4883FE01                	cmp rsi, 1
  8280 000050A8 740E                    	je .L_lambda_simple_params_end_0555
  8281 000050AA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8282 000050AF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8283 000050B3 48FFC6                  	inc rsi
  8284 000050B6 EBEC                    	jmp .L_lambda_simple_params_loop_0555
  8285                                  .L_lambda_simple_params_end_0555:
  8286 000050B8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8287 000050BB 4889C3                  	mov rbx, rax
  8288 000050BE 58                      	pop rax
  8289 000050BF C60004                  	mov byte [rax], T_closure
  8290 000050C2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8291 000050C6 48C74009[D3500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0555
  8292 000050CE E95F010000              	jmp .L_lambda_simple_end_0555
  8293                                  .L_lambda_simple_code_0555:	; lambda-simple body
  8294 000050D3 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8295 000050D9 740B                    	je .L_lambda_simple_arity_check_ok_0555
  8296 000050DB FF742410                	push qword [rsp + 8 * 2]
  8297 000050DF 6A03                    	push 3
  8298 000050E1 E9FB050100              	jmp L_error_incorrect_arity_simple
  8299                                  .L_lambda_simple_arity_check_ok_0555:
  8300 000050E6 C8000000                	enter 0, 0
  8301 000050EA 488B4530                	mov rax, PARAM(2)	; param ss
  8302 000050EE 50                      	push rax
  8303 000050EF 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
  8304 000050F7 803805                  	cmp byte [rax], T_undefined
  8305 000050FA 0F84FB040100            	je L_error_fvar_undefined
  8306 00005100 50                      	push rax
  8307 00005101 6A02                    	push 2	; arg count
  8308 00005103 488B0425[F8140000]      	mov rax, qword [free_var_108]	; free var ormap
  8309 0000510B 803805                  	cmp byte [rax], T_undefined
  8310 0000510E 0F84E7040100            	je L_error_fvar_undefined
  8311 00005114 803804                  	cmp byte [rax], T_closure
  8312 00005117 0F8562050100            	jne L_error_non_closure
  8313 0000511D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8314 00005120 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8315                                  
  8316 00005123 483D[02000000]          	cmp rax, sob_boolean_false
  8317 00005129 7409                    	je .L_if_else_03da
  8318 0000512B 488B4528                	mov rax, PARAM(1)	; param unit
  8319                                  
  8320 0000512F E9FA000000              	jmp .L_if_end_03da
  8321                                  
  8322                                  	.L_if_else_03da:
  8323                                  	; preparing a tail-call
  8324 00005134 488B4530                	mov rax, PARAM(2)	; param ss
  8325 00005138 50                      	push rax
  8326 00005139 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  8327 00005141 803805                  	cmp byte [rax], T_undefined
  8328 00005144 0F84B1040100            	je L_error_fvar_undefined
  8329 0000514A 50                      	push rax
  8330 0000514B 6A02                    	push 2	; arg count
  8331 0000514D 488B0425[09150000]      	mov rax, qword [free_var_109]	; free var map
  8332 00005155 803805                  	cmp byte [rax], T_undefined
  8333 00005158 0F849D040100            	je L_error_fvar_undefined
  8334 0000515E 803804                  	cmp byte [rax], T_closure
  8335 00005161 0F8518050100            	jne L_error_non_closure
  8336 00005167 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8337 0000516A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8338 0000516D 50                      	push rax
  8339 0000516E 488B4530                	mov rax, PARAM(2)	; param ss
  8340 00005172 50                      	push rax
  8341 00005173 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  8342 0000517B 803805                  	cmp byte [rax], T_undefined
  8343 0000517E 0F8477040100            	je L_error_fvar_undefined
  8344 00005184 50                      	push rax
  8345 00005185 6A02                    	push 2	; arg count
  8346 00005187 488B0425[09150000]      	mov rax, qword [free_var_109]	; free var map
  8347 0000518F 803805                  	cmp byte [rax], T_undefined
  8348 00005192 0F8463040100            	je L_error_fvar_undefined
  8349 00005198 803804                  	cmp byte [rax], T_closure
  8350 0000519B 0F85DE040100            	jne L_error_non_closure
  8351 000051A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8352 000051A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8353 000051A7 50                      	push rax
  8354 000051A8 488B4528                	mov rax, PARAM(1)	; param unit
  8355 000051AC 50                      	push rax
  8356 000051AD 488B4520                	mov rax, PARAM(0)	; param f
  8357 000051B1 50                      	push rax
  8358 000051B2 6A03                    	push 3	; arg count
  8359 000051B4 488B0425[E7140000]      	mov rax, qword [free_var_107]	; free var apply
  8360 000051BC 803805                  	cmp byte [rax], T_undefined
  8361 000051BF 0F8436040100            	je L_error_fvar_undefined
  8362 000051C5 803804                  	cmp byte [rax], T_closure
  8363 000051C8 0F85B1040100            	jne L_error_non_closure
  8364 000051CE FF7001                  	push SOB_CLOSURE_ENV(rax)
  8365 000051D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8366 000051D4 50                      	push rax
  8367 000051D5 488B4520                	mov rax, PARAM(0)	; param f
  8368 000051D9 50                      	push rax
  8369 000051DA 6A03                    	push 3	; arg count
  8370 000051DC 488B4510                	mov rax, ENV
  8371 000051E0 488B00                  	mov rax, qword [rax + 8 * 0]
  8372 000051E3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8373 000051E6 488B00                  	mov rax, qword [rax]
  8374 000051E9 803804                  	cmp byte [rax], T_closure
  8375 000051EC 0F858D040100            	jne L_error_non_closure
  8376 000051F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8377                                  
  8378                                  	; recycling the current frame
  8379 000051F5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8380 000051F8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8381 000051FB B907000000              	mov rcx, 3 + 4
  8382 00005200 488B5D18                	mov rbx, COUNT
  8383 00005204 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8384 00005209 488D55F8                	lea rdx, [rbp - 8 * 1]
  8385                                  .L_tc_recycle_frame_loop_06f2:
  8386 0000520D 4883F900                	cmp rcx, 0
  8387 00005211 7413                    	je .L_tc_recycle_frame_done_06f2
  8388 00005213 488B32                  	mov rsi, qword [rdx]
  8389 00005216 488933                  	mov qword [rbx], rsi
  8390 00005219 48FFC9                  	dec rcx
  8391 0000521C 4883EB08                	sub rbx, 8 * 1
  8392 00005220 4883EA08                	sub rdx, 8 * 1
  8393 00005224 EBE7                    	jmp .L_tc_recycle_frame_loop_06f2
  8394                                  .L_tc_recycle_frame_done_06f2:
  8395 00005226 488D6308                	lea rsp, [rbx + 8 * 1]
  8396 0000522A 5D                      	pop rbp	; the proc will restore it!
  8397 0000522B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8398                                  
  8399                                  	.L_if_end_03da:
  8400 0000522E C9                      	leave
  8401 0000522F C22800                  	ret AND_KILL_FRAME(3)
  8402                                  .L_lambda_simple_end_0555:	; new closure is in rax
  8403                                  
  8404 00005232 50                      	push rax
  8405 00005233 488B4520                	mov rax, PARAM(0)	; param run
  8406                                  
  8407 00005237 8F00                    	pop qword[rax]
  8408 00005239 48B8-                   	mov rax, sob_void
  8408 0000523B [0000000000000000] 
  8409                                  
  8410 00005243 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8411 00005248 E8DB040100              	call malloc
  8412 0000524D 50                      	push rax
  8413 0000524E BF08000000              	mov rdi, 8 * 1	; new rib
  8414 00005253 E8D0040100              	call malloc
  8415 00005258 50                      	push rax
  8416 00005259 BF10000000              	mov rdi, 8 * 2	; extended env
  8417 0000525E E8C5040100              	call malloc
  8418 00005263 488B7D10                	mov rdi, ENV
  8419 00005267 BE00000000              	mov rsi, 0
  8420 0000526C BA01000000              	mov rdx, 1
  8421                                  .L_lambda_opt_env_loop_00b7:	; ext_env[i + 1] <-- env[i]
  8422 00005271 4883FE01                	cmp rsi, 1
  8423 00005275 7410                    	je .L_lambda_opt_env_end_00b7
  8424 00005277 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8425 0000527B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8426 0000527F 48FFC6                  	inc rsi
  8427 00005282 48FFC2                  	inc rdx
  8428 00005285 EBEA                    	jmp .L_lambda_opt_env_loop_00b7
  8429                                  .L_lambda_opt_env_end_00b7:
  8430 00005287 5B                      	pop rbx
  8431 00005288 BE00000000              	mov rsi, 0
  8432                                  .L_lambda_opt_params_loop_00b7:	; copy params
  8433 0000528D 4883FE01                	cmp rsi, 1
  8434 00005291 740E                    	je .L_lambda_opt_params_end_00b7
  8435 00005293 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8436 00005298 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8437 0000529C 48FFC6                  	inc rsi
  8438 0000529F EBEC                    	jmp .L_lambda_opt_params_loop_00b7
  8439                                  .L_lambda_opt_params_end_00b7:
  8440 000052A1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8441 000052A4 4889C3                  	mov rbx, rax
  8442 000052A7 58                      	pop rax
  8443 000052A8 C60004                  	mov byte [rax], T_closure
  8444 000052AB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8445 000052AF 48C74009[BC520000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b7
  8446 000052B7 E93E010000              	jmp .L_lambda_opt_end_00b7
  8447                                  .L_lambda_opt_code_00b7:	; lambda-simple body
  8448 000052BC 48837C241002            	cmp qword [rsp + 8 * 2], 2 ;	 check num of args
  8449 000052C2 740D                    	je .L_lambda_opt_arity_check_exact_00b7 ;	 if equal, go to exact arity
  8450 000052C4 7F42                    	jg .L_lambda_opt_arity_check_more_00b7 ;	 if greater than, go to arity more
  8451 000052C6 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  8452 000052CA 6A02                     	push 2
  8453 000052CC E924040100              	jmp L_error_incorrect_arity_opt
  8454                                  	.L_lambda_opt_arity_check_exact_00b7:
  8455 000052D1 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  8456 000052D6 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  8457 000052DB 4883EC08                	sub rsp, 8
  8458 000052DF 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  8459                                  	.L_lambda_opt_exact_shifting_loop_00b7:
  8460 000052E3 488B5108                	mov rdx, [rcx + 8]
  8461 000052E7 488911                  	mov [rcx], rdx
  8462 000052EA 4883C108                	add rcx, 8
  8463 000052EE 4839CB                  	cmp rbx, rcx
  8464 000052F1 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00b7
  8465                                  	.L_lambda_opt_exact_shifting_loop_end_00b7:
  8466 000052F3 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  8467 000052FA 4883C001                	add rax, 1 ; 	arg count += 1
  8468 000052FE 4889442410              	mov qword [rsp + 8 * 2], rax
  8469 00005303 E987000000              	jmp .L_lambda_opt_stack_adjusted_00b7
  8470                                  	.L_lambda_opt_arity_check_more_00b7:
  8471 00005308 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  8471 0000530A [0100000000000000] 
  8472 00005312 48837C241003            	cmp qword [rsp + 8 * 2], 3;	 compare count to params
  8473 00005318 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00b7
  8474                                  	.L_lambda_opt_stack_shrink_loop_00b7:
  8475 0000531A BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8476 0000531F E804040100              	call malloc ;	 allocated memory for the optional scheme list
  8477 00005324 C60021                  	mov byte[rax], T_pair ;	 set type pair
  8478 00005327 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8479 0000532B 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  8480 0000532E 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  8481 00005333 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  8482 00005338 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  8483 0000533C 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  8484                                  	.L_lambda_opt_more_shifting_loop_00b7:
  8485 00005341 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  8486 00005344 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  8487 00005348 4883EB08                	sub rbx, 8 
  8488 0000534C 4839DC                  	cmp rsp, rbx
  8489 0000534F 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00b7
  8490                                  	.L_lambda_opt_more_shifting_loop_end_00b7:
  8491 00005351 4883C408                	add rsp, 8 ;	 update rsp
  8492 00005355 488B5C2410              	mov rbx, [rsp + 8 * 2]
  8493 0000535A 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  8494 0000535E 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  8495 00005363 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8496 00005369 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00b7
  8497                                  	.L_lambda_opt_stack_shrink_loop_exit_00b7:
  8498 0000536B 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  8499 00005370 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  8500 00005375 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8501 0000537A E8A9030100              	call malloc ;	 allocated memory for the optional scheme list
  8502 0000537F C60021                  	mov byte[rax], T_pair ;	 set type pair
  8503 00005382 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8504 00005386 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  8505 0000538A 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  8506                                  	.L_lambda_opt_stack_adjusted_00b7:
  8507 0000538F C8000000                	enter 0, 0
  8508                                  	; preparing a tail-call
  8509 00005393 488B4530                	mov rax, PARAM(2)	; param ss
  8510 00005397 50                      	push rax
  8511 00005398 488B4528                	mov rax, PARAM(1)	; param unit
  8512 0000539C 50                      	push rax
  8513 0000539D 488B4520                	mov rax, PARAM(0)	; param f
  8514 000053A1 50                      	push rax
  8515 000053A2 6A03                    	push 3	; arg count
  8516 000053A4 488B4510                	mov rax, ENV
  8517 000053A8 488B00                  	mov rax, qword [rax + 8 * 0]
  8518 000053AB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8519 000053AE 488B00                  	mov rax, qword [rax]
  8520 000053B1 803804                  	cmp byte [rax], T_closure
  8521 000053B4 0F85C5020100            	jne L_error_non_closure
  8522 000053BA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8523                                  
  8524                                  	; recycling the current frame
  8525 000053BD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8526 000053C0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8527 000053C3 B907000000              	mov rcx, 3 + 4
  8528 000053C8 488B5D18                	mov rbx, COUNT
  8529 000053CC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8530 000053D1 488D55F8                	lea rdx, [rbp - 8 * 1]
  8531                                  .L_tc_recycle_frame_loop_06f3:
  8532 000053D5 4883F900                	cmp rcx, 0
  8533 000053D9 7413                    	je .L_tc_recycle_frame_done_06f3
  8534 000053DB 488B32                  	mov rsi, qword [rdx]
  8535 000053DE 488933                  	mov qword [rbx], rsi
  8536 000053E1 48FFC9                  	dec rcx
  8537 000053E4 4883EB08                	sub rbx, 8 * 1
  8538 000053E8 4883EA08                	sub rdx, 8 * 1
  8539 000053EC EBE7                    	jmp .L_tc_recycle_frame_loop_06f3
  8540                                  .L_tc_recycle_frame_done_06f3:
  8541 000053EE 488D6308                	lea rsp, [rbx + 8 * 1]
  8542 000053F2 5D                      	pop rbp	; the proc will restore it!
  8543 000053F3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8544 000053F6 C9                      	leave
  8545 000053F7 C22800                  	ret AND_KILL_FRAME(3)
  8546                                  .L_lambda_opt_end_00b7:	; new closure is in rax
  8547 000053FA C9                      	leave
  8548 000053FB C21800                  	ret AND_KILL_FRAME(1)
  8549                                  .L_lambda_simple_end_0554:	; new closure is in rax
  8550 000053FE 803804                  	cmp byte [rax], T_closure
  8551 00005401 0F8578020100            	jne L_error_non_closure
  8552 00005407 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8553 0000540A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8554 0000540D 48890425[3C150000]      	mov qword [free_var_112], rax
  8555 00005415 48B8-                   	mov rax, sob_void
  8555 00005417 [0000000000000000] 
  8556                                  
  8557 0000541F 4889C7                  	mov rdi, rax
  8558 00005422 E813040100              	call print_sexpr_if_not_void
  8559                                  
  8560 00005427 48B8-                   	mov rax, L_constants + 1881
  8560 00005429 [5907000000000000] 
  8561 00005431 50                      	push rax
  8562 00005432 6A01                    	push 1	; arg count
  8563 00005434 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8564 00005439 E8EA020100              	call malloc
  8565 0000543E 50                      	push rax
  8566 0000543F BF00000000              	mov rdi, 8 * 0	; new rib
  8567 00005444 E8DF020100              	call malloc
  8568 00005449 50                      	push rax
  8569 0000544A BF08000000              	mov rdi, 8 * 1	; extended env
  8570 0000544F E8D4020100              	call malloc
  8571 00005454 488B7D10                	mov rdi, ENV
  8572 00005458 BE00000000              	mov rsi, 0
  8573 0000545D BA01000000              	mov rdx, 1
  8574                                  .L_lambda_simple_env_loop_0556:	; ext_env[i + 1] <-- env[i]
  8575 00005462 4883FE00                	cmp rsi, 0
  8576 00005466 7410                    	je .L_lambda_simple_env_end_0556
  8577 00005468 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8578 0000546C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8579 00005470 48FFC6                  	inc rsi
  8580 00005473 48FFC2                  	inc rdx
  8581 00005476 EBEA                    	jmp .L_lambda_simple_env_loop_0556
  8582                                  .L_lambda_simple_env_end_0556:
  8583 00005478 5B                      	pop rbx
  8584 00005479 BE00000000              	mov rsi, 0
  8585                                  .L_lambda_simple_params_loop_0556:	; copy params
  8586 0000547E 4883FE00                	cmp rsi, 0
  8587 00005482 740E                    	je .L_lambda_simple_params_end_0556
  8588 00005484 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8589 00005489 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8590 0000548D 48FFC6                  	inc rsi
  8591 00005490 EBEC                    	jmp .L_lambda_simple_params_loop_0556
  8592                                  .L_lambda_simple_params_end_0556:
  8593 00005492 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8594 00005495 4889C3                  	mov rbx, rax
  8595 00005498 58                      	pop rax
  8596 00005499 C60004                  	mov byte [rax], T_closure
  8597 0000549C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8598 000054A0 48C74009[AD540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0556
  8599 000054A8 E92B040000              	jmp .L_lambda_simple_end_0556
  8600                                  .L_lambda_simple_code_0556:	; lambda-simple body
  8601 000054AD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8602 000054B3 740B                    	je .L_lambda_simple_arity_check_ok_0556
  8603 000054B5 FF742410                	push qword [rsp + 8 * 2]
  8604 000054B9 6A01                    	push 1
  8605 000054BB E921020100              	jmp L_error_incorrect_arity_simple
  8606                                  .L_lambda_simple_arity_check_ok_0556:
  8607 000054C0 C8000000                	enter 0, 0
  8608                                  
  8609 000054C4 BF08000000              	mov rdi, 8
  8610 000054C9 E85A020100              	call malloc
  8611 000054CE 488B5D20                	mov rbx, PARAM(0)	; param run
  8612 000054D2 488918                  	mov [rax], rbx	; box run
  8613 000054D5 48894520                	mov PARAM(0), rax	;replace param run with box
  8614 000054D9 48B8-                   	mov rax, sob_void
  8614 000054DB [0000000000000000] 
  8615                                  
  8616 000054E3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8617 000054E8 E83B020100              	call malloc
  8618 000054ED 50                      	push rax
  8619 000054EE BF08000000              	mov rdi, 8 * 1	; new rib
  8620 000054F3 E830020100              	call malloc
  8621 000054F8 50                      	push rax
  8622 000054F9 BF10000000              	mov rdi, 8 * 2	; extended env
  8623 000054FE E825020100              	call malloc
  8624 00005503 488B7D10                	mov rdi, ENV
  8625 00005507 BE00000000              	mov rsi, 0
  8626 0000550C BA01000000              	mov rdx, 1
  8627                                  .L_lambda_simple_env_loop_0557:	; ext_env[i + 1] <-- env[i]
  8628 00005511 4883FE01                	cmp rsi, 1
  8629 00005515 7410                    	je .L_lambda_simple_env_end_0557
  8630 00005517 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8631 0000551B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8632 0000551F 48FFC6                  	inc rsi
  8633 00005522 48FFC2                  	inc rdx
  8634 00005525 EBEA                    	jmp .L_lambda_simple_env_loop_0557
  8635                                  .L_lambda_simple_env_end_0557:
  8636 00005527 5B                      	pop rbx
  8637 00005528 BE00000000              	mov rsi, 0
  8638                                  .L_lambda_simple_params_loop_0557:	; copy params
  8639 0000552D 4883FE01                	cmp rsi, 1
  8640 00005531 740E                    	je .L_lambda_simple_params_end_0557
  8641 00005533 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8642 00005538 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8643 0000553C 48FFC6                  	inc rsi
  8644 0000553F EBEC                    	jmp .L_lambda_simple_params_loop_0557
  8645                                  .L_lambda_simple_params_end_0557:
  8646 00005541 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8647 00005544 4889C3                  	mov rbx, rax
  8648 00005547 58                      	pop rax
  8649 00005548 C60004                  	mov byte [rax], T_closure
  8650 0000554B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8651 0000554F 48C74009[5C550000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0557
  8652 00005557 E9B0010000              	jmp .L_lambda_simple_end_0557
  8653                                  .L_lambda_simple_code_0557:	; lambda-simple body
  8654 0000555C 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8655 00005562 740B                    	je .L_lambda_simple_arity_check_ok_0557
  8656 00005564 FF742410                	push qword [rsp + 8 * 2]
  8657 00005568 6A03                    	push 3
  8658 0000556A E972010100              	jmp L_error_incorrect_arity_simple
  8659                                  .L_lambda_simple_arity_check_ok_0557:
  8660 0000556F C8000000                	enter 0, 0
  8661 00005573 488B4530                	mov rax, PARAM(2)	; param ss
  8662 00005577 50                      	push rax
  8663 00005578 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
  8664 00005580 803805                  	cmp byte [rax], T_undefined
  8665 00005583 0F8472000100            	je L_error_fvar_undefined
  8666 00005589 50                      	push rax
  8667 0000558A 6A02                    	push 2	; arg count
  8668 0000558C 488B0425[F8140000]      	mov rax, qword [free_var_108]	; free var ormap
  8669 00005594 803805                  	cmp byte [rax], T_undefined
  8670 00005597 0F845E000100            	je L_error_fvar_undefined
  8671 0000559D 803804                  	cmp byte [rax], T_closure
  8672 000055A0 0F85D9000100            	jne L_error_non_closure
  8673 000055A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8674 000055A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8675                                  
  8676 000055AC 483D[02000000]          	cmp rax, sob_boolean_false
  8677 000055B2 7409                    	je .L_if_else_03db
  8678 000055B4 488B4528                	mov rax, PARAM(1)	; param unit
  8679                                  
  8680 000055B8 E94B010000              	jmp .L_if_end_03db
  8681                                  
  8682                                  	.L_if_else_03db:
  8683                                  	; preparing a tail-call
  8684 000055BD 48B8-                   	mov rax, L_constants + 1
  8684 000055BF [0100000000000000] 
  8685 000055C7 50                      	push rax
  8686 000055C8 488B4530                	mov rax, PARAM(2)	; param ss
  8687 000055CC 50                      	push rax
  8688 000055CD 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
  8689 000055D5 803805                  	cmp byte [rax], T_undefined
  8690 000055D8 0F841D000100            	je L_error_fvar_undefined
  8691 000055DE 50                      	push rax
  8692 000055DF 6A02                    	push 2	; arg count
  8693 000055E1 488B0425[09150000]      	mov rax, qword [free_var_109]	; free var map
  8694 000055E9 803805                  	cmp byte [rax], T_undefined
  8695 000055EC 0F8409000100            	je L_error_fvar_undefined
  8696 000055F2 803804                  	cmp byte [rax], T_closure
  8697 000055F5 0F8584000100            	jne L_error_non_closure
  8698 000055FB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8699 000055FE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8700 00005601 50                      	push rax
  8701 00005602 488B4528                	mov rax, PARAM(1)	; param unit
  8702 00005606 50                      	push rax
  8703 00005607 488B4520                	mov rax, PARAM(0)	; param f
  8704 0000560B 50                      	push rax
  8705 0000560C 6A03                    	push 3	; arg count
  8706 0000560E 488B4510                	mov rax, ENV
  8707 00005612 488B00                  	mov rax, qword [rax + 8 * 0]
  8708 00005615 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8709 00005618 488B00                  	mov rax, qword [rax]
  8710 0000561B 803804                  	cmp byte [rax], T_closure
  8711 0000561E 0F855B000100            	jne L_error_non_closure
  8712 00005624 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8713 00005627 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8714 0000562A 50                      	push rax
  8715 0000562B 6A02                    	push 2	; arg count
  8716 0000562D 488B0425[A90E0000]      	mov rax, qword [free_var_13]	; free var cons
  8717 00005635 803805                  	cmp byte [rax], T_undefined
  8718 00005638 0F84BDFF0000            	je L_error_fvar_undefined
  8719 0000563E 803804                  	cmp byte [rax], T_closure
  8720 00005641 0F8538000100            	jne L_error_non_closure
  8721 00005647 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8722 0000564A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8723 0000564D 50                      	push rax
  8724 0000564E 488B4530                	mov rax, PARAM(2)	; param ss
  8725 00005652 50                      	push rax
  8726 00005653 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
  8727 0000565B 803805                  	cmp byte [rax], T_undefined
  8728 0000565E 0F8497FF0000            	je L_error_fvar_undefined
  8729 00005664 50                      	push rax
  8730 00005665 6A02                    	push 2	; arg count
  8731 00005667 488B0425[09150000]      	mov rax, qword [free_var_109]	; free var map
  8732 0000566F 803805                  	cmp byte [rax], T_undefined
  8733 00005672 0F8483FF0000            	je L_error_fvar_undefined
  8734 00005678 803804                  	cmp byte [rax], T_closure
  8735 0000567B 0F85FEFF0000            	jne L_error_non_closure
  8736 00005681 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8737 00005684 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8738 00005687 50                      	push rax
  8739 00005688 6A02                    	push 2	; arg count
  8740 0000568A 488B0425[4D150000]      	mov rax, qword [free_var_113]	; free var append
  8741 00005692 803805                  	cmp byte [rax], T_undefined
  8742 00005695 0F8460FF0000            	je L_error_fvar_undefined
  8743 0000569B 803804                  	cmp byte [rax], T_closure
  8744 0000569E 0F85DBFF0000            	jne L_error_non_closure
  8745 000056A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8746 000056A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8747 000056AA 50                      	push rax
  8748 000056AB 488B4520                	mov rax, PARAM(0)	; param f
  8749 000056AF 50                      	push rax
  8750 000056B0 6A02                    	push 2	; arg count
  8751 000056B2 488B0425[E7140000]      	mov rax, qword [free_var_107]	; free var apply
  8752 000056BA 803805                  	cmp byte [rax], T_undefined
  8753 000056BD 0F8438FF0000            	je L_error_fvar_undefined
  8754 000056C3 803804                  	cmp byte [rax], T_closure
  8755 000056C6 0F85B3FF0000            	jne L_error_non_closure
  8756 000056CC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8757                                  
  8758                                  	; recycling the current frame
  8759 000056CF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8760 000056D2 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8761 000056D5 B906000000              	mov rcx, 2 + 4
  8762 000056DA 488B5D18                	mov rbx, COUNT
  8763 000056DE 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8764 000056E3 488D55F8                	lea rdx, [rbp - 8 * 1]
  8765                                  .L_tc_recycle_frame_loop_06f4:
  8766 000056E7 4883F900                	cmp rcx, 0
  8767 000056EB 7413                    	je .L_tc_recycle_frame_done_06f4
  8768 000056ED 488B32                  	mov rsi, qword [rdx]
  8769 000056F0 488933                  	mov qword [rbx], rsi
  8770 000056F3 48FFC9                  	dec rcx
  8771 000056F6 4883EB08                	sub rbx, 8 * 1
  8772 000056FA 4883EA08                	sub rdx, 8 * 1
  8773 000056FE EBE7                    	jmp .L_tc_recycle_frame_loop_06f4
  8774                                  .L_tc_recycle_frame_done_06f4:
  8775 00005700 488D6308                	lea rsp, [rbx + 8 * 1]
  8776 00005704 5D                      	pop rbp	; the proc will restore it!
  8777 00005705 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8778                                  
  8779                                  	.L_if_end_03db:
  8780 00005708 C9                      	leave
  8781 00005709 C22800                  	ret AND_KILL_FRAME(3)
  8782                                  .L_lambda_simple_end_0557:	; new closure is in rax
  8783                                  
  8784 0000570C 50                      	push rax
  8785 0000570D 488B4520                	mov rax, PARAM(0)	; param run
  8786                                  
  8787 00005711 8F00                    	pop qword[rax]
  8788 00005713 48B8-                   	mov rax, sob_void
  8788 00005715 [0000000000000000] 
  8789                                  
  8790 0000571D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8791 00005722 E801000100              	call malloc
  8792 00005727 50                      	push rax
  8793 00005728 BF08000000              	mov rdi, 8 * 1	; new rib
  8794 0000572D E8F6FF0000              	call malloc
  8795 00005732 50                      	push rax
  8796 00005733 BF10000000              	mov rdi, 8 * 2	; extended env
  8797 00005738 E8EBFF0000              	call malloc
  8798 0000573D 488B7D10                	mov rdi, ENV
  8799 00005741 BE00000000              	mov rsi, 0
  8800 00005746 BA01000000              	mov rdx, 1
  8801                                  .L_lambda_opt_env_loop_00b8:	; ext_env[i + 1] <-- env[i]
  8802 0000574B 4883FE01                	cmp rsi, 1
  8803 0000574F 7410                    	je .L_lambda_opt_env_end_00b8
  8804 00005751 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8805 00005755 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8806 00005759 48FFC6                  	inc rsi
  8807 0000575C 48FFC2                  	inc rdx
  8808 0000575F EBEA                    	jmp .L_lambda_opt_env_loop_00b8
  8809                                  .L_lambda_opt_env_end_00b8:
  8810 00005761 5B                      	pop rbx
  8811 00005762 BE00000000              	mov rsi, 0
  8812                                  .L_lambda_opt_params_loop_00b8:	; copy params
  8813 00005767 4883FE01                	cmp rsi, 1
  8814 0000576B 740E                    	je .L_lambda_opt_params_end_00b8
  8815 0000576D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8816 00005772 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8817 00005776 48FFC6                  	inc rsi
  8818 00005779 EBEC                    	jmp .L_lambda_opt_params_loop_00b8
  8819                                  .L_lambda_opt_params_end_00b8:
  8820 0000577B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8821 0000577E 4889C3                  	mov rbx, rax
  8822 00005781 58                      	pop rax
  8823 00005782 C60004                  	mov byte [rax], T_closure
  8824 00005785 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8825 00005789 48C74009[96570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b8
  8826 00005791 E93E010000              	jmp .L_lambda_opt_end_00b8
  8827                                  .L_lambda_opt_code_00b8:	; lambda-simple body
  8828 00005796 48837C241002            	cmp qword [rsp + 8 * 2], 2 ;	 check num of args
  8829 0000579C 740D                    	je .L_lambda_opt_arity_check_exact_00b8 ;	 if equal, go to exact arity
  8830 0000579E 7F42                    	jg .L_lambda_opt_arity_check_more_00b8 ;	 if greater than, go to arity more
  8831 000057A0 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  8832 000057A4 6A02                     	push 2
  8833 000057A6 E94AFF0000              	jmp L_error_incorrect_arity_opt
  8834                                  	.L_lambda_opt_arity_check_exact_00b8:
  8835 000057AB 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  8836 000057B0 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  8837 000057B5 4883EC08                	sub rsp, 8
  8838 000057B9 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  8839                                  	.L_lambda_opt_exact_shifting_loop_00b8:
  8840 000057BD 488B5108                	mov rdx, [rcx + 8]
  8841 000057C1 488911                  	mov [rcx], rdx
  8842 000057C4 4883C108                	add rcx, 8
  8843 000057C8 4839CB                  	cmp rbx, rcx
  8844 000057CB 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00b8
  8845                                  	.L_lambda_opt_exact_shifting_loop_end_00b8:
  8846 000057CD 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  8847 000057D4 4883C001                	add rax, 1 ; 	arg count += 1
  8848 000057D8 4889442410              	mov qword [rsp + 8 * 2], rax
  8849 000057DD E987000000              	jmp .L_lambda_opt_stack_adjusted_00b8
  8850                                  	.L_lambda_opt_arity_check_more_00b8:
  8851 000057E2 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  8851 000057E4 [0100000000000000] 
  8852 000057EC 48837C241003            	cmp qword [rsp + 8 * 2], 3;	 compare count to params
  8853 000057F2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00b8
  8854                                  	.L_lambda_opt_stack_shrink_loop_00b8:
  8855 000057F4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8856 000057F9 E82AFF0000              	call malloc ;	 allocated memory for the optional scheme list
  8857 000057FE C60021                  	mov byte[rax], T_pair ;	 set type pair
  8858 00005801 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8859 00005805 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  8860 00005808 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  8861 0000580D 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  8862 00005812 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  8863 00005816 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  8864                                  	.L_lambda_opt_more_shifting_loop_00b8:
  8865 0000581B 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  8866 0000581E 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  8867 00005822 4883EB08                	sub rbx, 8 
  8868 00005826 4839DC                  	cmp rsp, rbx
  8869 00005829 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00b8
  8870                                  	.L_lambda_opt_more_shifting_loop_end_00b8:
  8871 0000582B 4883C408                	add rsp, 8 ;	 update rsp
  8872 0000582F 488B5C2410              	mov rbx, [rsp + 8 * 2]
  8873 00005834 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  8874 00005838 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  8875 0000583D 48837C241003            	cmp qword [rsp + 8 * 2], 3
  8876 00005843 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00b8
  8877                                  	.L_lambda_opt_stack_shrink_loop_exit_00b8:
  8878 00005845 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  8879 0000584A 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  8880 0000584F BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  8881 00005854 E8CFFE0000              	call malloc ;	 allocated memory for the optional scheme list
  8882 00005859 C60021                  	mov byte[rax], T_pair ;	 set type pair
  8883 0000585C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  8884 00005860 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  8885 00005864 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  8886                                  	.L_lambda_opt_stack_adjusted_00b8:
  8887 00005869 C8000000                	enter 0, 0
  8888                                  	; preparing a tail-call
  8889 0000586D 488B4530                	mov rax, PARAM(2)	; param ss
  8890 00005871 50                      	push rax
  8891 00005872 488B4528                	mov rax, PARAM(1)	; param unit
  8892 00005876 50                      	push rax
  8893 00005877 488B4520                	mov rax, PARAM(0)	; param f
  8894 0000587B 50                      	push rax
  8895 0000587C 6A03                    	push 3	; arg count
  8896 0000587E 488B4510                	mov rax, ENV
  8897 00005882 488B00                  	mov rax, qword [rax + 8 * 0]
  8898 00005885 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  8899 00005888 488B00                  	mov rax, qword [rax]
  8900 0000588B 803804                  	cmp byte [rax], T_closure
  8901 0000588E 0F85EBFD0000            	jne L_error_non_closure
  8902 00005894 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8903                                  
  8904                                  	; recycling the current frame
  8905 00005897 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  8906 0000589A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  8907 0000589D B907000000              	mov rcx, 3 + 4
  8908 000058A2 488B5D18                	mov rbx, COUNT
  8909 000058A6 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  8910 000058AB 488D55F8                	lea rdx, [rbp - 8 * 1]
  8911                                  .L_tc_recycle_frame_loop_06f5:
  8912 000058AF 4883F900                	cmp rcx, 0
  8913 000058B3 7413                    	je .L_tc_recycle_frame_done_06f5
  8914 000058B5 488B32                  	mov rsi, qword [rdx]
  8915 000058B8 488933                  	mov qword [rbx], rsi
  8916 000058BB 48FFC9                  	dec rcx
  8917 000058BE 4883EB08                	sub rbx, 8 * 1
  8918 000058C2 4883EA08                	sub rdx, 8 * 1
  8919 000058C6 EBE7                    	jmp .L_tc_recycle_frame_loop_06f5
  8920                                  .L_tc_recycle_frame_done_06f5:
  8921 000058C8 488D6308                	lea rsp, [rbx + 8 * 1]
  8922 000058CC 5D                      	pop rbp	; the proc will restore it!
  8923 000058CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8924 000058D0 C9                      	leave
  8925 000058D1 C22800                  	ret AND_KILL_FRAME(3)
  8926                                  .L_lambda_opt_end_00b8:	; new closure is in rax
  8927 000058D4 C9                      	leave
  8928 000058D5 C21800                  	ret AND_KILL_FRAME(1)
  8929                                  .L_lambda_simple_end_0556:	; new closure is in rax
  8930 000058D8 803804                  	cmp byte [rax], T_closure
  8931 000058DB 0F859EFD0000            	jne L_error_non_closure
  8932 000058E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8933 000058E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8934 000058E7 48890425[5E150000]      	mov qword [free_var_114], rax
  8935 000058EF 48B8-                   	mov rax, sob_void
  8935 000058F1 [0000000000000000] 
  8936                                  
  8937 000058F9 4889C7                  	mov rdi, rax
  8938 000058FC E839FF0000              	call print_sexpr_if_not_void
  8939                                  
  8940 00005901 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8941 00005906 E81DFE0000              	call malloc
  8942 0000590B 50                      	push rax
  8943 0000590C BF00000000              	mov rdi, 8 * 0	; new rib
  8944 00005911 E812FE0000              	call malloc
  8945 00005916 50                      	push rax
  8946 00005917 BF08000000              	mov rdi, 8 * 1	; extended env
  8947 0000591C E807FE0000              	call malloc
  8948 00005921 488B7D10                	mov rdi, ENV
  8949 00005925 BE00000000              	mov rsi, 0
  8950 0000592A BA01000000              	mov rdx, 1
  8951                                  .L_lambda_simple_env_loop_0558:	; ext_env[i + 1] <-- env[i]
  8952 0000592F 4883FE00                	cmp rsi, 0
  8953 00005933 7410                    	je .L_lambda_simple_env_end_0558
  8954 00005935 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8955 00005939 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8956 0000593D 48FFC6                  	inc rsi
  8957 00005940 48FFC2                  	inc rdx
  8958 00005943 EBEA                    	jmp .L_lambda_simple_env_loop_0558
  8959                                  .L_lambda_simple_env_end_0558:
  8960 00005945 5B                      	pop rbx
  8961 00005946 BE00000000              	mov rsi, 0
  8962                                  .L_lambda_simple_params_loop_0558:	; copy params
  8963 0000594B 4883FE00                	cmp rsi, 0
  8964 0000594F 740E                    	je .L_lambda_simple_params_end_0558
  8965 00005951 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8966 00005956 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8967 0000595A 48FFC6                  	inc rsi
  8968 0000595D EBEC                    	jmp .L_lambda_simple_params_loop_0558
  8969                                  .L_lambda_simple_params_end_0558:
  8970 0000595F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8971 00005962 4889C3                  	mov rbx, rax
  8972 00005965 58                      	pop rax
  8973 00005966 C60004                  	mov byte [rax], T_closure
  8974 00005969 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8975 0000596D 48C74009[7A590000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0558
  8976 00005975 E989000000              	jmp .L_lambda_simple_end_0558
  8977                                  .L_lambda_simple_code_0558:	; lambda-simple body
  8978 0000597A 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8979 00005980 740B                    	je .L_lambda_simple_arity_check_ok_0558
  8980 00005982 FF742410                	push qword [rsp + 8 * 2]
  8981 00005986 6A00                    	push 0
  8982 00005988 E954FD0000              	jmp L_error_incorrect_arity_simple
  8983                                  .L_lambda_simple_arity_check_ok_0558:
  8984 0000598D C8000000                	enter 0, 0
  8985                                  	; preparing a tail-call
  8986 00005991 48B8-                   	mov rax, L_constants + 2075
  8986 00005993 [1B08000000000000] 
  8987 0000599B 50                      	push rax
  8988 0000599C 48B8-                   	mov rax, L_constants + 2066
  8988 0000599E [1208000000000000] 
  8989 000059A6 50                      	push rax
  8990 000059A7 6A02                    	push 2	; arg count
  8991 000059A9 488B0425[96100000]      	mov rax, qword [free_var_42]	; free var error
  8992 000059B1 803805                  	cmp byte [rax], T_undefined
  8993 000059B4 0F8441FC0000            	je L_error_fvar_undefined
  8994 000059BA 803804                  	cmp byte [rax], T_closure
  8995 000059BD 0F85BCFC0000            	jne L_error_non_closure
  8996 000059C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8997                                  
  8998                                  	; recycling the current frame
  8999 000059C6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9000 000059C9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9001 000059CC B906000000              	mov rcx, 2 + 4
  9002 000059D1 488B5D18                	mov rbx, COUNT
  9003 000059D5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9004 000059DA 488D55F8                	lea rdx, [rbp - 8 * 1]
  9005                                  .L_tc_recycle_frame_loop_06f6:
  9006 000059DE 4883F900                	cmp rcx, 0
  9007 000059E2 7413                    	je .L_tc_recycle_frame_done_06f6
  9008 000059E4 488B32                  	mov rsi, qword [rdx]
  9009 000059E7 488933                  	mov qword [rbx], rsi
  9010 000059EA 48FFC9                  	dec rcx
  9011 000059ED 4883EB08                	sub rbx, 8 * 1
  9012 000059F1 4883EA08                	sub rdx, 8 * 1
  9013 000059F5 EBE7                    	jmp .L_tc_recycle_frame_loop_06f6
  9014                                  .L_tc_recycle_frame_done_06f6:
  9015 000059F7 488D6308                	lea rsp, [rbx + 8 * 1]
  9016 000059FB 5D                      	pop rbp	; the proc will restore it!
  9017 000059FC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9018 000059FF C9                      	leave
  9019 00005A00 C21000                  	ret AND_KILL_FRAME(0)
  9020                                  .L_lambda_simple_end_0558:	; new closure is in rax
  9021 00005A03 50                      	push rax
  9022 00005A04 6A01                    	push 1	; arg count
  9023 00005A06 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9024 00005A0B E818FD0000              	call malloc
  9025 00005A10 50                      	push rax
  9026 00005A11 BF00000000              	mov rdi, 8 * 0	; new rib
  9027 00005A16 E80DFD0000              	call malloc
  9028 00005A1B 50                      	push rax
  9029 00005A1C BF08000000              	mov rdi, 8 * 1	; extended env
  9030 00005A21 E802FD0000              	call malloc
  9031 00005A26 488B7D10                	mov rdi, ENV
  9032 00005A2A BE00000000              	mov rsi, 0
  9033 00005A2F BA01000000              	mov rdx, 1
  9034                                  .L_lambda_simple_env_loop_0559:	; ext_env[i + 1] <-- env[i]
  9035 00005A34 4883FE00                	cmp rsi, 0
  9036 00005A38 7410                    	je .L_lambda_simple_env_end_0559
  9037 00005A3A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9038 00005A3E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9039 00005A42 48FFC6                  	inc rsi
  9040 00005A45 48FFC2                  	inc rdx
  9041 00005A48 EBEA                    	jmp .L_lambda_simple_env_loop_0559
  9042                                  .L_lambda_simple_env_end_0559:
  9043 00005A4A 5B                      	pop rbx
  9044 00005A4B BE00000000              	mov rsi, 0
  9045                                  .L_lambda_simple_params_loop_0559:	; copy params
  9046 00005A50 4883FE00                	cmp rsi, 0
  9047 00005A54 740E                    	je .L_lambda_simple_params_end_0559
  9048 00005A56 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9049 00005A5B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9050 00005A5F 48FFC6                  	inc rsi
  9051 00005A62 EBEC                    	jmp .L_lambda_simple_params_loop_0559
  9052                                  .L_lambda_simple_params_end_0559:
  9053 00005A64 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9054 00005A67 4889C3                  	mov rbx, rax
  9055 00005A6A 58                      	pop rax
  9056 00005A6B C60004                  	mov byte [rax], T_closure
  9057 00005A6E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9058 00005A72 48C74009[7F5A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0559
  9059 00005A7A E9620B0000              	jmp .L_lambda_simple_end_0559
  9060                                  .L_lambda_simple_code_0559:	; lambda-simple body
  9061 00005A7F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9062 00005A85 740B                    	je .L_lambda_simple_arity_check_ok_0559
  9063 00005A87 FF742410                	push qword [rsp + 8 * 2]
  9064 00005A8B 6A01                    	push 1
  9065 00005A8D E94FFC0000              	jmp L_error_incorrect_arity_simple
  9066                                  .L_lambda_simple_arity_check_ok_0559:
  9067 00005A92 C8000000                	enter 0, 0
  9068                                  	; preparing a tail-call
  9069 00005A96 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9070 00005A9B E888FC0000              	call malloc
  9071 00005AA0 50                      	push rax
  9072 00005AA1 BF08000000              	mov rdi, 8 * 1	; new rib
  9073 00005AA6 E87DFC0000              	call malloc
  9074 00005AAB 50                      	push rax
  9075 00005AAC BF10000000              	mov rdi, 8 * 2	; extended env
  9076 00005AB1 E872FC0000              	call malloc
  9077 00005AB6 488B7D10                	mov rdi, ENV
  9078 00005ABA BE00000000              	mov rsi, 0
  9079 00005ABF BA01000000              	mov rdx, 1
  9080                                  .L_lambda_simple_env_loop_055a:	; ext_env[i + 1] <-- env[i]
  9081 00005AC4 4883FE01                	cmp rsi, 1
  9082 00005AC8 7410                    	je .L_lambda_simple_env_end_055a
  9083 00005ACA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9084 00005ACE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9085 00005AD2 48FFC6                  	inc rsi
  9086 00005AD5 48FFC2                  	inc rdx
  9087 00005AD8 EBEA                    	jmp .L_lambda_simple_env_loop_055a
  9088                                  .L_lambda_simple_env_end_055a:
  9089 00005ADA 5B                      	pop rbx
  9090 00005ADB BE00000000              	mov rsi, 0
  9091                                  .L_lambda_simple_params_loop_055a:	; copy params
  9092 00005AE0 4883FE01                	cmp rsi, 1
  9093 00005AE4 740E                    	je .L_lambda_simple_params_end_055a
  9094 00005AE6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9095 00005AEB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9096 00005AEF 48FFC6                  	inc rsi
  9097 00005AF2 EBEC                    	jmp .L_lambda_simple_params_loop_055a
  9098                                  .L_lambda_simple_params_end_055a:
  9099 00005AF4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9100 00005AF7 4889C3                  	mov rbx, rax
  9101 00005AFA 58                      	pop rax
  9102 00005AFB C60004                  	mov byte [rax], T_closure
  9103 00005AFE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9104 00005B02 48C74009[0F5B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_055a
  9105 00005B0A E92B080000              	jmp .L_lambda_simple_end_055a
  9106                                  .L_lambda_simple_code_055a:	; lambda-simple body
  9107 00005B0F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9108 00005B15 740B                    	je .L_lambda_simple_arity_check_ok_055a
  9109 00005B17 FF742410                	push qword [rsp + 8 * 2]
  9110 00005B1B 6A02                    	push 2
  9111 00005B1D E9BFFB0000              	jmp L_error_incorrect_arity_simple
  9112                                  .L_lambda_simple_arity_check_ok_055a:
  9113 00005B22 C8000000                	enter 0, 0
  9114 00005B26 488B4520                	mov rax, PARAM(0)	; param a
  9115 00005B2A 50                      	push rax
  9116 00005B2B 6A01                    	push 1	; arg count
  9117 00005B2D 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9118 00005B35 803805                  	cmp byte [rax], T_undefined
  9119 00005B38 0F84BDFA0000            	je L_error_fvar_undefined
  9120 00005B3E 803804                  	cmp byte [rax], T_closure
  9121 00005B41 0F8538FB0000            	jne L_error_non_closure
  9122 00005B47 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9123 00005B4A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9124                                  
  9125 00005B4D 483D[02000000]          	cmp rax, sob_boolean_false
  9126 00005B53 0F8463020000            	je .L_if_else_03dc
  9127 00005B59 488B4528                	mov rax, PARAM(1)	; param b
  9128 00005B5D 50                      	push rax
  9129 00005B5E 6A01                    	push 1	; arg count
  9130 00005B60 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9131 00005B68 803805                  	cmp byte [rax], T_undefined
  9132 00005B6B 0F848AFA0000            	je L_error_fvar_undefined
  9133 00005B71 803804                  	cmp byte [rax], T_closure
  9134 00005B74 0F8505FB0000            	jne L_error_non_closure
  9135 00005B7A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9136 00005B7D FF5009                  	call SOB_CLOSURE_CODE(rax)
  9137                                  
  9138 00005B80 483D[02000000]          	cmp rax, sob_boolean_false
  9139 00005B86 7467                    	je .L_if_else_03dd
  9140                                  	; preparing a tail-call
  9141 00005B88 488B4528                	mov rax, PARAM(1)	; param b
  9142 00005B8C 50                      	push rax
  9143 00005B8D 488B4520                	mov rax, PARAM(0)	; param a
  9144 00005B91 50                      	push rax
  9145 00005B92 6A02                    	push 2	; arg count
  9146 00005B94 488B0425[52100000]      	mov rax, qword [free_var_38]	; free var __bin-add-zz
  9147 00005B9C 803805                  	cmp byte [rax], T_undefined
  9148 00005B9F 0F8456FA0000            	je L_error_fvar_undefined
  9149 00005BA5 803804                  	cmp byte [rax], T_closure
  9150 00005BA8 0F85D1FA0000            	jne L_error_non_closure
  9151 00005BAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9152                                  
  9153                                  	; recycling the current frame
  9154 00005BB1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9155 00005BB4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9156 00005BB7 B906000000              	mov rcx, 2 + 4
  9157 00005BBC 488B5D18                	mov rbx, COUNT
  9158 00005BC0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9159 00005BC5 488D55F8                	lea rdx, [rbp - 8 * 1]
  9160                                  .L_tc_recycle_frame_loop_06f7:
  9161 00005BC9 4883F900                	cmp rcx, 0
  9162 00005BCD 7413                    	je .L_tc_recycle_frame_done_06f7
  9163 00005BCF 488B32                  	mov rsi, qword [rdx]
  9164 00005BD2 488933                  	mov qword [rbx], rsi
  9165 00005BD5 48FFC9                  	dec rcx
  9166 00005BD8 4883EB08                	sub rbx, 8 * 1
  9167 00005BDC 4883EA08                	sub rdx, 8 * 1
  9168 00005BE0 EBE7                    	jmp .L_tc_recycle_frame_loop_06f7
  9169                                  .L_tc_recycle_frame_done_06f7:
  9170 00005BE2 488D6308                	lea rsp, [rbx + 8 * 1]
  9171 00005BE6 5D                      	pop rbp	; the proc will restore it!
  9172 00005BE7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9173                                  
  9174 00005BEA E9C8010000              	jmp .L_if_end_03dd
  9175                                  
  9176                                  	.L_if_else_03dd:
  9177 00005BEF 488B4528                	mov rax, PARAM(1)	; param b
  9178 00005BF3 50                      	push rax
  9179 00005BF4 6A01                    	push 1	; arg count
  9180 00005BF6 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9181 00005BFE 803805                  	cmp byte [rax], T_undefined
  9182 00005C01 0F84F4F90000            	je L_error_fvar_undefined
  9183 00005C07 803804                  	cmp byte [rax], T_closure
  9184 00005C0A 0F856FFA0000            	jne L_error_non_closure
  9185 00005C10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9186 00005C13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9187                                  
  9188 00005C16 483D[02000000]          	cmp rax, sob_boolean_false
  9189 00005C1C 0F848A000000            	je .L_if_else_03de
  9190                                  	; preparing a tail-call
  9191 00005C22 488B4528                	mov rax, PARAM(1)	; param b
  9192 00005C26 50                      	push rax
  9193 00005C27 488B4520                	mov rax, PARAM(0)	; param a
  9194 00005C2B 50                      	push rax
  9195 00005C2C 6A01                    	push 1	; arg count
  9196 00005C2E 488B0425[EA110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
  9197 00005C36 803805                  	cmp byte [rax], T_undefined
  9198 00005C39 0F84BCF90000            	je L_error_fvar_undefined
  9199 00005C3F 803804                  	cmp byte [rax], T_closure
  9200 00005C42 0F8537FA0000            	jne L_error_non_closure
  9201 00005C48 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9202 00005C4B FF5009                  	call SOB_CLOSURE_CODE(rax)
  9203 00005C4E 50                      	push rax
  9204 00005C4F 6A02                    	push 2	; arg count
  9205 00005C51 488B0425[0E100000]      	mov rax, qword [free_var_34]	; free var __bin-add-qq
  9206 00005C59 803805                  	cmp byte [rax], T_undefined
  9207 00005C5C 0F8499F90000            	je L_error_fvar_undefined
  9208 00005C62 803804                  	cmp byte [rax], T_closure
  9209 00005C65 0F8514FA0000            	jne L_error_non_closure
  9210 00005C6B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9211                                  
  9212                                  	; recycling the current frame
  9213 00005C6E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9214 00005C71 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9215 00005C74 B906000000              	mov rcx, 2 + 4
  9216 00005C79 488B5D18                	mov rbx, COUNT
  9217 00005C7D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9218 00005C82 488D55F8                	lea rdx, [rbp - 8 * 1]
  9219                                  .L_tc_recycle_frame_loop_06f8:
  9220 00005C86 4883F900                	cmp rcx, 0
  9221 00005C8A 7413                    	je .L_tc_recycle_frame_done_06f8
  9222 00005C8C 488B32                  	mov rsi, qword [rdx]
  9223 00005C8F 488933                  	mov qword [rbx], rsi
  9224 00005C92 48FFC9                  	dec rcx
  9225 00005C95 4883EB08                	sub rbx, 8 * 1
  9226 00005C99 4883EA08                	sub rdx, 8 * 1
  9227 00005C9D EBE7                    	jmp .L_tc_recycle_frame_loop_06f8
  9228                                  .L_tc_recycle_frame_done_06f8:
  9229 00005C9F 488D6308                	lea rsp, [rbx + 8 * 1]
  9230 00005CA3 5D                      	pop rbp	; the proc will restore it!
  9231 00005CA4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9232                                  
  9233 00005CA7 E90B010000              	jmp .L_if_end_03de
  9234                                  
  9235                                  	.L_if_else_03de:
  9236 00005CAC 488B4528                	mov rax, PARAM(1)	; param b
  9237 00005CB0 50                      	push rax
  9238 00005CB1 6A01                    	push 1	; arg count
  9239 00005CB3 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
  9240 00005CBB 803805                  	cmp byte [rax], T_undefined
  9241 00005CBE 0F8437F90000            	je L_error_fvar_undefined
  9242 00005CC4 803804                  	cmp byte [rax], T_closure
  9243 00005CC7 0F85B2F90000            	jne L_error_non_closure
  9244 00005CCD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9245 00005CD0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9246                                  
  9247 00005CD3 483D[02000000]          	cmp rax, sob_boolean_false
  9248 00005CD9 0F8487000000            	je .L_if_else_03df
  9249                                  	; preparing a tail-call
  9250 00005CDF 488B4528                	mov rax, PARAM(1)	; param b
  9251 00005CE3 50                      	push rax
  9252 00005CE4 488B4520                	mov rax, PARAM(0)	; param a
  9253 00005CE8 50                      	push rax
  9254 00005CE9 6A01                    	push 1	; arg count
  9255 00005CEB 488B0425[420F0000]      	mov rax, qword [free_var_22]	; free var integer->real
  9256 00005CF3 803805                  	cmp byte [rax], T_undefined
  9257 00005CF6 0F84FFF80000            	je L_error_fvar_undefined
  9258 00005CFC 803804                  	cmp byte [rax], T_closure
  9259 00005CFF 0F857AF90000            	jne L_error_non_closure
  9260 00005D05 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9261 00005D08 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9262 00005D0B 50                      	push rax
  9263 00005D0C 6A02                    	push 2	; arg count
  9264 00005D0E 488B0425[CA0F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9265 00005D16 803805                  	cmp byte [rax], T_undefined
  9266 00005D19 0F84DCF80000            	je L_error_fvar_undefined
  9267 00005D1F 803804                  	cmp byte [rax], T_closure
  9268 00005D22 0F8557F90000            	jne L_error_non_closure
  9269 00005D28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9270                                  
  9271                                  	; recycling the current frame
  9272 00005D2B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9273 00005D2E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9274 00005D31 B906000000              	mov rcx, 2 + 4
  9275 00005D36 488B5D18                	mov rbx, COUNT
  9276 00005D3A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9277 00005D3F 488D55F8                	lea rdx, [rbp - 8 * 1]
  9278                                  .L_tc_recycle_frame_loop_06f9:
  9279 00005D43 4883F900                	cmp rcx, 0
  9280 00005D47 7413                    	je .L_tc_recycle_frame_done_06f9
  9281 00005D49 488B32                  	mov rsi, qword [rdx]
  9282 00005D4C 488933                  	mov qword [rbx], rsi
  9283 00005D4F 48FFC9                  	dec rcx
  9284 00005D52 4883EB08                	sub rbx, 8 * 1
  9285 00005D56 4883EA08                	sub rdx, 8 * 1
  9286 00005D5A EBE7                    	jmp .L_tc_recycle_frame_loop_06f9
  9287                                  .L_tc_recycle_frame_done_06f9:
  9288 00005D5C 488D6308                	lea rsp, [rbx + 8 * 1]
  9289 00005D60 5D                      	pop rbp	; the proc will restore it!
  9290 00005D61 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9291                                  
  9292 00005D64 EB51                    	jmp .L_if_end_03df
  9293                                  
  9294                                  	.L_if_else_03df:
  9295                                  	; preparing a tail-call
  9296 00005D66 6A00                    	push 0	; arg count
  9297 00005D68 488B4510                	mov rax, ENV
  9298 00005D6C 488B00                  	mov rax, qword [rax + 8 * 0]
  9299 00005D6F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9300 00005D72 803804                  	cmp byte [rax], T_closure
  9301 00005D75 0F8504F90000            	jne L_error_non_closure
  9302 00005D7B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9303                                  
  9304                                  	; recycling the current frame
  9305 00005D7E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9306 00005D81 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9307 00005D84 B904000000              	mov rcx, 0 + 4
  9308 00005D89 488B5D18                	mov rbx, COUNT
  9309 00005D8D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9310 00005D92 488D55F8                	lea rdx, [rbp - 8 * 1]
  9311                                  .L_tc_recycle_frame_loop_06fa:
  9312 00005D96 4883F900                	cmp rcx, 0
  9313 00005D9A 7413                    	je .L_tc_recycle_frame_done_06fa
  9314 00005D9C 488B32                  	mov rsi, qword [rdx]
  9315 00005D9F 488933                  	mov qword [rbx], rsi
  9316 00005DA2 48FFC9                  	dec rcx
  9317 00005DA5 4883EB08                	sub rbx, 8 * 1
  9318 00005DA9 4883EA08                	sub rdx, 8 * 1
  9319 00005DAD EBE7                    	jmp .L_tc_recycle_frame_loop_06fa
  9320                                  .L_tc_recycle_frame_done_06fa:
  9321 00005DAF 488D6308                	lea rsp, [rbx + 8 * 1]
  9322 00005DB3 5D                      	pop rbp	; the proc will restore it!
  9323 00005DB4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9324                                  
  9325                                  	.L_if_end_03df:
  9326                                  
  9327                                  	.L_if_end_03de:
  9328                                  
  9329                                  	.L_if_end_03dd:
  9330                                  
  9331 00005DB7 E97A050000              	jmp .L_if_end_03dc
  9332                                  
  9333                                  	.L_if_else_03dc:
  9334 00005DBC 488B4520                	mov rax, PARAM(0)	; param a
  9335 00005DC0 50                      	push rax
  9336 00005DC1 6A01                    	push 1	; arg count
  9337 00005DC3 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9338 00005DCB 803805                  	cmp byte [rax], T_undefined
  9339 00005DCE 0F8427F80000            	je L_error_fvar_undefined
  9340 00005DD4 803804                  	cmp byte [rax], T_closure
  9341 00005DD7 0F85A2F80000            	jne L_error_non_closure
  9342 00005DDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9343 00005DE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9344                                  
  9345 00005DE3 483D[02000000]          	cmp rax, sob_boolean_false
  9346 00005DE9 0F8463020000            	je .L_if_else_03e0
  9347 00005DEF 488B4528                	mov rax, PARAM(1)	; param b
  9348 00005DF3 50                      	push rax
  9349 00005DF4 6A01                    	push 1	; arg count
  9350 00005DF6 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9351 00005DFE 803805                  	cmp byte [rax], T_undefined
  9352 00005E01 0F84F4F70000            	je L_error_fvar_undefined
  9353 00005E07 803804                  	cmp byte [rax], T_closure
  9354 00005E0A 0F856FF80000            	jne L_error_non_closure
  9355 00005E10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9356 00005E13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9357                                  
  9358 00005E16 483D[02000000]          	cmp rax, sob_boolean_false
  9359 00005E1C 0F848A000000            	je .L_if_else_03e1
  9360                                  	; preparing a tail-call
  9361 00005E22 488B4528                	mov rax, PARAM(1)	; param b
  9362 00005E26 50                      	push rax
  9363 00005E27 6A01                    	push 1	; arg count
  9364 00005E29 488B0425[80150000]      	mov rax, qword [free_var_116]	; free var __bin_integer_to_fraction
  9365 00005E31 803805                  	cmp byte [rax], T_undefined
  9366 00005E34 0F84C1F70000            	je L_error_fvar_undefined
  9367 00005E3A 803804                  	cmp byte [rax], T_closure
  9368 00005E3D 0F853CF80000            	jne L_error_non_closure
  9369 00005E43 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9370 00005E46 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9371 00005E49 50                      	push rax
  9372 00005E4A 488B4520                	mov rax, PARAM(0)	; param a
  9373 00005E4E 50                      	push rax
  9374 00005E4F 6A02                    	push 2	; arg count
  9375 00005E51 488B0425[0E100000]      	mov rax, qword [free_var_34]	; free var __bin-add-qq
  9376 00005E59 803805                  	cmp byte [rax], T_undefined
  9377 00005E5C 0F8499F70000            	je L_error_fvar_undefined
  9378 00005E62 803804                  	cmp byte [rax], T_closure
  9379 00005E65 0F8514F80000            	jne L_error_non_closure
  9380 00005E6B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9381                                  
  9382                                  	; recycling the current frame
  9383 00005E6E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9384 00005E71 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9385 00005E74 B906000000              	mov rcx, 2 + 4
  9386 00005E79 488B5D18                	mov rbx, COUNT
  9387 00005E7D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9388 00005E82 488D55F8                	lea rdx, [rbp - 8 * 1]
  9389                                  .L_tc_recycle_frame_loop_06fb:
  9390 00005E86 4883F900                	cmp rcx, 0
  9391 00005E8A 7413                    	je .L_tc_recycle_frame_done_06fb
  9392 00005E8C 488B32                  	mov rsi, qword [rdx]
  9393 00005E8F 488933                  	mov qword [rbx], rsi
  9394 00005E92 48FFC9                  	dec rcx
  9395 00005E95 4883EB08                	sub rbx, 8 * 1
  9396 00005E99 4883EA08                	sub rdx, 8 * 1
  9397 00005E9D EBE7                    	jmp .L_tc_recycle_frame_loop_06fb
  9398                                  .L_tc_recycle_frame_done_06fb:
  9399 00005E9F 488D6308                	lea rsp, [rbx + 8 * 1]
  9400 00005EA3 5D                      	pop rbp	; the proc will restore it!
  9401 00005EA4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9402                                  
  9403 00005EA7 E9A1010000              	jmp .L_if_end_03e1
  9404                                  
  9405                                  	.L_if_else_03e1:
  9406 00005EAC 488B4528                	mov rax, PARAM(1)	; param b
  9407 00005EB0 50                      	push rax
  9408 00005EB1 6A01                    	push 1	; arg count
  9409 00005EB3 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9410 00005EBB 803805                  	cmp byte [rax], T_undefined
  9411 00005EBE 0F8437F70000            	je L_error_fvar_undefined
  9412 00005EC4 803804                  	cmp byte [rax], T_closure
  9413 00005EC7 0F85B2F70000            	jne L_error_non_closure
  9414 00005ECD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9415 00005ED0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9416                                  
  9417 00005ED3 483D[02000000]          	cmp rax, sob_boolean_false
  9418 00005ED9 7467                    	je .L_if_else_03e2
  9419                                  	; preparing a tail-call
  9420 00005EDB 488B4528                	mov rax, PARAM(1)	; param b
  9421 00005EDF 50                      	push rax
  9422 00005EE0 488B4520                	mov rax, PARAM(0)	; param a
  9423 00005EE4 50                      	push rax
  9424 00005EE5 6A02                    	push 2	; arg count
  9425 00005EE7 488B0425[0E100000]      	mov rax, qword [free_var_34]	; free var __bin-add-qq
  9426 00005EEF 803805                  	cmp byte [rax], T_undefined
  9427 00005EF2 0F8403F70000            	je L_error_fvar_undefined
  9428 00005EF8 803804                  	cmp byte [rax], T_closure
  9429 00005EFB 0F857EF70000            	jne L_error_non_closure
  9430 00005F01 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9431                                  
  9432                                  	; recycling the current frame
  9433 00005F04 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9434 00005F07 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9435 00005F0A B906000000              	mov rcx, 2 + 4
  9436 00005F0F 488B5D18                	mov rbx, COUNT
  9437 00005F13 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9438 00005F18 488D55F8                	lea rdx, [rbp - 8 * 1]
  9439                                  .L_tc_recycle_frame_loop_06fc:
  9440 00005F1C 4883F900                	cmp rcx, 0
  9441 00005F20 7413                    	je .L_tc_recycle_frame_done_06fc
  9442 00005F22 488B32                  	mov rsi, qword [rdx]
  9443 00005F25 488933                  	mov qword [rbx], rsi
  9444 00005F28 48FFC9                  	dec rcx
  9445 00005F2B 4883EB08                	sub rbx, 8 * 1
  9446 00005F2F 4883EA08                	sub rdx, 8 * 1
  9447 00005F33 EBE7                    	jmp .L_tc_recycle_frame_loop_06fc
  9448                                  .L_tc_recycle_frame_done_06fc:
  9449 00005F35 488D6308                	lea rsp, [rbx + 8 * 1]
  9450 00005F39 5D                      	pop rbp	; the proc will restore it!
  9451 00005F3A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9452                                  
  9453 00005F3D E90B010000              	jmp .L_if_end_03e2
  9454                                  
  9455                                  	.L_if_else_03e2:
  9456 00005F42 488B4528                	mov rax, PARAM(1)	; param b
  9457 00005F46 50                      	push rax
  9458 00005F47 6A01                    	push 1	; arg count
  9459 00005F49 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
  9460 00005F51 803805                  	cmp byte [rax], T_undefined
  9461 00005F54 0F84A1F60000            	je L_error_fvar_undefined
  9462 00005F5A 803804                  	cmp byte [rax], T_closure
  9463 00005F5D 0F851CF70000            	jne L_error_non_closure
  9464 00005F63 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9465 00005F66 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9466                                  
  9467 00005F69 483D[02000000]          	cmp rax, sob_boolean_false
  9468 00005F6F 0F8487000000            	je .L_if_else_03e3
  9469                                  	; preparing a tail-call
  9470 00005F75 488B4528                	mov rax, PARAM(1)	; param b
  9471 00005F79 50                      	push rax
  9472 00005F7A 488B4520                	mov rax, PARAM(0)	; param a
  9473 00005F7E 50                      	push rax
  9474 00005F7F 6A01                    	push 1	; arg count
  9475 00005F81 488B0425[530F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
  9476 00005F89 803805                  	cmp byte [rax], T_undefined
  9477 00005F8C 0F8469F60000            	je L_error_fvar_undefined
  9478 00005F92 803804                  	cmp byte [rax], T_closure
  9479 00005F95 0F85E4F60000            	jne L_error_non_closure
  9480 00005F9B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9481 00005F9E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9482 00005FA1 50                      	push rax
  9483 00005FA2 6A02                    	push 2	; arg count
  9484 00005FA4 488B0425[CA0F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9485 00005FAC 803805                  	cmp byte [rax], T_undefined
  9486 00005FAF 0F8446F60000            	je L_error_fvar_undefined
  9487 00005FB5 803804                  	cmp byte [rax], T_closure
  9488 00005FB8 0F85C1F60000            	jne L_error_non_closure
  9489 00005FBE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9490                                  
  9491                                  	; recycling the current frame
  9492 00005FC1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9493 00005FC4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9494 00005FC7 B906000000              	mov rcx, 2 + 4
  9495 00005FCC 488B5D18                	mov rbx, COUNT
  9496 00005FD0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9497 00005FD5 488D55F8                	lea rdx, [rbp - 8 * 1]
  9498                                  .L_tc_recycle_frame_loop_06fd:
  9499 00005FD9 4883F900                	cmp rcx, 0
  9500 00005FDD 7413                    	je .L_tc_recycle_frame_done_06fd
  9501 00005FDF 488B32                  	mov rsi, qword [rdx]
  9502 00005FE2 488933                  	mov qword [rbx], rsi
  9503 00005FE5 48FFC9                  	dec rcx
  9504 00005FE8 4883EB08                	sub rbx, 8 * 1
  9505 00005FEC 4883EA08                	sub rdx, 8 * 1
  9506 00005FF0 EBE7                    	jmp .L_tc_recycle_frame_loop_06fd
  9507                                  .L_tc_recycle_frame_done_06fd:
  9508 00005FF2 488D6308                	lea rsp, [rbx + 8 * 1]
  9509 00005FF6 5D                      	pop rbp	; the proc will restore it!
  9510 00005FF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9511                                  
  9512 00005FFA EB51                    	jmp .L_if_end_03e3
  9513                                  
  9514                                  	.L_if_else_03e3:
  9515                                  	; preparing a tail-call
  9516 00005FFC 6A00                    	push 0	; arg count
  9517 00005FFE 488B4510                	mov rax, ENV
  9518 00006002 488B00                  	mov rax, qword [rax + 8 * 0]
  9519 00006005 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9520 00006008 803804                  	cmp byte [rax], T_closure
  9521 0000600B 0F856EF60000            	jne L_error_non_closure
  9522 00006011 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9523                                  
  9524                                  	; recycling the current frame
  9525 00006014 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9526 00006017 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9527 0000601A B904000000              	mov rcx, 0 + 4
  9528 0000601F 488B5D18                	mov rbx, COUNT
  9529 00006023 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9530 00006028 488D55F8                	lea rdx, [rbp - 8 * 1]
  9531                                  .L_tc_recycle_frame_loop_06fe:
  9532 0000602C 4883F900                	cmp rcx, 0
  9533 00006030 7413                    	je .L_tc_recycle_frame_done_06fe
  9534 00006032 488B32                  	mov rsi, qword [rdx]
  9535 00006035 488933                  	mov qword [rbx], rsi
  9536 00006038 48FFC9                  	dec rcx
  9537 0000603B 4883EB08                	sub rbx, 8 * 1
  9538 0000603F 4883EA08                	sub rdx, 8 * 1
  9539 00006043 EBE7                    	jmp .L_tc_recycle_frame_loop_06fe
  9540                                  .L_tc_recycle_frame_done_06fe:
  9541 00006045 488D6308                	lea rsp, [rbx + 8 * 1]
  9542 00006049 5D                      	pop rbp	; the proc will restore it!
  9543 0000604A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9544                                  
  9545                                  	.L_if_end_03e3:
  9546                                  
  9547                                  	.L_if_end_03e2:
  9548                                  
  9549                                  	.L_if_end_03e1:
  9550                                  
  9551 0000604D E9E4020000              	jmp .L_if_end_03e0
  9552                                  
  9553                                  	.L_if_else_03e0:
  9554 00006052 488B4520                	mov rax, PARAM(0)	; param a
  9555 00006056 50                      	push rax
  9556 00006057 6A01                    	push 1	; arg count
  9557 00006059 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
  9558 00006061 803805                  	cmp byte [rax], T_undefined
  9559 00006064 0F8491F50000            	je L_error_fvar_undefined
  9560 0000606A 803804                  	cmp byte [rax], T_closure
  9561 0000606D 0F850CF60000            	jne L_error_non_closure
  9562 00006073 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9563 00006076 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9564                                  
  9565 00006079 483D[02000000]          	cmp rax, sob_boolean_false
  9566 0000607F 0F8460020000            	je .L_if_else_03e4
  9567 00006085 488B4528                	mov rax, PARAM(1)	; param b
  9568 00006089 50                      	push rax
  9569 0000608A 6A01                    	push 1	; arg count
  9570 0000608C 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
  9571 00006094 803805                  	cmp byte [rax], T_undefined
  9572 00006097 0F845EF50000            	je L_error_fvar_undefined
  9573 0000609D 803804                  	cmp byte [rax], T_closure
  9574 000060A0 0F85D9F50000            	jne L_error_non_closure
  9575 000060A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9576 000060A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9577                                  
  9578 000060AC 483D[02000000]          	cmp rax, sob_boolean_false
  9579 000060B2 0F848A000000            	je .L_if_else_03e5
  9580                                  	; preparing a tail-call
  9581 000060B8 488B4528                	mov rax, PARAM(1)	; param b
  9582 000060BC 50                      	push rax
  9583 000060BD 6A01                    	push 1	; arg count
  9584 000060BF 488B0425[420F0000]      	mov rax, qword [free_var_22]	; free var integer->real
  9585 000060C7 803805                  	cmp byte [rax], T_undefined
  9586 000060CA 0F842BF50000            	je L_error_fvar_undefined
  9587 000060D0 803804                  	cmp byte [rax], T_closure
  9588 000060D3 0F85A6F50000            	jne L_error_non_closure
  9589 000060D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9590 000060DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  9591 000060DF 50                      	push rax
  9592 000060E0 488B4520                	mov rax, PARAM(0)	; param a
  9593 000060E4 50                      	push rax
  9594 000060E5 6A02                    	push 2	; arg count
  9595 000060E7 488B0425[CA0F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9596 000060EF 803805                  	cmp byte [rax], T_undefined
  9597 000060F2 0F8403F50000            	je L_error_fvar_undefined
  9598 000060F8 803804                  	cmp byte [rax], T_closure
  9599 000060FB 0F857EF50000            	jne L_error_non_closure
  9600 00006101 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9601                                  
  9602                                  	; recycling the current frame
  9603 00006104 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9604 00006107 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9605 0000610A B906000000              	mov rcx, 2 + 4
  9606 0000610F 488B5D18                	mov rbx, COUNT
  9607 00006113 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9608 00006118 488D55F8                	lea rdx, [rbp - 8 * 1]
  9609                                  .L_tc_recycle_frame_loop_06ff:
  9610 0000611C 4883F900                	cmp rcx, 0
  9611 00006120 7413                    	je .L_tc_recycle_frame_done_06ff
  9612 00006122 488B32                  	mov rsi, qword [rdx]
  9613 00006125 488933                  	mov qword [rbx], rsi
  9614 00006128 48FFC9                  	dec rcx
  9615 0000612B 4883EB08                	sub rbx, 8 * 1
  9616 0000612F 4883EA08                	sub rdx, 8 * 1
  9617 00006133 EBE7                    	jmp .L_tc_recycle_frame_loop_06ff
  9618                                  .L_tc_recycle_frame_done_06ff:
  9619 00006135 488D6308                	lea rsp, [rbx + 8 * 1]
  9620 00006139 5D                      	pop rbp	; the proc will restore it!
  9621 0000613A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9622                                  
  9623 0000613D E9A1010000              	jmp .L_if_end_03e5
  9624                                  
  9625                                  	.L_if_else_03e5:
  9626 00006142 488B4528                	mov rax, PARAM(1)	; param b
  9627 00006146 50                      	push rax
  9628 00006147 6A01                    	push 1	; arg count
  9629 00006149 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
  9630 00006151 803805                  	cmp byte [rax], T_undefined
  9631 00006154 0F84A1F40000            	je L_error_fvar_undefined
  9632 0000615A 803804                  	cmp byte [rax], T_closure
  9633 0000615D 0F851CF50000            	jne L_error_non_closure
  9634 00006163 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9635 00006166 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9636                                  
  9637 00006169 483D[02000000]          	cmp rax, sob_boolean_false
  9638 0000616F 0F848A000000            	je .L_if_else_03e6
  9639                                  	; preparing a tail-call
  9640 00006175 488B4528                	mov rax, PARAM(1)	; param b
  9641 00006179 50                      	push rax
  9642 0000617A 6A01                    	push 1	; arg count
  9643 0000617C 488B0425[530F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
  9644 00006184 803805                  	cmp byte [rax], T_undefined
  9645 00006187 0F846EF40000            	je L_error_fvar_undefined
  9646 0000618D 803804                  	cmp byte [rax], T_closure
  9647 00006190 0F85E9F40000            	jne L_error_non_closure
  9648 00006196 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9649 00006199 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9650 0000619C 50                      	push rax
  9651 0000619D 488B4520                	mov rax, PARAM(0)	; param a
  9652 000061A1 50                      	push rax
  9653 000061A2 6A02                    	push 2	; arg count
  9654 000061A4 488B0425[CA0F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9655 000061AC 803805                  	cmp byte [rax], T_undefined
  9656 000061AF 0F8446F40000            	je L_error_fvar_undefined
  9657 000061B5 803804                  	cmp byte [rax], T_closure
  9658 000061B8 0F85C1F40000            	jne L_error_non_closure
  9659 000061BE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9660                                  
  9661                                  	; recycling the current frame
  9662 000061C1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9663 000061C4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9664 000061C7 B906000000              	mov rcx, 2 + 4
  9665 000061CC 488B5D18                	mov rbx, COUNT
  9666 000061D0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9667 000061D5 488D55F8                	lea rdx, [rbp - 8 * 1]
  9668                                  .L_tc_recycle_frame_loop_0700:
  9669 000061D9 4883F900                	cmp rcx, 0
  9670 000061DD 7413                    	je .L_tc_recycle_frame_done_0700
  9671 000061DF 488B32                  	mov rsi, qword [rdx]
  9672 000061E2 488933                  	mov qword [rbx], rsi
  9673 000061E5 48FFC9                  	dec rcx
  9674 000061E8 4883EB08                	sub rbx, 8 * 1
  9675 000061EC 4883EA08                	sub rdx, 8 * 1
  9676 000061F0 EBE7                    	jmp .L_tc_recycle_frame_loop_0700
  9677                                  .L_tc_recycle_frame_done_0700:
  9678 000061F2 488D6308                	lea rsp, [rbx + 8 * 1]
  9679 000061F6 5D                      	pop rbp	; the proc will restore it!
  9680 000061F7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9681                                  
  9682 000061FA E9E4000000              	jmp .L_if_end_03e6
  9683                                  
  9684                                  	.L_if_else_03e6:
  9685 000061FF 488B4528                	mov rax, PARAM(1)	; param b
  9686 00006203 50                      	push rax
  9687 00006204 6A01                    	push 1	; arg count
  9688 00006206 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
  9689 0000620E 803805                  	cmp byte [rax], T_undefined
  9690 00006211 0F84E4F30000            	je L_error_fvar_undefined
  9691 00006217 803804                  	cmp byte [rax], T_closure
  9692 0000621A 0F855FF40000            	jne L_error_non_closure
  9693 00006220 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9694 00006223 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9695                                  
  9696 00006226 483D[02000000]          	cmp rax, sob_boolean_false
  9697 0000622C 7464                    	je .L_if_else_03e7
  9698                                  	; preparing a tail-call
  9699 0000622E 488B4528                	mov rax, PARAM(1)	; param b
  9700 00006232 50                      	push rax
  9701 00006233 488B4520                	mov rax, PARAM(0)	; param a
  9702 00006237 50                      	push rax
  9703 00006238 6A02                    	push 2	; arg count
  9704 0000623A 488B0425[CA0F0000]      	mov rax, qword [free_var_30]	; free var __bin-add-rr
  9705 00006242 803805                  	cmp byte [rax], T_undefined
  9706 00006245 0F84B0F30000            	je L_error_fvar_undefined
  9707 0000624B 803804                  	cmp byte [rax], T_closure
  9708 0000624E 0F852BF40000            	jne L_error_non_closure
  9709 00006254 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9710                                  
  9711                                  	; recycling the current frame
  9712 00006257 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9713 0000625A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9714 0000625D B906000000              	mov rcx, 2 + 4
  9715 00006262 488B5D18                	mov rbx, COUNT
  9716 00006266 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9717 0000626B 488D55F8                	lea rdx, [rbp - 8 * 1]
  9718                                  .L_tc_recycle_frame_loop_0701:
  9719 0000626F 4883F900                	cmp rcx, 0
  9720 00006273 7413                    	je .L_tc_recycle_frame_done_0701
  9721 00006275 488B32                  	mov rsi, qword [rdx]
  9722 00006278 488933                  	mov qword [rbx], rsi
  9723 0000627B 48FFC9                  	dec rcx
  9724 0000627E 4883EB08                	sub rbx, 8 * 1
  9725 00006282 4883EA08                	sub rdx, 8 * 1
  9726 00006286 EBE7                    	jmp .L_tc_recycle_frame_loop_0701
  9727                                  .L_tc_recycle_frame_done_0701:
  9728 00006288 488D6308                	lea rsp, [rbx + 8 * 1]
  9729 0000628C 5D                      	pop rbp	; the proc will restore it!
  9730 0000628D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9731                                  
  9732 00006290 EB51                    	jmp .L_if_end_03e7
  9733                                  
  9734                                  	.L_if_else_03e7:
  9735                                  	; preparing a tail-call
  9736 00006292 6A00                    	push 0	; arg count
  9737 00006294 488B4510                	mov rax, ENV
  9738 00006298 488B00                  	mov rax, qword [rax + 8 * 0]
  9739 0000629B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9740 0000629E 803804                  	cmp byte [rax], T_closure
  9741 000062A1 0F85D8F30000            	jne L_error_non_closure
  9742 000062A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9743                                  
  9744                                  	; recycling the current frame
  9745 000062AA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9746 000062AD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9747 000062B0 B904000000              	mov rcx, 0 + 4
  9748 000062B5 488B5D18                	mov rbx, COUNT
  9749 000062B9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9750 000062BE 488D55F8                	lea rdx, [rbp - 8 * 1]
  9751                                  .L_tc_recycle_frame_loop_0702:
  9752 000062C2 4883F900                	cmp rcx, 0
  9753 000062C6 7413                    	je .L_tc_recycle_frame_done_0702
  9754 000062C8 488B32                  	mov rsi, qword [rdx]
  9755 000062CB 488933                  	mov qword [rbx], rsi
  9756 000062CE 48FFC9                  	dec rcx
  9757 000062D1 4883EB08                	sub rbx, 8 * 1
  9758 000062D5 4883EA08                	sub rdx, 8 * 1
  9759 000062D9 EBE7                    	jmp .L_tc_recycle_frame_loop_0702
  9760                                  .L_tc_recycle_frame_done_0702:
  9761 000062DB 488D6308                	lea rsp, [rbx + 8 * 1]
  9762 000062DF 5D                      	pop rbp	; the proc will restore it!
  9763 000062E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9764                                  
  9765                                  	.L_if_end_03e7:
  9766                                  
  9767                                  	.L_if_end_03e6:
  9768                                  
  9769                                  	.L_if_end_03e5:
  9770                                  
  9771 000062E3 EB51                    	jmp .L_if_end_03e4
  9772                                  
  9773                                  	.L_if_else_03e4:
  9774                                  	; preparing a tail-call
  9775 000062E5 6A00                    	push 0	; arg count
  9776 000062E7 488B4510                	mov rax, ENV
  9777 000062EB 488B00                  	mov rax, qword [rax + 8 * 0]
  9778 000062EE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9779 000062F1 803804                  	cmp byte [rax], T_closure
  9780 000062F4 0F8585F30000            	jne L_error_non_closure
  9781 000062FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  9782                                  
  9783                                  	; recycling the current frame
  9784 000062FD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9785 00006300 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9786 00006303 B904000000              	mov rcx, 0 + 4
  9787 00006308 488B5D18                	mov rbx, COUNT
  9788 0000630C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9789 00006311 488D55F8                	lea rdx, [rbp - 8 * 1]
  9790                                  .L_tc_recycle_frame_loop_0703:
  9791 00006315 4883F900                	cmp rcx, 0
  9792 00006319 7413                    	je .L_tc_recycle_frame_done_0703
  9793 0000631B 488B32                  	mov rsi, qword [rdx]
  9794 0000631E 488933                  	mov qword [rbx], rsi
  9795 00006321 48FFC9                  	dec rcx
  9796 00006324 4883EB08                	sub rbx, 8 * 1
  9797 00006328 4883EA08                	sub rdx, 8 * 1
  9798 0000632C EBE7                    	jmp .L_tc_recycle_frame_loop_0703
  9799                                  .L_tc_recycle_frame_done_0703:
  9800 0000632E 488D6308                	lea rsp, [rbx + 8 * 1]
  9801 00006332 5D                      	pop rbp	; the proc will restore it!
  9802 00006333 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9803                                  
  9804                                  	.L_if_end_03e4:
  9805                                  
  9806                                  	.L_if_end_03e0:
  9807                                  
  9808                                  	.L_if_end_03dc:
  9809 00006336 C9                      	leave
  9810 00006337 C22000                  	ret AND_KILL_FRAME(2)
  9811                                  .L_lambda_simple_end_055a:	; new closure is in rax
  9812 0000633A 50                      	push rax
  9813 0000633B 6A01                    	push 1	; arg count
  9814 0000633D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9815 00006342 E8E1F30000              	call malloc
  9816 00006347 50                      	push rax
  9817 00006348 BF08000000              	mov rdi, 8 * 1	; new rib
  9818 0000634D E8D6F30000              	call malloc
  9819 00006352 50                      	push rax
  9820 00006353 BF10000000              	mov rdi, 8 * 2	; extended env
  9821 00006358 E8CBF30000              	call malloc
  9822 0000635D 488B7D10                	mov rdi, ENV
  9823 00006361 BE00000000              	mov rsi, 0
  9824 00006366 BA01000000              	mov rdx, 1
  9825                                  .L_lambda_simple_env_loop_055b:	; ext_env[i + 1] <-- env[i]
  9826 0000636B 4883FE01                	cmp rsi, 1
  9827 0000636F 7410                    	je .L_lambda_simple_env_end_055b
  9828 00006371 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9829 00006375 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9830 00006379 48FFC6                  	inc rsi
  9831 0000637C 48FFC2                  	inc rdx
  9832 0000637F EBEA                    	jmp .L_lambda_simple_env_loop_055b
  9833                                  .L_lambda_simple_env_end_055b:
  9834 00006381 5B                      	pop rbx
  9835 00006382 BE00000000              	mov rsi, 0
  9836                                  .L_lambda_simple_params_loop_055b:	; copy params
  9837 00006387 4883FE01                	cmp rsi, 1
  9838 0000638B 740E                    	je .L_lambda_simple_params_end_055b
  9839 0000638D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9840 00006392 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9841 00006396 48FFC6                  	inc rsi
  9842 00006399 EBEC                    	jmp .L_lambda_simple_params_loop_055b
  9843                                  .L_lambda_simple_params_end_055b:
  9844 0000639B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9845 0000639E 4889C3                  	mov rbx, rax
  9846 000063A1 58                      	pop rax
  9847 000063A2 C60004                  	mov byte [rax], T_closure
  9848 000063A5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9849 000063A9 48C74009[B6630000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_055b
  9850 000063B1 E9E2010000              	jmp .L_lambda_simple_end_055b
  9851                                  .L_lambda_simple_code_055b:	; lambda-simple body
  9852 000063B6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9853 000063BC 740B                    	je .L_lambda_simple_arity_check_ok_055b
  9854 000063BE FF742410                	push qword [rsp + 8 * 2]
  9855 000063C2 6A01                    	push 1
  9856 000063C4 E918F30000              	jmp L_error_incorrect_arity_simple
  9857                                  .L_lambda_simple_arity_check_ok_055b:
  9858 000063C9 C8000000                	enter 0, 0
  9859 000063CD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9860 000063D2 E851F30000              	call malloc
  9861 000063D7 50                      	push rax
  9862 000063D8 BF08000000              	mov rdi, 8 * 1	; new rib
  9863 000063DD E846F30000              	call malloc
  9864 000063E2 50                      	push rax
  9865 000063E3 BF18000000              	mov rdi, 8 * 3	; extended env
  9866 000063E8 E83BF30000              	call malloc
  9867 000063ED 488B7D10                	mov rdi, ENV
  9868 000063F1 BE00000000              	mov rsi, 0
  9869 000063F6 BA01000000              	mov rdx, 1
  9870                                  .L_lambda_opt_env_loop_00b9:	; ext_env[i + 1] <-- env[i]
  9871 000063FB 4883FE02                	cmp rsi, 2
  9872 000063FF 7410                    	je .L_lambda_opt_env_end_00b9
  9873 00006401 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9874 00006405 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9875 00006409 48FFC6                  	inc rsi
  9876 0000640C 48FFC2                  	inc rdx
  9877 0000640F EBEA                    	jmp .L_lambda_opt_env_loop_00b9
  9878                                  .L_lambda_opt_env_end_00b9:
  9879 00006411 5B                      	pop rbx
  9880 00006412 BE00000000              	mov rsi, 0
  9881                                  .L_lambda_opt_params_loop_00b9:	; copy params
  9882 00006417 4883FE01                	cmp rsi, 1
  9883 0000641B 740E                    	je .L_lambda_opt_params_end_00b9
  9884 0000641D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9885 00006422 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9886 00006426 48FFC6                  	inc rsi
  9887 00006429 EBEC                    	jmp .L_lambda_opt_params_loop_00b9
  9888                                  .L_lambda_opt_params_end_00b9:
  9889 0000642B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9890 0000642E 4889C3                  	mov rbx, rax
  9891 00006431 58                      	pop rax
  9892 00006432 C60004                  	mov byte [rax], T_closure
  9893 00006435 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9894 00006439 48C74009[46640000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b9
  9895 00006441 E94E010000              	jmp .L_lambda_opt_end_00b9
  9896                                  .L_lambda_opt_code_00b9:	; lambda-simple body
  9897 00006446 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
  9898 0000644C 740D                    	je .L_lambda_opt_arity_check_exact_00b9 ;	 if equal, go to exact arity
  9899 0000644E 7F42                    	jg .L_lambda_opt_arity_check_more_00b9 ;	 if greater than, go to arity more
  9900 00006450 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
  9901 00006454 6A00                     	push 0
  9902 00006456 E99AF20000              	jmp L_error_incorrect_arity_opt
  9903                                  	.L_lambda_opt_arity_check_exact_00b9:
  9904 0000645B 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
  9905 00006460 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
  9906 00006465 4883EC08                	sub rsp, 8
  9907 00006469 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
  9908                                  	.L_lambda_opt_exact_shifting_loop_00b9:
  9909 0000646D 488B5108                	mov rdx, [rcx + 8]
  9910 00006471 488911                  	mov [rcx], rdx
  9911 00006474 4883C108                	add rcx, 8
  9912 00006478 4839CB                  	cmp rbx, rcx
  9913 0000647B 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00b9
  9914                                  	.L_lambda_opt_exact_shifting_loop_end_00b9:
  9915 0000647D 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
  9916 00006484 4883C001                	add rax, 1 ; 	arg count += 1
  9917 00006488 4889442410              	mov qword [rsp + 8 * 2], rax
  9918 0000648D E987000000              	jmp .L_lambda_opt_stack_adjusted_00b9
  9919                                  	.L_lambda_opt_arity_check_more_00b9:
  9920 00006492 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
  9920 00006494 [0100000000000000] 
  9921 0000649C 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
  9922 000064A2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00b9
  9923                                  	.L_lambda_opt_stack_shrink_loop_00b9:
  9924 000064A4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  9925 000064A9 E87AF20000              	call malloc ;	 allocated memory for the optional scheme list
  9926 000064AE C60021                  	mov byte[rax], T_pair ;	 set type pair
  9927 000064B1 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  9928 000064B5 4889C2                  	 mov rdx, rax ;	 list address is in rdx
  9929 000064B8 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
  9930 000064BD 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
  9931 000064C2 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
  9932 000064C6 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
  9933                                  	.L_lambda_opt_more_shifting_loop_00b9:
  9934 000064CB 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
  9935 000064CE 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
  9936 000064D2 4883EB08                	sub rbx, 8 
  9937 000064D6 4839DC                  	cmp rsp, rbx
  9938 000064D9 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00b9
  9939                                  	.L_lambda_opt_more_shifting_loop_end_00b9:
  9940 000064DB 4883C408                	add rsp, 8 ;	 update rsp
  9941 000064DF 488B5C2410              	mov rbx, [rsp + 8 * 2]
  9942 000064E4 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
  9943 000064E8 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
  9944 000064ED 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9945 000064F3 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00b9
  9946                                  	.L_lambda_opt_stack_shrink_loop_exit_00b9:
  9947 000064F5 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
  9948 000064FA 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
  9949 000064FF BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
  9950 00006504 E81FF20000              	call malloc ;	 allocated memory for the optional scheme list
  9951 00006509 C60021                  	mov byte[rax], T_pair ;	 set type pair
  9952 0000650C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
  9953 00006510 48895801                	mov SOB_PAIR_CAR(rax) , rbx
  9954 00006514 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
  9955                                  	.L_lambda_opt_stack_adjusted_00b9:
  9956 00006519 C8000000                	enter 0, 0
  9957                                  	; preparing a tail-call
  9958 0000651D 488B4520                	mov rax, PARAM(0)	; param s
  9959 00006521 50                      	push rax
  9960 00006522 48B8-                   	mov rax, L_constants + 2023
  9960 00006524 [E707000000000000] 
  9961 0000652C 50                      	push rax
  9962 0000652D 488B4510                	mov rax, ENV
  9963 00006531 488B00                  	mov rax, qword [rax + 8 * 0]
  9964 00006534 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
  9965 00006537 50                      	push rax
  9966 00006538 6A03                    	push 3	; arg count
  9967 0000653A 488B0425[3C150000]      	mov rax, qword [free_var_112]	; free var fold-left
  9968 00006542 803805                  	cmp byte [rax], T_undefined
  9969 00006545 0F84B0F00000            	je L_error_fvar_undefined
  9970 0000654B 803804                  	cmp byte [rax], T_closure
  9971 0000654E 0F852BF10000            	jne L_error_non_closure
  9972 00006554 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9973                                  
  9974                                  	; recycling the current frame
  9975 00006557 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
  9976 0000655A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
  9977 0000655D B907000000              	mov rcx, 3 + 4
  9978 00006562 488B5D18                	mov rbx, COUNT
  9979 00006566 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
  9980 0000656B 488D55F8                	lea rdx, [rbp - 8 * 1]
  9981                                  .L_tc_recycle_frame_loop_0704:
  9982 0000656F 4883F900                	cmp rcx, 0
  9983 00006573 7413                    	je .L_tc_recycle_frame_done_0704
  9984 00006575 488B32                  	mov rsi, qword [rdx]
  9985 00006578 488933                  	mov qword [rbx], rsi
  9986 0000657B 48FFC9                  	dec rcx
  9987 0000657E 4883EB08                	sub rbx, 8 * 1
  9988 00006582 4883EA08                	sub rdx, 8 * 1
  9989 00006586 EBE7                    	jmp .L_tc_recycle_frame_loop_0704
  9990                                  .L_tc_recycle_frame_done_0704:
  9991 00006588 488D6308                	lea rsp, [rbx + 8 * 1]
  9992 0000658C 5D                      	pop rbp	; the proc will restore it!
  9993 0000658D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9994 00006590 C9                      	leave
  9995 00006591 C21800                  	ret AND_KILL_FRAME(1)
  9996                                  .L_lambda_opt_end_00b9:	; new closure is in rax
  9997 00006594 C9                      	leave
  9998 00006595 C21800                  	ret AND_KILL_FRAME(1)
  9999                                  .L_lambda_simple_end_055b:	; new closure is in rax
 10000 00006598 803804                  	cmp byte [rax], T_closure
 10001 0000659B 0F85DEF00000            	jne L_error_non_closure
 10002 000065A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10003                                  
 10004                                  	; recycling the current frame
 10005 000065A4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10006 000065A7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10007 000065AA B905000000              	mov rcx, 1 + 4
 10008 000065AF 488B5D18                	mov rbx, COUNT
 10009 000065B3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10010 000065B8 488D55F8                	lea rdx, [rbp - 8 * 1]
 10011                                  .L_tc_recycle_frame_loop_0705:
 10012 000065BC 4883F900                	cmp rcx, 0
 10013 000065C0 7413                    	je .L_tc_recycle_frame_done_0705
 10014 000065C2 488B32                  	mov rsi, qword [rdx]
 10015 000065C5 488933                  	mov qword [rbx], rsi
 10016 000065C8 48FFC9                  	dec rcx
 10017 000065CB 4883EB08                	sub rbx, 8 * 1
 10018 000065CF 4883EA08                	sub rdx, 8 * 1
 10019 000065D3 EBE7                    	jmp .L_tc_recycle_frame_loop_0705
 10020                                  .L_tc_recycle_frame_done_0705:
 10021 000065D5 488D6308                	lea rsp, [rbx + 8 * 1]
 10022 000065D9 5D                      	pop rbp	; the proc will restore it!
 10023 000065DA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10024 000065DD C9                      	leave
 10025 000065DE C21800                  	ret AND_KILL_FRAME(1)
 10026                                  .L_lambda_simple_end_0559:	; new closure is in rax
 10027 000065E1 803804                  	cmp byte [rax], T_closure
 10028 000065E4 0F8595F00000            	jne L_error_non_closure
 10029 000065EA FF7001                  	push SOB_CLOSURE_ENV(rax)
 10030 000065ED FF5009                  	call SOB_CLOSURE_CODE(rax)
 10031 000065F0 48890425[6F150000]      	mov qword [free_var_115], rax
 10032 000065F8 48B8-                   	mov rax, sob_void
 10032 000065FA [0000000000000000] 
 10033                                  
 10034 00006602 4889C7                  	mov rdi, rax
 10035 00006605 E830F20000              	call print_sexpr_if_not_void
 10036                                  
 10037 0000660A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10038 0000660F E814F10000              	call malloc
 10039 00006614 50                      	push rax
 10040 00006615 BF00000000              	mov rdi, 8 * 0	; new rib
 10041 0000661A E809F10000              	call malloc
 10042 0000661F 50                      	push rax
 10043 00006620 BF08000000              	mov rdi, 8 * 1	; extended env
 10044 00006625 E8FEF00000              	call malloc
 10045 0000662A 488B7D10                	mov rdi, ENV
 10046 0000662E BE00000000              	mov rsi, 0
 10047 00006633 BA01000000              	mov rdx, 1
 10048                                  .L_lambda_simple_env_loop_055c:	; ext_env[i + 1] <-- env[i]
 10049 00006638 4883FE00                	cmp rsi, 0
 10050 0000663C 7410                    	je .L_lambda_simple_env_end_055c
 10051 0000663E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10052 00006642 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10053 00006646 48FFC6                  	inc rsi
 10054 00006649 48FFC2                  	inc rdx
 10055 0000664C EBEA                    	jmp .L_lambda_simple_env_loop_055c
 10056                                  .L_lambda_simple_env_end_055c:
 10057 0000664E 5B                      	pop rbx
 10058 0000664F BE00000000              	mov rsi, 0
 10059                                  .L_lambda_simple_params_loop_055c:	; copy params
 10060 00006654 4883FE00                	cmp rsi, 0
 10061 00006658 740E                    	je .L_lambda_simple_params_end_055c
 10062 0000665A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10063 0000665F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10064 00006663 48FFC6                  	inc rsi
 10065 00006666 EBEC                    	jmp .L_lambda_simple_params_loop_055c
 10066                                  .L_lambda_simple_params_end_055c:
 10067 00006668 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10068 0000666B 4889C3                  	mov rbx, rax
 10069 0000666E 58                      	pop rax
 10070 0000666F C60004                  	mov byte [rax], T_closure
 10071 00006672 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10072 00006676 48C74009[83660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_055c
 10073 0000667E E989000000              	jmp .L_lambda_simple_end_055c
 10074                                  .L_lambda_simple_code_055c:	; lambda-simple body
 10075 00006683 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10076 00006689 740B                    	je .L_lambda_simple_arity_check_ok_055c
 10077 0000668B FF742410                	push qword [rsp + 8 * 2]
 10078 0000668F 6A00                    	push 0
 10079 00006691 E94BF00000              	jmp L_error_incorrect_arity_simple
 10080                                  .L_lambda_simple_arity_check_ok_055c:
 10081 00006696 C8000000                	enter 0, 0
 10082                                  	; preparing a tail-call
 10083 0000669A 48B8-                   	mov rax, L_constants + 2075
 10083 0000669C [1B08000000000000] 
 10084 000066A4 50                      	push rax
 10085 000066A5 48B8-                   	mov rax, L_constants + 2139
 10085 000066A7 [5B08000000000000] 
 10086 000066AF 50                      	push rax
 10087 000066B0 6A02                    	push 2	; arg count
 10088 000066B2 488B0425[96100000]      	mov rax, qword [free_var_42]	; free var error
 10089 000066BA 803805                  	cmp byte [rax], T_undefined
 10090 000066BD 0F8438EF0000            	je L_error_fvar_undefined
 10091 000066C3 803804                  	cmp byte [rax], T_closure
 10092 000066C6 0F85B3EF0000            	jne L_error_non_closure
 10093 000066CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 10094                                  
 10095                                  	; recycling the current frame
 10096 000066CF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10097 000066D2 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10098 000066D5 B906000000              	mov rcx, 2 + 4
 10099 000066DA 488B5D18                	mov rbx, COUNT
 10100 000066DE 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10101 000066E3 488D55F8                	lea rdx, [rbp - 8 * 1]
 10102                                  .L_tc_recycle_frame_loop_0706:
 10103 000066E7 4883F900                	cmp rcx, 0
 10104 000066EB 7413                    	je .L_tc_recycle_frame_done_0706
 10105 000066ED 488B32                  	mov rsi, qword [rdx]
 10106 000066F0 488933                  	mov qword [rbx], rsi
 10107 000066F3 48FFC9                  	dec rcx
 10108 000066F6 4883EB08                	sub rbx, 8 * 1
 10109 000066FA 4883EA08                	sub rdx, 8 * 1
 10110 000066FE EBE7                    	jmp .L_tc_recycle_frame_loop_0706
 10111                                  .L_tc_recycle_frame_done_0706:
 10112 00006700 488D6308                	lea rsp, [rbx + 8 * 1]
 10113 00006704 5D                      	pop rbp	; the proc will restore it!
 10114 00006705 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10115 00006708 C9                      	leave
 10116 00006709 C21000                  	ret AND_KILL_FRAME(0)
 10117                                  .L_lambda_simple_end_055c:	; new closure is in rax
 10118 0000670C 50                      	push rax
 10119 0000670D 6A01                    	push 1	; arg count
 10120 0000670F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10121 00006714 E80FF00000              	call malloc
 10122 00006719 50                      	push rax
 10123 0000671A BF00000000              	mov rdi, 8 * 0	; new rib
 10124 0000671F E804F00000              	call malloc
 10125 00006724 50                      	push rax
 10126 00006725 BF08000000              	mov rdi, 8 * 1	; extended env
 10127 0000672A E8F9EF0000              	call malloc
 10128 0000672F 488B7D10                	mov rdi, ENV
 10129 00006733 BE00000000              	mov rsi, 0
 10130 00006738 BA01000000              	mov rdx, 1
 10131                                  .L_lambda_simple_env_loop_055d:	; ext_env[i + 1] <-- env[i]
 10132 0000673D 4883FE00                	cmp rsi, 0
 10133 00006741 7410                    	je .L_lambda_simple_env_end_055d
 10134 00006743 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10135 00006747 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10136 0000674B 48FFC6                  	inc rsi
 10137 0000674E 48FFC2                  	inc rdx
 10138 00006751 EBEA                    	jmp .L_lambda_simple_env_loop_055d
 10139                                  .L_lambda_simple_env_end_055d:
 10140 00006753 5B                      	pop rbx
 10141 00006754 BE00000000              	mov rsi, 0
 10142                                  .L_lambda_simple_params_loop_055d:	; copy params
 10143 00006759 4883FE00                	cmp rsi, 0
 10144 0000675D 740E                    	je .L_lambda_simple_params_end_055d
 10145 0000675F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10146 00006764 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10147 00006768 48FFC6                  	inc rsi
 10148 0000676B EBEC                    	jmp .L_lambda_simple_params_loop_055d
 10149                                  .L_lambda_simple_params_end_055d:
 10150 0000676D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10151 00006770 4889C3                  	mov rbx, rax
 10152 00006773 58                      	pop rax
 10153 00006774 C60004                  	mov byte [rax], T_closure
 10154 00006777 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10155 0000677B 48C74009[88670000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_055d
 10156 00006783 E9060D0000              	jmp .L_lambda_simple_end_055d
 10157                                  .L_lambda_simple_code_055d:	; lambda-simple body
 10158 00006788 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10159 0000678E 740B                    	je .L_lambda_simple_arity_check_ok_055d
 10160 00006790 FF742410                	push qword [rsp + 8 * 2]
 10161 00006794 6A01                    	push 1
 10162 00006796 E946EF0000              	jmp L_error_incorrect_arity_simple
 10163                                  .L_lambda_simple_arity_check_ok_055d:
 10164 0000679B C8000000                	enter 0, 0
 10165                                  	; preparing a tail-call
 10166 0000679F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10167 000067A4 E87FEF0000              	call malloc
 10168 000067A9 50                      	push rax
 10169 000067AA BF08000000              	mov rdi, 8 * 1	; new rib
 10170 000067AF E874EF0000              	call malloc
 10171 000067B4 50                      	push rax
 10172 000067B5 BF10000000              	mov rdi, 8 * 2	; extended env
 10173 000067BA E869EF0000              	call malloc
 10174 000067BF 488B7D10                	mov rdi, ENV
 10175 000067C3 BE00000000              	mov rsi, 0
 10176 000067C8 BA01000000              	mov rdx, 1
 10177                                  .L_lambda_simple_env_loop_055e:	; ext_env[i + 1] <-- env[i]
 10178 000067CD 4883FE01                	cmp rsi, 1
 10179 000067D1 7410                    	je .L_lambda_simple_env_end_055e
 10180 000067D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10181 000067D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10182 000067DB 48FFC6                  	inc rsi
 10183 000067DE 48FFC2                  	inc rdx
 10184 000067E1 EBEA                    	jmp .L_lambda_simple_env_loop_055e
 10185                                  .L_lambda_simple_env_end_055e:
 10186 000067E3 5B                      	pop rbx
 10187 000067E4 BE00000000              	mov rsi, 0
 10188                                  .L_lambda_simple_params_loop_055e:	; copy params
 10189 000067E9 4883FE01                	cmp rsi, 1
 10190 000067ED 740E                    	je .L_lambda_simple_params_end_055e
 10191 000067EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10192 000067F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10193 000067F8 48FFC6                  	inc rsi
 10194 000067FB EBEC                    	jmp .L_lambda_simple_params_loop_055e
 10195                                  .L_lambda_simple_params_end_055e:
 10196 000067FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10197 00006800 4889C3                  	mov rbx, rax
 10198 00006803 58                      	pop rax
 10199 00006804 C60004                  	mov byte [rax], T_closure
 10200 00006807 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10201 0000680B 48C74009[18680000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_055e
 10202 00006813 E92B080000              	jmp .L_lambda_simple_end_055e
 10203                                  .L_lambda_simple_code_055e:	; lambda-simple body
 10204 00006818 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10205 0000681E 740B                    	je .L_lambda_simple_arity_check_ok_055e
 10206 00006820 FF742410                	push qword [rsp + 8 * 2]
 10207 00006824 6A02                    	push 2
 10208 00006826 E9B6EE0000              	jmp L_error_incorrect_arity_simple
 10209                                  .L_lambda_simple_arity_check_ok_055e:
 10210 0000682B C8000000                	enter 0, 0
 10211 0000682F 488B4520                	mov rax, PARAM(0)	; param a
 10212 00006833 50                      	push rax
 10213 00006834 6A01                    	push 1	; arg count
 10214 00006836 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10215 0000683E 803805                  	cmp byte [rax], T_undefined
 10216 00006841 0F84B4ED0000            	je L_error_fvar_undefined
 10217 00006847 803804                  	cmp byte [rax], T_closure
 10218 0000684A 0F852FEE0000            	jne L_error_non_closure
 10219 00006850 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10220 00006853 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10221                                  
 10222 00006856 483D[02000000]          	cmp rax, sob_boolean_false
 10223 0000685C 0F8463020000            	je .L_if_else_03e8
 10224 00006862 488B4528                	mov rax, PARAM(1)	; param b
 10225 00006866 50                      	push rax
 10226 00006867 6A01                    	push 1	; arg count
 10227 00006869 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10228 00006871 803805                  	cmp byte [rax], T_undefined
 10229 00006874 0F8481ED0000            	je L_error_fvar_undefined
 10230 0000687A 803804                  	cmp byte [rax], T_closure
 10231 0000687D 0F85FCED0000            	jne L_error_non_closure
 10232 00006883 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10233 00006886 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10234                                  
 10235 00006889 483D[02000000]          	cmp rax, sob_boolean_false
 10236 0000688F 7467                    	je .L_if_else_03e9
 10237                                  	; preparing a tail-call
 10238 00006891 488B4528                	mov rax, PARAM(1)	; param b
 10239 00006895 50                      	push rax
 10240 00006896 488B4520                	mov rax, PARAM(0)	; param a
 10241 0000689A 50                      	push rax
 10242 0000689B 6A02                    	push 2	; arg count
 10243 0000689D 488B0425[63100000]      	mov rax, qword [free_var_39]	; free var __bin-sub-zz
 10244 000068A5 803805                  	cmp byte [rax], T_undefined
 10245 000068A8 0F844DED0000            	je L_error_fvar_undefined
 10246 000068AE 803804                  	cmp byte [rax], T_closure
 10247 000068B1 0F85C8ED0000            	jne L_error_non_closure
 10248 000068B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10249                                  
 10250                                  	; recycling the current frame
 10251 000068BA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10252 000068BD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10253 000068C0 B906000000              	mov rcx, 2 + 4
 10254 000068C5 488B5D18                	mov rbx, COUNT
 10255 000068C9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10256 000068CE 488D55F8                	lea rdx, [rbp - 8 * 1]
 10257                                  .L_tc_recycle_frame_loop_0707:
 10258 000068D2 4883F900                	cmp rcx, 0
 10259 000068D6 7413                    	je .L_tc_recycle_frame_done_0707
 10260 000068D8 488B32                  	mov rsi, qword [rdx]
 10261 000068DB 488933                  	mov qword [rbx], rsi
 10262 000068DE 48FFC9                  	dec rcx
 10263 000068E1 4883EB08                	sub rbx, 8 * 1
 10264 000068E5 4883EA08                	sub rdx, 8 * 1
 10265 000068E9 EBE7                    	jmp .L_tc_recycle_frame_loop_0707
 10266                                  .L_tc_recycle_frame_done_0707:
 10267 000068EB 488D6308                	lea rsp, [rbx + 8 * 1]
 10268 000068EF 5D                      	pop rbp	; the proc will restore it!
 10269 000068F0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10270                                  
 10271 000068F3 E9C8010000              	jmp .L_if_end_03e9
 10272                                  
 10273                                  	.L_if_else_03e9:
 10274 000068F8 488B4528                	mov rax, PARAM(1)	; param b
 10275 000068FC 50                      	push rax
 10276 000068FD 6A01                    	push 1	; arg count
 10277 000068FF 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10278 00006907 803805                  	cmp byte [rax], T_undefined
 10279 0000690A 0F84EBEC0000            	je L_error_fvar_undefined
 10280 00006910 803804                  	cmp byte [rax], T_closure
 10281 00006913 0F8566ED0000            	jne L_error_non_closure
 10282 00006919 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10283 0000691C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10284                                  
 10285 0000691F 483D[02000000]          	cmp rax, sob_boolean_false
 10286 00006925 0F848A000000            	je .L_if_else_03ea
 10287                                  	; preparing a tail-call
 10288 0000692B 488B4528                	mov rax, PARAM(1)	; param b
 10289 0000692F 50                      	push rax
 10290 00006930 488B4520                	mov rax, PARAM(0)	; param a
 10291 00006934 50                      	push rax
 10292 00006935 6A01                    	push 1	; arg count
 10293 00006937 488B0425[EA110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 10294 0000693F 803805                  	cmp byte [rax], T_undefined
 10295 00006942 0F84B3EC0000            	je L_error_fvar_undefined
 10296 00006948 803804                  	cmp byte [rax], T_closure
 10297 0000694B 0F852EED0000            	jne L_error_non_closure
 10298 00006951 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10299 00006954 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10300 00006957 50                      	push rax
 10301 00006958 6A02                    	push 2	; arg count
 10302 0000695A 488B0425[1F100000]      	mov rax, qword [free_var_35]	; free var __bin-sub-qq
 10303 00006962 803805                  	cmp byte [rax], T_undefined
 10304 00006965 0F8490EC0000            	je L_error_fvar_undefined
 10305 0000696B 803804                  	cmp byte [rax], T_closure
 10306 0000696E 0F850BED0000            	jne L_error_non_closure
 10307 00006974 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10308                                  
 10309                                  	; recycling the current frame
 10310 00006977 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10311 0000697A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10312 0000697D B906000000              	mov rcx, 2 + 4
 10313 00006982 488B5D18                	mov rbx, COUNT
 10314 00006986 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10315 0000698B 488D55F8                	lea rdx, [rbp - 8 * 1]
 10316                                  .L_tc_recycle_frame_loop_0708:
 10317 0000698F 4883F900                	cmp rcx, 0
 10318 00006993 7413                    	je .L_tc_recycle_frame_done_0708
 10319 00006995 488B32                  	mov rsi, qword [rdx]
 10320 00006998 488933                  	mov qword [rbx], rsi
 10321 0000699B 48FFC9                  	dec rcx
 10322 0000699E 4883EB08                	sub rbx, 8 * 1
 10323 000069A2 4883EA08                	sub rdx, 8 * 1
 10324 000069A6 EBE7                    	jmp .L_tc_recycle_frame_loop_0708
 10325                                  .L_tc_recycle_frame_done_0708:
 10326 000069A8 488D6308                	lea rsp, [rbx + 8 * 1]
 10327 000069AC 5D                      	pop rbp	; the proc will restore it!
 10328 000069AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10329                                  
 10330 000069B0 E90B010000              	jmp .L_if_end_03ea
 10331                                  
 10332                                  	.L_if_else_03ea:
 10333 000069B5 488B4528                	mov rax, PARAM(1)	; param b
 10334 000069B9 50                      	push rax
 10335 000069BA 6A01                    	push 1	; arg count
 10336 000069BC 488B0425[A2150000]      	mov rax, qword [free_var_118]	; free var real
 10337 000069C4 803805                  	cmp byte [rax], T_undefined
 10338 000069C7 0F842EEC0000            	je L_error_fvar_undefined
 10339 000069CD 803804                  	cmp byte [rax], T_closure
 10340 000069D0 0F85A9EC0000            	jne L_error_non_closure
 10341 000069D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10342 000069D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10343                                  
 10344 000069DC 483D[02000000]          	cmp rax, sob_boolean_false
 10345 000069E2 0F8487000000            	je .L_if_else_03eb
 10346                                  	; preparing a tail-call
 10347 000069E8 488B4528                	mov rax, PARAM(1)	; param b
 10348 000069EC 50                      	push rax
 10349 000069ED 488B4520                	mov rax, PARAM(0)	; param a
 10350 000069F1 50                      	push rax
 10351 000069F2 6A01                    	push 1	; arg count
 10352 000069F4 488B0425[420F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 10353 000069FC 803805                  	cmp byte [rax], T_undefined
 10354 000069FF 0F84F6EB0000            	je L_error_fvar_undefined
 10355 00006A05 803804                  	cmp byte [rax], T_closure
 10356 00006A08 0F8571EC0000            	jne L_error_non_closure
 10357 00006A0E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10358 00006A11 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10359 00006A14 50                      	push rax
 10360 00006A15 6A02                    	push 2	; arg count
 10361 00006A17 488B0425[DB0F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10362 00006A1F 803805                  	cmp byte [rax], T_undefined
 10363 00006A22 0F84D3EB0000            	je L_error_fvar_undefined
 10364 00006A28 803804                  	cmp byte [rax], T_closure
 10365 00006A2B 0F854EEC0000            	jne L_error_non_closure
 10366 00006A31 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10367                                  
 10368                                  	; recycling the current frame
 10369 00006A34 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10370 00006A37 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10371 00006A3A B906000000              	mov rcx, 2 + 4
 10372 00006A3F 488B5D18                	mov rbx, COUNT
 10373 00006A43 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10374 00006A48 488D55F8                	lea rdx, [rbp - 8 * 1]
 10375                                  .L_tc_recycle_frame_loop_0709:
 10376 00006A4C 4883F900                	cmp rcx, 0
 10377 00006A50 7413                    	je .L_tc_recycle_frame_done_0709
 10378 00006A52 488B32                  	mov rsi, qword [rdx]
 10379 00006A55 488933                  	mov qword [rbx], rsi
 10380 00006A58 48FFC9                  	dec rcx
 10381 00006A5B 4883EB08                	sub rbx, 8 * 1
 10382 00006A5F 4883EA08                	sub rdx, 8 * 1
 10383 00006A63 EBE7                    	jmp .L_tc_recycle_frame_loop_0709
 10384                                  .L_tc_recycle_frame_done_0709:
 10385 00006A65 488D6308                	lea rsp, [rbx + 8 * 1]
 10386 00006A69 5D                      	pop rbp	; the proc will restore it!
 10387 00006A6A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10388                                  
 10389 00006A6D EB51                    	jmp .L_if_end_03eb
 10390                                  
 10391                                  	.L_if_else_03eb:
 10392                                  	; preparing a tail-call
 10393 00006A6F 6A00                    	push 0	; arg count
 10394 00006A71 488B4510                	mov rax, ENV
 10395 00006A75 488B00                  	mov rax, qword [rax + 8 * 0]
 10396 00006A78 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10397 00006A7B 803804                  	cmp byte [rax], T_closure
 10398 00006A7E 0F85FBEB0000            	jne L_error_non_closure
 10399 00006A84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10400                                  
 10401                                  	; recycling the current frame
 10402 00006A87 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10403 00006A8A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10404 00006A8D B904000000              	mov rcx, 0 + 4
 10405 00006A92 488B5D18                	mov rbx, COUNT
 10406 00006A96 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10407 00006A9B 488D55F8                	lea rdx, [rbp - 8 * 1]
 10408                                  .L_tc_recycle_frame_loop_070a:
 10409 00006A9F 4883F900                	cmp rcx, 0
 10410 00006AA3 7413                    	je .L_tc_recycle_frame_done_070a
 10411 00006AA5 488B32                  	mov rsi, qword [rdx]
 10412 00006AA8 488933                  	mov qword [rbx], rsi
 10413 00006AAB 48FFC9                  	dec rcx
 10414 00006AAE 4883EB08                	sub rbx, 8 * 1
 10415 00006AB2 4883EA08                	sub rdx, 8 * 1
 10416 00006AB6 EBE7                    	jmp .L_tc_recycle_frame_loop_070a
 10417                                  .L_tc_recycle_frame_done_070a:
 10418 00006AB8 488D6308                	lea rsp, [rbx + 8 * 1]
 10419 00006ABC 5D                      	pop rbp	; the proc will restore it!
 10420 00006ABD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10421                                  
 10422                                  	.L_if_end_03eb:
 10423                                  
 10424                                  	.L_if_end_03ea:
 10425                                  
 10426                                  	.L_if_end_03e9:
 10427                                  
 10428 00006AC0 E97A050000              	jmp .L_if_end_03e8
 10429                                  
 10430                                  	.L_if_else_03e8:
 10431 00006AC5 488B4520                	mov rax, PARAM(0)	; param a
 10432 00006AC9 50                      	push rax
 10433 00006ACA 6A01                    	push 1	; arg count
 10434 00006ACC 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10435 00006AD4 803805                  	cmp byte [rax], T_undefined
 10436 00006AD7 0F841EEB0000            	je L_error_fvar_undefined
 10437 00006ADD 803804                  	cmp byte [rax], T_closure
 10438 00006AE0 0F8599EB0000            	jne L_error_non_closure
 10439 00006AE6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10440 00006AE9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10441                                  
 10442 00006AEC 483D[02000000]          	cmp rax, sob_boolean_false
 10443 00006AF2 0F8463020000            	je .L_if_else_03ec
 10444 00006AF8 488B4528                	mov rax, PARAM(1)	; param b
 10445 00006AFC 50                      	push rax
 10446 00006AFD 6A01                    	push 1	; arg count
 10447 00006AFF 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10448 00006B07 803805                  	cmp byte [rax], T_undefined
 10449 00006B0A 0F84EBEA0000            	je L_error_fvar_undefined
 10450 00006B10 803804                  	cmp byte [rax], T_closure
 10451 00006B13 0F8566EB0000            	jne L_error_non_closure
 10452 00006B19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10453 00006B1C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10454                                  
 10455 00006B1F 483D[02000000]          	cmp rax, sob_boolean_false
 10456 00006B25 0F848A000000            	je .L_if_else_03ed
 10457                                  	; preparing a tail-call
 10458 00006B2B 488B4528                	mov rax, PARAM(1)	; param b
 10459 00006B2F 50                      	push rax
 10460 00006B30 6A01                    	push 1	; arg count
 10461 00006B32 488B0425[EA110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 10462 00006B3A 803805                  	cmp byte [rax], T_undefined
 10463 00006B3D 0F84B8EA0000            	je L_error_fvar_undefined
 10464 00006B43 803804                  	cmp byte [rax], T_closure
 10465 00006B46 0F8533EB0000            	jne L_error_non_closure
 10466 00006B4C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10467 00006B4F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10468 00006B52 50                      	push rax
 10469 00006B53 488B4520                	mov rax, PARAM(0)	; param a
 10470 00006B57 50                      	push rax
 10471 00006B58 6A02                    	push 2	; arg count
 10472 00006B5A 488B0425[1F100000]      	mov rax, qword [free_var_35]	; free var __bin-sub-qq
 10473 00006B62 803805                  	cmp byte [rax], T_undefined
 10474 00006B65 0F8490EA0000            	je L_error_fvar_undefined
 10475 00006B6B 803804                  	cmp byte [rax], T_closure
 10476 00006B6E 0F850BEB0000            	jne L_error_non_closure
 10477 00006B74 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10478                                  
 10479                                  	; recycling the current frame
 10480 00006B77 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10481 00006B7A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10482 00006B7D B906000000              	mov rcx, 2 + 4
 10483 00006B82 488B5D18                	mov rbx, COUNT
 10484 00006B86 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10485 00006B8B 488D55F8                	lea rdx, [rbp - 8 * 1]
 10486                                  .L_tc_recycle_frame_loop_070b:
 10487 00006B8F 4883F900                	cmp rcx, 0
 10488 00006B93 7413                    	je .L_tc_recycle_frame_done_070b
 10489 00006B95 488B32                  	mov rsi, qword [rdx]
 10490 00006B98 488933                  	mov qword [rbx], rsi
 10491 00006B9B 48FFC9                  	dec rcx
 10492 00006B9E 4883EB08                	sub rbx, 8 * 1
 10493 00006BA2 4883EA08                	sub rdx, 8 * 1
 10494 00006BA6 EBE7                    	jmp .L_tc_recycle_frame_loop_070b
 10495                                  .L_tc_recycle_frame_done_070b:
 10496 00006BA8 488D6308                	lea rsp, [rbx + 8 * 1]
 10497 00006BAC 5D                      	pop rbp	; the proc will restore it!
 10498 00006BAD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10499                                  
 10500 00006BB0 E9A1010000              	jmp .L_if_end_03ed
 10501                                  
 10502                                  	.L_if_else_03ed:
 10503 00006BB5 488B4528                	mov rax, PARAM(1)	; param b
 10504 00006BB9 50                      	push rax
 10505 00006BBA 6A01                    	push 1	; arg count
 10506 00006BBC 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10507 00006BC4 803805                  	cmp byte [rax], T_undefined
 10508 00006BC7 0F842EEA0000            	je L_error_fvar_undefined
 10509 00006BCD 803804                  	cmp byte [rax], T_closure
 10510 00006BD0 0F85A9EA0000            	jne L_error_non_closure
 10511 00006BD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10512 00006BD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10513                                  
 10514 00006BDC 483D[02000000]          	cmp rax, sob_boolean_false
 10515 00006BE2 7467                    	je .L_if_else_03ee
 10516                                  	; preparing a tail-call
 10517 00006BE4 488B4528                	mov rax, PARAM(1)	; param b
 10518 00006BE8 50                      	push rax
 10519 00006BE9 488B4520                	mov rax, PARAM(0)	; param a
 10520 00006BED 50                      	push rax
 10521 00006BEE 6A02                    	push 2	; arg count
 10522 00006BF0 488B0425[1F100000]      	mov rax, qword [free_var_35]	; free var __bin-sub-qq
 10523 00006BF8 803805                  	cmp byte [rax], T_undefined
 10524 00006BFB 0F84FAE90000            	je L_error_fvar_undefined
 10525 00006C01 803804                  	cmp byte [rax], T_closure
 10526 00006C04 0F8575EA0000            	jne L_error_non_closure
 10527 00006C0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10528                                  
 10529                                  	; recycling the current frame
 10530 00006C0D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10531 00006C10 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10532 00006C13 B906000000              	mov rcx, 2 + 4
 10533 00006C18 488B5D18                	mov rbx, COUNT
 10534 00006C1C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10535 00006C21 488D55F8                	lea rdx, [rbp - 8 * 1]
 10536                                  .L_tc_recycle_frame_loop_070c:
 10537 00006C25 4883F900                	cmp rcx, 0
 10538 00006C29 7413                    	je .L_tc_recycle_frame_done_070c
 10539 00006C2B 488B32                  	mov rsi, qword [rdx]
 10540 00006C2E 488933                  	mov qword [rbx], rsi
 10541 00006C31 48FFC9                  	dec rcx
 10542 00006C34 4883EB08                	sub rbx, 8 * 1
 10543 00006C38 4883EA08                	sub rdx, 8 * 1
 10544 00006C3C EBE7                    	jmp .L_tc_recycle_frame_loop_070c
 10545                                  .L_tc_recycle_frame_done_070c:
 10546 00006C3E 488D6308                	lea rsp, [rbx + 8 * 1]
 10547 00006C42 5D                      	pop rbp	; the proc will restore it!
 10548 00006C43 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10549                                  
 10550 00006C46 E90B010000              	jmp .L_if_end_03ee
 10551                                  
 10552                                  	.L_if_else_03ee:
 10553 00006C4B 488B4528                	mov rax, PARAM(1)	; param b
 10554 00006C4F 50                      	push rax
 10555 00006C50 6A01                    	push 1	; arg count
 10556 00006C52 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 10557 00006C5A 803805                  	cmp byte [rax], T_undefined
 10558 00006C5D 0F8498E90000            	je L_error_fvar_undefined
 10559 00006C63 803804                  	cmp byte [rax], T_closure
 10560 00006C66 0F8513EA0000            	jne L_error_non_closure
 10561 00006C6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10562 00006C6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10563                                  
 10564 00006C72 483D[02000000]          	cmp rax, sob_boolean_false
 10565 00006C78 0F8487000000            	je .L_if_else_03ef
 10566                                  	; preparing a tail-call
 10567 00006C7E 488B4528                	mov rax, PARAM(1)	; param b
 10568 00006C82 50                      	push rax
 10569 00006C83 488B4520                	mov rax, PARAM(0)	; param a
 10570 00006C87 50                      	push rax
 10571 00006C88 6A01                    	push 1	; arg count
 10572 00006C8A 488B0425[530F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 10573 00006C92 803805                  	cmp byte [rax], T_undefined
 10574 00006C95 0F8460E90000            	je L_error_fvar_undefined
 10575 00006C9B 803804                  	cmp byte [rax], T_closure
 10576 00006C9E 0F85DBE90000            	jne L_error_non_closure
 10577 00006CA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10578 00006CA7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10579 00006CAA 50                      	push rax
 10580 00006CAB 6A02                    	push 2	; arg count
 10581 00006CAD 488B0425[DB0F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10582 00006CB5 803805                  	cmp byte [rax], T_undefined
 10583 00006CB8 0F843DE90000            	je L_error_fvar_undefined
 10584 00006CBE 803804                  	cmp byte [rax], T_closure
 10585 00006CC1 0F85B8E90000            	jne L_error_non_closure
 10586 00006CC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10587                                  
 10588                                  	; recycling the current frame
 10589 00006CCA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10590 00006CCD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10591 00006CD0 B906000000              	mov rcx, 2 + 4
 10592 00006CD5 488B5D18                	mov rbx, COUNT
 10593 00006CD9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10594 00006CDE 488D55F8                	lea rdx, [rbp - 8 * 1]
 10595                                  .L_tc_recycle_frame_loop_070d:
 10596 00006CE2 4883F900                	cmp rcx, 0
 10597 00006CE6 7413                    	je .L_tc_recycle_frame_done_070d
 10598 00006CE8 488B32                  	mov rsi, qword [rdx]
 10599 00006CEB 488933                  	mov qword [rbx], rsi
 10600 00006CEE 48FFC9                  	dec rcx
 10601 00006CF1 4883EB08                	sub rbx, 8 * 1
 10602 00006CF5 4883EA08                	sub rdx, 8 * 1
 10603 00006CF9 EBE7                    	jmp .L_tc_recycle_frame_loop_070d
 10604                                  .L_tc_recycle_frame_done_070d:
 10605 00006CFB 488D6308                	lea rsp, [rbx + 8 * 1]
 10606 00006CFF 5D                      	pop rbp	; the proc will restore it!
 10607 00006D00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10608                                  
 10609 00006D03 EB51                    	jmp .L_if_end_03ef
 10610                                  
 10611                                  	.L_if_else_03ef:
 10612                                  	; preparing a tail-call
 10613 00006D05 6A00                    	push 0	; arg count
 10614 00006D07 488B4510                	mov rax, ENV
 10615 00006D0B 488B00                  	mov rax, qword [rax + 8 * 0]
 10616 00006D0E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10617 00006D11 803804                  	cmp byte [rax], T_closure
 10618 00006D14 0F8565E90000            	jne L_error_non_closure
 10619 00006D1A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10620                                  
 10621                                  	; recycling the current frame
 10622 00006D1D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10623 00006D20 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10624 00006D23 B904000000              	mov rcx, 0 + 4
 10625 00006D28 488B5D18                	mov rbx, COUNT
 10626 00006D2C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10627 00006D31 488D55F8                	lea rdx, [rbp - 8 * 1]
 10628                                  .L_tc_recycle_frame_loop_070e:
 10629 00006D35 4883F900                	cmp rcx, 0
 10630 00006D39 7413                    	je .L_tc_recycle_frame_done_070e
 10631 00006D3B 488B32                  	mov rsi, qword [rdx]
 10632 00006D3E 488933                  	mov qword [rbx], rsi
 10633 00006D41 48FFC9                  	dec rcx
 10634 00006D44 4883EB08                	sub rbx, 8 * 1
 10635 00006D48 4883EA08                	sub rdx, 8 * 1
 10636 00006D4C EBE7                    	jmp .L_tc_recycle_frame_loop_070e
 10637                                  .L_tc_recycle_frame_done_070e:
 10638 00006D4E 488D6308                	lea rsp, [rbx + 8 * 1]
 10639 00006D52 5D                      	pop rbp	; the proc will restore it!
 10640 00006D53 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10641                                  
 10642                                  	.L_if_end_03ef:
 10643                                  
 10644                                  	.L_if_end_03ee:
 10645                                  
 10646                                  	.L_if_end_03ed:
 10647                                  
 10648 00006D56 E9E4020000              	jmp .L_if_end_03ec
 10649                                  
 10650                                  	.L_if_else_03ec:
 10651 00006D5B 488B4520                	mov rax, PARAM(0)	; param a
 10652 00006D5F 50                      	push rax
 10653 00006D60 6A01                    	push 1	; arg count
 10654 00006D62 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 10655 00006D6A 803805                  	cmp byte [rax], T_undefined
 10656 00006D6D 0F8488E80000            	je L_error_fvar_undefined
 10657 00006D73 803804                  	cmp byte [rax], T_closure
 10658 00006D76 0F8503E90000            	jne L_error_non_closure
 10659 00006D7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10660 00006D7F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10661                                  
 10662 00006D82 483D[02000000]          	cmp rax, sob_boolean_false
 10663 00006D88 0F8460020000            	je .L_if_else_03f0
 10664 00006D8E 488B4528                	mov rax, PARAM(1)	; param b
 10665 00006D92 50                      	push rax
 10666 00006D93 6A01                    	push 1	; arg count
 10667 00006D95 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 10668 00006D9D 803805                  	cmp byte [rax], T_undefined
 10669 00006DA0 0F8455E80000            	je L_error_fvar_undefined
 10670 00006DA6 803804                  	cmp byte [rax], T_closure
 10671 00006DA9 0F85D0E80000            	jne L_error_non_closure
 10672 00006DAF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10673 00006DB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10674                                  
 10675 00006DB5 483D[02000000]          	cmp rax, sob_boolean_false
 10676 00006DBB 0F848A000000            	je .L_if_else_03f1
 10677                                  	; preparing a tail-call
 10678 00006DC1 488B4528                	mov rax, PARAM(1)	; param b
 10679 00006DC5 50                      	push rax
 10680 00006DC6 6A01                    	push 1	; arg count
 10681 00006DC8 488B0425[420F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 10682 00006DD0 803805                  	cmp byte [rax], T_undefined
 10683 00006DD3 0F8422E80000            	je L_error_fvar_undefined
 10684 00006DD9 803804                  	cmp byte [rax], T_closure
 10685 00006DDC 0F859DE80000            	jne L_error_non_closure
 10686 00006DE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10687 00006DE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10688 00006DE8 50                      	push rax
 10689 00006DE9 488B4520                	mov rax, PARAM(0)	; param a
 10690 00006DED 50                      	push rax
 10691 00006DEE 6A02                    	push 2	; arg count
 10692 00006DF0 488B0425[DB0F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10693 00006DF8 803805                  	cmp byte [rax], T_undefined
 10694 00006DFB 0F84FAE70000            	je L_error_fvar_undefined
 10695 00006E01 803804                  	cmp byte [rax], T_closure
 10696 00006E04 0F8575E80000            	jne L_error_non_closure
 10697 00006E0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10698                                  
 10699                                  	; recycling the current frame
 10700 00006E0D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10701 00006E10 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10702 00006E13 B906000000              	mov rcx, 2 + 4
 10703 00006E18 488B5D18                	mov rbx, COUNT
 10704 00006E1C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10705 00006E21 488D55F8                	lea rdx, [rbp - 8 * 1]
 10706                                  .L_tc_recycle_frame_loop_070f:
 10707 00006E25 4883F900                	cmp rcx, 0
 10708 00006E29 7413                    	je .L_tc_recycle_frame_done_070f
 10709 00006E2B 488B32                  	mov rsi, qword [rdx]
 10710 00006E2E 488933                  	mov qword [rbx], rsi
 10711 00006E31 48FFC9                  	dec rcx
 10712 00006E34 4883EB08                	sub rbx, 8 * 1
 10713 00006E38 4883EA08                	sub rdx, 8 * 1
 10714 00006E3C EBE7                    	jmp .L_tc_recycle_frame_loop_070f
 10715                                  .L_tc_recycle_frame_done_070f:
 10716 00006E3E 488D6308                	lea rsp, [rbx + 8 * 1]
 10717 00006E42 5D                      	pop rbp	; the proc will restore it!
 10718 00006E43 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10719                                  
 10720 00006E46 E9A1010000              	jmp .L_if_end_03f1
 10721                                  
 10722                                  	.L_if_else_03f1:
 10723 00006E4B 488B4528                	mov rax, PARAM(1)	; param b
 10724 00006E4F 50                      	push rax
 10725 00006E50 6A01                    	push 1	; arg count
 10726 00006E52 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 10727 00006E5A 803805                  	cmp byte [rax], T_undefined
 10728 00006E5D 0F8498E70000            	je L_error_fvar_undefined
 10729 00006E63 803804                  	cmp byte [rax], T_closure
 10730 00006E66 0F8513E80000            	jne L_error_non_closure
 10731 00006E6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10732 00006E6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10733                                  
 10734 00006E72 483D[02000000]          	cmp rax, sob_boolean_false
 10735 00006E78 0F848A000000            	je .L_if_else_03f2
 10736                                  	; preparing a tail-call
 10737 00006E7E 488B4528                	mov rax, PARAM(1)	; param b
 10738 00006E82 50                      	push rax
 10739 00006E83 6A01                    	push 1	; arg count
 10740 00006E85 488B0425[530F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 10741 00006E8D 803805                  	cmp byte [rax], T_undefined
 10742 00006E90 0F8465E70000            	je L_error_fvar_undefined
 10743 00006E96 803804                  	cmp byte [rax], T_closure
 10744 00006E99 0F85E0E70000            	jne L_error_non_closure
 10745 00006E9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10746 00006EA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10747 00006EA5 50                      	push rax
 10748 00006EA6 488B4520                	mov rax, PARAM(0)	; param a
 10749 00006EAA 50                      	push rax
 10750 00006EAB 6A02                    	push 2	; arg count
 10751 00006EAD 488B0425[DB0F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10752 00006EB5 803805                  	cmp byte [rax], T_undefined
 10753 00006EB8 0F843DE70000            	je L_error_fvar_undefined
 10754 00006EBE 803804                  	cmp byte [rax], T_closure
 10755 00006EC1 0F85B8E70000            	jne L_error_non_closure
 10756 00006EC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10757                                  
 10758                                  	; recycling the current frame
 10759 00006ECA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10760 00006ECD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10761 00006ED0 B906000000              	mov rcx, 2 + 4
 10762 00006ED5 488B5D18                	mov rbx, COUNT
 10763 00006ED9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10764 00006EDE 488D55F8                	lea rdx, [rbp - 8 * 1]
 10765                                  .L_tc_recycle_frame_loop_0710:
 10766 00006EE2 4883F900                	cmp rcx, 0
 10767 00006EE6 7413                    	je .L_tc_recycle_frame_done_0710
 10768 00006EE8 488B32                  	mov rsi, qword [rdx]
 10769 00006EEB 488933                  	mov qword [rbx], rsi
 10770 00006EEE 48FFC9                  	dec rcx
 10771 00006EF1 4883EB08                	sub rbx, 8 * 1
 10772 00006EF5 4883EA08                	sub rdx, 8 * 1
 10773 00006EF9 EBE7                    	jmp .L_tc_recycle_frame_loop_0710
 10774                                  .L_tc_recycle_frame_done_0710:
 10775 00006EFB 488D6308                	lea rsp, [rbx + 8 * 1]
 10776 00006EFF 5D                      	pop rbp	; the proc will restore it!
 10777 00006F00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10778                                  
 10779 00006F03 E9E4000000              	jmp .L_if_end_03f2
 10780                                  
 10781                                  	.L_if_else_03f2:
 10782 00006F08 488B4528                	mov rax, PARAM(1)	; param b
 10783 00006F0C 50                      	push rax
 10784 00006F0D 6A01                    	push 1	; arg count
 10785 00006F0F 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 10786 00006F17 803805                  	cmp byte [rax], T_undefined
 10787 00006F1A 0F84DBE60000            	je L_error_fvar_undefined
 10788 00006F20 803804                  	cmp byte [rax], T_closure
 10789 00006F23 0F8556E70000            	jne L_error_non_closure
 10790 00006F29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10791 00006F2C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10792                                  
 10793 00006F2F 483D[02000000]          	cmp rax, sob_boolean_false
 10794 00006F35 7464                    	je .L_if_else_03f3
 10795                                  	; preparing a tail-call
 10796 00006F37 488B4528                	mov rax, PARAM(1)	; param b
 10797 00006F3B 50                      	push rax
 10798 00006F3C 488B4520                	mov rax, PARAM(0)	; param a
 10799 00006F40 50                      	push rax
 10800 00006F41 6A02                    	push 2	; arg count
 10801 00006F43 488B0425[DB0F0000]      	mov rax, qword [free_var_31]	; free var __bin-sub-rr
 10802 00006F4B 803805                  	cmp byte [rax], T_undefined
 10803 00006F4E 0F84A7E60000            	je L_error_fvar_undefined
 10804 00006F54 803804                  	cmp byte [rax], T_closure
 10805 00006F57 0F8522E70000            	jne L_error_non_closure
 10806 00006F5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10807                                  
 10808                                  	; recycling the current frame
 10809 00006F60 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10810 00006F63 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10811 00006F66 B906000000              	mov rcx, 2 + 4
 10812 00006F6B 488B5D18                	mov rbx, COUNT
 10813 00006F6F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10814 00006F74 488D55F8                	lea rdx, [rbp - 8 * 1]
 10815                                  .L_tc_recycle_frame_loop_0711:
 10816 00006F78 4883F900                	cmp rcx, 0
 10817 00006F7C 7413                    	je .L_tc_recycle_frame_done_0711
 10818 00006F7E 488B32                  	mov rsi, qword [rdx]
 10819 00006F81 488933                  	mov qword [rbx], rsi
 10820 00006F84 48FFC9                  	dec rcx
 10821 00006F87 4883EB08                	sub rbx, 8 * 1
 10822 00006F8B 4883EA08                	sub rdx, 8 * 1
 10823 00006F8F EBE7                    	jmp .L_tc_recycle_frame_loop_0711
 10824                                  .L_tc_recycle_frame_done_0711:
 10825 00006F91 488D6308                	lea rsp, [rbx + 8 * 1]
 10826 00006F95 5D                      	pop rbp	; the proc will restore it!
 10827 00006F96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10828                                  
 10829 00006F99 EB51                    	jmp .L_if_end_03f3
 10830                                  
 10831                                  	.L_if_else_03f3:
 10832                                  	; preparing a tail-call
 10833 00006F9B 6A00                    	push 0	; arg count
 10834 00006F9D 488B4510                	mov rax, ENV
 10835 00006FA1 488B00                  	mov rax, qword [rax + 8 * 0]
 10836 00006FA4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10837 00006FA7 803804                  	cmp byte [rax], T_closure
 10838 00006FAA 0F85CFE60000            	jne L_error_non_closure
 10839 00006FB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10840                                  
 10841                                  	; recycling the current frame
 10842 00006FB3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10843 00006FB6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10844 00006FB9 B904000000              	mov rcx, 0 + 4
 10845 00006FBE 488B5D18                	mov rbx, COUNT
 10846 00006FC2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10847 00006FC7 488D55F8                	lea rdx, [rbp - 8 * 1]
 10848                                  .L_tc_recycle_frame_loop_0712:
 10849 00006FCB 4883F900                	cmp rcx, 0
 10850 00006FCF 7413                    	je .L_tc_recycle_frame_done_0712
 10851 00006FD1 488B32                  	mov rsi, qword [rdx]
 10852 00006FD4 488933                  	mov qword [rbx], rsi
 10853 00006FD7 48FFC9                  	dec rcx
 10854 00006FDA 4883EB08                	sub rbx, 8 * 1
 10855 00006FDE 4883EA08                	sub rdx, 8 * 1
 10856 00006FE2 EBE7                    	jmp .L_tc_recycle_frame_loop_0712
 10857                                  .L_tc_recycle_frame_done_0712:
 10858 00006FE4 488D6308                	lea rsp, [rbx + 8 * 1]
 10859 00006FE8 5D                      	pop rbp	; the proc will restore it!
 10860 00006FE9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10861                                  
 10862                                  	.L_if_end_03f3:
 10863                                  
 10864                                  	.L_if_end_03f2:
 10865                                  
 10866                                  	.L_if_end_03f1:
 10867                                  
 10868 00006FEC EB51                    	jmp .L_if_end_03f0
 10869                                  
 10870                                  	.L_if_else_03f0:
 10871                                  	; preparing a tail-call
 10872 00006FEE 6A00                    	push 0	; arg count
 10873 00006FF0 488B4510                	mov rax, ENV
 10874 00006FF4 488B00                  	mov rax, qword [rax + 8 * 0]
 10875 00006FF7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10876 00006FFA 803804                  	cmp byte [rax], T_closure
 10877 00006FFD 0F857CE60000            	jne L_error_non_closure
 10878 00007003 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10879                                  
 10880                                  	; recycling the current frame
 10881 00007006 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 10882 00007009 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 10883 0000700C B904000000              	mov rcx, 0 + 4
 10884 00007011 488B5D18                	mov rbx, COUNT
 10885 00007015 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 10886 0000701A 488D55F8                	lea rdx, [rbp - 8 * 1]
 10887                                  .L_tc_recycle_frame_loop_0713:
 10888 0000701E 4883F900                	cmp rcx, 0
 10889 00007022 7413                    	je .L_tc_recycle_frame_done_0713
 10890 00007024 488B32                  	mov rsi, qword [rdx]
 10891 00007027 488933                  	mov qword [rbx], rsi
 10892 0000702A 48FFC9                  	dec rcx
 10893 0000702D 4883EB08                	sub rbx, 8 * 1
 10894 00007031 4883EA08                	sub rdx, 8 * 1
 10895 00007035 EBE7                    	jmp .L_tc_recycle_frame_loop_0713
 10896                                  .L_tc_recycle_frame_done_0713:
 10897 00007037 488D6308                	lea rsp, [rbx + 8 * 1]
 10898 0000703B 5D                      	pop rbp	; the proc will restore it!
 10899 0000703C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10900                                  
 10901                                  	.L_if_end_03f0:
 10902                                  
 10903                                  	.L_if_end_03ec:
 10904                                  
 10905                                  	.L_if_end_03e8:
 10906 0000703F C9                      	leave
 10907 00007040 C22000                  	ret AND_KILL_FRAME(2)
 10908                                  .L_lambda_simple_end_055e:	; new closure is in rax
 10909 00007043 50                      	push rax
 10910 00007044 6A01                    	push 1	; arg count
 10911 00007046 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10912 0000704B E8D8E60000              	call malloc
 10913 00007050 50                      	push rax
 10914 00007051 BF08000000              	mov rdi, 8 * 1	; new rib
 10915 00007056 E8CDE60000              	call malloc
 10916 0000705B 50                      	push rax
 10917 0000705C BF10000000              	mov rdi, 8 * 2	; extended env
 10918 00007061 E8C2E60000              	call malloc
 10919 00007066 488B7D10                	mov rdi, ENV
 10920 0000706A BE00000000              	mov rsi, 0
 10921 0000706F BA01000000              	mov rdx, 1
 10922                                  .L_lambda_simple_env_loop_055f:	; ext_env[i + 1] <-- env[i]
 10923 00007074 4883FE01                	cmp rsi, 1
 10924 00007078 7410                    	je .L_lambda_simple_env_end_055f
 10925 0000707A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10926 0000707E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10927 00007082 48FFC6                  	inc rsi
 10928 00007085 48FFC2                  	inc rdx
 10929 00007088 EBEA                    	jmp .L_lambda_simple_env_loop_055f
 10930                                  .L_lambda_simple_env_end_055f:
 10931 0000708A 5B                      	pop rbx
 10932 0000708B BE00000000              	mov rsi, 0
 10933                                  .L_lambda_simple_params_loop_055f:	; copy params
 10934 00007090 4883FE01                	cmp rsi, 1
 10935 00007094 740E                    	je .L_lambda_simple_params_end_055f
 10936 00007096 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10937 0000709B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10938 0000709F 48FFC6                  	inc rsi
 10939 000070A2 EBEC                    	jmp .L_lambda_simple_params_loop_055f
 10940                                  .L_lambda_simple_params_end_055f:
 10941 000070A4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10942 000070A7 4889C3                  	mov rbx, rax
 10943 000070AA 58                      	pop rax
 10944 000070AB C60004                  	mov byte [rax], T_closure
 10945 000070AE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10946 000070B2 48C74009[BF700000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_055f
 10947 000070BA E986030000              	jmp .L_lambda_simple_end_055f
 10948                                  .L_lambda_simple_code_055f:	; lambda-simple body
 10949 000070BF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10950 000070C5 740B                    	je .L_lambda_simple_arity_check_ok_055f
 10951 000070C7 FF742410                	push qword [rsp + 8 * 2]
 10952 000070CB 6A01                    	push 1
 10953 000070CD E90FE60000              	jmp L_error_incorrect_arity_simple
 10954                                  .L_lambda_simple_arity_check_ok_055f:
 10955 000070D2 C8000000                	enter 0, 0
 10956 000070D6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10957 000070DB E848E60000              	call malloc
 10958 000070E0 50                      	push rax
 10959 000070E1 BF08000000              	mov rdi, 8 * 1	; new rib
 10960 000070E6 E83DE60000              	call malloc
 10961 000070EB 50                      	push rax
 10962 000070EC BF18000000              	mov rdi, 8 * 3	; extended env
 10963 000070F1 E832E60000              	call malloc
 10964 000070F6 488B7D10                	mov rdi, ENV
 10965 000070FA BE00000000              	mov rsi, 0
 10966 000070FF BA01000000              	mov rdx, 1
 10967                                  .L_lambda_opt_env_loop_00ba:	; ext_env[i + 1] <-- env[i]
 10968 00007104 4883FE02                	cmp rsi, 2
 10969 00007108 7410                    	je .L_lambda_opt_env_end_00ba
 10970 0000710A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10971 0000710E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10972 00007112 48FFC6                  	inc rsi
 10973 00007115 48FFC2                  	inc rdx
 10974 00007118 EBEA                    	jmp .L_lambda_opt_env_loop_00ba
 10975                                  .L_lambda_opt_env_end_00ba:
 10976 0000711A 5B                      	pop rbx
 10977 0000711B BE00000000              	mov rsi, 0
 10978                                  .L_lambda_opt_params_loop_00ba:	; copy params
 10979 00007120 4883FE01                	cmp rsi, 1
 10980 00007124 740E                    	je .L_lambda_opt_params_end_00ba
 10981 00007126 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10982 0000712B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10983 0000712F 48FFC6                  	inc rsi
 10984 00007132 EBEC                    	jmp .L_lambda_opt_params_loop_00ba
 10985                                  .L_lambda_opt_params_end_00ba:
 10986 00007134 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10987 00007137 4889C3                  	mov rbx, rax
 10988 0000713A 58                      	pop rax
 10989 0000713B C60004                  	mov byte [rax], T_closure
 10990 0000713E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10991 00007142 48C74009[4F710000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00ba
 10992 0000714A E9F2020000              	jmp .L_lambda_opt_end_00ba
 10993                                  .L_lambda_opt_code_00ba:	; lambda-simple body
 10994 0000714F 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 10995 00007155 740D                    	je .L_lambda_opt_arity_check_exact_00ba ;	 if equal, go to exact arity
 10996 00007157 7F42                    	jg .L_lambda_opt_arity_check_more_00ba ;	 if greater than, go to arity more
 10997 00007159 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 10998 0000715D 6A01                     	push 1
 10999 0000715F E991E50000              	jmp L_error_incorrect_arity_opt
 11000                                  	.L_lambda_opt_arity_check_exact_00ba:
 11001 00007164 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 11002 00007169 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 11003 0000716E 4883EC08                	sub rsp, 8
 11004 00007172 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 11005                                  	.L_lambda_opt_exact_shifting_loop_00ba:
 11006 00007176 488B5108                	mov rdx, [rcx + 8]
 11007 0000717A 488911                  	mov [rcx], rdx
 11008 0000717D 4883C108                	add rcx, 8
 11009 00007181 4839CB                  	cmp rbx, rcx
 11010 00007184 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00ba
 11011                                  	.L_lambda_opt_exact_shifting_loop_end_00ba:
 11012 00007186 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 11013 0000718D 4883C001                	add rax, 1 ; 	arg count += 1
 11014 00007191 4889442410              	mov qword [rsp + 8 * 2], rax
 11015 00007196 E987000000              	jmp .L_lambda_opt_stack_adjusted_00ba
 11016                                  	.L_lambda_opt_arity_check_more_00ba:
 11017 0000719B 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 11017 0000719D [0100000000000000] 
 11018 000071A5 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 11019 000071AB 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00ba
 11020                                  	.L_lambda_opt_stack_shrink_loop_00ba:
 11021 000071AD BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 11022 000071B2 E871E50000              	call malloc ;	 allocated memory for the optional scheme list
 11023 000071B7 C60021                  	mov byte[rax], T_pair ;	 set type pair
 11024 000071BA 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 11025 000071BE 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 11026 000071C1 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 11027 000071C6 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 11028 000071CB 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 11029 000071CF 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 11030                                  	.L_lambda_opt_more_shifting_loop_00ba:
 11031 000071D4 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 11032 000071D7 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 11033 000071DB 4883EB08                	sub rbx, 8 
 11034 000071DF 4839DC                  	cmp rsp, rbx
 11035 000071E2 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00ba
 11036                                  	.L_lambda_opt_more_shifting_loop_end_00ba:
 11037 000071E4 4883C408                	add rsp, 8 ;	 update rsp
 11038 000071E8 488B5C2410              	mov rbx, [rsp + 8 * 2]
 11039 000071ED 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 11040 000071F1 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 11041 000071F6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11042 000071FC 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00ba
 11043                                  	.L_lambda_opt_stack_shrink_loop_exit_00ba:
 11044 000071FE 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 11045 00007203 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 11046 00007208 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 11047 0000720D E816E50000              	call malloc ;	 allocated memory for the optional scheme list
 11048 00007212 C60021                  	mov byte[rax], T_pair ;	 set type pair
 11049 00007215 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 11050 00007219 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 11051 0000721D 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 11052                                  	.L_lambda_opt_stack_adjusted_00ba:
 11053 00007222 C8000000                	enter 0, 0
 11054 00007226 488B4528                	mov rax, PARAM(1)	; param s
 11055 0000722A 50                      	push rax
 11056 0000722B 6A01                    	push 1	; arg count
 11057 0000722D 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 11058 00007235 803805                  	cmp byte [rax], T_undefined
 11059 00007238 0F84BDE30000            	je L_error_fvar_undefined
 11060 0000723E 803804                  	cmp byte [rax], T_closure
 11061 00007241 0F8538E40000            	jne L_error_non_closure
 11062 00007247 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11063 0000724A FF5009                  	call SOB_CLOSURE_CODE(rax)
 11064                                  
 11065 0000724D 483D[02000000]          	cmp rax, sob_boolean_false
 11066 00007253 7466                    	je .L_if_else_03f4
 11067                                  	; preparing a tail-call
 11068 00007255 488B4520                	mov rax, PARAM(0)	; param a
 11069 00007259 50                      	push rax
 11070 0000725A 48B8-                   	mov rax, L_constants + 2023
 11070 0000725C [E707000000000000] 
 11071 00007264 50                      	push rax
 11072 00007265 6A02                    	push 2	; arg count
 11073 00007267 488B4510                	mov rax, ENV
 11074 0000726B 488B00                  	mov rax, qword [rax + 8 * 0]
 11075 0000726E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 11076 00007271 803804                  	cmp byte [rax], T_closure
 11077 00007274 0F8505E40000            	jne L_error_non_closure
 11078 0000727A FF7001                  	push SOB_CLOSURE_ENV(rax)
 11079                                  
 11080                                  	; recycling the current frame
 11081 0000727D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11082 00007280 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11083 00007283 B906000000              	mov rcx, 2 + 4
 11084 00007288 488B5D18                	mov rbx, COUNT
 11085 0000728C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11086 00007291 488D55F8                	lea rdx, [rbp - 8 * 1]
 11087                                  .L_tc_recycle_frame_loop_0714:
 11088 00007295 4883F900                	cmp rcx, 0
 11089 00007299 7413                    	je .L_tc_recycle_frame_done_0714
 11090 0000729B 488B32                  	mov rsi, qword [rdx]
 11091 0000729E 488933                  	mov qword [rbx], rsi
 11092 000072A1 48FFC9                  	dec rcx
 11093 000072A4 4883EB08                	sub rbx, 8 * 1
 11094 000072A8 4883EA08                	sub rdx, 8 * 1
 11095 000072AC EBE7                    	jmp .L_tc_recycle_frame_loop_0714
 11096                                  .L_tc_recycle_frame_done_0714:
 11097 000072AE 488D6308                	lea rsp, [rbx + 8 * 1]
 11098 000072B2 5D                      	pop rbp	; the proc will restore it!
 11099 000072B3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11100                                  
 11101 000072B6 E982010000              	jmp .L_if_end_03f4
 11102                                  
 11103                                  	.L_if_else_03f4:
 11104                                  	; preparing a tail-call
 11105 000072BB 488B4528                	mov rax, PARAM(1)	; param s
 11106 000072BF 50                      	push rax
 11107 000072C0 48B8-                   	mov rax, L_constants + 2023
 11107 000072C2 [E707000000000000] 
 11108 000072CA 50                      	push rax
 11109 000072CB 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 11110 000072D3 803805                  	cmp byte [rax], T_undefined
 11111 000072D6 0F841FE30000            	je L_error_fvar_undefined
 11112 000072DC 50                      	push rax
 11113 000072DD 6A03                    	push 3	; arg count
 11114 000072DF 488B0425[3C150000]      	mov rax, qword [free_var_112]	; free var fold-left
 11115 000072E7 803805                  	cmp byte [rax], T_undefined
 11116 000072EA 0F840BE30000            	je L_error_fvar_undefined
 11117 000072F0 803804                  	cmp byte [rax], T_closure
 11118 000072F3 0F8586E30000            	jne L_error_non_closure
 11119 000072F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11120 000072FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 11121 000072FF 50                      	push rax
 11122 00007300 6A01                    	push 1	; arg count
 11123 00007302 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11124 00007307 E81CE40000              	call malloc
 11125 0000730C 50                      	push rax
 11126 0000730D BF10000000              	mov rdi, 8 * 2	; new rib
 11127 00007312 E811E40000              	call malloc
 11128 00007317 50                      	push rax
 11129 00007318 BF20000000              	mov rdi, 8 * 4	; extended env
 11130 0000731D E806E40000              	call malloc
 11131 00007322 488B7D10                	mov rdi, ENV
 11132 00007326 BE00000000              	mov rsi, 0
 11133 0000732B BA01000000              	mov rdx, 1
 11134                                  .L_lambda_simple_env_loop_0560:	; ext_env[i + 1] <-- env[i]
 11135 00007330 4883FE03                	cmp rsi, 3
 11136 00007334 7410                    	je .L_lambda_simple_env_end_0560
 11137 00007336 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11138 0000733A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11139 0000733E 48FFC6                  	inc rsi
 11140 00007341 48FFC2                  	inc rdx
 11141 00007344 EBEA                    	jmp .L_lambda_simple_env_loop_0560
 11142                                  .L_lambda_simple_env_end_0560:
 11143 00007346 5B                      	pop rbx
 11144 00007347 BE00000000              	mov rsi, 0
 11145                                  .L_lambda_simple_params_loop_0560:	; copy params
 11146 0000734C 4883FE02                	cmp rsi, 2
 11147 00007350 740E                    	je .L_lambda_simple_params_end_0560
 11148 00007352 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11149 00007357 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11150 0000735B 48FFC6                  	inc rsi
 11151 0000735E EBEC                    	jmp .L_lambda_simple_params_loop_0560
 11152                                  .L_lambda_simple_params_end_0560:
 11153 00007360 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11154 00007363 4889C3                  	mov rbx, rax
 11155 00007366 58                      	pop rax
 11156 00007367 C60004                  	mov byte [rax], T_closure
 11157 0000736A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11158 0000736E 48C74009[7B730000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0560
 11159 00007376 E97D000000              	jmp .L_lambda_simple_end_0560
 11160                                  .L_lambda_simple_code_0560:	; lambda-simple body
 11161 0000737B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11162 00007381 740B                    	je .L_lambda_simple_arity_check_ok_0560
 11163 00007383 FF742410                	push qword [rsp + 8 * 2]
 11164 00007387 6A01                    	push 1
 11165 00007389 E953E30000              	jmp L_error_incorrect_arity_simple
 11166                                  .L_lambda_simple_arity_check_ok_0560:
 11167 0000738E C8000000                	enter 0, 0
 11168                                  	; preparing a tail-call
 11169 00007392 488B4520                	mov rax, PARAM(0)	; param b
 11170 00007396 50                      	push rax
 11171 00007397 488B4510                	mov rax, ENV
 11172 0000739B 488B00                  	mov rax, qword [rax + 8 * 0]
 11173 0000739E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 11174 000073A1 50                      	push rax
 11175 000073A2 6A02                    	push 2	; arg count
 11176 000073A4 488B4510                	mov rax, ENV
 11177 000073A8 488B4008                	mov rax, qword [rax + 8 * 1]
 11178 000073AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 11179 000073AF 803804                  	cmp byte [rax], T_closure
 11180 000073B2 0F85C7E20000            	jne L_error_non_closure
 11181 000073B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11182                                  
 11183                                  	; recycling the current frame
 11184 000073BB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11185 000073BE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11186 000073C1 B906000000              	mov rcx, 2 + 4
 11187 000073C6 488B5D18                	mov rbx, COUNT
 11188 000073CA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11189 000073CF 488D55F8                	lea rdx, [rbp - 8 * 1]
 11190                                  .L_tc_recycle_frame_loop_0715:
 11191 000073D3 4883F900                	cmp rcx, 0
 11192 000073D7 7413                    	je .L_tc_recycle_frame_done_0715
 11193 000073D9 488B32                  	mov rsi, qword [rdx]
 11194 000073DC 488933                  	mov qword [rbx], rsi
 11195 000073DF 48FFC9                  	dec rcx
 11196 000073E2 4883EB08                	sub rbx, 8 * 1
 11197 000073E6 4883EA08                	sub rdx, 8 * 1
 11198 000073EA EBE7                    	jmp .L_tc_recycle_frame_loop_0715
 11199                                  .L_tc_recycle_frame_done_0715:
 11200 000073EC 488D6308                	lea rsp, [rbx + 8 * 1]
 11201 000073F0 5D                      	pop rbp	; the proc will restore it!
 11202 000073F1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11203 000073F4 C9                      	leave
 11204 000073F5 C21800                  	ret AND_KILL_FRAME(1)
 11205                                  .L_lambda_simple_end_0560:	; new closure is in rax
 11206 000073F8 803804                  	cmp byte [rax], T_closure
 11207 000073FB 0F857EE20000            	jne L_error_non_closure
 11208 00007401 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11209                                  
 11210                                  	; recycling the current frame
 11211 00007404 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11212 00007407 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11213 0000740A B905000000              	mov rcx, 1 + 4
 11214 0000740F 488B5D18                	mov rbx, COUNT
 11215 00007413 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11216 00007418 488D55F8                	lea rdx, [rbp - 8 * 1]
 11217                                  .L_tc_recycle_frame_loop_0716:
 11218 0000741C 4883F900                	cmp rcx, 0
 11219 00007420 7413                    	je .L_tc_recycle_frame_done_0716
 11220 00007422 488B32                  	mov rsi, qword [rdx]
 11221 00007425 488933                  	mov qword [rbx], rsi
 11222 00007428 48FFC9                  	dec rcx
 11223 0000742B 4883EB08                	sub rbx, 8 * 1
 11224 0000742F 4883EA08                	sub rdx, 8 * 1
 11225 00007433 EBE7                    	jmp .L_tc_recycle_frame_loop_0716
 11226                                  .L_tc_recycle_frame_done_0716:
 11227 00007435 488D6308                	lea rsp, [rbx + 8 * 1]
 11228 00007439 5D                      	pop rbp	; the proc will restore it!
 11229 0000743A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11230                                  
 11231                                  	.L_if_end_03f4:
 11232 0000743D C9                      	leave
 11233 0000743E C22000                  	ret AND_KILL_FRAME(2)
 11234                                  .L_lambda_opt_end_00ba:	; new closure is in rax
 11235 00007441 C9                      	leave
 11236 00007442 C21800                  	ret AND_KILL_FRAME(1)
 11237                                  .L_lambda_simple_end_055f:	; new closure is in rax
 11238 00007445 803804                  	cmp byte [rax], T_closure
 11239 00007448 0F8531E20000            	jne L_error_non_closure
 11240 0000744E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11241                                  
 11242                                  	; recycling the current frame
 11243 00007451 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11244 00007454 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11245 00007457 B905000000              	mov rcx, 1 + 4
 11246 0000745C 488B5D18                	mov rbx, COUNT
 11247 00007460 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11248 00007465 488D55F8                	lea rdx, [rbp - 8 * 1]
 11249                                  .L_tc_recycle_frame_loop_0717:
 11250 00007469 4883F900                	cmp rcx, 0
 11251 0000746D 7413                    	je .L_tc_recycle_frame_done_0717
 11252 0000746F 488B32                  	mov rsi, qword [rdx]
 11253 00007472 488933                  	mov qword [rbx], rsi
 11254 00007475 48FFC9                  	dec rcx
 11255 00007478 4883EB08                	sub rbx, 8 * 1
 11256 0000747C 4883EA08                	sub rdx, 8 * 1
 11257 00007480 EBE7                    	jmp .L_tc_recycle_frame_loop_0717
 11258                                  .L_tc_recycle_frame_done_0717:
 11259 00007482 488D6308                	lea rsp, [rbx + 8 * 1]
 11260 00007486 5D                      	pop rbp	; the proc will restore it!
 11261 00007487 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11262 0000748A C9                      	leave
 11263 0000748B C21800                  	ret AND_KILL_FRAME(1)
 11264                                  .L_lambda_simple_end_055d:	; new closure is in rax
 11265 0000748E 803804                  	cmp byte [rax], T_closure
 11266 00007491 0F85E8E10000            	jne L_error_non_closure
 11267 00007497 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11268 0000749A FF5009                  	call SOB_CLOSURE_CODE(rax)
 11269 0000749D 48890425[91150000]      	mov qword [free_var_117], rax
 11270 000074A5 48B8-                   	mov rax, sob_void
 11270 000074A7 [0000000000000000] 
 11271                                  
 11272 000074AF 4889C7                  	mov rdi, rax
 11273 000074B2 E883E30000              	call print_sexpr_if_not_void
 11274                                  
 11275 000074B7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11276 000074BC E867E20000              	call malloc
 11277 000074C1 50                      	push rax
 11278 000074C2 BF00000000              	mov rdi, 8 * 0	; new rib
 11279 000074C7 E85CE20000              	call malloc
 11280 000074CC 50                      	push rax
 11281 000074CD BF08000000              	mov rdi, 8 * 1	; extended env
 11282 000074D2 E851E20000              	call malloc
 11283 000074D7 488B7D10                	mov rdi, ENV
 11284 000074DB BE00000000              	mov rsi, 0
 11285 000074E0 BA01000000              	mov rdx, 1
 11286                                  .L_lambda_simple_env_loop_0561:	; ext_env[i + 1] <-- env[i]
 11287 000074E5 4883FE00                	cmp rsi, 0
 11288 000074E9 7410                    	je .L_lambda_simple_env_end_0561
 11289 000074EB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11290 000074EF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11291 000074F3 48FFC6                  	inc rsi
 11292 000074F6 48FFC2                  	inc rdx
 11293 000074F9 EBEA                    	jmp .L_lambda_simple_env_loop_0561
 11294                                  .L_lambda_simple_env_end_0561:
 11295 000074FB 5B                      	pop rbx
 11296 000074FC BE00000000              	mov rsi, 0
 11297                                  .L_lambda_simple_params_loop_0561:	; copy params
 11298 00007501 4883FE00                	cmp rsi, 0
 11299 00007505 740E                    	je .L_lambda_simple_params_end_0561
 11300 00007507 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11301 0000750C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11302 00007510 48FFC6                  	inc rsi
 11303 00007513 EBEC                    	jmp .L_lambda_simple_params_loop_0561
 11304                                  .L_lambda_simple_params_end_0561:
 11305 00007515 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11306 00007518 4889C3                  	mov rbx, rax
 11307 0000751B 58                      	pop rax
 11308 0000751C C60004                  	mov byte [rax], T_closure
 11309 0000751F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11310 00007523 48C74009[30750000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0561
 11311 0000752B E989000000              	jmp .L_lambda_simple_end_0561
 11312                                  .L_lambda_simple_code_0561:	; lambda-simple body
 11313 00007530 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11314 00007536 740B                    	je .L_lambda_simple_arity_check_ok_0561
 11315 00007538 FF742410                	push qword [rsp + 8 * 2]
 11316 0000753C 6A00                    	push 0
 11317 0000753E E99EE10000              	jmp L_error_incorrect_arity_simple
 11318                                  .L_lambda_simple_arity_check_ok_0561:
 11319 00007543 C8000000                	enter 0, 0
 11320                                  	; preparing a tail-call
 11321 00007547 48B8-                   	mov rax, L_constants + 2075
 11321 00007549 [1B08000000000000] 
 11322 00007551 50                      	push rax
 11323 00007552 48B8-                   	mov rax, L_constants + 2167
 11323 00007554 [7708000000000000] 
 11324 0000755C 50                      	push rax
 11325 0000755D 6A02                    	push 2	; arg count
 11326 0000755F 488B0425[96100000]      	mov rax, qword [free_var_42]	; free var error
 11327 00007567 803805                  	cmp byte [rax], T_undefined
 11328 0000756A 0F848BE00000            	je L_error_fvar_undefined
 11329 00007570 803804                  	cmp byte [rax], T_closure
 11330 00007573 0F8506E10000            	jne L_error_non_closure
 11331 00007579 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11332                                  
 11333                                  	; recycling the current frame
 11334 0000757C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11335 0000757F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11336 00007582 B906000000              	mov rcx, 2 + 4
 11337 00007587 488B5D18                	mov rbx, COUNT
 11338 0000758B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11339 00007590 488D55F8                	lea rdx, [rbp - 8 * 1]
 11340                                  .L_tc_recycle_frame_loop_0718:
 11341 00007594 4883F900                	cmp rcx, 0
 11342 00007598 7413                    	je .L_tc_recycle_frame_done_0718
 11343 0000759A 488B32                  	mov rsi, qword [rdx]
 11344 0000759D 488933                  	mov qword [rbx], rsi
 11345 000075A0 48FFC9                  	dec rcx
 11346 000075A3 4883EB08                	sub rbx, 8 * 1
 11347 000075A7 4883EA08                	sub rdx, 8 * 1
 11348 000075AB EBE7                    	jmp .L_tc_recycle_frame_loop_0718
 11349                                  .L_tc_recycle_frame_done_0718:
 11350 000075AD 488D6308                	lea rsp, [rbx + 8 * 1]
 11351 000075B1 5D                      	pop rbp	; the proc will restore it!
 11352 000075B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11353 000075B5 C9                      	leave
 11354 000075B6 C21000                  	ret AND_KILL_FRAME(0)
 11355                                  .L_lambda_simple_end_0561:	; new closure is in rax
 11356 000075B9 50                      	push rax
 11357 000075BA 6A01                    	push 1	; arg count
 11358 000075BC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11359 000075C1 E862E10000              	call malloc
 11360 000075C6 50                      	push rax
 11361 000075C7 BF00000000              	mov rdi, 8 * 0	; new rib
 11362 000075CC E857E10000              	call malloc
 11363 000075D1 50                      	push rax
 11364 000075D2 BF08000000              	mov rdi, 8 * 1	; extended env
 11365 000075D7 E84CE10000              	call malloc
 11366 000075DC 488B7D10                	mov rdi, ENV
 11367 000075E0 BE00000000              	mov rsi, 0
 11368 000075E5 BA01000000              	mov rdx, 1
 11369                                  .L_lambda_simple_env_loop_0562:	; ext_env[i + 1] <-- env[i]
 11370 000075EA 4883FE00                	cmp rsi, 0
 11371 000075EE 7410                    	je .L_lambda_simple_env_end_0562
 11372 000075F0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11373 000075F4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11374 000075F8 48FFC6                  	inc rsi
 11375 000075FB 48FFC2                  	inc rdx
 11376 000075FE EBEA                    	jmp .L_lambda_simple_env_loop_0562
 11377                                  .L_lambda_simple_env_end_0562:
 11378 00007600 5B                      	pop rbx
 11379 00007601 BE00000000              	mov rsi, 0
 11380                                  .L_lambda_simple_params_loop_0562:	; copy params
 11381 00007606 4883FE00                	cmp rsi, 0
 11382 0000760A 740E                    	je .L_lambda_simple_params_end_0562
 11383 0000760C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11384 00007611 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11385 00007615 48FFC6                  	inc rsi
 11386 00007618 EBEC                    	jmp .L_lambda_simple_params_loop_0562
 11387                                  .L_lambda_simple_params_end_0562:
 11388 0000761A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11389 0000761D 4889C3                  	mov rbx, rax
 11390 00007620 58                      	pop rax
 11391 00007621 C60004                  	mov byte [rax], T_closure
 11392 00007624 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11393 00007628 48C74009[35760000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0562
 11394 00007630 E9620B0000              	jmp .L_lambda_simple_end_0562
 11395                                  .L_lambda_simple_code_0562:	; lambda-simple body
 11396 00007635 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11397 0000763B 740B                    	je .L_lambda_simple_arity_check_ok_0562
 11398 0000763D FF742410                	push qword [rsp + 8 * 2]
 11399 00007641 6A01                    	push 1
 11400 00007643 E999E00000              	jmp L_error_incorrect_arity_simple
 11401                                  .L_lambda_simple_arity_check_ok_0562:
 11402 00007648 C8000000                	enter 0, 0
 11403                                  	; preparing a tail-call
 11404 0000764C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11405 00007651 E8D2E00000              	call malloc
 11406 00007656 50                      	push rax
 11407 00007657 BF08000000              	mov rdi, 8 * 1	; new rib
 11408 0000765C E8C7E00000              	call malloc
 11409 00007661 50                      	push rax
 11410 00007662 BF10000000              	mov rdi, 8 * 2	; extended env
 11411 00007667 E8BCE00000              	call malloc
 11412 0000766C 488B7D10                	mov rdi, ENV
 11413 00007670 BE00000000              	mov rsi, 0
 11414 00007675 BA01000000              	mov rdx, 1
 11415                                  .L_lambda_simple_env_loop_0563:	; ext_env[i + 1] <-- env[i]
 11416 0000767A 4883FE01                	cmp rsi, 1
 11417 0000767E 7410                    	je .L_lambda_simple_env_end_0563
 11418 00007680 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11419 00007684 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11420 00007688 48FFC6                  	inc rsi
 11421 0000768B 48FFC2                  	inc rdx
 11422 0000768E EBEA                    	jmp .L_lambda_simple_env_loop_0563
 11423                                  .L_lambda_simple_env_end_0563:
 11424 00007690 5B                      	pop rbx
 11425 00007691 BE00000000              	mov rsi, 0
 11426                                  .L_lambda_simple_params_loop_0563:	; copy params
 11427 00007696 4883FE01                	cmp rsi, 1
 11428 0000769A 740E                    	je .L_lambda_simple_params_end_0563
 11429 0000769C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11430 000076A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11431 000076A5 48FFC6                  	inc rsi
 11432 000076A8 EBEC                    	jmp .L_lambda_simple_params_loop_0563
 11433                                  .L_lambda_simple_params_end_0563:
 11434 000076AA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11435 000076AD 4889C3                  	mov rbx, rax
 11436 000076B0 58                      	pop rax
 11437 000076B1 C60004                  	mov byte [rax], T_closure
 11438 000076B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11439 000076B8 48C74009[C5760000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0563
 11440 000076C0 E92B080000              	jmp .L_lambda_simple_end_0563
 11441                                  .L_lambda_simple_code_0563:	; lambda-simple body
 11442 000076C5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11443 000076CB 740B                    	je .L_lambda_simple_arity_check_ok_0563
 11444 000076CD FF742410                	push qword [rsp + 8 * 2]
 11445 000076D1 6A02                    	push 2
 11446 000076D3 E909E00000              	jmp L_error_incorrect_arity_simple
 11447                                  .L_lambda_simple_arity_check_ok_0563:
 11448 000076D8 C8000000                	enter 0, 0
 11449 000076DC 488B4520                	mov rax, PARAM(0)	; param a
 11450 000076E0 50                      	push rax
 11451 000076E1 6A01                    	push 1	; arg count
 11452 000076E3 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11453 000076EB 803805                  	cmp byte [rax], T_undefined
 11454 000076EE 0F8407DF0000            	je L_error_fvar_undefined
 11455 000076F4 803804                  	cmp byte [rax], T_closure
 11456 000076F7 0F8582DF0000            	jne L_error_non_closure
 11457 000076FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 11458 00007700 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11459                                  
 11460 00007703 483D[02000000]          	cmp rax, sob_boolean_false
 11461 00007709 0F8463020000            	je .L_if_else_03f5
 11462 0000770F 488B4528                	mov rax, PARAM(1)	; param b
 11463 00007713 50                      	push rax
 11464 00007714 6A01                    	push 1	; arg count
 11465 00007716 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11466 0000771E 803805                  	cmp byte [rax], T_undefined
 11467 00007721 0F84D4DE0000            	je L_error_fvar_undefined
 11468 00007727 803804                  	cmp byte [rax], T_closure
 11469 0000772A 0F854FDF0000            	jne L_error_non_closure
 11470 00007730 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11471 00007733 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11472                                  
 11473 00007736 483D[02000000]          	cmp rax, sob_boolean_false
 11474 0000773C 7467                    	je .L_if_else_03f6
 11475                                  	; preparing a tail-call
 11476 0000773E 488B4528                	mov rax, PARAM(1)	; param b
 11477 00007742 50                      	push rax
 11478 00007743 488B4520                	mov rax, PARAM(0)	; param a
 11479 00007747 50                      	push rax
 11480 00007748 6A02                    	push 2	; arg count
 11481 0000774A 488B0425[74100000]      	mov rax, qword [free_var_40]	; free var __bin-mul-zz
 11482 00007752 803805                  	cmp byte [rax], T_undefined
 11483 00007755 0F84A0DE0000            	je L_error_fvar_undefined
 11484 0000775B 803804                  	cmp byte [rax], T_closure
 11485 0000775E 0F851BDF0000            	jne L_error_non_closure
 11486 00007764 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11487                                  
 11488                                  	; recycling the current frame
 11489 00007767 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11490 0000776A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11491 0000776D B906000000              	mov rcx, 2 + 4
 11492 00007772 488B5D18                	mov rbx, COUNT
 11493 00007776 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11494 0000777B 488D55F8                	lea rdx, [rbp - 8 * 1]
 11495                                  .L_tc_recycle_frame_loop_0719:
 11496 0000777F 4883F900                	cmp rcx, 0
 11497 00007783 7413                    	je .L_tc_recycle_frame_done_0719
 11498 00007785 488B32                  	mov rsi, qword [rdx]
 11499 00007788 488933                  	mov qword [rbx], rsi
 11500 0000778B 48FFC9                  	dec rcx
 11501 0000778E 4883EB08                	sub rbx, 8 * 1
 11502 00007792 4883EA08                	sub rdx, 8 * 1
 11503 00007796 EBE7                    	jmp .L_tc_recycle_frame_loop_0719
 11504                                  .L_tc_recycle_frame_done_0719:
 11505 00007798 488D6308                	lea rsp, [rbx + 8 * 1]
 11506 0000779C 5D                      	pop rbp	; the proc will restore it!
 11507 0000779D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11508                                  
 11509 000077A0 E9C8010000              	jmp .L_if_end_03f6
 11510                                  
 11511                                  	.L_if_else_03f6:
 11512 000077A5 488B4528                	mov rax, PARAM(1)	; param b
 11513 000077A9 50                      	push rax
 11514 000077AA 6A01                    	push 1	; arg count
 11515 000077AC 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11516 000077B4 803805                  	cmp byte [rax], T_undefined
 11517 000077B7 0F843EDE0000            	je L_error_fvar_undefined
 11518 000077BD 803804                  	cmp byte [rax], T_closure
 11519 000077C0 0F85B9DE0000            	jne L_error_non_closure
 11520 000077C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11521 000077C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11522                                  
 11523 000077CC 483D[02000000]          	cmp rax, sob_boolean_false
 11524 000077D2 0F848A000000            	je .L_if_else_03f7
 11525                                  	; preparing a tail-call
 11526 000077D8 488B4528                	mov rax, PARAM(1)	; param b
 11527 000077DC 50                      	push rax
 11528 000077DD 488B4520                	mov rax, PARAM(0)	; param a
 11529 000077E1 50                      	push rax
 11530 000077E2 6A01                    	push 1	; arg count
 11531 000077E4 488B0425[EA110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 11532 000077EC 803805                  	cmp byte [rax], T_undefined
 11533 000077EF 0F8406DE0000            	je L_error_fvar_undefined
 11534 000077F5 803804                  	cmp byte [rax], T_closure
 11535 000077F8 0F8581DE0000            	jne L_error_non_closure
 11536 000077FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 11537 00007801 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11538 00007804 50                      	push rax
 11539 00007805 6A02                    	push 2	; arg count
 11540 00007807 488B0425[30100000]      	mov rax, qword [free_var_36]	; free var __bin-mul-qq
 11541 0000780F 803805                  	cmp byte [rax], T_undefined
 11542 00007812 0F84E3DD0000            	je L_error_fvar_undefined
 11543 00007818 803804                  	cmp byte [rax], T_closure
 11544 0000781B 0F855EDE0000            	jne L_error_non_closure
 11545 00007821 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11546                                  
 11547                                  	; recycling the current frame
 11548 00007824 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11549 00007827 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11550 0000782A B906000000              	mov rcx, 2 + 4
 11551 0000782F 488B5D18                	mov rbx, COUNT
 11552 00007833 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11553 00007838 488D55F8                	lea rdx, [rbp - 8 * 1]
 11554                                  .L_tc_recycle_frame_loop_071a:
 11555 0000783C 4883F900                	cmp rcx, 0
 11556 00007840 7413                    	je .L_tc_recycle_frame_done_071a
 11557 00007842 488B32                  	mov rsi, qword [rdx]
 11558 00007845 488933                  	mov qword [rbx], rsi
 11559 00007848 48FFC9                  	dec rcx
 11560 0000784B 4883EB08                	sub rbx, 8 * 1
 11561 0000784F 4883EA08                	sub rdx, 8 * 1
 11562 00007853 EBE7                    	jmp .L_tc_recycle_frame_loop_071a
 11563                                  .L_tc_recycle_frame_done_071a:
 11564 00007855 488D6308                	lea rsp, [rbx + 8 * 1]
 11565 00007859 5D                      	pop rbp	; the proc will restore it!
 11566 0000785A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11567                                  
 11568 0000785D E90B010000              	jmp .L_if_end_03f7
 11569                                  
 11570                                  	.L_if_else_03f7:
 11571 00007862 488B4528                	mov rax, PARAM(1)	; param b
 11572 00007866 50                      	push rax
 11573 00007867 6A01                    	push 1	; arg count
 11574 00007869 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 11575 00007871 803805                  	cmp byte [rax], T_undefined
 11576 00007874 0F8481DD0000            	je L_error_fvar_undefined
 11577 0000787A 803804                  	cmp byte [rax], T_closure
 11578 0000787D 0F85FCDD0000            	jne L_error_non_closure
 11579 00007883 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11580 00007886 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11581                                  
 11582 00007889 483D[02000000]          	cmp rax, sob_boolean_false
 11583 0000788F 0F8487000000            	je .L_if_else_03f8
 11584                                  	; preparing a tail-call
 11585 00007895 488B4528                	mov rax, PARAM(1)	; param b
 11586 00007899 50                      	push rax
 11587 0000789A 488B4520                	mov rax, PARAM(0)	; param a
 11588 0000789E 50                      	push rax
 11589 0000789F 6A01                    	push 1	; arg count
 11590 000078A1 488B0425[420F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 11591 000078A9 803805                  	cmp byte [rax], T_undefined
 11592 000078AC 0F8449DD0000            	je L_error_fvar_undefined
 11593 000078B2 803804                  	cmp byte [rax], T_closure
 11594 000078B5 0F85C4DD0000            	jne L_error_non_closure
 11595 000078BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 11596 000078BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 11597 000078C1 50                      	push rax
 11598 000078C2 6A02                    	push 2	; arg count
 11599 000078C4 488B0425[EC0F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 11600 000078CC 803805                  	cmp byte [rax], T_undefined
 11601 000078CF 0F8426DD0000            	je L_error_fvar_undefined
 11602 000078D5 803804                  	cmp byte [rax], T_closure
 11603 000078D8 0F85A1DD0000            	jne L_error_non_closure
 11604 000078DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 11605                                  
 11606                                  	; recycling the current frame
 11607 000078E1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11608 000078E4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11609 000078E7 B906000000              	mov rcx, 2 + 4
 11610 000078EC 488B5D18                	mov rbx, COUNT
 11611 000078F0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11612 000078F5 488D55F8                	lea rdx, [rbp - 8 * 1]
 11613                                  .L_tc_recycle_frame_loop_071b:
 11614 000078F9 4883F900                	cmp rcx, 0
 11615 000078FD 7413                    	je .L_tc_recycle_frame_done_071b
 11616 000078FF 488B32                  	mov rsi, qword [rdx]
 11617 00007902 488933                  	mov qword [rbx], rsi
 11618 00007905 48FFC9                  	dec rcx
 11619 00007908 4883EB08                	sub rbx, 8 * 1
 11620 0000790C 4883EA08                	sub rdx, 8 * 1
 11621 00007910 EBE7                    	jmp .L_tc_recycle_frame_loop_071b
 11622                                  .L_tc_recycle_frame_done_071b:
 11623 00007912 488D6308                	lea rsp, [rbx + 8 * 1]
 11624 00007916 5D                      	pop rbp	; the proc will restore it!
 11625 00007917 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11626                                  
 11627 0000791A EB51                    	jmp .L_if_end_03f8
 11628                                  
 11629                                  	.L_if_else_03f8:
 11630                                  	; preparing a tail-call
 11631 0000791C 6A00                    	push 0	; arg count
 11632 0000791E 488B4510                	mov rax, ENV
 11633 00007922 488B00                  	mov rax, qword [rax + 8 * 0]
 11634 00007925 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11635 00007928 803804                  	cmp byte [rax], T_closure
 11636 0000792B 0F854EDD0000            	jne L_error_non_closure
 11637 00007931 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11638                                  
 11639                                  	; recycling the current frame
 11640 00007934 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11641 00007937 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11642 0000793A B904000000              	mov rcx, 0 + 4
 11643 0000793F 488B5D18                	mov rbx, COUNT
 11644 00007943 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11645 00007948 488D55F8                	lea rdx, [rbp - 8 * 1]
 11646                                  .L_tc_recycle_frame_loop_071c:
 11647 0000794C 4883F900                	cmp rcx, 0
 11648 00007950 7413                    	je .L_tc_recycle_frame_done_071c
 11649 00007952 488B32                  	mov rsi, qword [rdx]
 11650 00007955 488933                  	mov qword [rbx], rsi
 11651 00007958 48FFC9                  	dec rcx
 11652 0000795B 4883EB08                	sub rbx, 8 * 1
 11653 0000795F 4883EA08                	sub rdx, 8 * 1
 11654 00007963 EBE7                    	jmp .L_tc_recycle_frame_loop_071c
 11655                                  .L_tc_recycle_frame_done_071c:
 11656 00007965 488D6308                	lea rsp, [rbx + 8 * 1]
 11657 00007969 5D                      	pop rbp	; the proc will restore it!
 11658 0000796A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11659                                  
 11660                                  	.L_if_end_03f8:
 11661                                  
 11662                                  	.L_if_end_03f7:
 11663                                  
 11664                                  	.L_if_end_03f6:
 11665                                  
 11666 0000796D E97A050000              	jmp .L_if_end_03f5
 11667                                  
 11668                                  	.L_if_else_03f5:
 11669 00007972 488B4520                	mov rax, PARAM(0)	; param a
 11670 00007976 50                      	push rax
 11671 00007977 6A01                    	push 1	; arg count
 11672 00007979 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11673 00007981 803805                  	cmp byte [rax], T_undefined
 11674 00007984 0F8471DC0000            	je L_error_fvar_undefined
 11675 0000798A 803804                  	cmp byte [rax], T_closure
 11676 0000798D 0F85ECDC0000            	jne L_error_non_closure
 11677 00007993 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11678 00007996 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11679                                  
 11680 00007999 483D[02000000]          	cmp rax, sob_boolean_false
 11681 0000799F 0F8463020000            	je .L_if_else_03f9
 11682 000079A5 488B4528                	mov rax, PARAM(1)	; param b
 11683 000079A9 50                      	push rax
 11684 000079AA 6A01                    	push 1	; arg count
 11685 000079AC 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11686 000079B4 803805                  	cmp byte [rax], T_undefined
 11687 000079B7 0F843EDC0000            	je L_error_fvar_undefined
 11688 000079BD 803804                  	cmp byte [rax], T_closure
 11689 000079C0 0F85B9DC0000            	jne L_error_non_closure
 11690 000079C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11691 000079C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11692                                  
 11693 000079CC 483D[02000000]          	cmp rax, sob_boolean_false
 11694 000079D2 0F848A000000            	je .L_if_else_03fa
 11695                                  	; preparing a tail-call
 11696 000079D8 488B4528                	mov rax, PARAM(1)	; param b
 11697 000079DC 50                      	push rax
 11698 000079DD 6A01                    	push 1	; arg count
 11699 000079DF 488B0425[EA110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 11700 000079E7 803805                  	cmp byte [rax], T_undefined
 11701 000079EA 0F840BDC0000            	je L_error_fvar_undefined
 11702 000079F0 803804                  	cmp byte [rax], T_closure
 11703 000079F3 0F8586DC0000            	jne L_error_non_closure
 11704 000079F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11705 000079FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 11706 000079FF 50                      	push rax
 11707 00007A00 488B4520                	mov rax, PARAM(0)	; param a
 11708 00007A04 50                      	push rax
 11709 00007A05 6A02                    	push 2	; arg count
 11710 00007A07 488B0425[30100000]      	mov rax, qword [free_var_36]	; free var __bin-mul-qq
 11711 00007A0F 803805                  	cmp byte [rax], T_undefined
 11712 00007A12 0F84E3DB0000            	je L_error_fvar_undefined
 11713 00007A18 803804                  	cmp byte [rax], T_closure
 11714 00007A1B 0F855EDC0000            	jne L_error_non_closure
 11715 00007A21 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11716                                  
 11717                                  	; recycling the current frame
 11718 00007A24 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11719 00007A27 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11720 00007A2A B906000000              	mov rcx, 2 + 4
 11721 00007A2F 488B5D18                	mov rbx, COUNT
 11722 00007A33 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11723 00007A38 488D55F8                	lea rdx, [rbp - 8 * 1]
 11724                                  .L_tc_recycle_frame_loop_071d:
 11725 00007A3C 4883F900                	cmp rcx, 0
 11726 00007A40 7413                    	je .L_tc_recycle_frame_done_071d
 11727 00007A42 488B32                  	mov rsi, qword [rdx]
 11728 00007A45 488933                  	mov qword [rbx], rsi
 11729 00007A48 48FFC9                  	dec rcx
 11730 00007A4B 4883EB08                	sub rbx, 8 * 1
 11731 00007A4F 4883EA08                	sub rdx, 8 * 1
 11732 00007A53 EBE7                    	jmp .L_tc_recycle_frame_loop_071d
 11733                                  .L_tc_recycle_frame_done_071d:
 11734 00007A55 488D6308                	lea rsp, [rbx + 8 * 1]
 11735 00007A59 5D                      	pop rbp	; the proc will restore it!
 11736 00007A5A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11737                                  
 11738 00007A5D E9A1010000              	jmp .L_if_end_03fa
 11739                                  
 11740                                  	.L_if_else_03fa:
 11741 00007A62 488B4528                	mov rax, PARAM(1)	; param b
 11742 00007A66 50                      	push rax
 11743 00007A67 6A01                    	push 1	; arg count
 11744 00007A69 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11745 00007A71 803805                  	cmp byte [rax], T_undefined
 11746 00007A74 0F8481DB0000            	je L_error_fvar_undefined
 11747 00007A7A 803804                  	cmp byte [rax], T_closure
 11748 00007A7D 0F85FCDB0000            	jne L_error_non_closure
 11749 00007A83 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11750 00007A86 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11751                                  
 11752 00007A89 483D[02000000]          	cmp rax, sob_boolean_false
 11753 00007A8F 7467                    	je .L_if_else_03fb
 11754                                  	; preparing a tail-call
 11755 00007A91 488B4528                	mov rax, PARAM(1)	; param b
 11756 00007A95 50                      	push rax
 11757 00007A96 488B4520                	mov rax, PARAM(0)	; param a
 11758 00007A9A 50                      	push rax
 11759 00007A9B 6A02                    	push 2	; arg count
 11760 00007A9D 488B0425[30100000]      	mov rax, qword [free_var_36]	; free var __bin-mul-qq
 11761 00007AA5 803805                  	cmp byte [rax], T_undefined
 11762 00007AA8 0F844DDB0000            	je L_error_fvar_undefined
 11763 00007AAE 803804                  	cmp byte [rax], T_closure
 11764 00007AB1 0F85C8DB0000            	jne L_error_non_closure
 11765 00007AB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11766                                  
 11767                                  	; recycling the current frame
 11768 00007ABA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11769 00007ABD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11770 00007AC0 B906000000              	mov rcx, 2 + 4
 11771 00007AC5 488B5D18                	mov rbx, COUNT
 11772 00007AC9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11773 00007ACE 488D55F8                	lea rdx, [rbp - 8 * 1]
 11774                                  .L_tc_recycle_frame_loop_071e:
 11775 00007AD2 4883F900                	cmp rcx, 0
 11776 00007AD6 7413                    	je .L_tc_recycle_frame_done_071e
 11777 00007AD8 488B32                  	mov rsi, qword [rdx]
 11778 00007ADB 488933                  	mov qword [rbx], rsi
 11779 00007ADE 48FFC9                  	dec rcx
 11780 00007AE1 4883EB08                	sub rbx, 8 * 1
 11781 00007AE5 4883EA08                	sub rdx, 8 * 1
 11782 00007AE9 EBE7                    	jmp .L_tc_recycle_frame_loop_071e
 11783                                  .L_tc_recycle_frame_done_071e:
 11784 00007AEB 488D6308                	lea rsp, [rbx + 8 * 1]
 11785 00007AEF 5D                      	pop rbp	; the proc will restore it!
 11786 00007AF0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11787                                  
 11788 00007AF3 E90B010000              	jmp .L_if_end_03fb
 11789                                  
 11790                                  	.L_if_else_03fb:
 11791 00007AF8 488B4528                	mov rax, PARAM(1)	; param b
 11792 00007AFC 50                      	push rax
 11793 00007AFD 6A01                    	push 1	; arg count
 11794 00007AFF 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 11795 00007B07 803805                  	cmp byte [rax], T_undefined
 11796 00007B0A 0F84EBDA0000            	je L_error_fvar_undefined
 11797 00007B10 803804                  	cmp byte [rax], T_closure
 11798 00007B13 0F8566DB0000            	jne L_error_non_closure
 11799 00007B19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11800 00007B1C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11801                                  
 11802 00007B1F 483D[02000000]          	cmp rax, sob_boolean_false
 11803 00007B25 0F8487000000            	je .L_if_else_03fc
 11804                                  	; preparing a tail-call
 11805 00007B2B 488B4528                	mov rax, PARAM(1)	; param b
 11806 00007B2F 50                      	push rax
 11807 00007B30 488B4520                	mov rax, PARAM(0)	; param a
 11808 00007B34 50                      	push rax
 11809 00007B35 6A01                    	push 1	; arg count
 11810 00007B37 488B0425[530F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 11811 00007B3F 803805                  	cmp byte [rax], T_undefined
 11812 00007B42 0F84B3DA0000            	je L_error_fvar_undefined
 11813 00007B48 803804                  	cmp byte [rax], T_closure
 11814 00007B4B 0F852EDB0000            	jne L_error_non_closure
 11815 00007B51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11816 00007B54 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11817 00007B57 50                      	push rax
 11818 00007B58 6A02                    	push 2	; arg count
 11819 00007B5A 488B0425[EC0F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 11820 00007B62 803805                  	cmp byte [rax], T_undefined
 11821 00007B65 0F8490DA0000            	je L_error_fvar_undefined
 11822 00007B6B 803804                  	cmp byte [rax], T_closure
 11823 00007B6E 0F850BDB0000            	jne L_error_non_closure
 11824 00007B74 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11825                                  
 11826                                  	; recycling the current frame
 11827 00007B77 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11828 00007B7A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11829 00007B7D B906000000              	mov rcx, 2 + 4
 11830 00007B82 488B5D18                	mov rbx, COUNT
 11831 00007B86 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11832 00007B8B 488D55F8                	lea rdx, [rbp - 8 * 1]
 11833                                  .L_tc_recycle_frame_loop_071f:
 11834 00007B8F 4883F900                	cmp rcx, 0
 11835 00007B93 7413                    	je .L_tc_recycle_frame_done_071f
 11836 00007B95 488B32                  	mov rsi, qword [rdx]
 11837 00007B98 488933                  	mov qword [rbx], rsi
 11838 00007B9B 48FFC9                  	dec rcx
 11839 00007B9E 4883EB08                	sub rbx, 8 * 1
 11840 00007BA2 4883EA08                	sub rdx, 8 * 1
 11841 00007BA6 EBE7                    	jmp .L_tc_recycle_frame_loop_071f
 11842                                  .L_tc_recycle_frame_done_071f:
 11843 00007BA8 488D6308                	lea rsp, [rbx + 8 * 1]
 11844 00007BAC 5D                      	pop rbp	; the proc will restore it!
 11845 00007BAD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11846                                  
 11847 00007BB0 EB51                    	jmp .L_if_end_03fc
 11848                                  
 11849                                  	.L_if_else_03fc:
 11850                                  	; preparing a tail-call
 11851 00007BB2 6A00                    	push 0	; arg count
 11852 00007BB4 488B4510                	mov rax, ENV
 11853 00007BB8 488B00                  	mov rax, qword [rax + 8 * 0]
 11854 00007BBB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11855 00007BBE 803804                  	cmp byte [rax], T_closure
 11856 00007BC1 0F85B8DA0000            	jne L_error_non_closure
 11857 00007BC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11858                                  
 11859                                  	; recycling the current frame
 11860 00007BCA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11861 00007BCD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11862 00007BD0 B904000000              	mov rcx, 0 + 4
 11863 00007BD5 488B5D18                	mov rbx, COUNT
 11864 00007BD9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11865 00007BDE 488D55F8                	lea rdx, [rbp - 8 * 1]
 11866                                  .L_tc_recycle_frame_loop_0720:
 11867 00007BE2 4883F900                	cmp rcx, 0
 11868 00007BE6 7413                    	je .L_tc_recycle_frame_done_0720
 11869 00007BE8 488B32                  	mov rsi, qword [rdx]
 11870 00007BEB 488933                  	mov qword [rbx], rsi
 11871 00007BEE 48FFC9                  	dec rcx
 11872 00007BF1 4883EB08                	sub rbx, 8 * 1
 11873 00007BF5 4883EA08                	sub rdx, 8 * 1
 11874 00007BF9 EBE7                    	jmp .L_tc_recycle_frame_loop_0720
 11875                                  .L_tc_recycle_frame_done_0720:
 11876 00007BFB 488D6308                	lea rsp, [rbx + 8 * 1]
 11877 00007BFF 5D                      	pop rbp	; the proc will restore it!
 11878 00007C00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11879                                  
 11880                                  	.L_if_end_03fc:
 11881                                  
 11882                                  	.L_if_end_03fb:
 11883                                  
 11884                                  	.L_if_end_03fa:
 11885                                  
 11886 00007C03 E9E4020000              	jmp .L_if_end_03f9
 11887                                  
 11888                                  	.L_if_else_03f9:
 11889 00007C08 488B4520                	mov rax, PARAM(0)	; param a
 11890 00007C0C 50                      	push rax
 11891 00007C0D 6A01                    	push 1	; arg count
 11892 00007C0F 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 11893 00007C17 803805                  	cmp byte [rax], T_undefined
 11894 00007C1A 0F84DBD90000            	je L_error_fvar_undefined
 11895 00007C20 803804                  	cmp byte [rax], T_closure
 11896 00007C23 0F8556DA0000            	jne L_error_non_closure
 11897 00007C29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11898 00007C2C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11899                                  
 11900 00007C2F 483D[02000000]          	cmp rax, sob_boolean_false
 11901 00007C35 0F8460020000            	je .L_if_else_03fd
 11902 00007C3B 488B4528                	mov rax, PARAM(1)	; param b
 11903 00007C3F 50                      	push rax
 11904 00007C40 6A01                    	push 1	; arg count
 11905 00007C42 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 11906 00007C4A 803805                  	cmp byte [rax], T_undefined
 11907 00007C4D 0F84A8D90000            	je L_error_fvar_undefined
 11908 00007C53 803804                  	cmp byte [rax], T_closure
 11909 00007C56 0F8523DA0000            	jne L_error_non_closure
 11910 00007C5C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11911 00007C5F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11912                                  
 11913 00007C62 483D[02000000]          	cmp rax, sob_boolean_false
 11914 00007C68 0F848A000000            	je .L_if_else_03fe
 11915                                  	; preparing a tail-call
 11916 00007C6E 488B4528                	mov rax, PARAM(1)	; param b
 11917 00007C72 50                      	push rax
 11918 00007C73 6A01                    	push 1	; arg count
 11919 00007C75 488B0425[420F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 11920 00007C7D 803805                  	cmp byte [rax], T_undefined
 11921 00007C80 0F8475D90000            	je L_error_fvar_undefined
 11922 00007C86 803804                  	cmp byte [rax], T_closure
 11923 00007C89 0F85F0D90000            	jne L_error_non_closure
 11924 00007C8F FF7001                  	push SOB_CLOSURE_ENV(rax)
 11925 00007C92 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11926 00007C95 50                      	push rax
 11927 00007C96 488B4520                	mov rax, PARAM(0)	; param a
 11928 00007C9A 50                      	push rax
 11929 00007C9B 6A02                    	push 2	; arg count
 11930 00007C9D 488B0425[EC0F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 11931 00007CA5 803805                  	cmp byte [rax], T_undefined
 11932 00007CA8 0F844DD90000            	je L_error_fvar_undefined
 11933 00007CAE 803804                  	cmp byte [rax], T_closure
 11934 00007CB1 0F85C8D90000            	jne L_error_non_closure
 11935 00007CB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11936                                  
 11937                                  	; recycling the current frame
 11938 00007CBA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11939 00007CBD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11940 00007CC0 B906000000              	mov rcx, 2 + 4
 11941 00007CC5 488B5D18                	mov rbx, COUNT
 11942 00007CC9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 11943 00007CCE 488D55F8                	lea rdx, [rbp - 8 * 1]
 11944                                  .L_tc_recycle_frame_loop_0721:
 11945 00007CD2 4883F900                	cmp rcx, 0
 11946 00007CD6 7413                    	je .L_tc_recycle_frame_done_0721
 11947 00007CD8 488B32                  	mov rsi, qword [rdx]
 11948 00007CDB 488933                  	mov qword [rbx], rsi
 11949 00007CDE 48FFC9                  	dec rcx
 11950 00007CE1 4883EB08                	sub rbx, 8 * 1
 11951 00007CE5 4883EA08                	sub rdx, 8 * 1
 11952 00007CE9 EBE7                    	jmp .L_tc_recycle_frame_loop_0721
 11953                                  .L_tc_recycle_frame_done_0721:
 11954 00007CEB 488D6308                	lea rsp, [rbx + 8 * 1]
 11955 00007CEF 5D                      	pop rbp	; the proc will restore it!
 11956 00007CF0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11957                                  
 11958 00007CF3 E9A1010000              	jmp .L_if_end_03fe
 11959                                  
 11960                                  	.L_if_else_03fe:
 11961 00007CF8 488B4528                	mov rax, PARAM(1)	; param b
 11962 00007CFC 50                      	push rax
 11963 00007CFD 6A01                    	push 1	; arg count
 11964 00007CFF 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 11965 00007D07 803805                  	cmp byte [rax], T_undefined
 11966 00007D0A 0F84EBD80000            	je L_error_fvar_undefined
 11967 00007D10 803804                  	cmp byte [rax], T_closure
 11968 00007D13 0F8566D90000            	jne L_error_non_closure
 11969 00007D19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11970 00007D1C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11971                                  
 11972 00007D1F 483D[02000000]          	cmp rax, sob_boolean_false
 11973 00007D25 0F848A000000            	je .L_if_else_03ff
 11974                                  	; preparing a tail-call
 11975 00007D2B 488B4528                	mov rax, PARAM(1)	; param b
 11976 00007D2F 50                      	push rax
 11977 00007D30 6A01                    	push 1	; arg count
 11978 00007D32 488B0425[530F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 11979 00007D3A 803805                  	cmp byte [rax], T_undefined
 11980 00007D3D 0F84B8D80000            	je L_error_fvar_undefined
 11981 00007D43 803804                  	cmp byte [rax], T_closure
 11982 00007D46 0F8533D90000            	jne L_error_non_closure
 11983 00007D4C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11984 00007D4F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11985 00007D52 50                      	push rax
 11986 00007D53 488B4520                	mov rax, PARAM(0)	; param a
 11987 00007D57 50                      	push rax
 11988 00007D58 6A02                    	push 2	; arg count
 11989 00007D5A 488B0425[EC0F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 11990 00007D62 803805                  	cmp byte [rax], T_undefined
 11991 00007D65 0F8490D80000            	je L_error_fvar_undefined
 11992 00007D6B 803804                  	cmp byte [rax], T_closure
 11993 00007D6E 0F850BD90000            	jne L_error_non_closure
 11994 00007D74 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11995                                  
 11996                                  	; recycling the current frame
 11997 00007D77 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 11998 00007D7A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 11999 00007D7D B906000000              	mov rcx, 2 + 4
 12000 00007D82 488B5D18                	mov rbx, COUNT
 12001 00007D86 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12002 00007D8B 488D55F8                	lea rdx, [rbp - 8 * 1]
 12003                                  .L_tc_recycle_frame_loop_0722:
 12004 00007D8F 4883F900                	cmp rcx, 0
 12005 00007D93 7413                    	je .L_tc_recycle_frame_done_0722
 12006 00007D95 488B32                  	mov rsi, qword [rdx]
 12007 00007D98 488933                  	mov qword [rbx], rsi
 12008 00007D9B 48FFC9                  	dec rcx
 12009 00007D9E 4883EB08                	sub rbx, 8 * 1
 12010 00007DA2 4883EA08                	sub rdx, 8 * 1
 12011 00007DA6 EBE7                    	jmp .L_tc_recycle_frame_loop_0722
 12012                                  .L_tc_recycle_frame_done_0722:
 12013 00007DA8 488D6308                	lea rsp, [rbx + 8 * 1]
 12014 00007DAC 5D                      	pop rbp	; the proc will restore it!
 12015 00007DAD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12016                                  
 12017 00007DB0 E9E4000000              	jmp .L_if_end_03ff
 12018                                  
 12019                                  	.L_if_else_03ff:
 12020 00007DB5 488B4528                	mov rax, PARAM(1)	; param b
 12021 00007DB9 50                      	push rax
 12022 00007DBA 6A01                    	push 1	; arg count
 12023 00007DBC 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 12024 00007DC4 803805                  	cmp byte [rax], T_undefined
 12025 00007DC7 0F842ED80000            	je L_error_fvar_undefined
 12026 00007DCD 803804                  	cmp byte [rax], T_closure
 12027 00007DD0 0F85A9D80000            	jne L_error_non_closure
 12028 00007DD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12029 00007DD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12030                                  
 12031 00007DDC 483D[02000000]          	cmp rax, sob_boolean_false
 12032 00007DE2 7464                    	je .L_if_else_0400
 12033                                  	; preparing a tail-call
 12034 00007DE4 488B4528                	mov rax, PARAM(1)	; param b
 12035 00007DE8 50                      	push rax
 12036 00007DE9 488B4520                	mov rax, PARAM(0)	; param a
 12037 00007DED 50                      	push rax
 12038 00007DEE 6A02                    	push 2	; arg count
 12039 00007DF0 488B0425[EC0F0000]      	mov rax, qword [free_var_32]	; free var __bin-mul-rr
 12040 00007DF8 803805                  	cmp byte [rax], T_undefined
 12041 00007DFB 0F84FAD70000            	je L_error_fvar_undefined
 12042 00007E01 803804                  	cmp byte [rax], T_closure
 12043 00007E04 0F8575D80000            	jne L_error_non_closure
 12044 00007E0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12045                                  
 12046                                  	; recycling the current frame
 12047 00007E0D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12048 00007E10 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12049 00007E13 B906000000              	mov rcx, 2 + 4
 12050 00007E18 488B5D18                	mov rbx, COUNT
 12051 00007E1C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12052 00007E21 488D55F8                	lea rdx, [rbp - 8 * 1]
 12053                                  .L_tc_recycle_frame_loop_0723:
 12054 00007E25 4883F900                	cmp rcx, 0
 12055 00007E29 7413                    	je .L_tc_recycle_frame_done_0723
 12056 00007E2B 488B32                  	mov rsi, qword [rdx]
 12057 00007E2E 488933                  	mov qword [rbx], rsi
 12058 00007E31 48FFC9                  	dec rcx
 12059 00007E34 4883EB08                	sub rbx, 8 * 1
 12060 00007E38 4883EA08                	sub rdx, 8 * 1
 12061 00007E3C EBE7                    	jmp .L_tc_recycle_frame_loop_0723
 12062                                  .L_tc_recycle_frame_done_0723:
 12063 00007E3E 488D6308                	lea rsp, [rbx + 8 * 1]
 12064 00007E42 5D                      	pop rbp	; the proc will restore it!
 12065 00007E43 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12066                                  
 12067 00007E46 EB51                    	jmp .L_if_end_0400
 12068                                  
 12069                                  	.L_if_else_0400:
 12070                                  	; preparing a tail-call
 12071 00007E48 6A00                    	push 0	; arg count
 12072 00007E4A 488B4510                	mov rax, ENV
 12073 00007E4E 488B00                  	mov rax, qword [rax + 8 * 0]
 12074 00007E51 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12075 00007E54 803804                  	cmp byte [rax], T_closure
 12076 00007E57 0F8522D80000            	jne L_error_non_closure
 12077 00007E5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 12078                                  
 12079                                  	; recycling the current frame
 12080 00007E60 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12081 00007E63 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12082 00007E66 B904000000              	mov rcx, 0 + 4
 12083 00007E6B 488B5D18                	mov rbx, COUNT
 12084 00007E6F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12085 00007E74 488D55F8                	lea rdx, [rbp - 8 * 1]
 12086                                  .L_tc_recycle_frame_loop_0724:
 12087 00007E78 4883F900                	cmp rcx, 0
 12088 00007E7C 7413                    	je .L_tc_recycle_frame_done_0724
 12089 00007E7E 488B32                  	mov rsi, qword [rdx]
 12090 00007E81 488933                  	mov qword [rbx], rsi
 12091 00007E84 48FFC9                  	dec rcx
 12092 00007E87 4883EB08                	sub rbx, 8 * 1
 12093 00007E8B 4883EA08                	sub rdx, 8 * 1
 12094 00007E8F EBE7                    	jmp .L_tc_recycle_frame_loop_0724
 12095                                  .L_tc_recycle_frame_done_0724:
 12096 00007E91 488D6308                	lea rsp, [rbx + 8 * 1]
 12097 00007E95 5D                      	pop rbp	; the proc will restore it!
 12098 00007E96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12099                                  
 12100                                  	.L_if_end_0400:
 12101                                  
 12102                                  	.L_if_end_03ff:
 12103                                  
 12104                                  	.L_if_end_03fe:
 12105                                  
 12106 00007E99 EB51                    	jmp .L_if_end_03fd
 12107                                  
 12108                                  	.L_if_else_03fd:
 12109                                  	; preparing a tail-call
 12110 00007E9B 6A00                    	push 0	; arg count
 12111 00007E9D 488B4510                	mov rax, ENV
 12112 00007EA1 488B00                  	mov rax, qword [rax + 8 * 0]
 12113 00007EA4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12114 00007EA7 803804                  	cmp byte [rax], T_closure
 12115 00007EAA 0F85CFD70000            	jne L_error_non_closure
 12116 00007EB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12117                                  
 12118                                  	; recycling the current frame
 12119 00007EB3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12120 00007EB6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12121 00007EB9 B904000000              	mov rcx, 0 + 4
 12122 00007EBE 488B5D18                	mov rbx, COUNT
 12123 00007EC2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12124 00007EC7 488D55F8                	lea rdx, [rbp - 8 * 1]
 12125                                  .L_tc_recycle_frame_loop_0725:
 12126 00007ECB 4883F900                	cmp rcx, 0
 12127 00007ECF 7413                    	je .L_tc_recycle_frame_done_0725
 12128 00007ED1 488B32                  	mov rsi, qword [rdx]
 12129 00007ED4 488933                  	mov qword [rbx], rsi
 12130 00007ED7 48FFC9                  	dec rcx
 12131 00007EDA 4883EB08                	sub rbx, 8 * 1
 12132 00007EDE 4883EA08                	sub rdx, 8 * 1
 12133 00007EE2 EBE7                    	jmp .L_tc_recycle_frame_loop_0725
 12134                                  .L_tc_recycle_frame_done_0725:
 12135 00007EE4 488D6308                	lea rsp, [rbx + 8 * 1]
 12136 00007EE8 5D                      	pop rbp	; the proc will restore it!
 12137 00007EE9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12138                                  
 12139                                  	.L_if_end_03fd:
 12140                                  
 12141                                  	.L_if_end_03f9:
 12142                                  
 12143                                  	.L_if_end_03f5:
 12144 00007EEC C9                      	leave
 12145 00007EED C22000                  	ret AND_KILL_FRAME(2)
 12146                                  .L_lambda_simple_end_0563:	; new closure is in rax
 12147 00007EF0 50                      	push rax
 12148 00007EF1 6A01                    	push 1	; arg count
 12149 00007EF3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12150 00007EF8 E82BD80000              	call malloc
 12151 00007EFD 50                      	push rax
 12152 00007EFE BF08000000              	mov rdi, 8 * 1	; new rib
 12153 00007F03 E820D80000              	call malloc
 12154 00007F08 50                      	push rax
 12155 00007F09 BF10000000              	mov rdi, 8 * 2	; extended env
 12156 00007F0E E815D80000              	call malloc
 12157 00007F13 488B7D10                	mov rdi, ENV
 12158 00007F17 BE00000000              	mov rsi, 0
 12159 00007F1C BA01000000              	mov rdx, 1
 12160                                  .L_lambda_simple_env_loop_0564:	; ext_env[i + 1] <-- env[i]
 12161 00007F21 4883FE01                	cmp rsi, 1
 12162 00007F25 7410                    	je .L_lambda_simple_env_end_0564
 12163 00007F27 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12164 00007F2B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12165 00007F2F 48FFC6                  	inc rsi
 12166 00007F32 48FFC2                  	inc rdx
 12167 00007F35 EBEA                    	jmp .L_lambda_simple_env_loop_0564
 12168                                  .L_lambda_simple_env_end_0564:
 12169 00007F37 5B                      	pop rbx
 12170 00007F38 BE00000000              	mov rsi, 0
 12171                                  .L_lambda_simple_params_loop_0564:	; copy params
 12172 00007F3D 4883FE01                	cmp rsi, 1
 12173 00007F41 740E                    	je .L_lambda_simple_params_end_0564
 12174 00007F43 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12175 00007F48 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12176 00007F4C 48FFC6                  	inc rsi
 12177 00007F4F EBEC                    	jmp .L_lambda_simple_params_loop_0564
 12178                                  .L_lambda_simple_params_end_0564:
 12179 00007F51 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12180 00007F54 4889C3                  	mov rbx, rax
 12181 00007F57 58                      	pop rax
 12182 00007F58 C60004                  	mov byte [rax], T_closure
 12183 00007F5B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12184 00007F5F 48C74009[6C7F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0564
 12185 00007F67 E9E2010000              	jmp .L_lambda_simple_end_0564
 12186                                  .L_lambda_simple_code_0564:	; lambda-simple body
 12187 00007F6C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12188 00007F72 740B                    	je .L_lambda_simple_arity_check_ok_0564
 12189 00007F74 FF742410                	push qword [rsp + 8 * 2]
 12190 00007F78 6A01                    	push 1
 12191 00007F7A E962D70000              	jmp L_error_incorrect_arity_simple
 12192                                  .L_lambda_simple_arity_check_ok_0564:
 12193 00007F7F C8000000                	enter 0, 0
 12194 00007F83 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12195 00007F88 E89BD70000              	call malloc
 12196 00007F8D 50                      	push rax
 12197 00007F8E BF08000000              	mov rdi, 8 * 1	; new rib
 12198 00007F93 E890D70000              	call malloc
 12199 00007F98 50                      	push rax
 12200 00007F99 BF18000000              	mov rdi, 8 * 3	; extended env
 12201 00007F9E E885D70000              	call malloc
 12202 00007FA3 488B7D10                	mov rdi, ENV
 12203 00007FA7 BE00000000              	mov rsi, 0
 12204 00007FAC BA01000000              	mov rdx, 1
 12205                                  .L_lambda_opt_env_loop_00bb:	; ext_env[i + 1] <-- env[i]
 12206 00007FB1 4883FE02                	cmp rsi, 2
 12207 00007FB5 7410                    	je .L_lambda_opt_env_end_00bb
 12208 00007FB7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12209 00007FBB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12210 00007FBF 48FFC6                  	inc rsi
 12211 00007FC2 48FFC2                  	inc rdx
 12212 00007FC5 EBEA                    	jmp .L_lambda_opt_env_loop_00bb
 12213                                  .L_lambda_opt_env_end_00bb:
 12214 00007FC7 5B                      	pop rbx
 12215 00007FC8 BE00000000              	mov rsi, 0
 12216                                  .L_lambda_opt_params_loop_00bb:	; copy params
 12217 00007FCD 4883FE01                	cmp rsi, 1
 12218 00007FD1 740E                    	je .L_lambda_opt_params_end_00bb
 12219 00007FD3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12220 00007FD8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12221 00007FDC 48FFC6                  	inc rsi
 12222 00007FDF EBEC                    	jmp .L_lambda_opt_params_loop_00bb
 12223                                  .L_lambda_opt_params_end_00bb:
 12224 00007FE1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12225 00007FE4 4889C3                  	mov rbx, rax
 12226 00007FE7 58                      	pop rax
 12227 00007FE8 C60004                  	mov byte [rax], T_closure
 12228 00007FEB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12229 00007FEF 48C74009[FC7F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00bb
 12230 00007FF7 E94E010000              	jmp .L_lambda_opt_end_00bb
 12231                                  .L_lambda_opt_code_00bb:	; lambda-simple body
 12232 00007FFC 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 12233 00008002 740D                    	je .L_lambda_opt_arity_check_exact_00bb ;	 if equal, go to exact arity
 12234 00008004 7F42                    	jg .L_lambda_opt_arity_check_more_00bb ;	 if greater than, go to arity more
 12235 00008006 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 12236 0000800A 6A00                     	push 0
 12237 0000800C E9E4D60000              	jmp L_error_incorrect_arity_opt
 12238                                  	.L_lambda_opt_arity_check_exact_00bb:
 12239 00008011 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 12240 00008016 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 12241 0000801B 4883EC08                	sub rsp, 8
 12242 0000801F 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 12243                                  	.L_lambda_opt_exact_shifting_loop_00bb:
 12244 00008023 488B5108                	mov rdx, [rcx + 8]
 12245 00008027 488911                  	mov [rcx], rdx
 12246 0000802A 4883C108                	add rcx, 8
 12247 0000802E 4839CB                  	cmp rbx, rcx
 12248 00008031 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00bb
 12249                                  	.L_lambda_opt_exact_shifting_loop_end_00bb:
 12250 00008033 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 12251 0000803A 4883C001                	add rax, 1 ; 	arg count += 1
 12252 0000803E 4889442410              	mov qword [rsp + 8 * 2], rax
 12253 00008043 E987000000              	jmp .L_lambda_opt_stack_adjusted_00bb
 12254                                  	.L_lambda_opt_arity_check_more_00bb:
 12255 00008048 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 12255 0000804A [0100000000000000] 
 12256 00008052 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 12257 00008058 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00bb
 12258                                  	.L_lambda_opt_stack_shrink_loop_00bb:
 12259 0000805A BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 12260 0000805F E8C4D60000              	call malloc ;	 allocated memory for the optional scheme list
 12261 00008064 C60021                  	mov byte[rax], T_pair ;	 set type pair
 12262 00008067 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 12263 0000806B 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 12264 0000806E 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 12265 00008073 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 12266 00008078 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 12267 0000807C 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 12268                                  	.L_lambda_opt_more_shifting_loop_00bb:
 12269 00008081 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 12270 00008084 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 12271 00008088 4883EB08                	sub rbx, 8 
 12272 0000808C 4839DC                  	cmp rsp, rbx
 12273 0000808F 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00bb
 12274                                  	.L_lambda_opt_more_shifting_loop_end_00bb:
 12275 00008091 4883C408                	add rsp, 8 ;	 update rsp
 12276 00008095 488B5C2410              	mov rbx, [rsp + 8 * 2]
 12277 0000809A 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 12278 0000809E 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 12279 000080A3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12280 000080A9 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00bb
 12281                                  	.L_lambda_opt_stack_shrink_loop_exit_00bb:
 12282 000080AB 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 12283 000080B0 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 12284 000080B5 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 12285 000080BA E869D60000              	call malloc ;	 allocated memory for the optional scheme list
 12286 000080BF C60021                  	mov byte[rax], T_pair ;	 set type pair
 12287 000080C2 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 12288 000080C6 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 12289 000080CA 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 12290                                  	.L_lambda_opt_stack_adjusted_00bb:
 12291 000080CF C8000000                	enter 0, 0
 12292                                  	; preparing a tail-call
 12293 000080D3 488B4520                	mov rax, PARAM(0)	; param s
 12294 000080D7 50                      	push rax
 12295 000080D8 48B8-                   	mov rax, L_constants + 2158
 12295 000080DA [6E08000000000000] 
 12296 000080E2 50                      	push rax
 12297 000080E3 488B4510                	mov rax, ENV
 12298 000080E7 488B00                  	mov rax, qword [rax + 8 * 0]
 12299 000080EA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
 12300 000080ED 50                      	push rax
 12301 000080EE 6A03                    	push 3	; arg count
 12302 000080F0 488B0425[3C150000]      	mov rax, qword [free_var_112]	; free var fold-left
 12303 000080F8 803805                  	cmp byte [rax], T_undefined
 12304 000080FB 0F84FAD40000            	je L_error_fvar_undefined
 12305 00008101 803804                  	cmp byte [rax], T_closure
 12306 00008104 0F8575D50000            	jne L_error_non_closure
 12307 0000810A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12308                                  
 12309                                  	; recycling the current frame
 12310 0000810D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12311 00008110 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12312 00008113 B907000000              	mov rcx, 3 + 4
 12313 00008118 488B5D18                	mov rbx, COUNT
 12314 0000811C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12315 00008121 488D55F8                	lea rdx, [rbp - 8 * 1]
 12316                                  .L_tc_recycle_frame_loop_0726:
 12317 00008125 4883F900                	cmp rcx, 0
 12318 00008129 7413                    	je .L_tc_recycle_frame_done_0726
 12319 0000812B 488B32                  	mov rsi, qword [rdx]
 12320 0000812E 488933                  	mov qword [rbx], rsi
 12321 00008131 48FFC9                  	dec rcx
 12322 00008134 4883EB08                	sub rbx, 8 * 1
 12323 00008138 4883EA08                	sub rdx, 8 * 1
 12324 0000813C EBE7                    	jmp .L_tc_recycle_frame_loop_0726
 12325                                  .L_tc_recycle_frame_done_0726:
 12326 0000813E 488D6308                	lea rsp, [rbx + 8 * 1]
 12327 00008142 5D                      	pop rbp	; the proc will restore it!
 12328 00008143 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12329 00008146 C9                      	leave
 12330 00008147 C21800                  	ret AND_KILL_FRAME(1)
 12331                                  .L_lambda_opt_end_00bb:	; new closure is in rax
 12332 0000814A C9                      	leave
 12333 0000814B C21800                  	ret AND_KILL_FRAME(1)
 12334                                  .L_lambda_simple_end_0564:	; new closure is in rax
 12335 0000814E 803804                  	cmp byte [rax], T_closure
 12336 00008151 0F8528D50000            	jne L_error_non_closure
 12337 00008157 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12338                                  
 12339                                  	; recycling the current frame
 12340 0000815A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12341 0000815D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12342 00008160 B905000000              	mov rcx, 1 + 4
 12343 00008165 488B5D18                	mov rbx, COUNT
 12344 00008169 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12345 0000816E 488D55F8                	lea rdx, [rbp - 8 * 1]
 12346                                  .L_tc_recycle_frame_loop_0727:
 12347 00008172 4883F900                	cmp rcx, 0
 12348 00008176 7413                    	je .L_tc_recycle_frame_done_0727
 12349 00008178 488B32                  	mov rsi, qword [rdx]
 12350 0000817B 488933                  	mov qword [rbx], rsi
 12351 0000817E 48FFC9                  	dec rcx
 12352 00008181 4883EB08                	sub rbx, 8 * 1
 12353 00008185 4883EA08                	sub rdx, 8 * 1
 12354 00008189 EBE7                    	jmp .L_tc_recycle_frame_loop_0727
 12355                                  .L_tc_recycle_frame_done_0727:
 12356 0000818B 488D6308                	lea rsp, [rbx + 8 * 1]
 12357 0000818F 5D                      	pop rbp	; the proc will restore it!
 12358 00008190 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12359 00008193 C9                      	leave
 12360 00008194 C21800                  	ret AND_KILL_FRAME(1)
 12361                                  .L_lambda_simple_end_0562:	; new closure is in rax
 12362 00008197 803804                  	cmp byte [rax], T_closure
 12363 0000819A 0F85DFD40000            	jne L_error_non_closure
 12364 000081A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12365 000081A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12366 000081A6 48890425[B3150000]      	mov qword [free_var_119], rax
 12367 000081AE 48B8-                   	mov rax, sob_void
 12367 000081B0 [0000000000000000] 
 12368                                  
 12369 000081B8 4889C7                  	mov rdi, rax
 12370 000081BB E87AD60000              	call print_sexpr_if_not_void
 12371                                  
 12372 000081C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12373 000081C5 E85ED50000              	call malloc
 12374 000081CA 50                      	push rax
 12375 000081CB BF00000000              	mov rdi, 8 * 0	; new rib
 12376 000081D0 E853D50000              	call malloc
 12377 000081D5 50                      	push rax
 12378 000081D6 BF08000000              	mov rdi, 8 * 1	; extended env
 12379 000081DB E848D50000              	call malloc
 12380 000081E0 488B7D10                	mov rdi, ENV
 12381 000081E4 BE00000000              	mov rsi, 0
 12382 000081E9 BA01000000              	mov rdx, 1
 12383                                  .L_lambda_simple_env_loop_0565:	; ext_env[i + 1] <-- env[i]
 12384 000081EE 4883FE00                	cmp rsi, 0
 12385 000081F2 7410                    	je .L_lambda_simple_env_end_0565
 12386 000081F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12387 000081F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12388 000081FC 48FFC6                  	inc rsi
 12389 000081FF 48FFC2                  	inc rdx
 12390 00008202 EBEA                    	jmp .L_lambda_simple_env_loop_0565
 12391                                  .L_lambda_simple_env_end_0565:
 12392 00008204 5B                      	pop rbx
 12393 00008205 BE00000000              	mov rsi, 0
 12394                                  .L_lambda_simple_params_loop_0565:	; copy params
 12395 0000820A 4883FE00                	cmp rsi, 0
 12396 0000820E 740E                    	je .L_lambda_simple_params_end_0565
 12397 00008210 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12398 00008215 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12399 00008219 48FFC6                  	inc rsi
 12400 0000821C EBEC                    	jmp .L_lambda_simple_params_loop_0565
 12401                                  .L_lambda_simple_params_end_0565:
 12402 0000821E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12403 00008221 4889C3                  	mov rbx, rax
 12404 00008224 58                      	pop rax
 12405 00008225 C60004                  	mov byte [rax], T_closure
 12406 00008228 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12407 0000822C 48C74009[39820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0565
 12408 00008234 E989000000              	jmp .L_lambda_simple_end_0565
 12409                                  .L_lambda_simple_code_0565:	; lambda-simple body
 12410 00008239 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12411 0000823F 740B                    	je .L_lambda_simple_arity_check_ok_0565
 12412 00008241 FF742410                	push qword [rsp + 8 * 2]
 12413 00008245 6A00                    	push 0
 12414 00008247 E995D40000              	jmp L_error_incorrect_arity_simple
 12415                                  .L_lambda_simple_arity_check_ok_0565:
 12416 0000824C C8000000                	enter 0, 0
 12417                                  	; preparing a tail-call
 12418 00008250 48B8-                   	mov rax, L_constants + 2075
 12418 00008252 [1B08000000000000] 
 12419 0000825A 50                      	push rax
 12420 0000825B 48B8-                   	mov rax, L_constants + 2186
 12420 0000825D [8A08000000000000] 
 12421 00008265 50                      	push rax
 12422 00008266 6A02                    	push 2	; arg count
 12423 00008268 488B0425[96100000]      	mov rax, qword [free_var_42]	; free var error
 12424 00008270 803805                  	cmp byte [rax], T_undefined
 12425 00008273 0F8482D30000            	je L_error_fvar_undefined
 12426 00008279 803804                  	cmp byte [rax], T_closure
 12427 0000827C 0F85FDD30000            	jne L_error_non_closure
 12428 00008282 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12429                                  
 12430                                  	; recycling the current frame
 12431 00008285 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12432 00008288 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12433 0000828B B906000000              	mov rcx, 2 + 4
 12434 00008290 488B5D18                	mov rbx, COUNT
 12435 00008294 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12436 00008299 488D55F8                	lea rdx, [rbp - 8 * 1]
 12437                                  .L_tc_recycle_frame_loop_0728:
 12438 0000829D 4883F900                	cmp rcx, 0
 12439 000082A1 7413                    	je .L_tc_recycle_frame_done_0728
 12440 000082A3 488B32                  	mov rsi, qword [rdx]
 12441 000082A6 488933                  	mov qword [rbx], rsi
 12442 000082A9 48FFC9                  	dec rcx
 12443 000082AC 4883EB08                	sub rbx, 8 * 1
 12444 000082B0 4883EA08                	sub rdx, 8 * 1
 12445 000082B4 EBE7                    	jmp .L_tc_recycle_frame_loop_0728
 12446                                  .L_tc_recycle_frame_done_0728:
 12447 000082B6 488D6308                	lea rsp, [rbx + 8 * 1]
 12448 000082BA 5D                      	pop rbp	; the proc will restore it!
 12449 000082BB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12450 000082BE C9                      	leave
 12451 000082BF C21000                  	ret AND_KILL_FRAME(0)
 12452                                  .L_lambda_simple_end_0565:	; new closure is in rax
 12453 000082C2 50                      	push rax
 12454 000082C3 6A01                    	push 1	; arg count
 12455 000082C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12456 000082CA E859D40000              	call malloc
 12457 000082CF 50                      	push rax
 12458 000082D0 BF00000000              	mov rdi, 8 * 0	; new rib
 12459 000082D5 E84ED40000              	call malloc
 12460 000082DA 50                      	push rax
 12461 000082DB BF08000000              	mov rdi, 8 * 1	; extended env
 12462 000082E0 E843D40000              	call malloc
 12463 000082E5 488B7D10                	mov rdi, ENV
 12464 000082E9 BE00000000              	mov rsi, 0
 12465 000082EE BA01000000              	mov rdx, 1
 12466                                  .L_lambda_simple_env_loop_0566:	; ext_env[i + 1] <-- env[i]
 12467 000082F3 4883FE00                	cmp rsi, 0
 12468 000082F7 7410                    	je .L_lambda_simple_env_end_0566
 12469 000082F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12470 000082FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12471 00008301 48FFC6                  	inc rsi
 12472 00008304 48FFC2                  	inc rdx
 12473 00008307 EBEA                    	jmp .L_lambda_simple_env_loop_0566
 12474                                  .L_lambda_simple_env_end_0566:
 12475 00008309 5B                      	pop rbx
 12476 0000830A BE00000000              	mov rsi, 0
 12477                                  .L_lambda_simple_params_loop_0566:	; copy params
 12478 0000830F 4883FE00                	cmp rsi, 0
 12479 00008313 740E                    	je .L_lambda_simple_params_end_0566
 12480 00008315 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12481 0000831A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12482 0000831E 48FFC6                  	inc rsi
 12483 00008321 EBEC                    	jmp .L_lambda_simple_params_loop_0566
 12484                                  .L_lambda_simple_params_end_0566:
 12485 00008323 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12486 00008326 4889C3                  	mov rbx, rax
 12487 00008329 58                      	pop rax
 12488 0000832A C60004                  	mov byte [rax], T_closure
 12489 0000832D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12490 00008331 48C74009[3E830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0566
 12491 00008339 E9060D0000              	jmp .L_lambda_simple_end_0566
 12492                                  .L_lambda_simple_code_0566:	; lambda-simple body
 12493 0000833E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12494 00008344 740B                    	je .L_lambda_simple_arity_check_ok_0566
 12495 00008346 FF742410                	push qword [rsp + 8 * 2]
 12496 0000834A 6A01                    	push 1
 12497 0000834C E990D30000              	jmp L_error_incorrect_arity_simple
 12498                                  .L_lambda_simple_arity_check_ok_0566:
 12499 00008351 C8000000                	enter 0, 0
 12500                                  	; preparing a tail-call
 12501 00008355 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12502 0000835A E8C9D30000              	call malloc
 12503 0000835F 50                      	push rax
 12504 00008360 BF08000000              	mov rdi, 8 * 1	; new rib
 12505 00008365 E8BED30000              	call malloc
 12506 0000836A 50                      	push rax
 12507 0000836B BF10000000              	mov rdi, 8 * 2	; extended env
 12508 00008370 E8B3D30000              	call malloc
 12509 00008375 488B7D10                	mov rdi, ENV
 12510 00008379 BE00000000              	mov rsi, 0
 12511 0000837E BA01000000              	mov rdx, 1
 12512                                  .L_lambda_simple_env_loop_0567:	; ext_env[i + 1] <-- env[i]
 12513 00008383 4883FE01                	cmp rsi, 1
 12514 00008387 7410                    	je .L_lambda_simple_env_end_0567
 12515 00008389 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12516 0000838D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12517 00008391 48FFC6                  	inc rsi
 12518 00008394 48FFC2                  	inc rdx
 12519 00008397 EBEA                    	jmp .L_lambda_simple_env_loop_0567
 12520                                  .L_lambda_simple_env_end_0567:
 12521 00008399 5B                      	pop rbx
 12522 0000839A BE00000000              	mov rsi, 0
 12523                                  .L_lambda_simple_params_loop_0567:	; copy params
 12524 0000839F 4883FE01                	cmp rsi, 1
 12525 000083A3 740E                    	je .L_lambda_simple_params_end_0567
 12526 000083A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12527 000083AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12528 000083AE 48FFC6                  	inc rsi
 12529 000083B1 EBEC                    	jmp .L_lambda_simple_params_loop_0567
 12530                                  .L_lambda_simple_params_end_0567:
 12531 000083B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12532 000083B6 4889C3                  	mov rbx, rax
 12533 000083B9 58                      	pop rax
 12534 000083BA C60004                  	mov byte [rax], T_closure
 12535 000083BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12536 000083C1 48C74009[CE830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0567
 12537 000083C9 E92B080000              	jmp .L_lambda_simple_end_0567
 12538                                  .L_lambda_simple_code_0567:	; lambda-simple body
 12539 000083CE 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12540 000083D4 740B                    	je .L_lambda_simple_arity_check_ok_0567
 12541 000083D6 FF742410                	push qword [rsp + 8 * 2]
 12542 000083DA 6A02                    	push 2
 12543 000083DC E900D30000              	jmp L_error_incorrect_arity_simple
 12544                                  .L_lambda_simple_arity_check_ok_0567:
 12545 000083E1 C8000000                	enter 0, 0
 12546 000083E5 488B4520                	mov rax, PARAM(0)	; param a
 12547 000083E9 50                      	push rax
 12548 000083EA 6A01                    	push 1	; arg count
 12549 000083EC 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12550 000083F4 803805                  	cmp byte [rax], T_undefined
 12551 000083F7 0F84FED10000            	je L_error_fvar_undefined
 12552 000083FD 803804                  	cmp byte [rax], T_closure
 12553 00008400 0F8579D20000            	jne L_error_non_closure
 12554 00008406 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12555 00008409 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12556                                  
 12557 0000840C 483D[02000000]          	cmp rax, sob_boolean_false
 12558 00008412 0F8463020000            	je .L_if_else_0401
 12559 00008418 488B4528                	mov rax, PARAM(1)	; param b
 12560 0000841C 50                      	push rax
 12561 0000841D 6A01                    	push 1	; arg count
 12562 0000841F 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12563 00008427 803805                  	cmp byte [rax], T_undefined
 12564 0000842A 0F84CBD10000            	je L_error_fvar_undefined
 12565 00008430 803804                  	cmp byte [rax], T_closure
 12566 00008433 0F8546D20000            	jne L_error_non_closure
 12567 00008439 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12568 0000843C FF5009                  	call SOB_CLOSURE_CODE(rax)
 12569                                  
 12570 0000843F 483D[02000000]          	cmp rax, sob_boolean_false
 12571 00008445 7467                    	je .L_if_else_0402
 12572                                  	; preparing a tail-call
 12573 00008447 488B4528                	mov rax, PARAM(1)	; param b
 12574 0000844B 50                      	push rax
 12575 0000844C 488B4520                	mov rax, PARAM(0)	; param a
 12576 00008450 50                      	push rax
 12577 00008451 6A02                    	push 2	; arg count
 12578 00008453 488B0425[85100000]      	mov rax, qword [free_var_41]	; free var __bin-div-zz
 12579 0000845B 803805                  	cmp byte [rax], T_undefined
 12580 0000845E 0F8497D10000            	je L_error_fvar_undefined
 12581 00008464 803804                  	cmp byte [rax], T_closure
 12582 00008467 0F8512D20000            	jne L_error_non_closure
 12583 0000846D FF7001                  	push SOB_CLOSURE_ENV(rax)
 12584                                  
 12585                                  	; recycling the current frame
 12586 00008470 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12587 00008473 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12588 00008476 B906000000              	mov rcx, 2 + 4
 12589 0000847B 488B5D18                	mov rbx, COUNT
 12590 0000847F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12591 00008484 488D55F8                	lea rdx, [rbp - 8 * 1]
 12592                                  .L_tc_recycle_frame_loop_0729:
 12593 00008488 4883F900                	cmp rcx, 0
 12594 0000848C 7413                    	je .L_tc_recycle_frame_done_0729
 12595 0000848E 488B32                  	mov rsi, qword [rdx]
 12596 00008491 488933                  	mov qword [rbx], rsi
 12597 00008494 48FFC9                  	dec rcx
 12598 00008497 4883EB08                	sub rbx, 8 * 1
 12599 0000849B 4883EA08                	sub rdx, 8 * 1
 12600 0000849F EBE7                    	jmp .L_tc_recycle_frame_loop_0729
 12601                                  .L_tc_recycle_frame_done_0729:
 12602 000084A1 488D6308                	lea rsp, [rbx + 8 * 1]
 12603 000084A5 5D                      	pop rbp	; the proc will restore it!
 12604 000084A6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12605                                  
 12606 000084A9 E9C8010000              	jmp .L_if_end_0402
 12607                                  
 12608                                  	.L_if_else_0402:
 12609 000084AE 488B4528                	mov rax, PARAM(1)	; param b
 12610 000084B2 50                      	push rax
 12611 000084B3 6A01                    	push 1	; arg count
 12612 000084B5 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 12613 000084BD 803805                  	cmp byte [rax], T_undefined
 12614 000084C0 0F8435D10000            	je L_error_fvar_undefined
 12615 000084C6 803804                  	cmp byte [rax], T_closure
 12616 000084C9 0F85B0D10000            	jne L_error_non_closure
 12617 000084CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 12618 000084D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12619                                  
 12620 000084D5 483D[02000000]          	cmp rax, sob_boolean_false
 12621 000084DB 0F848A000000            	je .L_if_else_0403
 12622                                  	; preparing a tail-call
 12623 000084E1 488B4528                	mov rax, PARAM(1)	; param b
 12624 000084E5 50                      	push rax
 12625 000084E6 488B4520                	mov rax, PARAM(0)	; param a
 12626 000084EA 50                      	push rax
 12627 000084EB 6A01                    	push 1	; arg count
 12628 000084ED 488B0425[EA110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 12629 000084F5 803805                  	cmp byte [rax], T_undefined
 12630 000084F8 0F84FDD00000            	je L_error_fvar_undefined
 12631 000084FE 803804                  	cmp byte [rax], T_closure
 12632 00008501 0F8578D10000            	jne L_error_non_closure
 12633 00008507 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12634 0000850A FF5009                  	call SOB_CLOSURE_CODE(rax)
 12635 0000850D 50                      	push rax
 12636 0000850E 6A02                    	push 2	; arg count
 12637 00008510 488B0425[41100000]      	mov rax, qword [free_var_37]	; free var __bin-div-qq
 12638 00008518 803805                  	cmp byte [rax], T_undefined
 12639 0000851B 0F84DAD00000            	je L_error_fvar_undefined
 12640 00008521 803804                  	cmp byte [rax], T_closure
 12641 00008524 0F8555D10000            	jne L_error_non_closure
 12642 0000852A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12643                                  
 12644                                  	; recycling the current frame
 12645 0000852D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12646 00008530 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12647 00008533 B906000000              	mov rcx, 2 + 4
 12648 00008538 488B5D18                	mov rbx, COUNT
 12649 0000853C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12650 00008541 488D55F8                	lea rdx, [rbp - 8 * 1]
 12651                                  .L_tc_recycle_frame_loop_072a:
 12652 00008545 4883F900                	cmp rcx, 0
 12653 00008549 7413                    	je .L_tc_recycle_frame_done_072a
 12654 0000854B 488B32                  	mov rsi, qword [rdx]
 12655 0000854E 488933                  	mov qword [rbx], rsi
 12656 00008551 48FFC9                  	dec rcx
 12657 00008554 4883EB08                	sub rbx, 8 * 1
 12658 00008558 4883EA08                	sub rdx, 8 * 1
 12659 0000855C EBE7                    	jmp .L_tc_recycle_frame_loop_072a
 12660                                  .L_tc_recycle_frame_done_072a:
 12661 0000855E 488D6308                	lea rsp, [rbx + 8 * 1]
 12662 00008562 5D                      	pop rbp	; the proc will restore it!
 12663 00008563 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12664                                  
 12665 00008566 E90B010000              	jmp .L_if_end_0403
 12666                                  
 12667                                  	.L_if_else_0403:
 12668 0000856B 488B4528                	mov rax, PARAM(1)	; param b
 12669 0000856F 50                      	push rax
 12670 00008570 6A01                    	push 1	; arg count
 12671 00008572 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 12672 0000857A 803805                  	cmp byte [rax], T_undefined
 12673 0000857D 0F8478D00000            	je L_error_fvar_undefined
 12674 00008583 803804                  	cmp byte [rax], T_closure
 12675 00008586 0F85F3D00000            	jne L_error_non_closure
 12676 0000858C FF7001                  	push SOB_CLOSURE_ENV(rax)
 12677 0000858F FF5009                  	call SOB_CLOSURE_CODE(rax)
 12678                                  
 12679 00008592 483D[02000000]          	cmp rax, sob_boolean_false
 12680 00008598 0F8487000000            	je .L_if_else_0404
 12681                                  	; preparing a tail-call
 12682 0000859E 488B4528                	mov rax, PARAM(1)	; param b
 12683 000085A2 50                      	push rax
 12684 000085A3 488B4520                	mov rax, PARAM(0)	; param a
 12685 000085A7 50                      	push rax
 12686 000085A8 6A01                    	push 1	; arg count
 12687 000085AA 488B0425[420F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 12688 000085B2 803805                  	cmp byte [rax], T_undefined
 12689 000085B5 0F8440D00000            	je L_error_fvar_undefined
 12690 000085BB 803804                  	cmp byte [rax], T_closure
 12691 000085BE 0F85BBD00000            	jne L_error_non_closure
 12692 000085C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12693 000085C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12694 000085CA 50                      	push rax
 12695 000085CB 6A02                    	push 2	; arg count
 12696 000085CD 488B0425[FD0F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 12697 000085D5 803805                  	cmp byte [rax], T_undefined
 12698 000085D8 0F841DD00000            	je L_error_fvar_undefined
 12699 000085DE 803804                  	cmp byte [rax], T_closure
 12700 000085E1 0F8598D00000            	jne L_error_non_closure
 12701 000085E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12702                                  
 12703                                  	; recycling the current frame
 12704 000085EA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12705 000085ED FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12706 000085F0 B906000000              	mov rcx, 2 + 4
 12707 000085F5 488B5D18                	mov rbx, COUNT
 12708 000085F9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12709 000085FE 488D55F8                	lea rdx, [rbp - 8 * 1]
 12710                                  .L_tc_recycle_frame_loop_072b:
 12711 00008602 4883F900                	cmp rcx, 0
 12712 00008606 7413                    	je .L_tc_recycle_frame_done_072b
 12713 00008608 488B32                  	mov rsi, qword [rdx]
 12714 0000860B 488933                  	mov qword [rbx], rsi
 12715 0000860E 48FFC9                  	dec rcx
 12716 00008611 4883EB08                	sub rbx, 8 * 1
 12717 00008615 4883EA08                	sub rdx, 8 * 1
 12718 00008619 EBE7                    	jmp .L_tc_recycle_frame_loop_072b
 12719                                  .L_tc_recycle_frame_done_072b:
 12720 0000861B 488D6308                	lea rsp, [rbx + 8 * 1]
 12721 0000861F 5D                      	pop rbp	; the proc will restore it!
 12722 00008620 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12723                                  
 12724 00008623 EB51                    	jmp .L_if_end_0404
 12725                                  
 12726                                  	.L_if_else_0404:
 12727                                  	; preparing a tail-call
 12728 00008625 6A00                    	push 0	; arg count
 12729 00008627 488B4510                	mov rax, ENV
 12730 0000862B 488B00                  	mov rax, qword [rax + 8 * 0]
 12731 0000862E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12732 00008631 803804                  	cmp byte [rax], T_closure
 12733 00008634 0F8545D00000            	jne L_error_non_closure
 12734 0000863A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12735                                  
 12736                                  	; recycling the current frame
 12737 0000863D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12738 00008640 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12739 00008643 B904000000              	mov rcx, 0 + 4
 12740 00008648 488B5D18                	mov rbx, COUNT
 12741 0000864C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12742 00008651 488D55F8                	lea rdx, [rbp - 8 * 1]
 12743                                  .L_tc_recycle_frame_loop_072c:
 12744 00008655 4883F900                	cmp rcx, 0
 12745 00008659 7413                    	je .L_tc_recycle_frame_done_072c
 12746 0000865B 488B32                  	mov rsi, qword [rdx]
 12747 0000865E 488933                  	mov qword [rbx], rsi
 12748 00008661 48FFC9                  	dec rcx
 12749 00008664 4883EB08                	sub rbx, 8 * 1
 12750 00008668 4883EA08                	sub rdx, 8 * 1
 12751 0000866C EBE7                    	jmp .L_tc_recycle_frame_loop_072c
 12752                                  .L_tc_recycle_frame_done_072c:
 12753 0000866E 488D6308                	lea rsp, [rbx + 8 * 1]
 12754 00008672 5D                      	pop rbp	; the proc will restore it!
 12755 00008673 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12756                                  
 12757                                  	.L_if_end_0404:
 12758                                  
 12759                                  	.L_if_end_0403:
 12760                                  
 12761                                  	.L_if_end_0402:
 12762                                  
 12763 00008676 E97A050000              	jmp .L_if_end_0401
 12764                                  
 12765                                  	.L_if_else_0401:
 12766 0000867B 488B4520                	mov rax, PARAM(0)	; param a
 12767 0000867F 50                      	push rax
 12768 00008680 6A01                    	push 1	; arg count
 12769 00008682 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 12770 0000868A 803805                  	cmp byte [rax], T_undefined
 12771 0000868D 0F8468CF0000            	je L_error_fvar_undefined
 12772 00008693 803804                  	cmp byte [rax], T_closure
 12773 00008696 0F85E3CF0000            	jne L_error_non_closure
 12774 0000869C FF7001                  	push SOB_CLOSURE_ENV(rax)
 12775 0000869F FF5009                  	call SOB_CLOSURE_CODE(rax)
 12776                                  
 12777 000086A2 483D[02000000]          	cmp rax, sob_boolean_false
 12778 000086A8 0F8463020000            	je .L_if_else_0405
 12779 000086AE 488B4528                	mov rax, PARAM(1)	; param b
 12780 000086B2 50                      	push rax
 12781 000086B3 6A01                    	push 1	; arg count
 12782 000086B5 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 12783 000086BD 803805                  	cmp byte [rax], T_undefined
 12784 000086C0 0F8435CF0000            	je L_error_fvar_undefined
 12785 000086C6 803804                  	cmp byte [rax], T_closure
 12786 000086C9 0F85B0CF0000            	jne L_error_non_closure
 12787 000086CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 12788 000086D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12789                                  
 12790 000086D5 483D[02000000]          	cmp rax, sob_boolean_false
 12791 000086DB 0F848A000000            	je .L_if_else_0406
 12792                                  	; preparing a tail-call
 12793 000086E1 488B4528                	mov rax, PARAM(1)	; param b
 12794 000086E5 50                      	push rax
 12795 000086E6 6A01                    	push 1	; arg count
 12796 000086E8 488B0425[EA110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 12797 000086F0 803805                  	cmp byte [rax], T_undefined
 12798 000086F3 0F8402CF0000            	je L_error_fvar_undefined
 12799 000086F9 803804                  	cmp byte [rax], T_closure
 12800 000086FC 0F857DCF0000            	jne L_error_non_closure
 12801 00008702 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12802 00008705 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12803 00008708 50                      	push rax
 12804 00008709 488B4520                	mov rax, PARAM(0)	; param a
 12805 0000870D 50                      	push rax
 12806 0000870E 6A02                    	push 2	; arg count
 12807 00008710 488B0425[41100000]      	mov rax, qword [free_var_37]	; free var __bin-div-qq
 12808 00008718 803805                  	cmp byte [rax], T_undefined
 12809 0000871B 0F84DACE0000            	je L_error_fvar_undefined
 12810 00008721 803804                  	cmp byte [rax], T_closure
 12811 00008724 0F8555CF0000            	jne L_error_non_closure
 12812 0000872A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12813                                  
 12814                                  	; recycling the current frame
 12815 0000872D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12816 00008730 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12817 00008733 B906000000              	mov rcx, 2 + 4
 12818 00008738 488B5D18                	mov rbx, COUNT
 12819 0000873C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12820 00008741 488D55F8                	lea rdx, [rbp - 8 * 1]
 12821                                  .L_tc_recycle_frame_loop_072d:
 12822 00008745 4883F900                	cmp rcx, 0
 12823 00008749 7413                    	je .L_tc_recycle_frame_done_072d
 12824 0000874B 488B32                  	mov rsi, qword [rdx]
 12825 0000874E 488933                  	mov qword [rbx], rsi
 12826 00008751 48FFC9                  	dec rcx
 12827 00008754 4883EB08                	sub rbx, 8 * 1
 12828 00008758 4883EA08                	sub rdx, 8 * 1
 12829 0000875C EBE7                    	jmp .L_tc_recycle_frame_loop_072d
 12830                                  .L_tc_recycle_frame_done_072d:
 12831 0000875E 488D6308                	lea rsp, [rbx + 8 * 1]
 12832 00008762 5D                      	pop rbp	; the proc will restore it!
 12833 00008763 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12834                                  
 12835 00008766 E9A1010000              	jmp .L_if_end_0406
 12836                                  
 12837                                  	.L_if_else_0406:
 12838 0000876B 488B4528                	mov rax, PARAM(1)	; param b
 12839 0000876F 50                      	push rax
 12840 00008770 6A01                    	push 1	; arg count
 12841 00008772 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 12842 0000877A 803805                  	cmp byte [rax], T_undefined
 12843 0000877D 0F8478CE0000            	je L_error_fvar_undefined
 12844 00008783 803804                  	cmp byte [rax], T_closure
 12845 00008786 0F85F3CE0000            	jne L_error_non_closure
 12846 0000878C FF7001                  	push SOB_CLOSURE_ENV(rax)
 12847 0000878F FF5009                  	call SOB_CLOSURE_CODE(rax)
 12848                                  
 12849 00008792 483D[02000000]          	cmp rax, sob_boolean_false
 12850 00008798 7467                    	je .L_if_else_0407
 12851                                  	; preparing a tail-call
 12852 0000879A 488B4528                	mov rax, PARAM(1)	; param b
 12853 0000879E 50                      	push rax
 12854 0000879F 488B4520                	mov rax, PARAM(0)	; param a
 12855 000087A3 50                      	push rax
 12856 000087A4 6A02                    	push 2	; arg count
 12857 000087A6 488B0425[41100000]      	mov rax, qword [free_var_37]	; free var __bin-div-qq
 12858 000087AE 803805                  	cmp byte [rax], T_undefined
 12859 000087B1 0F8444CE0000            	je L_error_fvar_undefined
 12860 000087B7 803804                  	cmp byte [rax], T_closure
 12861 000087BA 0F85BFCE0000            	jne L_error_non_closure
 12862 000087C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12863                                  
 12864                                  	; recycling the current frame
 12865 000087C3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12866 000087C6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12867 000087C9 B906000000              	mov rcx, 2 + 4
 12868 000087CE 488B5D18                	mov rbx, COUNT
 12869 000087D2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12870 000087D7 488D55F8                	lea rdx, [rbp - 8 * 1]
 12871                                  .L_tc_recycle_frame_loop_072e:
 12872 000087DB 4883F900                	cmp rcx, 0
 12873 000087DF 7413                    	je .L_tc_recycle_frame_done_072e
 12874 000087E1 488B32                  	mov rsi, qword [rdx]
 12875 000087E4 488933                  	mov qword [rbx], rsi
 12876 000087E7 48FFC9                  	dec rcx
 12877 000087EA 4883EB08                	sub rbx, 8 * 1
 12878 000087EE 4883EA08                	sub rdx, 8 * 1
 12879 000087F2 EBE7                    	jmp .L_tc_recycle_frame_loop_072e
 12880                                  .L_tc_recycle_frame_done_072e:
 12881 000087F4 488D6308                	lea rsp, [rbx + 8 * 1]
 12882 000087F8 5D                      	pop rbp	; the proc will restore it!
 12883 000087F9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12884                                  
 12885 000087FC E90B010000              	jmp .L_if_end_0407
 12886                                  
 12887                                  	.L_if_else_0407:
 12888 00008801 488B4528                	mov rax, PARAM(1)	; param b
 12889 00008805 50                      	push rax
 12890 00008806 6A01                    	push 1	; arg count
 12891 00008808 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 12892 00008810 803805                  	cmp byte [rax], T_undefined
 12893 00008813 0F84E2CD0000            	je L_error_fvar_undefined
 12894 00008819 803804                  	cmp byte [rax], T_closure
 12895 0000881C 0F855DCE0000            	jne L_error_non_closure
 12896 00008822 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12897 00008825 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12898                                  
 12899 00008828 483D[02000000]          	cmp rax, sob_boolean_false
 12900 0000882E 0F8487000000            	je .L_if_else_0408
 12901                                  	; preparing a tail-call
 12902 00008834 488B4528                	mov rax, PARAM(1)	; param b
 12903 00008838 50                      	push rax
 12904 00008839 488B4520                	mov rax, PARAM(0)	; param a
 12905 0000883D 50                      	push rax
 12906 0000883E 6A01                    	push 1	; arg count
 12907 00008840 488B0425[530F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 12908 00008848 803805                  	cmp byte [rax], T_undefined
 12909 0000884B 0F84AACD0000            	je L_error_fvar_undefined
 12910 00008851 803804                  	cmp byte [rax], T_closure
 12911 00008854 0F8525CE0000            	jne L_error_non_closure
 12912 0000885A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12913 0000885D FF5009                  	call SOB_CLOSURE_CODE(rax)
 12914 00008860 50                      	push rax
 12915 00008861 6A02                    	push 2	; arg count
 12916 00008863 488B0425[FD0F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 12917 0000886B 803805                  	cmp byte [rax], T_undefined
 12918 0000886E 0F8487CD0000            	je L_error_fvar_undefined
 12919 00008874 803804                  	cmp byte [rax], T_closure
 12920 00008877 0F8502CE0000            	jne L_error_non_closure
 12921 0000887D FF7001                  	push SOB_CLOSURE_ENV(rax)
 12922                                  
 12923                                  	; recycling the current frame
 12924 00008880 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12925 00008883 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12926 00008886 B906000000              	mov rcx, 2 + 4
 12927 0000888B 488B5D18                	mov rbx, COUNT
 12928 0000888F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12929 00008894 488D55F8                	lea rdx, [rbp - 8 * 1]
 12930                                  .L_tc_recycle_frame_loop_072f:
 12931 00008898 4883F900                	cmp rcx, 0
 12932 0000889C 7413                    	je .L_tc_recycle_frame_done_072f
 12933 0000889E 488B32                  	mov rsi, qword [rdx]
 12934 000088A1 488933                  	mov qword [rbx], rsi
 12935 000088A4 48FFC9                  	dec rcx
 12936 000088A7 4883EB08                	sub rbx, 8 * 1
 12937 000088AB 4883EA08                	sub rdx, 8 * 1
 12938 000088AF EBE7                    	jmp .L_tc_recycle_frame_loop_072f
 12939                                  .L_tc_recycle_frame_done_072f:
 12940 000088B1 488D6308                	lea rsp, [rbx + 8 * 1]
 12941 000088B5 5D                      	pop rbp	; the proc will restore it!
 12942 000088B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12943                                  
 12944 000088B9 EB51                    	jmp .L_if_end_0408
 12945                                  
 12946                                  	.L_if_else_0408:
 12947                                  	; preparing a tail-call
 12948 000088BB 6A00                    	push 0	; arg count
 12949 000088BD 488B4510                	mov rax, ENV
 12950 000088C1 488B00                  	mov rax, qword [rax + 8 * 0]
 12951 000088C4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12952 000088C7 803804                  	cmp byte [rax], T_closure
 12953 000088CA 0F85AFCD0000            	jne L_error_non_closure
 12954 000088D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12955                                  
 12956                                  	; recycling the current frame
 12957 000088D3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 12958 000088D6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 12959 000088D9 B904000000              	mov rcx, 0 + 4
 12960 000088DE 488B5D18                	mov rbx, COUNT
 12961 000088E2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 12962 000088E7 488D55F8                	lea rdx, [rbp - 8 * 1]
 12963                                  .L_tc_recycle_frame_loop_0730:
 12964 000088EB 4883F900                	cmp rcx, 0
 12965 000088EF 7413                    	je .L_tc_recycle_frame_done_0730
 12966 000088F1 488B32                  	mov rsi, qword [rdx]
 12967 000088F4 488933                  	mov qword [rbx], rsi
 12968 000088F7 48FFC9                  	dec rcx
 12969 000088FA 4883EB08                	sub rbx, 8 * 1
 12970 000088FE 4883EA08                	sub rdx, 8 * 1
 12971 00008902 EBE7                    	jmp .L_tc_recycle_frame_loop_0730
 12972                                  .L_tc_recycle_frame_done_0730:
 12973 00008904 488D6308                	lea rsp, [rbx + 8 * 1]
 12974 00008908 5D                      	pop rbp	; the proc will restore it!
 12975 00008909 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12976                                  
 12977                                  	.L_if_end_0408:
 12978                                  
 12979                                  	.L_if_end_0407:
 12980                                  
 12981                                  	.L_if_end_0406:
 12982                                  
 12983 0000890C E9E4020000              	jmp .L_if_end_0405
 12984                                  
 12985                                  	.L_if_else_0405:
 12986 00008911 488B4520                	mov rax, PARAM(0)	; param a
 12987 00008915 50                      	push rax
 12988 00008916 6A01                    	push 1	; arg count
 12989 00008918 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 12990 00008920 803805                  	cmp byte [rax], T_undefined
 12991 00008923 0F84D2CC0000            	je L_error_fvar_undefined
 12992 00008929 803804                  	cmp byte [rax], T_closure
 12993 0000892C 0F854DCD0000            	jne L_error_non_closure
 12994 00008932 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12995 00008935 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12996                                  
 12997 00008938 483D[02000000]          	cmp rax, sob_boolean_false
 12998 0000893E 0F8460020000            	je .L_if_else_0409
 12999 00008944 488B4528                	mov rax, PARAM(1)	; param b
 13000 00008948 50                      	push rax
 13001 00008949 6A01                    	push 1	; arg count
 13002 0000894B 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 13003 00008953 803805                  	cmp byte [rax], T_undefined
 13004 00008956 0F849FCC0000            	je L_error_fvar_undefined
 13005 0000895C 803804                  	cmp byte [rax], T_closure
 13006 0000895F 0F851ACD0000            	jne L_error_non_closure
 13007 00008965 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13008 00008968 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13009                                  
 13010 0000896B 483D[02000000]          	cmp rax, sob_boolean_false
 13011 00008971 0F848A000000            	je .L_if_else_040a
 13012                                  	; preparing a tail-call
 13013 00008977 488B4528                	mov rax, PARAM(1)	; param b
 13014 0000897B 50                      	push rax
 13015 0000897C 6A01                    	push 1	; arg count
 13016 0000897E 488B0425[420F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 13017 00008986 803805                  	cmp byte [rax], T_undefined
 13018 00008989 0F846CCC0000            	je L_error_fvar_undefined
 13019 0000898F 803804                  	cmp byte [rax], T_closure
 13020 00008992 0F85E7CC0000            	jne L_error_non_closure
 13021 00008998 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13022 0000899B FF5009                  	call SOB_CLOSURE_CODE(rax)
 13023 0000899E 50                      	push rax
 13024 0000899F 488B4520                	mov rax, PARAM(0)	; param a
 13025 000089A3 50                      	push rax
 13026 000089A4 6A02                    	push 2	; arg count
 13027 000089A6 488B0425[FD0F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13028 000089AE 803805                  	cmp byte [rax], T_undefined
 13029 000089B1 0F8444CC0000            	je L_error_fvar_undefined
 13030 000089B7 803804                  	cmp byte [rax], T_closure
 13031 000089BA 0F85BFCC0000            	jne L_error_non_closure
 13032 000089C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13033                                  
 13034                                  	; recycling the current frame
 13035 000089C3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13036 000089C6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13037 000089C9 B906000000              	mov rcx, 2 + 4
 13038 000089CE 488B5D18                	mov rbx, COUNT
 13039 000089D2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13040 000089D7 488D55F8                	lea rdx, [rbp - 8 * 1]
 13041                                  .L_tc_recycle_frame_loop_0731:
 13042 000089DB 4883F900                	cmp rcx, 0
 13043 000089DF 7413                    	je .L_tc_recycle_frame_done_0731
 13044 000089E1 488B32                  	mov rsi, qword [rdx]
 13045 000089E4 488933                  	mov qword [rbx], rsi
 13046 000089E7 48FFC9                  	dec rcx
 13047 000089EA 4883EB08                	sub rbx, 8 * 1
 13048 000089EE 4883EA08                	sub rdx, 8 * 1
 13049 000089F2 EBE7                    	jmp .L_tc_recycle_frame_loop_0731
 13050                                  .L_tc_recycle_frame_done_0731:
 13051 000089F4 488D6308                	lea rsp, [rbx + 8 * 1]
 13052 000089F8 5D                      	pop rbp	; the proc will restore it!
 13053 000089F9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13054                                  
 13055 000089FC E9A1010000              	jmp .L_if_end_040a
 13056                                  
 13057                                  	.L_if_else_040a:
 13058 00008A01 488B4528                	mov rax, PARAM(1)	; param b
 13059 00008A05 50                      	push rax
 13060 00008A06 6A01                    	push 1	; arg count
 13061 00008A08 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 13062 00008A10 803805                  	cmp byte [rax], T_undefined
 13063 00008A13 0F84E2CB0000            	je L_error_fvar_undefined
 13064 00008A19 803804                  	cmp byte [rax], T_closure
 13065 00008A1C 0F855DCC0000            	jne L_error_non_closure
 13066 00008A22 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13067 00008A25 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13068                                  
 13069 00008A28 483D[02000000]          	cmp rax, sob_boolean_false
 13070 00008A2E 0F848A000000            	je .L_if_else_040b
 13071                                  	; preparing a tail-call
 13072 00008A34 488B4528                	mov rax, PARAM(1)	; param b
 13073 00008A38 50                      	push rax
 13074 00008A39 6A01                    	push 1	; arg count
 13075 00008A3B 488B0425[530F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 13076 00008A43 803805                  	cmp byte [rax], T_undefined
 13077 00008A46 0F84AFCB0000            	je L_error_fvar_undefined
 13078 00008A4C 803804                  	cmp byte [rax], T_closure
 13079 00008A4F 0F852ACC0000            	jne L_error_non_closure
 13080 00008A55 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13081 00008A58 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13082 00008A5B 50                      	push rax
 13083 00008A5C 488B4520                	mov rax, PARAM(0)	; param a
 13084 00008A60 50                      	push rax
 13085 00008A61 6A02                    	push 2	; arg count
 13086 00008A63 488B0425[FD0F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13087 00008A6B 803805                  	cmp byte [rax], T_undefined
 13088 00008A6E 0F8487CB0000            	je L_error_fvar_undefined
 13089 00008A74 803804                  	cmp byte [rax], T_closure
 13090 00008A77 0F8502CC0000            	jne L_error_non_closure
 13091 00008A7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 13092                                  
 13093                                  	; recycling the current frame
 13094 00008A80 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13095 00008A83 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13096 00008A86 B906000000              	mov rcx, 2 + 4
 13097 00008A8B 488B5D18                	mov rbx, COUNT
 13098 00008A8F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13099 00008A94 488D55F8                	lea rdx, [rbp - 8 * 1]
 13100                                  .L_tc_recycle_frame_loop_0732:
 13101 00008A98 4883F900                	cmp rcx, 0
 13102 00008A9C 7413                    	je .L_tc_recycle_frame_done_0732
 13103 00008A9E 488B32                  	mov rsi, qword [rdx]
 13104 00008AA1 488933                  	mov qword [rbx], rsi
 13105 00008AA4 48FFC9                  	dec rcx
 13106 00008AA7 4883EB08                	sub rbx, 8 * 1
 13107 00008AAB 4883EA08                	sub rdx, 8 * 1
 13108 00008AAF EBE7                    	jmp .L_tc_recycle_frame_loop_0732
 13109                                  .L_tc_recycle_frame_done_0732:
 13110 00008AB1 488D6308                	lea rsp, [rbx + 8 * 1]
 13111 00008AB5 5D                      	pop rbp	; the proc will restore it!
 13112 00008AB6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13113                                  
 13114 00008AB9 E9E4000000              	jmp .L_if_end_040b
 13115                                  
 13116                                  	.L_if_else_040b:
 13117 00008ABE 488B4528                	mov rax, PARAM(1)	; param b
 13118 00008AC2 50                      	push rax
 13119 00008AC3 6A01                    	push 1	; arg count
 13120 00008AC5 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 13121 00008ACD 803805                  	cmp byte [rax], T_undefined
 13122 00008AD0 0F8425CB0000            	je L_error_fvar_undefined
 13123 00008AD6 803804                  	cmp byte [rax], T_closure
 13124 00008AD9 0F85A0CB0000            	jne L_error_non_closure
 13125 00008ADF FF7001                  	push SOB_CLOSURE_ENV(rax)
 13126 00008AE2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13127                                  
 13128 00008AE5 483D[02000000]          	cmp rax, sob_boolean_false
 13129 00008AEB 7464                    	je .L_if_else_040c
 13130                                  	; preparing a tail-call
 13131 00008AED 488B4528                	mov rax, PARAM(1)	; param b
 13132 00008AF1 50                      	push rax
 13133 00008AF2 488B4520                	mov rax, PARAM(0)	; param a
 13134 00008AF6 50                      	push rax
 13135 00008AF7 6A02                    	push 2	; arg count
 13136 00008AF9 488B0425[FD0F0000]      	mov rax, qword [free_var_33]	; free var __bin-div-rr
 13137 00008B01 803805                  	cmp byte [rax], T_undefined
 13138 00008B04 0F84F1CA0000            	je L_error_fvar_undefined
 13139 00008B0A 803804                  	cmp byte [rax], T_closure
 13140 00008B0D 0F856CCB0000            	jne L_error_non_closure
 13141 00008B13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13142                                  
 13143                                  	; recycling the current frame
 13144 00008B16 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13145 00008B19 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13146 00008B1C B906000000              	mov rcx, 2 + 4
 13147 00008B21 488B5D18                	mov rbx, COUNT
 13148 00008B25 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13149 00008B2A 488D55F8                	lea rdx, [rbp - 8 * 1]
 13150                                  .L_tc_recycle_frame_loop_0733:
 13151 00008B2E 4883F900                	cmp rcx, 0
 13152 00008B32 7413                    	je .L_tc_recycle_frame_done_0733
 13153 00008B34 488B32                  	mov rsi, qword [rdx]
 13154 00008B37 488933                  	mov qword [rbx], rsi
 13155 00008B3A 48FFC9                  	dec rcx
 13156 00008B3D 4883EB08                	sub rbx, 8 * 1
 13157 00008B41 4883EA08                	sub rdx, 8 * 1
 13158 00008B45 EBE7                    	jmp .L_tc_recycle_frame_loop_0733
 13159                                  .L_tc_recycle_frame_done_0733:
 13160 00008B47 488D6308                	lea rsp, [rbx + 8 * 1]
 13161 00008B4B 5D                      	pop rbp	; the proc will restore it!
 13162 00008B4C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13163                                  
 13164 00008B4F EB51                    	jmp .L_if_end_040c
 13165                                  
 13166                                  	.L_if_else_040c:
 13167                                  	; preparing a tail-call
 13168 00008B51 6A00                    	push 0	; arg count
 13169 00008B53 488B4510                	mov rax, ENV
 13170 00008B57 488B00                  	mov rax, qword [rax + 8 * 0]
 13171 00008B5A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13172 00008B5D 803804                  	cmp byte [rax], T_closure
 13173 00008B60 0F8519CB0000            	jne L_error_non_closure
 13174 00008B66 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13175                                  
 13176                                  	; recycling the current frame
 13177 00008B69 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13178 00008B6C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13179 00008B6F B904000000              	mov rcx, 0 + 4
 13180 00008B74 488B5D18                	mov rbx, COUNT
 13181 00008B78 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13182 00008B7D 488D55F8                	lea rdx, [rbp - 8 * 1]
 13183                                  .L_tc_recycle_frame_loop_0734:
 13184 00008B81 4883F900                	cmp rcx, 0
 13185 00008B85 7413                    	je .L_tc_recycle_frame_done_0734
 13186 00008B87 488B32                  	mov rsi, qword [rdx]
 13187 00008B8A 488933                  	mov qword [rbx], rsi
 13188 00008B8D 48FFC9                  	dec rcx
 13189 00008B90 4883EB08                	sub rbx, 8 * 1
 13190 00008B94 4883EA08                	sub rdx, 8 * 1
 13191 00008B98 EBE7                    	jmp .L_tc_recycle_frame_loop_0734
 13192                                  .L_tc_recycle_frame_done_0734:
 13193 00008B9A 488D6308                	lea rsp, [rbx + 8 * 1]
 13194 00008B9E 5D                      	pop rbp	; the proc will restore it!
 13195 00008B9F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13196                                  
 13197                                  	.L_if_end_040c:
 13198                                  
 13199                                  	.L_if_end_040b:
 13200                                  
 13201                                  	.L_if_end_040a:
 13202                                  
 13203 00008BA2 EB51                    	jmp .L_if_end_0409
 13204                                  
 13205                                  	.L_if_else_0409:
 13206                                  	; preparing a tail-call
 13207 00008BA4 6A00                    	push 0	; arg count
 13208 00008BA6 488B4510                	mov rax, ENV
 13209 00008BAA 488B00                  	mov rax, qword [rax + 8 * 0]
 13210 00008BAD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13211 00008BB0 803804                  	cmp byte [rax], T_closure
 13212 00008BB3 0F85C6CA0000            	jne L_error_non_closure
 13213 00008BB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13214                                  
 13215                                  	; recycling the current frame
 13216 00008BBC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13217 00008BBF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13218 00008BC2 B904000000              	mov rcx, 0 + 4
 13219 00008BC7 488B5D18                	mov rbx, COUNT
 13220 00008BCB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13221 00008BD0 488D55F8                	lea rdx, [rbp - 8 * 1]
 13222                                  .L_tc_recycle_frame_loop_0735:
 13223 00008BD4 4883F900                	cmp rcx, 0
 13224 00008BD8 7413                    	je .L_tc_recycle_frame_done_0735
 13225 00008BDA 488B32                  	mov rsi, qword [rdx]
 13226 00008BDD 488933                  	mov qword [rbx], rsi
 13227 00008BE0 48FFC9                  	dec rcx
 13228 00008BE3 4883EB08                	sub rbx, 8 * 1
 13229 00008BE7 4883EA08                	sub rdx, 8 * 1
 13230 00008BEB EBE7                    	jmp .L_tc_recycle_frame_loop_0735
 13231                                  .L_tc_recycle_frame_done_0735:
 13232 00008BED 488D6308                	lea rsp, [rbx + 8 * 1]
 13233 00008BF1 5D                      	pop rbp	; the proc will restore it!
 13234 00008BF2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13235                                  
 13236                                  	.L_if_end_0409:
 13237                                  
 13238                                  	.L_if_end_0405:
 13239                                  
 13240                                  	.L_if_end_0401:
 13241 00008BF5 C9                      	leave
 13242 00008BF6 C22000                  	ret AND_KILL_FRAME(2)
 13243                                  .L_lambda_simple_end_0567:	; new closure is in rax
 13244 00008BF9 50                      	push rax
 13245 00008BFA 6A01                    	push 1	; arg count
 13246 00008BFC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13247 00008C01 E822CB0000              	call malloc
 13248 00008C06 50                      	push rax
 13249 00008C07 BF08000000              	mov rdi, 8 * 1	; new rib
 13250 00008C0C E817CB0000              	call malloc
 13251 00008C11 50                      	push rax
 13252 00008C12 BF10000000              	mov rdi, 8 * 2	; extended env
 13253 00008C17 E80CCB0000              	call malloc
 13254 00008C1C 488B7D10                	mov rdi, ENV
 13255 00008C20 BE00000000              	mov rsi, 0
 13256 00008C25 BA01000000              	mov rdx, 1
 13257                                  .L_lambda_simple_env_loop_0568:	; ext_env[i + 1] <-- env[i]
 13258 00008C2A 4883FE01                	cmp rsi, 1
 13259 00008C2E 7410                    	je .L_lambda_simple_env_end_0568
 13260 00008C30 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13261 00008C34 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13262 00008C38 48FFC6                  	inc rsi
 13263 00008C3B 48FFC2                  	inc rdx
 13264 00008C3E EBEA                    	jmp .L_lambda_simple_env_loop_0568
 13265                                  .L_lambda_simple_env_end_0568:
 13266 00008C40 5B                      	pop rbx
 13267 00008C41 BE00000000              	mov rsi, 0
 13268                                  .L_lambda_simple_params_loop_0568:	; copy params
 13269 00008C46 4883FE01                	cmp rsi, 1
 13270 00008C4A 740E                    	je .L_lambda_simple_params_end_0568
 13271 00008C4C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13272 00008C51 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13273 00008C55 48FFC6                  	inc rsi
 13274 00008C58 EBEC                    	jmp .L_lambda_simple_params_loop_0568
 13275                                  .L_lambda_simple_params_end_0568:
 13276 00008C5A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13277 00008C5D 4889C3                  	mov rbx, rax
 13278 00008C60 58                      	pop rax
 13279 00008C61 C60004                  	mov byte [rax], T_closure
 13280 00008C64 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13281 00008C68 48C74009[758C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0568
 13282 00008C70 E986030000              	jmp .L_lambda_simple_end_0568
 13283                                  .L_lambda_simple_code_0568:	; lambda-simple body
 13284 00008C75 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13285 00008C7B 740B                    	je .L_lambda_simple_arity_check_ok_0568
 13286 00008C7D FF742410                	push qword [rsp + 8 * 2]
 13287 00008C81 6A01                    	push 1
 13288 00008C83 E959CA0000              	jmp L_error_incorrect_arity_simple
 13289                                  .L_lambda_simple_arity_check_ok_0568:
 13290 00008C88 C8000000                	enter 0, 0
 13291 00008C8C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13292 00008C91 E892CA0000              	call malloc
 13293 00008C96 50                      	push rax
 13294 00008C97 BF08000000              	mov rdi, 8 * 1	; new rib
 13295 00008C9C E887CA0000              	call malloc
 13296 00008CA1 50                      	push rax
 13297 00008CA2 BF18000000              	mov rdi, 8 * 3	; extended env
 13298 00008CA7 E87CCA0000              	call malloc
 13299 00008CAC 488B7D10                	mov rdi, ENV
 13300 00008CB0 BE00000000              	mov rsi, 0
 13301 00008CB5 BA01000000              	mov rdx, 1
 13302                                  .L_lambda_opt_env_loop_00bc:	; ext_env[i + 1] <-- env[i]
 13303 00008CBA 4883FE02                	cmp rsi, 2
 13304 00008CBE 7410                    	je .L_lambda_opt_env_end_00bc
 13305 00008CC0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13306 00008CC4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13307 00008CC8 48FFC6                  	inc rsi
 13308 00008CCB 48FFC2                  	inc rdx
 13309 00008CCE EBEA                    	jmp .L_lambda_opt_env_loop_00bc
 13310                                  .L_lambda_opt_env_end_00bc:
 13311 00008CD0 5B                      	pop rbx
 13312 00008CD1 BE00000000              	mov rsi, 0
 13313                                  .L_lambda_opt_params_loop_00bc:	; copy params
 13314 00008CD6 4883FE01                	cmp rsi, 1
 13315 00008CDA 740E                    	je .L_lambda_opt_params_end_00bc
 13316 00008CDC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13317 00008CE1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13318 00008CE5 48FFC6                  	inc rsi
 13319 00008CE8 EBEC                    	jmp .L_lambda_opt_params_loop_00bc
 13320                                  .L_lambda_opt_params_end_00bc:
 13321 00008CEA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13322 00008CED 4889C3                  	mov rbx, rax
 13323 00008CF0 58                      	pop rax
 13324 00008CF1 C60004                  	mov byte [rax], T_closure
 13325 00008CF4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13326 00008CF8 48C74009[058D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00bc
 13327 00008D00 E9F2020000              	jmp .L_lambda_opt_end_00bc
 13328                                  .L_lambda_opt_code_00bc:	; lambda-simple body
 13329 00008D05 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 13330 00008D0B 740D                    	je .L_lambda_opt_arity_check_exact_00bc ;	 if equal, go to exact arity
 13331 00008D0D 7F42                    	jg .L_lambda_opt_arity_check_more_00bc ;	 if greater than, go to arity more
 13332 00008D0F FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 13333 00008D13 6A01                     	push 1
 13334 00008D15 E9DBC90000              	jmp L_error_incorrect_arity_opt
 13335                                  	.L_lambda_opt_arity_check_exact_00bc:
 13336 00008D1A 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 13337 00008D1F 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 13338 00008D24 4883EC08                	sub rsp, 8
 13339 00008D28 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 13340                                  	.L_lambda_opt_exact_shifting_loop_00bc:
 13341 00008D2C 488B5108                	mov rdx, [rcx + 8]
 13342 00008D30 488911                  	mov [rcx], rdx
 13343 00008D33 4883C108                	add rcx, 8
 13344 00008D37 4839CB                  	cmp rbx, rcx
 13345 00008D3A 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00bc
 13346                                  	.L_lambda_opt_exact_shifting_loop_end_00bc:
 13347 00008D3C 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 13348 00008D43 4883C001                	add rax, 1 ; 	arg count += 1
 13349 00008D47 4889442410              	mov qword [rsp + 8 * 2], rax
 13350 00008D4C E987000000              	jmp .L_lambda_opt_stack_adjusted_00bc
 13351                                  	.L_lambda_opt_arity_check_more_00bc:
 13352 00008D51 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 13352 00008D53 [0100000000000000] 
 13353 00008D5B 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 13354 00008D61 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00bc
 13355                                  	.L_lambda_opt_stack_shrink_loop_00bc:
 13356 00008D63 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 13357 00008D68 E8BBC90000              	call malloc ;	 allocated memory for the optional scheme list
 13358 00008D6D C60021                  	mov byte[rax], T_pair ;	 set type pair
 13359 00008D70 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 13360 00008D74 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 13361 00008D77 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 13362 00008D7C 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 13363 00008D81 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 13364 00008D85 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 13365                                  	.L_lambda_opt_more_shifting_loop_00bc:
 13366 00008D8A 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 13367 00008D8D 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 13368 00008D91 4883EB08                	sub rbx, 8 
 13369 00008D95 4839DC                  	cmp rsp, rbx
 13370 00008D98 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00bc
 13371                                  	.L_lambda_opt_more_shifting_loop_end_00bc:
 13372 00008D9A 4883C408                	add rsp, 8 ;	 update rsp
 13373 00008D9E 488B5C2410              	mov rbx, [rsp + 8 * 2]
 13374 00008DA3 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 13375 00008DA7 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 13376 00008DAC 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13377 00008DB2 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00bc
 13378                                  	.L_lambda_opt_stack_shrink_loop_exit_00bc:
 13379 00008DB4 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 13380 00008DB9 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 13381 00008DBE BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 13382 00008DC3 E860C90000              	call malloc ;	 allocated memory for the optional scheme list
 13383 00008DC8 C60021                  	mov byte[rax], T_pair ;	 set type pair
 13384 00008DCB 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 13385 00008DCF 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 13386 00008DD3 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 13387                                  	.L_lambda_opt_stack_adjusted_00bc:
 13388 00008DD8 C8000000                	enter 0, 0
 13389 00008DDC 488B4528                	mov rax, PARAM(1)	; param s
 13390 00008DE0 50                      	push rax
 13391 00008DE1 6A01                    	push 1	; arg count
 13392 00008DE3 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 13393 00008DEB 803805                  	cmp byte [rax], T_undefined
 13394 00008DEE 0F8407C80000            	je L_error_fvar_undefined
 13395 00008DF4 803804                  	cmp byte [rax], T_closure
 13396 00008DF7 0F8582C80000            	jne L_error_non_closure
 13397 00008DFD FF7001                  	push SOB_CLOSURE_ENV(rax)
 13398 00008E00 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13399                                  
 13400 00008E03 483D[02000000]          	cmp rax, sob_boolean_false
 13401 00008E09 7466                    	je .L_if_else_040d
 13402                                  	; preparing a tail-call
 13403 00008E0B 488B4520                	mov rax, PARAM(0)	; param a
 13404 00008E0F 50                      	push rax
 13405 00008E10 48B8-                   	mov rax, L_constants + 2158
 13405 00008E12 [6E08000000000000] 
 13406 00008E1A 50                      	push rax
 13407 00008E1B 6A02                    	push 2	; arg count
 13408 00008E1D 488B4510                	mov rax, ENV
 13409 00008E21 488B00                  	mov rax, qword [rax + 8 * 0]
 13410 00008E24 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 13411 00008E27 803804                  	cmp byte [rax], T_closure
 13412 00008E2A 0F854FC80000            	jne L_error_non_closure
 13413 00008E30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13414                                  
 13415                                  	; recycling the current frame
 13416 00008E33 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13417 00008E36 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13418 00008E39 B906000000              	mov rcx, 2 + 4
 13419 00008E3E 488B5D18                	mov rbx, COUNT
 13420 00008E42 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13421 00008E47 488D55F8                	lea rdx, [rbp - 8 * 1]
 13422                                  .L_tc_recycle_frame_loop_0736:
 13423 00008E4B 4883F900                	cmp rcx, 0
 13424 00008E4F 7413                    	je .L_tc_recycle_frame_done_0736
 13425 00008E51 488B32                  	mov rsi, qword [rdx]
 13426 00008E54 488933                  	mov qword [rbx], rsi
 13427 00008E57 48FFC9                  	dec rcx
 13428 00008E5A 4883EB08                	sub rbx, 8 * 1
 13429 00008E5E 4883EA08                	sub rdx, 8 * 1
 13430 00008E62 EBE7                    	jmp .L_tc_recycle_frame_loop_0736
 13431                                  .L_tc_recycle_frame_done_0736:
 13432 00008E64 488D6308                	lea rsp, [rbx + 8 * 1]
 13433 00008E68 5D                      	pop rbp	; the proc will restore it!
 13434 00008E69 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13435                                  
 13436 00008E6C E982010000              	jmp .L_if_end_040d
 13437                                  
 13438                                  	.L_if_else_040d:
 13439                                  	; preparing a tail-call
 13440 00008E71 488B4528                	mov rax, PARAM(1)	; param s
 13441 00008E75 50                      	push rax
 13442 00008E76 48B8-                   	mov rax, L_constants + 2158
 13442 00008E78 [6E08000000000000] 
 13443 00008E80 50                      	push rax
 13444 00008E81 488B0425[B3150000]      	mov rax, qword [free_var_119]	; free var *
 13445 00008E89 803805                  	cmp byte [rax], T_undefined
 13446 00008E8C 0F8469C70000            	je L_error_fvar_undefined
 13447 00008E92 50                      	push rax
 13448 00008E93 6A03                    	push 3	; arg count
 13449 00008E95 488B0425[3C150000]      	mov rax, qword [free_var_112]	; free var fold-left
 13450 00008E9D 803805                  	cmp byte [rax], T_undefined
 13451 00008EA0 0F8455C70000            	je L_error_fvar_undefined
 13452 00008EA6 803804                  	cmp byte [rax], T_closure
 13453 00008EA9 0F85D0C70000            	jne L_error_non_closure
 13454 00008EAF FF7001                  	push SOB_CLOSURE_ENV(rax)
 13455 00008EB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13456 00008EB5 50                      	push rax
 13457 00008EB6 6A01                    	push 1	; arg count
 13458 00008EB8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13459 00008EBD E866C80000              	call malloc
 13460 00008EC2 50                      	push rax
 13461 00008EC3 BF10000000              	mov rdi, 8 * 2	; new rib
 13462 00008EC8 E85BC80000              	call malloc
 13463 00008ECD 50                      	push rax
 13464 00008ECE BF20000000              	mov rdi, 8 * 4	; extended env
 13465 00008ED3 E850C80000              	call malloc
 13466 00008ED8 488B7D10                	mov rdi, ENV
 13467 00008EDC BE00000000              	mov rsi, 0
 13468 00008EE1 BA01000000              	mov rdx, 1
 13469                                  .L_lambda_simple_env_loop_0569:	; ext_env[i + 1] <-- env[i]
 13470 00008EE6 4883FE03                	cmp rsi, 3
 13471 00008EEA 7410                    	je .L_lambda_simple_env_end_0569
 13472 00008EEC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13473 00008EF0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13474 00008EF4 48FFC6                  	inc rsi
 13475 00008EF7 48FFC2                  	inc rdx
 13476 00008EFA EBEA                    	jmp .L_lambda_simple_env_loop_0569
 13477                                  .L_lambda_simple_env_end_0569:
 13478 00008EFC 5B                      	pop rbx
 13479 00008EFD BE00000000              	mov rsi, 0
 13480                                  .L_lambda_simple_params_loop_0569:	; copy params
 13481 00008F02 4883FE02                	cmp rsi, 2
 13482 00008F06 740E                    	je .L_lambda_simple_params_end_0569
 13483 00008F08 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13484 00008F0D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13485 00008F11 48FFC6                  	inc rsi
 13486 00008F14 EBEC                    	jmp .L_lambda_simple_params_loop_0569
 13487                                  .L_lambda_simple_params_end_0569:
 13488 00008F16 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13489 00008F19 4889C3                  	mov rbx, rax
 13490 00008F1C 58                      	pop rax
 13491 00008F1D C60004                  	mov byte [rax], T_closure
 13492 00008F20 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13493 00008F24 48C74009[318F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0569
 13494 00008F2C E97D000000              	jmp .L_lambda_simple_end_0569
 13495                                  .L_lambda_simple_code_0569:	; lambda-simple body
 13496 00008F31 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13497 00008F37 740B                    	je .L_lambda_simple_arity_check_ok_0569
 13498 00008F39 FF742410                	push qword [rsp + 8 * 2]
 13499 00008F3D 6A01                    	push 1
 13500 00008F3F E99DC70000              	jmp L_error_incorrect_arity_simple
 13501                                  .L_lambda_simple_arity_check_ok_0569:
 13502 00008F44 C8000000                	enter 0, 0
 13503                                  	; preparing a tail-call
 13504 00008F48 488B4520                	mov rax, PARAM(0)	; param b
 13505 00008F4C 50                      	push rax
 13506 00008F4D 488B4510                	mov rax, ENV
 13507 00008F51 488B00                  	mov rax, qword [rax + 8 * 0]
 13508 00008F54 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 13509 00008F57 50                      	push rax
 13510 00008F58 6A02                    	push 2	; arg count
 13511 00008F5A 488B4510                	mov rax, ENV
 13512 00008F5E 488B4008                	mov rax, qword [rax + 8 * 1]
 13513 00008F62 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 13514 00008F65 803804                  	cmp byte [rax], T_closure
 13515 00008F68 0F8511C70000            	jne L_error_non_closure
 13516 00008F6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 13517                                  
 13518                                  	; recycling the current frame
 13519 00008F71 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13520 00008F74 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13521 00008F77 B906000000              	mov rcx, 2 + 4
 13522 00008F7C 488B5D18                	mov rbx, COUNT
 13523 00008F80 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13524 00008F85 488D55F8                	lea rdx, [rbp - 8 * 1]
 13525                                  .L_tc_recycle_frame_loop_0737:
 13526 00008F89 4883F900                	cmp rcx, 0
 13527 00008F8D 7413                    	je .L_tc_recycle_frame_done_0737
 13528 00008F8F 488B32                  	mov rsi, qword [rdx]
 13529 00008F92 488933                  	mov qword [rbx], rsi
 13530 00008F95 48FFC9                  	dec rcx
 13531 00008F98 4883EB08                	sub rbx, 8 * 1
 13532 00008F9C 4883EA08                	sub rdx, 8 * 1
 13533 00008FA0 EBE7                    	jmp .L_tc_recycle_frame_loop_0737
 13534                                  .L_tc_recycle_frame_done_0737:
 13535 00008FA2 488D6308                	lea rsp, [rbx + 8 * 1]
 13536 00008FA6 5D                      	pop rbp	; the proc will restore it!
 13537 00008FA7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13538 00008FAA C9                      	leave
 13539 00008FAB C21800                  	ret AND_KILL_FRAME(1)
 13540                                  .L_lambda_simple_end_0569:	; new closure is in rax
 13541 00008FAE 803804                  	cmp byte [rax], T_closure
 13542 00008FB1 0F85C8C60000            	jne L_error_non_closure
 13543 00008FB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13544                                  
 13545                                  	; recycling the current frame
 13546 00008FBA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13547 00008FBD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13548 00008FC0 B905000000              	mov rcx, 1 + 4
 13549 00008FC5 488B5D18                	mov rbx, COUNT
 13550 00008FC9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13551 00008FCE 488D55F8                	lea rdx, [rbp - 8 * 1]
 13552                                  .L_tc_recycle_frame_loop_0738:
 13553 00008FD2 4883F900                	cmp rcx, 0
 13554 00008FD6 7413                    	je .L_tc_recycle_frame_done_0738
 13555 00008FD8 488B32                  	mov rsi, qword [rdx]
 13556 00008FDB 488933                  	mov qword [rbx], rsi
 13557 00008FDE 48FFC9                  	dec rcx
 13558 00008FE1 4883EB08                	sub rbx, 8 * 1
 13559 00008FE5 4883EA08                	sub rdx, 8 * 1
 13560 00008FE9 EBE7                    	jmp .L_tc_recycle_frame_loop_0738
 13561                                  .L_tc_recycle_frame_done_0738:
 13562 00008FEB 488D6308                	lea rsp, [rbx + 8 * 1]
 13563 00008FEF 5D                      	pop rbp	; the proc will restore it!
 13564 00008FF0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13565                                  
 13566                                  	.L_if_end_040d:
 13567 00008FF3 C9                      	leave
 13568 00008FF4 C22000                  	ret AND_KILL_FRAME(2)
 13569                                  .L_lambda_opt_end_00bc:	; new closure is in rax
 13570 00008FF7 C9                      	leave
 13571 00008FF8 C21800                  	ret AND_KILL_FRAME(1)
 13572                                  .L_lambda_simple_end_0568:	; new closure is in rax
 13573 00008FFB 803804                  	cmp byte [rax], T_closure
 13574 00008FFE 0F857BC60000            	jne L_error_non_closure
 13575 00009004 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13576                                  
 13577                                  	; recycling the current frame
 13578 00009007 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13579 0000900A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13580 0000900D B905000000              	mov rcx, 1 + 4
 13581 00009012 488B5D18                	mov rbx, COUNT
 13582 00009016 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13583 0000901B 488D55F8                	lea rdx, [rbp - 8 * 1]
 13584                                  .L_tc_recycle_frame_loop_0739:
 13585 0000901F 4883F900                	cmp rcx, 0
 13586 00009023 7413                    	je .L_tc_recycle_frame_done_0739
 13587 00009025 488B32                  	mov rsi, qword [rdx]
 13588 00009028 488933                  	mov qword [rbx], rsi
 13589 0000902B 48FFC9                  	dec rcx
 13590 0000902E 4883EB08                	sub rbx, 8 * 1
 13591 00009032 4883EA08                	sub rdx, 8 * 1
 13592 00009036 EBE7                    	jmp .L_tc_recycle_frame_loop_0739
 13593                                  .L_tc_recycle_frame_done_0739:
 13594 00009038 488D6308                	lea rsp, [rbx + 8 * 1]
 13595 0000903C 5D                      	pop rbp	; the proc will restore it!
 13596 0000903D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13597 00009040 C9                      	leave
 13598 00009041 C21800                  	ret AND_KILL_FRAME(1)
 13599                                  .L_lambda_simple_end_0566:	; new closure is in rax
 13600 00009044 803804                  	cmp byte [rax], T_closure
 13601 00009047 0F8532C60000            	jne L_error_non_closure
 13602 0000904D FF7001                  	push SOB_CLOSURE_ENV(rax)
 13603 00009050 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13604 00009053 48890425[C4150000]      	mov qword [free_var_120], rax
 13605 0000905B 48B8-                   	mov rax, sob_void
 13605 0000905D [0000000000000000] 
 13606                                  
 13607 00009065 4889C7                  	mov rdi, rax
 13608 00009068 E8CDC70000              	call print_sexpr_if_not_void
 13609                                  
 13610 0000906D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13611 00009072 E8B1C60000              	call malloc
 13612 00009077 50                      	push rax
 13613 00009078 BF00000000              	mov rdi, 8 * 0	; new rib
 13614 0000907D E8A6C60000              	call malloc
 13615 00009082 50                      	push rax
 13616 00009083 BF08000000              	mov rdi, 8 * 1	; extended env
 13617 00009088 E89BC60000              	call malloc
 13618 0000908D 488B7D10                	mov rdi, ENV
 13619 00009091 BE00000000              	mov rsi, 0
 13620 00009096 BA01000000              	mov rdx, 1
 13621                                  .L_lambda_simple_env_loop_056a:	; ext_env[i + 1] <-- env[i]
 13622 0000909B 4883FE00                	cmp rsi, 0
 13623 0000909F 7410                    	je .L_lambda_simple_env_end_056a
 13624 000090A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13625 000090A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13626 000090A9 48FFC6                  	inc rsi
 13627 000090AC 48FFC2                  	inc rdx
 13628 000090AF EBEA                    	jmp .L_lambda_simple_env_loop_056a
 13629                                  .L_lambda_simple_env_end_056a:
 13630 000090B1 5B                      	pop rbx
 13631 000090B2 BE00000000              	mov rsi, 0
 13632                                  .L_lambda_simple_params_loop_056a:	; copy params
 13633 000090B7 4883FE00                	cmp rsi, 0
 13634 000090BB 740E                    	je .L_lambda_simple_params_end_056a
 13635 000090BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13636 000090C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13637 000090C6 48FFC6                  	inc rsi
 13638 000090C9 EBEC                    	jmp .L_lambda_simple_params_loop_056a
 13639                                  .L_lambda_simple_params_end_056a:
 13640 000090CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13641 000090CE 4889C3                  	mov rbx, rax
 13642 000090D1 58                      	pop rax
 13643 000090D2 C60004                  	mov byte [rax], T_closure
 13644 000090D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13645 000090D9 48C74009[E6900000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_056a
 13646 000090E1 E90C010000              	jmp .L_lambda_simple_end_056a
 13647                                  .L_lambda_simple_code_056a:	; lambda-simple body
 13648 000090E6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13649 000090EC 740B                    	je .L_lambda_simple_arity_check_ok_056a
 13650 000090EE FF742410                	push qword [rsp + 8 * 2]
 13651 000090F2 6A01                    	push 1
 13652 000090F4 E9E8C50000              	jmp L_error_incorrect_arity_simple
 13653                                  .L_lambda_simple_arity_check_ok_056a:
 13654 000090F9 C8000000                	enter 0, 0
 13655 000090FD 488B4520                	mov rax, PARAM(0)	; param n
 13656 00009101 50                      	push rax
 13657 00009102 6A01                    	push 1	; arg count
 13658 00009104 488B0425[970F0000]      	mov rax, qword [free_var_27]	; free var zero?
 13659 0000910C 803805                  	cmp byte [rax], T_undefined
 13660 0000910F 0F84E6C40000            	je L_error_fvar_undefined
 13661 00009115 803804                  	cmp byte [rax], T_closure
 13662 00009118 0F8561C50000            	jne L_error_non_closure
 13663 0000911E FF7001                  	push SOB_CLOSURE_ENV(rax)
 13664 00009121 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13665                                  
 13666 00009124 483D[02000000]          	cmp rax, sob_boolean_false
 13667 0000912A 740F                    	je .L_if_else_040e
 13668 0000912C 48B8-                   	mov rax, L_constants + 2158
 13668 0000912E [6E08000000000000] 
 13669                                  
 13670 00009136 E9B3000000              	jmp .L_if_end_040e
 13671                                  
 13672                                  	.L_if_else_040e:
 13673                                  	; preparing a tail-call
 13674 0000913B 48B8-                   	mov rax, L_constants + 2158
 13674 0000913D [6E08000000000000] 
 13675 00009145 50                      	push rax
 13676 00009146 488B4520                	mov rax, PARAM(0)	; param n
 13677 0000914A 50                      	push rax
 13678 0000914B 6A02                    	push 2	; arg count
 13679 0000914D 488B0425[91150000]      	mov rax, qword [free_var_117]	; free var -
 13680 00009155 803805                  	cmp byte [rax], T_undefined
 13681 00009158 0F849DC40000            	je L_error_fvar_undefined
 13682 0000915E 803804                  	cmp byte [rax], T_closure
 13683 00009161 0F8518C50000            	jne L_error_non_closure
 13684 00009167 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13685 0000916A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13686 0000916D 50                      	push rax
 13687 0000916E 6A01                    	push 1	; arg count
 13688 00009170 488B0425[D5150000]      	mov rax, qword [free_var_121]	; free var fact
 13689 00009178 803805                  	cmp byte [rax], T_undefined
 13690 0000917B 0F847AC40000            	je L_error_fvar_undefined
 13691 00009181 803804                  	cmp byte [rax], T_closure
 13692 00009184 0F85F5C40000            	jne L_error_non_closure
 13693 0000918A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13694 0000918D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13695 00009190 50                      	push rax
 13696 00009191 488B4520                	mov rax, PARAM(0)	; param n
 13697 00009195 50                      	push rax
 13698 00009196 6A02                    	push 2	; arg count
 13699 00009198 488B0425[B3150000]      	mov rax, qword [free_var_119]	; free var *
 13700 000091A0 803805                  	cmp byte [rax], T_undefined
 13701 000091A3 0F8452C40000            	je L_error_fvar_undefined
 13702 000091A9 803804                  	cmp byte [rax], T_closure
 13703 000091AC 0F85CDC40000            	jne L_error_non_closure
 13704 000091B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13705                                  
 13706                                  	; recycling the current frame
 13707 000091B5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13708 000091B8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13709 000091BB B906000000              	mov rcx, 2 + 4
 13710 000091C0 488B5D18                	mov rbx, COUNT
 13711 000091C4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13712 000091C9 488D55F8                	lea rdx, [rbp - 8 * 1]
 13713                                  .L_tc_recycle_frame_loop_073a:
 13714 000091CD 4883F900                	cmp rcx, 0
 13715 000091D1 7413                    	je .L_tc_recycle_frame_done_073a
 13716 000091D3 488B32                  	mov rsi, qword [rdx]
 13717 000091D6 488933                  	mov qword [rbx], rsi
 13718 000091D9 48FFC9                  	dec rcx
 13719 000091DC 4883EB08                	sub rbx, 8 * 1
 13720 000091E0 4883EA08                	sub rdx, 8 * 1
 13721 000091E4 EBE7                    	jmp .L_tc_recycle_frame_loop_073a
 13722                                  .L_tc_recycle_frame_done_073a:
 13723 000091E6 488D6308                	lea rsp, [rbx + 8 * 1]
 13724 000091EA 5D                      	pop rbp	; the proc will restore it!
 13725 000091EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13726                                  
 13727                                  	.L_if_end_040e:
 13728 000091EE C9                      	leave
 13729 000091EF C21800                  	ret AND_KILL_FRAME(1)
 13730                                  .L_lambda_simple_end_056a:	; new closure is in rax
 13731 000091F2 48890425[D5150000]      	mov qword [free_var_121], rax
 13732 000091FA 48B8-                   	mov rax, sob_void
 13732 000091FC [0000000000000000] 
 13733                                  
 13734 00009204 4889C7                  	mov rdi, rax
 13735 00009207 E82EC60000              	call print_sexpr_if_not_void
 13736                                  
 13737 0000920C 48B8-                   	mov rax, L_constants + 0
 13737 0000920E [0000000000000000] 
 13738 00009216 48890425[E6150000]      	mov qword [free_var_122], rax
 13739 0000921E 48B8-                   	mov rax, sob_void
 13739 00009220 [0000000000000000] 
 13740                                  
 13741 00009228 4889C7                  	mov rdi, rax
 13742 0000922B E80AC60000              	call print_sexpr_if_not_void
 13743                                  
 13744 00009230 48B8-                   	mov rax, L_constants + 0
 13744 00009232 [0000000000000000] 
 13745 0000923A 48890425[F7150000]      	mov qword [free_var_123], rax
 13746 00009242 48B8-                   	mov rax, sob_void
 13746 00009244 [0000000000000000] 
 13747                                  
 13748 0000924C 4889C7                  	mov rdi, rax
 13749 0000924F E8E6C50000              	call print_sexpr_if_not_void
 13750                                  
 13751 00009254 48B8-                   	mov rax, L_constants + 0
 13751 00009256 [0000000000000000] 
 13752 0000925E 48890425[08160000]      	mov qword [free_var_124], rax
 13753 00009266 48B8-                   	mov rax, sob_void
 13753 00009268 [0000000000000000] 
 13754                                  
 13755 00009270 4889C7                  	mov rdi, rax
 13756 00009273 E8C2C50000              	call print_sexpr_if_not_void
 13757                                  
 13758 00009278 48B8-                   	mov rax, L_constants + 0
 13758 0000927A [0000000000000000] 
 13759 00009282 48890425[19160000]      	mov qword [free_var_125], rax
 13760 0000928A 48B8-                   	mov rax, sob_void
 13760 0000928C [0000000000000000] 
 13761                                  
 13762 00009294 4889C7                  	mov rdi, rax
 13763 00009297 E89EC50000              	call print_sexpr_if_not_void
 13764                                  
 13765 0000929C 48B8-                   	mov rax, L_constants + 0
 13765 0000929E [0000000000000000] 
 13766 000092A6 48890425[2A160000]      	mov qword [free_var_126], rax
 13767 000092AE 48B8-                   	mov rax, sob_void
 13767 000092B0 [0000000000000000] 
 13768                                  
 13769 000092B8 4889C7                  	mov rdi, rax
 13770 000092BB E87AC50000              	call print_sexpr_if_not_void
 13771                                  
 13772 000092C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13773 000092C5 E85EC40000              	call malloc
 13774 000092CA 50                      	push rax
 13775 000092CB BF00000000              	mov rdi, 8 * 0	; new rib
 13776 000092D0 E853C40000              	call malloc
 13777 000092D5 50                      	push rax
 13778 000092D6 BF08000000              	mov rdi, 8 * 1	; extended env
 13779 000092DB E848C40000              	call malloc
 13780 000092E0 488B7D10                	mov rdi, ENV
 13781 000092E4 BE00000000              	mov rsi, 0
 13782 000092E9 BA01000000              	mov rdx, 1
 13783                                  .L_lambda_simple_env_loop_056b:	; ext_env[i + 1] <-- env[i]
 13784 000092EE 4883FE00                	cmp rsi, 0
 13785 000092F2 7410                    	je .L_lambda_simple_env_end_056b
 13786 000092F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13787 000092F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13788 000092FC 48FFC6                  	inc rsi
 13789 000092FF 48FFC2                  	inc rdx
 13790 00009302 EBEA                    	jmp .L_lambda_simple_env_loop_056b
 13791                                  .L_lambda_simple_env_end_056b:
 13792 00009304 5B                      	pop rbx
 13793 00009305 BE00000000              	mov rsi, 0
 13794                                  .L_lambda_simple_params_loop_056b:	; copy params
 13795 0000930A 4883FE00                	cmp rsi, 0
 13796 0000930E 740E                    	je .L_lambda_simple_params_end_056b
 13797 00009310 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13798 00009315 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13799 00009319 48FFC6                  	inc rsi
 13800 0000931C EBEC                    	jmp .L_lambda_simple_params_loop_056b
 13801                                  .L_lambda_simple_params_end_056b:
 13802 0000931E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13803 00009321 4889C3                  	mov rbx, rax
 13804 00009324 58                      	pop rax
 13805 00009325 C60004                  	mov byte [rax], T_closure
 13806 00009328 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13807 0000932C 48C74009[39930000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_056b
 13808 00009334 E989000000              	jmp .L_lambda_simple_end_056b
 13809                                  .L_lambda_simple_code_056b:	; lambda-simple body
 13810 00009339 48837C241000            	cmp qword [rsp + 8 * 2], 0
 13811 0000933F 740B                    	je .L_lambda_simple_arity_check_ok_056b
 13812 00009341 FF742410                	push qword [rsp + 8 * 2]
 13813 00009345 6A00                    	push 0
 13814 00009347 E995C30000              	jmp L_error_incorrect_arity_simple
 13815                                  .L_lambda_simple_arity_check_ok_056b:
 13816 0000934C C8000000                	enter 0, 0
 13817                                  	; preparing a tail-call
 13818 00009350 48B8-                   	mov rax, L_constants + 2296
 13818 00009352 [F808000000000000] 
 13819 0000935A 50                      	push rax
 13820 0000935B 48B8-                   	mov rax, L_constants + 2287
 13820 0000935D [EF08000000000000] 
 13821 00009365 50                      	push rax
 13822 00009366 6A02                    	push 2	; arg count
 13823 00009368 488B0425[96100000]      	mov rax, qword [free_var_42]	; free var error
 13824 00009370 803805                  	cmp byte [rax], T_undefined
 13825 00009373 0F8482C20000            	je L_error_fvar_undefined
 13826 00009379 803804                  	cmp byte [rax], T_closure
 13827 0000937C 0F85FDC20000            	jne L_error_non_closure
 13828 00009382 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13829                                  
 13830                                  	; recycling the current frame
 13831 00009385 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 13832 00009388 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 13833 0000938B B906000000              	mov rcx, 2 + 4
 13834 00009390 488B5D18                	mov rbx, COUNT
 13835 00009394 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 13836 00009399 488D55F8                	lea rdx, [rbp - 8 * 1]
 13837                                  .L_tc_recycle_frame_loop_073b:
 13838 0000939D 4883F900                	cmp rcx, 0
 13839 000093A1 7413                    	je .L_tc_recycle_frame_done_073b
 13840 000093A3 488B32                  	mov rsi, qword [rdx]
 13841 000093A6 488933                  	mov qword [rbx], rsi
 13842 000093A9 48FFC9                  	dec rcx
 13843 000093AC 4883EB08                	sub rbx, 8 * 1
 13844 000093B0 4883EA08                	sub rdx, 8 * 1
 13845 000093B4 EBE7                    	jmp .L_tc_recycle_frame_loop_073b
 13846                                  .L_tc_recycle_frame_done_073b:
 13847 000093B6 488D6308                	lea rsp, [rbx + 8 * 1]
 13848 000093BA 5D                      	pop rbp	; the proc will restore it!
 13849 000093BB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13850 000093BE C9                      	leave
 13851 000093BF C21000                  	ret AND_KILL_FRAME(0)
 13852                                  .L_lambda_simple_end_056b:	; new closure is in rax
 13853 000093C2 50                      	push rax
 13854 000093C3 6A01                    	push 1	; arg count
 13855 000093C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13856 000093CA E859C30000              	call malloc
 13857 000093CF 50                      	push rax
 13858 000093D0 BF00000000              	mov rdi, 8 * 0	; new rib
 13859 000093D5 E84EC30000              	call malloc
 13860 000093DA 50                      	push rax
 13861 000093DB BF08000000              	mov rdi, 8 * 1	; extended env
 13862 000093E0 E843C30000              	call malloc
 13863 000093E5 488B7D10                	mov rdi, ENV
 13864 000093E9 BE00000000              	mov rsi, 0
 13865 000093EE BA01000000              	mov rdx, 1
 13866                                  .L_lambda_simple_env_loop_056c:	; ext_env[i + 1] <-- env[i]
 13867 000093F3 4883FE00                	cmp rsi, 0
 13868 000093F7 7410                    	je .L_lambda_simple_env_end_056c
 13869 000093F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13870 000093FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13871 00009401 48FFC6                  	inc rsi
 13872 00009404 48FFC2                  	inc rdx
 13873 00009407 EBEA                    	jmp .L_lambda_simple_env_loop_056c
 13874                                  .L_lambda_simple_env_end_056c:
 13875 00009409 5B                      	pop rbx
 13876 0000940A BE00000000              	mov rsi, 0
 13877                                  .L_lambda_simple_params_loop_056c:	; copy params
 13878 0000940F 4883FE00                	cmp rsi, 0
 13879 00009413 740E                    	je .L_lambda_simple_params_end_056c
 13880 00009415 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13881 0000941A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13882 0000941E 48FFC6                  	inc rsi
 13883 00009421 EBEC                    	jmp .L_lambda_simple_params_loop_056c
 13884                                  .L_lambda_simple_params_end_056c:
 13885 00009423 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13886 00009426 4889C3                  	mov rbx, rax
 13887 00009429 58                      	pop rax
 13888 0000942A C60004                  	mov byte [rax], T_closure
 13889 0000942D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13890 00009431 48C74009[3E940000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_056c
 13891 00009439 E925190000              	jmp .L_lambda_simple_end_056c
 13892                                  .L_lambda_simple_code_056c:	; lambda-simple body
 13893 0000943E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13894 00009444 740B                    	je .L_lambda_simple_arity_check_ok_056c
 13895 00009446 FF742410                	push qword [rsp + 8 * 2]
 13896 0000944A 6A01                    	push 1
 13897 0000944C E990C20000              	jmp L_error_incorrect_arity_simple
 13898                                  .L_lambda_simple_arity_check_ok_056c:
 13899 00009451 C8000000                	enter 0, 0
 13900                                  	; preparing a tail-call
 13901 00009455 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13902 0000945A E8C9C20000              	call malloc
 13903 0000945F 50                      	push rax
 13904 00009460 BF08000000              	mov rdi, 8 * 1	; new rib
 13905 00009465 E8BEC20000              	call malloc
 13906 0000946A 50                      	push rax
 13907 0000946B BF10000000              	mov rdi, 8 * 2	; extended env
 13908 00009470 E8B3C20000              	call malloc
 13909 00009475 488B7D10                	mov rdi, ENV
 13910 00009479 BE00000000              	mov rsi, 0
 13911 0000947E BA01000000              	mov rdx, 1
 13912                                  .L_lambda_simple_env_loop_056d:	; ext_env[i + 1] <-- env[i]
 13913 00009483 4883FE01                	cmp rsi, 1
 13914 00009487 7410                    	je .L_lambda_simple_env_end_056d
 13915 00009489 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13916 0000948D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13917 00009491 48FFC6                  	inc rsi
 13918 00009494 48FFC2                  	inc rdx
 13919 00009497 EBEA                    	jmp .L_lambda_simple_env_loop_056d
 13920                                  .L_lambda_simple_env_end_056d:
 13921 00009499 5B                      	pop rbx
 13922 0000949A BE00000000              	mov rsi, 0
 13923                                  .L_lambda_simple_params_loop_056d:	; copy params
 13924 0000949F 4883FE01                	cmp rsi, 1
 13925 000094A3 740E                    	je .L_lambda_simple_params_end_056d
 13926 000094A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13927 000094AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13928 000094AE 48FFC6                  	inc rsi
 13929 000094B1 EBEC                    	jmp .L_lambda_simple_params_loop_056d
 13930                                  .L_lambda_simple_params_end_056d:
 13931 000094B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13932 000094B6 4889C3                  	mov rbx, rax
 13933 000094B9 58                      	pop rax
 13934 000094BA C60004                  	mov byte [rax], T_closure
 13935 000094BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13936 000094C1 48C74009[CE940000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_056d
 13937 000094C9 E98C080000              	jmp .L_lambda_simple_end_056d
 13938                                  .L_lambda_simple_code_056d:	; lambda-simple body
 13939 000094CE 48837C241003            	cmp qword [rsp + 8 * 2], 3
 13940 000094D4 740B                    	je .L_lambda_simple_arity_check_ok_056d
 13941 000094D6 FF742410                	push qword [rsp + 8 * 2]
 13942 000094DA 6A03                    	push 3
 13943 000094DC E900C20000              	jmp L_error_incorrect_arity_simple
 13944                                  .L_lambda_simple_arity_check_ok_056d:
 13945 000094E1 C8000000                	enter 0, 0
 13946 000094E5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13947 000094EA E839C20000              	call malloc
 13948 000094EF 50                      	push rax
 13949 000094F0 BF18000000              	mov rdi, 8 * 3	; new rib
 13950 000094F5 E82EC20000              	call malloc
 13951 000094FA 50                      	push rax
 13952 000094FB BF18000000              	mov rdi, 8 * 3	; extended env
 13953 00009500 E823C20000              	call malloc
 13954 00009505 488B7D10                	mov rdi, ENV
 13955 00009509 BE00000000              	mov rsi, 0
 13956 0000950E BA01000000              	mov rdx, 1
 13957                                  .L_lambda_simple_env_loop_056e:	; ext_env[i + 1] <-- env[i]
 13958 00009513 4883FE02                	cmp rsi, 2
 13959 00009517 7410                    	je .L_lambda_simple_env_end_056e
 13960 00009519 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13961 0000951D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13962 00009521 48FFC6                  	inc rsi
 13963 00009524 48FFC2                  	inc rdx
 13964 00009527 EBEA                    	jmp .L_lambda_simple_env_loop_056e
 13965                                  .L_lambda_simple_env_end_056e:
 13966 00009529 5B                      	pop rbx
 13967 0000952A BE00000000              	mov rsi, 0
 13968                                  .L_lambda_simple_params_loop_056e:	; copy params
 13969 0000952F 4883FE03                	cmp rsi, 3
 13970 00009533 740E                    	je .L_lambda_simple_params_end_056e
 13971 00009535 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13972 0000953A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13973 0000953E 48FFC6                  	inc rsi
 13974 00009541 EBEC                    	jmp .L_lambda_simple_params_loop_056e
 13975                                  .L_lambda_simple_params_end_056e:
 13976 00009543 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13977 00009546 4889C3                  	mov rbx, rax
 13978 00009549 58                      	pop rax
 13979 0000954A C60004                  	mov byte [rax], T_closure
 13980 0000954D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13981 00009551 48C74009[5E950000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_056e
 13982 00009559 E9F8070000              	jmp .L_lambda_simple_end_056e
 13983                                  .L_lambda_simple_code_056e:	; lambda-simple body
 13984 0000955E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13985 00009564 740B                    	je .L_lambda_simple_arity_check_ok_056e
 13986 00009566 FF742410                	push qword [rsp + 8 * 2]
 13987 0000956A 6A02                    	push 2
 13988 0000956C E970C10000              	jmp L_error_incorrect_arity_simple
 13989                                  .L_lambda_simple_arity_check_ok_056e:
 13990 00009571 C8000000                	enter 0, 0
 13991 00009575 488B4520                	mov rax, PARAM(0)	; param a
 13992 00009579 50                      	push rax
 13993 0000957A 6A01                    	push 1	; arg count
 13994 0000957C 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 13995 00009584 803805                  	cmp byte [rax], T_undefined
 13996 00009587 0F846EC00000            	je L_error_fvar_undefined
 13997 0000958D 803804                  	cmp byte [rax], T_closure
 13998 00009590 0F85E9C00000            	jne L_error_non_closure
 13999 00009596 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14000 00009599 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14001                                  
 14002 0000959C 483D[02000000]          	cmp rax, sob_boolean_false
 14003 000095A2 0F8451020000            	je .L_if_else_040f
 14004 000095A8 488B4528                	mov rax, PARAM(1)	; param b
 14005 000095AC 50                      	push rax
 14006 000095AD 6A01                    	push 1	; arg count
 14007 000095AF 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 14008 000095B7 803805                  	cmp byte [rax], T_undefined
 14009 000095BA 0F843BC00000            	je L_error_fvar_undefined
 14010 000095C0 803804                  	cmp byte [rax], T_closure
 14011 000095C3 0F85B6C00000            	jne L_error_non_closure
 14012 000095C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14013 000095CC FF5009                  	call SOB_CLOSURE_CODE(rax)
 14014                                  
 14015 000095CF 483D[02000000]          	cmp rax, sob_boolean_false
 14016 000095D5 7460                    	je .L_if_else_0410
 14017                                  	; preparing a tail-call
 14018 000095D7 488B4528                	mov rax, PARAM(1)	; param b
 14019 000095DB 50                      	push rax
 14020 000095DC 488B4520                	mov rax, PARAM(0)	; param a
 14021 000095E0 50                      	push rax
 14022 000095E1 6A02                    	push 2	; arg count
 14023 000095E3 488B4510                	mov rax, ENV
 14024 000095E7 488B00                  	mov rax, qword [rax + 8 * 0]
 14025 000095EA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator-zz
 14026 000095ED 803804                  	cmp byte [rax], T_closure
 14027 000095F0 0F8589C00000            	jne L_error_non_closure
 14028 000095F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14029                                  
 14030                                  	; recycling the current frame
 14031 000095F9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14032 000095FC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14033 000095FF B906000000              	mov rcx, 2 + 4
 14034 00009604 488B5D18                	mov rbx, COUNT
 14035 00009608 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14036 0000960D 488D55F8                	lea rdx, [rbp - 8 * 1]
 14037                                  .L_tc_recycle_frame_loop_073c:
 14038 00009611 4883F900                	cmp rcx, 0
 14039 00009615 7413                    	je .L_tc_recycle_frame_done_073c
 14040 00009617 488B32                  	mov rsi, qword [rdx]
 14041 0000961A 488933                  	mov qword [rbx], rsi
 14042 0000961D 48FFC9                  	dec rcx
 14043 00009620 4883EB08                	sub rbx, 8 * 1
 14044 00009624 4883EA08                	sub rdx, 8 * 1
 14045 00009628 EBE7                    	jmp .L_tc_recycle_frame_loop_073c
 14046                                  .L_tc_recycle_frame_done_073c:
 14047 0000962A 488D6308                	lea rsp, [rbx + 8 * 1]
 14048 0000962E 5D                      	pop rbp	; the proc will restore it!
 14049 0000962F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14050                                  
 14051 00009632 E9BD010000              	jmp .L_if_end_0410
 14052                                  
 14053                                  	.L_if_else_0410:
 14054 00009637 488B4528                	mov rax, PARAM(1)	; param b
 14055 0000963B 50                      	push rax
 14056 0000963C 6A01                    	push 1	; arg count
 14057 0000963E 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14058 00009646 803805                  	cmp byte [rax], T_undefined
 14059 00009649 0F84ACBF0000            	je L_error_fvar_undefined
 14060 0000964F 803804                  	cmp byte [rax], T_closure
 14061 00009652 0F8527C00000            	jne L_error_non_closure
 14062 00009658 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14063 0000965B FF5009                  	call SOB_CLOSURE_CODE(rax)
 14064                                  
 14065 0000965E 483D[02000000]          	cmp rax, sob_boolean_false
 14066 00009664 0F8484000000            	je .L_if_else_0411
 14067                                  	; preparing a tail-call
 14068 0000966A 488B4528                	mov rax, PARAM(1)	; param b
 14069 0000966E 50                      	push rax
 14070 0000966F 488B4520                	mov rax, PARAM(0)	; param a
 14071 00009673 50                      	push rax
 14072 00009674 6A01                    	push 1	; arg count
 14073 00009676 488B0425[EA110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 14074 0000967E 803805                  	cmp byte [rax], T_undefined
 14075 00009681 0F8474BF0000            	je L_error_fvar_undefined
 14076 00009687 803804                  	cmp byte [rax], T_closure
 14077 0000968A 0F85EFBF0000            	jne L_error_non_closure
 14078 00009690 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14079 00009693 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14080 00009696 50                      	push rax
 14081 00009697 6A02                    	push 2	; arg count
 14082 00009699 488B4510                	mov rax, ENV
 14083 0000969D 488B00                  	mov rax, qword [rax + 8 * 0]
 14084 000096A0 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14085 000096A4 803804                  	cmp byte [rax], T_closure
 14086 000096A7 0F85D2BF0000            	jne L_error_non_closure
 14087 000096AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 14088                                  
 14089                                  	; recycling the current frame
 14090 000096B0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14091 000096B3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14092 000096B6 B906000000              	mov rcx, 2 + 4
 14093 000096BB 488B5D18                	mov rbx, COUNT
 14094 000096BF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14095 000096C4 488D55F8                	lea rdx, [rbp - 8 * 1]
 14096                                  .L_tc_recycle_frame_loop_073d:
 14097 000096C8 4883F900                	cmp rcx, 0
 14098 000096CC 7413                    	je .L_tc_recycle_frame_done_073d
 14099 000096CE 488B32                  	mov rsi, qword [rdx]
 14100 000096D1 488933                  	mov qword [rbx], rsi
 14101 000096D4 48FFC9                  	dec rcx
 14102 000096D7 4883EB08                	sub rbx, 8 * 1
 14103 000096DB 4883EA08                	sub rdx, 8 * 1
 14104 000096DF EBE7                    	jmp .L_tc_recycle_frame_loop_073d
 14105                                  .L_tc_recycle_frame_done_073d:
 14106 000096E1 488D6308                	lea rsp, [rbx + 8 * 1]
 14107 000096E5 5D                      	pop rbp	; the proc will restore it!
 14108 000096E6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14109                                  
 14110 000096E9 E906010000              	jmp .L_if_end_0411
 14111                                  
 14112                                  	.L_if_else_0411:
 14113 000096EE 488B4528                	mov rax, PARAM(1)	; param b
 14114 000096F2 50                      	push rax
 14115 000096F3 6A01                    	push 1	; arg count
 14116 000096F5 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 14117 000096FD 803805                  	cmp byte [rax], T_undefined
 14118 00009700 0F84F5BE0000            	je L_error_fvar_undefined
 14119 00009706 803804                  	cmp byte [rax], T_closure
 14120 00009709 0F8570BF0000            	jne L_error_non_closure
 14121 0000970F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14122 00009712 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14123                                  
 14124 00009715 483D[02000000]          	cmp rax, sob_boolean_false
 14125 0000971B 0F8481000000            	je .L_if_else_0412
 14126                                  	; preparing a tail-call
 14127 00009721 488B4528                	mov rax, PARAM(1)	; param b
 14128 00009725 50                      	push rax
 14129 00009726 488B4520                	mov rax, PARAM(0)	; param a
 14130 0000972A 50                      	push rax
 14131 0000972B 6A01                    	push 1	; arg count
 14132 0000972D 488B0425[420F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 14133 00009735 803805                  	cmp byte [rax], T_undefined
 14134 00009738 0F84BDBE0000            	je L_error_fvar_undefined
 14135 0000973E 803804                  	cmp byte [rax], T_closure
 14136 00009741 0F8538BF0000            	jne L_error_non_closure
 14137 00009747 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14138 0000974A FF5009                  	call SOB_CLOSURE_CODE(rax)
 14139 0000974D 50                      	push rax
 14140 0000974E 6A02                    	push 2	; arg count
 14141 00009750 488B4510                	mov rax, ENV
 14142 00009754 488B00                  	mov rax, qword [rax + 8 * 0]
 14143 00009757 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14144 0000975B 803804                  	cmp byte [rax], T_closure
 14145 0000975E 0F851BBF0000            	jne L_error_non_closure
 14146 00009764 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14147                                  
 14148                                  	; recycling the current frame
 14149 00009767 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14150 0000976A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14151 0000976D B906000000              	mov rcx, 2 + 4
 14152 00009772 488B5D18                	mov rbx, COUNT
 14153 00009776 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14154 0000977B 488D55F8                	lea rdx, [rbp - 8 * 1]
 14155                                  .L_tc_recycle_frame_loop_073e:
 14156 0000977F 4883F900                	cmp rcx, 0
 14157 00009783 7413                    	je .L_tc_recycle_frame_done_073e
 14158 00009785 488B32                  	mov rsi, qword [rdx]
 14159 00009788 488933                  	mov qword [rbx], rsi
 14160 0000978B 48FFC9                  	dec rcx
 14161 0000978E 4883EB08                	sub rbx, 8 * 1
 14162 00009792 4883EA08                	sub rdx, 8 * 1
 14163 00009796 EBE7                    	jmp .L_tc_recycle_frame_loop_073e
 14164                                  .L_tc_recycle_frame_done_073e:
 14165 00009798 488D6308                	lea rsp, [rbx + 8 * 1]
 14166 0000979C 5D                      	pop rbp	; the proc will restore it!
 14167 0000979D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14168                                  
 14169 000097A0 EB52                    	jmp .L_if_end_0412
 14170                                  
 14171                                  	.L_if_else_0412:
 14172                                  	; preparing a tail-call
 14173 000097A2 6A00                    	push 0	; arg count
 14174 000097A4 488B4510                	mov rax, ENV
 14175 000097A8 488B4008                	mov rax, qword [rax + 8 * 1]
 14176 000097AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14177 000097AF 803804                  	cmp byte [rax], T_closure
 14178 000097B2 0F85C7BE0000            	jne L_error_non_closure
 14179 000097B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14180                                  
 14181                                  	; recycling the current frame
 14182 000097BB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14183 000097BE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14184 000097C1 B904000000              	mov rcx, 0 + 4
 14185 000097C6 488B5D18                	mov rbx, COUNT
 14186 000097CA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14187 000097CF 488D55F8                	lea rdx, [rbp - 8 * 1]
 14188                                  .L_tc_recycle_frame_loop_073f:
 14189 000097D3 4883F900                	cmp rcx, 0
 14190 000097D7 7413                    	je .L_tc_recycle_frame_done_073f
 14191 000097D9 488B32                  	mov rsi, qword [rdx]
 14192 000097DC 488933                  	mov qword [rbx], rsi
 14193 000097DF 48FFC9                  	dec rcx
 14194 000097E2 4883EB08                	sub rbx, 8 * 1
 14195 000097E6 4883EA08                	sub rdx, 8 * 1
 14196 000097EA EBE7                    	jmp .L_tc_recycle_frame_loop_073f
 14197                                  .L_tc_recycle_frame_done_073f:
 14198 000097EC 488D6308                	lea rsp, [rbx + 8 * 1]
 14199 000097F0 5D                      	pop rbp	; the proc will restore it!
 14200 000097F1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14201                                  
 14202                                  	.L_if_end_0412:
 14203                                  
 14204                                  	.L_if_end_0411:
 14205                                  
 14206                                  	.L_if_end_0410:
 14207                                  
 14208 000097F4 E959050000              	jmp .L_if_end_040f
 14209                                  
 14210                                  	.L_if_else_040f:
 14211 000097F9 488B4520                	mov rax, PARAM(0)	; param a
 14212 000097FD 50                      	push rax
 14213 000097FE 6A01                    	push 1	; arg count
 14214 00009800 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14215 00009808 803805                  	cmp byte [rax], T_undefined
 14216 0000980B 0F84EABD0000            	je L_error_fvar_undefined
 14217 00009811 803804                  	cmp byte [rax], T_closure
 14218 00009814 0F8565BE0000            	jne L_error_non_closure
 14219 0000981A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14220 0000981D FF5009                  	call SOB_CLOSURE_CODE(rax)
 14221                                  
 14222 00009820 483D[02000000]          	cmp rax, sob_boolean_false
 14223 00009826 0F8452020000            	je .L_if_else_0413
 14224 0000982C 488B4528                	mov rax, PARAM(1)	; param b
 14225 00009830 50                      	push rax
 14226 00009831 6A01                    	push 1	; arg count
 14227 00009833 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 14228 0000983B 803805                  	cmp byte [rax], T_undefined
 14229 0000983E 0F84B7BD0000            	je L_error_fvar_undefined
 14230 00009844 803804                  	cmp byte [rax], T_closure
 14231 00009847 0F8532BE0000            	jne L_error_non_closure
 14232 0000984D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14233 00009850 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14234                                  
 14235 00009853 483D[02000000]          	cmp rax, sob_boolean_false
 14236 00009859 0F8484000000            	je .L_if_else_0414
 14237                                  	; preparing a tail-call
 14238 0000985F 488B4528                	mov rax, PARAM(1)	; param b
 14239 00009863 50                      	push rax
 14240 00009864 6A01                    	push 1	; arg count
 14241 00009866 488B0425[EA110000]      	mov rax, qword [free_var_62]	; free var __integer-to-fraction
 14242 0000986E 803805                  	cmp byte [rax], T_undefined
 14243 00009871 0F8484BD0000            	je L_error_fvar_undefined
 14244 00009877 803804                  	cmp byte [rax], T_closure
 14245 0000987A 0F85FFBD0000            	jne L_error_non_closure
 14246 00009880 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14247 00009883 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14248 00009886 50                      	push rax
 14249 00009887 488B4520                	mov rax, PARAM(0)	; param a
 14250 0000988B 50                      	push rax
 14251 0000988C 6A02                    	push 2	; arg count
 14252 0000988E 488B4510                	mov rax, ENV
 14253 00009892 488B00                  	mov rax, qword [rax + 8 * 0]
 14254 00009895 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14255 00009899 803804                  	cmp byte [rax], T_closure
 14256 0000989C 0F85DDBD0000            	jne L_error_non_closure
 14257 000098A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14258                                  
 14259                                  	; recycling the current frame
 14260 000098A5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14261 000098A8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14262 000098AB B906000000              	mov rcx, 2 + 4
 14263 000098B0 488B5D18                	mov rbx, COUNT
 14264 000098B4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14265 000098B9 488D55F8                	lea rdx, [rbp - 8 * 1]
 14266                                  .L_tc_recycle_frame_loop_0740:
 14267 000098BD 4883F900                	cmp rcx, 0
 14268 000098C1 7413                    	je .L_tc_recycle_frame_done_0740
 14269 000098C3 488B32                  	mov rsi, qword [rdx]
 14270 000098C6 488933                  	mov qword [rbx], rsi
 14271 000098C9 48FFC9                  	dec rcx
 14272 000098CC 4883EB08                	sub rbx, 8 * 1
 14273 000098D0 4883EA08                	sub rdx, 8 * 1
 14274 000098D4 EBE7                    	jmp .L_tc_recycle_frame_loop_0740
 14275                                  .L_tc_recycle_frame_done_0740:
 14276 000098D6 488D6308                	lea rsp, [rbx + 8 * 1]
 14277 000098DA 5D                      	pop rbp	; the proc will restore it!
 14278 000098DB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14279                                  
 14280 000098DE E996010000              	jmp .L_if_end_0414
 14281                                  
 14282                                  	.L_if_else_0414:
 14283 000098E3 488B4528                	mov rax, PARAM(1)	; param b
 14284 000098E7 50                      	push rax
 14285 000098E8 6A01                    	push 1	; arg count
 14286 000098EA 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14287 000098F2 803805                  	cmp byte [rax], T_undefined
 14288 000098F5 0F8400BD0000            	je L_error_fvar_undefined
 14289 000098FB 803804                  	cmp byte [rax], T_closure
 14290 000098FE 0F857BBD0000            	jne L_error_non_closure
 14291 00009904 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14292 00009907 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14293                                  
 14294 0000990A 483D[02000000]          	cmp rax, sob_boolean_false
 14295 00009910 7461                    	je .L_if_else_0415
 14296                                  	; preparing a tail-call
 14297 00009912 488B4528                	mov rax, PARAM(1)	; param b
 14298 00009916 50                      	push rax
 14299 00009917 488B4520                	mov rax, PARAM(0)	; param a
 14300 0000991B 50                      	push rax
 14301 0000991C 6A02                    	push 2	; arg count
 14302 0000991E 488B4510                	mov rax, ENV
 14303 00009922 488B00                  	mov rax, qword [rax + 8 * 0]
 14304 00009925 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 14305 00009929 803804                  	cmp byte [rax], T_closure
 14306 0000992C 0F854DBD0000            	jne L_error_non_closure
 14307 00009932 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14308                                  
 14309                                  	; recycling the current frame
 14310 00009935 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14311 00009938 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14312 0000993B B906000000              	mov rcx, 2 + 4
 14313 00009940 488B5D18                	mov rbx, COUNT
 14314 00009944 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14315 00009949 488D55F8                	lea rdx, [rbp - 8 * 1]
 14316                                  .L_tc_recycle_frame_loop_0741:
 14317 0000994D 4883F900                	cmp rcx, 0
 14318 00009951 7413                    	je .L_tc_recycle_frame_done_0741
 14319 00009953 488B32                  	mov rsi, qword [rdx]
 14320 00009956 488933                  	mov qword [rbx], rsi
 14321 00009959 48FFC9                  	dec rcx
 14322 0000995C 4883EB08                	sub rbx, 8 * 1
 14323 00009960 4883EA08                	sub rdx, 8 * 1
 14324 00009964 EBE7                    	jmp .L_tc_recycle_frame_loop_0741
 14325                                  .L_tc_recycle_frame_done_0741:
 14326 00009966 488D6308                	lea rsp, [rbx + 8 * 1]
 14327 0000996A 5D                      	pop rbp	; the proc will restore it!
 14328 0000996B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14329                                  
 14330 0000996E E906010000              	jmp .L_if_end_0415
 14331                                  
 14332                                  	.L_if_else_0415:
 14333 00009973 488B4528                	mov rax, PARAM(1)	; param b
 14334 00009977 50                      	push rax
 14335 00009978 6A01                    	push 1	; arg count
 14336 0000997A 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 14337 00009982 803805                  	cmp byte [rax], T_undefined
 14338 00009985 0F8470BC0000            	je L_error_fvar_undefined
 14339 0000998B 803804                  	cmp byte [rax], T_closure
 14340 0000998E 0F85EBBC0000            	jne L_error_non_closure
 14341 00009994 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14342 00009997 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14343                                  
 14344 0000999A 483D[02000000]          	cmp rax, sob_boolean_false
 14345 000099A0 0F8481000000            	je .L_if_else_0416
 14346                                  	; preparing a tail-call
 14347 000099A6 488B4528                	mov rax, PARAM(1)	; param b
 14348 000099AA 50                      	push rax
 14349 000099AB 488B4520                	mov rax, PARAM(0)	; param a
 14350 000099AF 50                      	push rax
 14351 000099B0 6A01                    	push 1	; arg count
 14352 000099B2 488B0425[530F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 14353 000099BA 803805                  	cmp byte [rax], T_undefined
 14354 000099BD 0F8438BC0000            	je L_error_fvar_undefined
 14355 000099C3 803804                  	cmp byte [rax], T_closure
 14356 000099C6 0F85B3BC0000            	jne L_error_non_closure
 14357 000099CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 14358 000099CF FF5009                  	call SOB_CLOSURE_CODE(rax)
 14359 000099D2 50                      	push rax
 14360 000099D3 6A02                    	push 2	; arg count
 14361 000099D5 488B4510                	mov rax, ENV
 14362 000099D9 488B00                  	mov rax, qword [rax + 8 * 0]
 14363 000099DC 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14364 000099E0 803804                  	cmp byte [rax], T_closure
 14365 000099E3 0F8596BC0000            	jne L_error_non_closure
 14366 000099E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14367                                  
 14368                                  	; recycling the current frame
 14369 000099EC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14370 000099EF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14371 000099F2 B906000000              	mov rcx, 2 + 4
 14372 000099F7 488B5D18                	mov rbx, COUNT
 14373 000099FB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14374 00009A00 488D55F8                	lea rdx, [rbp - 8 * 1]
 14375                                  .L_tc_recycle_frame_loop_0742:
 14376 00009A04 4883F900                	cmp rcx, 0
 14377 00009A08 7413                    	je .L_tc_recycle_frame_done_0742
 14378 00009A0A 488B32                  	mov rsi, qword [rdx]
 14379 00009A0D 488933                  	mov qword [rbx], rsi
 14380 00009A10 48FFC9                  	dec rcx
 14381 00009A13 4883EB08                	sub rbx, 8 * 1
 14382 00009A17 4883EA08                	sub rdx, 8 * 1
 14383 00009A1B EBE7                    	jmp .L_tc_recycle_frame_loop_0742
 14384                                  .L_tc_recycle_frame_done_0742:
 14385 00009A1D 488D6308                	lea rsp, [rbx + 8 * 1]
 14386 00009A21 5D                      	pop rbp	; the proc will restore it!
 14387 00009A22 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14388                                  
 14389 00009A25 EB52                    	jmp .L_if_end_0416
 14390                                  
 14391                                  	.L_if_else_0416:
 14392                                  	; preparing a tail-call
 14393 00009A27 6A00                    	push 0	; arg count
 14394 00009A29 488B4510                	mov rax, ENV
 14395 00009A2D 488B4008                	mov rax, qword [rax + 8 * 1]
 14396 00009A31 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14397 00009A34 803804                  	cmp byte [rax], T_closure
 14398 00009A37 0F8542BC0000            	jne L_error_non_closure
 14399 00009A3D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14400                                  
 14401                                  	; recycling the current frame
 14402 00009A40 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14403 00009A43 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14404 00009A46 B904000000              	mov rcx, 0 + 4
 14405 00009A4B 488B5D18                	mov rbx, COUNT
 14406 00009A4F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14407 00009A54 488D55F8                	lea rdx, [rbp - 8 * 1]
 14408                                  .L_tc_recycle_frame_loop_0743:
 14409 00009A58 4883F900                	cmp rcx, 0
 14410 00009A5C 7413                    	je .L_tc_recycle_frame_done_0743
 14411 00009A5E 488B32                  	mov rsi, qword [rdx]
 14412 00009A61 488933                  	mov qword [rbx], rsi
 14413 00009A64 48FFC9                  	dec rcx
 14414 00009A67 4883EB08                	sub rbx, 8 * 1
 14415 00009A6B 4883EA08                	sub rdx, 8 * 1
 14416 00009A6F EBE7                    	jmp .L_tc_recycle_frame_loop_0743
 14417                                  .L_tc_recycle_frame_done_0743:
 14418 00009A71 488D6308                	lea rsp, [rbx + 8 * 1]
 14419 00009A75 5D                      	pop rbp	; the proc will restore it!
 14420 00009A76 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14421                                  
 14422                                  	.L_if_end_0416:
 14423                                  
 14424                                  	.L_if_end_0415:
 14425                                  
 14426                                  	.L_if_end_0414:
 14427                                  
 14428 00009A79 E9D4020000              	jmp .L_if_end_0413
 14429                                  
 14430                                  	.L_if_else_0413:
 14431 00009A7E 488B4520                	mov rax, PARAM(0)	; param a
 14432 00009A82 50                      	push rax
 14433 00009A83 6A01                    	push 1	; arg count
 14434 00009A85 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 14435 00009A8D 803805                  	cmp byte [rax], T_undefined
 14436 00009A90 0F8465BB0000            	je L_error_fvar_undefined
 14437 00009A96 803804                  	cmp byte [rax], T_closure
 14438 00009A99 0F85E0BB0000            	jne L_error_non_closure
 14439 00009A9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14440 00009AA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14441                                  
 14442 00009AA5 483D[02000000]          	cmp rax, sob_boolean_false
 14443 00009AAB 0F844F020000            	je .L_if_else_0417
 14444 00009AB1 488B4528                	mov rax, PARAM(1)	; param b
 14445 00009AB5 50                      	push rax
 14446 00009AB6 6A01                    	push 1	; arg count
 14447 00009AB8 488B0425[A80F0000]      	mov rax, qword [free_var_28]	; free var integer?
 14448 00009AC0 803805                  	cmp byte [rax], T_undefined
 14449 00009AC3 0F8432BB0000            	je L_error_fvar_undefined
 14450 00009AC9 803804                  	cmp byte [rax], T_closure
 14451 00009ACC 0F85ADBB0000            	jne L_error_non_closure
 14452 00009AD2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14453 00009AD5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14454                                  
 14455 00009AD8 483D[02000000]          	cmp rax, sob_boolean_false
 14456 00009ADE 0F8484000000            	je .L_if_else_0418
 14457                                  	; preparing a tail-call
 14458 00009AE4 488B4528                	mov rax, PARAM(1)	; param b
 14459 00009AE8 50                      	push rax
 14460 00009AE9 6A01                    	push 1	; arg count
 14461 00009AEB 488B0425[420F0000]      	mov rax, qword [free_var_22]	; free var integer->real
 14462 00009AF3 803805                  	cmp byte [rax], T_undefined
 14463 00009AF6 0F84FFBA0000            	je L_error_fvar_undefined
 14464 00009AFC 803804                  	cmp byte [rax], T_closure
 14465 00009AFF 0F857ABB0000            	jne L_error_non_closure
 14466 00009B05 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14467 00009B08 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14468 00009B0B 50                      	push rax
 14469 00009B0C 488B4520                	mov rax, PARAM(0)	; param a
 14470 00009B10 50                      	push rax
 14471 00009B11 6A02                    	push 2	; arg count
 14472 00009B13 488B4510                	mov rax, ENV
 14473 00009B17 488B00                  	mov rax, qword [rax + 8 * 0]
 14474 00009B1A 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14475 00009B1E 803804                  	cmp byte [rax], T_closure
 14476 00009B21 0F8558BB0000            	jne L_error_non_closure
 14477 00009B27 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14478                                  
 14479                                  	; recycling the current frame
 14480 00009B2A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14481 00009B2D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14482 00009B30 B906000000              	mov rcx, 2 + 4
 14483 00009B35 488B5D18                	mov rbx, COUNT
 14484 00009B39 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14485 00009B3E 488D55F8                	lea rdx, [rbp - 8 * 1]
 14486                                  .L_tc_recycle_frame_loop_0744:
 14487 00009B42 4883F900                	cmp rcx, 0
 14488 00009B46 7413                    	je .L_tc_recycle_frame_done_0744
 14489 00009B48 488B32                  	mov rsi, qword [rdx]
 14490 00009B4B 488933                  	mov qword [rbx], rsi
 14491 00009B4E 48FFC9                  	dec rcx
 14492 00009B51 4883EB08                	sub rbx, 8 * 1
 14493 00009B55 4883EA08                	sub rdx, 8 * 1
 14494 00009B59 EBE7                    	jmp .L_tc_recycle_frame_loop_0744
 14495                                  .L_tc_recycle_frame_done_0744:
 14496 00009B5B 488D6308                	lea rsp, [rbx + 8 * 1]
 14497 00009B5F 5D                      	pop rbp	; the proc will restore it!
 14498 00009B60 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14499                                  
 14500 00009B63 E996010000              	jmp .L_if_end_0418
 14501                                  
 14502                                  	.L_if_else_0418:
 14503 00009B68 488B4528                	mov rax, PARAM(1)	; param b
 14504 00009B6C 50                      	push rax
 14505 00009B6D 6A01                    	push 1	; arg count
 14506 00009B6F 488B0425[650E0000]      	mov rax, qword [free_var_9]	; free var fraction?
 14507 00009B77 803805                  	cmp byte [rax], T_undefined
 14508 00009B7A 0F847BBA0000            	je L_error_fvar_undefined
 14509 00009B80 803804                  	cmp byte [rax], T_closure
 14510 00009B83 0F85F6BA0000            	jne L_error_non_closure
 14511 00009B89 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14512 00009B8C FF5009                  	call SOB_CLOSURE_CODE(rax)
 14513                                  
 14514 00009B8F 483D[02000000]          	cmp rax, sob_boolean_false
 14515 00009B95 0F8484000000            	je .L_if_else_0419
 14516                                  	; preparing a tail-call
 14517 00009B9B 488B4528                	mov rax, PARAM(1)	; param b
 14518 00009B9F 50                      	push rax
 14519 00009BA0 6A01                    	push 1	; arg count
 14520 00009BA2 488B0425[530F0000]      	mov rax, qword [free_var_23]	; free var fraction->real
 14521 00009BAA 803805                  	cmp byte [rax], T_undefined
 14522 00009BAD 0F8448BA0000            	je L_error_fvar_undefined
 14523 00009BB3 803804                  	cmp byte [rax], T_closure
 14524 00009BB6 0F85C3BA0000            	jne L_error_non_closure
 14525 00009BBC FF7001                  	push SOB_CLOSURE_ENV(rax)
 14526 00009BBF FF5009                  	call SOB_CLOSURE_CODE(rax)
 14527 00009BC2 50                      	push rax
 14528 00009BC3 488B4520                	mov rax, PARAM(0)	; param a
 14529 00009BC7 50                      	push rax
 14530 00009BC8 6A02                    	push 2	; arg count
 14531 00009BCA 488B4510                	mov rax, ENV
 14532 00009BCE 488B00                  	mov rax, qword [rax + 8 * 0]
 14533 00009BD1 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14534 00009BD5 803804                  	cmp byte [rax], T_closure
 14535 00009BD8 0F85A1BA0000            	jne L_error_non_closure
 14536 00009BDE FF7001                  	push SOB_CLOSURE_ENV(rax)
 14537                                  
 14538                                  	; recycling the current frame
 14539 00009BE1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14540 00009BE4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14541 00009BE7 B906000000              	mov rcx, 2 + 4
 14542 00009BEC 488B5D18                	mov rbx, COUNT
 14543 00009BF0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14544 00009BF5 488D55F8                	lea rdx, [rbp - 8 * 1]
 14545                                  .L_tc_recycle_frame_loop_0745:
 14546 00009BF9 4883F900                	cmp rcx, 0
 14547 00009BFD 7413                    	je .L_tc_recycle_frame_done_0745
 14548 00009BFF 488B32                  	mov rsi, qword [rdx]
 14549 00009C02 488933                  	mov qword [rbx], rsi
 14550 00009C05 48FFC9                  	dec rcx
 14551 00009C08 4883EB08                	sub rbx, 8 * 1
 14552 00009C0C 4883EA08                	sub rdx, 8 * 1
 14553 00009C10 EBE7                    	jmp .L_tc_recycle_frame_loop_0745
 14554                                  .L_tc_recycle_frame_done_0745:
 14555 00009C12 488D6308                	lea rsp, [rbx + 8 * 1]
 14556 00009C16 5D                      	pop rbp	; the proc will restore it!
 14557 00009C17 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14558                                  
 14559 00009C1A E9DF000000              	jmp .L_if_end_0419
 14560                                  
 14561                                  	.L_if_else_0419:
 14562 00009C1F 488B4528                	mov rax, PARAM(1)	; param b
 14563 00009C23 50                      	push rax
 14564 00009C24 6A01                    	push 1	; arg count
 14565 00009C26 488B0425[540E0000]      	mov rax, qword [free_var_8]	; free var real?
 14566 00009C2E 803805                  	cmp byte [rax], T_undefined
 14567 00009C31 0F84C4B90000            	je L_error_fvar_undefined
 14568 00009C37 803804                  	cmp byte [rax], T_closure
 14569 00009C3A 0F853FBA0000            	jne L_error_non_closure
 14570 00009C40 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14571 00009C43 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14572                                  
 14573 00009C46 483D[02000000]          	cmp rax, sob_boolean_false
 14574 00009C4C 745E                    	je .L_if_else_041a
 14575                                  	; preparing a tail-call
 14576 00009C4E 488B4528                	mov rax, PARAM(1)	; param b
 14577 00009C52 50                      	push rax
 14578 00009C53 488B4520                	mov rax, PARAM(0)	; param a
 14579 00009C57 50                      	push rax
 14580 00009C58 6A02                    	push 2	; arg count
 14581 00009C5A 488B4510                	mov rax, ENV
 14582 00009C5E 488B00                  	mov rax, qword [rax + 8 * 0]
 14583 00009C61 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 14584 00009C65 803804                  	cmp byte [rax], T_closure
 14585 00009C68 0F8511BA0000            	jne L_error_non_closure
 14586 00009C6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 14587                                  
 14588                                  	; recycling the current frame
 14589 00009C71 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14590 00009C74 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14591 00009C77 B906000000              	mov rcx, 2 + 4
 14592 00009C7C 488B5D18                	mov rbx, COUNT
 14593 00009C80 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14594 00009C85 488D55F8                	lea rdx, [rbp - 8 * 1]
 14595                                  .L_tc_recycle_frame_loop_0746:
 14596 00009C89 4883F900                	cmp rcx, 0
 14597 00009C8D 7413                    	je .L_tc_recycle_frame_done_0746
 14598 00009C8F 488B32                  	mov rsi, qword [rdx]
 14599 00009C92 488933                  	mov qword [rbx], rsi
 14600 00009C95 48FFC9                  	dec rcx
 14601 00009C98 4883EB08                	sub rbx, 8 * 1
 14602 00009C9C 4883EA08                	sub rdx, 8 * 1
 14603 00009CA0 EBE7                    	jmp .L_tc_recycle_frame_loop_0746
 14604                                  .L_tc_recycle_frame_done_0746:
 14605 00009CA2 488D6308                	lea rsp, [rbx + 8 * 1]
 14606 00009CA6 5D                      	pop rbp	; the proc will restore it!
 14607 00009CA7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14608                                  
 14609 00009CAA EB52                    	jmp .L_if_end_041a
 14610                                  
 14611                                  	.L_if_else_041a:
 14612                                  	; preparing a tail-call
 14613 00009CAC 6A00                    	push 0	; arg count
 14614 00009CAE 488B4510                	mov rax, ENV
 14615 00009CB2 488B4008                	mov rax, qword [rax + 8 * 1]
 14616 00009CB6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14617 00009CB9 803804                  	cmp byte [rax], T_closure
 14618 00009CBC 0F85BDB90000            	jne L_error_non_closure
 14619 00009CC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14620                                  
 14621                                  	; recycling the current frame
 14622 00009CC5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14623 00009CC8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14624 00009CCB B904000000              	mov rcx, 0 + 4
 14625 00009CD0 488B5D18                	mov rbx, COUNT
 14626 00009CD4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14627 00009CD9 488D55F8                	lea rdx, [rbp - 8 * 1]
 14628                                  .L_tc_recycle_frame_loop_0747:
 14629 00009CDD 4883F900                	cmp rcx, 0
 14630 00009CE1 7413                    	je .L_tc_recycle_frame_done_0747
 14631 00009CE3 488B32                  	mov rsi, qword [rdx]
 14632 00009CE6 488933                  	mov qword [rbx], rsi
 14633 00009CE9 48FFC9                  	dec rcx
 14634 00009CEC 4883EB08                	sub rbx, 8 * 1
 14635 00009CF0 4883EA08                	sub rdx, 8 * 1
 14636 00009CF4 EBE7                    	jmp .L_tc_recycle_frame_loop_0747
 14637                                  .L_tc_recycle_frame_done_0747:
 14638 00009CF6 488D6308                	lea rsp, [rbx + 8 * 1]
 14639 00009CFA 5D                      	pop rbp	; the proc will restore it!
 14640 00009CFB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14641                                  
 14642                                  	.L_if_end_041a:
 14643                                  
 14644                                  	.L_if_end_0419:
 14645                                  
 14646                                  	.L_if_end_0418:
 14647                                  
 14648 00009CFE EB52                    	jmp .L_if_end_0417
 14649                                  
 14650                                  	.L_if_else_0417:
 14651                                  	; preparing a tail-call
 14652 00009D00 6A00                    	push 0	; arg count
 14653 00009D02 488B4510                	mov rax, ENV
 14654 00009D06 488B4008                	mov rax, qword [rax + 8 * 1]
 14655 00009D0A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 14656 00009D0D 803804                  	cmp byte [rax], T_closure
 14657 00009D10 0F8569B90000            	jne L_error_non_closure
 14658 00009D16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14659                                  
 14660                                  	; recycling the current frame
 14661 00009D19 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14662 00009D1C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14663 00009D1F B904000000              	mov rcx, 0 + 4
 14664 00009D24 488B5D18                	mov rbx, COUNT
 14665 00009D28 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14666 00009D2D 488D55F8                	lea rdx, [rbp - 8 * 1]
 14667                                  .L_tc_recycle_frame_loop_0748:
 14668 00009D31 4883F900                	cmp rcx, 0
 14669 00009D35 7413                    	je .L_tc_recycle_frame_done_0748
 14670 00009D37 488B32                  	mov rsi, qword [rdx]
 14671 00009D3A 488933                  	mov qword [rbx], rsi
 14672 00009D3D 48FFC9                  	dec rcx
 14673 00009D40 4883EB08                	sub rbx, 8 * 1
 14674 00009D44 4883EA08                	sub rdx, 8 * 1
 14675 00009D48 EBE7                    	jmp .L_tc_recycle_frame_loop_0748
 14676                                  .L_tc_recycle_frame_done_0748:
 14677 00009D4A 488D6308                	lea rsp, [rbx + 8 * 1]
 14678 00009D4E 5D                      	pop rbp	; the proc will restore it!
 14679 00009D4F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14680                                  
 14681                                  	.L_if_end_0417:
 14682                                  
 14683                                  	.L_if_end_0413:
 14684                                  
 14685                                  	.L_if_end_040f:
 14686 00009D52 C9                      	leave
 14687 00009D53 C22000                  	ret AND_KILL_FRAME(2)
 14688                                  .L_lambda_simple_end_056e:	; new closure is in rax
 14689 00009D56 C9                      	leave
 14690 00009D57 C22800                  	ret AND_KILL_FRAME(3)
 14691                                  .L_lambda_simple_end_056d:	; new closure is in rax
 14692 00009D5A 50                      	push rax
 14693 00009D5B 6A01                    	push 1	; arg count
 14694 00009D5D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14695 00009D62 E8C1B90000              	call malloc
 14696 00009D67 50                      	push rax
 14697 00009D68 BF08000000              	mov rdi, 8 * 1	; new rib
 14698 00009D6D E8B6B90000              	call malloc
 14699 00009D72 50                      	push rax
 14700 00009D73 BF10000000              	mov rdi, 8 * 2	; extended env
 14701 00009D78 E8ABB90000              	call malloc
 14702 00009D7D 488B7D10                	mov rdi, ENV
 14703 00009D81 BE00000000              	mov rsi, 0
 14704 00009D86 BA01000000              	mov rdx, 1
 14705                                  .L_lambda_simple_env_loop_056f:	; ext_env[i + 1] <-- env[i]
 14706 00009D8B 4883FE01                	cmp rsi, 1
 14707 00009D8F 7410                    	je .L_lambda_simple_env_end_056f
 14708 00009D91 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14709 00009D95 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14710 00009D99 48FFC6                  	inc rsi
 14711 00009D9C 48FFC2                  	inc rdx
 14712 00009D9F EBEA                    	jmp .L_lambda_simple_env_loop_056f
 14713                                  .L_lambda_simple_env_end_056f:
 14714 00009DA1 5B                      	pop rbx
 14715 00009DA2 BE00000000              	mov rsi, 0
 14716                                  .L_lambda_simple_params_loop_056f:	; copy params
 14717 00009DA7 4883FE01                	cmp rsi, 1
 14718 00009DAB 740E                    	je .L_lambda_simple_params_end_056f
 14719 00009DAD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14720 00009DB2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14721 00009DB6 48FFC6                  	inc rsi
 14722 00009DB9 EBEC                    	jmp .L_lambda_simple_params_loop_056f
 14723                                  .L_lambda_simple_params_end_056f:
 14724 00009DBB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14725 00009DBE 4889C3                  	mov rbx, rax
 14726 00009DC1 58                      	pop rax
 14727 00009DC2 C60004                  	mov byte [rax], T_closure
 14728 00009DC5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14729 00009DC9 48C74009[D69D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_056f
 14730 00009DD1 E9440F0000              	jmp .L_lambda_simple_end_056f
 14731                                  .L_lambda_simple_code_056f:	; lambda-simple body
 14732 00009DD6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14733 00009DDC 740B                    	je .L_lambda_simple_arity_check_ok_056f
 14734 00009DDE FF742410                	push qword [rsp + 8 * 2]
 14735 00009DE2 6A01                    	push 1
 14736 00009DE4 E9F8B80000              	jmp L_error_incorrect_arity_simple
 14737                                  .L_lambda_simple_arity_check_ok_056f:
 14738 00009DE9 C8000000                	enter 0, 0
 14739                                  	; preparing a tail-call
 14740 00009DED 488B0425[A7100000]      	mov rax, qword [free_var_43]	; free var __bin-less-than-rr
 14741 00009DF5 803805                  	cmp byte [rax], T_undefined
 14742 00009DF8 0F84FDB70000            	je L_error_fvar_undefined
 14743 00009DFE 50                      	push rax
 14744 00009DFF 488B0425[B8100000]      	mov rax, qword [free_var_44]	; free var __bin-less-than-qq
 14745 00009E07 803805                  	cmp byte [rax], T_undefined
 14746 00009E0A 0F84EBB70000            	je L_error_fvar_undefined
 14747 00009E10 50                      	push rax
 14748 00009E11 488B0425[C9100000]      	mov rax, qword [free_var_45]	; free var __bin-less-than-zz
 14749 00009E19 803805                  	cmp byte [rax], T_undefined
 14750 00009E1C 0F84D9B70000            	je L_error_fvar_undefined
 14751 00009E22 50                      	push rax
 14752 00009E23 6A03                    	push 3	; arg count
 14753 00009E25 488B4520                	mov rax, PARAM(0)	; param make-bin-comparator
 14754 00009E29 803804                  	cmp byte [rax], T_closure
 14755 00009E2C 0F854DB80000            	jne L_error_non_closure
 14756 00009E32 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14757 00009E35 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14758 00009E38 50                      	push rax
 14759 00009E39 6A01                    	push 1	; arg count
 14760 00009E3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14761 00009E40 E8E3B80000              	call malloc
 14762 00009E45 50                      	push rax
 14763 00009E46 BF08000000              	mov rdi, 8 * 1	; new rib
 14764 00009E4B E8D8B80000              	call malloc
 14765 00009E50 50                      	push rax
 14766 00009E51 BF18000000              	mov rdi, 8 * 3	; extended env
 14767 00009E56 E8CDB80000              	call malloc
 14768 00009E5B 488B7D10                	mov rdi, ENV
 14769 00009E5F BE00000000              	mov rsi, 0
 14770 00009E64 BA01000000              	mov rdx, 1
 14771                                  .L_lambda_simple_env_loop_0570:	; ext_env[i + 1] <-- env[i]
 14772 00009E69 4883FE02                	cmp rsi, 2
 14773 00009E6D 7410                    	je .L_lambda_simple_env_end_0570
 14774 00009E6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14775 00009E73 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14776 00009E77 48FFC6                  	inc rsi
 14777 00009E7A 48FFC2                  	inc rdx
 14778 00009E7D EBEA                    	jmp .L_lambda_simple_env_loop_0570
 14779                                  .L_lambda_simple_env_end_0570:
 14780 00009E7F 5B                      	pop rbx
 14781 00009E80 BE00000000              	mov rsi, 0
 14782                                  .L_lambda_simple_params_loop_0570:	; copy params
 14783 00009E85 4883FE01                	cmp rsi, 1
 14784 00009E89 740E                    	je .L_lambda_simple_params_end_0570
 14785 00009E8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14786 00009E90 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14787 00009E94 48FFC6                  	inc rsi
 14788 00009E97 EBEC                    	jmp .L_lambda_simple_params_loop_0570
 14789                                  .L_lambda_simple_params_end_0570:
 14790 00009E99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14791 00009E9C 4889C3                  	mov rbx, rax
 14792 00009E9F 58                      	pop rax
 14793 00009EA0 C60004                  	mov byte [rax], T_closure
 14794 00009EA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14795 00009EA7 48C74009[B49E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0570
 14796 00009EAF E91D0E0000              	jmp .L_lambda_simple_end_0570
 14797                                  .L_lambda_simple_code_0570:	; lambda-simple body
 14798 00009EB4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14799 00009EBA 740B                    	je .L_lambda_simple_arity_check_ok_0570
 14800 00009EBC FF742410                	push qword [rsp + 8 * 2]
 14801 00009EC0 6A01                    	push 1
 14802 00009EC2 E91AB80000              	jmp L_error_incorrect_arity_simple
 14803                                  .L_lambda_simple_arity_check_ok_0570:
 14804 00009EC7 C8000000                	enter 0, 0
 14805                                  	; preparing a tail-call
 14806 00009ECB 488B0425[DA100000]      	mov rax, qword [free_var_46]	; free var __bin-equal-rr
 14807 00009ED3 803805                  	cmp byte [rax], T_undefined
 14808 00009ED6 0F841FB70000            	je L_error_fvar_undefined
 14809 00009EDC 50                      	push rax
 14810 00009EDD 488B0425[EB100000]      	mov rax, qword [free_var_47]	; free var __bin-equal-qq
 14811 00009EE5 803805                  	cmp byte [rax], T_undefined
 14812 00009EE8 0F840DB70000            	je L_error_fvar_undefined
 14813 00009EEE 50                      	push rax
 14814 00009EEF 488B0425[FC100000]      	mov rax, qword [free_var_48]	; free var __bin-equal-zz
 14815 00009EF7 803805                  	cmp byte [rax], T_undefined
 14816 00009EFA 0F84FBB60000            	je L_error_fvar_undefined
 14817 00009F00 50                      	push rax
 14818 00009F01 6A03                    	push 3	; arg count
 14819 00009F03 488B4510                	mov rax, ENV
 14820 00009F07 488B00                  	mov rax, qword [rax + 8 * 0]
 14821 00009F0A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var make-bin-comparator
 14822 00009F0D 803804                  	cmp byte [rax], T_closure
 14823 00009F10 0F8569B70000            	jne L_error_non_closure
 14824 00009F16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14825 00009F19 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14826 00009F1C 50                      	push rax
 14827 00009F1D 6A01                    	push 1	; arg count
 14828 00009F1F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14829 00009F24 E8FFB70000              	call malloc
 14830 00009F29 50                      	push rax
 14831 00009F2A BF08000000              	mov rdi, 8 * 1	; new rib
 14832 00009F2F E8F4B70000              	call malloc
 14833 00009F34 50                      	push rax
 14834 00009F35 BF20000000              	mov rdi, 8 * 4	; extended env
 14835 00009F3A E8E9B70000              	call malloc
 14836 00009F3F 488B7D10                	mov rdi, ENV
 14837 00009F43 BE00000000              	mov rsi, 0
 14838 00009F48 BA01000000              	mov rdx, 1
 14839                                  .L_lambda_simple_env_loop_0571:	; ext_env[i + 1] <-- env[i]
 14840 00009F4D 4883FE03                	cmp rsi, 3
 14841 00009F51 7410                    	je .L_lambda_simple_env_end_0571
 14842 00009F53 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14843 00009F57 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14844 00009F5B 48FFC6                  	inc rsi
 14845 00009F5E 48FFC2                  	inc rdx
 14846 00009F61 EBEA                    	jmp .L_lambda_simple_env_loop_0571
 14847                                  .L_lambda_simple_env_end_0571:
 14848 00009F63 5B                      	pop rbx
 14849 00009F64 BE00000000              	mov rsi, 0
 14850                                  .L_lambda_simple_params_loop_0571:	; copy params
 14851 00009F69 4883FE01                	cmp rsi, 1
 14852 00009F6D 740E                    	je .L_lambda_simple_params_end_0571
 14853 00009F6F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14854 00009F74 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14855 00009F78 48FFC6                  	inc rsi
 14856 00009F7B EBEC                    	jmp .L_lambda_simple_params_loop_0571
 14857                                  .L_lambda_simple_params_end_0571:
 14858 00009F7D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14859 00009F80 4889C3                  	mov rbx, rax
 14860 00009F83 58                      	pop rax
 14861 00009F84 C60004                  	mov byte [rax], T_closure
 14862 00009F87 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14863 00009F8B 48C74009[989F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0571
 14864 00009F93 E9F00C0000              	jmp .L_lambda_simple_end_0571
 14865                                  .L_lambda_simple_code_0571:	; lambda-simple body
 14866 00009F98 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14867 00009F9E 740B                    	je .L_lambda_simple_arity_check_ok_0571
 14868 00009FA0 FF742410                	push qword [rsp + 8 * 2]
 14869 00009FA4 6A01                    	push 1
 14870 00009FA6 E936B70000              	jmp L_error_incorrect_arity_simple
 14871                                  .L_lambda_simple_arity_check_ok_0571:
 14872 00009FAB C8000000                	enter 0, 0
 14873                                  	; preparing a tail-call
 14874 00009FAF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14875 00009FB4 E86FB70000              	call malloc
 14876 00009FB9 50                      	push rax
 14877 00009FBA BF08000000              	mov rdi, 8 * 1	; new rib
 14878 00009FBF E864B70000              	call malloc
 14879 00009FC4 50                      	push rax
 14880 00009FC5 BF28000000              	mov rdi, 8 * 5	; extended env
 14881 00009FCA E859B70000              	call malloc
 14882 00009FCF 488B7D10                	mov rdi, ENV
 14883 00009FD3 BE00000000              	mov rsi, 0
 14884 00009FD8 BA01000000              	mov rdx, 1
 14885                                  .L_lambda_simple_env_loop_0572:	; ext_env[i + 1] <-- env[i]
 14886 00009FDD 4883FE04                	cmp rsi, 4
 14887 00009FE1 7410                    	je .L_lambda_simple_env_end_0572
 14888 00009FE3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14889 00009FE7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14890 00009FEB 48FFC6                  	inc rsi
 14891 00009FEE 48FFC2                  	inc rdx
 14892 00009FF1 EBEA                    	jmp .L_lambda_simple_env_loop_0572
 14893                                  .L_lambda_simple_env_end_0572:
 14894 00009FF3 5B                      	pop rbx
 14895 00009FF4 BE00000000              	mov rsi, 0
 14896                                  .L_lambda_simple_params_loop_0572:	; copy params
 14897 00009FF9 4883FE01                	cmp rsi, 1
 14898 00009FFD 740E                    	je .L_lambda_simple_params_end_0572
 14899 00009FFF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14900 0000A004 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14901 0000A008 48FFC6                  	inc rsi
 14902 0000A00B EBEC                    	jmp .L_lambda_simple_params_loop_0572
 14903                                  .L_lambda_simple_params_end_0572:
 14904 0000A00D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14905 0000A010 4889C3                  	mov rbx, rax
 14906 0000A013 58                      	pop rax
 14907 0000A014 C60004                  	mov byte [rax], T_closure
 14908 0000A017 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14909 0000A01B 48C74009[28A00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0572
 14910 0000A023 E99A000000              	jmp .L_lambda_simple_end_0572
 14911                                  .L_lambda_simple_code_0572:	; lambda-simple body
 14912 0000A028 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14913 0000A02E 740B                    	je .L_lambda_simple_arity_check_ok_0572
 14914 0000A030 FF742410                	push qword [rsp + 8 * 2]
 14915 0000A034 6A02                    	push 2
 14916 0000A036 E9A6B60000              	jmp L_error_incorrect_arity_simple
 14917                                  .L_lambda_simple_arity_check_ok_0572:
 14918 0000A03B C8000000                	enter 0, 0
 14919                                  	; preparing a tail-call
 14920 0000A03F 488B4528                	mov rax, PARAM(1)	; param b
 14921 0000A043 50                      	push rax
 14922 0000A044 488B4520                	mov rax, PARAM(0)	; param a
 14923 0000A048 50                      	push rax
 14924 0000A049 6A02                    	push 2	; arg count
 14925 0000A04B 488B4510                	mov rax, ENV
 14926 0000A04F 488B4008                	mov rax, qword [rax + 8 * 1]
 14927 0000A053 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 14928 0000A056 803804                  	cmp byte [rax], T_closure
 14929 0000A059 0F8520B60000            	jne L_error_non_closure
 14930 0000A05F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14931 0000A062 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14932 0000A065 50                      	push rax
 14933 0000A066 6A01                    	push 1	; arg count
 14934 0000A068 488B0425[B4140000]      	mov rax, qword [free_var_104]	; free var not
 14935 0000A070 803805                  	cmp byte [rax], T_undefined
 14936 0000A073 0F8482B50000            	je L_error_fvar_undefined
 14937 0000A079 803804                  	cmp byte [rax], T_closure
 14938 0000A07C 0F85FDB50000            	jne L_error_non_closure
 14939 0000A082 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14940                                  
 14941                                  	; recycling the current frame
 14942 0000A085 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 14943 0000A088 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 14944 0000A08B B905000000              	mov rcx, 1 + 4
 14945 0000A090 488B5D18                	mov rbx, COUNT
 14946 0000A094 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 14947 0000A099 488D55F8                	lea rdx, [rbp - 8 * 1]
 14948                                  .L_tc_recycle_frame_loop_0749:
 14949 0000A09D 4883F900                	cmp rcx, 0
 14950 0000A0A1 7413                    	je .L_tc_recycle_frame_done_0749
 14951 0000A0A3 488B32                  	mov rsi, qword [rdx]
 14952 0000A0A6 488933                  	mov qword [rbx], rsi
 14953 0000A0A9 48FFC9                  	dec rcx
 14954 0000A0AC 4883EB08                	sub rbx, 8 * 1
 14955 0000A0B0 4883EA08                	sub rdx, 8 * 1
 14956 0000A0B4 EBE7                    	jmp .L_tc_recycle_frame_loop_0749
 14957                                  .L_tc_recycle_frame_done_0749:
 14958 0000A0B6 488D6308                	lea rsp, [rbx + 8 * 1]
 14959 0000A0BA 5D                      	pop rbp	; the proc will restore it!
 14960 0000A0BB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14961 0000A0BE C9                      	leave
 14962 0000A0BF C22000                  	ret AND_KILL_FRAME(2)
 14963                                  .L_lambda_simple_end_0572:	; new closure is in rax
 14964 0000A0C2 50                      	push rax
 14965 0000A0C3 6A01                    	push 1	; arg count
 14966 0000A0C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14967 0000A0CA E859B60000              	call malloc
 14968 0000A0CF 50                      	push rax
 14969 0000A0D0 BF08000000              	mov rdi, 8 * 1	; new rib
 14970 0000A0D5 E84EB60000              	call malloc
 14971 0000A0DA 50                      	push rax
 14972 0000A0DB BF28000000              	mov rdi, 8 * 5	; extended env
 14973 0000A0E0 E843B60000              	call malloc
 14974 0000A0E5 488B7D10                	mov rdi, ENV
 14975 0000A0E9 BE00000000              	mov rsi, 0
 14976 0000A0EE BA01000000              	mov rdx, 1
 14977                                  .L_lambda_simple_env_loop_0573:	; ext_env[i + 1] <-- env[i]
 14978 0000A0F3 4883FE04                	cmp rsi, 4
 14979 0000A0F7 7410                    	je .L_lambda_simple_env_end_0573
 14980 0000A0F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14981 0000A0FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14982 0000A101 48FFC6                  	inc rsi
 14983 0000A104 48FFC2                  	inc rdx
 14984 0000A107 EBEA                    	jmp .L_lambda_simple_env_loop_0573
 14985                                  .L_lambda_simple_env_end_0573:
 14986 0000A109 5B                      	pop rbx
 14987 0000A10A BE00000000              	mov rsi, 0
 14988                                  .L_lambda_simple_params_loop_0573:	; copy params
 14989 0000A10F 4883FE01                	cmp rsi, 1
 14990 0000A113 740E                    	je .L_lambda_simple_params_end_0573
 14991 0000A115 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14992 0000A11A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14993 0000A11E 48FFC6                  	inc rsi
 14994 0000A121 EBEC                    	jmp .L_lambda_simple_params_loop_0573
 14995                                  .L_lambda_simple_params_end_0573:
 14996 0000A123 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14997 0000A126 4889C3                  	mov rbx, rax
 14998 0000A129 58                      	pop rax
 14999 0000A12A C60004                  	mov byte [rax], T_closure
 15000 0000A12D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15001 0000A131 48C74009[3EA10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0573
 15002 0000A139 E9010B0000              	jmp .L_lambda_simple_end_0573
 15003                                  .L_lambda_simple_code_0573:	; lambda-simple body
 15004 0000A13E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15005 0000A144 740B                    	je .L_lambda_simple_arity_check_ok_0573
 15006 0000A146 FF742410                	push qword [rsp + 8 * 2]
 15007 0000A14A 6A01                    	push 1
 15008 0000A14C E990B50000              	jmp L_error_incorrect_arity_simple
 15009                                  .L_lambda_simple_arity_check_ok_0573:
 15010 0000A151 C8000000                	enter 0, 0
 15011                                  	; preparing a tail-call
 15012 0000A155 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15013 0000A15A E8C9B50000              	call malloc
 15014 0000A15F 50                      	push rax
 15015 0000A160 BF08000000              	mov rdi, 8 * 1	; new rib
 15016 0000A165 E8BEB50000              	call malloc
 15017 0000A16A 50                      	push rax
 15018 0000A16B BF30000000              	mov rdi, 8 * 6	; extended env
 15019 0000A170 E8B3B50000              	call malloc
 15020 0000A175 488B7D10                	mov rdi, ENV
 15021 0000A179 BE00000000              	mov rsi, 0
 15022 0000A17E BA01000000              	mov rdx, 1
 15023                                  .L_lambda_simple_env_loop_0574:	; ext_env[i + 1] <-- env[i]
 15024 0000A183 4883FE05                	cmp rsi, 5
 15025 0000A187 7410                    	je .L_lambda_simple_env_end_0574
 15026 0000A189 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15027 0000A18D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15028 0000A191 48FFC6                  	inc rsi
 15029 0000A194 48FFC2                  	inc rdx
 15030 0000A197 EBEA                    	jmp .L_lambda_simple_env_loop_0574
 15031                                  .L_lambda_simple_env_end_0574:
 15032 0000A199 5B                      	pop rbx
 15033 0000A19A BE00000000              	mov rsi, 0
 15034                                  .L_lambda_simple_params_loop_0574:	; copy params
 15035 0000A19F 4883FE01                	cmp rsi, 1
 15036 0000A1A3 740E                    	je .L_lambda_simple_params_end_0574
 15037 0000A1A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15038 0000A1AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15039 0000A1AE 48FFC6                  	inc rsi
 15040 0000A1B1 EBEC                    	jmp .L_lambda_simple_params_loop_0574
 15041                                  .L_lambda_simple_params_end_0574:
 15042 0000A1B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15043 0000A1B6 4889C3                  	mov rbx, rax
 15044 0000A1B9 58                      	pop rax
 15045 0000A1BA C60004                  	mov byte [rax], T_closure
 15046 0000A1BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15047 0000A1C1 48C74009[CBA10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0574
 15048 0000A1C9 EB77                    	jmp .L_lambda_simple_end_0574
 15049                                  .L_lambda_simple_code_0574:	; lambda-simple body
 15050 0000A1CB 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15051 0000A1D1 740B                    	je .L_lambda_simple_arity_check_ok_0574
 15052 0000A1D3 FF742410                	push qword [rsp + 8 * 2]
 15053 0000A1D7 6A02                    	push 2
 15054 0000A1D9 E903B50000              	jmp L_error_incorrect_arity_simple
 15055                                  .L_lambda_simple_arity_check_ok_0574:
 15056 0000A1DE C8000000                	enter 0, 0
 15057                                  	; preparing a tail-call
 15058 0000A1E2 488B4520                	mov rax, PARAM(0)	; param a
 15059 0000A1E6 50                      	push rax
 15060 0000A1E7 488B4528                	mov rax, PARAM(1)	; param b
 15061 0000A1EB 50                      	push rax
 15062 0000A1EC 6A02                    	push 2	; arg count
 15063 0000A1EE 488B4510                	mov rax, ENV
 15064 0000A1F2 488B4010                	mov rax, qword [rax + 8 * 2]
 15065 0000A1F6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 15066 0000A1F9 803804                  	cmp byte [rax], T_closure
 15067 0000A1FC 0F857DB40000            	jne L_error_non_closure
 15068 0000A202 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15069                                  
 15070                                  	; recycling the current frame
 15071 0000A205 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15072 0000A208 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15073 0000A20B B906000000              	mov rcx, 2 + 4
 15074 0000A210 488B5D18                	mov rbx, COUNT
 15075 0000A214 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15076 0000A219 488D55F8                	lea rdx, [rbp - 8 * 1]
 15077                                  .L_tc_recycle_frame_loop_074a:
 15078 0000A21D 4883F900                	cmp rcx, 0
 15079 0000A221 7413                    	je .L_tc_recycle_frame_done_074a
 15080 0000A223 488B32                  	mov rsi, qword [rdx]
 15081 0000A226 488933                  	mov qword [rbx], rsi
 15082 0000A229 48FFC9                  	dec rcx
 15083 0000A22C 4883EB08                	sub rbx, 8 * 1
 15084 0000A230 4883EA08                	sub rdx, 8 * 1
 15085 0000A234 EBE7                    	jmp .L_tc_recycle_frame_loop_074a
 15086                                  .L_tc_recycle_frame_done_074a:
 15087 0000A236 488D6308                	lea rsp, [rbx + 8 * 1]
 15088 0000A23A 5D                      	pop rbp	; the proc will restore it!
 15089 0000A23B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15090 0000A23E C9                      	leave
 15091 0000A23F C22000                  	ret AND_KILL_FRAME(2)
 15092                                  .L_lambda_simple_end_0574:	; new closure is in rax
 15093 0000A242 50                      	push rax
 15094 0000A243 6A01                    	push 1	; arg count
 15095 0000A245 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15096 0000A24A E8D9B40000              	call malloc
 15097 0000A24F 50                      	push rax
 15098 0000A250 BF08000000              	mov rdi, 8 * 1	; new rib
 15099 0000A255 E8CEB40000              	call malloc
 15100 0000A25A 50                      	push rax
 15101 0000A25B BF30000000              	mov rdi, 8 * 6	; extended env
 15102 0000A260 E8C3B40000              	call malloc
 15103 0000A265 488B7D10                	mov rdi, ENV
 15104 0000A269 BE00000000              	mov rsi, 0
 15105 0000A26E BA01000000              	mov rdx, 1
 15106                                  .L_lambda_simple_env_loop_0575:	; ext_env[i + 1] <-- env[i]
 15107 0000A273 4883FE05                	cmp rsi, 5
 15108 0000A277 7410                    	je .L_lambda_simple_env_end_0575
 15109 0000A279 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15110 0000A27D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15111 0000A281 48FFC6                  	inc rsi
 15112 0000A284 48FFC2                  	inc rdx
 15113 0000A287 EBEA                    	jmp .L_lambda_simple_env_loop_0575
 15114                                  .L_lambda_simple_env_end_0575:
 15115 0000A289 5B                      	pop rbx
 15116 0000A28A BE00000000              	mov rsi, 0
 15117                                  .L_lambda_simple_params_loop_0575:	; copy params
 15118 0000A28F 4883FE01                	cmp rsi, 1
 15119 0000A293 740E                    	je .L_lambda_simple_params_end_0575
 15120 0000A295 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15121 0000A29A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15122 0000A29E 48FFC6                  	inc rsi
 15123 0000A2A1 EBEC                    	jmp .L_lambda_simple_params_loop_0575
 15124                                  .L_lambda_simple_params_end_0575:
 15125 0000A2A3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15126 0000A2A6 4889C3                  	mov rbx, rax
 15127 0000A2A9 58                      	pop rax
 15128 0000A2AA C60004                  	mov byte [rax], T_closure
 15129 0000A2AD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15130 0000A2B1 48C74009[BEA20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0575
 15131 0000A2B9 E938090000              	jmp .L_lambda_simple_end_0575
 15132                                  .L_lambda_simple_code_0575:	; lambda-simple body
 15133 0000A2BE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15134 0000A2C4 740B                    	je .L_lambda_simple_arity_check_ok_0575
 15135 0000A2C6 FF742410                	push qword [rsp + 8 * 2]
 15136 0000A2CA 6A01                    	push 1
 15137 0000A2CC E910B40000              	jmp L_error_incorrect_arity_simple
 15138                                  .L_lambda_simple_arity_check_ok_0575:
 15139 0000A2D1 C8000000                	enter 0, 0
 15140                                  	; preparing a tail-call
 15141 0000A2D5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15142 0000A2DA E849B40000              	call malloc
 15143 0000A2DF 50                      	push rax
 15144 0000A2E0 BF08000000              	mov rdi, 8 * 1	; new rib
 15145 0000A2E5 E83EB40000              	call malloc
 15146 0000A2EA 50                      	push rax
 15147 0000A2EB BF38000000              	mov rdi, 8 * 7	; extended env
 15148 0000A2F0 E833B40000              	call malloc
 15149 0000A2F5 488B7D10                	mov rdi, ENV
 15150 0000A2F9 BE00000000              	mov rsi, 0
 15151 0000A2FE BA01000000              	mov rdx, 1
 15152                                  .L_lambda_simple_env_loop_0576:	; ext_env[i + 1] <-- env[i]
 15153 0000A303 4883FE06                	cmp rsi, 6
 15154 0000A307 7410                    	je .L_lambda_simple_env_end_0576
 15155 0000A309 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15156 0000A30D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15157 0000A311 48FFC6                  	inc rsi
 15158 0000A314 48FFC2                  	inc rdx
 15159 0000A317 EBEA                    	jmp .L_lambda_simple_env_loop_0576
 15160                                  .L_lambda_simple_env_end_0576:
 15161 0000A319 5B                      	pop rbx
 15162 0000A31A BE00000000              	mov rsi, 0
 15163                                  .L_lambda_simple_params_loop_0576:	; copy params
 15164 0000A31F 4883FE01                	cmp rsi, 1
 15165 0000A323 740E                    	je .L_lambda_simple_params_end_0576
 15166 0000A325 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15167 0000A32A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15168 0000A32E 48FFC6                  	inc rsi
 15169 0000A331 EBEC                    	jmp .L_lambda_simple_params_loop_0576
 15170                                  .L_lambda_simple_params_end_0576:
 15171 0000A333 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15172 0000A336 4889C3                  	mov rbx, rax
 15173 0000A339 58                      	pop rax
 15174 0000A33A C60004                  	mov byte [rax], T_closure
 15175 0000A33D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15176 0000A341 48C74009[4EA30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0576
 15177 0000A349 E999000000              	jmp .L_lambda_simple_end_0576
 15178                                  .L_lambda_simple_code_0576:	; lambda-simple body
 15179 0000A34E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15180 0000A354 740B                    	je .L_lambda_simple_arity_check_ok_0576
 15181 0000A356 FF742410                	push qword [rsp + 8 * 2]
 15182 0000A35A 6A02                    	push 2
 15183 0000A35C E980B30000              	jmp L_error_incorrect_arity_simple
 15184                                  .L_lambda_simple_arity_check_ok_0576:
 15185 0000A361 C8000000                	enter 0, 0
 15186                                  	; preparing a tail-call
 15187 0000A365 488B4528                	mov rax, PARAM(1)	; param b
 15188 0000A369 50                      	push rax
 15189 0000A36A 488B4520                	mov rax, PARAM(0)	; param a
 15190 0000A36E 50                      	push rax
 15191 0000A36F 6A02                    	push 2	; arg count
 15192 0000A371 488B4510                	mov rax, ENV
 15193 0000A375 488B00                  	mov rax, qword [rax + 8 * 0]
 15194 0000A378 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 15195 0000A37B 803804                  	cmp byte [rax], T_closure
 15196 0000A37E 0F85FBB20000            	jne L_error_non_closure
 15197 0000A384 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15198 0000A387 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15199 0000A38A 50                      	push rax
 15200 0000A38B 6A01                    	push 1	; arg count
 15201 0000A38D 488B0425[B4140000]      	mov rax, qword [free_var_104]	; free var not
 15202 0000A395 803805                  	cmp byte [rax], T_undefined
 15203 0000A398 0F845DB20000            	je L_error_fvar_undefined
 15204 0000A39E 803804                  	cmp byte [rax], T_closure
 15205 0000A3A1 0F85D8B20000            	jne L_error_non_closure
 15206 0000A3A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15207                                  
 15208                                  	; recycling the current frame
 15209 0000A3AA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15210 0000A3AD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15211 0000A3B0 B905000000              	mov rcx, 1 + 4
 15212 0000A3B5 488B5D18                	mov rbx, COUNT
 15213 0000A3B9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15214 0000A3BE 488D55F8                	lea rdx, [rbp - 8 * 1]
 15215                                  .L_tc_recycle_frame_loop_074b:
 15216 0000A3C2 4883F900                	cmp rcx, 0
 15217 0000A3C6 7413                    	je .L_tc_recycle_frame_done_074b
 15218 0000A3C8 488B32                  	mov rsi, qword [rdx]
 15219 0000A3CB 488933                  	mov qword [rbx], rsi
 15220 0000A3CE 48FFC9                  	dec rcx
 15221 0000A3D1 4883EB08                	sub rbx, 8 * 1
 15222 0000A3D5 4883EA08                	sub rdx, 8 * 1
 15223 0000A3D9 EBE7                    	jmp .L_tc_recycle_frame_loop_074b
 15224                                  .L_tc_recycle_frame_done_074b:
 15225 0000A3DB 488D6308                	lea rsp, [rbx + 8 * 1]
 15226 0000A3DF 5D                      	pop rbp	; the proc will restore it!
 15227 0000A3E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15228 0000A3E3 C9                      	leave
 15229 0000A3E4 C22000                  	ret AND_KILL_FRAME(2)
 15230                                  .L_lambda_simple_end_0576:	; new closure is in rax
 15231 0000A3E7 50                      	push rax
 15232 0000A3E8 6A01                    	push 1	; arg count
 15233 0000A3EA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15234 0000A3EF E834B30000              	call malloc
 15235 0000A3F4 50                      	push rax
 15236 0000A3F5 BF08000000              	mov rdi, 8 * 1	; new rib
 15237 0000A3FA E829B30000              	call malloc
 15238 0000A3FF 50                      	push rax
 15239 0000A400 BF38000000              	mov rdi, 8 * 7	; extended env
 15240 0000A405 E81EB30000              	call malloc
 15241 0000A40A 488B7D10                	mov rdi, ENV
 15242 0000A40E BE00000000              	mov rsi, 0
 15243 0000A413 BA01000000              	mov rdx, 1
 15244                                  .L_lambda_simple_env_loop_0577:	; ext_env[i + 1] <-- env[i]
 15245 0000A418 4883FE06                	cmp rsi, 6
 15246 0000A41C 7410                    	je .L_lambda_simple_env_end_0577
 15247 0000A41E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15248 0000A422 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15249 0000A426 48FFC6                  	inc rsi
 15250 0000A429 48FFC2                  	inc rdx
 15251 0000A42C EBEA                    	jmp .L_lambda_simple_env_loop_0577
 15252                                  .L_lambda_simple_env_end_0577:
 15253 0000A42E 5B                      	pop rbx
 15254 0000A42F BE00000000              	mov rsi, 0
 15255                                  .L_lambda_simple_params_loop_0577:	; copy params
 15256 0000A434 4883FE01                	cmp rsi, 1
 15257 0000A438 740E                    	je .L_lambda_simple_params_end_0577
 15258 0000A43A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15259 0000A43F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15260 0000A443 48FFC6                  	inc rsi
 15261 0000A446 EBEC                    	jmp .L_lambda_simple_params_loop_0577
 15262                                  .L_lambda_simple_params_end_0577:
 15263 0000A448 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15264 0000A44B 4889C3                  	mov rbx, rax
 15265 0000A44E 58                      	pop rax
 15266 0000A44F C60004                  	mov byte [rax], T_closure
 15267 0000A452 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15268 0000A456 48C74009[63A40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0577
 15269 0000A45E E94A070000              	jmp .L_lambda_simple_end_0577
 15270                                  .L_lambda_simple_code_0577:	; lambda-simple body
 15271 0000A463 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15272 0000A469 740B                    	je .L_lambda_simple_arity_check_ok_0577
 15273 0000A46B FF742410                	push qword [rsp + 8 * 2]
 15274 0000A46F 6A01                    	push 1
 15275 0000A471 E96BB20000              	jmp L_error_incorrect_arity_simple
 15276                                  .L_lambda_simple_arity_check_ok_0577:
 15277 0000A476 C8000000                	enter 0, 0
 15278                                  	; preparing a tail-call
 15279 0000A47A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15280 0000A47F E8A4B20000              	call malloc
 15281 0000A484 50                      	push rax
 15282 0000A485 BF08000000              	mov rdi, 8 * 1	; new rib
 15283 0000A48A E899B20000              	call malloc
 15284 0000A48F 50                      	push rax
 15285 0000A490 BF40000000              	mov rdi, 8 * 8	; extended env
 15286 0000A495 E88EB20000              	call malloc
 15287 0000A49A 488B7D10                	mov rdi, ENV
 15288 0000A49E BE00000000              	mov rsi, 0
 15289 0000A4A3 BA01000000              	mov rdx, 1
 15290                                  .L_lambda_simple_env_loop_0578:	; ext_env[i + 1] <-- env[i]
 15291 0000A4A8 4883FE07                	cmp rsi, 7
 15292 0000A4AC 7410                    	je .L_lambda_simple_env_end_0578
 15293 0000A4AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15294 0000A4B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15295 0000A4B6 48FFC6                  	inc rsi
 15296 0000A4B9 48FFC2                  	inc rdx
 15297 0000A4BC EBEA                    	jmp .L_lambda_simple_env_loop_0578
 15298                                  .L_lambda_simple_env_end_0578:
 15299 0000A4BE 5B                      	pop rbx
 15300 0000A4BF BE00000000              	mov rsi, 0
 15301                                  .L_lambda_simple_params_loop_0578:	; copy params
 15302 0000A4C4 4883FE01                	cmp rsi, 1
 15303 0000A4C8 740E                    	je .L_lambda_simple_params_end_0578
 15304 0000A4CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15305 0000A4CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15306 0000A4D3 48FFC6                  	inc rsi
 15307 0000A4D6 EBEC                    	jmp .L_lambda_simple_params_loop_0578
 15308                                  .L_lambda_simple_params_end_0578:
 15309 0000A4D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15310 0000A4DB 4889C3                  	mov rbx, rax
 15311 0000A4DE 58                      	pop rax
 15312 0000A4DF C60004                  	mov byte [rax], T_closure
 15313 0000A4E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15314 0000A4E6 48C74009[F3A40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0578
 15315 0000A4EE E9AF040000              	jmp .L_lambda_simple_end_0578
 15316                                  .L_lambda_simple_code_0578:	; lambda-simple body
 15317 0000A4F3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15318 0000A4F9 740B                    	je .L_lambda_simple_arity_check_ok_0578
 15319 0000A4FB FF742410                	push qword [rsp + 8 * 2]
 15320 0000A4FF 6A01                    	push 1
 15321 0000A501 E9DBB10000              	jmp L_error_incorrect_arity_simple
 15322                                  .L_lambda_simple_arity_check_ok_0578:
 15323 0000A506 C8000000                	enter 0, 0
 15324                                  	; preparing a tail-call
 15325 0000A50A 48B8-                   	mov rax, L_constants + 1881
 15325 0000A50C [5907000000000000] 
 15326 0000A514 50                      	push rax
 15327 0000A515 6A01                    	push 1	; arg count
 15328 0000A517 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15329 0000A51C E807B20000              	call malloc
 15330 0000A521 50                      	push rax
 15331 0000A522 BF08000000              	mov rdi, 8 * 1	; new rib
 15332 0000A527 E8FCB10000              	call malloc
 15333 0000A52C 50                      	push rax
 15334 0000A52D BF48000000              	mov rdi, 8 * 9	; extended env
 15335 0000A532 E8F1B10000              	call malloc
 15336 0000A537 488B7D10                	mov rdi, ENV
 15337 0000A53B BE00000000              	mov rsi, 0
 15338 0000A540 BA01000000              	mov rdx, 1
 15339                                  .L_lambda_simple_env_loop_0579:	; ext_env[i + 1] <-- env[i]
 15340 0000A545 4883FE08                	cmp rsi, 8
 15341 0000A549 7410                    	je .L_lambda_simple_env_end_0579
 15342 0000A54B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15343 0000A54F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15344 0000A553 48FFC6                  	inc rsi
 15345 0000A556 48FFC2                  	inc rdx
 15346 0000A559 EBEA                    	jmp .L_lambda_simple_env_loop_0579
 15347                                  .L_lambda_simple_env_end_0579:
 15348 0000A55B 5B                      	pop rbx
 15349 0000A55C BE00000000              	mov rsi, 0
 15350                                  .L_lambda_simple_params_loop_0579:	; copy params
 15351 0000A561 4883FE01                	cmp rsi, 1
 15352 0000A565 740E                    	je .L_lambda_simple_params_end_0579
 15353 0000A567 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15354 0000A56C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15355 0000A570 48FFC6                  	inc rsi
 15356 0000A573 EBEC                    	jmp .L_lambda_simple_params_loop_0579
 15357                                  .L_lambda_simple_params_end_0579:
 15358 0000A575 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15359 0000A578 4889C3                  	mov rbx, rax
 15360 0000A57B 58                      	pop rax
 15361 0000A57C C60004                  	mov byte [rax], T_closure
 15362 0000A57F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15363 0000A583 48C74009[90A50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0579
 15364 0000A58B E9C9030000              	jmp .L_lambda_simple_end_0579
 15365                                  .L_lambda_simple_code_0579:	; lambda-simple body
 15366 0000A590 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15367 0000A596 740B                    	je .L_lambda_simple_arity_check_ok_0579
 15368 0000A598 FF742410                	push qword [rsp + 8 * 2]
 15369 0000A59C 6A01                    	push 1
 15370 0000A59E E93EB10000              	jmp L_error_incorrect_arity_simple
 15371                                  .L_lambda_simple_arity_check_ok_0579:
 15372 0000A5A3 C8000000                	enter 0, 0
 15373                                  
 15374 0000A5A7 BF08000000              	mov rdi, 8
 15375 0000A5AC E877B10000              	call malloc
 15376 0000A5B1 488B5D20                	mov rbx, PARAM(0)	; param run
 15377 0000A5B5 488918                  	mov [rax], rbx	; box run
 15378 0000A5B8 48894520                	mov PARAM(0), rax	;replace param run with box
 15379 0000A5BC 48B8-                   	mov rax, sob_void
 15379 0000A5BE [0000000000000000] 
 15380                                  
 15381 0000A5C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15382 0000A5CB E858B10000              	call malloc
 15383 0000A5D0 50                      	push rax
 15384 0000A5D1 BF08000000              	mov rdi, 8 * 1	; new rib
 15385 0000A5D6 E84DB10000              	call malloc
 15386 0000A5DB 50                      	push rax
 15387 0000A5DC BF50000000              	mov rdi, 8 * 10	; extended env
 15388 0000A5E1 E842B10000              	call malloc
 15389 0000A5E6 488B7D10                	mov rdi, ENV
 15390 0000A5EA BE00000000              	mov rsi, 0
 15391 0000A5EF BA01000000              	mov rdx, 1
 15392                                  .L_lambda_simple_env_loop_057a:	; ext_env[i + 1] <-- env[i]
 15393 0000A5F4 4883FE09                	cmp rsi, 9
 15394 0000A5F8 7410                    	je .L_lambda_simple_env_end_057a
 15395 0000A5FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15396 0000A5FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15397 0000A602 48FFC6                  	inc rsi
 15398 0000A605 48FFC2                  	inc rdx
 15399 0000A608 EBEA                    	jmp .L_lambda_simple_env_loop_057a
 15400                                  .L_lambda_simple_env_end_057a:
 15401 0000A60A 5B                      	pop rbx
 15402 0000A60B BE00000000              	mov rsi, 0
 15403                                  .L_lambda_simple_params_loop_057a:	; copy params
 15404 0000A610 4883FE01                	cmp rsi, 1
 15405 0000A614 740E                    	je .L_lambda_simple_params_end_057a
 15406 0000A616 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15407 0000A61B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15408 0000A61F 48FFC6                  	inc rsi
 15409 0000A622 EBEC                    	jmp .L_lambda_simple_params_loop_057a
 15410                                  .L_lambda_simple_params_end_057a:
 15411 0000A624 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15412 0000A627 4889C3                  	mov rbx, rax
 15413 0000A62A 58                      	pop rax
 15414 0000A62B C60004                  	mov byte [rax], T_closure
 15415 0000A62E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15416 0000A632 48C74009[3FA60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_057a
 15417 0000A63A E953010000              	jmp .L_lambda_simple_end_057a
 15418                                  .L_lambda_simple_code_057a:	; lambda-simple body
 15419 0000A63F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15420 0000A645 740B                    	je .L_lambda_simple_arity_check_ok_057a
 15421 0000A647 FF742410                	push qword [rsp + 8 * 2]
 15422 0000A64B 6A02                    	push 2
 15423 0000A64D E98FB00000              	jmp L_error_incorrect_arity_simple
 15424                                  .L_lambda_simple_arity_check_ok_057a:
 15425 0000A652 C8000000                	enter 0, 0
 15426 0000A656 488B4528                	mov rax, PARAM(1)	; param s
 15427 0000A65A 50                      	push rax
 15428 0000A65B 6A01                    	push 1	; arg count
 15429 0000A65D 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 15430 0000A665 803805                  	cmp byte [rax], T_undefined
 15431 0000A668 0F848DAF0000            	je L_error_fvar_undefined
 15432 0000A66E 803804                  	cmp byte [rax], T_closure
 15433 0000A671 0F8508B00000            	jne L_error_non_closure
 15434 0000A677 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15435 0000A67A FF5009                  	call SOB_CLOSURE_CODE(rax)
 15436 0000A67D 483D[02000000]          	cmp rax, sob_boolean_false
 15437 0000A683 0F8505010000            	jne .L_or_end_0060
 15438 0000A689 488B4528                	mov rax, PARAM(1)	; param s
 15439 0000A68D 50                      	push rax
 15440 0000A68E 6A01                    	push 1	; arg count
 15441 0000A690 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 15442 0000A698 803805                  	cmp byte [rax], T_undefined
 15443 0000A69B 0F845AAF0000            	je L_error_fvar_undefined
 15444 0000A6A1 803804                  	cmp byte [rax], T_closure
 15445 0000A6A4 0F85D5AF0000            	jne L_error_non_closure
 15446 0000A6AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 15447 0000A6AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 15448 0000A6B0 50                      	push rax
 15449 0000A6B1 488B4520                	mov rax, PARAM(0)	; param a
 15450 0000A6B5 50                      	push rax
 15451 0000A6B6 6A02                    	push 2	; arg count
 15452 0000A6B8 488B4510                	mov rax, ENV
 15453 0000A6BC 488B4008                	mov rax, qword [rax + 8 * 1]
 15454 0000A6C0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-ordering
 15455 0000A6C3 803804                  	cmp byte [rax], T_closure
 15456 0000A6C6 0F85B3AF0000            	jne L_error_non_closure
 15457 0000A6CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 15458 0000A6CF FF5009                  	call SOB_CLOSURE_CODE(rax)
 15459                                  
 15460 0000A6D2 483D[02000000]          	cmp rax, sob_boolean_false
 15461 0000A6D8 0F84A6000000            	je .L_if_else_041b
 15462                                  	; preparing a tail-call
 15463 0000A6DE 488B4528                	mov rax, PARAM(1)	; param s
 15464 0000A6E2 50                      	push rax
 15465 0000A6E3 6A01                    	push 1	; arg count
 15466 0000A6E5 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 15467 0000A6ED 803805                  	cmp byte [rax], T_undefined
 15468 0000A6F0 0F8405AF0000            	je L_error_fvar_undefined
 15469 0000A6F6 803804                  	cmp byte [rax], T_closure
 15470 0000A6F9 0F8580AF0000            	jne L_error_non_closure
 15471 0000A6FF FF7001                  	push SOB_CLOSURE_ENV(rax)
 15472 0000A702 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15473 0000A705 50                      	push rax
 15474 0000A706 488B4528                	mov rax, PARAM(1)	; param s
 15475 0000A70A 50                      	push rax
 15476 0000A70B 6A01                    	push 1	; arg count
 15477 0000A70D 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 15478 0000A715 803805                  	cmp byte [rax], T_undefined
 15479 0000A718 0F84DDAE0000            	je L_error_fvar_undefined
 15480 0000A71E 803804                  	cmp byte [rax], T_closure
 15481 0000A721 0F8558AF0000            	jne L_error_non_closure
 15482 0000A727 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15483 0000A72A FF5009                  	call SOB_CLOSURE_CODE(rax)
 15484 0000A72D 50                      	push rax
 15485 0000A72E 6A02                    	push 2	; arg count
 15486 0000A730 488B4510                	mov rax, ENV
 15487 0000A734 488B00                  	mov rax, qword [rax + 8 * 0]
 15488 0000A737 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 15489 0000A73A 488B00                  	mov rax, qword [rax]
 15490 0000A73D 803804                  	cmp byte [rax], T_closure
 15491 0000A740 0F8539AF0000            	jne L_error_non_closure
 15492 0000A746 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15493                                  
 15494                                  	; recycling the current frame
 15495 0000A749 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15496 0000A74C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15497 0000A74F B906000000              	mov rcx, 2 + 4
 15498 0000A754 488B5D18                	mov rbx, COUNT
 15499 0000A758 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15500 0000A75D 488D55F8                	lea rdx, [rbp - 8 * 1]
 15501                                  .L_tc_recycle_frame_loop_074c:
 15502 0000A761 4883F900                	cmp rcx, 0
 15503 0000A765 7413                    	je .L_tc_recycle_frame_done_074c
 15504 0000A767 488B32                  	mov rsi, qword [rdx]
 15505 0000A76A 488933                  	mov qword [rbx], rsi
 15506 0000A76D 48FFC9                  	dec rcx
 15507 0000A770 4883EB08                	sub rbx, 8 * 1
 15508 0000A774 4883EA08                	sub rdx, 8 * 1
 15509 0000A778 EBE7                    	jmp .L_tc_recycle_frame_loop_074c
 15510                                  .L_tc_recycle_frame_done_074c:
 15511 0000A77A 488D6308                	lea rsp, [rbx + 8 * 1]
 15512 0000A77E 5D                      	pop rbp	; the proc will restore it!
 15513 0000A77F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15514                                  
 15515 0000A782 EB0A                    	jmp .L_if_end_041b
 15516                                  
 15517                                  	.L_if_else_041b:
 15518 0000A784 48B8-                   	mov rax, L_constants + 2
 15518 0000A786 [0200000000000000] 
 15519                                  
 15520                                  	.L_if_end_041b:
 15521                                  .L_or_end_0060:
 15522 0000A78E C9                      	leave
 15523 0000A78F C22000                  	ret AND_KILL_FRAME(2)
 15524                                  .L_lambda_simple_end_057a:	; new closure is in rax
 15525                                  
 15526 0000A792 50                      	push rax
 15527 0000A793 488B4520                	mov rax, PARAM(0)	; param run
 15528                                  
 15529 0000A797 8F00                    	pop qword[rax]
 15530 0000A799 48B8-                   	mov rax, sob_void
 15530 0000A79B [0000000000000000] 
 15531                                  
 15532 0000A7A3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15533 0000A7A8 E87BAF0000              	call malloc
 15534 0000A7AD 50                      	push rax
 15535 0000A7AE BF08000000              	mov rdi, 8 * 1	; new rib
 15536 0000A7B3 E870AF0000              	call malloc
 15537 0000A7B8 50                      	push rax
 15538 0000A7B9 BF50000000              	mov rdi, 8 * 10	; extended env
 15539 0000A7BE E865AF0000              	call malloc
 15540 0000A7C3 488B7D10                	mov rdi, ENV
 15541 0000A7C7 BE00000000              	mov rsi, 0
 15542 0000A7CC BA01000000              	mov rdx, 1
 15543                                  .L_lambda_opt_env_loop_00bd:	; ext_env[i + 1] <-- env[i]
 15544 0000A7D1 4883FE09                	cmp rsi, 9
 15545 0000A7D5 7410                    	je .L_lambda_opt_env_end_00bd
 15546 0000A7D7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15547 0000A7DB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15548 0000A7DF 48FFC6                  	inc rsi
 15549 0000A7E2 48FFC2                  	inc rdx
 15550 0000A7E5 EBEA                    	jmp .L_lambda_opt_env_loop_00bd
 15551                                  .L_lambda_opt_env_end_00bd:
 15552 0000A7E7 5B                      	pop rbx
 15553 0000A7E8 BE00000000              	mov rsi, 0
 15554                                  .L_lambda_opt_params_loop_00bd:	; copy params
 15555 0000A7ED 4883FE01                	cmp rsi, 1
 15556 0000A7F1 740E                    	je .L_lambda_opt_params_end_00bd
 15557 0000A7F3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15558 0000A7F8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15559 0000A7FC 48FFC6                  	inc rsi
 15560 0000A7FF EBEC                    	jmp .L_lambda_opt_params_loop_00bd
 15561                                  .L_lambda_opt_params_end_00bd:
 15562 0000A801 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15563 0000A804 4889C3                  	mov rbx, rax
 15564 0000A807 58                      	pop rax
 15565 0000A808 C60004                  	mov byte [rax], T_closure
 15566 0000A80B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15567 0000A80F 48C74009[1CA80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00bd
 15568 0000A817 E939010000              	jmp .L_lambda_opt_end_00bd
 15569                                  .L_lambda_opt_code_00bd:	; lambda-simple body
 15570 0000A81C 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 15571 0000A822 740D                    	je .L_lambda_opt_arity_check_exact_00bd ;	 if equal, go to exact arity
 15572 0000A824 7F42                    	jg .L_lambda_opt_arity_check_more_00bd ;	 if greater than, go to arity more
 15573 0000A826 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 15574 0000A82A 6A01                     	push 1
 15575 0000A82C E9C4AE0000              	jmp L_error_incorrect_arity_opt
 15576                                  	.L_lambda_opt_arity_check_exact_00bd:
 15577 0000A831 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 15578 0000A836 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 15579 0000A83B 4883EC08                	sub rsp, 8
 15580 0000A83F 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 15581                                  	.L_lambda_opt_exact_shifting_loop_00bd:
 15582 0000A843 488B5108                	mov rdx, [rcx + 8]
 15583 0000A847 488911                  	mov [rcx], rdx
 15584 0000A84A 4883C108                	add rcx, 8
 15585 0000A84E 4839CB                  	cmp rbx, rcx
 15586 0000A851 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00bd
 15587                                  	.L_lambda_opt_exact_shifting_loop_end_00bd:
 15588 0000A853 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 15589 0000A85A 4883C001                	add rax, 1 ; 	arg count += 1
 15590 0000A85E 4889442410              	mov qword [rsp + 8 * 2], rax
 15591 0000A863 E987000000              	jmp .L_lambda_opt_stack_adjusted_00bd
 15592                                  	.L_lambda_opt_arity_check_more_00bd:
 15593 0000A868 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 15593 0000A86A [0100000000000000] 
 15594 0000A872 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 15595 0000A878 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00bd
 15596                                  	.L_lambda_opt_stack_shrink_loop_00bd:
 15597 0000A87A BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 15598 0000A87F E8A4AE0000              	call malloc ;	 allocated memory for the optional scheme list
 15599 0000A884 C60021                  	mov byte[rax], T_pair ;	 set type pair
 15600 0000A887 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 15601 0000A88B 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 15602 0000A88E 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 15603 0000A893 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 15604 0000A898 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 15605 0000A89C 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 15606                                  	.L_lambda_opt_more_shifting_loop_00bd:
 15607 0000A8A1 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 15608 0000A8A4 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 15609 0000A8A8 4883EB08                	sub rbx, 8 
 15610 0000A8AC 4839DC                  	cmp rsp, rbx
 15611 0000A8AF 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00bd
 15612                                  	.L_lambda_opt_more_shifting_loop_end_00bd:
 15613 0000A8B1 4883C408                	add rsp, 8 ;	 update rsp
 15614 0000A8B5 488B5C2410              	mov rbx, [rsp + 8 * 2]
 15615 0000A8BA 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 15616 0000A8BE 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 15617 0000A8C3 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15618 0000A8C9 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00bd
 15619                                  	.L_lambda_opt_stack_shrink_loop_exit_00bd:
 15620 0000A8CB 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 15621 0000A8D0 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 15622 0000A8D5 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 15623 0000A8DA E849AE0000              	call malloc ;	 allocated memory for the optional scheme list
 15624 0000A8DF C60021                  	mov byte[rax], T_pair ;	 set type pair
 15625 0000A8E2 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 15626 0000A8E6 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 15627 0000A8EA 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 15628                                  	.L_lambda_opt_stack_adjusted_00bd:
 15629 0000A8EF C8000000                	enter 0, 0
 15630                                  	; preparing a tail-call
 15631 0000A8F3 488B4528                	mov rax, PARAM(1)	; param s
 15632 0000A8F7 50                      	push rax
 15633 0000A8F8 488B4520                	mov rax, PARAM(0)	; param a
 15634 0000A8FC 50                      	push rax
 15635 0000A8FD 6A02                    	push 2	; arg count
 15636 0000A8FF 488B4510                	mov rax, ENV
 15637 0000A903 488B00                  	mov rax, qword [rax + 8 * 0]
 15638 0000A906 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 15639 0000A909 488B00                  	mov rax, qword [rax]
 15640 0000A90C 803804                  	cmp byte [rax], T_closure
 15641 0000A90F 0F856AAD0000            	jne L_error_non_closure
 15642 0000A915 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15643                                  
 15644                                  	; recycling the current frame
 15645 0000A918 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15646 0000A91B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15647 0000A91E B906000000              	mov rcx, 2 + 4
 15648 0000A923 488B5D18                	mov rbx, COUNT
 15649 0000A927 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15650 0000A92C 488D55F8                	lea rdx, [rbp - 8 * 1]
 15651                                  .L_tc_recycle_frame_loop_074d:
 15652 0000A930 4883F900                	cmp rcx, 0
 15653 0000A934 7413                    	je .L_tc_recycle_frame_done_074d
 15654 0000A936 488B32                  	mov rsi, qword [rdx]
 15655 0000A939 488933                  	mov qword [rbx], rsi
 15656 0000A93C 48FFC9                  	dec rcx
 15657 0000A93F 4883EB08                	sub rbx, 8 * 1
 15658 0000A943 4883EA08                	sub rdx, 8 * 1
 15659 0000A947 EBE7                    	jmp .L_tc_recycle_frame_loop_074d
 15660                                  .L_tc_recycle_frame_done_074d:
 15661 0000A949 488D6308                	lea rsp, [rbx + 8 * 1]
 15662 0000A94D 5D                      	pop rbp	; the proc will restore it!
 15663 0000A94E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15664 0000A951 C9                      	leave
 15665 0000A952 C22000                  	ret AND_KILL_FRAME(2)
 15666                                  .L_lambda_opt_end_00bd:	; new closure is in rax
 15667 0000A955 C9                      	leave
 15668 0000A956 C21800                  	ret AND_KILL_FRAME(1)
 15669                                  .L_lambda_simple_end_0579:	; new closure is in rax
 15670 0000A959 803804                  	cmp byte [rax], T_closure
 15671 0000A95C 0F851DAD0000            	jne L_error_non_closure
 15672 0000A962 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15673                                  
 15674                                  	; recycling the current frame
 15675 0000A965 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15676 0000A968 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15677 0000A96B B905000000              	mov rcx, 1 + 4
 15678 0000A970 488B5D18                	mov rbx, COUNT
 15679 0000A974 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15680 0000A979 488D55F8                	lea rdx, [rbp - 8 * 1]
 15681                                  .L_tc_recycle_frame_loop_074e:
 15682 0000A97D 4883F900                	cmp rcx, 0
 15683 0000A981 7413                    	je .L_tc_recycle_frame_done_074e
 15684 0000A983 488B32                  	mov rsi, qword [rdx]
 15685 0000A986 488933                  	mov qword [rbx], rsi
 15686 0000A989 48FFC9                  	dec rcx
 15687 0000A98C 4883EB08                	sub rbx, 8 * 1
 15688 0000A990 4883EA08                	sub rdx, 8 * 1
 15689 0000A994 EBE7                    	jmp .L_tc_recycle_frame_loop_074e
 15690                                  .L_tc_recycle_frame_done_074e:
 15691 0000A996 488D6308                	lea rsp, [rbx + 8 * 1]
 15692 0000A99A 5D                      	pop rbp	; the proc will restore it!
 15693 0000A99B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15694 0000A99E C9                      	leave
 15695 0000A99F C21800                  	ret AND_KILL_FRAME(1)
 15696                                  .L_lambda_simple_end_0578:	; new closure is in rax
 15697 0000A9A2 50                      	push rax
 15698 0000A9A3 6A01                    	push 1	; arg count
 15699 0000A9A5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15700 0000A9AA E879AD0000              	call malloc
 15701 0000A9AF 50                      	push rax
 15702 0000A9B0 BF08000000              	mov rdi, 8 * 1	; new rib
 15703 0000A9B5 E86EAD0000              	call malloc
 15704 0000A9BA 50                      	push rax
 15705 0000A9BB BF40000000              	mov rdi, 8 * 8	; extended env
 15706 0000A9C0 E863AD0000              	call malloc
 15707 0000A9C5 488B7D10                	mov rdi, ENV
 15708 0000A9C9 BE00000000              	mov rsi, 0
 15709 0000A9CE BA01000000              	mov rdx, 1
 15710                                  .L_lambda_simple_env_loop_057b:	; ext_env[i + 1] <-- env[i]
 15711 0000A9D3 4883FE07                	cmp rsi, 7
 15712 0000A9D7 7410                    	je .L_lambda_simple_env_end_057b
 15713 0000A9D9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15714 0000A9DD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15715 0000A9E1 48FFC6                  	inc rsi
 15716 0000A9E4 48FFC2                  	inc rdx
 15717 0000A9E7 EBEA                    	jmp .L_lambda_simple_env_loop_057b
 15718                                  .L_lambda_simple_env_end_057b:
 15719 0000A9E9 5B                      	pop rbx
 15720 0000A9EA BE00000000              	mov rsi, 0
 15721                                  .L_lambda_simple_params_loop_057b:	; copy params
 15722 0000A9EF 4883FE01                	cmp rsi, 1
 15723 0000A9F3 740E                    	je .L_lambda_simple_params_end_057b
 15724 0000A9F5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15725 0000A9FA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15726 0000A9FE 48FFC6                  	inc rsi
 15727 0000AA01 EBEC                    	jmp .L_lambda_simple_params_loop_057b
 15728                                  .L_lambda_simple_params_end_057b:
 15729 0000AA03 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15730 0000AA06 4889C3                  	mov rbx, rax
 15731 0000AA09 58                      	pop rax
 15732 0000AA0A C60004                  	mov byte [rax], T_closure
 15733 0000AA0D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15734 0000AA11 48C74009[1EAA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_057b
 15735 0000AA19 E946010000              	jmp .L_lambda_simple_end_057b
 15736                                  .L_lambda_simple_code_057b:	; lambda-simple body
 15737 0000AA1E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15738 0000AA24 740B                    	je .L_lambda_simple_arity_check_ok_057b
 15739 0000AA26 FF742410                	push qword [rsp + 8 * 2]
 15740 0000AA2A 6A01                    	push 1
 15741 0000AA2C E9B0AC0000              	jmp L_error_incorrect_arity_simple
 15742                                  .L_lambda_simple_arity_check_ok_057b:
 15743 0000AA31 C8000000                	enter 0, 0
 15744 0000AA35 488B4510                	mov rax, ENV
 15745 0000AA39 488B4020                	mov rax, qword [rax + 8 * 4]
 15746 0000AA3D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 15747 0000AA40 50                      	push rax
 15748 0000AA41 6A01                    	push 1	; arg count
 15749 0000AA43 488B4520                	mov rax, PARAM(0)	; param make-run
 15750 0000AA47 803804                  	cmp byte [rax], T_closure
 15751 0000AA4A 0F852FAC0000            	jne L_error_non_closure
 15752 0000AA50 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15753 0000AA53 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15754 0000AA56 48890425[E6150000]      	mov qword [free_var_122], rax	; free var <
 15755 0000AA5E 803805                  	cmp byte [rax], T_undefined
 15756 0000AA61 0F8494AB0000            	je L_error_fvar_undefined
 15757 0000AA67 48B8-                   	mov rax, sob_void
 15757 0000AA69 [0000000000000000] 
 15758                                  
 15759 0000AA71 488B4510                	mov rax, ENV
 15760 0000AA75 488B00                  	mov rax, qword [rax + 8 * 0]
 15761 0000AA78 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<=?
 15762 0000AA7B 50                      	push rax
 15763 0000AA7C 6A01                    	push 1	; arg count
 15764 0000AA7E 488B4520                	mov rax, PARAM(0)	; param make-run
 15765 0000AA82 803804                  	cmp byte [rax], T_closure
 15766 0000AA85 0F85F4AB0000            	jne L_error_non_closure
 15767 0000AA8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 15768 0000AA8E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15769 0000AA91 48890425[F7150000]      	mov qword [free_var_123], rax	; free var <=
 15770 0000AA99 803805                  	cmp byte [rax], T_undefined
 15771 0000AA9C 0F8459AB0000            	je L_error_fvar_undefined
 15772 0000AAA2 48B8-                   	mov rax, sob_void
 15772 0000AAA4 [0000000000000000] 
 15773                                  
 15774 0000AAAC 488B4510                	mov rax, ENV
 15775 0000AAB0 488B4008                	mov rax, qword [rax + 8 * 1]
 15776 0000AAB4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 15777 0000AAB7 50                      	push rax
 15778 0000AAB8 6A01                    	push 1	; arg count
 15779 0000AABA 488B4520                	mov rax, PARAM(0)	; param make-run
 15780 0000AABE 803804                  	cmp byte [rax], T_closure
 15781 0000AAC1 0F85B8AB0000            	jne L_error_non_closure
 15782 0000AAC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15783 0000AACA FF5009                  	call SOB_CLOSURE_CODE(rax)
 15784 0000AACD 48890425[08160000]      	mov qword [free_var_124], rax	; free var >
 15785 0000AAD5 803805                  	cmp byte [rax], T_undefined
 15786 0000AAD8 0F841DAB0000            	je L_error_fvar_undefined
 15787 0000AADE 48B8-                   	mov rax, sob_void
 15787 0000AAE0 [0000000000000000] 
 15788                                  
 15789 0000AAE8 488B4510                	mov rax, ENV
 15790 0000AAEC 488B4010                	mov rax, qword [rax + 8 * 2]
 15791 0000AAF0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>=?
 15792 0000AAF3 50                      	push rax
 15793 0000AAF4 6A01                    	push 1	; arg count
 15794 0000AAF6 488B4520                	mov rax, PARAM(0)	; param make-run
 15795 0000AAFA 803804                  	cmp byte [rax], T_closure
 15796 0000AAFD 0F857CAB0000            	jne L_error_non_closure
 15797 0000AB03 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15798 0000AB06 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15799 0000AB09 48890425[19160000]      	mov qword [free_var_125], rax	; free var >=
 15800 0000AB11 803805                  	cmp byte [rax], T_undefined
 15801 0000AB14 0F84E1AA0000            	je L_error_fvar_undefined
 15802 0000AB1A 48B8-                   	mov rax, sob_void
 15802 0000AB1C [0000000000000000] 
 15803                                  
 15804 0000AB24 488B4510                	mov rax, ENV
 15805 0000AB28 488B4018                	mov rax, qword [rax + 8 * 3]
 15806 0000AB2C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin=?
 15807 0000AB2F 50                      	push rax
 15808 0000AB30 6A01                    	push 1	; arg count
 15809 0000AB32 488B4520                	mov rax, PARAM(0)	; param make-run
 15810 0000AB36 803804                  	cmp byte [rax], T_closure
 15811 0000AB39 0F8540AB0000            	jne L_error_non_closure
 15812 0000AB3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 15813 0000AB42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15814 0000AB45 48890425[2A160000]      	mov qword [free_var_126], rax	; free var =
 15815 0000AB4D 803805                  	cmp byte [rax], T_undefined
 15816 0000AB50 0F84A5AA0000            	je L_error_fvar_undefined
 15817 0000AB56 48B8-                   	mov rax, sob_void
 15817 0000AB58 [0000000000000000] 
 15818 0000AB60 C9                      	leave
 15819 0000AB61 C21800                  	ret AND_KILL_FRAME(1)
 15820                                  .L_lambda_simple_end_057b:	; new closure is in rax
 15821 0000AB64 803804                  	cmp byte [rax], T_closure
 15822 0000AB67 0F8512AB0000            	jne L_error_non_closure
 15823 0000AB6D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15824                                  
 15825                                  	; recycling the current frame
 15826 0000AB70 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15827 0000AB73 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15828 0000AB76 B905000000              	mov rcx, 1 + 4
 15829 0000AB7B 488B5D18                	mov rbx, COUNT
 15830 0000AB7F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15831 0000AB84 488D55F8                	lea rdx, [rbp - 8 * 1]
 15832                                  .L_tc_recycle_frame_loop_074f:
 15833 0000AB88 4883F900                	cmp rcx, 0
 15834 0000AB8C 7413                    	je .L_tc_recycle_frame_done_074f
 15835 0000AB8E 488B32                  	mov rsi, qword [rdx]
 15836 0000AB91 488933                  	mov qword [rbx], rsi
 15837 0000AB94 48FFC9                  	dec rcx
 15838 0000AB97 4883EB08                	sub rbx, 8 * 1
 15839 0000AB9B 4883EA08                	sub rdx, 8 * 1
 15840 0000AB9F EBE7                    	jmp .L_tc_recycle_frame_loop_074f
 15841                                  .L_tc_recycle_frame_done_074f:
 15842 0000ABA1 488D6308                	lea rsp, [rbx + 8 * 1]
 15843 0000ABA5 5D                      	pop rbp	; the proc will restore it!
 15844 0000ABA6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15845 0000ABA9 C9                      	leave
 15846 0000ABAA C21800                  	ret AND_KILL_FRAME(1)
 15847                                  .L_lambda_simple_end_0577:	; new closure is in rax
 15848 0000ABAD 803804                  	cmp byte [rax], T_closure
 15849 0000ABB0 0F85C9AA0000            	jne L_error_non_closure
 15850 0000ABB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15851                                  
 15852                                  	; recycling the current frame
 15853 0000ABB9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15854 0000ABBC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15855 0000ABBF B905000000              	mov rcx, 1 + 4
 15856 0000ABC4 488B5D18                	mov rbx, COUNT
 15857 0000ABC8 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15858 0000ABCD 488D55F8                	lea rdx, [rbp - 8 * 1]
 15859                                  .L_tc_recycle_frame_loop_0750:
 15860 0000ABD1 4883F900                	cmp rcx, 0
 15861 0000ABD5 7413                    	je .L_tc_recycle_frame_done_0750
 15862 0000ABD7 488B32                  	mov rsi, qword [rdx]
 15863 0000ABDA 488933                  	mov qword [rbx], rsi
 15864 0000ABDD 48FFC9                  	dec rcx
 15865 0000ABE0 4883EB08                	sub rbx, 8 * 1
 15866 0000ABE4 4883EA08                	sub rdx, 8 * 1
 15867 0000ABE8 EBE7                    	jmp .L_tc_recycle_frame_loop_0750
 15868                                  .L_tc_recycle_frame_done_0750:
 15869 0000ABEA 488D6308                	lea rsp, [rbx + 8 * 1]
 15870 0000ABEE 5D                      	pop rbp	; the proc will restore it!
 15871 0000ABEF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15872 0000ABF2 C9                      	leave
 15873 0000ABF3 C21800                  	ret AND_KILL_FRAME(1)
 15874                                  .L_lambda_simple_end_0575:	; new closure is in rax
 15875 0000ABF6 803804                  	cmp byte [rax], T_closure
 15876 0000ABF9 0F8580AA0000            	jne L_error_non_closure
 15877 0000ABFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 15878                                  
 15879                                  	; recycling the current frame
 15880 0000AC02 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15881 0000AC05 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15882 0000AC08 B905000000              	mov rcx, 1 + 4
 15883 0000AC0D 488B5D18                	mov rbx, COUNT
 15884 0000AC11 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15885 0000AC16 488D55F8                	lea rdx, [rbp - 8 * 1]
 15886                                  .L_tc_recycle_frame_loop_0751:
 15887 0000AC1A 4883F900                	cmp rcx, 0
 15888 0000AC1E 7413                    	je .L_tc_recycle_frame_done_0751
 15889 0000AC20 488B32                  	mov rsi, qword [rdx]
 15890 0000AC23 488933                  	mov qword [rbx], rsi
 15891 0000AC26 48FFC9                  	dec rcx
 15892 0000AC29 4883EB08                	sub rbx, 8 * 1
 15893 0000AC2D 4883EA08                	sub rdx, 8 * 1
 15894 0000AC31 EBE7                    	jmp .L_tc_recycle_frame_loop_0751
 15895                                  .L_tc_recycle_frame_done_0751:
 15896 0000AC33 488D6308                	lea rsp, [rbx + 8 * 1]
 15897 0000AC37 5D                      	pop rbp	; the proc will restore it!
 15898 0000AC38 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15899 0000AC3B C9                      	leave
 15900 0000AC3C C21800                  	ret AND_KILL_FRAME(1)
 15901                                  .L_lambda_simple_end_0573:	; new closure is in rax
 15902 0000AC3F 803804                  	cmp byte [rax], T_closure
 15903 0000AC42 0F8537AA0000            	jne L_error_non_closure
 15904 0000AC48 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15905                                  
 15906                                  	; recycling the current frame
 15907 0000AC4B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15908 0000AC4E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15909 0000AC51 B905000000              	mov rcx, 1 + 4
 15910 0000AC56 488B5D18                	mov rbx, COUNT
 15911 0000AC5A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15912 0000AC5F 488D55F8                	lea rdx, [rbp - 8 * 1]
 15913                                  .L_tc_recycle_frame_loop_0752:
 15914 0000AC63 4883F900                	cmp rcx, 0
 15915 0000AC67 7413                    	je .L_tc_recycle_frame_done_0752
 15916 0000AC69 488B32                  	mov rsi, qword [rdx]
 15917 0000AC6C 488933                  	mov qword [rbx], rsi
 15918 0000AC6F 48FFC9                  	dec rcx
 15919 0000AC72 4883EB08                	sub rbx, 8 * 1
 15920 0000AC76 4883EA08                	sub rdx, 8 * 1
 15921 0000AC7A EBE7                    	jmp .L_tc_recycle_frame_loop_0752
 15922                                  .L_tc_recycle_frame_done_0752:
 15923 0000AC7C 488D6308                	lea rsp, [rbx + 8 * 1]
 15924 0000AC80 5D                      	pop rbp	; the proc will restore it!
 15925 0000AC81 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15926 0000AC84 C9                      	leave
 15927 0000AC85 C21800                  	ret AND_KILL_FRAME(1)
 15928                                  .L_lambda_simple_end_0571:	; new closure is in rax
 15929 0000AC88 803804                  	cmp byte [rax], T_closure
 15930 0000AC8B 0F85EEA90000            	jne L_error_non_closure
 15931 0000AC91 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15932                                  
 15933                                  	; recycling the current frame
 15934 0000AC94 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15935 0000AC97 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15936 0000AC9A B905000000              	mov rcx, 1 + 4
 15937 0000AC9F 488B5D18                	mov rbx, COUNT
 15938 0000ACA3 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15939 0000ACA8 488D55F8                	lea rdx, [rbp - 8 * 1]
 15940                                  .L_tc_recycle_frame_loop_0753:
 15941 0000ACAC 4883F900                	cmp rcx, 0
 15942 0000ACB0 7413                    	je .L_tc_recycle_frame_done_0753
 15943 0000ACB2 488B32                  	mov rsi, qword [rdx]
 15944 0000ACB5 488933                  	mov qword [rbx], rsi
 15945 0000ACB8 48FFC9                  	dec rcx
 15946 0000ACBB 4883EB08                	sub rbx, 8 * 1
 15947 0000ACBF 4883EA08                	sub rdx, 8 * 1
 15948 0000ACC3 EBE7                    	jmp .L_tc_recycle_frame_loop_0753
 15949                                  .L_tc_recycle_frame_done_0753:
 15950 0000ACC5 488D6308                	lea rsp, [rbx + 8 * 1]
 15951 0000ACC9 5D                      	pop rbp	; the proc will restore it!
 15952 0000ACCA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15953 0000ACCD C9                      	leave
 15954 0000ACCE C21800                  	ret AND_KILL_FRAME(1)
 15955                                  .L_lambda_simple_end_0570:	; new closure is in rax
 15956 0000ACD1 803804                  	cmp byte [rax], T_closure
 15957 0000ACD4 0F85A5A90000            	jne L_error_non_closure
 15958 0000ACDA FF7001                  	push SOB_CLOSURE_ENV(rax)
 15959                                  
 15960                                  	; recycling the current frame
 15961 0000ACDD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15962 0000ACE0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15963 0000ACE3 B905000000              	mov rcx, 1 + 4
 15964 0000ACE8 488B5D18                	mov rbx, COUNT
 15965 0000ACEC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15966 0000ACF1 488D55F8                	lea rdx, [rbp - 8 * 1]
 15967                                  .L_tc_recycle_frame_loop_0754:
 15968 0000ACF5 4883F900                	cmp rcx, 0
 15969 0000ACF9 7413                    	je .L_tc_recycle_frame_done_0754
 15970 0000ACFB 488B32                  	mov rsi, qword [rdx]
 15971 0000ACFE 488933                  	mov qword [rbx], rsi
 15972 0000AD01 48FFC9                  	dec rcx
 15973 0000AD04 4883EB08                	sub rbx, 8 * 1
 15974 0000AD08 4883EA08                	sub rdx, 8 * 1
 15975 0000AD0C EBE7                    	jmp .L_tc_recycle_frame_loop_0754
 15976                                  .L_tc_recycle_frame_done_0754:
 15977 0000AD0E 488D6308                	lea rsp, [rbx + 8 * 1]
 15978 0000AD12 5D                      	pop rbp	; the proc will restore it!
 15979 0000AD13 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15980 0000AD16 C9                      	leave
 15981 0000AD17 C21800                  	ret AND_KILL_FRAME(1)
 15982                                  .L_lambda_simple_end_056f:	; new closure is in rax
 15983 0000AD1A 803804                  	cmp byte [rax], T_closure
 15984 0000AD1D 0F855CA90000            	jne L_error_non_closure
 15985 0000AD23 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15986                                  
 15987                                  	; recycling the current frame
 15988 0000AD26 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 15989 0000AD29 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 15990 0000AD2C B905000000              	mov rcx, 1 + 4
 15991 0000AD31 488B5D18                	mov rbx, COUNT
 15992 0000AD35 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 15993 0000AD3A 488D55F8                	lea rdx, [rbp - 8 * 1]
 15994                                  .L_tc_recycle_frame_loop_0755:
 15995 0000AD3E 4883F900                	cmp rcx, 0
 15996 0000AD42 7413                    	je .L_tc_recycle_frame_done_0755
 15997 0000AD44 488B32                  	mov rsi, qword [rdx]
 15998 0000AD47 488933                  	mov qword [rbx], rsi
 15999 0000AD4A 48FFC9                  	dec rcx
 16000 0000AD4D 4883EB08                	sub rbx, 8 * 1
 16001 0000AD51 4883EA08                	sub rdx, 8 * 1
 16002 0000AD55 EBE7                    	jmp .L_tc_recycle_frame_loop_0755
 16003                                  .L_tc_recycle_frame_done_0755:
 16004 0000AD57 488D6308                	lea rsp, [rbx + 8 * 1]
 16005 0000AD5B 5D                      	pop rbp	; the proc will restore it!
 16006 0000AD5C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16007 0000AD5F C9                      	leave
 16008 0000AD60 C21800                  	ret AND_KILL_FRAME(1)
 16009                                  .L_lambda_simple_end_056c:	; new closure is in rax
 16010 0000AD63 803804                  	cmp byte [rax], T_closure
 16011 0000AD66 0F8513A90000            	jne L_error_non_closure
 16012 0000AD6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 16013 0000AD6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 16014                                  
 16015 0000AD72 4889C7                  	mov rdi, rax
 16016 0000AD75 E8C0AA0000              	call print_sexpr_if_not_void
 16017                                  
 16018 0000AD7A 48B8-                   	mov rax, L_constants + 1881
 16018 0000AD7C [5907000000000000] 
 16019 0000AD84 50                      	push rax
 16020 0000AD85 6A01                    	push 1	; arg count
 16021 0000AD87 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16022 0000AD8C E897A90000              	call malloc
 16023 0000AD91 50                      	push rax
 16024 0000AD92 BF00000000              	mov rdi, 8 * 0	; new rib
 16025 0000AD97 E88CA90000              	call malloc
 16026 0000AD9C 50                      	push rax
 16027 0000AD9D BF08000000              	mov rdi, 8 * 1	; extended env
 16028 0000ADA2 E881A90000              	call malloc
 16029 0000ADA7 488B7D10                	mov rdi, ENV
 16030 0000ADAB BE00000000              	mov rsi, 0
 16031 0000ADB0 BA01000000              	mov rdx, 1
 16032                                  .L_lambda_simple_env_loop_057c:	; ext_env[i + 1] <-- env[i]
 16033 0000ADB5 4883FE00                	cmp rsi, 0
 16034 0000ADB9 7410                    	je .L_lambda_simple_env_end_057c
 16035 0000ADBB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16036 0000ADBF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16037 0000ADC3 48FFC6                  	inc rsi
 16038 0000ADC6 48FFC2                  	inc rdx
 16039 0000ADC9 EBEA                    	jmp .L_lambda_simple_env_loop_057c
 16040                                  .L_lambda_simple_env_end_057c:
 16041 0000ADCB 5B                      	pop rbx
 16042 0000ADCC BE00000000              	mov rsi, 0
 16043                                  .L_lambda_simple_params_loop_057c:	; copy params
 16044 0000ADD1 4883FE00                	cmp rsi, 0
 16045 0000ADD5 740E                    	je .L_lambda_simple_params_end_057c
 16046 0000ADD7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16047 0000ADDC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16048 0000ADE0 48FFC6                  	inc rsi
 16049 0000ADE3 EBEC                    	jmp .L_lambda_simple_params_loop_057c
 16050                                  .L_lambda_simple_params_end_057c:
 16051 0000ADE5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16052 0000ADE8 4889C3                  	mov rbx, rax
 16053 0000ADEB 58                      	pop rax
 16054 0000ADEC C60004                  	mov byte [rax], T_closure
 16055 0000ADEF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16056 0000ADF3 48C74009[00AE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_057c
 16057 0000ADFB E93F050000              	jmp .L_lambda_simple_end_057c
 16058                                  .L_lambda_simple_code_057c:	; lambda-simple body
 16059 0000AE00 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16060 0000AE06 740B                    	je .L_lambda_simple_arity_check_ok_057c
 16061 0000AE08 FF742410                	push qword [rsp + 8 * 2]
 16062 0000AE0C 6A01                    	push 1
 16063 0000AE0E E9CEA80000              	jmp L_error_incorrect_arity_simple
 16064                                  .L_lambda_simple_arity_check_ok_057c:
 16065 0000AE13 C8000000                	enter 0, 0
 16066                                  
 16067 0000AE17 BF08000000              	mov rdi, 8
 16068 0000AE1C E807A90000              	call malloc
 16069 0000AE21 488B5D20                	mov rbx, PARAM(0)	; param run
 16070 0000AE25 488918                  	mov [rax], rbx	; box run
 16071 0000AE28 48894520                	mov PARAM(0), rax	;replace param run with box
 16072 0000AE2C 48B8-                   	mov rax, sob_void
 16072 0000AE2E [0000000000000000] 
 16073                                  
 16074 0000AE36 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16075 0000AE3B E8E8A80000              	call malloc
 16076 0000AE40 50                      	push rax
 16077 0000AE41 BF08000000              	mov rdi, 8 * 1	; new rib
 16078 0000AE46 E8DDA80000              	call malloc
 16079 0000AE4B 50                      	push rax
 16080 0000AE4C BF10000000              	mov rdi, 8 * 2	; extended env
 16081 0000AE51 E8D2A80000              	call malloc
 16082 0000AE56 488B7D10                	mov rdi, ENV
 16083 0000AE5A BE00000000              	mov rsi, 0
 16084 0000AE5F BA01000000              	mov rdx, 1
 16085                                  .L_lambda_simple_env_loop_057d:	; ext_env[i + 1] <-- env[i]
 16086 0000AE64 4883FE01                	cmp rsi, 1
 16087 0000AE68 7410                    	je .L_lambda_simple_env_end_057d
 16088 0000AE6A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16089 0000AE6E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16090 0000AE72 48FFC6                  	inc rsi
 16091 0000AE75 48FFC2                  	inc rdx
 16092 0000AE78 EBEA                    	jmp .L_lambda_simple_env_loop_057d
 16093                                  .L_lambda_simple_env_end_057d:
 16094 0000AE7A 5B                      	pop rbx
 16095 0000AE7B BE00000000              	mov rsi, 0
 16096                                  .L_lambda_simple_params_loop_057d:	; copy params
 16097 0000AE80 4883FE01                	cmp rsi, 1
 16098 0000AE84 740E                    	je .L_lambda_simple_params_end_057d
 16099 0000AE86 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16100 0000AE8B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16101 0000AE8F 48FFC6                  	inc rsi
 16102 0000AE92 EBEC                    	jmp .L_lambda_simple_params_loop_057d
 16103                                  .L_lambda_simple_params_end_057d:
 16104 0000AE94 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16105 0000AE97 4889C3                  	mov rbx, rax
 16106 0000AE9A 58                      	pop rax
 16107 0000AE9B C60004                  	mov byte [rax], T_closure
 16108 0000AE9E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16109 0000AEA2 48C74009[AFAE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_057d
 16110 0000AEAA E90D010000              	jmp .L_lambda_simple_end_057d
 16111                                  .L_lambda_simple_code_057d:	; lambda-simple body
 16112 0000AEAF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16113 0000AEB5 740B                    	je .L_lambda_simple_arity_check_ok_057d
 16114 0000AEB7 FF742410                	push qword [rsp + 8 * 2]
 16115 0000AEBB 6A02                    	push 2
 16116 0000AEBD E91FA80000              	jmp L_error_incorrect_arity_simple
 16117                                  .L_lambda_simple_arity_check_ok_057d:
 16118 0000AEC2 C8000000                	enter 0, 0
 16119 0000AEC6 488B4520                	mov rax, PARAM(0)	; param n
 16120 0000AECA 50                      	push rax
 16121 0000AECB 6A01                    	push 1	; arg count
 16122 0000AECD 488B0425[970F0000]      	mov rax, qword [free_var_27]	; free var zero?
 16123 0000AED5 803805                  	cmp byte [rax], T_undefined
 16124 0000AED8 0F841DA70000            	je L_error_fvar_undefined
 16125 0000AEDE 803804                  	cmp byte [rax], T_closure
 16126 0000AEE1 0F8598A70000            	jne L_error_non_closure
 16127 0000AEE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16128 0000AEEA FF5009                  	call SOB_CLOSURE_CODE(rax)
 16129                                  
 16130 0000AEED 483D[02000000]          	cmp rax, sob_boolean_false
 16131 0000AEF3 740F                    	je .L_if_else_041c
 16132 0000AEF5 48B8-                   	mov rax, L_constants + 1
 16132 0000AEF7 [0100000000000000] 
 16133                                  
 16134 0000AEFF E9B4000000              	jmp .L_if_end_041c
 16135                                  
 16136                                  	.L_if_else_041c:
 16137                                  	; preparing a tail-call
 16138 0000AF04 488B4528                	mov rax, PARAM(1)	; param ch
 16139 0000AF08 50                      	push rax
 16140 0000AF09 48B8-                   	mov rax, L_constants + 2158
 16140 0000AF0B [6E08000000000000] 
 16141 0000AF13 50                      	push rax
 16142 0000AF14 488B4520                	mov rax, PARAM(0)	; param n
 16143 0000AF18 50                      	push rax
 16144 0000AF19 6A02                    	push 2	; arg count
 16145 0000AF1B 488B0425[91150000]      	mov rax, qword [free_var_117]	; free var -
 16146 0000AF23 803805                  	cmp byte [rax], T_undefined
 16147 0000AF26 0F84CFA60000            	je L_error_fvar_undefined
 16148 0000AF2C 803804                  	cmp byte [rax], T_closure
 16149 0000AF2F 0F854AA70000            	jne L_error_non_closure
 16150 0000AF35 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16151 0000AF38 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16152 0000AF3B 50                      	push rax
 16153 0000AF3C 6A02                    	push 2	; arg count
 16154 0000AF3E 488B4510                	mov rax, ENV
 16155 0000AF42 488B00                  	mov rax, qword [rax + 8 * 0]
 16156 0000AF45 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16157 0000AF48 488B00                  	mov rax, qword [rax]
 16158 0000AF4B 803804                  	cmp byte [rax], T_closure
 16159 0000AF4E 0F852BA70000            	jne L_error_non_closure
 16160 0000AF54 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16161 0000AF57 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16162 0000AF5A 50                      	push rax
 16163 0000AF5B 488B4528                	mov rax, PARAM(1)	; param ch
 16164 0000AF5F 50                      	push rax
 16165 0000AF60 6A02                    	push 2	; arg count
 16166 0000AF62 488B0425[A90E0000]      	mov rax, qword [free_var_13]	; free var cons
 16167 0000AF6A 803805                  	cmp byte [rax], T_undefined
 16168 0000AF6D 0F8488A60000            	je L_error_fvar_undefined
 16169 0000AF73 803804                  	cmp byte [rax], T_closure
 16170 0000AF76 0F8503A70000            	jne L_error_non_closure
 16171 0000AF7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 16172                                  
 16173                                  	; recycling the current frame
 16174 0000AF7F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16175 0000AF82 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16176 0000AF85 B906000000              	mov rcx, 2 + 4
 16177 0000AF8A 488B5D18                	mov rbx, COUNT
 16178 0000AF8E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16179 0000AF93 488D55F8                	lea rdx, [rbp - 8 * 1]
 16180                                  .L_tc_recycle_frame_loop_0756:
 16181 0000AF97 4883F900                	cmp rcx, 0
 16182 0000AF9B 7413                    	je .L_tc_recycle_frame_done_0756
 16183 0000AF9D 488B32                  	mov rsi, qword [rdx]
 16184 0000AFA0 488933                  	mov qword [rbx], rsi
 16185 0000AFA3 48FFC9                  	dec rcx
 16186 0000AFA6 4883EB08                	sub rbx, 8 * 1
 16187 0000AFAA 4883EA08                	sub rdx, 8 * 1
 16188 0000AFAE EBE7                    	jmp .L_tc_recycle_frame_loop_0756
 16189                                  .L_tc_recycle_frame_done_0756:
 16190 0000AFB0 488D6308                	lea rsp, [rbx + 8 * 1]
 16191 0000AFB4 5D                      	pop rbp	; the proc will restore it!
 16192 0000AFB5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16193                                  
 16194                                  	.L_if_end_041c:
 16195 0000AFB8 C9                      	leave
 16196 0000AFB9 C22000                  	ret AND_KILL_FRAME(2)
 16197                                  .L_lambda_simple_end_057d:	; new closure is in rax
 16198                                  
 16199 0000AFBC 50                      	push rax
 16200 0000AFBD 488B4520                	mov rax, PARAM(0)	; param run
 16201                                  
 16202 0000AFC1 8F00                    	pop qword[rax]
 16203 0000AFC3 48B8-                   	mov rax, sob_void
 16203 0000AFC5 [0000000000000000] 
 16204                                  
 16205 0000AFCD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16206 0000AFD2 E851A70000              	call malloc
 16207 0000AFD7 50                      	push rax
 16208 0000AFD8 BF08000000              	mov rdi, 8 * 1	; new rib
 16209 0000AFDD E846A70000              	call malloc
 16210 0000AFE2 50                      	push rax
 16211 0000AFE3 BF10000000              	mov rdi, 8 * 2	; extended env
 16212 0000AFE8 E83BA70000              	call malloc
 16213 0000AFED 488B7D10                	mov rdi, ENV
 16214 0000AFF1 BE00000000              	mov rsi, 0
 16215 0000AFF6 BA01000000              	mov rdx, 1
 16216                                  .L_lambda_opt_env_loop_00be:	; ext_env[i + 1] <-- env[i]
 16217 0000AFFB 4883FE01                	cmp rsi, 1
 16218 0000AFFF 7410                    	je .L_lambda_opt_env_end_00be
 16219 0000B001 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16220 0000B005 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16221 0000B009 48FFC6                  	inc rsi
 16222 0000B00C 48FFC2                  	inc rdx
 16223 0000B00F EBEA                    	jmp .L_lambda_opt_env_loop_00be
 16224                                  .L_lambda_opt_env_end_00be:
 16225 0000B011 5B                      	pop rbx
 16226 0000B012 BE00000000              	mov rsi, 0
 16227                                  .L_lambda_opt_params_loop_00be:	; copy params
 16228 0000B017 4883FE01                	cmp rsi, 1
 16229 0000B01B 740E                    	je .L_lambda_opt_params_end_00be
 16230 0000B01D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16231 0000B022 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16232 0000B026 48FFC6                  	inc rsi
 16233 0000B029 EBEC                    	jmp .L_lambda_opt_params_loop_00be
 16234                                  .L_lambda_opt_params_end_00be:
 16235 0000B02B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16236 0000B02E 4889C3                  	mov rbx, rax
 16237 0000B031 58                      	pop rax
 16238 0000B032 C60004                  	mov byte [rax], T_closure
 16239 0000B035 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16240 0000B039 48C74009[46B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00be
 16241 0000B041 E9F5020000              	jmp .L_lambda_opt_end_00be
 16242                                  .L_lambda_opt_code_00be:	; lambda-simple body
 16243 0000B046 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 16244 0000B04C 740D                    	je .L_lambda_opt_arity_check_exact_00be ;	 if equal, go to exact arity
 16245 0000B04E 7F42                    	jg .L_lambda_opt_arity_check_more_00be ;	 if greater than, go to arity more
 16246 0000B050 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 16247 0000B054 6A01                     	push 1
 16248 0000B056 E99AA60000              	jmp L_error_incorrect_arity_opt
 16249                                  	.L_lambda_opt_arity_check_exact_00be:
 16250 0000B05B 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 16251 0000B060 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 16252 0000B065 4883EC08                	sub rsp, 8
 16253 0000B069 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 16254                                  	.L_lambda_opt_exact_shifting_loop_00be:
 16255 0000B06D 488B5108                	mov rdx, [rcx + 8]
 16256 0000B071 488911                  	mov [rcx], rdx
 16257 0000B074 4883C108                	add rcx, 8
 16258 0000B078 4839CB                  	cmp rbx, rcx
 16259 0000B07B 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00be
 16260                                  	.L_lambda_opt_exact_shifting_loop_end_00be:
 16261 0000B07D 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 16262 0000B084 4883C001                	add rax, 1 ; 	arg count += 1
 16263 0000B088 4889442410              	mov qword [rsp + 8 * 2], rax
 16264 0000B08D E987000000              	jmp .L_lambda_opt_stack_adjusted_00be
 16265                                  	.L_lambda_opt_arity_check_more_00be:
 16266 0000B092 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 16266 0000B094 [0100000000000000] 
 16267 0000B09C 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 16268 0000B0A2 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00be
 16269                                  	.L_lambda_opt_stack_shrink_loop_00be:
 16270 0000B0A4 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 16271 0000B0A9 E87AA60000              	call malloc ;	 allocated memory for the optional scheme list
 16272 0000B0AE C60021                  	mov byte[rax], T_pair ;	 set type pair
 16273 0000B0B1 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 16274 0000B0B5 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 16275 0000B0B8 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 16276 0000B0BD 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 16277 0000B0C2 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 16278 0000B0C6 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 16279                                  	.L_lambda_opt_more_shifting_loop_00be:
 16280 0000B0CB 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 16281 0000B0CE 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 16282 0000B0D2 4883EB08                	sub rbx, 8 
 16283 0000B0D6 4839DC                  	cmp rsp, rbx
 16284 0000B0D9 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00be
 16285                                  	.L_lambda_opt_more_shifting_loop_end_00be:
 16286 0000B0DB 4883C408                	add rsp, 8 ;	 update rsp
 16287 0000B0DF 488B5C2410              	mov rbx, [rsp + 8 * 2]
 16288 0000B0E4 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 16289 0000B0E8 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 16290 0000B0ED 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16291 0000B0F3 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00be
 16292                                  	.L_lambda_opt_stack_shrink_loop_exit_00be:
 16293 0000B0F5 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 16294 0000B0FA 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 16295 0000B0FF BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 16296 0000B104 E81FA60000              	call malloc ;	 allocated memory for the optional scheme list
 16297 0000B109 C60021                  	mov byte[rax], T_pair ;	 set type pair
 16298 0000B10C 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 16299 0000B110 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 16300 0000B114 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 16301                                  	.L_lambda_opt_stack_adjusted_00be:
 16302 0000B119 C8000000                	enter 0, 0
 16303 0000B11D 488B4528                	mov rax, PARAM(1)	; param chs
 16304 0000B121 50                      	push rax
 16305 0000B122 6A01                    	push 1	; arg count
 16306 0000B124 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 16307 0000B12C 803805                  	cmp byte [rax], T_undefined
 16308 0000B12F 0F84C6A40000            	je L_error_fvar_undefined
 16309 0000B135 803804                  	cmp byte [rax], T_closure
 16310 0000B138 0F8541A50000            	jne L_error_non_closure
 16311 0000B13E FF7001                  	push SOB_CLOSURE_ENV(rax)
 16312 0000B141 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16313                                  
 16314 0000B144 483D[02000000]          	cmp rax, sob_boolean_false
 16315 0000B14A 7469                    	je .L_if_else_041d
 16316                                  	; preparing a tail-call
 16317 0000B14C 48B8-                   	mov rax, L_constants + 4
 16317 0000B14E [0400000000000000] 
 16318 0000B156 50                      	push rax
 16319 0000B157 488B4520                	mov rax, PARAM(0)	; param n
 16320 0000B15B 50                      	push rax
 16321 0000B15C 6A02                    	push 2	; arg count
 16322 0000B15E 488B4510                	mov rax, ENV
 16323 0000B162 488B00                  	mov rax, qword [rax + 8 * 0]
 16324 0000B165 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16325 0000B168 488B00                  	mov rax, qword [rax]
 16326 0000B16B 803804                  	cmp byte [rax], T_closure
 16327 0000B16E 0F850BA50000            	jne L_error_non_closure
 16328 0000B174 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16329                                  
 16330                                  	; recycling the current frame
 16331 0000B177 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16332 0000B17A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16333 0000B17D B906000000              	mov rcx, 2 + 4
 16334 0000B182 488B5D18                	mov rbx, COUNT
 16335 0000B186 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16336 0000B18B 488D55F8                	lea rdx, [rbp - 8 * 1]
 16337                                  .L_tc_recycle_frame_loop_0757:
 16338 0000B18F 4883F900                	cmp rcx, 0
 16339 0000B193 7413                    	je .L_tc_recycle_frame_done_0757
 16340 0000B195 488B32                  	mov rsi, qword [rdx]
 16341 0000B198 488933                  	mov qword [rbx], rsi
 16342 0000B19B 48FFC9                  	dec rcx
 16343 0000B19E 4883EB08                	sub rbx, 8 * 1
 16344 0000B1A2 4883EA08                	sub rdx, 8 * 1
 16345 0000B1A6 EBE7                    	jmp .L_tc_recycle_frame_loop_0757
 16346                                  .L_tc_recycle_frame_done_0757:
 16347 0000B1A8 488D6308                	lea rsp, [rbx + 8 * 1]
 16348 0000B1AC 5D                      	pop rbp	; the proc will restore it!
 16349 0000B1AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16350                                  
 16351 0000B1B0 E982010000              	jmp .L_if_end_041d
 16352                                  
 16353                                  	.L_if_else_041d:
 16354 0000B1B5 488B4528                	mov rax, PARAM(1)	; param chs
 16355 0000B1B9 50                      	push rax
 16356 0000B1BA 6A01                    	push 1	; arg count
 16357 0000B1BC 488B0425[DD0D0000]      	mov rax, qword [free_var_1]	; free var pair?
 16358 0000B1C4 803805                  	cmp byte [rax], T_undefined
 16359 0000B1C7 0F842EA40000            	je L_error_fvar_undefined
 16360 0000B1CD 803804                  	cmp byte [rax], T_closure
 16361 0000B1D0 0F85A9A40000            	jne L_error_non_closure
 16362 0000B1D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16363 0000B1D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16364                                  
 16365 0000B1DC 483D[02000000]          	cmp rax, sob_boolean_false
 16366 0000B1E2 744C                    	je .L_if_else_041f
 16367 0000B1E4 488B4528                	mov rax, PARAM(1)	; param chs
 16368 0000B1E8 50                      	push rax
 16369 0000B1E9 6A01                    	push 1	; arg count
 16370 0000B1EB 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 16371 0000B1F3 803805                  	cmp byte [rax], T_undefined
 16372 0000B1F6 0F84FFA30000            	je L_error_fvar_undefined
 16373 0000B1FC 803804                  	cmp byte [rax], T_closure
 16374 0000B1FF 0F857AA40000            	jne L_error_non_closure
 16375 0000B205 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16376 0000B208 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16377 0000B20B 50                      	push rax
 16378 0000B20C 6A01                    	push 1	; arg count
 16379 0000B20E 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 16380 0000B216 803805                  	cmp byte [rax], T_undefined
 16381 0000B219 0F84DCA30000            	je L_error_fvar_undefined
 16382 0000B21F 803804                  	cmp byte [rax], T_closure
 16383 0000B222 0F8557A40000            	jne L_error_non_closure
 16384 0000B228 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16385 0000B22B FF5009                  	call SOB_CLOSURE_CODE(rax)
 16386                                  
 16387 0000B22E EB0A                    	jmp .L_if_end_041f
 16388                                  
 16389                                  	.L_if_else_041f:
 16390 0000B230 48B8-                   	mov rax, L_constants + 2
 16390 0000B232 [0200000000000000] 
 16391                                  
 16392                                  	.L_if_end_041f:
 16393                                  
 16394 0000B23A 483D[02000000]          	cmp rax, sob_boolean_false
 16395 0000B240 0F8483000000            	je .L_if_else_041e
 16396                                  	; preparing a tail-call
 16397 0000B246 488B4528                	mov rax, PARAM(1)	; param chs
 16398 0000B24A 50                      	push rax
 16399 0000B24B 6A01                    	push 1	; arg count
 16400 0000B24D 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 16401 0000B255 803805                  	cmp byte [rax], T_undefined
 16402 0000B258 0F849DA30000            	je L_error_fvar_undefined
 16403 0000B25E 803804                  	cmp byte [rax], T_closure
 16404 0000B261 0F8518A40000            	jne L_error_non_closure
 16405 0000B267 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16406 0000B26A FF5009                  	call SOB_CLOSURE_CODE(rax)
 16407 0000B26D 50                      	push rax
 16408 0000B26E 488B4520                	mov rax, PARAM(0)	; param n
 16409 0000B272 50                      	push rax
 16410 0000B273 6A02                    	push 2	; arg count
 16411 0000B275 488B4510                	mov rax, ENV
 16412 0000B279 488B00                  	mov rax, qword [rax + 8 * 0]
 16413 0000B27C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 16414 0000B27F 488B00                  	mov rax, qword [rax]
 16415 0000B282 803804                  	cmp byte [rax], T_closure
 16416 0000B285 0F85F4A30000            	jne L_error_non_closure
 16417 0000B28B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16418                                  
 16419                                  	; recycling the current frame
 16420 0000B28E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16421 0000B291 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16422 0000B294 B906000000              	mov rcx, 2 + 4
 16423 0000B299 488B5D18                	mov rbx, COUNT
 16424 0000B29D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16425 0000B2A2 488D55F8                	lea rdx, [rbp - 8 * 1]
 16426                                  .L_tc_recycle_frame_loop_0758:
 16427 0000B2A6 4883F900                	cmp rcx, 0
 16428 0000B2AA 7413                    	je .L_tc_recycle_frame_done_0758
 16429 0000B2AC 488B32                  	mov rsi, qword [rdx]
 16430 0000B2AF 488933                  	mov qword [rbx], rsi
 16431 0000B2B2 48FFC9                  	dec rcx
 16432 0000B2B5 4883EB08                	sub rbx, 8 * 1
 16433 0000B2B9 4883EA08                	sub rdx, 8 * 1
 16434 0000B2BD EBE7                    	jmp .L_tc_recycle_frame_loop_0758
 16435                                  .L_tc_recycle_frame_done_0758:
 16436 0000B2BF 488D6308                	lea rsp, [rbx + 8 * 1]
 16437 0000B2C3 5D                      	pop rbp	; the proc will restore it!
 16438 0000B2C4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16439                                  
 16440 0000B2C7 EB6E                    	jmp .L_if_end_041e
 16441                                  
 16442                                  	.L_if_else_041e:
 16443                                  	; preparing a tail-call
 16444 0000B2C9 48B8-                   	mov rax, L_constants + 2365
 16444 0000B2CB [3D09000000000000] 
 16445 0000B2D3 50                      	push rax
 16446 0000B2D4 48B8-                   	mov rax, L_constants + 2356
 16446 0000B2D6 [3409000000000000] 
 16447 0000B2DE 50                      	push rax
 16448 0000B2DF 6A02                    	push 2	; arg count
 16449 0000B2E1 488B0425[96100000]      	mov rax, qword [free_var_42]	; free var error
 16450 0000B2E9 803805                  	cmp byte [rax], T_undefined
 16451 0000B2EC 0F8409A30000            	je L_error_fvar_undefined
 16452 0000B2F2 803804                  	cmp byte [rax], T_closure
 16453 0000B2F5 0F8584A30000            	jne L_error_non_closure
 16454 0000B2FB FF7001                  	push SOB_CLOSURE_ENV(rax)
 16455                                  
 16456                                  	; recycling the current frame
 16457 0000B2FE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16458 0000B301 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16459 0000B304 B906000000              	mov rcx, 2 + 4
 16460 0000B309 488B5D18                	mov rbx, COUNT
 16461 0000B30D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16462 0000B312 488D55F8                	lea rdx, [rbp - 8 * 1]
 16463                                  .L_tc_recycle_frame_loop_0759:
 16464 0000B316 4883F900                	cmp rcx, 0
 16465 0000B31A 7413                    	je .L_tc_recycle_frame_done_0759
 16466 0000B31C 488B32                  	mov rsi, qword [rdx]
 16467 0000B31F 488933                  	mov qword [rbx], rsi
 16468 0000B322 48FFC9                  	dec rcx
 16469 0000B325 4883EB08                	sub rbx, 8 * 1
 16470 0000B329 4883EA08                	sub rdx, 8 * 1
 16471 0000B32D EBE7                    	jmp .L_tc_recycle_frame_loop_0759
 16472                                  .L_tc_recycle_frame_done_0759:
 16473 0000B32F 488D6308                	lea rsp, [rbx + 8 * 1]
 16474 0000B333 5D                      	pop rbp	; the proc will restore it!
 16475 0000B334 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16476                                  
 16477                                  	.L_if_end_041e:
 16478                                  
 16479                                  	.L_if_end_041d:
 16480 0000B337 C9                      	leave
 16481 0000B338 C22000                  	ret AND_KILL_FRAME(2)
 16482                                  .L_lambda_opt_end_00be:	; new closure is in rax
 16483 0000B33B C9                      	leave
 16484 0000B33C C21800                  	ret AND_KILL_FRAME(1)
 16485                                  .L_lambda_simple_end_057c:	; new closure is in rax
 16486 0000B33F 803804                  	cmp byte [rax], T_closure
 16487 0000B342 0F8537A30000            	jne L_error_non_closure
 16488 0000B348 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16489 0000B34B FF5009                  	call SOB_CLOSURE_CODE(rax)
 16490 0000B34E 48890425[3B160000]      	mov qword [free_var_127], rax
 16491 0000B356 48B8-                   	mov rax, sob_void
 16491 0000B358 [0000000000000000] 
 16492                                  
 16493 0000B360 4889C7                  	mov rdi, rax
 16494 0000B363 E8D2A40000              	call print_sexpr_if_not_void
 16495                                  
 16496 0000B368 48B8-                   	mov rax, L_constants + 0
 16496 0000B36A [0000000000000000] 
 16497 0000B372 48890425[4C160000]      	mov qword [free_var_128], rax
 16498 0000B37A 48B8-                   	mov rax, sob_void
 16498 0000B37C [0000000000000000] 
 16499                                  
 16500 0000B384 4889C7                  	mov rdi, rax
 16501 0000B387 E8AEA40000              	call print_sexpr_if_not_void
 16502                                  
 16503 0000B38C 48B8-                   	mov rax, L_constants + 0
 16503 0000B38E [0000000000000000] 
 16504 0000B396 48890425[5D160000]      	mov qword [free_var_129], rax
 16505 0000B39E 48B8-                   	mov rax, sob_void
 16505 0000B3A0 [0000000000000000] 
 16506                                  
 16507 0000B3A8 4889C7                  	mov rdi, rax
 16508 0000B3AB E88AA40000              	call print_sexpr_if_not_void
 16509                                  
 16510 0000B3B0 48B8-                   	mov rax, L_constants + 0
 16510 0000B3B2 [0000000000000000] 
 16511 0000B3BA 48890425[6E160000]      	mov qword [free_var_130], rax
 16512 0000B3C2 48B8-                   	mov rax, sob_void
 16512 0000B3C4 [0000000000000000] 
 16513                                  
 16514 0000B3CC 4889C7                  	mov rdi, rax
 16515 0000B3CF E866A40000              	call print_sexpr_if_not_void
 16516                                  
 16517 0000B3D4 48B8-                   	mov rax, L_constants + 0
 16517 0000B3D6 [0000000000000000] 
 16518 0000B3DE 48890425[7F160000]      	mov qword [free_var_131], rax
 16519 0000B3E6 48B8-                   	mov rax, sob_void
 16519 0000B3E8 [0000000000000000] 
 16520                                  
 16521 0000B3F0 4889C7                  	mov rdi, rax
 16522 0000B3F3 E842A40000              	call print_sexpr_if_not_void
 16523                                  
 16524 0000B3F8 48B8-                   	mov rax, L_constants + 0
 16524 0000B3FA [0000000000000000] 
 16525 0000B402 48890425[90160000]      	mov qword [free_var_132], rax
 16526 0000B40A 48B8-                   	mov rax, sob_void
 16526 0000B40C [0000000000000000] 
 16527                                  
 16528 0000B414 4889C7                  	mov rdi, rax
 16529 0000B417 E81EA40000              	call print_sexpr_if_not_void
 16530                                  
 16531 0000B41C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16532 0000B421 E802A30000              	call malloc
 16533 0000B426 50                      	push rax
 16534 0000B427 BF00000000              	mov rdi, 8 * 0	; new rib
 16535 0000B42C E8F7A20000              	call malloc
 16536 0000B431 50                      	push rax
 16537 0000B432 BF08000000              	mov rdi, 8 * 1	; extended env
 16538 0000B437 E8ECA20000              	call malloc
 16539 0000B43C 488B7D10                	mov rdi, ENV
 16540 0000B440 BE00000000              	mov rsi, 0
 16541 0000B445 BA01000000              	mov rdx, 1
 16542                                  .L_lambda_simple_env_loop_057e:	; ext_env[i + 1] <-- env[i]
 16543 0000B44A 4883FE00                	cmp rsi, 0
 16544 0000B44E 7410                    	je .L_lambda_simple_env_end_057e
 16545 0000B450 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16546 0000B454 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16547 0000B458 48FFC6                  	inc rsi
 16548 0000B45B 48FFC2                  	inc rdx
 16549 0000B45E EBEA                    	jmp .L_lambda_simple_env_loop_057e
 16550                                  .L_lambda_simple_env_end_057e:
 16551 0000B460 5B                      	pop rbx
 16552 0000B461 BE00000000              	mov rsi, 0
 16553                                  .L_lambda_simple_params_loop_057e:	; copy params
 16554 0000B466 4883FE00                	cmp rsi, 0
 16555 0000B46A 740E                    	je .L_lambda_simple_params_end_057e
 16556 0000B46C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16557 0000B471 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16558 0000B475 48FFC6                  	inc rsi
 16559 0000B478 EBEC                    	jmp .L_lambda_simple_params_loop_057e
 16560                                  .L_lambda_simple_params_end_057e:
 16561 0000B47A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16562 0000B47D 4889C3                  	mov rbx, rax
 16563 0000B480 58                      	pop rax
 16564 0000B481 C60004                  	mov byte [rax], T_closure
 16565 0000B484 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16566 0000B488 48C74009[95B40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_057e
 16567 0000B490 E90C020000              	jmp .L_lambda_simple_end_057e
 16568                                  .L_lambda_simple_code_057e:	; lambda-simple body
 16569 0000B495 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16570 0000B49B 740B                    	je .L_lambda_simple_arity_check_ok_057e
 16571 0000B49D FF742410                	push qword [rsp + 8 * 2]
 16572 0000B4A1 6A01                    	push 1
 16573 0000B4A3 E939A20000              	jmp L_error_incorrect_arity_simple
 16574                                  .L_lambda_simple_arity_check_ok_057e:
 16575 0000B4A8 C8000000                	enter 0, 0
 16576 0000B4AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16577 0000B4B1 E872A20000              	call malloc
 16578 0000B4B6 50                      	push rax
 16579 0000B4B7 BF08000000              	mov rdi, 8 * 1	; new rib
 16580 0000B4BC E867A20000              	call malloc
 16581 0000B4C1 50                      	push rax
 16582 0000B4C2 BF10000000              	mov rdi, 8 * 2	; extended env
 16583 0000B4C7 E85CA20000              	call malloc
 16584 0000B4CC 488B7D10                	mov rdi, ENV
 16585 0000B4D0 BE00000000              	mov rsi, 0
 16586 0000B4D5 BA01000000              	mov rdx, 1
 16587                                  .L_lambda_opt_env_loop_00bf:	; ext_env[i + 1] <-- env[i]
 16588 0000B4DA 4883FE01                	cmp rsi, 1
 16589 0000B4DE 7410                    	je .L_lambda_opt_env_end_00bf
 16590 0000B4E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16591 0000B4E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16592 0000B4E8 48FFC6                  	inc rsi
 16593 0000B4EB 48FFC2                  	inc rdx
 16594 0000B4EE EBEA                    	jmp .L_lambda_opt_env_loop_00bf
 16595                                  .L_lambda_opt_env_end_00bf:
 16596 0000B4F0 5B                      	pop rbx
 16597 0000B4F1 BE00000000              	mov rsi, 0
 16598                                  .L_lambda_opt_params_loop_00bf:	; copy params
 16599 0000B4F6 4883FE01                	cmp rsi, 1
 16600 0000B4FA 740E                    	je .L_lambda_opt_params_end_00bf
 16601 0000B4FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16602 0000B501 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16603 0000B505 48FFC6                  	inc rsi
 16604 0000B508 EBEC                    	jmp .L_lambda_opt_params_loop_00bf
 16605                                  .L_lambda_opt_params_end_00bf:
 16606 0000B50A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16607 0000B50D 4889C3                  	mov rbx, rax
 16608 0000B510 58                      	pop rax
 16609 0000B511 C60004                  	mov byte [rax], T_closure
 16610 0000B514 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16611 0000B518 48C74009[25B50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00bf
 16612 0000B520 E978010000              	jmp .L_lambda_opt_end_00bf
 16613                                  .L_lambda_opt_code_00bf:	; lambda-simple body
 16614 0000B525 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 16615 0000B52B 740D                    	je .L_lambda_opt_arity_check_exact_00bf ;	 if equal, go to exact arity
 16616 0000B52D 7F42                    	jg .L_lambda_opt_arity_check_more_00bf ;	 if greater than, go to arity more
 16617 0000B52F FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 16618 0000B533 6A00                     	push 0
 16619 0000B535 E9BBA10000              	jmp L_error_incorrect_arity_opt
 16620                                  	.L_lambda_opt_arity_check_exact_00bf:
 16621 0000B53A 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 16622 0000B53F 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 16623 0000B544 4883EC08                	sub rsp, 8
 16624 0000B548 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 16625                                  	.L_lambda_opt_exact_shifting_loop_00bf:
 16626 0000B54C 488B5108                	mov rdx, [rcx + 8]
 16627 0000B550 488911                  	mov [rcx], rdx
 16628 0000B553 4883C108                	add rcx, 8
 16629 0000B557 4839CB                  	cmp rbx, rcx
 16630 0000B55A 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00bf
 16631                                  	.L_lambda_opt_exact_shifting_loop_end_00bf:
 16632 0000B55C 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 16633 0000B563 4883C001                	add rax, 1 ; 	arg count += 1
 16634 0000B567 4889442410              	mov qword [rsp + 8 * 2], rax
 16635 0000B56C E987000000              	jmp .L_lambda_opt_stack_adjusted_00bf
 16636                                  	.L_lambda_opt_arity_check_more_00bf:
 16637 0000B571 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 16637 0000B573 [0100000000000000] 
 16638 0000B57B 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 16639 0000B581 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00bf
 16640                                  	.L_lambda_opt_stack_shrink_loop_00bf:
 16641 0000B583 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 16642 0000B588 E89BA10000              	call malloc ;	 allocated memory for the optional scheme list
 16643 0000B58D C60021                  	mov byte[rax], T_pair ;	 set type pair
 16644 0000B590 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 16645 0000B594 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 16646 0000B597 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 16647 0000B59C 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 16648 0000B5A1 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 16649 0000B5A5 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 16650                                  	.L_lambda_opt_more_shifting_loop_00bf:
 16651 0000B5AA 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 16652 0000B5AD 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 16653 0000B5B1 4883EB08                	sub rbx, 8 
 16654 0000B5B5 4839DC                  	cmp rsp, rbx
 16655 0000B5B8 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00bf
 16656                                  	.L_lambda_opt_more_shifting_loop_end_00bf:
 16657 0000B5BA 4883C408                	add rsp, 8 ;	 update rsp
 16658 0000B5BE 488B5C2410              	mov rbx, [rsp + 8 * 2]
 16659 0000B5C3 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 16660 0000B5C7 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 16661 0000B5CC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16662 0000B5D2 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00bf
 16663                                  	.L_lambda_opt_stack_shrink_loop_exit_00bf:
 16664 0000B5D4 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 16665 0000B5D9 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 16666 0000B5DE BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 16667 0000B5E3 E840A10000              	call malloc ;	 allocated memory for the optional scheme list
 16668 0000B5E8 C60021                  	mov byte[rax], T_pair ;	 set type pair
 16669 0000B5EB 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 16670 0000B5EF 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 16671 0000B5F3 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 16672                                  	.L_lambda_opt_stack_adjusted_00bf:
 16673 0000B5F8 C8000000                	enter 0, 0
 16674                                  	; preparing a tail-call
 16675 0000B5FC 488B4520                	mov rax, PARAM(0)	; param s
 16676 0000B600 50                      	push rax
 16677 0000B601 488B0425[640F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 16678 0000B609 803805                  	cmp byte [rax], T_undefined
 16679 0000B60C 0F84E99F0000            	je L_error_fvar_undefined
 16680 0000B612 50                      	push rax
 16681 0000B613 6A02                    	push 2	; arg count
 16682 0000B615 488B0425[09150000]      	mov rax, qword [free_var_109]	; free var map
 16683 0000B61D 803805                  	cmp byte [rax], T_undefined
 16684 0000B620 0F84D59F0000            	je L_error_fvar_undefined
 16685 0000B626 803804                  	cmp byte [rax], T_closure
 16686 0000B629 0F8550A00000            	jne L_error_non_closure
 16687 0000B62F FF7001                  	push SOB_CLOSURE_ENV(rax)
 16688 0000B632 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16689 0000B635 50                      	push rax
 16690 0000B636 488B4510                	mov rax, ENV
 16691 0000B63A 488B00                  	mov rax, qword [rax + 8 * 0]
 16692 0000B63D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 16693 0000B640 50                      	push rax
 16694 0000B641 6A02                    	push 2	; arg count
 16695 0000B643 488B0425[E7140000]      	mov rax, qword [free_var_107]	; free var apply
 16696 0000B64B 803805                  	cmp byte [rax], T_undefined
 16697 0000B64E 0F84A79F0000            	je L_error_fvar_undefined
 16698 0000B654 803804                  	cmp byte [rax], T_closure
 16699 0000B657 0F8522A00000            	jne L_error_non_closure
 16700 0000B65D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16701                                  
 16702                                  	; recycling the current frame
 16703 0000B660 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 16704 0000B663 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 16705 0000B666 B906000000              	mov rcx, 2 + 4
 16706 0000B66B 488B5D18                	mov rbx, COUNT
 16707 0000B66F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 16708 0000B674 488D55F8                	lea rdx, [rbp - 8 * 1]
 16709                                  .L_tc_recycle_frame_loop_075a:
 16710 0000B678 4883F900                	cmp rcx, 0
 16711 0000B67C 7413                    	je .L_tc_recycle_frame_done_075a
 16712 0000B67E 488B32                  	mov rsi, qword [rdx]
 16713 0000B681 488933                  	mov qword [rbx], rsi
 16714 0000B684 48FFC9                  	dec rcx
 16715 0000B687 4883EB08                	sub rbx, 8 * 1
 16716 0000B68B 4883EA08                	sub rdx, 8 * 1
 16717 0000B68F EBE7                    	jmp .L_tc_recycle_frame_loop_075a
 16718                                  .L_tc_recycle_frame_done_075a:
 16719 0000B691 488D6308                	lea rsp, [rbx + 8 * 1]
 16720 0000B695 5D                      	pop rbp	; the proc will restore it!
 16721 0000B696 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16722 0000B699 C9                      	leave
 16723 0000B69A C21800                  	ret AND_KILL_FRAME(1)
 16724                                  .L_lambda_opt_end_00bf:	; new closure is in rax
 16725 0000B69D C9                      	leave
 16726 0000B69E C21800                  	ret AND_KILL_FRAME(1)
 16727                                  .L_lambda_simple_end_057e:	; new closure is in rax
 16728 0000B6A1 50                      	push rax
 16729 0000B6A2 6A01                    	push 1	; arg count
 16730 0000B6A4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16731 0000B6A9 E87AA00000              	call malloc
 16732 0000B6AE 50                      	push rax
 16733 0000B6AF BF00000000              	mov rdi, 8 * 0	; new rib
 16734 0000B6B4 E86FA00000              	call malloc
 16735 0000B6B9 50                      	push rax
 16736 0000B6BA BF08000000              	mov rdi, 8 * 1	; extended env
 16737 0000B6BF E864A00000              	call malloc
 16738 0000B6C4 488B7D10                	mov rdi, ENV
 16739 0000B6C8 BE00000000              	mov rsi, 0
 16740 0000B6CD BA01000000              	mov rdx, 1
 16741                                  .L_lambda_simple_env_loop_057f:	; ext_env[i + 1] <-- env[i]
 16742 0000B6D2 4883FE00                	cmp rsi, 0
 16743 0000B6D6 7410                    	je .L_lambda_simple_env_end_057f
 16744 0000B6D8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16745 0000B6DC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16746 0000B6E0 48FFC6                  	inc rsi
 16747 0000B6E3 48FFC2                  	inc rdx
 16748 0000B6E6 EBEA                    	jmp .L_lambda_simple_env_loop_057f
 16749                                  .L_lambda_simple_env_end_057f:
 16750 0000B6E8 5B                      	pop rbx
 16751 0000B6E9 BE00000000              	mov rsi, 0
 16752                                  .L_lambda_simple_params_loop_057f:	; copy params
 16753 0000B6EE 4883FE00                	cmp rsi, 0
 16754 0000B6F2 740E                    	je .L_lambda_simple_params_end_057f
 16755 0000B6F4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16756 0000B6F9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16757 0000B6FD 48FFC6                  	inc rsi
 16758 0000B700 EBEC                    	jmp .L_lambda_simple_params_loop_057f
 16759                                  .L_lambda_simple_params_end_057f:
 16760 0000B702 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16761 0000B705 4889C3                  	mov rbx, rax
 16762 0000B708 58                      	pop rax
 16763 0000B709 C60004                  	mov byte [rax], T_closure
 16764 0000B70C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16765 0000B710 48C74009[1DB70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_057f
 16766 0000B718 E965010000              	jmp .L_lambda_simple_end_057f
 16767                                  .L_lambda_simple_code_057f:	; lambda-simple body
 16768 0000B71D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16769 0000B723 740B                    	je .L_lambda_simple_arity_check_ok_057f
 16770 0000B725 FF742410                	push qword [rsp + 8 * 2]
 16771 0000B729 6A01                    	push 1
 16772 0000B72B E9B19F0000              	jmp L_error_incorrect_arity_simple
 16773                                  .L_lambda_simple_arity_check_ok_057f:
 16774 0000B730 C8000000                	enter 0, 0
 16775 0000B734 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 16776 0000B73C 803805                  	cmp byte [rax], T_undefined
 16777 0000B73F 0F84B69E0000            	je L_error_fvar_undefined
 16778 0000B745 50                      	push rax
 16779 0000B746 6A01                    	push 1	; arg count
 16780 0000B748 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16781 0000B74C 803804                  	cmp byte [rax], T_closure
 16782 0000B74F 0F852A9F0000            	jne L_error_non_closure
 16783 0000B755 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16784 0000B758 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16785 0000B75B 48890425[4C160000]      	mov qword [free_var_128], rax	; free var char<?
 16786 0000B763 803805                  	cmp byte [rax], T_undefined
 16787 0000B766 0F848F9E0000            	je L_error_fvar_undefined
 16788 0000B76C 48B8-                   	mov rax, sob_void
 16788 0000B76E [0000000000000000] 
 16789                                  
 16790 0000B776 488B0425[F7150000]      	mov rax, qword [free_var_123]	; free var <=
 16791 0000B77E 803805                  	cmp byte [rax], T_undefined
 16792 0000B781 0F84749E0000            	je L_error_fvar_undefined
 16793 0000B787 50                      	push rax
 16794 0000B788 6A01                    	push 1	; arg count
 16795 0000B78A 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16796 0000B78E 803804                  	cmp byte [rax], T_closure
 16797 0000B791 0F85E89E0000            	jne L_error_non_closure
 16798 0000B797 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16799 0000B79A FF5009                  	call SOB_CLOSURE_CODE(rax)
 16800 0000B79D 48890425[5D160000]      	mov qword [free_var_129], rax	; free var char<=?
 16801 0000B7A5 803805                  	cmp byte [rax], T_undefined
 16802 0000B7A8 0F844D9E0000            	je L_error_fvar_undefined
 16803 0000B7AE 48B8-                   	mov rax, sob_void
 16803 0000B7B0 [0000000000000000] 
 16804                                  
 16805 0000B7B8 488B0425[2A160000]      	mov rax, qword [free_var_126]	; free var =
 16806 0000B7C0 803805                  	cmp byte [rax], T_undefined
 16807 0000B7C3 0F84329E0000            	je L_error_fvar_undefined
 16808 0000B7C9 50                      	push rax
 16809 0000B7CA 6A01                    	push 1	; arg count
 16810 0000B7CC 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16811 0000B7D0 803804                  	cmp byte [rax], T_closure
 16812 0000B7D3 0F85A69E0000            	jne L_error_non_closure
 16813 0000B7D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16814 0000B7DC FF5009                  	call SOB_CLOSURE_CODE(rax)
 16815 0000B7DF 48890425[6E160000]      	mov qword [free_var_130], rax	; free var char=?
 16816 0000B7E7 803805                  	cmp byte [rax], T_undefined
 16817 0000B7EA 0F840B9E0000            	je L_error_fvar_undefined
 16818 0000B7F0 48B8-                   	mov rax, sob_void
 16818 0000B7F2 [0000000000000000] 
 16819                                  
 16820 0000B7FA 488B0425[08160000]      	mov rax, qword [free_var_124]	; free var >
 16821 0000B802 803805                  	cmp byte [rax], T_undefined
 16822 0000B805 0F84F09D0000            	je L_error_fvar_undefined
 16823 0000B80B 50                      	push rax
 16824 0000B80C 6A01                    	push 1	; arg count
 16825 0000B80E 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16826 0000B812 803804                  	cmp byte [rax], T_closure
 16827 0000B815 0F85649E0000            	jne L_error_non_closure
 16828 0000B81B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16829 0000B81E FF5009                  	call SOB_CLOSURE_CODE(rax)
 16830 0000B821 48890425[7F160000]      	mov qword [free_var_131], rax	; free var char>?
 16831 0000B829 803805                  	cmp byte [rax], T_undefined
 16832 0000B82C 0F84C99D0000            	je L_error_fvar_undefined
 16833 0000B832 48B8-                   	mov rax, sob_void
 16833 0000B834 [0000000000000000] 
 16834                                  
 16835 0000B83C 488B0425[19160000]      	mov rax, qword [free_var_125]	; free var >=
 16836 0000B844 803805                  	cmp byte [rax], T_undefined
 16837 0000B847 0F84AE9D0000            	je L_error_fvar_undefined
 16838 0000B84D 50                      	push rax
 16839 0000B84E 6A01                    	push 1	; arg count
 16840 0000B850 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 16841 0000B854 803804                  	cmp byte [rax], T_closure
 16842 0000B857 0F85229E0000            	jne L_error_non_closure
 16843 0000B85D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16844 0000B860 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16845 0000B863 48890425[90160000]      	mov qword [free_var_132], rax	; free var char>=?
 16846 0000B86B 803805                  	cmp byte [rax], T_undefined
 16847 0000B86E 0F84879D0000            	je L_error_fvar_undefined
 16848 0000B874 48B8-                   	mov rax, sob_void
 16848 0000B876 [0000000000000000] 
 16849 0000B87E C9                      	leave
 16850 0000B87F C21800                  	ret AND_KILL_FRAME(1)
 16851                                  .L_lambda_simple_end_057f:	; new closure is in rax
 16852 0000B882 803804                  	cmp byte [rax], T_closure
 16853 0000B885 0F85F49D0000            	jne L_error_non_closure
 16854 0000B88B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16855 0000B88E FF5009                  	call SOB_CLOSURE_CODE(rax)
 16856                                  
 16857 0000B891 4889C7                  	mov rdi, rax
 16858 0000B894 E8A19F0000              	call print_sexpr_if_not_void
 16859                                  
 16860 0000B899 48B8-                   	mov rax, L_constants + 0
 16860 0000B89B [0000000000000000] 
 16861 0000B8A3 48890425[A1160000]      	mov qword [free_var_133], rax
 16862 0000B8AB 48B8-                   	mov rax, sob_void
 16862 0000B8AD [0000000000000000] 
 16863                                  
 16864 0000B8B5 4889C7                  	mov rdi, rax
 16865 0000B8B8 E87D9F0000              	call print_sexpr_if_not_void
 16866                                  
 16867 0000B8BD 48B8-                   	mov rax, L_constants + 0
 16867 0000B8BF [0000000000000000] 
 16868 0000B8C7 48890425[B2160000]      	mov qword [free_var_134], rax
 16869 0000B8CF 48B8-                   	mov rax, sob_void
 16869 0000B8D1 [0000000000000000] 
 16870                                  
 16871 0000B8D9 4889C7                  	mov rdi, rax
 16872 0000B8DC E8599F0000              	call print_sexpr_if_not_void
 16873                                  
 16874 0000B8E1 48B8-                   	mov rax, L_constants + 2538
 16874 0000B8E3 [EA09000000000000] 
 16875 0000B8EB 50                      	push rax
 16876 0000B8EC 6A01                    	push 1	; arg count
 16877 0000B8EE 488B0425[640F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 16878 0000B8F6 803805                  	cmp byte [rax], T_undefined
 16879 0000B8F9 0F84FC9C0000            	je L_error_fvar_undefined
 16880 0000B8FF 803804                  	cmp byte [rax], T_closure
 16881 0000B902 0F85779D0000            	jne L_error_non_closure
 16882 0000B908 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16883 0000B90B FF5009                  	call SOB_CLOSURE_CODE(rax)
 16884 0000B90E 50                      	push rax
 16885 0000B90F 48B8-                   	mov rax, L_constants + 2542
 16885 0000B911 [EE09000000000000] 
 16886 0000B919 50                      	push rax
 16887 0000B91A 6A01                    	push 1	; arg count
 16888 0000B91C 488B0425[640F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 16889 0000B924 803805                  	cmp byte [rax], T_undefined
 16890 0000B927 0F84CE9C0000            	je L_error_fvar_undefined
 16891 0000B92D 803804                  	cmp byte [rax], T_closure
 16892 0000B930 0F85499D0000            	jne L_error_non_closure
 16893 0000B936 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16894 0000B939 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16895 0000B93C 50                      	push rax
 16896 0000B93D 6A02                    	push 2	; arg count
 16897 0000B93F 488B0425[91150000]      	mov rax, qword [free_var_117]	; free var -
 16898 0000B947 803805                  	cmp byte [rax], T_undefined
 16899 0000B94A 0F84AB9C0000            	je L_error_fvar_undefined
 16900 0000B950 803804                  	cmp byte [rax], T_closure
 16901 0000B953 0F85269D0000            	jne L_error_non_closure
 16902 0000B959 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16903 0000B95C FF5009                  	call SOB_CLOSURE_CODE(rax)
 16904 0000B95F 50                      	push rax
 16905 0000B960 6A01                    	push 1	; arg count
 16906 0000B962 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16907 0000B967 E8BC9D0000              	call malloc
 16908 0000B96C 50                      	push rax
 16909 0000B96D BF00000000              	mov rdi, 8 * 0	; new rib
 16910 0000B972 E8B19D0000              	call malloc
 16911 0000B977 50                      	push rax
 16912 0000B978 BF08000000              	mov rdi, 8 * 1	; extended env
 16913 0000B97D E8A69D0000              	call malloc
 16914 0000B982 488B7D10                	mov rdi, ENV
 16915 0000B986 BE00000000              	mov rsi, 0
 16916 0000B98B BA01000000              	mov rdx, 1
 16917                                  .L_lambda_simple_env_loop_0580:	; ext_env[i + 1] <-- env[i]
 16918 0000B990 4883FE00                	cmp rsi, 0
 16919 0000B994 7410                    	je .L_lambda_simple_env_end_0580
 16920 0000B996 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16921 0000B99A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16922 0000B99E 48FFC6                  	inc rsi
 16923 0000B9A1 48FFC2                  	inc rdx
 16924 0000B9A4 EBEA                    	jmp .L_lambda_simple_env_loop_0580
 16925                                  .L_lambda_simple_env_end_0580:
 16926 0000B9A6 5B                      	pop rbx
 16927 0000B9A7 BE00000000              	mov rsi, 0
 16928                                  .L_lambda_simple_params_loop_0580:	; copy params
 16929 0000B9AC 4883FE00                	cmp rsi, 0
 16930 0000B9B0 740E                    	je .L_lambda_simple_params_end_0580
 16931 0000B9B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16932 0000B9B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16933 0000B9BB 48FFC6                  	inc rsi
 16934 0000B9BE EBEC                    	jmp .L_lambda_simple_params_loop_0580
 16935                                  .L_lambda_simple_params_end_0580:
 16936 0000B9C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16937 0000B9C3 4889C3                  	mov rbx, rax
 16938 0000B9C6 58                      	pop rax
 16939 0000B9C7 C60004                  	mov byte [rax], T_closure
 16940 0000B9CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16941 0000B9CE 48C74009[DBB90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0580
 16942 0000B9D6 E973030000              	jmp .L_lambda_simple_end_0580
 16943                                  .L_lambda_simple_code_0580:	; lambda-simple body
 16944 0000B9DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16945 0000B9E1 740B                    	je .L_lambda_simple_arity_check_ok_0580
 16946 0000B9E3 FF742410                	push qword [rsp + 8 * 2]
 16947 0000B9E7 6A01                    	push 1
 16948 0000B9E9 E9F39C0000              	jmp L_error_incorrect_arity_simple
 16949                                  .L_lambda_simple_arity_check_ok_0580:
 16950 0000B9EE C8000000                	enter 0, 0
 16951 0000B9F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16952 0000B9F7 E82C9D0000              	call malloc
 16953 0000B9FC 50                      	push rax
 16954 0000B9FD BF08000000              	mov rdi, 8 * 1	; new rib
 16955 0000BA02 E8219D0000              	call malloc
 16956 0000BA07 50                      	push rax
 16957 0000BA08 BF10000000              	mov rdi, 8 * 2	; extended env
 16958 0000BA0D E8169D0000              	call malloc
 16959 0000BA12 488B7D10                	mov rdi, ENV
 16960 0000BA16 BE00000000              	mov rsi, 0
 16961 0000BA1B BA01000000              	mov rdx, 1
 16962                                  .L_lambda_simple_env_loop_0581:	; ext_env[i + 1] <-- env[i]
 16963 0000BA20 4883FE01                	cmp rsi, 1
 16964 0000BA24 7410                    	je .L_lambda_simple_env_end_0581
 16965 0000BA26 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16966 0000BA2A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16967 0000BA2E 48FFC6                  	inc rsi
 16968 0000BA31 48FFC2                  	inc rdx
 16969 0000BA34 EBEA                    	jmp .L_lambda_simple_env_loop_0581
 16970                                  .L_lambda_simple_env_end_0581:
 16971 0000BA36 5B                      	pop rbx
 16972 0000BA37 BE00000000              	mov rsi, 0
 16973                                  .L_lambda_simple_params_loop_0581:	; copy params
 16974 0000BA3C 4883FE01                	cmp rsi, 1
 16975 0000BA40 740E                    	je .L_lambda_simple_params_end_0581
 16976 0000BA42 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16977 0000BA47 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16978 0000BA4B 48FFC6                  	inc rsi
 16979 0000BA4E EBEC                    	jmp .L_lambda_simple_params_loop_0581
 16980                                  .L_lambda_simple_params_end_0581:
 16981 0000BA50 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16982 0000BA53 4889C3                  	mov rbx, rax
 16983 0000BA56 58                      	pop rax
 16984 0000BA57 C60004                  	mov byte [rax], T_closure
 16985 0000BA5A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16986 0000BA5E 48C74009[6BBA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0581
 16987 0000BA66 E918010000              	jmp .L_lambda_simple_end_0581
 16988                                  .L_lambda_simple_code_0581:	; lambda-simple body
 16989 0000BA6B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16990 0000BA71 740B                    	je .L_lambda_simple_arity_check_ok_0581
 16991 0000BA73 FF742410                	push qword [rsp + 8 * 2]
 16992 0000BA77 6A01                    	push 1
 16993 0000BA79 E9639C0000              	jmp L_error_incorrect_arity_simple
 16994                                  .L_lambda_simple_arity_check_ok_0581:
 16995 0000BA7E C8000000                	enter 0, 0
 16996 0000BA82 48B8-                   	mov rax, L_constants + 2540
 16996 0000BA84 [EC09000000000000] 
 16997 0000BA8C 50                      	push rax
 16998 0000BA8D 488B4520                	mov rax, PARAM(0)	; param ch
 16999 0000BA91 50                      	push rax
 17000 0000BA92 48B8-                   	mov rax, L_constants + 2538
 17000 0000BA94 [EA09000000000000] 
 17001 0000BA9C 50                      	push rax
 17002 0000BA9D 6A03                    	push 3	; arg count
 17003 0000BA9F 488B0425[5D160000]      	mov rax, qword [free_var_129]	; free var char<=?
 17004 0000BAA7 803805                  	cmp byte [rax], T_undefined
 17005 0000BAAA 0F844B9B0000            	je L_error_fvar_undefined
 17006 0000BAB0 803804                  	cmp byte [rax], T_closure
 17007 0000BAB3 0F85C69B0000            	jne L_error_non_closure
 17008 0000BAB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17009 0000BABC FF5009                  	call SOB_CLOSURE_CODE(rax)
 17010                                  
 17011 0000BABF 483D[02000000]          	cmp rax, sob_boolean_false
 17012 0000BAC5 0F84B0000000            	je .L_if_else_0420
 17013                                  	; preparing a tail-call
 17014 0000BACB 488B4510                	mov rax, ENV
 17015 0000BACF 488B00                  	mov rax, qword [rax + 8 * 0]
 17016 0000BAD2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 17017 0000BAD5 50                      	push rax
 17018 0000BAD6 488B4520                	mov rax, PARAM(0)	; param ch
 17019 0000BADA 50                      	push rax
 17020 0000BADB 6A01                    	push 1	; arg count
 17021 0000BADD 488B0425[640F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17022 0000BAE5 803805                  	cmp byte [rax], T_undefined
 17023 0000BAE8 0F840D9B0000            	je L_error_fvar_undefined
 17024 0000BAEE 803804                  	cmp byte [rax], T_closure
 17025 0000BAF1 0F85889B0000            	jne L_error_non_closure
 17026 0000BAF7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17027 0000BAFA FF5009                  	call SOB_CLOSURE_CODE(rax)
 17028 0000BAFD 50                      	push rax
 17029 0000BAFE 6A02                    	push 2	; arg count
 17030 0000BB00 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 17031 0000BB08 803805                  	cmp byte [rax], T_undefined
 17032 0000BB0B 0F84EA9A0000            	je L_error_fvar_undefined
 17033 0000BB11 803804                  	cmp byte [rax], T_closure
 17034 0000BB14 0F85659B0000            	jne L_error_non_closure
 17035 0000BB1A FF7001                  	push SOB_CLOSURE_ENV(rax)
 17036 0000BB1D FF5009                  	call SOB_CLOSURE_CODE(rax)
 17037 0000BB20 50                      	push rax
 17038 0000BB21 6A01                    	push 1	; arg count
 17039 0000BB23 488B0425[750F0000]      	mov rax, qword [free_var_25]	; free var integer->char
 17040 0000BB2B 803805                  	cmp byte [rax], T_undefined
 17041 0000BB2E 0F84C79A0000            	je L_error_fvar_undefined
 17042 0000BB34 803804                  	cmp byte [rax], T_closure
 17043 0000BB37 0F85429B0000            	jne L_error_non_closure
 17044 0000BB3D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17045                                  
 17046                                  	; recycling the current frame
 17047 0000BB40 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17048 0000BB43 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17049 0000BB46 B905000000              	mov rcx, 1 + 4
 17050 0000BB4B 488B5D18                	mov rbx, COUNT
 17051 0000BB4F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17052 0000BB54 488D55F8                	lea rdx, [rbp - 8 * 1]
 17053                                  .L_tc_recycle_frame_loop_075b:
 17054 0000BB58 4883F900                	cmp rcx, 0
 17055 0000BB5C 7413                    	je .L_tc_recycle_frame_done_075b
 17056 0000BB5E 488B32                  	mov rsi, qword [rdx]
 17057 0000BB61 488933                  	mov qword [rbx], rsi
 17058 0000BB64 48FFC9                  	dec rcx
 17059 0000BB67 4883EB08                	sub rbx, 8 * 1
 17060 0000BB6B 4883EA08                	sub rdx, 8 * 1
 17061 0000BB6F EBE7                    	jmp .L_tc_recycle_frame_loop_075b
 17062                                  .L_tc_recycle_frame_done_075b:
 17063 0000BB71 488D6308                	lea rsp, [rbx + 8 * 1]
 17064 0000BB75 5D                      	pop rbp	; the proc will restore it!
 17065 0000BB76 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17066                                  
 17067 0000BB79 EB04                    	jmp .L_if_end_0420
 17068                                  
 17069                                  	.L_if_else_0420:
 17070 0000BB7B 488B4520                	mov rax, PARAM(0)	; param ch
 17071                                  
 17072                                  	.L_if_end_0420:
 17073 0000BB7F C9                      	leave
 17074 0000BB80 C21800                  	ret AND_KILL_FRAME(1)
 17075                                  .L_lambda_simple_end_0581:	; new closure is in rax
 17076 0000BB83 48890425[A1160000]      	mov qword [free_var_133], rax	; free var char-downcase
 17077 0000BB8B 803805                  	cmp byte [rax], T_undefined
 17078 0000BB8E 0F84679A0000            	je L_error_fvar_undefined
 17079 0000BB94 48B8-                   	mov rax, sob_void
 17079 0000BB96 [0000000000000000] 
 17080                                  
 17081 0000BB9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17082 0000BBA3 E8809B0000              	call malloc
 17083 0000BBA8 50                      	push rax
 17084 0000BBA9 BF08000000              	mov rdi, 8 * 1	; new rib
 17085 0000BBAE E8759B0000              	call malloc
 17086 0000BBB3 50                      	push rax
 17087 0000BBB4 BF10000000              	mov rdi, 8 * 2	; extended env
 17088 0000BBB9 E86A9B0000              	call malloc
 17089 0000BBBE 488B7D10                	mov rdi, ENV
 17090 0000BBC2 BE00000000              	mov rsi, 0
 17091 0000BBC7 BA01000000              	mov rdx, 1
 17092                                  .L_lambda_simple_env_loop_0582:	; ext_env[i + 1] <-- env[i]
 17093 0000BBCC 4883FE01                	cmp rsi, 1
 17094 0000BBD0 7410                    	je .L_lambda_simple_env_end_0582
 17095 0000BBD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17096 0000BBD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17097 0000BBDA 48FFC6                  	inc rsi
 17098 0000BBDD 48FFC2                  	inc rdx
 17099 0000BBE0 EBEA                    	jmp .L_lambda_simple_env_loop_0582
 17100                                  .L_lambda_simple_env_end_0582:
 17101 0000BBE2 5B                      	pop rbx
 17102 0000BBE3 BE00000000              	mov rsi, 0
 17103                                  .L_lambda_simple_params_loop_0582:	; copy params
 17104 0000BBE8 4883FE01                	cmp rsi, 1
 17105 0000BBEC 740E                    	je .L_lambda_simple_params_end_0582
 17106 0000BBEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17107 0000BBF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17108 0000BBF7 48FFC6                  	inc rsi
 17109 0000BBFA EBEC                    	jmp .L_lambda_simple_params_loop_0582
 17110                                  .L_lambda_simple_params_end_0582:
 17111 0000BBFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17112 0000BBFF 4889C3                  	mov rbx, rax
 17113 0000BC02 58                      	pop rax
 17114 0000BC03 C60004                  	mov byte [rax], T_closure
 17115 0000BC06 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17116 0000BC0A 48C74009[17BC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0582
 17117 0000BC12 E918010000              	jmp .L_lambda_simple_end_0582
 17118                                  .L_lambda_simple_code_0582:	; lambda-simple body
 17119 0000BC17 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17120 0000BC1D 740B                    	je .L_lambda_simple_arity_check_ok_0582
 17121 0000BC1F FF742410                	push qword [rsp + 8 * 2]
 17122 0000BC23 6A01                    	push 1
 17123 0000BC25 E9B79A0000              	jmp L_error_incorrect_arity_simple
 17124                                  .L_lambda_simple_arity_check_ok_0582:
 17125 0000BC2A C8000000                	enter 0, 0
 17126 0000BC2E 48B8-                   	mov rax, L_constants + 2544
 17126 0000BC30 [F009000000000000] 
 17127 0000BC38 50                      	push rax
 17128 0000BC39 488B4520                	mov rax, PARAM(0)	; param ch
 17129 0000BC3D 50                      	push rax
 17130 0000BC3E 48B8-                   	mov rax, L_constants + 2542
 17130 0000BC40 [EE09000000000000] 
 17131 0000BC48 50                      	push rax
 17132 0000BC49 6A03                    	push 3	; arg count
 17133 0000BC4B 488B0425[5D160000]      	mov rax, qword [free_var_129]	; free var char<=?
 17134 0000BC53 803805                  	cmp byte [rax], T_undefined
 17135 0000BC56 0F849F990000            	je L_error_fvar_undefined
 17136 0000BC5C 803804                  	cmp byte [rax], T_closure
 17137 0000BC5F 0F851A9A0000            	jne L_error_non_closure
 17138 0000BC65 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17139 0000BC68 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17140                                  
 17141 0000BC6B 483D[02000000]          	cmp rax, sob_boolean_false
 17142 0000BC71 0F84B0000000            	je .L_if_else_0421
 17143                                  	; preparing a tail-call
 17144 0000BC77 488B4510                	mov rax, ENV
 17145 0000BC7B 488B00                  	mov rax, qword [rax + 8 * 0]
 17146 0000BC7E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 17147 0000BC81 50                      	push rax
 17148 0000BC82 488B4520                	mov rax, PARAM(0)	; param ch
 17149 0000BC86 50                      	push rax
 17150 0000BC87 6A01                    	push 1	; arg count
 17151 0000BC89 488B0425[640F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17152 0000BC91 803805                  	cmp byte [rax], T_undefined
 17153 0000BC94 0F8461990000            	je L_error_fvar_undefined
 17154 0000BC9A 803804                  	cmp byte [rax], T_closure
 17155 0000BC9D 0F85DC990000            	jne L_error_non_closure
 17156 0000BCA3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17157 0000BCA6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17158 0000BCA9 50                      	push rax
 17159 0000BCAA 6A02                    	push 2	; arg count
 17160 0000BCAC 488B0425[91150000]      	mov rax, qword [free_var_117]	; free var -
 17161 0000BCB4 803805                  	cmp byte [rax], T_undefined
 17162 0000BCB7 0F843E990000            	je L_error_fvar_undefined
 17163 0000BCBD 803804                  	cmp byte [rax], T_closure
 17164 0000BCC0 0F85B9990000            	jne L_error_non_closure
 17165 0000BCC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17166 0000BCC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17167 0000BCCC 50                      	push rax
 17168 0000BCCD 6A01                    	push 1	; arg count
 17169 0000BCCF 488B0425[750F0000]      	mov rax, qword [free_var_25]	; free var integer->char
 17170 0000BCD7 803805                  	cmp byte [rax], T_undefined
 17171 0000BCDA 0F841B990000            	je L_error_fvar_undefined
 17172 0000BCE0 803804                  	cmp byte [rax], T_closure
 17173 0000BCE3 0F8596990000            	jne L_error_non_closure
 17174 0000BCE9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17175                                  
 17176                                  	; recycling the current frame
 17177 0000BCEC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17178 0000BCEF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17179 0000BCF2 B905000000              	mov rcx, 1 + 4
 17180 0000BCF7 488B5D18                	mov rbx, COUNT
 17181 0000BCFB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17182 0000BD00 488D55F8                	lea rdx, [rbp - 8 * 1]
 17183                                  .L_tc_recycle_frame_loop_075c:
 17184 0000BD04 4883F900                	cmp rcx, 0
 17185 0000BD08 7413                    	je .L_tc_recycle_frame_done_075c
 17186 0000BD0A 488B32                  	mov rsi, qword [rdx]
 17187 0000BD0D 488933                  	mov qword [rbx], rsi
 17188 0000BD10 48FFC9                  	dec rcx
 17189 0000BD13 4883EB08                	sub rbx, 8 * 1
 17190 0000BD17 4883EA08                	sub rdx, 8 * 1
 17191 0000BD1B EBE7                    	jmp .L_tc_recycle_frame_loop_075c
 17192                                  .L_tc_recycle_frame_done_075c:
 17193 0000BD1D 488D6308                	lea rsp, [rbx + 8 * 1]
 17194 0000BD21 5D                      	pop rbp	; the proc will restore it!
 17195 0000BD22 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17196                                  
 17197 0000BD25 EB04                    	jmp .L_if_end_0421
 17198                                  
 17199                                  	.L_if_else_0421:
 17200 0000BD27 488B4520                	mov rax, PARAM(0)	; param ch
 17201                                  
 17202                                  	.L_if_end_0421:
 17203 0000BD2B C9                      	leave
 17204 0000BD2C C21800                  	ret AND_KILL_FRAME(1)
 17205                                  .L_lambda_simple_end_0582:	; new closure is in rax
 17206 0000BD2F 48890425[B2160000]      	mov qword [free_var_134], rax	; free var char-upcase
 17207 0000BD37 803805                  	cmp byte [rax], T_undefined
 17208 0000BD3A 0F84BB980000            	je L_error_fvar_undefined
 17209 0000BD40 48B8-                   	mov rax, sob_void
 17209 0000BD42 [0000000000000000] 
 17210 0000BD4A C9                      	leave
 17211 0000BD4B C21800                  	ret AND_KILL_FRAME(1)
 17212                                  .L_lambda_simple_end_0580:	; new closure is in rax
 17213 0000BD4E 803804                  	cmp byte [rax], T_closure
 17214 0000BD51 0F8528990000            	jne L_error_non_closure
 17215 0000BD57 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17216 0000BD5A FF5009                  	call SOB_CLOSURE_CODE(rax)
 17217                                  
 17218 0000BD5D 4889C7                  	mov rdi, rax
 17219 0000BD60 E8D59A0000              	call print_sexpr_if_not_void
 17220                                  
 17221 0000BD65 48B8-                   	mov rax, L_constants + 0
 17221 0000BD67 [0000000000000000] 
 17222 0000BD6F 48890425[C3160000]      	mov qword [free_var_135], rax
 17223 0000BD77 48B8-                   	mov rax, sob_void
 17223 0000BD79 [0000000000000000] 
 17224                                  
 17225 0000BD81 4889C7                  	mov rdi, rax
 17226 0000BD84 E8B19A0000              	call print_sexpr_if_not_void
 17227                                  
 17228 0000BD89 48B8-                   	mov rax, L_constants + 0
 17228 0000BD8B [0000000000000000] 
 17229 0000BD93 48890425[D4160000]      	mov qword [free_var_136], rax
 17230 0000BD9B 48B8-                   	mov rax, sob_void
 17230 0000BD9D [0000000000000000] 
 17231                                  
 17232 0000BDA5 4889C7                  	mov rdi, rax
 17233 0000BDA8 E88D9A0000              	call print_sexpr_if_not_void
 17234                                  
 17235 0000BDAD 48B8-                   	mov rax, L_constants + 0
 17235 0000BDAF [0000000000000000] 
 17236 0000BDB7 48890425[E5160000]      	mov qword [free_var_137], rax
 17237 0000BDBF 48B8-                   	mov rax, sob_void
 17237 0000BDC1 [0000000000000000] 
 17238                                  
 17239 0000BDC9 4889C7                  	mov rdi, rax
 17240 0000BDCC E8699A0000              	call print_sexpr_if_not_void
 17241                                  
 17242 0000BDD1 48B8-                   	mov rax, L_constants + 0
 17242 0000BDD3 [0000000000000000] 
 17243 0000BDDB 48890425[F6160000]      	mov qword [free_var_138], rax
 17244 0000BDE3 48B8-                   	mov rax, sob_void
 17244 0000BDE5 [0000000000000000] 
 17245                                  
 17246 0000BDED 4889C7                  	mov rdi, rax
 17247 0000BDF0 E8459A0000              	call print_sexpr_if_not_void
 17248                                  
 17249 0000BDF5 48B8-                   	mov rax, L_constants + 0
 17249 0000BDF7 [0000000000000000] 
 17250 0000BDFF 48890425[07170000]      	mov qword [free_var_139], rax
 17251 0000BE07 48B8-                   	mov rax, sob_void
 17251 0000BE09 [0000000000000000] 
 17252                                  
 17253 0000BE11 4889C7                  	mov rdi, rax
 17254 0000BE14 E8219A0000              	call print_sexpr_if_not_void
 17255                                  
 17256 0000BE19 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17257 0000BE1E E805990000              	call malloc
 17258 0000BE23 50                      	push rax
 17259 0000BE24 BF00000000              	mov rdi, 8 * 0	; new rib
 17260 0000BE29 E8FA980000              	call malloc
 17261 0000BE2E 50                      	push rax
 17262 0000BE2F BF08000000              	mov rdi, 8 * 1	; extended env
 17263 0000BE34 E8EF980000              	call malloc
 17264 0000BE39 488B7D10                	mov rdi, ENV
 17265 0000BE3D BE00000000              	mov rsi, 0
 17266 0000BE42 BA01000000              	mov rdx, 1
 17267                                  .L_lambda_simple_env_loop_0583:	; ext_env[i + 1] <-- env[i]
 17268 0000BE47 4883FE00                	cmp rsi, 0
 17269 0000BE4B 7410                    	je .L_lambda_simple_env_end_0583
 17270 0000BE4D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17271 0000BE51 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17272 0000BE55 48FFC6                  	inc rsi
 17273 0000BE58 48FFC2                  	inc rdx
 17274 0000BE5B EBEA                    	jmp .L_lambda_simple_env_loop_0583
 17275                                  .L_lambda_simple_env_end_0583:
 17276 0000BE5D 5B                      	pop rbx
 17277 0000BE5E BE00000000              	mov rsi, 0
 17278                                  .L_lambda_simple_params_loop_0583:	; copy params
 17279 0000BE63 4883FE00                	cmp rsi, 0
 17280 0000BE67 740E                    	je .L_lambda_simple_params_end_0583
 17281 0000BE69 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17282 0000BE6E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17283 0000BE72 48FFC6                  	inc rsi
 17284 0000BE75 EBEC                    	jmp .L_lambda_simple_params_loop_0583
 17285                                  .L_lambda_simple_params_end_0583:
 17286 0000BE77 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17287 0000BE7A 4889C3                  	mov rbx, rax
 17288 0000BE7D 58                      	pop rax
 17289 0000BE7E C60004                  	mov byte [rax], T_closure
 17290 0000BE81 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17291 0000BE85 48C74009[92BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0583
 17292 0000BE8D E90F030000              	jmp .L_lambda_simple_end_0583
 17293                                  .L_lambda_simple_code_0583:	; lambda-simple body
 17294 0000BE92 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17295 0000BE98 740B                    	je .L_lambda_simple_arity_check_ok_0583
 17296 0000BE9A FF742410                	push qword [rsp + 8 * 2]
 17297 0000BE9E 6A01                    	push 1
 17298 0000BEA0 E93C980000              	jmp L_error_incorrect_arity_simple
 17299                                  .L_lambda_simple_arity_check_ok_0583:
 17300 0000BEA5 C8000000                	enter 0, 0
 17301 0000BEA9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17302 0000BEAE E875980000              	call malloc
 17303 0000BEB3 50                      	push rax
 17304 0000BEB4 BF08000000              	mov rdi, 8 * 1	; new rib
 17305 0000BEB9 E86A980000              	call malloc
 17306 0000BEBE 50                      	push rax
 17307 0000BEBF BF10000000              	mov rdi, 8 * 2	; extended env
 17308 0000BEC4 E85F980000              	call malloc
 17309 0000BEC9 488B7D10                	mov rdi, ENV
 17310 0000BECD BE00000000              	mov rsi, 0
 17311 0000BED2 BA01000000              	mov rdx, 1
 17312                                  .L_lambda_opt_env_loop_00c0:	; ext_env[i + 1] <-- env[i]
 17313 0000BED7 4883FE01                	cmp rsi, 1
 17314 0000BEDB 7410                    	je .L_lambda_opt_env_end_00c0
 17315 0000BEDD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17316 0000BEE1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17317 0000BEE5 48FFC6                  	inc rsi
 17318 0000BEE8 48FFC2                  	inc rdx
 17319 0000BEEB EBEA                    	jmp .L_lambda_opt_env_loop_00c0
 17320                                  .L_lambda_opt_env_end_00c0:
 17321 0000BEED 5B                      	pop rbx
 17322 0000BEEE BE00000000              	mov rsi, 0
 17323                                  .L_lambda_opt_params_loop_00c0:	; copy params
 17324 0000BEF3 4883FE01                	cmp rsi, 1
 17325 0000BEF7 740E                    	je .L_lambda_opt_params_end_00c0
 17326 0000BEF9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17327 0000BEFE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17328 0000BF02 48FFC6                  	inc rsi
 17329 0000BF05 EBEC                    	jmp .L_lambda_opt_params_loop_00c0
 17330                                  .L_lambda_opt_params_end_00c0:
 17331 0000BF07 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17332 0000BF0A 4889C3                  	mov rbx, rax
 17333 0000BF0D 58                      	pop rax
 17334 0000BF0E C60004                  	mov byte [rax], T_closure
 17335 0000BF11 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17336 0000BF15 48C74009[22BF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00c0
 17337 0000BF1D E97B020000              	jmp .L_lambda_opt_end_00c0
 17338                                  .L_lambda_opt_code_00c0:	; lambda-simple body
 17339 0000BF22 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 17340 0000BF28 740D                    	je .L_lambda_opt_arity_check_exact_00c0 ;	 if equal, go to exact arity
 17341 0000BF2A 7F42                    	jg .L_lambda_opt_arity_check_more_00c0 ;	 if greater than, go to arity more
 17342 0000BF2C FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 17343 0000BF30 6A00                     	push 0
 17344 0000BF32 E9BE970000              	jmp L_error_incorrect_arity_opt
 17345                                  	.L_lambda_opt_arity_check_exact_00c0:
 17346 0000BF37 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 17347 0000BF3C 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 17348 0000BF41 4883EC08                	sub rsp, 8
 17349 0000BF45 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 17350                                  	.L_lambda_opt_exact_shifting_loop_00c0:
 17351 0000BF49 488B5108                	mov rdx, [rcx + 8]
 17352 0000BF4D 488911                  	mov [rcx], rdx
 17353 0000BF50 4883C108                	add rcx, 8
 17354 0000BF54 4839CB                  	cmp rbx, rcx
 17355 0000BF57 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00c0
 17356                                  	.L_lambda_opt_exact_shifting_loop_end_00c0:
 17357 0000BF59 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 17358 0000BF60 4883C001                	add rax, 1 ; 	arg count += 1
 17359 0000BF64 4889442410              	mov qword [rsp + 8 * 2], rax
 17360 0000BF69 E987000000              	jmp .L_lambda_opt_stack_adjusted_00c0
 17361                                  	.L_lambda_opt_arity_check_more_00c0:
 17362 0000BF6E 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 17362 0000BF70 [0100000000000000] 
 17363 0000BF78 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 17364 0000BF7E 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00c0
 17365                                  	.L_lambda_opt_stack_shrink_loop_00c0:
 17366 0000BF80 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 17367 0000BF85 E89E970000              	call malloc ;	 allocated memory for the optional scheme list
 17368 0000BF8A C60021                  	mov byte[rax], T_pair ;	 set type pair
 17369 0000BF8D 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 17370 0000BF91 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 17371 0000BF94 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 17372 0000BF99 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 17373 0000BF9E 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 17374 0000BFA2 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 17375                                  	.L_lambda_opt_more_shifting_loop_00c0:
 17376 0000BFA7 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 17377 0000BFAA 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 17378 0000BFAE 4883EB08                	sub rbx, 8 
 17379 0000BFB2 4839DC                  	cmp rsp, rbx
 17380 0000BFB5 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00c0
 17381                                  	.L_lambda_opt_more_shifting_loop_end_00c0:
 17382 0000BFB7 4883C408                	add rsp, 8 ;	 update rsp
 17383 0000BFBB 488B5C2410              	mov rbx, [rsp + 8 * 2]
 17384 0000BFC0 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 17385 0000BFC4 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 17386 0000BFC9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17387 0000BFCF 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00c0
 17388                                  	.L_lambda_opt_stack_shrink_loop_exit_00c0:
 17389 0000BFD1 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 17390 0000BFD6 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 17391 0000BFDB BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 17392 0000BFE0 E843970000              	call malloc ;	 allocated memory for the optional scheme list
 17393 0000BFE5 C60021                  	mov byte[rax], T_pair ;	 set type pair
 17394 0000BFE8 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 17395 0000BFEC 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 17396 0000BFF0 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 17397                                  	.L_lambda_opt_stack_adjusted_00c0:
 17398 0000BFF5 C8000000                	enter 0, 0
 17399                                  	; preparing a tail-call
 17400 0000BFF9 488B4520                	mov rax, PARAM(0)	; param s
 17401 0000BFFD 50                      	push rax
 17402 0000BFFE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17403 0000C003 E820970000              	call malloc
 17404 0000C008 50                      	push rax
 17405 0000C009 BF08000000              	mov rdi, 8 * 1	; new rib
 17406 0000C00E E815970000              	call malloc
 17407 0000C013 50                      	push rax
 17408 0000C014 BF18000000              	mov rdi, 8 * 3	; extended env
 17409 0000C019 E80A970000              	call malloc
 17410 0000C01E 488B7D10                	mov rdi, ENV
 17411 0000C022 BE00000000              	mov rsi, 0
 17412 0000C027 BA01000000              	mov rdx, 1
 17413                                  .L_lambda_simple_env_loop_0584:	; ext_env[i + 1] <-- env[i]
 17414 0000C02C 4883FE02                	cmp rsi, 2
 17415 0000C030 7410                    	je .L_lambda_simple_env_end_0584
 17416 0000C032 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17417 0000C036 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17418 0000C03A 48FFC6                  	inc rsi
 17419 0000C03D 48FFC2                  	inc rdx
 17420 0000C040 EBEA                    	jmp .L_lambda_simple_env_loop_0584
 17421                                  .L_lambda_simple_env_end_0584:
 17422 0000C042 5B                      	pop rbx
 17423 0000C043 BE00000000              	mov rsi, 0
 17424                                  .L_lambda_simple_params_loop_0584:	; copy params
 17425 0000C048 4883FE01                	cmp rsi, 1
 17426 0000C04C 740E                    	je .L_lambda_simple_params_end_0584
 17427 0000C04E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17428 0000C053 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17429 0000C057 48FFC6                  	inc rsi
 17430 0000C05A EBEC                    	jmp .L_lambda_simple_params_loop_0584
 17431                                  .L_lambda_simple_params_end_0584:
 17432 0000C05C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17433 0000C05F 4889C3                  	mov rbx, rax
 17434 0000C062 58                      	pop rax
 17435 0000C063 C60004                  	mov byte [rax], T_closure
 17436 0000C066 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17437 0000C06A 48C74009[77C00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0584
 17438 0000C072 E99B000000              	jmp .L_lambda_simple_end_0584
 17439                                  .L_lambda_simple_code_0584:	; lambda-simple body
 17440 0000C077 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17441 0000C07D 740B                    	je .L_lambda_simple_arity_check_ok_0584
 17442 0000C07F FF742410                	push qword [rsp + 8 * 2]
 17443 0000C083 6A01                    	push 1
 17444 0000C085 E957960000              	jmp L_error_incorrect_arity_simple
 17445                                  .L_lambda_simple_arity_check_ok_0584:
 17446 0000C08A C8000000                	enter 0, 0
 17447                                  	; preparing a tail-call
 17448 0000C08E 488B4520                	mov rax, PARAM(0)	; param ch
 17449 0000C092 50                      	push rax
 17450 0000C093 6A01                    	push 1	; arg count
 17451 0000C095 488B0425[A1160000]      	mov rax, qword [free_var_133]	; free var char-downcase
 17452 0000C09D 803805                  	cmp byte [rax], T_undefined
 17453 0000C0A0 0F8455950000            	je L_error_fvar_undefined
 17454 0000C0A6 803804                  	cmp byte [rax], T_closure
 17455 0000C0A9 0F85D0950000            	jne L_error_non_closure
 17456 0000C0AF FF7001                  	push SOB_CLOSURE_ENV(rax)
 17457 0000C0B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17458 0000C0B5 50                      	push rax
 17459 0000C0B6 6A01                    	push 1	; arg count
 17460 0000C0B8 488B0425[640F0000]      	mov rax, qword [free_var_24]	; free var char->integer
 17461 0000C0C0 803805                  	cmp byte [rax], T_undefined
 17462 0000C0C3 0F8432950000            	je L_error_fvar_undefined
 17463 0000C0C9 803804                  	cmp byte [rax], T_closure
 17464 0000C0CC 0F85AD950000            	jne L_error_non_closure
 17465 0000C0D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17466                                  
 17467                                  	; recycling the current frame
 17468 0000C0D5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17469 0000C0D8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17470 0000C0DB B905000000              	mov rcx, 1 + 4
 17471 0000C0E0 488B5D18                	mov rbx, COUNT
 17472 0000C0E4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17473 0000C0E9 488D55F8                	lea rdx, [rbp - 8 * 1]
 17474                                  .L_tc_recycle_frame_loop_075d:
 17475 0000C0ED 4883F900                	cmp rcx, 0
 17476 0000C0F1 7413                    	je .L_tc_recycle_frame_done_075d
 17477 0000C0F3 488B32                  	mov rsi, qword [rdx]
 17478 0000C0F6 488933                  	mov qword [rbx], rsi
 17479 0000C0F9 48FFC9                  	dec rcx
 17480 0000C0FC 4883EB08                	sub rbx, 8 * 1
 17481 0000C100 4883EA08                	sub rdx, 8 * 1
 17482 0000C104 EBE7                    	jmp .L_tc_recycle_frame_loop_075d
 17483                                  .L_tc_recycle_frame_done_075d:
 17484 0000C106 488D6308                	lea rsp, [rbx + 8 * 1]
 17485 0000C10A 5D                      	pop rbp	; the proc will restore it!
 17486 0000C10B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17487 0000C10E C9                      	leave
 17488 0000C10F C21800                  	ret AND_KILL_FRAME(1)
 17489                                  .L_lambda_simple_end_0584:	; new closure is in rax
 17490 0000C112 50                      	push rax
 17491 0000C113 6A02                    	push 2	; arg count
 17492 0000C115 488B0425[09150000]      	mov rax, qword [free_var_109]	; free var map
 17493 0000C11D 803805                  	cmp byte [rax], T_undefined
 17494 0000C120 0F84D5940000            	je L_error_fvar_undefined
 17495 0000C126 803804                  	cmp byte [rax], T_closure
 17496 0000C129 0F8550950000            	jne L_error_non_closure
 17497 0000C12F FF7001                  	push SOB_CLOSURE_ENV(rax)
 17498 0000C132 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17499 0000C135 50                      	push rax
 17500 0000C136 488B4510                	mov rax, ENV
 17501 0000C13A 488B00                  	mov rax, qword [rax + 8 * 0]
 17502 0000C13D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 17503 0000C140 50                      	push rax
 17504 0000C141 6A02                    	push 2	; arg count
 17505 0000C143 488B0425[E7140000]      	mov rax, qword [free_var_107]	; free var apply
 17506 0000C14B 803805                  	cmp byte [rax], T_undefined
 17507 0000C14E 0F84A7940000            	je L_error_fvar_undefined
 17508 0000C154 803804                  	cmp byte [rax], T_closure
 17509 0000C157 0F8522950000            	jne L_error_non_closure
 17510 0000C15D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17511                                  
 17512                                  	; recycling the current frame
 17513 0000C160 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17514 0000C163 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17515 0000C166 B906000000              	mov rcx, 2 + 4
 17516 0000C16B 488B5D18                	mov rbx, COUNT
 17517 0000C16F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17518 0000C174 488D55F8                	lea rdx, [rbp - 8 * 1]
 17519                                  .L_tc_recycle_frame_loop_075e:
 17520 0000C178 4883F900                	cmp rcx, 0
 17521 0000C17C 7413                    	je .L_tc_recycle_frame_done_075e
 17522 0000C17E 488B32                  	mov rsi, qword [rdx]
 17523 0000C181 488933                  	mov qword [rbx], rsi
 17524 0000C184 48FFC9                  	dec rcx
 17525 0000C187 4883EB08                	sub rbx, 8 * 1
 17526 0000C18B 4883EA08                	sub rdx, 8 * 1
 17527 0000C18F EBE7                    	jmp .L_tc_recycle_frame_loop_075e
 17528                                  .L_tc_recycle_frame_done_075e:
 17529 0000C191 488D6308                	lea rsp, [rbx + 8 * 1]
 17530 0000C195 5D                      	pop rbp	; the proc will restore it!
 17531 0000C196 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17532 0000C199 C9                      	leave
 17533 0000C19A C21800                  	ret AND_KILL_FRAME(1)
 17534                                  .L_lambda_opt_end_00c0:	; new closure is in rax
 17535 0000C19D C9                      	leave
 17536 0000C19E C21800                  	ret AND_KILL_FRAME(1)
 17537                                  .L_lambda_simple_end_0583:	; new closure is in rax
 17538 0000C1A1 50                      	push rax
 17539 0000C1A2 6A01                    	push 1	; arg count
 17540 0000C1A4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17541 0000C1A9 E87A950000              	call malloc
 17542 0000C1AE 50                      	push rax
 17543 0000C1AF BF00000000              	mov rdi, 8 * 0	; new rib
 17544 0000C1B4 E86F950000              	call malloc
 17545 0000C1B9 50                      	push rax
 17546 0000C1BA BF08000000              	mov rdi, 8 * 1	; extended env
 17547 0000C1BF E864950000              	call malloc
 17548 0000C1C4 488B7D10                	mov rdi, ENV
 17549 0000C1C8 BE00000000              	mov rsi, 0
 17550 0000C1CD BA01000000              	mov rdx, 1
 17551                                  .L_lambda_simple_env_loop_0585:	; ext_env[i + 1] <-- env[i]
 17552 0000C1D2 4883FE00                	cmp rsi, 0
 17553 0000C1D6 7410                    	je .L_lambda_simple_env_end_0585
 17554 0000C1D8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17555 0000C1DC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17556 0000C1E0 48FFC6                  	inc rsi
 17557 0000C1E3 48FFC2                  	inc rdx
 17558 0000C1E6 EBEA                    	jmp .L_lambda_simple_env_loop_0585
 17559                                  .L_lambda_simple_env_end_0585:
 17560 0000C1E8 5B                      	pop rbx
 17561 0000C1E9 BE00000000              	mov rsi, 0
 17562                                  .L_lambda_simple_params_loop_0585:	; copy params
 17563 0000C1EE 4883FE00                	cmp rsi, 0
 17564 0000C1F2 740E                    	je .L_lambda_simple_params_end_0585
 17565 0000C1F4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17566 0000C1F9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17567 0000C1FD 48FFC6                  	inc rsi
 17568 0000C200 EBEC                    	jmp .L_lambda_simple_params_loop_0585
 17569                                  .L_lambda_simple_params_end_0585:
 17570 0000C202 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17571 0000C205 4889C3                  	mov rbx, rax
 17572 0000C208 58                      	pop rax
 17573 0000C209 C60004                  	mov byte [rax], T_closure
 17574 0000C20C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17575 0000C210 48C74009[1DC20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0585
 17576 0000C218 E965010000              	jmp .L_lambda_simple_end_0585
 17577                                  .L_lambda_simple_code_0585:	; lambda-simple body
 17578 0000C21D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17579 0000C223 740B                    	je .L_lambda_simple_arity_check_ok_0585
 17580 0000C225 FF742410                	push qword [rsp + 8 * 2]
 17581 0000C229 6A01                    	push 1
 17582 0000C22B E9B1940000              	jmp L_error_incorrect_arity_simple
 17583                                  .L_lambda_simple_arity_check_ok_0585:
 17584 0000C230 C8000000                	enter 0, 0
 17585 0000C234 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 17586 0000C23C 803805                  	cmp byte [rax], T_undefined
 17587 0000C23F 0F84B6930000            	je L_error_fvar_undefined
 17588 0000C245 50                      	push rax
 17589 0000C246 6A01                    	push 1	; arg count
 17590 0000C248 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17591 0000C24C 803804                  	cmp byte [rax], T_closure
 17592 0000C24F 0F852A940000            	jne L_error_non_closure
 17593 0000C255 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17594 0000C258 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17595 0000C25B 48890425[C3160000]      	mov qword [free_var_135], rax	; free var char-ci<?
 17596 0000C263 803805                  	cmp byte [rax], T_undefined
 17597 0000C266 0F848F930000            	je L_error_fvar_undefined
 17598 0000C26C 48B8-                   	mov rax, sob_void
 17598 0000C26E [0000000000000000] 
 17599                                  
 17600 0000C276 488B0425[F7150000]      	mov rax, qword [free_var_123]	; free var <=
 17601 0000C27E 803805                  	cmp byte [rax], T_undefined
 17602 0000C281 0F8474930000            	je L_error_fvar_undefined
 17603 0000C287 50                      	push rax
 17604 0000C288 6A01                    	push 1	; arg count
 17605 0000C28A 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17606 0000C28E 803804                  	cmp byte [rax], T_closure
 17607 0000C291 0F85E8930000            	jne L_error_non_closure
 17608 0000C297 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17609 0000C29A FF5009                  	call SOB_CLOSURE_CODE(rax)
 17610 0000C29D 48890425[D4160000]      	mov qword [free_var_136], rax	; free var char-ci<=?
 17611 0000C2A5 803805                  	cmp byte [rax], T_undefined
 17612 0000C2A8 0F844D930000            	je L_error_fvar_undefined
 17613 0000C2AE 48B8-                   	mov rax, sob_void
 17613 0000C2B0 [0000000000000000] 
 17614                                  
 17615 0000C2B8 488B0425[2A160000]      	mov rax, qword [free_var_126]	; free var =
 17616 0000C2C0 803805                  	cmp byte [rax], T_undefined
 17617 0000C2C3 0F8432930000            	je L_error_fvar_undefined
 17618 0000C2C9 50                      	push rax
 17619 0000C2CA 6A01                    	push 1	; arg count
 17620 0000C2CC 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17621 0000C2D0 803804                  	cmp byte [rax], T_closure
 17622 0000C2D3 0F85A6930000            	jne L_error_non_closure
 17623 0000C2D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17624 0000C2DC FF5009                  	call SOB_CLOSURE_CODE(rax)
 17625 0000C2DF 48890425[E5160000]      	mov qword [free_var_137], rax	; free var char-ci=?
 17626 0000C2E7 803805                  	cmp byte [rax], T_undefined
 17627 0000C2EA 0F840B930000            	je L_error_fvar_undefined
 17628 0000C2F0 48B8-                   	mov rax, sob_void
 17628 0000C2F2 [0000000000000000] 
 17629                                  
 17630 0000C2FA 488B0425[08160000]      	mov rax, qword [free_var_124]	; free var >
 17631 0000C302 803805                  	cmp byte [rax], T_undefined
 17632 0000C305 0F84F0920000            	je L_error_fvar_undefined
 17633 0000C30B 50                      	push rax
 17634 0000C30C 6A01                    	push 1	; arg count
 17635 0000C30E 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17636 0000C312 803804                  	cmp byte [rax], T_closure
 17637 0000C315 0F8564930000            	jne L_error_non_closure
 17638 0000C31B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17639 0000C31E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17640 0000C321 48890425[F6160000]      	mov qword [free_var_138], rax	; free var char-ci>?
 17641 0000C329 803805                  	cmp byte [rax], T_undefined
 17642 0000C32C 0F84C9920000            	je L_error_fvar_undefined
 17643 0000C332 48B8-                   	mov rax, sob_void
 17643 0000C334 [0000000000000000] 
 17644                                  
 17645 0000C33C 488B0425[19160000]      	mov rax, qword [free_var_125]	; free var >=
 17646 0000C344 803805                  	cmp byte [rax], T_undefined
 17647 0000C347 0F84AE920000            	je L_error_fvar_undefined
 17648 0000C34D 50                      	push rax
 17649 0000C34E 6A01                    	push 1	; arg count
 17650 0000C350 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 17651 0000C354 803804                  	cmp byte [rax], T_closure
 17652 0000C357 0F8522930000            	jne L_error_non_closure
 17653 0000C35D FF7001                  	push SOB_CLOSURE_ENV(rax)
 17654 0000C360 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17655 0000C363 48890425[07170000]      	mov qword [free_var_139], rax	; free var char-ci>=?
 17656 0000C36B 803805                  	cmp byte [rax], T_undefined
 17657 0000C36E 0F8487920000            	je L_error_fvar_undefined
 17658 0000C374 48B8-                   	mov rax, sob_void
 17658 0000C376 [0000000000000000] 
 17659 0000C37E C9                      	leave
 17660 0000C37F C21800                  	ret AND_KILL_FRAME(1)
 17661                                  .L_lambda_simple_end_0585:	; new closure is in rax
 17662 0000C382 803804                  	cmp byte [rax], T_closure
 17663 0000C385 0F85F4920000            	jne L_error_non_closure
 17664 0000C38B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17665 0000C38E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17666                                  
 17667 0000C391 4889C7                  	mov rdi, rax
 17668 0000C394 E8A1940000              	call print_sexpr_if_not_void
 17669                                  
 17670 0000C399 48B8-                   	mov rax, L_constants + 0
 17670 0000C39B [0000000000000000] 
 17671 0000C3A3 48890425[18170000]      	mov qword [free_var_140], rax
 17672 0000C3AB 48B8-                   	mov rax, sob_void
 17672 0000C3AD [0000000000000000] 
 17673                                  
 17674 0000C3B5 4889C7                  	mov rdi, rax
 17675 0000C3B8 E87D940000              	call print_sexpr_if_not_void
 17676                                  
 17677 0000C3BD 48B8-                   	mov rax, L_constants + 0
 17677 0000C3BF [0000000000000000] 
 17678 0000C3C7 48890425[29170000]      	mov qword [free_var_141], rax
 17679 0000C3CF 48B8-                   	mov rax, sob_void
 17679 0000C3D1 [0000000000000000] 
 17680                                  
 17681 0000C3D9 4889C7                  	mov rdi, rax
 17682 0000C3DC E859940000              	call print_sexpr_if_not_void
 17683                                  
 17684 0000C3E1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17685 0000C3E6 E83D930000              	call malloc
 17686 0000C3EB 50                      	push rax
 17687 0000C3EC BF00000000              	mov rdi, 8 * 0	; new rib
 17688 0000C3F1 E832930000              	call malloc
 17689 0000C3F6 50                      	push rax
 17690 0000C3F7 BF08000000              	mov rdi, 8 * 1	; extended env
 17691 0000C3FC E827930000              	call malloc
 17692 0000C401 488B7D10                	mov rdi, ENV
 17693 0000C405 BE00000000              	mov rsi, 0
 17694 0000C40A BA01000000              	mov rdx, 1
 17695                                  .L_lambda_simple_env_loop_0586:	; ext_env[i + 1] <-- env[i]
 17696 0000C40F 4883FE00                	cmp rsi, 0
 17697 0000C413 7410                    	je .L_lambda_simple_env_end_0586
 17698 0000C415 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17699 0000C419 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17700 0000C41D 48FFC6                  	inc rsi
 17701 0000C420 48FFC2                  	inc rdx
 17702 0000C423 EBEA                    	jmp .L_lambda_simple_env_loop_0586
 17703                                  .L_lambda_simple_env_end_0586:
 17704 0000C425 5B                      	pop rbx
 17705 0000C426 BE00000000              	mov rsi, 0
 17706                                  .L_lambda_simple_params_loop_0586:	; copy params
 17707 0000C42B 4883FE00                	cmp rsi, 0
 17708 0000C42F 740E                    	je .L_lambda_simple_params_end_0586
 17709 0000C431 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17710 0000C436 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17711 0000C43A 48FFC6                  	inc rsi
 17712 0000C43D EBEC                    	jmp .L_lambda_simple_params_loop_0586
 17713                                  .L_lambda_simple_params_end_0586:
 17714 0000C43F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17715 0000C442 4889C3                  	mov rbx, rax
 17716 0000C445 58                      	pop rax
 17717 0000C446 C60004                  	mov byte [rax], T_closure
 17718 0000C449 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17719 0000C44D 48C74009[5AC40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0586
 17720 0000C455 E95D010000              	jmp .L_lambda_simple_end_0586
 17721                                  .L_lambda_simple_code_0586:	; lambda-simple body
 17722 0000C45A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17723 0000C460 740B                    	je .L_lambda_simple_arity_check_ok_0586
 17724 0000C462 FF742410                	push qword [rsp + 8 * 2]
 17725 0000C466 6A01                    	push 1
 17726 0000C468 E974920000              	jmp L_error_incorrect_arity_simple
 17727                                  .L_lambda_simple_arity_check_ok_0586:
 17728 0000C46D C8000000                	enter 0, 0
 17729 0000C471 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17730 0000C476 E8AD920000              	call malloc
 17731 0000C47B 50                      	push rax
 17732 0000C47C BF08000000              	mov rdi, 8 * 1	; new rib
 17733 0000C481 E8A2920000              	call malloc
 17734 0000C486 50                      	push rax
 17735 0000C487 BF10000000              	mov rdi, 8 * 2	; extended env
 17736 0000C48C E897920000              	call malloc
 17737 0000C491 488B7D10                	mov rdi, ENV
 17738 0000C495 BE00000000              	mov rsi, 0
 17739 0000C49A BA01000000              	mov rdx, 1
 17740                                  .L_lambda_simple_env_loop_0587:	; ext_env[i + 1] <-- env[i]
 17741 0000C49F 4883FE01                	cmp rsi, 1
 17742 0000C4A3 7410                    	je .L_lambda_simple_env_end_0587
 17743 0000C4A5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17744 0000C4A9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17745 0000C4AD 48FFC6                  	inc rsi
 17746 0000C4B0 48FFC2                  	inc rdx
 17747 0000C4B3 EBEA                    	jmp .L_lambda_simple_env_loop_0587
 17748                                  .L_lambda_simple_env_end_0587:
 17749 0000C4B5 5B                      	pop rbx
 17750 0000C4B6 BE00000000              	mov rsi, 0
 17751                                  .L_lambda_simple_params_loop_0587:	; copy params
 17752 0000C4BB 4883FE01                	cmp rsi, 1
 17753 0000C4BF 740E                    	je .L_lambda_simple_params_end_0587
 17754 0000C4C1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17755 0000C4C6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17756 0000C4CA 48FFC6                  	inc rsi
 17757 0000C4CD EBEC                    	jmp .L_lambda_simple_params_loop_0587
 17758                                  .L_lambda_simple_params_end_0587:
 17759 0000C4CF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17760 0000C4D2 4889C3                  	mov rbx, rax
 17761 0000C4D5 58                      	pop rax
 17762 0000C4D6 C60004                  	mov byte [rax], T_closure
 17763 0000C4D9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17764 0000C4DD 48C74009[EAC40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0587
 17765 0000C4E5 E9C9000000              	jmp .L_lambda_simple_end_0587
 17766                                  .L_lambda_simple_code_0587:	; lambda-simple body
 17767 0000C4EA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17768 0000C4F0 740B                    	je .L_lambda_simple_arity_check_ok_0587
 17769 0000C4F2 FF742410                	push qword [rsp + 8 * 2]
 17770 0000C4F6 6A01                    	push 1
 17771 0000C4F8 E9E4910000              	jmp L_error_incorrect_arity_simple
 17772                                  .L_lambda_simple_arity_check_ok_0587:
 17773 0000C4FD C8000000                	enter 0, 0
 17774                                  	; preparing a tail-call
 17775 0000C501 488B4520                	mov rax, PARAM(0)	; param str
 17776 0000C505 50                      	push rax
 17777 0000C506 6A01                    	push 1	; arg count
 17778 0000C508 488B0425[4B170000]      	mov rax, qword [free_var_143]	; free var string->list
 17779 0000C510 803805                  	cmp byte [rax], T_undefined
 17780 0000C513 0F84E2900000            	je L_error_fvar_undefined
 17781 0000C519 803804                  	cmp byte [rax], T_closure
 17782 0000C51C 0F855D910000            	jne L_error_non_closure
 17783 0000C522 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17784 0000C525 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17785 0000C528 50                      	push rax
 17786 0000C529 488B4510                	mov rax, ENV
 17787 0000C52D 488B00                  	mov rax, qword [rax + 8 * 0]
 17788 0000C530 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char-case-converter
 17789 0000C533 50                      	push rax
 17790 0000C534 6A02                    	push 2	; arg count
 17791 0000C536 488B0425[09150000]      	mov rax, qword [free_var_109]	; free var map
 17792 0000C53E 803805                  	cmp byte [rax], T_undefined
 17793 0000C541 0F84B4900000            	je L_error_fvar_undefined
 17794 0000C547 803804                  	cmp byte [rax], T_closure
 17795 0000C54A 0F852F910000            	jne L_error_non_closure
 17796 0000C550 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17797 0000C553 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17798 0000C556 50                      	push rax
 17799 0000C557 6A01                    	push 1	; arg count
 17800 0000C559 488B0425[3A170000]      	mov rax, qword [free_var_142]	; free var list->string
 17801 0000C561 803805                  	cmp byte [rax], T_undefined
 17802 0000C564 0F8491900000            	je L_error_fvar_undefined
 17803 0000C56A 803804                  	cmp byte [rax], T_closure
 17804 0000C56D 0F850C910000            	jne L_error_non_closure
 17805 0000C573 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17806                                  
 17807                                  	; recycling the current frame
 17808 0000C576 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 17809 0000C579 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 17810 0000C57C B905000000              	mov rcx, 1 + 4
 17811 0000C581 488B5D18                	mov rbx, COUNT
 17812 0000C585 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 17813 0000C58A 488D55F8                	lea rdx, [rbp - 8 * 1]
 17814                                  .L_tc_recycle_frame_loop_075f:
 17815 0000C58E 4883F900                	cmp rcx, 0
 17816 0000C592 7413                    	je .L_tc_recycle_frame_done_075f
 17817 0000C594 488B32                  	mov rsi, qword [rdx]
 17818 0000C597 488933                  	mov qword [rbx], rsi
 17819 0000C59A 48FFC9                  	dec rcx
 17820 0000C59D 4883EB08                	sub rbx, 8 * 1
 17821 0000C5A1 4883EA08                	sub rdx, 8 * 1
 17822 0000C5A5 EBE7                    	jmp .L_tc_recycle_frame_loop_075f
 17823                                  .L_tc_recycle_frame_done_075f:
 17824 0000C5A7 488D6308                	lea rsp, [rbx + 8 * 1]
 17825 0000C5AB 5D                      	pop rbp	; the proc will restore it!
 17826 0000C5AC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17827 0000C5AF C9                      	leave
 17828 0000C5B0 C21800                  	ret AND_KILL_FRAME(1)
 17829                                  .L_lambda_simple_end_0587:	; new closure is in rax
 17830 0000C5B3 C9                      	leave
 17831 0000C5B4 C21800                  	ret AND_KILL_FRAME(1)
 17832                                  .L_lambda_simple_end_0586:	; new closure is in rax
 17833 0000C5B7 50                      	push rax
 17834 0000C5B8 6A01                    	push 1	; arg count
 17835 0000C5BA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17836 0000C5BF E864910000              	call malloc
 17837 0000C5C4 50                      	push rax
 17838 0000C5C5 BF00000000              	mov rdi, 8 * 0	; new rib
 17839 0000C5CA E859910000              	call malloc
 17840 0000C5CF 50                      	push rax
 17841 0000C5D0 BF08000000              	mov rdi, 8 * 1	; extended env
 17842 0000C5D5 E84E910000              	call malloc
 17843 0000C5DA 488B7D10                	mov rdi, ENV
 17844 0000C5DE BE00000000              	mov rsi, 0
 17845 0000C5E3 BA01000000              	mov rdx, 1
 17846                                  .L_lambda_simple_env_loop_0588:	; ext_env[i + 1] <-- env[i]
 17847 0000C5E8 4883FE00                	cmp rsi, 0
 17848 0000C5EC 7410                    	je .L_lambda_simple_env_end_0588
 17849 0000C5EE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17850 0000C5F2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17851 0000C5F6 48FFC6                  	inc rsi
 17852 0000C5F9 48FFC2                  	inc rdx
 17853 0000C5FC EBEA                    	jmp .L_lambda_simple_env_loop_0588
 17854                                  .L_lambda_simple_env_end_0588:
 17855 0000C5FE 5B                      	pop rbx
 17856 0000C5FF BE00000000              	mov rsi, 0
 17857                                  .L_lambda_simple_params_loop_0588:	; copy params
 17858 0000C604 4883FE00                	cmp rsi, 0
 17859 0000C608 740E                    	je .L_lambda_simple_params_end_0588
 17860 0000C60A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17861 0000C60F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17862 0000C613 48FFC6                  	inc rsi
 17863 0000C616 EBEC                    	jmp .L_lambda_simple_params_loop_0588
 17864                                  .L_lambda_simple_params_end_0588:
 17865 0000C618 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17866 0000C61B 4889C3                  	mov rbx, rax
 17867 0000C61E 58                      	pop rax
 17868 0000C61F C60004                  	mov byte [rax], T_closure
 17869 0000C622 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17870 0000C626 48C74009[33C60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0588
 17871 0000C62E E99F000000              	jmp .L_lambda_simple_end_0588
 17872                                  .L_lambda_simple_code_0588:	; lambda-simple body
 17873 0000C633 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17874 0000C639 740B                    	je .L_lambda_simple_arity_check_ok_0588
 17875 0000C63B FF742410                	push qword [rsp + 8 * 2]
 17876 0000C63F 6A01                    	push 1
 17877 0000C641 E99B900000              	jmp L_error_incorrect_arity_simple
 17878                                  .L_lambda_simple_arity_check_ok_0588:
 17879 0000C646 C8000000                	enter 0, 0
 17880 0000C64A 488B0425[A1160000]      	mov rax, qword [free_var_133]	; free var char-downcase
 17881 0000C652 803805                  	cmp byte [rax], T_undefined
 17882 0000C655 0F84A08F0000            	je L_error_fvar_undefined
 17883 0000C65B 50                      	push rax
 17884 0000C65C 6A01                    	push 1	; arg count
 17885 0000C65E 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 17886 0000C662 803804                  	cmp byte [rax], T_closure
 17887 0000C665 0F8514900000            	jne L_error_non_closure
 17888 0000C66B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17889 0000C66E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17890 0000C671 48890425[18170000]      	mov qword [free_var_140], rax	; free var string-downcase
 17891 0000C679 803805                  	cmp byte [rax], T_undefined
 17892 0000C67C 0F84798F0000            	je L_error_fvar_undefined
 17893 0000C682 48B8-                   	mov rax, sob_void
 17893 0000C684 [0000000000000000] 
 17894                                  
 17895 0000C68C 488B0425[B2160000]      	mov rax, qword [free_var_134]	; free var char-upcase
 17896 0000C694 803805                  	cmp byte [rax], T_undefined
 17897 0000C697 0F845E8F0000            	je L_error_fvar_undefined
 17898 0000C69D 50                      	push rax
 17899 0000C69E 6A01                    	push 1	; arg count
 17900 0000C6A0 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 17901 0000C6A4 803804                  	cmp byte [rax], T_closure
 17902 0000C6A7 0F85D28F0000            	jne L_error_non_closure
 17903 0000C6AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 17904 0000C6B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17905 0000C6B3 48890425[29170000]      	mov qword [free_var_141], rax	; free var string-upcase
 17906 0000C6BB 803805                  	cmp byte [rax], T_undefined
 17907 0000C6BE 0F84378F0000            	je L_error_fvar_undefined
 17908 0000C6C4 48B8-                   	mov rax, sob_void
 17908 0000C6C6 [0000000000000000] 
 17909 0000C6CE C9                      	leave
 17910 0000C6CF C21800                  	ret AND_KILL_FRAME(1)
 17911                                  .L_lambda_simple_end_0588:	; new closure is in rax
 17912 0000C6D2 803804                  	cmp byte [rax], T_closure
 17913 0000C6D5 0F85A48F0000            	jne L_error_non_closure
 17914 0000C6DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 17915 0000C6DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 17916                                  
 17917 0000C6E1 4889C7                  	mov rdi, rax
 17918 0000C6E4 E851910000              	call print_sexpr_if_not_void
 17919                                  
 17920 0000C6E9 48B8-                   	mov rax, L_constants + 0
 17920 0000C6EB [0000000000000000] 
 17921 0000C6F3 48890425[5C170000]      	mov qword [free_var_144], rax
 17922 0000C6FB 48B8-                   	mov rax, sob_void
 17922 0000C6FD [0000000000000000] 
 17923                                  
 17924 0000C705 4889C7                  	mov rdi, rax
 17925 0000C708 E82D910000              	call print_sexpr_if_not_void
 17926                                  
 17927 0000C70D 48B8-                   	mov rax, L_constants + 0
 17927 0000C70F [0000000000000000] 
 17928 0000C717 48890425[6D170000]      	mov qword [free_var_145], rax
 17929 0000C71F 48B8-                   	mov rax, sob_void
 17929 0000C721 [0000000000000000] 
 17930                                  
 17931 0000C729 4889C7                  	mov rdi, rax
 17932 0000C72C E809910000              	call print_sexpr_if_not_void
 17933                                  
 17934 0000C731 48B8-                   	mov rax, L_constants + 0
 17934 0000C733 [0000000000000000] 
 17935 0000C73B 48890425[7E170000]      	mov qword [free_var_146], rax
 17936 0000C743 48B8-                   	mov rax, sob_void
 17936 0000C745 [0000000000000000] 
 17937                                  
 17938 0000C74D 4889C7                  	mov rdi, rax
 17939 0000C750 E8E5900000              	call print_sexpr_if_not_void
 17940                                  
 17941 0000C755 48B8-                   	mov rax, L_constants + 0
 17941 0000C757 [0000000000000000] 
 17942 0000C75F 48890425[8F170000]      	mov qword [free_var_147], rax
 17943 0000C767 48B8-                   	mov rax, sob_void
 17943 0000C769 [0000000000000000] 
 17944                                  
 17945 0000C771 4889C7                  	mov rdi, rax
 17946 0000C774 E8C1900000              	call print_sexpr_if_not_void
 17947                                  
 17948 0000C779 48B8-                   	mov rax, L_constants + 0
 17948 0000C77B [0000000000000000] 
 17949 0000C783 48890425[A0170000]      	mov qword [free_var_148], rax
 17950 0000C78B 48B8-                   	mov rax, sob_void
 17950 0000C78D [0000000000000000] 
 17951                                  
 17952 0000C795 4889C7                  	mov rdi, rax
 17953 0000C798 E89D900000              	call print_sexpr_if_not_void
 17954                                  
 17955 0000C79D 48B8-                   	mov rax, L_constants + 0
 17955 0000C79F [0000000000000000] 
 17956 0000C7A7 48890425[B1170000]      	mov qword [free_var_149], rax
 17957 0000C7AF 48B8-                   	mov rax, sob_void
 17957 0000C7B1 [0000000000000000] 
 17958                                  
 17959 0000C7B9 4889C7                  	mov rdi, rax
 17960 0000C7BC E879900000              	call print_sexpr_if_not_void
 17961                                  
 17962 0000C7C1 48B8-                   	mov rax, L_constants + 0
 17962 0000C7C3 [0000000000000000] 
 17963 0000C7CB 48890425[C2170000]      	mov qword [free_var_150], rax
 17964 0000C7D3 48B8-                   	mov rax, sob_void
 17964 0000C7D5 [0000000000000000] 
 17965                                  
 17966 0000C7DD 4889C7                  	mov rdi, rax
 17967 0000C7E0 E855900000              	call print_sexpr_if_not_void
 17968                                  
 17969 0000C7E5 48B8-                   	mov rax, L_constants + 0
 17969 0000C7E7 [0000000000000000] 
 17970 0000C7EF 48890425[D3170000]      	mov qword [free_var_151], rax
 17971 0000C7F7 48B8-                   	mov rax, sob_void
 17971 0000C7F9 [0000000000000000] 
 17972                                  
 17973 0000C801 4889C7                  	mov rdi, rax
 17974 0000C804 E831900000              	call print_sexpr_if_not_void
 17975                                  
 17976 0000C809 48B8-                   	mov rax, L_constants + 0
 17976 0000C80B [0000000000000000] 
 17977 0000C813 48890425[E4170000]      	mov qword [free_var_152], rax
 17978 0000C81B 48B8-                   	mov rax, sob_void
 17978 0000C81D [0000000000000000] 
 17979                                  
 17980 0000C825 4889C7                  	mov rdi, rax
 17981 0000C828 E80D900000              	call print_sexpr_if_not_void
 17982                                  
 17983 0000C82D 48B8-                   	mov rax, L_constants + 0
 17983 0000C82F [0000000000000000] 
 17984 0000C837 48890425[F5170000]      	mov qword [free_var_153], rax
 17985 0000C83F 48B8-                   	mov rax, sob_void
 17985 0000C841 [0000000000000000] 
 17986                                  
 17987 0000C849 4889C7                  	mov rdi, rax
 17988 0000C84C E8E98F0000              	call print_sexpr_if_not_void
 17989                                  
 17990 0000C851 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17991 0000C856 E8CD8E0000              	call malloc
 17992 0000C85B 50                      	push rax
 17993 0000C85C BF00000000              	mov rdi, 8 * 0	; new rib
 17994 0000C861 E8C28E0000              	call malloc
 17995 0000C866 50                      	push rax
 17996 0000C867 BF08000000              	mov rdi, 8 * 1	; extended env
 17997 0000C86C E8B78E0000              	call malloc
 17998 0000C871 488B7D10                	mov rdi, ENV
 17999 0000C875 BE00000000              	mov rsi, 0
 18000 0000C87A BA01000000              	mov rdx, 1
 18001                                  .L_lambda_simple_env_loop_0589:	; ext_env[i + 1] <-- env[i]
 18002 0000C87F 4883FE00                	cmp rsi, 0
 18003 0000C883 7410                    	je .L_lambda_simple_env_end_0589
 18004 0000C885 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18005 0000C889 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18006 0000C88D 48FFC6                  	inc rsi
 18007 0000C890 48FFC2                  	inc rdx
 18008 0000C893 EBEA                    	jmp .L_lambda_simple_env_loop_0589
 18009                                  .L_lambda_simple_env_end_0589:
 18010 0000C895 5B                      	pop rbx
 18011 0000C896 BE00000000              	mov rsi, 0
 18012                                  .L_lambda_simple_params_loop_0589:	; copy params
 18013 0000C89B 4883FE00                	cmp rsi, 0
 18014 0000C89F 740E                    	je .L_lambda_simple_params_end_0589
 18015 0000C8A1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18016 0000C8A6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18017 0000C8AA 48FFC6                  	inc rsi
 18018 0000C8AD EBEC                    	jmp .L_lambda_simple_params_loop_0589
 18019                                  .L_lambda_simple_params_end_0589:
 18020 0000C8AF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18021 0000C8B2 4889C3                  	mov rbx, rax
 18022 0000C8B5 58                      	pop rax
 18023 0000C8B6 C60004                  	mov byte [rax], T_closure
 18024 0000C8B9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18025 0000C8BD 48C74009[CAC80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0589
 18026 0000C8C5 E99B0C0000              	jmp .L_lambda_simple_end_0589
 18027                                  .L_lambda_simple_code_0589:	; lambda-simple body
 18028 0000C8CA 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18029 0000C8D0 740B                    	je .L_lambda_simple_arity_check_ok_0589
 18030 0000C8D2 FF742410                	push qword [rsp + 8 * 2]
 18031 0000C8D6 6A02                    	push 2
 18032 0000C8D8 E9048E0000              	jmp L_error_incorrect_arity_simple
 18033                                  .L_lambda_simple_arity_check_ok_0589:
 18034 0000C8DD C8000000                	enter 0, 0
 18035                                  	; preparing a tail-call
 18036 0000C8E1 48B8-                   	mov rax, L_constants + 1881
 18036 0000C8E3 [5907000000000000] 
 18037 0000C8EB 50                      	push rax
 18038 0000C8EC 6A01                    	push 1	; arg count
 18039 0000C8EE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18040 0000C8F3 E8308E0000              	call malloc
 18041 0000C8F8 50                      	push rax
 18042 0000C8F9 BF10000000              	mov rdi, 8 * 2	; new rib
 18043 0000C8FE E8258E0000              	call malloc
 18044 0000C903 50                      	push rax
 18045 0000C904 BF10000000              	mov rdi, 8 * 2	; extended env
 18046 0000C909 E81A8E0000              	call malloc
 18047 0000C90E 488B7D10                	mov rdi, ENV
 18048 0000C912 BE00000000              	mov rsi, 0
 18049 0000C917 BA01000000              	mov rdx, 1
 18050                                  .L_lambda_simple_env_loop_058a:	; ext_env[i + 1] <-- env[i]
 18051 0000C91C 4883FE01                	cmp rsi, 1
 18052 0000C920 7410                    	je .L_lambda_simple_env_end_058a
 18053 0000C922 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18054 0000C926 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18055 0000C92A 48FFC6                  	inc rsi
 18056 0000C92D 48FFC2                  	inc rdx
 18057 0000C930 EBEA                    	jmp .L_lambda_simple_env_loop_058a
 18058                                  .L_lambda_simple_env_end_058a:
 18059 0000C932 5B                      	pop rbx
 18060 0000C933 BE00000000              	mov rsi, 0
 18061                                  .L_lambda_simple_params_loop_058a:	; copy params
 18062 0000C938 4883FE02                	cmp rsi, 2
 18063 0000C93C 740E                    	je .L_lambda_simple_params_end_058a
 18064 0000C93E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18065 0000C943 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18066 0000C947 48FFC6                  	inc rsi
 18067 0000C94A EBEC                    	jmp .L_lambda_simple_params_loop_058a
 18068                                  .L_lambda_simple_params_end_058a:
 18069 0000C94C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18070 0000C94F 4889C3                  	mov rbx, rax
 18071 0000C952 58                      	pop rax
 18072 0000C953 C60004                  	mov byte [rax], T_closure
 18073 0000C956 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18074 0000C95A 48C74009[67C90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_058a
 18075 0000C962 E9B50B0000              	jmp .L_lambda_simple_end_058a
 18076                                  .L_lambda_simple_code_058a:	; lambda-simple body
 18077 0000C967 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18078 0000C96D 740B                    	je .L_lambda_simple_arity_check_ok_058a
 18079 0000C96F FF742410                	push qword [rsp + 8 * 2]
 18080 0000C973 6A01                    	push 1
 18081 0000C975 E9678D0000              	jmp L_error_incorrect_arity_simple
 18082                                  .L_lambda_simple_arity_check_ok_058a:
 18083 0000C97A C8000000                	enter 0, 0
 18084                                  
 18085 0000C97E BF08000000              	mov rdi, 8
 18086 0000C983 E8A08D0000              	call malloc
 18087 0000C988 488B5D20                	mov rbx, PARAM(0)	; param run
 18088 0000C98C 488918                  	mov [rax], rbx	; box run
 18089 0000C98F 48894520                	mov PARAM(0), rax	;replace param run with box
 18090 0000C993 48B8-                   	mov rax, sob_void
 18090 0000C995 [0000000000000000] 
 18091                                  
 18092 0000C99D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18093 0000C9A2 E8818D0000              	call malloc
 18094 0000C9A7 50                      	push rax
 18095 0000C9A8 BF08000000              	mov rdi, 8 * 1	; new rib
 18096 0000C9AD E8768D0000              	call malloc
 18097 0000C9B2 50                      	push rax
 18098 0000C9B3 BF18000000              	mov rdi, 8 * 3	; extended env
 18099 0000C9B8 E86B8D0000              	call malloc
 18100 0000C9BD 488B7D10                	mov rdi, ENV
 18101 0000C9C1 BE00000000              	mov rsi, 0
 18102 0000C9C6 BA01000000              	mov rdx, 1
 18103                                  .L_lambda_simple_env_loop_058b:	; ext_env[i + 1] <-- env[i]
 18104 0000C9CB 4883FE02                	cmp rsi, 2
 18105 0000C9CF 7410                    	je .L_lambda_simple_env_end_058b
 18106 0000C9D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18107 0000C9D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18108 0000C9D9 48FFC6                  	inc rsi
 18109 0000C9DC 48FFC2                  	inc rdx
 18110 0000C9DF EBEA                    	jmp .L_lambda_simple_env_loop_058b
 18111                                  .L_lambda_simple_env_end_058b:
 18112 0000C9E1 5B                      	pop rbx
 18113 0000C9E2 BE00000000              	mov rsi, 0
 18114                                  .L_lambda_simple_params_loop_058b:	; copy params
 18115 0000C9E7 4883FE01                	cmp rsi, 1
 18116 0000C9EB 740E                    	je .L_lambda_simple_params_end_058b
 18117 0000C9ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18118 0000C9F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18119 0000C9F6 48FFC6                  	inc rsi
 18120 0000C9F9 EBEC                    	jmp .L_lambda_simple_params_loop_058b
 18121                                  .L_lambda_simple_params_end_058b:
 18122 0000C9FB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18123 0000C9FE 4889C3                  	mov rbx, rax
 18124 0000CA01 58                      	pop rax
 18125 0000CA02 C60004                  	mov byte [rax], T_closure
 18126 0000CA05 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18127 0000CA09 48C74009[16CA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_058b
 18128 0000CA11 E983020000              	jmp .L_lambda_simple_end_058b
 18129                                  .L_lambda_simple_code_058b:	; lambda-simple body
 18130 0000CA16 48837C241005            	cmp qword [rsp + 8 * 2], 5
 18131 0000CA1C 740B                    	je .L_lambda_simple_arity_check_ok_058b
 18132 0000CA1E FF742410                	push qword [rsp + 8 * 2]
 18133 0000CA22 6A05                    	push 5
 18134 0000CA24 E9B88C0000              	jmp L_error_incorrect_arity_simple
 18135                                  .L_lambda_simple_arity_check_ok_058b:
 18136 0000CA29 C8000000                	enter 0, 0
 18137 0000CA2D 488B4530                	mov rax, PARAM(2)	; param len1
 18138 0000CA31 50                      	push rax
 18139 0000CA32 488B4520                	mov rax, PARAM(0)	; param i
 18140 0000CA36 50                      	push rax
 18141 0000CA37 6A02                    	push 2	; arg count
 18142 0000CA39 488B0425[2A160000]      	mov rax, qword [free_var_126]	; free var =
 18143 0000CA41 803805                  	cmp byte [rax], T_undefined
 18144 0000CA44 0F84B18B0000            	je L_error_fvar_undefined
 18145 0000CA4A 803804                  	cmp byte [rax], T_closure
 18146 0000CA4D 0F852C8C0000            	jne L_error_non_closure
 18147 0000CA53 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18148 0000CA56 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18149                                  
 18150 0000CA59 483D[02000000]          	cmp rax, sob_boolean_false
 18151 0000CA5F 742E                    	je .L_if_else_0422
 18152 0000CA61 488B4540                	mov rax, PARAM(4)	; param len2
 18153 0000CA65 50                      	push rax
 18154 0000CA66 488B4530                	mov rax, PARAM(2)	; param len1
 18155 0000CA6A 50                      	push rax
 18156 0000CA6B 6A02                    	push 2	; arg count
 18157 0000CA6D 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 18158 0000CA75 803805                  	cmp byte [rax], T_undefined
 18159 0000CA78 0F847D8B0000            	je L_error_fvar_undefined
 18160 0000CA7E 803804                  	cmp byte [rax], T_closure
 18161 0000CA81 0F85F88B0000            	jne L_error_non_closure
 18162 0000CA87 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18163 0000CA8A FF5009                  	call SOB_CLOSURE_CODE(rax)
 18164                                  
 18165 0000CA8D EB0A                    	jmp .L_if_end_0422
 18166                                  
 18167                                  	.L_if_else_0422:
 18168 0000CA8F 48B8-                   	mov rax, L_constants + 2
 18168 0000CA91 [0200000000000000] 
 18169                                  
 18170                                  	.L_if_end_0422:
 18171 0000CA99 483D[02000000]          	cmp rax, sob_boolean_false
 18172 0000CA9F 0F85F0010000            	jne .L_or_end_0061
 18173 0000CAA5 488B4530                	mov rax, PARAM(2)	; param len1
 18174 0000CAA9 50                      	push rax
 18175 0000CAAA 488B4520                	mov rax, PARAM(0)	; param i
 18176 0000CAAE 50                      	push rax
 18177 0000CAAF 6A02                    	push 2	; arg count
 18178 0000CAB1 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 18179 0000CAB9 803805                  	cmp byte [rax], T_undefined
 18180 0000CABC 0F84398B0000            	je L_error_fvar_undefined
 18181 0000CAC2 803804                  	cmp byte [rax], T_closure
 18182 0000CAC5 0F85B48B0000            	jne L_error_non_closure
 18183 0000CACB FF7001                  	push SOB_CLOSURE_ENV(rax)
 18184 0000CACE FF5009                  	call SOB_CLOSURE_CODE(rax)
 18185                                  
 18186 0000CAD1 483D[02000000]          	cmp rax, sob_boolean_false
 18187 0000CAD7 0F84AE010000            	je .L_if_else_0423
 18188 0000CADD 488B4520                	mov rax, PARAM(0)	; param i
 18189 0000CAE1 50                      	push rax
 18190 0000CAE2 488B4538                	mov rax, PARAM(3)	; param str2
 18191 0000CAE6 50                      	push rax
 18192 0000CAE7 6A02                    	push 2	; arg count
 18193 0000CAE9 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18194 0000CAF1 803805                  	cmp byte [rax], T_undefined
 18195 0000CAF4 0F84018B0000            	je L_error_fvar_undefined
 18196 0000CAFA 803804                  	cmp byte [rax], T_closure
 18197 0000CAFD 0F857C8B0000            	jne L_error_non_closure
 18198 0000CB03 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18199 0000CB06 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18200 0000CB09 50                      	push rax
 18201 0000CB0A 488B4520                	mov rax, PARAM(0)	; param i
 18202 0000CB0E 50                      	push rax
 18203 0000CB0F 488B4528                	mov rax, PARAM(1)	; param str1
 18204 0000CB13 50                      	push rax
 18205 0000CB14 6A02                    	push 2	; arg count
 18206 0000CB16 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18207 0000CB1E 803805                  	cmp byte [rax], T_undefined
 18208 0000CB21 0F84D48A0000            	je L_error_fvar_undefined
 18209 0000CB27 803804                  	cmp byte [rax], T_closure
 18210 0000CB2A 0F854F8B0000            	jne L_error_non_closure
 18211 0000CB30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18212 0000CB33 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18213 0000CB36 50                      	push rax
 18214 0000CB37 6A02                    	push 2	; arg count
 18215 0000CB39 488B4510                	mov rax, ENV
 18216 0000CB3D 488B4008                	mov rax, qword [rax + 8 * 1]
 18217 0000CB41 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 18218 0000CB44 803804                  	cmp byte [rax], T_closure
 18219 0000CB47 0F85328B0000            	jne L_error_non_closure
 18220 0000CB4D FF7001                  	push SOB_CLOSURE_ENV(rax)
 18221 0000CB50 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18222 0000CB53 483D[02000000]          	cmp rax, sob_boolean_false
 18223 0000CB59 0F852A010000            	jne .L_or_end_0062
 18224 0000CB5F 488B4520                	mov rax, PARAM(0)	; param i
 18225 0000CB63 50                      	push rax
 18226 0000CB64 488B4538                	mov rax, PARAM(3)	; param str2
 18227 0000CB68 50                      	push rax
 18228 0000CB69 6A02                    	push 2	; arg count
 18229 0000CB6B 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18230 0000CB73 803805                  	cmp byte [rax], T_undefined
 18231 0000CB76 0F847F8A0000            	je L_error_fvar_undefined
 18232 0000CB7C 803804                  	cmp byte [rax], T_closure
 18233 0000CB7F 0F85FA8A0000            	jne L_error_non_closure
 18234 0000CB85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18235 0000CB88 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18236 0000CB8B 50                      	push rax
 18237 0000CB8C 488B4520                	mov rax, PARAM(0)	; param i
 18238 0000CB90 50                      	push rax
 18239 0000CB91 488B4528                	mov rax, PARAM(1)	; param str1
 18240 0000CB95 50                      	push rax
 18241 0000CB96 6A02                    	push 2	; arg count
 18242 0000CB98 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 18243 0000CBA0 803805                  	cmp byte [rax], T_undefined
 18244 0000CBA3 0F84528A0000            	je L_error_fvar_undefined
 18245 0000CBA9 803804                  	cmp byte [rax], T_closure
 18246 0000CBAC 0F85CD8A0000            	jne L_error_non_closure
 18247 0000CBB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18248 0000CBB5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18249 0000CBB8 50                      	push rax
 18250 0000CBB9 6A02                    	push 2	; arg count
 18251 0000CBBB 488B4510                	mov rax, ENV
 18252 0000CBBF 488B4008                	mov rax, qword [rax + 8 * 1]
 18253 0000CBC3 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 18254 0000CBC7 803804                  	cmp byte [rax], T_closure
 18255 0000CBCA 0F85AF8A0000            	jne L_error_non_closure
 18256 0000CBD0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18257 0000CBD3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18258                                  
 18259 0000CBD6 483D[02000000]          	cmp rax, sob_boolean_false
 18260 0000CBDC 0F849D000000            	je .L_if_else_0424
 18261                                  	; preparing a tail-call
 18262 0000CBE2 488B4540                	mov rax, PARAM(4)	; param len2
 18263 0000CBE6 50                      	push rax
 18264 0000CBE7 488B4538                	mov rax, PARAM(3)	; param str2
 18265 0000CBEB 50                      	push rax
 18266 0000CBEC 488B4530                	mov rax, PARAM(2)	; param len1
 18267 0000CBF0 50                      	push rax
 18268 0000CBF1 488B4528                	mov rax, PARAM(1)	; param str1
 18269 0000CBF5 50                      	push rax
 18270 0000CBF6 48B8-                   	mov rax, L_constants + 2158
 18270 0000CBF8 [6E08000000000000] 
 18271 0000CC00 50                      	push rax
 18272 0000CC01 488B4520                	mov rax, PARAM(0)	; param i
 18273 0000CC05 50                      	push rax
 18274 0000CC06 6A02                    	push 2	; arg count
 18275 0000CC08 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 18276 0000CC10 803805                  	cmp byte [rax], T_undefined
 18277 0000CC13 0F84E2890000            	je L_error_fvar_undefined
 18278 0000CC19 803804                  	cmp byte [rax], T_closure
 18279 0000CC1C 0F855D8A0000            	jne L_error_non_closure
 18280 0000CC22 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18281 0000CC25 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18282 0000CC28 50                      	push rax
 18283 0000CC29 6A05                    	push 5	; arg count
 18284 0000CC2B 488B4510                	mov rax, ENV
 18285 0000CC2F 488B00                  	mov rax, qword [rax + 8 * 0]
 18286 0000CC32 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18287 0000CC35 488B00                  	mov rax, qword [rax]
 18288 0000CC38 803804                  	cmp byte [rax], T_closure
 18289 0000CC3B 0F853E8A0000            	jne L_error_non_closure
 18290 0000CC41 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18291                                  
 18292                                  	; recycling the current frame
 18293 0000CC44 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18294 0000CC47 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18295 0000CC4A B909000000              	mov rcx, 5 + 4
 18296 0000CC4F 488B5D18                	mov rbx, COUNT
 18297 0000CC53 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18298 0000CC58 488D55F8                	lea rdx, [rbp - 8 * 1]
 18299                                  .L_tc_recycle_frame_loop_0760:
 18300 0000CC5C 4883F900                	cmp rcx, 0
 18301 0000CC60 7413                    	je .L_tc_recycle_frame_done_0760
 18302 0000CC62 488B32                  	mov rsi, qword [rdx]
 18303 0000CC65 488933                  	mov qword [rbx], rsi
 18304 0000CC68 48FFC9                  	dec rcx
 18305 0000CC6B 4883EB08                	sub rbx, 8 * 1
 18306 0000CC6F 4883EA08                	sub rdx, 8 * 1
 18307 0000CC73 EBE7                    	jmp .L_tc_recycle_frame_loop_0760
 18308                                  .L_tc_recycle_frame_done_0760:
 18309 0000CC75 488D6308                	lea rsp, [rbx + 8 * 1]
 18310 0000CC79 5D                      	pop rbp	; the proc will restore it!
 18311 0000CC7A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18312                                  
 18313 0000CC7D EB0A                    	jmp .L_if_end_0424
 18314                                  
 18315                                  	.L_if_else_0424:
 18316 0000CC7F 48B8-                   	mov rax, L_constants + 2
 18316 0000CC81 [0200000000000000] 
 18317                                  
 18318                                  	.L_if_end_0424:
 18319                                  .L_or_end_0062:
 18320                                  
 18321 0000CC89 EB0A                    	jmp .L_if_end_0423
 18322                                  
 18323                                  	.L_if_else_0423:
 18324 0000CC8B 48B8-                   	mov rax, L_constants + 2
 18324 0000CC8D [0200000000000000] 
 18325                                  
 18326                                  	.L_if_end_0423:
 18327                                  .L_or_end_0061:
 18328 0000CC95 C9                      	leave
 18329 0000CC96 C23800                  	ret AND_KILL_FRAME(5)
 18330                                  .L_lambda_simple_end_058b:	; new closure is in rax
 18331                                  
 18332 0000CC99 50                      	push rax
 18333 0000CC9A 488B4520                	mov rax, PARAM(0)	; param run
 18334                                  
 18335 0000CC9E 8F00                    	pop qword[rax]
 18336 0000CCA0 48B8-                   	mov rax, sob_void
 18336 0000CCA2 [0000000000000000] 
 18337                                  
 18338                                  	; preparing a tail-call
 18339 0000CCAA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18340 0000CCAF E8748A0000              	call malloc
 18341 0000CCB4 50                      	push rax
 18342 0000CCB5 BF08000000              	mov rdi, 8 * 1	; new rib
 18343 0000CCBA E8698A0000              	call malloc
 18344 0000CCBF 50                      	push rax
 18345 0000CCC0 BF18000000              	mov rdi, 8 * 3	; extended env
 18346 0000CCC5 E85E8A0000              	call malloc
 18347 0000CCCA 488B7D10                	mov rdi, ENV
 18348 0000CCCE BE00000000              	mov rsi, 0
 18349 0000CCD3 BA01000000              	mov rdx, 1
 18350                                  .L_lambda_simple_env_loop_058c:	; ext_env[i + 1] <-- env[i]
 18351 0000CCD8 4883FE02                	cmp rsi, 2
 18352 0000CCDC 7410                    	je .L_lambda_simple_env_end_058c
 18353 0000CCDE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18354 0000CCE2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18355 0000CCE6 48FFC6                  	inc rsi
 18356 0000CCE9 48FFC2                  	inc rdx
 18357 0000CCEC EBEA                    	jmp .L_lambda_simple_env_loop_058c
 18358                                  .L_lambda_simple_env_end_058c:
 18359 0000CCEE 5B                      	pop rbx
 18360 0000CCEF BE00000000              	mov rsi, 0
 18361                                  .L_lambda_simple_params_loop_058c:	; copy params
 18362 0000CCF4 4883FE01                	cmp rsi, 1
 18363 0000CCF8 740E                    	je .L_lambda_simple_params_end_058c
 18364 0000CCFA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18365 0000CCFF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18366 0000CD03 48FFC6                  	inc rsi
 18367 0000CD06 EBEC                    	jmp .L_lambda_simple_params_loop_058c
 18368                                  .L_lambda_simple_params_end_058c:
 18369 0000CD08 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18370 0000CD0B 4889C3                  	mov rbx, rax
 18371 0000CD0E 58                      	pop rax
 18372 0000CD0F C60004                  	mov byte [rax], T_closure
 18373 0000CD12 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18374 0000CD16 48C74009[23CD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_058c
 18375 0000CD1E E985020000              	jmp .L_lambda_simple_end_058c
 18376                                  .L_lambda_simple_code_058c:	; lambda-simple body
 18377 0000CD23 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18378 0000CD29 740B                    	je .L_lambda_simple_arity_check_ok_058c
 18379 0000CD2B FF742410                	push qword [rsp + 8 * 2]
 18380 0000CD2F 6A02                    	push 2
 18381 0000CD31 E9AB890000              	jmp L_error_incorrect_arity_simple
 18382                                  .L_lambda_simple_arity_check_ok_058c:
 18383 0000CD36 C8000000                	enter 0, 0
 18384                                  	; preparing a tail-call
 18385 0000CD3A 488B4528                	mov rax, PARAM(1)	; param str2
 18386 0000CD3E 50                      	push rax
 18387 0000CD3F 6A01                    	push 1	; arg count
 18388 0000CD41 488B0425[FE0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 18389 0000CD49 803805                  	cmp byte [rax], T_undefined
 18390 0000CD4C 0F84A9880000            	je L_error_fvar_undefined
 18391 0000CD52 803804                  	cmp byte [rax], T_closure
 18392 0000CD55 0F8524890000            	jne L_error_non_closure
 18393 0000CD5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 18394 0000CD5E FF5009                  	call SOB_CLOSURE_CODE(rax)
 18395 0000CD61 50                      	push rax
 18396 0000CD62 488B4520                	mov rax, PARAM(0)	; param str1
 18397 0000CD66 50                      	push rax
 18398 0000CD67 6A01                    	push 1	; arg count
 18399 0000CD69 488B0425[FE0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 18400 0000CD71 803805                  	cmp byte [rax], T_undefined
 18401 0000CD74 0F8481880000            	je L_error_fvar_undefined
 18402 0000CD7A 803804                  	cmp byte [rax], T_closure
 18403 0000CD7D 0F85FC880000            	jne L_error_non_closure
 18404 0000CD83 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18405 0000CD86 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18406 0000CD89 50                      	push rax
 18407 0000CD8A 6A02                    	push 2	; arg count
 18408 0000CD8C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18409 0000CD91 E892890000              	call malloc
 18410 0000CD96 50                      	push rax
 18411 0000CD97 BF10000000              	mov rdi, 8 * 2	; new rib
 18412 0000CD9C E887890000              	call malloc
 18413 0000CDA1 50                      	push rax
 18414 0000CDA2 BF20000000              	mov rdi, 8 * 4	; extended env
 18415 0000CDA7 E87C890000              	call malloc
 18416 0000CDAC 488B7D10                	mov rdi, ENV
 18417 0000CDB0 BE00000000              	mov rsi, 0
 18418 0000CDB5 BA01000000              	mov rdx, 1
 18419                                  .L_lambda_simple_env_loop_058d:	; ext_env[i + 1] <-- env[i]
 18420 0000CDBA 4883FE03                	cmp rsi, 3
 18421 0000CDBE 7410                    	je .L_lambda_simple_env_end_058d
 18422 0000CDC0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18423 0000CDC4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18424 0000CDC8 48FFC6                  	inc rsi
 18425 0000CDCB 48FFC2                  	inc rdx
 18426 0000CDCE EBEA                    	jmp .L_lambda_simple_env_loop_058d
 18427                                  .L_lambda_simple_env_end_058d:
 18428 0000CDD0 5B                      	pop rbx
 18429 0000CDD1 BE00000000              	mov rsi, 0
 18430                                  .L_lambda_simple_params_loop_058d:	; copy params
 18431 0000CDD6 4883FE02                	cmp rsi, 2
 18432 0000CDDA 740E                    	je .L_lambda_simple_params_end_058d
 18433 0000CDDC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18434 0000CDE1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18435 0000CDE5 48FFC6                  	inc rsi
 18436 0000CDE8 EBEC                    	jmp .L_lambda_simple_params_loop_058d
 18437                                  .L_lambda_simple_params_end_058d:
 18438 0000CDEA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18439 0000CDED 4889C3                  	mov rbx, rax
 18440 0000CDF0 58                      	pop rax
 18441 0000CDF1 C60004                  	mov byte [rax], T_closure
 18442 0000CDF4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18443 0000CDF8 48C74009[05CE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_058d
 18444 0000CE00 E95A010000              	jmp .L_lambda_simple_end_058d
 18445                                  .L_lambda_simple_code_058d:	; lambda-simple body
 18446 0000CE05 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18447 0000CE0B 740B                    	je .L_lambda_simple_arity_check_ok_058d
 18448 0000CE0D FF742410                	push qword [rsp + 8 * 2]
 18449 0000CE11 6A02                    	push 2
 18450 0000CE13 E9C9880000              	jmp L_error_incorrect_arity_simple
 18451                                  .L_lambda_simple_arity_check_ok_058d:
 18452 0000CE18 C8000000                	enter 0, 0
 18453 0000CE1C 488B4528                	mov rax, PARAM(1)	; param len2
 18454 0000CE20 50                      	push rax
 18455 0000CE21 488B4520                	mov rax, PARAM(0)	; param len1
 18456 0000CE25 50                      	push rax
 18457 0000CE26 6A02                    	push 2	; arg count
 18458 0000CE28 488B0425[F7150000]      	mov rax, qword [free_var_123]	; free var <=
 18459 0000CE30 803805                  	cmp byte [rax], T_undefined
 18460 0000CE33 0F84C2870000            	je L_error_fvar_undefined
 18461 0000CE39 803804                  	cmp byte [rax], T_closure
 18462 0000CE3C 0F853D880000            	jne L_error_non_closure
 18463 0000CE42 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18464 0000CE45 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18465                                  
 18466 0000CE48 483D[02000000]          	cmp rax, sob_boolean_false
 18467 0000CE4E 0F8486000000            	je .L_if_else_0425
 18468                                  	; preparing a tail-call
 18469 0000CE54 488B4528                	mov rax, PARAM(1)	; param len2
 18470 0000CE58 50                      	push rax
 18471 0000CE59 488B4510                	mov rax, ENV
 18472 0000CE5D 488B00                  	mov rax, qword [rax + 8 * 0]
 18473 0000CE60 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 18474 0000CE64 50                      	push rax
 18475 0000CE65 488B4520                	mov rax, PARAM(0)	; param len1
 18476 0000CE69 50                      	push rax
 18477 0000CE6A 488B4510                	mov rax, ENV
 18478 0000CE6E 488B00                  	mov rax, qword [rax + 8 * 0]
 18479 0000CE71 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 18480 0000CE74 50                      	push rax
 18481 0000CE75 48B8-                   	mov rax, L_constants + 2023
 18481 0000CE77 [E707000000000000] 
 18482 0000CE7F 50                      	push rax
 18483 0000CE80 6A05                    	push 5	; arg count
 18484 0000CE82 488B4510                	mov rax, ENV
 18485 0000CE86 488B4008                	mov rax, qword [rax + 8 * 1]
 18486 0000CE8A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18487 0000CE8D 488B00                  	mov rax, qword [rax]
 18488 0000CE90 803804                  	cmp byte [rax], T_closure
 18489 0000CE93 0F85E6870000            	jne L_error_non_closure
 18490 0000CE99 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18491                                  
 18492                                  	; recycling the current frame
 18493 0000CE9C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18494 0000CE9F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18495 0000CEA2 B909000000              	mov rcx, 5 + 4
 18496 0000CEA7 488B5D18                	mov rbx, COUNT
 18497 0000CEAB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18498 0000CEB0 488D55F8                	lea rdx, [rbp - 8 * 1]
 18499                                  .L_tc_recycle_frame_loop_0761:
 18500 0000CEB4 4883F900                	cmp rcx, 0
 18501 0000CEB8 7413                    	je .L_tc_recycle_frame_done_0761
 18502 0000CEBA 488B32                  	mov rsi, qword [rdx]
 18503 0000CEBD 488933                  	mov qword [rbx], rsi
 18504 0000CEC0 48FFC9                  	dec rcx
 18505 0000CEC3 4883EB08                	sub rbx, 8 * 1
 18506 0000CEC7 4883EA08                	sub rdx, 8 * 1
 18507 0000CECB EBE7                    	jmp .L_tc_recycle_frame_loop_0761
 18508                                  .L_tc_recycle_frame_done_0761:
 18509 0000CECD 488D6308                	lea rsp, [rbx + 8 * 1]
 18510 0000CED1 5D                      	pop rbp	; the proc will restore it!
 18511 0000CED2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18512                                  
 18513 0000CED5 E981000000              	jmp .L_if_end_0425
 18514                                  
 18515                                  	.L_if_else_0425:
 18516                                  	; preparing a tail-call
 18517 0000CEDA 488B4520                	mov rax, PARAM(0)	; param len1
 18518 0000CEDE 50                      	push rax
 18519 0000CEDF 488B4510                	mov rax, ENV
 18520 0000CEE3 488B00                  	mov rax, qword [rax + 8 * 0]
 18521 0000CEE6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 18522 0000CEE9 50                      	push rax
 18523 0000CEEA 488B4528                	mov rax, PARAM(1)	; param len2
 18524 0000CEEE 50                      	push rax
 18525 0000CEEF 488B4510                	mov rax, ENV
 18526 0000CEF3 488B00                  	mov rax, qword [rax + 8 * 0]
 18527 0000CEF6 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 18528 0000CEFA 50                      	push rax
 18529 0000CEFB 48B8-                   	mov rax, L_constants + 2023
 18529 0000CEFD [E707000000000000] 
 18530 0000CF05 50                      	push rax
 18531 0000CF06 6A05                    	push 5	; arg count
 18532 0000CF08 488B4510                	mov rax, ENV
 18533 0000CF0C 488B4008                	mov rax, qword [rax + 8 * 1]
 18534 0000CF10 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18535 0000CF13 488B00                  	mov rax, qword [rax]
 18536 0000CF16 803804                  	cmp byte [rax], T_closure
 18537 0000CF19 0F8560870000            	jne L_error_non_closure
 18538 0000CF1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18539                                  
 18540                                  	; recycling the current frame
 18541 0000CF22 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18542 0000CF25 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18543 0000CF28 B909000000              	mov rcx, 5 + 4
 18544 0000CF2D 488B5D18                	mov rbx, COUNT
 18545 0000CF31 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18546 0000CF36 488D55F8                	lea rdx, [rbp - 8 * 1]
 18547                                  .L_tc_recycle_frame_loop_0762:
 18548 0000CF3A 4883F900                	cmp rcx, 0
 18549 0000CF3E 7413                    	je .L_tc_recycle_frame_done_0762
 18550 0000CF40 488B32                  	mov rsi, qword [rdx]
 18551 0000CF43 488933                  	mov qword [rbx], rsi
 18552 0000CF46 48FFC9                  	dec rcx
 18553 0000CF49 4883EB08                	sub rbx, 8 * 1
 18554 0000CF4D 4883EA08                	sub rdx, 8 * 1
 18555 0000CF51 EBE7                    	jmp .L_tc_recycle_frame_loop_0762
 18556                                  .L_tc_recycle_frame_done_0762:
 18557 0000CF53 488D6308                	lea rsp, [rbx + 8 * 1]
 18558 0000CF57 5D                      	pop rbp	; the proc will restore it!
 18559 0000CF58 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18560                                  
 18561                                  	.L_if_end_0425:
 18562 0000CF5B C9                      	leave
 18563 0000CF5C C22000                  	ret AND_KILL_FRAME(2)
 18564                                  .L_lambda_simple_end_058d:	; new closure is in rax
 18565 0000CF5F 803804                  	cmp byte [rax], T_closure
 18566 0000CF62 0F8517870000            	jne L_error_non_closure
 18567 0000CF68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18568                                  
 18569                                  	; recycling the current frame
 18570 0000CF6B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18571 0000CF6E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18572 0000CF71 B906000000              	mov rcx, 2 + 4
 18573 0000CF76 488B5D18                	mov rbx, COUNT
 18574 0000CF7A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18575 0000CF7F 488D55F8                	lea rdx, [rbp - 8 * 1]
 18576                                  .L_tc_recycle_frame_loop_0763:
 18577 0000CF83 4883F900                	cmp rcx, 0
 18578 0000CF87 7413                    	je .L_tc_recycle_frame_done_0763
 18579 0000CF89 488B32                  	mov rsi, qword [rdx]
 18580 0000CF8C 488933                  	mov qword [rbx], rsi
 18581 0000CF8F 48FFC9                  	dec rcx
 18582 0000CF92 4883EB08                	sub rbx, 8 * 1
 18583 0000CF96 4883EA08                	sub rdx, 8 * 1
 18584 0000CF9A EBE7                    	jmp .L_tc_recycle_frame_loop_0763
 18585                                  .L_tc_recycle_frame_done_0763:
 18586 0000CF9C 488D6308                	lea rsp, [rbx + 8 * 1]
 18587 0000CFA0 5D                      	pop rbp	; the proc will restore it!
 18588 0000CFA1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18589 0000CFA4 C9                      	leave
 18590 0000CFA5 C22000                  	ret AND_KILL_FRAME(2)
 18591                                  .L_lambda_simple_end_058c:	; new closure is in rax
 18592 0000CFA8 50                      	push rax
 18593 0000CFA9 6A01                    	push 1	; arg count
 18594 0000CFAB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18595 0000CFB0 E873870000              	call malloc
 18596 0000CFB5 50                      	push rax
 18597 0000CFB6 BF08000000              	mov rdi, 8 * 1	; new rib
 18598 0000CFBB E868870000              	call malloc
 18599 0000CFC0 50                      	push rax
 18600 0000CFC1 BF18000000              	mov rdi, 8 * 3	; extended env
 18601 0000CFC6 E85D870000              	call malloc
 18602 0000CFCB 488B7D10                	mov rdi, ENV
 18603 0000CFCF BE00000000              	mov rsi, 0
 18604 0000CFD4 BA01000000              	mov rdx, 1
 18605                                  .L_lambda_simple_env_loop_058e:	; ext_env[i + 1] <-- env[i]
 18606 0000CFD9 4883FE02                	cmp rsi, 2
 18607 0000CFDD 7410                    	je .L_lambda_simple_env_end_058e
 18608 0000CFDF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18609 0000CFE3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18610 0000CFE7 48FFC6                  	inc rsi
 18611 0000CFEA 48FFC2                  	inc rdx
 18612 0000CFED EBEA                    	jmp .L_lambda_simple_env_loop_058e
 18613                                  .L_lambda_simple_env_end_058e:
 18614 0000CFEF 5B                      	pop rbx
 18615 0000CFF0 BE00000000              	mov rsi, 0
 18616                                  .L_lambda_simple_params_loop_058e:	; copy params
 18617 0000CFF5 4883FE01                	cmp rsi, 1
 18618 0000CFF9 740E                    	je .L_lambda_simple_params_end_058e
 18619 0000CFFB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18620 0000D000 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18621 0000D004 48FFC6                  	inc rsi
 18622 0000D007 EBEC                    	jmp .L_lambda_simple_params_loop_058e
 18623                                  .L_lambda_simple_params_end_058e:
 18624 0000D009 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18625 0000D00C 4889C3                  	mov rbx, rax
 18626 0000D00F 58                      	pop rax
 18627 0000D010 C60004                  	mov byte [rax], T_closure
 18628 0000D013 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18629 0000D017 48C74009[24D00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_058e
 18630 0000D01F E9AF040000              	jmp .L_lambda_simple_end_058e
 18631                                  .L_lambda_simple_code_058e:	; lambda-simple body
 18632 0000D024 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18633 0000D02A 740B                    	je .L_lambda_simple_arity_check_ok_058e
 18634 0000D02C FF742410                	push qword [rsp + 8 * 2]
 18635 0000D030 6A01                    	push 1
 18636 0000D032 E9AA860000              	jmp L_error_incorrect_arity_simple
 18637                                  .L_lambda_simple_arity_check_ok_058e:
 18638 0000D037 C8000000                	enter 0, 0
 18639                                  	; preparing a tail-call
 18640 0000D03B 48B8-                   	mov rax, L_constants + 1881
 18640 0000D03D [5907000000000000] 
 18641 0000D045 50                      	push rax
 18642 0000D046 6A01                    	push 1	; arg count
 18643 0000D048 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18644 0000D04D E8D6860000              	call malloc
 18645 0000D052 50                      	push rax
 18646 0000D053 BF08000000              	mov rdi, 8 * 1	; new rib
 18647 0000D058 E8CB860000              	call malloc
 18648 0000D05D 50                      	push rax
 18649 0000D05E BF20000000              	mov rdi, 8 * 4	; extended env
 18650 0000D063 E8C0860000              	call malloc
 18651 0000D068 488B7D10                	mov rdi, ENV
 18652 0000D06C BE00000000              	mov rsi, 0
 18653 0000D071 BA01000000              	mov rdx, 1
 18654                                  .L_lambda_simple_env_loop_058f:	; ext_env[i + 1] <-- env[i]
 18655 0000D076 4883FE03                	cmp rsi, 3
 18656 0000D07A 7410                    	je .L_lambda_simple_env_end_058f
 18657 0000D07C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18658 0000D080 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18659 0000D084 48FFC6                  	inc rsi
 18660 0000D087 48FFC2                  	inc rdx
 18661 0000D08A EBEA                    	jmp .L_lambda_simple_env_loop_058f
 18662                                  .L_lambda_simple_env_end_058f:
 18663 0000D08C 5B                      	pop rbx
 18664 0000D08D BE00000000              	mov rsi, 0
 18665                                  .L_lambda_simple_params_loop_058f:	; copy params
 18666 0000D092 4883FE01                	cmp rsi, 1
 18667 0000D096 740E                    	je .L_lambda_simple_params_end_058f
 18668 0000D098 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18669 0000D09D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18670 0000D0A1 48FFC6                  	inc rsi
 18671 0000D0A4 EBEC                    	jmp .L_lambda_simple_params_loop_058f
 18672                                  .L_lambda_simple_params_end_058f:
 18673 0000D0A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18674 0000D0A9 4889C3                  	mov rbx, rax
 18675 0000D0AC 58                      	pop rax
 18676 0000D0AD C60004                  	mov byte [rax], T_closure
 18677 0000D0B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18678 0000D0B4 48C74009[C1D00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_058f
 18679 0000D0BC E9C9030000              	jmp .L_lambda_simple_end_058f
 18680                                  .L_lambda_simple_code_058f:	; lambda-simple body
 18681 0000D0C1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18682 0000D0C7 740B                    	je .L_lambda_simple_arity_check_ok_058f
 18683 0000D0C9 FF742410                	push qword [rsp + 8 * 2]
 18684 0000D0CD 6A01                    	push 1
 18685 0000D0CF E90D860000              	jmp L_error_incorrect_arity_simple
 18686                                  .L_lambda_simple_arity_check_ok_058f:
 18687 0000D0D4 C8000000                	enter 0, 0
 18688                                  
 18689 0000D0D8 BF08000000              	mov rdi, 8
 18690 0000D0DD E846860000              	call malloc
 18691 0000D0E2 488B5D20                	mov rbx, PARAM(0)	; param run
 18692 0000D0E6 488918                  	mov [rax], rbx	; box run
 18693 0000D0E9 48894520                	mov PARAM(0), rax	;replace param run with box
 18694 0000D0ED 48B8-                   	mov rax, sob_void
 18694 0000D0EF [0000000000000000] 
 18695                                  
 18696 0000D0F7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18697 0000D0FC E827860000              	call malloc
 18698 0000D101 50                      	push rax
 18699 0000D102 BF08000000              	mov rdi, 8 * 1	; new rib
 18700 0000D107 E81C860000              	call malloc
 18701 0000D10C 50                      	push rax
 18702 0000D10D BF28000000              	mov rdi, 8 * 5	; extended env
 18703 0000D112 E811860000              	call malloc
 18704 0000D117 488B7D10                	mov rdi, ENV
 18705 0000D11B BE00000000              	mov rsi, 0
 18706 0000D120 BA01000000              	mov rdx, 1
 18707                                  .L_lambda_simple_env_loop_0590:	; ext_env[i + 1] <-- env[i]
 18708 0000D125 4883FE04                	cmp rsi, 4
 18709 0000D129 7410                    	je .L_lambda_simple_env_end_0590
 18710 0000D12B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18711 0000D12F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18712 0000D133 48FFC6                  	inc rsi
 18713 0000D136 48FFC2                  	inc rdx
 18714 0000D139 EBEA                    	jmp .L_lambda_simple_env_loop_0590
 18715                                  .L_lambda_simple_env_end_0590:
 18716 0000D13B 5B                      	pop rbx
 18717 0000D13C BE00000000              	mov rsi, 0
 18718                                  .L_lambda_simple_params_loop_0590:	; copy params
 18719 0000D141 4883FE01                	cmp rsi, 1
 18720 0000D145 740E                    	je .L_lambda_simple_params_end_0590
 18721 0000D147 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18722 0000D14C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18723 0000D150 48FFC6                  	inc rsi
 18724 0000D153 EBEC                    	jmp .L_lambda_simple_params_loop_0590
 18725                                  .L_lambda_simple_params_end_0590:
 18726 0000D155 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18727 0000D158 4889C3                  	mov rbx, rax
 18728 0000D15B 58                      	pop rax
 18729 0000D15C C60004                  	mov byte [rax], T_closure
 18730 0000D15F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18731 0000D163 48C74009[70D10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0590
 18732 0000D16B E953010000              	jmp .L_lambda_simple_end_0590
 18733                                  .L_lambda_simple_code_0590:	; lambda-simple body
 18734 0000D170 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18735 0000D176 740B                    	je .L_lambda_simple_arity_check_ok_0590
 18736 0000D178 FF742410                	push qword [rsp + 8 * 2]
 18737 0000D17C 6A02                    	push 2
 18738 0000D17E E95E850000              	jmp L_error_incorrect_arity_simple
 18739                                  .L_lambda_simple_arity_check_ok_0590:
 18740 0000D183 C8000000                	enter 0, 0
 18741 0000D187 488B4528                	mov rax, PARAM(1)	; param strs
 18742 0000D18B 50                      	push rax
 18743 0000D18C 6A01                    	push 1	; arg count
 18744 0000D18E 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 18745 0000D196 803805                  	cmp byte [rax], T_undefined
 18746 0000D199 0F845C840000            	je L_error_fvar_undefined
 18747 0000D19F 803804                  	cmp byte [rax], T_closure
 18748 0000D1A2 0F85D7840000            	jne L_error_non_closure
 18749 0000D1A8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18750 0000D1AB FF5009                  	call SOB_CLOSURE_CODE(rax)
 18751 0000D1AE 483D[02000000]          	cmp rax, sob_boolean_false
 18752 0000D1B4 0F8505010000            	jne .L_or_end_0063
 18753 0000D1BA 488B4528                	mov rax, PARAM(1)	; param strs
 18754 0000D1BE 50                      	push rax
 18755 0000D1BF 6A01                    	push 1	; arg count
 18756 0000D1C1 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 18757 0000D1C9 803805                  	cmp byte [rax], T_undefined
 18758 0000D1CC 0F8429840000            	je L_error_fvar_undefined
 18759 0000D1D2 803804                  	cmp byte [rax], T_closure
 18760 0000D1D5 0F85A4840000            	jne L_error_non_closure
 18761 0000D1DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 18762 0000D1DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 18763 0000D1E1 50                      	push rax
 18764 0000D1E2 488B4520                	mov rax, PARAM(0)	; param str
 18765 0000D1E6 50                      	push rax
 18766 0000D1E7 6A02                    	push 2	; arg count
 18767 0000D1E9 488B4510                	mov rax, ENV
 18768 0000D1ED 488B4008                	mov rax, qword [rax + 8 * 1]
 18769 0000D1F1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<?
 18770 0000D1F4 803804                  	cmp byte [rax], T_closure
 18771 0000D1F7 0F8582840000            	jne L_error_non_closure
 18772 0000D1FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 18773 0000D200 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18774                                  
 18775 0000D203 483D[02000000]          	cmp rax, sob_boolean_false
 18776 0000D209 0F84A6000000            	je .L_if_else_0426
 18777                                  	; preparing a tail-call
 18778 0000D20F 488B4528                	mov rax, PARAM(1)	; param strs
 18779 0000D213 50                      	push rax
 18780 0000D214 6A01                    	push 1	; arg count
 18781 0000D216 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 18782 0000D21E 803805                  	cmp byte [rax], T_undefined
 18783 0000D221 0F84D4830000            	je L_error_fvar_undefined
 18784 0000D227 803804                  	cmp byte [rax], T_closure
 18785 0000D22A 0F854F840000            	jne L_error_non_closure
 18786 0000D230 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18787 0000D233 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18788 0000D236 50                      	push rax
 18789 0000D237 488B4528                	mov rax, PARAM(1)	; param strs
 18790 0000D23B 50                      	push rax
 18791 0000D23C 6A01                    	push 1	; arg count
 18792 0000D23E 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 18793 0000D246 803805                  	cmp byte [rax], T_undefined
 18794 0000D249 0F84AC830000            	je L_error_fvar_undefined
 18795 0000D24F 803804                  	cmp byte [rax], T_closure
 18796 0000D252 0F8527840000            	jne L_error_non_closure
 18797 0000D258 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18798 0000D25B FF5009                  	call SOB_CLOSURE_CODE(rax)
 18799 0000D25E 50                      	push rax
 18800 0000D25F 6A02                    	push 2	; arg count
 18801 0000D261 488B4510                	mov rax, ENV
 18802 0000D265 488B00                  	mov rax, qword [rax + 8 * 0]
 18803 0000D268 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18804 0000D26B 488B00                  	mov rax, qword [rax]
 18805 0000D26E 803804                  	cmp byte [rax], T_closure
 18806 0000D271 0F8508840000            	jne L_error_non_closure
 18807 0000D277 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18808                                  
 18809                                  	; recycling the current frame
 18810 0000D27A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18811 0000D27D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18812 0000D280 B906000000              	mov rcx, 2 + 4
 18813 0000D285 488B5D18                	mov rbx, COUNT
 18814 0000D289 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18815 0000D28E 488D55F8                	lea rdx, [rbp - 8 * 1]
 18816                                  .L_tc_recycle_frame_loop_0764:
 18817 0000D292 4883F900                	cmp rcx, 0
 18818 0000D296 7413                    	je .L_tc_recycle_frame_done_0764
 18819 0000D298 488B32                  	mov rsi, qword [rdx]
 18820 0000D29B 488933                  	mov qword [rbx], rsi
 18821 0000D29E 48FFC9                  	dec rcx
 18822 0000D2A1 4883EB08                	sub rbx, 8 * 1
 18823 0000D2A5 4883EA08                	sub rdx, 8 * 1
 18824 0000D2A9 EBE7                    	jmp .L_tc_recycle_frame_loop_0764
 18825                                  .L_tc_recycle_frame_done_0764:
 18826 0000D2AB 488D6308                	lea rsp, [rbx + 8 * 1]
 18827 0000D2AF 5D                      	pop rbp	; the proc will restore it!
 18828 0000D2B0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18829                                  
 18830 0000D2B3 EB0A                    	jmp .L_if_end_0426
 18831                                  
 18832                                  	.L_if_else_0426:
 18833 0000D2B5 48B8-                   	mov rax, L_constants + 2
 18833 0000D2B7 [0200000000000000] 
 18834                                  
 18835                                  	.L_if_end_0426:
 18836                                  .L_or_end_0063:
 18837 0000D2BF C9                      	leave
 18838 0000D2C0 C22000                  	ret AND_KILL_FRAME(2)
 18839                                  .L_lambda_simple_end_0590:	; new closure is in rax
 18840                                  
 18841 0000D2C3 50                      	push rax
 18842 0000D2C4 488B4520                	mov rax, PARAM(0)	; param run
 18843                                  
 18844 0000D2C8 8F00                    	pop qword[rax]
 18845 0000D2CA 48B8-                   	mov rax, sob_void
 18845 0000D2CC [0000000000000000] 
 18846                                  
 18847 0000D2D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18848 0000D2D9 E84A840000              	call malloc
 18849 0000D2DE 50                      	push rax
 18850 0000D2DF BF08000000              	mov rdi, 8 * 1	; new rib
 18851 0000D2E4 E83F840000              	call malloc
 18852 0000D2E9 50                      	push rax
 18853 0000D2EA BF28000000              	mov rdi, 8 * 5	; extended env
 18854 0000D2EF E834840000              	call malloc
 18855 0000D2F4 488B7D10                	mov rdi, ENV
 18856 0000D2F8 BE00000000              	mov rsi, 0
 18857 0000D2FD BA01000000              	mov rdx, 1
 18858                                  .L_lambda_opt_env_loop_00c1:	; ext_env[i + 1] <-- env[i]
 18859 0000D302 4883FE04                	cmp rsi, 4
 18860 0000D306 7410                    	je .L_lambda_opt_env_end_00c1
 18861 0000D308 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18862 0000D30C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18863 0000D310 48FFC6                  	inc rsi
 18864 0000D313 48FFC2                  	inc rdx
 18865 0000D316 EBEA                    	jmp .L_lambda_opt_env_loop_00c1
 18866                                  .L_lambda_opt_env_end_00c1:
 18867 0000D318 5B                      	pop rbx
 18868 0000D319 BE00000000              	mov rsi, 0
 18869                                  .L_lambda_opt_params_loop_00c1:	; copy params
 18870 0000D31E 4883FE01                	cmp rsi, 1
 18871 0000D322 740E                    	je .L_lambda_opt_params_end_00c1
 18872 0000D324 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18873 0000D329 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18874 0000D32D 48FFC6                  	inc rsi
 18875 0000D330 EBEC                    	jmp .L_lambda_opt_params_loop_00c1
 18876                                  .L_lambda_opt_params_end_00c1:
 18877 0000D332 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18878 0000D335 4889C3                  	mov rbx, rax
 18879 0000D338 58                      	pop rax
 18880 0000D339 C60004                  	mov byte [rax], T_closure
 18881 0000D33C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18882 0000D340 48C74009[4DD30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00c1
 18883 0000D348 E939010000              	jmp .L_lambda_opt_end_00c1
 18884                                  .L_lambda_opt_code_00c1:	; lambda-simple body
 18885 0000D34D 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 18886 0000D353 740D                    	je .L_lambda_opt_arity_check_exact_00c1 ;	 if equal, go to exact arity
 18887 0000D355 7F42                    	jg .L_lambda_opt_arity_check_more_00c1 ;	 if greater than, go to arity more
 18888 0000D357 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 18889 0000D35B 6A01                     	push 1
 18890 0000D35D E993830000              	jmp L_error_incorrect_arity_opt
 18891                                  	.L_lambda_opt_arity_check_exact_00c1:
 18892 0000D362 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 18893 0000D367 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 18894 0000D36C 4883EC08                	sub rsp, 8
 18895 0000D370 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 18896                                  	.L_lambda_opt_exact_shifting_loop_00c1:
 18897 0000D374 488B5108                	mov rdx, [rcx + 8]
 18898 0000D378 488911                  	mov [rcx], rdx
 18899 0000D37B 4883C108                	add rcx, 8
 18900 0000D37F 4839CB                  	cmp rbx, rcx
 18901 0000D382 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00c1
 18902                                  	.L_lambda_opt_exact_shifting_loop_end_00c1:
 18903 0000D384 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 18904 0000D38B 4883C001                	add rax, 1 ; 	arg count += 1
 18905 0000D38F 4889442410              	mov qword [rsp + 8 * 2], rax
 18906 0000D394 E987000000              	jmp .L_lambda_opt_stack_adjusted_00c1
 18907                                  	.L_lambda_opt_arity_check_more_00c1:
 18908 0000D399 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 18908 0000D39B [0100000000000000] 
 18909 0000D3A3 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 18910 0000D3A9 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00c1
 18911                                  	.L_lambda_opt_stack_shrink_loop_00c1:
 18912 0000D3AB BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 18913 0000D3B0 E873830000              	call malloc ;	 allocated memory for the optional scheme list
 18914 0000D3B5 C60021                  	mov byte[rax], T_pair ;	 set type pair
 18915 0000D3B8 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 18916 0000D3BC 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 18917 0000D3BF 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 18918 0000D3C4 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 18919 0000D3C9 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 18920 0000D3CD 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 18921                                  	.L_lambda_opt_more_shifting_loop_00c1:
 18922 0000D3D2 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 18923 0000D3D5 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 18924 0000D3D9 4883EB08                	sub rbx, 8 
 18925 0000D3DD 4839DC                  	cmp rsp, rbx
 18926 0000D3E0 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00c1
 18927                                  	.L_lambda_opt_more_shifting_loop_end_00c1:
 18928 0000D3E2 4883C408                	add rsp, 8 ;	 update rsp
 18929 0000D3E6 488B5C2410              	mov rbx, [rsp + 8 * 2]
 18930 0000D3EB 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 18931 0000D3EF 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 18932 0000D3F4 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18933 0000D3FA 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00c1
 18934                                  	.L_lambda_opt_stack_shrink_loop_exit_00c1:
 18935 0000D3FC 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 18936 0000D401 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 18937 0000D406 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 18938 0000D40B E818830000              	call malloc ;	 allocated memory for the optional scheme list
 18939 0000D410 C60021                  	mov byte[rax], T_pair ;	 set type pair
 18940 0000D413 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 18941 0000D417 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 18942 0000D41B 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 18943                                  	.L_lambda_opt_stack_adjusted_00c1:
 18944 0000D420 C8000000                	enter 0, 0
 18945                                  	; preparing a tail-call
 18946 0000D424 488B4528                	mov rax, PARAM(1)	; param strs
 18947 0000D428 50                      	push rax
 18948 0000D429 488B4520                	mov rax, PARAM(0)	; param str
 18949 0000D42D 50                      	push rax
 18950 0000D42E 6A02                    	push 2	; arg count
 18951 0000D430 488B4510                	mov rax, ENV
 18952 0000D434 488B00                  	mov rax, qword [rax + 8 * 0]
 18953 0000D437 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 18954 0000D43A 488B00                  	mov rax, qword [rax]
 18955 0000D43D 803804                  	cmp byte [rax], T_closure
 18956 0000D440 0F8539820000            	jne L_error_non_closure
 18957 0000D446 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18958                                  
 18959                                  	; recycling the current frame
 18960 0000D449 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18961 0000D44C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18962 0000D44F B906000000              	mov rcx, 2 + 4
 18963 0000D454 488B5D18                	mov rbx, COUNT
 18964 0000D458 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18965 0000D45D 488D55F8                	lea rdx, [rbp - 8 * 1]
 18966                                  .L_tc_recycle_frame_loop_0765:
 18967 0000D461 4883F900                	cmp rcx, 0
 18968 0000D465 7413                    	je .L_tc_recycle_frame_done_0765
 18969 0000D467 488B32                  	mov rsi, qword [rdx]
 18970 0000D46A 488933                  	mov qword [rbx], rsi
 18971 0000D46D 48FFC9                  	dec rcx
 18972 0000D470 4883EB08                	sub rbx, 8 * 1
 18973 0000D474 4883EA08                	sub rdx, 8 * 1
 18974 0000D478 EBE7                    	jmp .L_tc_recycle_frame_loop_0765
 18975                                  .L_tc_recycle_frame_done_0765:
 18976 0000D47A 488D6308                	lea rsp, [rbx + 8 * 1]
 18977 0000D47E 5D                      	pop rbp	; the proc will restore it!
 18978 0000D47F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18979 0000D482 C9                      	leave
 18980 0000D483 C22000                  	ret AND_KILL_FRAME(2)
 18981                                  .L_lambda_opt_end_00c1:	; new closure is in rax
 18982 0000D486 C9                      	leave
 18983 0000D487 C21800                  	ret AND_KILL_FRAME(1)
 18984                                  .L_lambda_simple_end_058f:	; new closure is in rax
 18985 0000D48A 803804                  	cmp byte [rax], T_closure
 18986 0000D48D 0F85EC810000            	jne L_error_non_closure
 18987 0000D493 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18988                                  
 18989                                  	; recycling the current frame
 18990 0000D496 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 18991 0000D499 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 18992 0000D49C B905000000              	mov rcx, 1 + 4
 18993 0000D4A1 488B5D18                	mov rbx, COUNT
 18994 0000D4A5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 18995 0000D4AA 488D55F8                	lea rdx, [rbp - 8 * 1]
 18996                                  .L_tc_recycle_frame_loop_0766:
 18997 0000D4AE 4883F900                	cmp rcx, 0
 18998 0000D4B2 7413                    	je .L_tc_recycle_frame_done_0766
 18999 0000D4B4 488B32                  	mov rsi, qword [rdx]
 19000 0000D4B7 488933                  	mov qword [rbx], rsi
 19001 0000D4BA 48FFC9                  	dec rcx
 19002 0000D4BD 4883EB08                	sub rbx, 8 * 1
 19003 0000D4C1 4883EA08                	sub rdx, 8 * 1
 19004 0000D4C5 EBE7                    	jmp .L_tc_recycle_frame_loop_0766
 19005                                  .L_tc_recycle_frame_done_0766:
 19006 0000D4C7 488D6308                	lea rsp, [rbx + 8 * 1]
 19007 0000D4CB 5D                      	pop rbp	; the proc will restore it!
 19008 0000D4CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19009 0000D4CF C9                      	leave
 19010 0000D4D0 C21800                  	ret AND_KILL_FRAME(1)
 19011                                  .L_lambda_simple_end_058e:	; new closure is in rax
 19012 0000D4D3 803804                  	cmp byte [rax], T_closure
 19013 0000D4D6 0F85A3810000            	jne L_error_non_closure
 19014 0000D4DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 19015                                  
 19016                                  	; recycling the current frame
 19017 0000D4DF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19018 0000D4E2 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19019 0000D4E5 B905000000              	mov rcx, 1 + 4
 19020 0000D4EA 488B5D18                	mov rbx, COUNT
 19021 0000D4EE 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19022 0000D4F3 488D55F8                	lea rdx, [rbp - 8 * 1]
 19023                                  .L_tc_recycle_frame_loop_0767:
 19024 0000D4F7 4883F900                	cmp rcx, 0
 19025 0000D4FB 7413                    	je .L_tc_recycle_frame_done_0767
 19026 0000D4FD 488B32                  	mov rsi, qword [rdx]
 19027 0000D500 488933                  	mov qword [rbx], rsi
 19028 0000D503 48FFC9                  	dec rcx
 19029 0000D506 4883EB08                	sub rbx, 8 * 1
 19030 0000D50A 4883EA08                	sub rdx, 8 * 1
 19031 0000D50E EBE7                    	jmp .L_tc_recycle_frame_loop_0767
 19032                                  .L_tc_recycle_frame_done_0767:
 19033 0000D510 488D6308                	lea rsp, [rbx + 8 * 1]
 19034 0000D514 5D                      	pop rbp	; the proc will restore it!
 19035 0000D515 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19036 0000D518 C9                      	leave
 19037 0000D519 C21800                  	ret AND_KILL_FRAME(1)
 19038                                  .L_lambda_simple_end_058a:	; new closure is in rax
 19039 0000D51C 803804                  	cmp byte [rax], T_closure
 19040 0000D51F 0F855A810000            	jne L_error_non_closure
 19041 0000D525 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19042                                  
 19043                                  	; recycling the current frame
 19044 0000D528 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19045 0000D52B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19046 0000D52E B905000000              	mov rcx, 1 + 4
 19047 0000D533 488B5D18                	mov rbx, COUNT
 19048 0000D537 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19049 0000D53C 488D55F8                	lea rdx, [rbp - 8 * 1]
 19050                                  .L_tc_recycle_frame_loop_0768:
 19051 0000D540 4883F900                	cmp rcx, 0
 19052 0000D544 7413                    	je .L_tc_recycle_frame_done_0768
 19053 0000D546 488B32                  	mov rsi, qword [rdx]
 19054 0000D549 488933                  	mov qword [rbx], rsi
 19055 0000D54C 48FFC9                  	dec rcx
 19056 0000D54F 4883EB08                	sub rbx, 8 * 1
 19057 0000D553 4883EA08                	sub rdx, 8 * 1
 19058 0000D557 EBE7                    	jmp .L_tc_recycle_frame_loop_0768
 19059                                  .L_tc_recycle_frame_done_0768:
 19060 0000D559 488D6308                	lea rsp, [rbx + 8 * 1]
 19061 0000D55D 5D                      	pop rbp	; the proc will restore it!
 19062 0000D55E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19063 0000D561 C9                      	leave
 19064 0000D562 C22000                  	ret AND_KILL_FRAME(2)
 19065                                  .L_lambda_simple_end_0589:	; new closure is in rax
 19066 0000D565 50                      	push rax
 19067 0000D566 6A01                    	push 1	; arg count
 19068 0000D568 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19069 0000D56D E8B6810000              	call malloc
 19070 0000D572 50                      	push rax
 19071 0000D573 BF00000000              	mov rdi, 8 * 0	; new rib
 19072 0000D578 E8AB810000              	call malloc
 19073 0000D57D 50                      	push rax
 19074 0000D57E BF08000000              	mov rdi, 8 * 1	; extended env
 19075 0000D583 E8A0810000              	call malloc
 19076 0000D588 488B7D10                	mov rdi, ENV
 19077 0000D58C BE00000000              	mov rsi, 0
 19078 0000D591 BA01000000              	mov rdx, 1
 19079                                  .L_lambda_simple_env_loop_0591:	; ext_env[i + 1] <-- env[i]
 19080 0000D596 4883FE00                	cmp rsi, 0
 19081 0000D59A 7410                    	je .L_lambda_simple_env_end_0591
 19082 0000D59C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19083 0000D5A0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19084 0000D5A4 48FFC6                  	inc rsi
 19085 0000D5A7 48FFC2                  	inc rdx
 19086 0000D5AA EBEA                    	jmp .L_lambda_simple_env_loop_0591
 19087                                  .L_lambda_simple_env_end_0591:
 19088 0000D5AC 5B                      	pop rbx
 19089 0000D5AD BE00000000              	mov rsi, 0
 19090                                  .L_lambda_simple_params_loop_0591:	; copy params
 19091 0000D5B2 4883FE00                	cmp rsi, 0
 19092 0000D5B6 740E                    	je .L_lambda_simple_params_end_0591
 19093 0000D5B8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19094 0000D5BD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19095 0000D5C1 48FFC6                  	inc rsi
 19096 0000D5C4 EBEC                    	jmp .L_lambda_simple_params_loop_0591
 19097                                  .L_lambda_simple_params_end_0591:
 19098 0000D5C6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19099 0000D5C9 4889C3                  	mov rbx, rax
 19100 0000D5CC 58                      	pop rax
 19101 0000D5CD C60004                  	mov byte [rax], T_closure
 19102 0000D5D0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19103 0000D5D4 48C74009[E1D50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0591
 19104 0000D5DC E96B010000              	jmp .L_lambda_simple_end_0591
 19105                                  .L_lambda_simple_code_0591:	; lambda-simple body
 19106 0000D5E1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19107 0000D5E7 740B                    	je .L_lambda_simple_arity_check_ok_0591
 19108 0000D5E9 FF742410                	push qword [rsp + 8 * 2]
 19109 0000D5ED 6A01                    	push 1
 19110 0000D5EF E9ED800000              	jmp L_error_incorrect_arity_simple
 19111                                  .L_lambda_simple_arity_check_ok_0591:
 19112 0000D5F4 C8000000                	enter 0, 0
 19113 0000D5F8 488B0425[6E160000]      	mov rax, qword [free_var_130]	; free var char=?
 19114 0000D600 803805                  	cmp byte [rax], T_undefined
 19115 0000D603 0F84F27F0000            	je L_error_fvar_undefined
 19116 0000D609 50                      	push rax
 19117 0000D60A 488B0425[4C160000]      	mov rax, qword [free_var_128]	; free var char<?
 19118 0000D612 803805                  	cmp byte [rax], T_undefined
 19119 0000D615 0F84E07F0000            	je L_error_fvar_undefined
 19120 0000D61B 50                      	push rax
 19121 0000D61C 6A02                    	push 2	; arg count
 19122 0000D61E 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19123 0000D622 803804                  	cmp byte [rax], T_closure
 19124 0000D625 0F8554800000            	jne L_error_non_closure
 19125 0000D62B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19126 0000D62E FF5009                  	call SOB_CLOSURE_CODE(rax)
 19127 0000D631 48890425[5C170000]      	mov qword [free_var_144], rax	; free var string<?
 19128 0000D639 803805                  	cmp byte [rax], T_undefined
 19129 0000D63C 0F84B97F0000            	je L_error_fvar_undefined
 19130 0000D642 48B8-                   	mov rax, sob_void
 19130 0000D644 [0000000000000000] 
 19131                                  
 19132 0000D64C 488B0425[E5160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 19133 0000D654 803805                  	cmp byte [rax], T_undefined
 19134 0000D657 0F849E7F0000            	je L_error_fvar_undefined
 19135 0000D65D 50                      	push rax
 19136 0000D65E 488B0425[C3160000]      	mov rax, qword [free_var_135]	; free var char-ci<?
 19137 0000D666 803805                  	cmp byte [rax], T_undefined
 19138 0000D669 0F848C7F0000            	je L_error_fvar_undefined
 19139 0000D66F 50                      	push rax
 19140 0000D670 6A02                    	push 2	; arg count
 19141 0000D672 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19142 0000D676 803804                  	cmp byte [rax], T_closure
 19143 0000D679 0F8500800000            	jne L_error_non_closure
 19144 0000D67F FF7001                  	push SOB_CLOSURE_ENV(rax)
 19145 0000D682 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19146 0000D685 48890425[B1170000]      	mov qword [free_var_149], rax	; free var string-ci<?
 19147 0000D68D 803805                  	cmp byte [rax], T_undefined
 19148 0000D690 0F84657F0000            	je L_error_fvar_undefined
 19149 0000D696 48B8-                   	mov rax, sob_void
 19149 0000D698 [0000000000000000] 
 19150                                  
 19151 0000D6A0 488B0425[6E160000]      	mov rax, qword [free_var_130]	; free var char=?
 19152 0000D6A8 803805                  	cmp byte [rax], T_undefined
 19153 0000D6AB 0F844A7F0000            	je L_error_fvar_undefined
 19154 0000D6B1 50                      	push rax
 19155 0000D6B2 488B0425[7F160000]      	mov rax, qword [free_var_131]	; free var char>?
 19156 0000D6BA 803805                  	cmp byte [rax], T_undefined
 19157 0000D6BD 0F84387F0000            	je L_error_fvar_undefined
 19158 0000D6C3 50                      	push rax
 19159 0000D6C4 6A02                    	push 2	; arg count
 19160 0000D6C6 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19161 0000D6CA 803804                  	cmp byte [rax], T_closure
 19162 0000D6CD 0F85AC7F0000            	jne L_error_non_closure
 19163 0000D6D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19164 0000D6D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19165 0000D6D9 48890425[A0170000]      	mov qword [free_var_148], rax	; free var string>?
 19166 0000D6E1 803805                  	cmp byte [rax], T_undefined
 19167 0000D6E4 0F84117F0000            	je L_error_fvar_undefined
 19168 0000D6EA 48B8-                   	mov rax, sob_void
 19168 0000D6EC [0000000000000000] 
 19169                                  
 19170 0000D6F4 488B0425[E5160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 19171 0000D6FC 803805                  	cmp byte [rax], T_undefined
 19172 0000D6FF 0F84F67E0000            	je L_error_fvar_undefined
 19173 0000D705 50                      	push rax
 19174 0000D706 488B0425[F6160000]      	mov rax, qword [free_var_138]	; free var char-ci>?
 19175 0000D70E 803805                  	cmp byte [rax], T_undefined
 19176 0000D711 0F84E47E0000            	je L_error_fvar_undefined
 19177 0000D717 50                      	push rax
 19178 0000D718 6A02                    	push 2	; arg count
 19179 0000D71A 488B4520                	mov rax, PARAM(0)	; param make-string<?
 19180 0000D71E 803804                  	cmp byte [rax], T_closure
 19181 0000D721 0F85587F0000            	jne L_error_non_closure
 19182 0000D727 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19183 0000D72A FF5009                  	call SOB_CLOSURE_CODE(rax)
 19184 0000D72D 48890425[F5170000]      	mov qword [free_var_153], rax	; free var string-ci>?
 19185 0000D735 803805                  	cmp byte [rax], T_undefined
 19186 0000D738 0F84BD7E0000            	je L_error_fvar_undefined
 19187 0000D73E 48B8-                   	mov rax, sob_void
 19187 0000D740 [0000000000000000] 
 19188 0000D748 C9                      	leave
 19189 0000D749 C21800                  	ret AND_KILL_FRAME(1)
 19190                                  .L_lambda_simple_end_0591:	; new closure is in rax
 19191 0000D74C 803804                  	cmp byte [rax], T_closure
 19192 0000D74F 0F852A7F0000            	jne L_error_non_closure
 19193 0000D755 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19194 0000D758 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19195                                  
 19196 0000D75B 4889C7                  	mov rdi, rax
 19197 0000D75E E8D7800000              	call print_sexpr_if_not_void
 19198                                  
 19199 0000D763 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19200 0000D768 E8BB7F0000              	call malloc
 19201 0000D76D 50                      	push rax
 19202 0000D76E BF00000000              	mov rdi, 8 * 0	; new rib
 19203 0000D773 E8B07F0000              	call malloc
 19204 0000D778 50                      	push rax
 19205 0000D779 BF08000000              	mov rdi, 8 * 1	; extended env
 19206 0000D77E E8A57F0000              	call malloc
 19207 0000D783 488B7D10                	mov rdi, ENV
 19208 0000D787 BE00000000              	mov rsi, 0
 19209 0000D78C BA01000000              	mov rdx, 1
 19210                                  .L_lambda_simple_env_loop_0592:	; ext_env[i + 1] <-- env[i]
 19211 0000D791 4883FE00                	cmp rsi, 0
 19212 0000D795 7410                    	je .L_lambda_simple_env_end_0592
 19213 0000D797 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19214 0000D79B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19215 0000D79F 48FFC6                  	inc rsi
 19216 0000D7A2 48FFC2                  	inc rdx
 19217 0000D7A5 EBEA                    	jmp .L_lambda_simple_env_loop_0592
 19218                                  .L_lambda_simple_env_end_0592:
 19219 0000D7A7 5B                      	pop rbx
 19220 0000D7A8 BE00000000              	mov rsi, 0
 19221                                  .L_lambda_simple_params_loop_0592:	; copy params
 19222 0000D7AD 4883FE00                	cmp rsi, 0
 19223 0000D7B1 740E                    	je .L_lambda_simple_params_end_0592
 19224 0000D7B3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19225 0000D7B8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19226 0000D7BC 48FFC6                  	inc rsi
 19227 0000D7BF EBEC                    	jmp .L_lambda_simple_params_loop_0592
 19228                                  .L_lambda_simple_params_end_0592:
 19229 0000D7C1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19230 0000D7C4 4889C3                  	mov rbx, rax
 19231 0000D7C7 58                      	pop rax
 19232 0000D7C8 C60004                  	mov byte [rax], T_closure
 19233 0000D7CB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19234 0000D7CF 48C74009[DCD70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0592
 19235 0000D7D7 E95B0C0000              	jmp .L_lambda_simple_end_0592
 19236                                  .L_lambda_simple_code_0592:	; lambda-simple body
 19237 0000D7DC 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19238 0000D7E2 740B                    	je .L_lambda_simple_arity_check_ok_0592
 19239 0000D7E4 FF742410                	push qword [rsp + 8 * 2]
 19240 0000D7E8 6A02                    	push 2
 19241 0000D7EA E9F27E0000              	jmp L_error_incorrect_arity_simple
 19242                                  .L_lambda_simple_arity_check_ok_0592:
 19243 0000D7EF C8000000                	enter 0, 0
 19244                                  	; preparing a tail-call
 19245 0000D7F3 48B8-                   	mov rax, L_constants + 1881
 19245 0000D7F5 [5907000000000000] 
 19246 0000D7FD 50                      	push rax
 19247 0000D7FE 6A01                    	push 1	; arg count
 19248 0000D800 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19249 0000D805 E81E7F0000              	call malloc
 19250 0000D80A 50                      	push rax
 19251 0000D80B BF10000000              	mov rdi, 8 * 2	; new rib
 19252 0000D810 E8137F0000              	call malloc
 19253 0000D815 50                      	push rax
 19254 0000D816 BF10000000              	mov rdi, 8 * 2	; extended env
 19255 0000D81B E8087F0000              	call malloc
 19256 0000D820 488B7D10                	mov rdi, ENV
 19257 0000D824 BE00000000              	mov rsi, 0
 19258 0000D829 BA01000000              	mov rdx, 1
 19259                                  .L_lambda_simple_env_loop_0593:	; ext_env[i + 1] <-- env[i]
 19260 0000D82E 4883FE01                	cmp rsi, 1
 19261 0000D832 7410                    	je .L_lambda_simple_env_end_0593
 19262 0000D834 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19263 0000D838 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19264 0000D83C 48FFC6                  	inc rsi
 19265 0000D83F 48FFC2                  	inc rdx
 19266 0000D842 EBEA                    	jmp .L_lambda_simple_env_loop_0593
 19267                                  .L_lambda_simple_env_end_0593:
 19268 0000D844 5B                      	pop rbx
 19269 0000D845 BE00000000              	mov rsi, 0
 19270                                  .L_lambda_simple_params_loop_0593:	; copy params
 19271 0000D84A 4883FE02                	cmp rsi, 2
 19272 0000D84E 740E                    	je .L_lambda_simple_params_end_0593
 19273 0000D850 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19274 0000D855 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19275 0000D859 48FFC6                  	inc rsi
 19276 0000D85C EBEC                    	jmp .L_lambda_simple_params_loop_0593
 19277                                  .L_lambda_simple_params_end_0593:
 19278 0000D85E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19279 0000D861 4889C3                  	mov rbx, rax
 19280 0000D864 58                      	pop rax
 19281 0000D865 C60004                  	mov byte [rax], T_closure
 19282 0000D868 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19283 0000D86C 48C74009[79D80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0593
 19284 0000D874 E9750B0000              	jmp .L_lambda_simple_end_0593
 19285                                  .L_lambda_simple_code_0593:	; lambda-simple body
 19286 0000D879 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19287 0000D87F 740B                    	je .L_lambda_simple_arity_check_ok_0593
 19288 0000D881 FF742410                	push qword [rsp + 8 * 2]
 19289 0000D885 6A01                    	push 1
 19290 0000D887 E9557E0000              	jmp L_error_incorrect_arity_simple
 19291                                  .L_lambda_simple_arity_check_ok_0593:
 19292 0000D88C C8000000                	enter 0, 0
 19293                                  
 19294 0000D890 BF08000000              	mov rdi, 8
 19295 0000D895 E88E7E0000              	call malloc
 19296 0000D89A 488B5D20                	mov rbx, PARAM(0)	; param run
 19297 0000D89E 488918                  	mov [rax], rbx	; box run
 19298 0000D8A1 48894520                	mov PARAM(0), rax	;replace param run with box
 19299 0000D8A5 48B8-                   	mov rax, sob_void
 19299 0000D8A7 [0000000000000000] 
 19300                                  
 19301 0000D8AF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19302 0000D8B4 E86F7E0000              	call malloc
 19303 0000D8B9 50                      	push rax
 19304 0000D8BA BF08000000              	mov rdi, 8 * 1	; new rib
 19305 0000D8BF E8647E0000              	call malloc
 19306 0000D8C4 50                      	push rax
 19307 0000D8C5 BF18000000              	mov rdi, 8 * 3	; extended env
 19308 0000D8CA E8597E0000              	call malloc
 19309 0000D8CF 488B7D10                	mov rdi, ENV
 19310 0000D8D3 BE00000000              	mov rsi, 0
 19311 0000D8D8 BA01000000              	mov rdx, 1
 19312                                  .L_lambda_simple_env_loop_0594:	; ext_env[i + 1] <-- env[i]
 19313 0000D8DD 4883FE02                	cmp rsi, 2
 19314 0000D8E1 7410                    	je .L_lambda_simple_env_end_0594
 19315 0000D8E3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19316 0000D8E7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19317 0000D8EB 48FFC6                  	inc rsi
 19318 0000D8EE 48FFC2                  	inc rdx
 19319 0000D8F1 EBEA                    	jmp .L_lambda_simple_env_loop_0594
 19320                                  .L_lambda_simple_env_end_0594:
 19321 0000D8F3 5B                      	pop rbx
 19322 0000D8F4 BE00000000              	mov rsi, 0
 19323                                  .L_lambda_simple_params_loop_0594:	; copy params
 19324 0000D8F9 4883FE01                	cmp rsi, 1
 19325 0000D8FD 740E                    	je .L_lambda_simple_params_end_0594
 19326 0000D8FF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19327 0000D904 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19328 0000D908 48FFC6                  	inc rsi
 19329 0000D90B EBEC                    	jmp .L_lambda_simple_params_loop_0594
 19330                                  .L_lambda_simple_params_end_0594:
 19331 0000D90D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19332 0000D910 4889C3                  	mov rbx, rax
 19333 0000D913 58                      	pop rax
 19334 0000D914 C60004                  	mov byte [rax], T_closure
 19335 0000D917 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19336 0000D91B 48C74009[28D90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0594
 19337 0000D923 E943020000              	jmp .L_lambda_simple_end_0594
 19338                                  .L_lambda_simple_code_0594:	; lambda-simple body
 19339 0000D928 48837C241005            	cmp qword [rsp + 8 * 2], 5
 19340 0000D92E 740B                    	je .L_lambda_simple_arity_check_ok_0594
 19341 0000D930 FF742410                	push qword [rsp + 8 * 2]
 19342 0000D934 6A05                    	push 5
 19343 0000D936 E9A67D0000              	jmp L_error_incorrect_arity_simple
 19344                                  .L_lambda_simple_arity_check_ok_0594:
 19345 0000D93B C8000000                	enter 0, 0
 19346 0000D93F 488B4530                	mov rax, PARAM(2)	; param len1
 19347 0000D943 50                      	push rax
 19348 0000D944 488B4520                	mov rax, PARAM(0)	; param i
 19349 0000D948 50                      	push rax
 19350 0000D949 6A02                    	push 2	; arg count
 19351 0000D94B 488B0425[2A160000]      	mov rax, qword [free_var_126]	; free var =
 19352 0000D953 803805                  	cmp byte [rax], T_undefined
 19353 0000D956 0F849F7C0000            	je L_error_fvar_undefined
 19354 0000D95C 803804                  	cmp byte [rax], T_closure
 19355 0000D95F 0F851A7D0000            	jne L_error_non_closure
 19356 0000D965 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19357 0000D968 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19358 0000D96B 483D[02000000]          	cmp rax, sob_boolean_false
 19359 0000D971 0F85F0010000            	jne .L_or_end_0064
 19360 0000D977 488B4520                	mov rax, PARAM(0)	; param i
 19361 0000D97B 50                      	push rax
 19362 0000D97C 488B4538                	mov rax, PARAM(3)	; param str2
 19363 0000D980 50                      	push rax
 19364 0000D981 6A02                    	push 2	; arg count
 19365 0000D983 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 19366 0000D98B 803805                  	cmp byte [rax], T_undefined
 19367 0000D98E 0F84677C0000            	je L_error_fvar_undefined
 19368 0000D994 803804                  	cmp byte [rax], T_closure
 19369 0000D997 0F85E27C0000            	jne L_error_non_closure
 19370 0000D99D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19371 0000D9A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19372 0000D9A3 50                      	push rax
 19373 0000D9A4 488B4520                	mov rax, PARAM(0)	; param i
 19374 0000D9A8 50                      	push rax
 19375 0000D9A9 488B4528                	mov rax, PARAM(1)	; param str1
 19376 0000D9AD 50                      	push rax
 19377 0000D9AE 6A02                    	push 2	; arg count
 19378 0000D9B0 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 19379 0000D9B8 803805                  	cmp byte [rax], T_undefined
 19380 0000D9BB 0F843A7C0000            	je L_error_fvar_undefined
 19381 0000D9C1 803804                  	cmp byte [rax], T_closure
 19382 0000D9C4 0F85B57C0000            	jne L_error_non_closure
 19383 0000D9CA FF7001                  	push SOB_CLOSURE_ENV(rax)
 19384 0000D9CD FF5009                  	call SOB_CLOSURE_CODE(rax)
 19385 0000D9D0 50                      	push rax
 19386 0000D9D1 6A02                    	push 2	; arg count
 19387 0000D9D3 488B4510                	mov rax, ENV
 19388 0000D9D7 488B4008                	mov rax, qword [rax + 8 * 1]
 19389 0000D9DB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 19390 0000D9DE 803804                  	cmp byte [rax], T_closure
 19391 0000D9E1 0F85987C0000            	jne L_error_non_closure
 19392 0000D9E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19393 0000D9EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 19394 0000D9ED 483D[02000000]          	cmp rax, sob_boolean_false
 19395 0000D9F3 0F856E010000            	jne .L_or_end_0064
 19396 0000D9F9 488B4530                	mov rax, PARAM(2)	; param len1
 19397 0000D9FD 50                      	push rax
 19398 0000D9FE 488B4520                	mov rax, PARAM(0)	; param i
 19399 0000DA02 50                      	push rax
 19400 0000DA03 6A02                    	push 2	; arg count
 19401 0000DA05 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 19402 0000DA0D 803805                  	cmp byte [rax], T_undefined
 19403 0000DA10 0F84E57B0000            	je L_error_fvar_undefined
 19404 0000DA16 803804                  	cmp byte [rax], T_closure
 19405 0000DA19 0F85607C0000            	jne L_error_non_closure
 19406 0000DA1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 19407 0000DA22 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19408                                  
 19409 0000DA25 483D[02000000]          	cmp rax, sob_boolean_false
 19410 0000DA2B 0F842C010000            	je .L_if_else_0427
 19411 0000DA31 488B4520                	mov rax, PARAM(0)	; param i
 19412 0000DA35 50                      	push rax
 19413 0000DA36 488B4538                	mov rax, PARAM(3)	; param str2
 19414 0000DA3A 50                      	push rax
 19415 0000DA3B 6A02                    	push 2	; arg count
 19416 0000DA3D 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 19417 0000DA45 803805                  	cmp byte [rax], T_undefined
 19418 0000DA48 0F84AD7B0000            	je L_error_fvar_undefined
 19419 0000DA4E 803804                  	cmp byte [rax], T_closure
 19420 0000DA51 0F85287C0000            	jne L_error_non_closure
 19421 0000DA57 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19422 0000DA5A FF5009                  	call SOB_CLOSURE_CODE(rax)
 19423 0000DA5D 50                      	push rax
 19424 0000DA5E 488B4520                	mov rax, PARAM(0)	; param i
 19425 0000DA62 50                      	push rax
 19426 0000DA63 488B4528                	mov rax, PARAM(1)	; param str1
 19427 0000DA67 50                      	push rax
 19428 0000DA68 6A02                    	push 2	; arg count
 19429 0000DA6A 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 19430 0000DA72 803805                  	cmp byte [rax], T_undefined
 19431 0000DA75 0F84807B0000            	je L_error_fvar_undefined
 19432 0000DA7B 803804                  	cmp byte [rax], T_closure
 19433 0000DA7E 0F85FB7B0000            	jne L_error_non_closure
 19434 0000DA84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19435 0000DA87 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19436 0000DA8A 50                      	push rax
 19437 0000DA8B 6A02                    	push 2	; arg count
 19438 0000DA8D 488B4510                	mov rax, ENV
 19439 0000DA91 488B4008                	mov rax, qword [rax + 8 * 1]
 19440 0000DA95 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 19441 0000DA99 803804                  	cmp byte [rax], T_closure
 19442 0000DA9C 0F85DD7B0000            	jne L_error_non_closure
 19443 0000DAA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19444 0000DAA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19445                                  
 19446 0000DAA8 483D[02000000]          	cmp rax, sob_boolean_false
 19447 0000DAAE 0F849D000000            	je .L_if_else_0428
 19448                                  	; preparing a tail-call
 19449 0000DAB4 488B4540                	mov rax, PARAM(4)	; param len2
 19450 0000DAB8 50                      	push rax
 19451 0000DAB9 488B4538                	mov rax, PARAM(3)	; param str2
 19452 0000DABD 50                      	push rax
 19453 0000DABE 488B4530                	mov rax, PARAM(2)	; param len1
 19454 0000DAC2 50                      	push rax
 19455 0000DAC3 488B4528                	mov rax, PARAM(1)	; param str1
 19456 0000DAC7 50                      	push rax
 19457 0000DAC8 48B8-                   	mov rax, L_constants + 2158
 19457 0000DACA [6E08000000000000] 
 19458 0000DAD2 50                      	push rax
 19459 0000DAD3 488B4520                	mov rax, PARAM(0)	; param i
 19460 0000DAD7 50                      	push rax
 19461 0000DAD8 6A02                    	push 2	; arg count
 19462 0000DADA 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 19463 0000DAE2 803805                  	cmp byte [rax], T_undefined
 19464 0000DAE5 0F84107B0000            	je L_error_fvar_undefined
 19465 0000DAEB 803804                  	cmp byte [rax], T_closure
 19466 0000DAEE 0F858B7B0000            	jne L_error_non_closure
 19467 0000DAF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19468 0000DAF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19469 0000DAFA 50                      	push rax
 19470 0000DAFB 6A05                    	push 5	; arg count
 19471 0000DAFD 488B4510                	mov rax, ENV
 19472 0000DB01 488B00                  	mov rax, qword [rax + 8 * 0]
 19473 0000DB04 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19474 0000DB07 488B00                  	mov rax, qword [rax]
 19475 0000DB0A 803804                  	cmp byte [rax], T_closure
 19476 0000DB0D 0F856C7B0000            	jne L_error_non_closure
 19477 0000DB13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19478                                  
 19479                                  	; recycling the current frame
 19480 0000DB16 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19481 0000DB19 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19482 0000DB1C B909000000              	mov rcx, 5 + 4
 19483 0000DB21 488B5D18                	mov rbx, COUNT
 19484 0000DB25 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19485 0000DB2A 488D55F8                	lea rdx, [rbp - 8 * 1]
 19486                                  .L_tc_recycle_frame_loop_0769:
 19487 0000DB2E 4883F900                	cmp rcx, 0
 19488 0000DB32 7413                    	je .L_tc_recycle_frame_done_0769
 19489 0000DB34 488B32                  	mov rsi, qword [rdx]
 19490 0000DB37 488933                  	mov qword [rbx], rsi
 19491 0000DB3A 48FFC9                  	dec rcx
 19492 0000DB3D 4883EB08                	sub rbx, 8 * 1
 19493 0000DB41 4883EA08                	sub rdx, 8 * 1
 19494 0000DB45 EBE7                    	jmp .L_tc_recycle_frame_loop_0769
 19495                                  .L_tc_recycle_frame_done_0769:
 19496 0000DB47 488D6308                	lea rsp, [rbx + 8 * 1]
 19497 0000DB4B 5D                      	pop rbp	; the proc will restore it!
 19498 0000DB4C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19499                                  
 19500 0000DB4F EB0A                    	jmp .L_if_end_0428
 19501                                  
 19502                                  	.L_if_else_0428:
 19503 0000DB51 48B8-                   	mov rax, L_constants + 2
 19503 0000DB53 [0200000000000000] 
 19504                                  
 19505                                  	.L_if_end_0428:
 19506                                  
 19507 0000DB5B EB0A                    	jmp .L_if_end_0427
 19508                                  
 19509                                  	.L_if_else_0427:
 19510 0000DB5D 48B8-                   	mov rax, L_constants + 2
 19510 0000DB5F [0200000000000000] 
 19511                                  
 19512                                  	.L_if_end_0427:
 19513                                  .L_or_end_0064:
 19514 0000DB67 C9                      	leave
 19515 0000DB68 C23800                  	ret AND_KILL_FRAME(5)
 19516                                  .L_lambda_simple_end_0594:	; new closure is in rax
 19517                                  
 19518 0000DB6B 50                      	push rax
 19519 0000DB6C 488B4520                	mov rax, PARAM(0)	; param run
 19520                                  
 19521 0000DB70 8F00                    	pop qword[rax]
 19522 0000DB72 48B8-                   	mov rax, sob_void
 19522 0000DB74 [0000000000000000] 
 19523                                  
 19524                                  	; preparing a tail-call
 19525 0000DB7C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19526 0000DB81 E8A27B0000              	call malloc
 19527 0000DB86 50                      	push rax
 19528 0000DB87 BF08000000              	mov rdi, 8 * 1	; new rib
 19529 0000DB8C E8977B0000              	call malloc
 19530 0000DB91 50                      	push rax
 19531 0000DB92 BF18000000              	mov rdi, 8 * 3	; extended env
 19532 0000DB97 E88C7B0000              	call malloc
 19533 0000DB9C 488B7D10                	mov rdi, ENV
 19534 0000DBA0 BE00000000              	mov rsi, 0
 19535 0000DBA5 BA01000000              	mov rdx, 1
 19536                                  .L_lambda_simple_env_loop_0595:	; ext_env[i + 1] <-- env[i]
 19537 0000DBAA 4883FE02                	cmp rsi, 2
 19538 0000DBAE 7410                    	je .L_lambda_simple_env_end_0595
 19539 0000DBB0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19540 0000DBB4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19541 0000DBB8 48FFC6                  	inc rsi
 19542 0000DBBB 48FFC2                  	inc rdx
 19543 0000DBBE EBEA                    	jmp .L_lambda_simple_env_loop_0595
 19544                                  .L_lambda_simple_env_end_0595:
 19545 0000DBC0 5B                      	pop rbx
 19546 0000DBC1 BE00000000              	mov rsi, 0
 19547                                  .L_lambda_simple_params_loop_0595:	; copy params
 19548 0000DBC6 4883FE01                	cmp rsi, 1
 19549 0000DBCA 740E                    	je .L_lambda_simple_params_end_0595
 19550 0000DBCC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19551 0000DBD1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19552 0000DBD5 48FFC6                  	inc rsi
 19553 0000DBD8 EBEC                    	jmp .L_lambda_simple_params_loop_0595
 19554                                  .L_lambda_simple_params_end_0595:
 19555 0000DBDA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19556 0000DBDD 4889C3                  	mov rbx, rax
 19557 0000DBE0 58                      	pop rax
 19558 0000DBE1 C60004                  	mov byte [rax], T_closure
 19559 0000DBE4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19560 0000DBE8 48C74009[F5DB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0595
 19561 0000DBF0 E985020000              	jmp .L_lambda_simple_end_0595
 19562                                  .L_lambda_simple_code_0595:	; lambda-simple body
 19563 0000DBF5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19564 0000DBFB 740B                    	je .L_lambda_simple_arity_check_ok_0595
 19565 0000DBFD FF742410                	push qword [rsp + 8 * 2]
 19566 0000DC01 6A02                    	push 2
 19567 0000DC03 E9D97A0000              	jmp L_error_incorrect_arity_simple
 19568                                  .L_lambda_simple_arity_check_ok_0595:
 19569 0000DC08 C8000000                	enter 0, 0
 19570                                  	; preparing a tail-call
 19571 0000DC0C 488B4528                	mov rax, PARAM(1)	; param str2
 19572 0000DC10 50                      	push rax
 19573 0000DC11 6A01                    	push 1	; arg count
 19574 0000DC13 488B0425[FE0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 19575 0000DC1B 803805                  	cmp byte [rax], T_undefined
 19576 0000DC1E 0F84D7790000            	je L_error_fvar_undefined
 19577 0000DC24 803804                  	cmp byte [rax], T_closure
 19578 0000DC27 0F85527A0000            	jne L_error_non_closure
 19579 0000DC2D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19580 0000DC30 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19581 0000DC33 50                      	push rax
 19582 0000DC34 488B4520                	mov rax, PARAM(0)	; param str1
 19583 0000DC38 50                      	push rax
 19584 0000DC39 6A01                    	push 1	; arg count
 19585 0000DC3B 488B0425[FE0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 19586 0000DC43 803805                  	cmp byte [rax], T_undefined
 19587 0000DC46 0F84AF790000            	je L_error_fvar_undefined
 19588 0000DC4C 803804                  	cmp byte [rax], T_closure
 19589 0000DC4F 0F852A7A0000            	jne L_error_non_closure
 19590 0000DC55 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19591 0000DC58 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19592 0000DC5B 50                      	push rax
 19593 0000DC5C 6A02                    	push 2	; arg count
 19594 0000DC5E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19595 0000DC63 E8C07A0000              	call malloc
 19596 0000DC68 50                      	push rax
 19597 0000DC69 BF10000000              	mov rdi, 8 * 2	; new rib
 19598 0000DC6E E8B57A0000              	call malloc
 19599 0000DC73 50                      	push rax
 19600 0000DC74 BF20000000              	mov rdi, 8 * 4	; extended env
 19601 0000DC79 E8AA7A0000              	call malloc
 19602 0000DC7E 488B7D10                	mov rdi, ENV
 19603 0000DC82 BE00000000              	mov rsi, 0
 19604 0000DC87 BA01000000              	mov rdx, 1
 19605                                  .L_lambda_simple_env_loop_0596:	; ext_env[i + 1] <-- env[i]
 19606 0000DC8C 4883FE03                	cmp rsi, 3
 19607 0000DC90 7410                    	je .L_lambda_simple_env_end_0596
 19608 0000DC92 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19609 0000DC96 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19610 0000DC9A 48FFC6                  	inc rsi
 19611 0000DC9D 48FFC2                  	inc rdx
 19612 0000DCA0 EBEA                    	jmp .L_lambda_simple_env_loop_0596
 19613                                  .L_lambda_simple_env_end_0596:
 19614 0000DCA2 5B                      	pop rbx
 19615 0000DCA3 BE00000000              	mov rsi, 0
 19616                                  .L_lambda_simple_params_loop_0596:	; copy params
 19617 0000DCA8 4883FE02                	cmp rsi, 2
 19618 0000DCAC 740E                    	je .L_lambda_simple_params_end_0596
 19619 0000DCAE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19620 0000DCB3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19621 0000DCB7 48FFC6                  	inc rsi
 19622 0000DCBA EBEC                    	jmp .L_lambda_simple_params_loop_0596
 19623                                  .L_lambda_simple_params_end_0596:
 19624 0000DCBC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19625 0000DCBF 4889C3                  	mov rbx, rax
 19626 0000DCC2 58                      	pop rax
 19627 0000DCC3 C60004                  	mov byte [rax], T_closure
 19628 0000DCC6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19629 0000DCCA 48C74009[D7DC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0596
 19630 0000DCD2 E95A010000              	jmp .L_lambda_simple_end_0596
 19631                                  .L_lambda_simple_code_0596:	; lambda-simple body
 19632 0000DCD7 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19633 0000DCDD 740B                    	je .L_lambda_simple_arity_check_ok_0596
 19634 0000DCDF FF742410                	push qword [rsp + 8 * 2]
 19635 0000DCE3 6A02                    	push 2
 19636 0000DCE5 E9F7790000              	jmp L_error_incorrect_arity_simple
 19637                                  .L_lambda_simple_arity_check_ok_0596:
 19638 0000DCEA C8000000                	enter 0, 0
 19639 0000DCEE 488B4528                	mov rax, PARAM(1)	; param len2
 19640 0000DCF2 50                      	push rax
 19641 0000DCF3 488B4520                	mov rax, PARAM(0)	; param len1
 19642 0000DCF7 50                      	push rax
 19643 0000DCF8 6A02                    	push 2	; arg count
 19644 0000DCFA 488B0425[F7150000]      	mov rax, qword [free_var_123]	; free var <=
 19645 0000DD02 803805                  	cmp byte [rax], T_undefined
 19646 0000DD05 0F84F0780000            	je L_error_fvar_undefined
 19647 0000DD0B 803804                  	cmp byte [rax], T_closure
 19648 0000DD0E 0F856B790000            	jne L_error_non_closure
 19649 0000DD14 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19650 0000DD17 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19651                                  
 19652 0000DD1A 483D[02000000]          	cmp rax, sob_boolean_false
 19653 0000DD20 0F8486000000            	je .L_if_else_0429
 19654                                  	; preparing a tail-call
 19655 0000DD26 488B4528                	mov rax, PARAM(1)	; param len2
 19656 0000DD2A 50                      	push rax
 19657 0000DD2B 488B4510                	mov rax, ENV
 19658 0000DD2F 488B00                  	mov rax, qword [rax + 8 * 0]
 19659 0000DD32 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19660 0000DD36 50                      	push rax
 19661 0000DD37 488B4520                	mov rax, PARAM(0)	; param len1
 19662 0000DD3B 50                      	push rax
 19663 0000DD3C 488B4510                	mov rax, ENV
 19664 0000DD40 488B00                  	mov rax, qword [rax + 8 * 0]
 19665 0000DD43 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19666 0000DD46 50                      	push rax
 19667 0000DD47 48B8-                   	mov rax, L_constants + 2023
 19667 0000DD49 [E707000000000000] 
 19668 0000DD51 50                      	push rax
 19669 0000DD52 6A05                    	push 5	; arg count
 19670 0000DD54 488B4510                	mov rax, ENV
 19671 0000DD58 488B4008                	mov rax, qword [rax + 8 * 1]
 19672 0000DD5C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19673 0000DD5F 488B00                  	mov rax, qword [rax]
 19674 0000DD62 803804                  	cmp byte [rax], T_closure
 19675 0000DD65 0F8514790000            	jne L_error_non_closure
 19676 0000DD6B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19677                                  
 19678                                  	; recycling the current frame
 19679 0000DD6E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19680 0000DD71 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19681 0000DD74 B909000000              	mov rcx, 5 + 4
 19682 0000DD79 488B5D18                	mov rbx, COUNT
 19683 0000DD7D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19684 0000DD82 488D55F8                	lea rdx, [rbp - 8 * 1]
 19685                                  .L_tc_recycle_frame_loop_076a:
 19686 0000DD86 4883F900                	cmp rcx, 0
 19687 0000DD8A 7413                    	je .L_tc_recycle_frame_done_076a
 19688 0000DD8C 488B32                  	mov rsi, qword [rdx]
 19689 0000DD8F 488933                  	mov qword [rbx], rsi
 19690 0000DD92 48FFC9                  	dec rcx
 19691 0000DD95 4883EB08                	sub rbx, 8 * 1
 19692 0000DD99 4883EA08                	sub rdx, 8 * 1
 19693 0000DD9D EBE7                    	jmp .L_tc_recycle_frame_loop_076a
 19694                                  .L_tc_recycle_frame_done_076a:
 19695 0000DD9F 488D6308                	lea rsp, [rbx + 8 * 1]
 19696 0000DDA3 5D                      	pop rbp	; the proc will restore it!
 19697 0000DDA4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19698                                  
 19699 0000DDA7 E981000000              	jmp .L_if_end_0429
 19700                                  
 19701                                  	.L_if_else_0429:
 19702                                  	; preparing a tail-call
 19703 0000DDAC 488B4520                	mov rax, PARAM(0)	; param len1
 19704 0000DDB0 50                      	push rax
 19705 0000DDB1 488B4510                	mov rax, ENV
 19706 0000DDB5 488B00                  	mov rax, qword [rax + 8 * 0]
 19707 0000DDB8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19708 0000DDBB 50                      	push rax
 19709 0000DDBC 488B4528                	mov rax, PARAM(1)	; param len2
 19710 0000DDC0 50                      	push rax
 19711 0000DDC1 488B4510                	mov rax, ENV
 19712 0000DDC5 488B00                  	mov rax, qword [rax + 8 * 0]
 19713 0000DDC8 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19714 0000DDCC 50                      	push rax
 19715 0000DDCD 48B8-                   	mov rax, L_constants + 2023
 19715 0000DDCF [E707000000000000] 
 19716 0000DDD7 50                      	push rax
 19717 0000DDD8 6A05                    	push 5	; arg count
 19718 0000DDDA 488B4510                	mov rax, ENV
 19719 0000DDDE 488B4008                	mov rax, qword [rax + 8 * 1]
 19720 0000DDE2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19721 0000DDE5 488B00                  	mov rax, qword [rax]
 19722 0000DDE8 803804                  	cmp byte [rax], T_closure
 19723 0000DDEB 0F858E780000            	jne L_error_non_closure
 19724 0000DDF1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19725                                  
 19726                                  	; recycling the current frame
 19727 0000DDF4 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19728 0000DDF7 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19729 0000DDFA B909000000              	mov rcx, 5 + 4
 19730 0000DDFF 488B5D18                	mov rbx, COUNT
 19731 0000DE03 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19732 0000DE08 488D55F8                	lea rdx, [rbp - 8 * 1]
 19733                                  .L_tc_recycle_frame_loop_076b:
 19734 0000DE0C 4883F900                	cmp rcx, 0
 19735 0000DE10 7413                    	je .L_tc_recycle_frame_done_076b
 19736 0000DE12 488B32                  	mov rsi, qword [rdx]
 19737 0000DE15 488933                  	mov qword [rbx], rsi
 19738 0000DE18 48FFC9                  	dec rcx
 19739 0000DE1B 4883EB08                	sub rbx, 8 * 1
 19740 0000DE1F 4883EA08                	sub rdx, 8 * 1
 19741 0000DE23 EBE7                    	jmp .L_tc_recycle_frame_loop_076b
 19742                                  .L_tc_recycle_frame_done_076b:
 19743 0000DE25 488D6308                	lea rsp, [rbx + 8 * 1]
 19744 0000DE29 5D                      	pop rbp	; the proc will restore it!
 19745 0000DE2A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19746                                  
 19747                                  	.L_if_end_0429:
 19748 0000DE2D C9                      	leave
 19749 0000DE2E C22000                  	ret AND_KILL_FRAME(2)
 19750                                  .L_lambda_simple_end_0596:	; new closure is in rax
 19751 0000DE31 803804                  	cmp byte [rax], T_closure
 19752 0000DE34 0F8545780000            	jne L_error_non_closure
 19753 0000DE3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 19754                                  
 19755                                  	; recycling the current frame
 19756 0000DE3D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19757 0000DE40 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19758 0000DE43 B906000000              	mov rcx, 2 + 4
 19759 0000DE48 488B5D18                	mov rbx, COUNT
 19760 0000DE4C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 19761 0000DE51 488D55F8                	lea rdx, [rbp - 8 * 1]
 19762                                  .L_tc_recycle_frame_loop_076c:
 19763 0000DE55 4883F900                	cmp rcx, 0
 19764 0000DE59 7413                    	je .L_tc_recycle_frame_done_076c
 19765 0000DE5B 488B32                  	mov rsi, qword [rdx]
 19766 0000DE5E 488933                  	mov qword [rbx], rsi
 19767 0000DE61 48FFC9                  	dec rcx
 19768 0000DE64 4883EB08                	sub rbx, 8 * 1
 19769 0000DE68 4883EA08                	sub rdx, 8 * 1
 19770 0000DE6C EBE7                    	jmp .L_tc_recycle_frame_loop_076c
 19771                                  .L_tc_recycle_frame_done_076c:
 19772 0000DE6E 488D6308                	lea rsp, [rbx + 8 * 1]
 19773 0000DE72 5D                      	pop rbp	; the proc will restore it!
 19774 0000DE73 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19775 0000DE76 C9                      	leave
 19776 0000DE77 C22000                  	ret AND_KILL_FRAME(2)
 19777                                  .L_lambda_simple_end_0595:	; new closure is in rax
 19778 0000DE7A 50                      	push rax
 19779 0000DE7B 6A01                    	push 1	; arg count
 19780 0000DE7D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19781 0000DE82 E8A1780000              	call malloc
 19782 0000DE87 50                      	push rax
 19783 0000DE88 BF08000000              	mov rdi, 8 * 1	; new rib
 19784 0000DE8D E896780000              	call malloc
 19785 0000DE92 50                      	push rax
 19786 0000DE93 BF18000000              	mov rdi, 8 * 3	; extended env
 19787 0000DE98 E88B780000              	call malloc
 19788 0000DE9D 488B7D10                	mov rdi, ENV
 19789 0000DEA1 BE00000000              	mov rsi, 0
 19790 0000DEA6 BA01000000              	mov rdx, 1
 19791                                  .L_lambda_simple_env_loop_0597:	; ext_env[i + 1] <-- env[i]
 19792 0000DEAB 4883FE02                	cmp rsi, 2
 19793 0000DEAF 7410                    	je .L_lambda_simple_env_end_0597
 19794 0000DEB1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19795 0000DEB5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19796 0000DEB9 48FFC6                  	inc rsi
 19797 0000DEBC 48FFC2                  	inc rdx
 19798 0000DEBF EBEA                    	jmp .L_lambda_simple_env_loop_0597
 19799                                  .L_lambda_simple_env_end_0597:
 19800 0000DEC1 5B                      	pop rbx
 19801 0000DEC2 BE00000000              	mov rsi, 0
 19802                                  .L_lambda_simple_params_loop_0597:	; copy params
 19803 0000DEC7 4883FE01                	cmp rsi, 1
 19804 0000DECB 740E                    	je .L_lambda_simple_params_end_0597
 19805 0000DECD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19806 0000DED2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19807 0000DED6 48FFC6                  	inc rsi
 19808 0000DED9 EBEC                    	jmp .L_lambda_simple_params_loop_0597
 19809                                  .L_lambda_simple_params_end_0597:
 19810 0000DEDB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19811 0000DEDE 4889C3                  	mov rbx, rax
 19812 0000DEE1 58                      	pop rax
 19813 0000DEE2 C60004                  	mov byte [rax], T_closure
 19814 0000DEE5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19815 0000DEE9 48C74009[F6DE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0597
 19816 0000DEF1 E9AF040000              	jmp .L_lambda_simple_end_0597
 19817                                  .L_lambda_simple_code_0597:	; lambda-simple body
 19818 0000DEF6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19819 0000DEFC 740B                    	je .L_lambda_simple_arity_check_ok_0597
 19820 0000DEFE FF742410                	push qword [rsp + 8 * 2]
 19821 0000DF02 6A01                    	push 1
 19822 0000DF04 E9D8770000              	jmp L_error_incorrect_arity_simple
 19823                                  .L_lambda_simple_arity_check_ok_0597:
 19824 0000DF09 C8000000                	enter 0, 0
 19825                                  	; preparing a tail-call
 19826 0000DF0D 48B8-                   	mov rax, L_constants + 1881
 19826 0000DF0F [5907000000000000] 
 19827 0000DF17 50                      	push rax
 19828 0000DF18 6A01                    	push 1	; arg count
 19829 0000DF1A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19830 0000DF1F E804780000              	call malloc
 19831 0000DF24 50                      	push rax
 19832 0000DF25 BF08000000              	mov rdi, 8 * 1	; new rib
 19833 0000DF2A E8F9770000              	call malloc
 19834 0000DF2F 50                      	push rax
 19835 0000DF30 BF20000000              	mov rdi, 8 * 4	; extended env
 19836 0000DF35 E8EE770000              	call malloc
 19837 0000DF3A 488B7D10                	mov rdi, ENV
 19838 0000DF3E BE00000000              	mov rsi, 0
 19839 0000DF43 BA01000000              	mov rdx, 1
 19840                                  .L_lambda_simple_env_loop_0598:	; ext_env[i + 1] <-- env[i]
 19841 0000DF48 4883FE03                	cmp rsi, 3
 19842 0000DF4C 7410                    	je .L_lambda_simple_env_end_0598
 19843 0000DF4E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19844 0000DF52 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19845 0000DF56 48FFC6                  	inc rsi
 19846 0000DF59 48FFC2                  	inc rdx
 19847 0000DF5C EBEA                    	jmp .L_lambda_simple_env_loop_0598
 19848                                  .L_lambda_simple_env_end_0598:
 19849 0000DF5E 5B                      	pop rbx
 19850 0000DF5F BE00000000              	mov rsi, 0
 19851                                  .L_lambda_simple_params_loop_0598:	; copy params
 19852 0000DF64 4883FE01                	cmp rsi, 1
 19853 0000DF68 740E                    	je .L_lambda_simple_params_end_0598
 19854 0000DF6A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19855 0000DF6F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19856 0000DF73 48FFC6                  	inc rsi
 19857 0000DF76 EBEC                    	jmp .L_lambda_simple_params_loop_0598
 19858                                  .L_lambda_simple_params_end_0598:
 19859 0000DF78 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19860 0000DF7B 4889C3                  	mov rbx, rax
 19861 0000DF7E 58                      	pop rax
 19862 0000DF7F C60004                  	mov byte [rax], T_closure
 19863 0000DF82 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19864 0000DF86 48C74009[93DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0598
 19865 0000DF8E E9C9030000              	jmp .L_lambda_simple_end_0598
 19866                                  .L_lambda_simple_code_0598:	; lambda-simple body
 19867 0000DF93 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19868 0000DF99 740B                    	je .L_lambda_simple_arity_check_ok_0598
 19869 0000DF9B FF742410                	push qword [rsp + 8 * 2]
 19870 0000DF9F 6A01                    	push 1
 19871 0000DFA1 E93B770000              	jmp L_error_incorrect_arity_simple
 19872                                  .L_lambda_simple_arity_check_ok_0598:
 19873 0000DFA6 C8000000                	enter 0, 0
 19874                                  
 19875 0000DFAA BF08000000              	mov rdi, 8
 19876 0000DFAF E874770000              	call malloc
 19877 0000DFB4 488B5D20                	mov rbx, PARAM(0)	; param run
 19878 0000DFB8 488918                  	mov [rax], rbx	; box run
 19879 0000DFBB 48894520                	mov PARAM(0), rax	;replace param run with box
 19880 0000DFBF 48B8-                   	mov rax, sob_void
 19880 0000DFC1 [0000000000000000] 
 19881                                  
 19882 0000DFC9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19883 0000DFCE E855770000              	call malloc
 19884 0000DFD3 50                      	push rax
 19885 0000DFD4 BF08000000              	mov rdi, 8 * 1	; new rib
 19886 0000DFD9 E84A770000              	call malloc
 19887 0000DFDE 50                      	push rax
 19888 0000DFDF BF28000000              	mov rdi, 8 * 5	; extended env
 19889 0000DFE4 E83F770000              	call malloc
 19890 0000DFE9 488B7D10                	mov rdi, ENV
 19891 0000DFED BE00000000              	mov rsi, 0
 19892 0000DFF2 BA01000000              	mov rdx, 1
 19893                                  .L_lambda_simple_env_loop_0599:	; ext_env[i + 1] <-- env[i]
 19894 0000DFF7 4883FE04                	cmp rsi, 4
 19895 0000DFFB 7410                    	je .L_lambda_simple_env_end_0599
 19896 0000DFFD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19897 0000E001 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19898 0000E005 48FFC6                  	inc rsi
 19899 0000E008 48FFC2                  	inc rdx
 19900 0000E00B EBEA                    	jmp .L_lambda_simple_env_loop_0599
 19901                                  .L_lambda_simple_env_end_0599:
 19902 0000E00D 5B                      	pop rbx
 19903 0000E00E BE00000000              	mov rsi, 0
 19904                                  .L_lambda_simple_params_loop_0599:	; copy params
 19905 0000E013 4883FE01                	cmp rsi, 1
 19906 0000E017 740E                    	je .L_lambda_simple_params_end_0599
 19907 0000E019 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19908 0000E01E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19909 0000E022 48FFC6                  	inc rsi
 19910 0000E025 EBEC                    	jmp .L_lambda_simple_params_loop_0599
 19911                                  .L_lambda_simple_params_end_0599:
 19912 0000E027 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19913 0000E02A 4889C3                  	mov rbx, rax
 19914 0000E02D 58                      	pop rax
 19915 0000E02E C60004                  	mov byte [rax], T_closure
 19916 0000E031 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19917 0000E035 48C74009[42E00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0599
 19918 0000E03D E953010000              	jmp .L_lambda_simple_end_0599
 19919                                  .L_lambda_simple_code_0599:	; lambda-simple body
 19920 0000E042 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19921 0000E048 740B                    	je .L_lambda_simple_arity_check_ok_0599
 19922 0000E04A FF742410                	push qword [rsp + 8 * 2]
 19923 0000E04E 6A02                    	push 2
 19924 0000E050 E98C760000              	jmp L_error_incorrect_arity_simple
 19925                                  .L_lambda_simple_arity_check_ok_0599:
 19926 0000E055 C8000000                	enter 0, 0
 19927 0000E059 488B4528                	mov rax, PARAM(1)	; param strs
 19928 0000E05D 50                      	push rax
 19929 0000E05E 6A01                    	push 1	; arg count
 19930 0000E060 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 19931 0000E068 803805                  	cmp byte [rax], T_undefined
 19932 0000E06B 0F848A750000            	je L_error_fvar_undefined
 19933 0000E071 803804                  	cmp byte [rax], T_closure
 19934 0000E074 0F8505760000            	jne L_error_non_closure
 19935 0000E07A FF7001                  	push SOB_CLOSURE_ENV(rax)
 19936 0000E07D FF5009                  	call SOB_CLOSURE_CODE(rax)
 19937 0000E080 483D[02000000]          	cmp rax, sob_boolean_false
 19938 0000E086 0F8505010000            	jne .L_or_end_0065
 19939 0000E08C 488B4528                	mov rax, PARAM(1)	; param strs
 19940 0000E090 50                      	push rax
 19941 0000E091 6A01                    	push 1	; arg count
 19942 0000E093 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 19943 0000E09B 803805                  	cmp byte [rax], T_undefined
 19944 0000E09E 0F8457750000            	je L_error_fvar_undefined
 19945 0000E0A4 803804                  	cmp byte [rax], T_closure
 19946 0000E0A7 0F85D2750000            	jne L_error_non_closure
 19947 0000E0AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 19948 0000E0B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19949 0000E0B3 50                      	push rax
 19950 0000E0B4 488B4520                	mov rax, PARAM(0)	; param str
 19951 0000E0B8 50                      	push rax
 19952 0000E0B9 6A02                    	push 2	; arg count
 19953 0000E0BB 488B4510                	mov rax, ENV
 19954 0000E0BF 488B4008                	mov rax, qword [rax + 8 * 1]
 19955 0000E0C3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<=?
 19956 0000E0C6 803804                  	cmp byte [rax], T_closure
 19957 0000E0C9 0F85B0750000            	jne L_error_non_closure
 19958 0000E0CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 19959 0000E0D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19960                                  
 19961 0000E0D5 483D[02000000]          	cmp rax, sob_boolean_false
 19962 0000E0DB 0F84A6000000            	je .L_if_else_042a
 19963                                  	; preparing a tail-call
 19964 0000E0E1 488B4528                	mov rax, PARAM(1)	; param strs
 19965 0000E0E5 50                      	push rax
 19966 0000E0E6 6A01                    	push 1	; arg count
 19967 0000E0E8 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 19968 0000E0F0 803805                  	cmp byte [rax], T_undefined
 19969 0000E0F3 0F8402750000            	je L_error_fvar_undefined
 19970 0000E0F9 803804                  	cmp byte [rax], T_closure
 19971 0000E0FC 0F857D750000            	jne L_error_non_closure
 19972 0000E102 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19973 0000E105 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19974 0000E108 50                      	push rax
 19975 0000E109 488B4528                	mov rax, PARAM(1)	; param strs
 19976 0000E10D 50                      	push rax
 19977 0000E10E 6A01                    	push 1	; arg count
 19978 0000E110 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 19979 0000E118 803805                  	cmp byte [rax], T_undefined
 19980 0000E11B 0F84DA740000            	je L_error_fvar_undefined
 19981 0000E121 803804                  	cmp byte [rax], T_closure
 19982 0000E124 0F8555750000            	jne L_error_non_closure
 19983 0000E12A FF7001                  	push SOB_CLOSURE_ENV(rax)
 19984 0000E12D FF5009                  	call SOB_CLOSURE_CODE(rax)
 19985 0000E130 50                      	push rax
 19986 0000E131 6A02                    	push 2	; arg count
 19987 0000E133 488B4510                	mov rax, ENV
 19988 0000E137 488B00                  	mov rax, qword [rax + 8 * 0]
 19989 0000E13A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19990 0000E13D 488B00                  	mov rax, qword [rax]
 19991 0000E140 803804                  	cmp byte [rax], T_closure
 19992 0000E143 0F8536750000            	jne L_error_non_closure
 19993 0000E149 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19994                                  
 19995                                  	; recycling the current frame
 19996 0000E14C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 19997 0000E14F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 19998 0000E152 B906000000              	mov rcx, 2 + 4
 19999 0000E157 488B5D18                	mov rbx, COUNT
 20000 0000E15B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20001 0000E160 488D55F8                	lea rdx, [rbp - 8 * 1]
 20002                                  .L_tc_recycle_frame_loop_076d:
 20003 0000E164 4883F900                	cmp rcx, 0
 20004 0000E168 7413                    	je .L_tc_recycle_frame_done_076d
 20005 0000E16A 488B32                  	mov rsi, qword [rdx]
 20006 0000E16D 488933                  	mov qword [rbx], rsi
 20007 0000E170 48FFC9                  	dec rcx
 20008 0000E173 4883EB08                	sub rbx, 8 * 1
 20009 0000E177 4883EA08                	sub rdx, 8 * 1
 20010 0000E17B EBE7                    	jmp .L_tc_recycle_frame_loop_076d
 20011                                  .L_tc_recycle_frame_done_076d:
 20012 0000E17D 488D6308                	lea rsp, [rbx + 8 * 1]
 20013 0000E181 5D                      	pop rbp	; the proc will restore it!
 20014 0000E182 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20015                                  
 20016 0000E185 EB0A                    	jmp .L_if_end_042a
 20017                                  
 20018                                  	.L_if_else_042a:
 20019 0000E187 48B8-                   	mov rax, L_constants + 2
 20019 0000E189 [0200000000000000] 
 20020                                  
 20021                                  	.L_if_end_042a:
 20022                                  .L_or_end_0065:
 20023 0000E191 C9                      	leave
 20024 0000E192 C22000                  	ret AND_KILL_FRAME(2)
 20025                                  .L_lambda_simple_end_0599:	; new closure is in rax
 20026                                  
 20027 0000E195 50                      	push rax
 20028 0000E196 488B4520                	mov rax, PARAM(0)	; param run
 20029                                  
 20030 0000E19A 8F00                    	pop qword[rax]
 20031 0000E19C 48B8-                   	mov rax, sob_void
 20031 0000E19E [0000000000000000] 
 20032                                  
 20033 0000E1A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20034 0000E1AB E878750000              	call malloc
 20035 0000E1B0 50                      	push rax
 20036 0000E1B1 BF08000000              	mov rdi, 8 * 1	; new rib
 20037 0000E1B6 E86D750000              	call malloc
 20038 0000E1BB 50                      	push rax
 20039 0000E1BC BF28000000              	mov rdi, 8 * 5	; extended env
 20040 0000E1C1 E862750000              	call malloc
 20041 0000E1C6 488B7D10                	mov rdi, ENV
 20042 0000E1CA BE00000000              	mov rsi, 0
 20043 0000E1CF BA01000000              	mov rdx, 1
 20044                                  .L_lambda_opt_env_loop_00c2:	; ext_env[i + 1] <-- env[i]
 20045 0000E1D4 4883FE04                	cmp rsi, 4
 20046 0000E1D8 7410                    	je .L_lambda_opt_env_end_00c2
 20047 0000E1DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20048 0000E1DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20049 0000E1E2 48FFC6                  	inc rsi
 20050 0000E1E5 48FFC2                  	inc rdx
 20051 0000E1E8 EBEA                    	jmp .L_lambda_opt_env_loop_00c2
 20052                                  .L_lambda_opt_env_end_00c2:
 20053 0000E1EA 5B                      	pop rbx
 20054 0000E1EB BE00000000              	mov rsi, 0
 20055                                  .L_lambda_opt_params_loop_00c2:	; copy params
 20056 0000E1F0 4883FE01                	cmp rsi, 1
 20057 0000E1F4 740E                    	je .L_lambda_opt_params_end_00c2
 20058 0000E1F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20059 0000E1FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20060 0000E1FF 48FFC6                  	inc rsi
 20061 0000E202 EBEC                    	jmp .L_lambda_opt_params_loop_00c2
 20062                                  .L_lambda_opt_params_end_00c2:
 20063 0000E204 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20064 0000E207 4889C3                  	mov rbx, rax
 20065 0000E20A 58                      	pop rax
 20066 0000E20B C60004                  	mov byte [rax], T_closure
 20067 0000E20E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20068 0000E212 48C74009[1FE20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00c2
 20069 0000E21A E939010000              	jmp .L_lambda_opt_end_00c2
 20070                                  .L_lambda_opt_code_00c2:	; lambda-simple body
 20071 0000E21F 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 20072 0000E225 740D                    	je .L_lambda_opt_arity_check_exact_00c2 ;	 if equal, go to exact arity
 20073 0000E227 7F42                    	jg .L_lambda_opt_arity_check_more_00c2 ;	 if greater than, go to arity more
 20074 0000E229 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 20075 0000E22D 6A01                     	push 1
 20076 0000E22F E9C1740000              	jmp L_error_incorrect_arity_opt
 20077                                  	.L_lambda_opt_arity_check_exact_00c2:
 20078 0000E234 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 20079 0000E239 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 20080 0000E23E 4883EC08                	sub rsp, 8
 20081 0000E242 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 20082                                  	.L_lambda_opt_exact_shifting_loop_00c2:
 20083 0000E246 488B5108                	mov rdx, [rcx + 8]
 20084 0000E24A 488911                  	mov [rcx], rdx
 20085 0000E24D 4883C108                	add rcx, 8
 20086 0000E251 4839CB                  	cmp rbx, rcx
 20087 0000E254 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00c2
 20088                                  	.L_lambda_opt_exact_shifting_loop_end_00c2:
 20089 0000E256 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 20090 0000E25D 4883C001                	add rax, 1 ; 	arg count += 1
 20091 0000E261 4889442410              	mov qword [rsp + 8 * 2], rax
 20092 0000E266 E987000000              	jmp .L_lambda_opt_stack_adjusted_00c2
 20093                                  	.L_lambda_opt_arity_check_more_00c2:
 20094 0000E26B 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 20094 0000E26D [0100000000000000] 
 20095 0000E275 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 20096 0000E27B 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00c2
 20097                                  	.L_lambda_opt_stack_shrink_loop_00c2:
 20098 0000E27D BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 20099 0000E282 E8A1740000              	call malloc ;	 allocated memory for the optional scheme list
 20100 0000E287 C60021                  	mov byte[rax], T_pair ;	 set type pair
 20101 0000E28A 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 20102 0000E28E 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 20103 0000E291 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 20104 0000E296 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 20105 0000E29B 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 20106 0000E29F 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 20107                                  	.L_lambda_opt_more_shifting_loop_00c2:
 20108 0000E2A4 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 20109 0000E2A7 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 20110 0000E2AB 4883EB08                	sub rbx, 8 
 20111 0000E2AF 4839DC                  	cmp rsp, rbx
 20112 0000E2B2 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00c2
 20113                                  	.L_lambda_opt_more_shifting_loop_end_00c2:
 20114 0000E2B4 4883C408                	add rsp, 8 ;	 update rsp
 20115 0000E2B8 488B5C2410              	mov rbx, [rsp + 8 * 2]
 20116 0000E2BD 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 20117 0000E2C1 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 20118 0000E2C6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20119 0000E2CC 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00c2
 20120                                  	.L_lambda_opt_stack_shrink_loop_exit_00c2:
 20121 0000E2CE 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 20122 0000E2D3 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 20123 0000E2D8 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 20124 0000E2DD E846740000              	call malloc ;	 allocated memory for the optional scheme list
 20125 0000E2E2 C60021                  	mov byte[rax], T_pair ;	 set type pair
 20126 0000E2E5 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 20127 0000E2E9 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 20128 0000E2ED 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 20129                                  	.L_lambda_opt_stack_adjusted_00c2:
 20130 0000E2F2 C8000000                	enter 0, 0
 20131                                  	; preparing a tail-call
 20132 0000E2F6 488B4528                	mov rax, PARAM(1)	; param strs
 20133 0000E2FA 50                      	push rax
 20134 0000E2FB 488B4520                	mov rax, PARAM(0)	; param str
 20135 0000E2FF 50                      	push rax
 20136 0000E300 6A02                    	push 2	; arg count
 20137 0000E302 488B4510                	mov rax, ENV
 20138 0000E306 488B00                  	mov rax, qword [rax + 8 * 0]
 20139 0000E309 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20140 0000E30C 488B00                  	mov rax, qword [rax]
 20141 0000E30F 803804                  	cmp byte [rax], T_closure
 20142 0000E312 0F8567730000            	jne L_error_non_closure
 20143 0000E318 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20144                                  
 20145                                  	; recycling the current frame
 20146 0000E31B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20147 0000E31E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20148 0000E321 B906000000              	mov rcx, 2 + 4
 20149 0000E326 488B5D18                	mov rbx, COUNT
 20150 0000E32A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20151 0000E32F 488D55F8                	lea rdx, [rbp - 8 * 1]
 20152                                  .L_tc_recycle_frame_loop_076e:
 20153 0000E333 4883F900                	cmp rcx, 0
 20154 0000E337 7413                    	je .L_tc_recycle_frame_done_076e
 20155 0000E339 488B32                  	mov rsi, qword [rdx]
 20156 0000E33C 488933                  	mov qword [rbx], rsi
 20157 0000E33F 48FFC9                  	dec rcx
 20158 0000E342 4883EB08                	sub rbx, 8 * 1
 20159 0000E346 4883EA08                	sub rdx, 8 * 1
 20160 0000E34A EBE7                    	jmp .L_tc_recycle_frame_loop_076e
 20161                                  .L_tc_recycle_frame_done_076e:
 20162 0000E34C 488D6308                	lea rsp, [rbx + 8 * 1]
 20163 0000E350 5D                      	pop rbp	; the proc will restore it!
 20164 0000E351 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20165 0000E354 C9                      	leave
 20166 0000E355 C22000                  	ret AND_KILL_FRAME(2)
 20167                                  .L_lambda_opt_end_00c2:	; new closure is in rax
 20168 0000E358 C9                      	leave
 20169 0000E359 C21800                  	ret AND_KILL_FRAME(1)
 20170                                  .L_lambda_simple_end_0598:	; new closure is in rax
 20171 0000E35C 803804                  	cmp byte [rax], T_closure
 20172 0000E35F 0F851A730000            	jne L_error_non_closure
 20173 0000E365 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20174                                  
 20175                                  	; recycling the current frame
 20176 0000E368 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20177 0000E36B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20178 0000E36E B905000000              	mov rcx, 1 + 4
 20179 0000E373 488B5D18                	mov rbx, COUNT
 20180 0000E377 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20181 0000E37C 488D55F8                	lea rdx, [rbp - 8 * 1]
 20182                                  .L_tc_recycle_frame_loop_076f:
 20183 0000E380 4883F900                	cmp rcx, 0
 20184 0000E384 7413                    	je .L_tc_recycle_frame_done_076f
 20185 0000E386 488B32                  	mov rsi, qword [rdx]
 20186 0000E389 488933                  	mov qword [rbx], rsi
 20187 0000E38C 48FFC9                  	dec rcx
 20188 0000E38F 4883EB08                	sub rbx, 8 * 1
 20189 0000E393 4883EA08                	sub rdx, 8 * 1
 20190 0000E397 EBE7                    	jmp .L_tc_recycle_frame_loop_076f
 20191                                  .L_tc_recycle_frame_done_076f:
 20192 0000E399 488D6308                	lea rsp, [rbx + 8 * 1]
 20193 0000E39D 5D                      	pop rbp	; the proc will restore it!
 20194 0000E39E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20195 0000E3A1 C9                      	leave
 20196 0000E3A2 C21800                  	ret AND_KILL_FRAME(1)
 20197                                  .L_lambda_simple_end_0597:	; new closure is in rax
 20198 0000E3A5 803804                  	cmp byte [rax], T_closure
 20199 0000E3A8 0F85D1720000            	jne L_error_non_closure
 20200 0000E3AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 20201                                  
 20202                                  	; recycling the current frame
 20203 0000E3B1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20204 0000E3B4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20205 0000E3B7 B905000000              	mov rcx, 1 + 4
 20206 0000E3BC 488B5D18                	mov rbx, COUNT
 20207 0000E3C0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20208 0000E3C5 488D55F8                	lea rdx, [rbp - 8 * 1]
 20209                                  .L_tc_recycle_frame_loop_0770:
 20210 0000E3C9 4883F900                	cmp rcx, 0
 20211 0000E3CD 7413                    	je .L_tc_recycle_frame_done_0770
 20212 0000E3CF 488B32                  	mov rsi, qword [rdx]
 20213 0000E3D2 488933                  	mov qword [rbx], rsi
 20214 0000E3D5 48FFC9                  	dec rcx
 20215 0000E3D8 4883EB08                	sub rbx, 8 * 1
 20216 0000E3DC 4883EA08                	sub rdx, 8 * 1
 20217 0000E3E0 EBE7                    	jmp .L_tc_recycle_frame_loop_0770
 20218                                  .L_tc_recycle_frame_done_0770:
 20219 0000E3E2 488D6308                	lea rsp, [rbx + 8 * 1]
 20220 0000E3E6 5D                      	pop rbp	; the proc will restore it!
 20221 0000E3E7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20222 0000E3EA C9                      	leave
 20223 0000E3EB C21800                  	ret AND_KILL_FRAME(1)
 20224                                  .L_lambda_simple_end_0593:	; new closure is in rax
 20225 0000E3EE 803804                  	cmp byte [rax], T_closure
 20226 0000E3F1 0F8588720000            	jne L_error_non_closure
 20227 0000E3F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20228                                  
 20229                                  	; recycling the current frame
 20230 0000E3FA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20231 0000E3FD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20232 0000E400 B905000000              	mov rcx, 1 + 4
 20233 0000E405 488B5D18                	mov rbx, COUNT
 20234 0000E409 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20235 0000E40E 488D55F8                	lea rdx, [rbp - 8 * 1]
 20236                                  .L_tc_recycle_frame_loop_0771:
 20237 0000E412 4883F900                	cmp rcx, 0
 20238 0000E416 7413                    	je .L_tc_recycle_frame_done_0771
 20239 0000E418 488B32                  	mov rsi, qword [rdx]
 20240 0000E41B 488933                  	mov qword [rbx], rsi
 20241 0000E41E 48FFC9                  	dec rcx
 20242 0000E421 4883EB08                	sub rbx, 8 * 1
 20243 0000E425 4883EA08                	sub rdx, 8 * 1
 20244 0000E429 EBE7                    	jmp .L_tc_recycle_frame_loop_0771
 20245                                  .L_tc_recycle_frame_done_0771:
 20246 0000E42B 488D6308                	lea rsp, [rbx + 8 * 1]
 20247 0000E42F 5D                      	pop rbp	; the proc will restore it!
 20248 0000E430 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20249 0000E433 C9                      	leave
 20250 0000E434 C22000                  	ret AND_KILL_FRAME(2)
 20251                                  .L_lambda_simple_end_0592:	; new closure is in rax
 20252 0000E437 50                      	push rax
 20253 0000E438 6A01                    	push 1	; arg count
 20254 0000E43A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20255 0000E43F E8E4720000              	call malloc
 20256 0000E444 50                      	push rax
 20257 0000E445 BF00000000              	mov rdi, 8 * 0	; new rib
 20258 0000E44A E8D9720000              	call malloc
 20259 0000E44F 50                      	push rax
 20260 0000E450 BF08000000              	mov rdi, 8 * 1	; extended env
 20261 0000E455 E8CE720000              	call malloc
 20262 0000E45A 488B7D10                	mov rdi, ENV
 20263 0000E45E BE00000000              	mov rsi, 0
 20264 0000E463 BA01000000              	mov rdx, 1
 20265                                  .L_lambda_simple_env_loop_059a:	; ext_env[i + 1] <-- env[i]
 20266 0000E468 4883FE00                	cmp rsi, 0
 20267 0000E46C 7410                    	je .L_lambda_simple_env_end_059a
 20268 0000E46E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20269 0000E472 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20270 0000E476 48FFC6                  	inc rsi
 20271 0000E479 48FFC2                  	inc rdx
 20272 0000E47C EBEA                    	jmp .L_lambda_simple_env_loop_059a
 20273                                  .L_lambda_simple_env_end_059a:
 20274 0000E47E 5B                      	pop rbx
 20275 0000E47F BE00000000              	mov rsi, 0
 20276                                  .L_lambda_simple_params_loop_059a:	; copy params
 20277 0000E484 4883FE00                	cmp rsi, 0
 20278 0000E488 740E                    	je .L_lambda_simple_params_end_059a
 20279 0000E48A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20280 0000E48F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20281 0000E493 48FFC6                  	inc rsi
 20282 0000E496 EBEC                    	jmp .L_lambda_simple_params_loop_059a
 20283                                  .L_lambda_simple_params_end_059a:
 20284 0000E498 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20285 0000E49B 4889C3                  	mov rbx, rax
 20286 0000E49E 58                      	pop rax
 20287 0000E49F C60004                  	mov byte [rax], T_closure
 20288 0000E4A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20289 0000E4A6 48C74009[B3E40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_059a
 20290 0000E4AE E96B010000              	jmp .L_lambda_simple_end_059a
 20291                                  .L_lambda_simple_code_059a:	; lambda-simple body
 20292 0000E4B3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20293 0000E4B9 740B                    	je .L_lambda_simple_arity_check_ok_059a
 20294 0000E4BB FF742410                	push qword [rsp + 8 * 2]
 20295 0000E4BF 6A01                    	push 1
 20296 0000E4C1 E91B720000              	jmp L_error_incorrect_arity_simple
 20297                                  .L_lambda_simple_arity_check_ok_059a:
 20298 0000E4C6 C8000000                	enter 0, 0
 20299 0000E4CA 488B0425[6E160000]      	mov rax, qword [free_var_130]	; free var char=?
 20300 0000E4D2 803805                  	cmp byte [rax], T_undefined
 20301 0000E4D5 0F8420710000            	je L_error_fvar_undefined
 20302 0000E4DB 50                      	push rax
 20303 0000E4DC 488B0425[4C160000]      	mov rax, qword [free_var_128]	; free var char<?
 20304 0000E4E4 803805                  	cmp byte [rax], T_undefined
 20305 0000E4E7 0F840E710000            	je L_error_fvar_undefined
 20306 0000E4ED 50                      	push rax
 20307 0000E4EE 6A02                    	push 2	; arg count
 20308 0000E4F0 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20309 0000E4F4 803804                  	cmp byte [rax], T_closure
 20310 0000E4F7 0F8582710000            	jne L_error_non_closure
 20311 0000E4FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 20312 0000E500 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20313 0000E503 48890425[6D170000]      	mov qword [free_var_145], rax	; free var string<=?
 20314 0000E50B 803805                  	cmp byte [rax], T_undefined
 20315 0000E50E 0F84E7700000            	je L_error_fvar_undefined
 20316 0000E514 48B8-                   	mov rax, sob_void
 20316 0000E516 [0000000000000000] 
 20317                                  
 20318 0000E51E 488B0425[E5160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 20319 0000E526 803805                  	cmp byte [rax], T_undefined
 20320 0000E529 0F84CC700000            	je L_error_fvar_undefined
 20321 0000E52F 50                      	push rax
 20322 0000E530 488B0425[C3160000]      	mov rax, qword [free_var_135]	; free var char-ci<?
 20323 0000E538 803805                  	cmp byte [rax], T_undefined
 20324 0000E53B 0F84BA700000            	je L_error_fvar_undefined
 20325 0000E541 50                      	push rax
 20326 0000E542 6A02                    	push 2	; arg count
 20327 0000E544 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20328 0000E548 803804                  	cmp byte [rax], T_closure
 20329 0000E54B 0F852E710000            	jne L_error_non_closure
 20330 0000E551 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20331 0000E554 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20332 0000E557 48890425[C2170000]      	mov qword [free_var_150], rax	; free var string-ci<=?
 20333 0000E55F 803805                  	cmp byte [rax], T_undefined
 20334 0000E562 0F8493700000            	je L_error_fvar_undefined
 20335 0000E568 48B8-                   	mov rax, sob_void
 20335 0000E56A [0000000000000000] 
 20336                                  
 20337 0000E572 488B0425[6E160000]      	mov rax, qword [free_var_130]	; free var char=?
 20338 0000E57A 803805                  	cmp byte [rax], T_undefined
 20339 0000E57D 0F8478700000            	je L_error_fvar_undefined
 20340 0000E583 50                      	push rax
 20341 0000E584 488B0425[7F160000]      	mov rax, qword [free_var_131]	; free var char>?
 20342 0000E58C 803805                  	cmp byte [rax], T_undefined
 20343 0000E58F 0F8466700000            	je L_error_fvar_undefined
 20344 0000E595 50                      	push rax
 20345 0000E596 6A02                    	push 2	; arg count
 20346 0000E598 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20347 0000E59C 803804                  	cmp byte [rax], T_closure
 20348 0000E59F 0F85DA700000            	jne L_error_non_closure
 20349 0000E5A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20350 0000E5A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20351 0000E5AB 48890425[8F170000]      	mov qword [free_var_147], rax	; free var string>=?
 20352 0000E5B3 803805                  	cmp byte [rax], T_undefined
 20353 0000E5B6 0F843F700000            	je L_error_fvar_undefined
 20354 0000E5BC 48B8-                   	mov rax, sob_void
 20354 0000E5BE [0000000000000000] 
 20355                                  
 20356 0000E5C6 488B0425[E5160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 20357 0000E5CE 803805                  	cmp byte [rax], T_undefined
 20358 0000E5D1 0F8424700000            	je L_error_fvar_undefined
 20359 0000E5D7 50                      	push rax
 20360 0000E5D8 488B0425[F6160000]      	mov rax, qword [free_var_138]	; free var char-ci>?
 20361 0000E5E0 803805                  	cmp byte [rax], T_undefined
 20362 0000E5E3 0F8412700000            	je L_error_fvar_undefined
 20363 0000E5E9 50                      	push rax
 20364 0000E5EA 6A02                    	push 2	; arg count
 20365 0000E5EC 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 20366 0000E5F0 803804                  	cmp byte [rax], T_closure
 20367 0000E5F3 0F8586700000            	jne L_error_non_closure
 20368 0000E5F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20369 0000E5FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 20370 0000E5FF 48890425[E4170000]      	mov qword [free_var_152], rax	; free var string-ci>=?
 20371 0000E607 803805                  	cmp byte [rax], T_undefined
 20372 0000E60A 0F84EB6F0000            	je L_error_fvar_undefined
 20373 0000E610 48B8-                   	mov rax, sob_void
 20373 0000E612 [0000000000000000] 
 20374 0000E61A C9                      	leave
 20375 0000E61B C21800                  	ret AND_KILL_FRAME(1)
 20376                                  .L_lambda_simple_end_059a:	; new closure is in rax
 20377 0000E61E 803804                  	cmp byte [rax], T_closure
 20378 0000E621 0F8558700000            	jne L_error_non_closure
 20379 0000E627 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20380 0000E62A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20381                                  
 20382 0000E62D 4889C7                  	mov rdi, rax
 20383 0000E630 E805720000              	call print_sexpr_if_not_void
 20384                                  
 20385 0000E635 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20386 0000E63A E8E9700000              	call malloc
 20387 0000E63F 50                      	push rax
 20388 0000E640 BF00000000              	mov rdi, 8 * 0	; new rib
 20389 0000E645 E8DE700000              	call malloc
 20390 0000E64A 50                      	push rax
 20391 0000E64B BF08000000              	mov rdi, 8 * 1	; extended env
 20392 0000E650 E8D3700000              	call malloc
 20393 0000E655 488B7D10                	mov rdi, ENV
 20394 0000E659 BE00000000              	mov rsi, 0
 20395 0000E65E BA01000000              	mov rdx, 1
 20396                                  .L_lambda_simple_env_loop_059b:	; ext_env[i + 1] <-- env[i]
 20397 0000E663 4883FE00                	cmp rsi, 0
 20398 0000E667 7410                    	je .L_lambda_simple_env_end_059b
 20399 0000E669 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20400 0000E66D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20401 0000E671 48FFC6                  	inc rsi
 20402 0000E674 48FFC2                  	inc rdx
 20403 0000E677 EBEA                    	jmp .L_lambda_simple_env_loop_059b
 20404                                  .L_lambda_simple_env_end_059b:
 20405 0000E679 5B                      	pop rbx
 20406 0000E67A BE00000000              	mov rsi, 0
 20407                                  .L_lambda_simple_params_loop_059b:	; copy params
 20408 0000E67F 4883FE00                	cmp rsi, 0
 20409 0000E683 740E                    	je .L_lambda_simple_params_end_059b
 20410 0000E685 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20411 0000E68A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20412 0000E68E 48FFC6                  	inc rsi
 20413 0000E691 EBEC                    	jmp .L_lambda_simple_params_loop_059b
 20414                                  .L_lambda_simple_params_end_059b:
 20415 0000E693 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20416 0000E696 4889C3                  	mov rbx, rax
 20417 0000E699 58                      	pop rax
 20418 0000E69A C60004                  	mov byte [rax], T_closure
 20419 0000E69D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20420 0000E6A1 48C74009[AEE60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_059b
 20421 0000E6A9 E9540B0000              	jmp .L_lambda_simple_end_059b
 20422                                  .L_lambda_simple_code_059b:	; lambda-simple body
 20423 0000E6AE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20424 0000E6B4 740B                    	je .L_lambda_simple_arity_check_ok_059b
 20425 0000E6B6 FF742410                	push qword [rsp + 8 * 2]
 20426 0000E6BA 6A01                    	push 1
 20427 0000E6BC E920700000              	jmp L_error_incorrect_arity_simple
 20428                                  .L_lambda_simple_arity_check_ok_059b:
 20429 0000E6C1 C8000000                	enter 0, 0
 20430                                  	; preparing a tail-call
 20431 0000E6C5 48B8-                   	mov rax, L_constants + 1881
 20431 0000E6C7 [5907000000000000] 
 20432 0000E6CF 50                      	push rax
 20433 0000E6D0 6A01                    	push 1	; arg count
 20434 0000E6D2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20435 0000E6D7 E84C700000              	call malloc
 20436 0000E6DC 50                      	push rax
 20437 0000E6DD BF08000000              	mov rdi, 8 * 1	; new rib
 20438 0000E6E2 E841700000              	call malloc
 20439 0000E6E7 50                      	push rax
 20440 0000E6E8 BF10000000              	mov rdi, 8 * 2	; extended env
 20441 0000E6ED E836700000              	call malloc
 20442 0000E6F2 488B7D10                	mov rdi, ENV
 20443 0000E6F6 BE00000000              	mov rsi, 0
 20444 0000E6FB BA01000000              	mov rdx, 1
 20445                                  .L_lambda_simple_env_loop_059c:	; ext_env[i + 1] <-- env[i]
 20446 0000E700 4883FE01                	cmp rsi, 1
 20447 0000E704 7410                    	je .L_lambda_simple_env_end_059c
 20448 0000E706 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20449 0000E70A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20450 0000E70E 48FFC6                  	inc rsi
 20451 0000E711 48FFC2                  	inc rdx
 20452 0000E714 EBEA                    	jmp .L_lambda_simple_env_loop_059c
 20453                                  .L_lambda_simple_env_end_059c:
 20454 0000E716 5B                      	pop rbx
 20455 0000E717 BE00000000              	mov rsi, 0
 20456                                  .L_lambda_simple_params_loop_059c:	; copy params
 20457 0000E71C 4883FE01                	cmp rsi, 1
 20458 0000E720 740E                    	je .L_lambda_simple_params_end_059c
 20459 0000E722 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20460 0000E727 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20461 0000E72B 48FFC6                  	inc rsi
 20462 0000E72E EBEC                    	jmp .L_lambda_simple_params_loop_059c
 20463                                  .L_lambda_simple_params_end_059c:
 20464 0000E730 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20465 0000E733 4889C3                  	mov rbx, rax
 20466 0000E736 58                      	pop rax
 20467 0000E737 C60004                  	mov byte [rax], T_closure
 20468 0000E73A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20469 0000E73E 48C74009[4BE70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_059c
 20470 0000E746 E96E0A0000              	jmp .L_lambda_simple_end_059c
 20471                                  .L_lambda_simple_code_059c:	; lambda-simple body
 20472 0000E74B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20473 0000E751 740B                    	je .L_lambda_simple_arity_check_ok_059c
 20474 0000E753 FF742410                	push qword [rsp + 8 * 2]
 20475 0000E757 6A01                    	push 1
 20476 0000E759 E9836F0000              	jmp L_error_incorrect_arity_simple
 20477                                  .L_lambda_simple_arity_check_ok_059c:
 20478 0000E75E C8000000                	enter 0, 0
 20479                                  
 20480 0000E762 BF08000000              	mov rdi, 8
 20481 0000E767 E8BC6F0000              	call malloc
 20482 0000E76C 488B5D20                	mov rbx, PARAM(0)	; param run
 20483 0000E770 488918                  	mov [rax], rbx	; box run
 20484 0000E773 48894520                	mov PARAM(0), rax	;replace param run with box
 20485 0000E777 48B8-                   	mov rax, sob_void
 20485 0000E779 [0000000000000000] 
 20486                                  
 20487 0000E781 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20488 0000E786 E89D6F0000              	call malloc
 20489 0000E78B 50                      	push rax
 20490 0000E78C BF08000000              	mov rdi, 8 * 1	; new rib
 20491 0000E791 E8926F0000              	call malloc
 20492 0000E796 50                      	push rax
 20493 0000E797 BF18000000              	mov rdi, 8 * 3	; extended env
 20494 0000E79C E8876F0000              	call malloc
 20495 0000E7A1 488B7D10                	mov rdi, ENV
 20496 0000E7A5 BE00000000              	mov rsi, 0
 20497 0000E7AA BA01000000              	mov rdx, 1
 20498                                  .L_lambda_simple_env_loop_059d:	; ext_env[i + 1] <-- env[i]
 20499 0000E7AF 4883FE02                	cmp rsi, 2
 20500 0000E7B3 7410                    	je .L_lambda_simple_env_end_059d
 20501 0000E7B5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20502 0000E7B9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20503 0000E7BD 48FFC6                  	inc rsi
 20504 0000E7C0 48FFC2                  	inc rdx
 20505 0000E7C3 EBEA                    	jmp .L_lambda_simple_env_loop_059d
 20506                                  .L_lambda_simple_env_end_059d:
 20507 0000E7C5 5B                      	pop rbx
 20508 0000E7C6 BE00000000              	mov rsi, 0
 20509                                  .L_lambda_simple_params_loop_059d:	; copy params
 20510 0000E7CB 4883FE01                	cmp rsi, 1
 20511 0000E7CF 740E                    	je .L_lambda_simple_params_end_059d
 20512 0000E7D1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20513 0000E7D6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20514 0000E7DA 48FFC6                  	inc rsi
 20515 0000E7DD EBEC                    	jmp .L_lambda_simple_params_loop_059d
 20516                                  .L_lambda_simple_params_end_059d:
 20517 0000E7DF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20518 0000E7E2 4889C3                  	mov rbx, rax
 20519 0000E7E5 58                      	pop rax
 20520 0000E7E6 C60004                  	mov byte [rax], T_closure
 20521 0000E7E9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20522 0000E7ED 48C74009[FAE70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_059d
 20523 0000E7F5 E9BB010000              	jmp .L_lambda_simple_end_059d
 20524                                  .L_lambda_simple_code_059d:	; lambda-simple body
 20525 0000E7FA 48837C241004            	cmp qword [rsp + 8 * 2], 4
 20526 0000E800 740B                    	je .L_lambda_simple_arity_check_ok_059d
 20527 0000E802 FF742410                	push qword [rsp + 8 * 2]
 20528 0000E806 6A04                    	push 4
 20529 0000E808 E9D46E0000              	jmp L_error_incorrect_arity_simple
 20530                                  .L_lambda_simple_arity_check_ok_059d:
 20531 0000E80D C8000000                	enter 0, 0
 20532 0000E811 488B4538                	mov rax, PARAM(3)	; param len
 20533 0000E815 50                      	push rax
 20534 0000E816 488B4520                	mov rax, PARAM(0)	; param i
 20535 0000E81A 50                      	push rax
 20536 0000E81B 6A02                    	push 2	; arg count
 20537 0000E81D 488B0425[2A160000]      	mov rax, qword [free_var_126]	; free var =
 20538 0000E825 803805                  	cmp byte [rax], T_undefined
 20539 0000E828 0F84CD6D0000            	je L_error_fvar_undefined
 20540 0000E82E 803804                  	cmp byte [rax], T_closure
 20541 0000E831 0F85486E0000            	jne L_error_non_closure
 20542 0000E837 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20543 0000E83A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20544 0000E83D 483D[02000000]          	cmp rax, sob_boolean_false
 20545 0000E843 0F8568010000            	jne .L_or_end_0066
 20546 0000E849 488B4538                	mov rax, PARAM(3)	; param len
 20547 0000E84D 50                      	push rax
 20548 0000E84E 488B4520                	mov rax, PARAM(0)	; param i
 20549 0000E852 50                      	push rax
 20550 0000E853 6A02                    	push 2	; arg count
 20551 0000E855 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 20552 0000E85D 803805                  	cmp byte [rax], T_undefined
 20553 0000E860 0F84956D0000            	je L_error_fvar_undefined
 20554 0000E866 803804                  	cmp byte [rax], T_closure
 20555 0000E869 0F85106E0000            	jne L_error_non_closure
 20556 0000E86F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20557 0000E872 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20558                                  
 20559 0000E875 483D[02000000]          	cmp rax, sob_boolean_false
 20560 0000E87B 0F8426010000            	je .L_if_else_042b
 20561 0000E881 488B4520                	mov rax, PARAM(0)	; param i
 20562 0000E885 50                      	push rax
 20563 0000E886 488B4530                	mov rax, PARAM(2)	; param str2
 20564 0000E88A 50                      	push rax
 20565 0000E88B 6A02                    	push 2	; arg count
 20566 0000E88D 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 20567 0000E895 803805                  	cmp byte [rax], T_undefined
 20568 0000E898 0F845D6D0000            	je L_error_fvar_undefined
 20569 0000E89E 803804                  	cmp byte [rax], T_closure
 20570 0000E8A1 0F85D86D0000            	jne L_error_non_closure
 20571 0000E8A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20572 0000E8AA FF5009                  	call SOB_CLOSURE_CODE(rax)
 20573 0000E8AD 50                      	push rax
 20574 0000E8AE 488B4520                	mov rax, PARAM(0)	; param i
 20575 0000E8B2 50                      	push rax
 20576 0000E8B3 488B4528                	mov rax, PARAM(1)	; param str1
 20577 0000E8B7 50                      	push rax
 20578 0000E8B8 6A02                    	push 2	; arg count
 20579 0000E8BA 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 20580 0000E8C2 803805                  	cmp byte [rax], T_undefined
 20581 0000E8C5 0F84306D0000            	je L_error_fvar_undefined
 20582 0000E8CB 803804                  	cmp byte [rax], T_closure
 20583 0000E8CE 0F85AB6D0000            	jne L_error_non_closure
 20584 0000E8D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20585 0000E8D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20586 0000E8DA 50                      	push rax
 20587 0000E8DB 6A02                    	push 2	; arg count
 20588 0000E8DD 488B4510                	mov rax, ENV
 20589 0000E8E1 488B4008                	mov rax, qword [rax + 8 * 1]
 20590 0000E8E5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char=?
 20591 0000E8E8 803804                  	cmp byte [rax], T_closure
 20592 0000E8EB 0F858E6D0000            	jne L_error_non_closure
 20593 0000E8F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20594 0000E8F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20595                                  
 20596 0000E8F7 483D[02000000]          	cmp rax, sob_boolean_false
 20597 0000E8FD 0F8498000000            	je .L_if_else_042c
 20598                                  	; preparing a tail-call
 20599 0000E903 488B4538                	mov rax, PARAM(3)	; param len
 20600 0000E907 50                      	push rax
 20601 0000E908 488B4530                	mov rax, PARAM(2)	; param str2
 20602 0000E90C 50                      	push rax
 20603 0000E90D 488B4528                	mov rax, PARAM(1)	; param str1
 20604 0000E911 50                      	push rax
 20605 0000E912 48B8-                   	mov rax, L_constants + 2158
 20605 0000E914 [6E08000000000000] 
 20606 0000E91C 50                      	push rax
 20607 0000E91D 488B4520                	mov rax, PARAM(0)	; param i
 20608 0000E921 50                      	push rax
 20609 0000E922 6A02                    	push 2	; arg count
 20610 0000E924 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 20611 0000E92C 803805                  	cmp byte [rax], T_undefined
 20612 0000E92F 0F84C66C0000            	je L_error_fvar_undefined
 20613 0000E935 803804                  	cmp byte [rax], T_closure
 20614 0000E938 0F85416D0000            	jne L_error_non_closure
 20615 0000E93E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20616 0000E941 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20617 0000E944 50                      	push rax
 20618 0000E945 6A04                    	push 4	; arg count
 20619 0000E947 488B4510                	mov rax, ENV
 20620 0000E94B 488B00                  	mov rax, qword [rax + 8 * 0]
 20621 0000E94E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20622 0000E951 488B00                  	mov rax, qword [rax]
 20623 0000E954 803804                  	cmp byte [rax], T_closure
 20624 0000E957 0F85226D0000            	jne L_error_non_closure
 20625 0000E95D FF7001                  	push SOB_CLOSURE_ENV(rax)
 20626                                  
 20627                                  	; recycling the current frame
 20628 0000E960 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20629 0000E963 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20630 0000E966 B908000000              	mov rcx, 4 + 4
 20631 0000E96B 488B5D18                	mov rbx, COUNT
 20632 0000E96F 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20633 0000E974 488D55F8                	lea rdx, [rbp - 8 * 1]
 20634                                  .L_tc_recycle_frame_loop_0772:
 20635 0000E978 4883F900                	cmp rcx, 0
 20636 0000E97C 7413                    	je .L_tc_recycle_frame_done_0772
 20637 0000E97E 488B32                  	mov rsi, qword [rdx]
 20638 0000E981 488933                  	mov qword [rbx], rsi
 20639 0000E984 48FFC9                  	dec rcx
 20640 0000E987 4883EB08                	sub rbx, 8 * 1
 20641 0000E98B 4883EA08                	sub rdx, 8 * 1
 20642 0000E98F EBE7                    	jmp .L_tc_recycle_frame_loop_0772
 20643                                  .L_tc_recycle_frame_done_0772:
 20644 0000E991 488D6308                	lea rsp, [rbx + 8 * 1]
 20645 0000E995 5D                      	pop rbp	; the proc will restore it!
 20646 0000E996 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20647                                  
 20648 0000E999 EB0A                    	jmp .L_if_end_042c
 20649                                  
 20650                                  	.L_if_else_042c:
 20651 0000E99B 48B8-                   	mov rax, L_constants + 2
 20651 0000E99D [0200000000000000] 
 20652                                  
 20653                                  	.L_if_end_042c:
 20654                                  
 20655 0000E9A5 EB0A                    	jmp .L_if_end_042b
 20656                                  
 20657                                  	.L_if_else_042b:
 20658 0000E9A7 48B8-                   	mov rax, L_constants + 2
 20658 0000E9A9 [0200000000000000] 
 20659                                  
 20660                                  	.L_if_end_042b:
 20661                                  .L_or_end_0066:
 20662 0000E9B1 C9                      	leave
 20663 0000E9B2 C23000                  	ret AND_KILL_FRAME(4)
 20664                                  .L_lambda_simple_end_059d:	; new closure is in rax
 20665                                  
 20666 0000E9B5 50                      	push rax
 20667 0000E9B6 488B4520                	mov rax, PARAM(0)	; param run
 20668                                  
 20669 0000E9BA 8F00                    	pop qword[rax]
 20670 0000E9BC 48B8-                   	mov rax, sob_void
 20670 0000E9BE [0000000000000000] 
 20671                                  
 20672                                  	; preparing a tail-call
 20673 0000E9C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20674 0000E9CB E8586D0000              	call malloc
 20675 0000E9D0 50                      	push rax
 20676 0000E9D1 BF08000000              	mov rdi, 8 * 1	; new rib
 20677 0000E9D6 E84D6D0000              	call malloc
 20678 0000E9DB 50                      	push rax
 20679 0000E9DC BF18000000              	mov rdi, 8 * 3	; extended env
 20680 0000E9E1 E8426D0000              	call malloc
 20681 0000E9E6 488B7D10                	mov rdi, ENV
 20682 0000E9EA BE00000000              	mov rsi, 0
 20683 0000E9EF BA01000000              	mov rdx, 1
 20684                                  .L_lambda_simple_env_loop_059e:	; ext_env[i + 1] <-- env[i]
 20685 0000E9F4 4883FE02                	cmp rsi, 2
 20686 0000E9F8 7410                    	je .L_lambda_simple_env_end_059e
 20687 0000E9FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20688 0000E9FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20689 0000EA02 48FFC6                  	inc rsi
 20690 0000EA05 48FFC2                  	inc rdx
 20691 0000EA08 EBEA                    	jmp .L_lambda_simple_env_loop_059e
 20692                                  .L_lambda_simple_env_end_059e:
 20693 0000EA0A 5B                      	pop rbx
 20694 0000EA0B BE00000000              	mov rsi, 0
 20695                                  .L_lambda_simple_params_loop_059e:	; copy params
 20696 0000EA10 4883FE01                	cmp rsi, 1
 20697 0000EA14 740E                    	je .L_lambda_simple_params_end_059e
 20698 0000EA16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20699 0000EA1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20700 0000EA1F 48FFC6                  	inc rsi
 20701 0000EA22 EBEC                    	jmp .L_lambda_simple_params_loop_059e
 20702                                  .L_lambda_simple_params_end_059e:
 20703 0000EA24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20704 0000EA27 4889C3                  	mov rbx, rax
 20705 0000EA2A 58                      	pop rax
 20706 0000EA2B C60004                  	mov byte [rax], T_closure
 20707 0000EA2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20708 0000EA32 48C74009[3FEA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_059e
 20709 0000EA3A E906020000              	jmp .L_lambda_simple_end_059e
 20710                                  .L_lambda_simple_code_059e:	; lambda-simple body
 20711 0000EA3F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20712 0000EA45 740B                    	je .L_lambda_simple_arity_check_ok_059e
 20713 0000EA47 FF742410                	push qword [rsp + 8 * 2]
 20714 0000EA4B 6A02                    	push 2
 20715 0000EA4D E98F6C0000              	jmp L_error_incorrect_arity_simple
 20716                                  .L_lambda_simple_arity_check_ok_059e:
 20717 0000EA52 C8000000                	enter 0, 0
 20718                                  	; preparing a tail-call
 20719 0000EA56 488B4528                	mov rax, PARAM(1)	; param str2
 20720 0000EA5A 50                      	push rax
 20721 0000EA5B 6A01                    	push 1	; arg count
 20722 0000EA5D 488B0425[FE0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 20723 0000EA65 803805                  	cmp byte [rax], T_undefined
 20724 0000EA68 0F848D6B0000            	je L_error_fvar_undefined
 20725 0000EA6E 803804                  	cmp byte [rax], T_closure
 20726 0000EA71 0F85086C0000            	jne L_error_non_closure
 20727 0000EA77 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20728 0000EA7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20729 0000EA7D 50                      	push rax
 20730 0000EA7E 488B4520                	mov rax, PARAM(0)	; param str1
 20731 0000EA82 50                      	push rax
 20732 0000EA83 6A01                    	push 1	; arg count
 20733 0000EA85 488B0425[FE0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 20734 0000EA8D 803805                  	cmp byte [rax], T_undefined
 20735 0000EA90 0F84656B0000            	je L_error_fvar_undefined
 20736 0000EA96 803804                  	cmp byte [rax], T_closure
 20737 0000EA99 0F85E06B0000            	jne L_error_non_closure
 20738 0000EA9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20739 0000EAA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20740 0000EAA5 50                      	push rax
 20741 0000EAA6 6A02                    	push 2	; arg count
 20742 0000EAA8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20743 0000EAAD E8766C0000              	call malloc
 20744 0000EAB2 50                      	push rax
 20745 0000EAB3 BF10000000              	mov rdi, 8 * 2	; new rib
 20746 0000EAB8 E86B6C0000              	call malloc
 20747 0000EABD 50                      	push rax
 20748 0000EABE BF20000000              	mov rdi, 8 * 4	; extended env
 20749 0000EAC3 E8606C0000              	call malloc
 20750 0000EAC8 488B7D10                	mov rdi, ENV
 20751 0000EACC BE00000000              	mov rsi, 0
 20752 0000EAD1 BA01000000              	mov rdx, 1
 20753                                  .L_lambda_simple_env_loop_059f:	; ext_env[i + 1] <-- env[i]
 20754 0000EAD6 4883FE03                	cmp rsi, 3
 20755 0000EADA 7410                    	je .L_lambda_simple_env_end_059f
 20756 0000EADC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20757 0000EAE0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20758 0000EAE4 48FFC6                  	inc rsi
 20759 0000EAE7 48FFC2                  	inc rdx
 20760 0000EAEA EBEA                    	jmp .L_lambda_simple_env_loop_059f
 20761                                  .L_lambda_simple_env_end_059f:
 20762 0000EAEC 5B                      	pop rbx
 20763 0000EAED BE00000000              	mov rsi, 0
 20764                                  .L_lambda_simple_params_loop_059f:	; copy params
 20765 0000EAF2 4883FE02                	cmp rsi, 2
 20766 0000EAF6 740E                    	je .L_lambda_simple_params_end_059f
 20767 0000EAF8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20768 0000EAFD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20769 0000EB01 48FFC6                  	inc rsi
 20770 0000EB04 EBEC                    	jmp .L_lambda_simple_params_loop_059f
 20771                                  .L_lambda_simple_params_end_059f:
 20772 0000EB06 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20773 0000EB09 4889C3                  	mov rbx, rax
 20774 0000EB0C 58                      	pop rax
 20775 0000EB0D C60004                  	mov byte [rax], T_closure
 20776 0000EB10 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20777 0000EB14 48C74009[21EB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_059f
 20778 0000EB1C E9DB000000              	jmp .L_lambda_simple_end_059f
 20779                                  .L_lambda_simple_code_059f:	; lambda-simple body
 20780 0000EB21 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20781 0000EB27 740B                    	je .L_lambda_simple_arity_check_ok_059f
 20782 0000EB29 FF742410                	push qword [rsp + 8 * 2]
 20783 0000EB2D 6A02                    	push 2
 20784 0000EB2F E9AD6B0000              	jmp L_error_incorrect_arity_simple
 20785                                  .L_lambda_simple_arity_check_ok_059f:
 20786 0000EB34 C8000000                	enter 0, 0
 20787 0000EB38 488B4528                	mov rax, PARAM(1)	; param len2
 20788 0000EB3C 50                      	push rax
 20789 0000EB3D 488B4520                	mov rax, PARAM(0)	; param len1
 20790 0000EB41 50                      	push rax
 20791 0000EB42 6A02                    	push 2	; arg count
 20792 0000EB44 488B0425[2A160000]      	mov rax, qword [free_var_126]	; free var =
 20793 0000EB4C 803805                  	cmp byte [rax], T_undefined
 20794 0000EB4F 0F84A66A0000            	je L_error_fvar_undefined
 20795 0000EB55 803804                  	cmp byte [rax], T_closure
 20796 0000EB58 0F85216B0000            	jne L_error_non_closure
 20797 0000EB5E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20798 0000EB61 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20799                                  
 20800 0000EB64 483D[02000000]          	cmp rax, sob_boolean_false
 20801 0000EB6A 0F847E000000            	je .L_if_else_042d
 20802                                  	; preparing a tail-call
 20803 0000EB70 488B4520                	mov rax, PARAM(0)	; param len1
 20804 0000EB74 50                      	push rax
 20805 0000EB75 488B4510                	mov rax, ENV
 20806 0000EB79 488B00                  	mov rax, qword [rax + 8 * 0]
 20807 0000EB7C 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 20808 0000EB80 50                      	push rax
 20809 0000EB81 488B4510                	mov rax, ENV
 20810 0000EB85 488B00                  	mov rax, qword [rax + 8 * 0]
 20811 0000EB88 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 20812 0000EB8B 50                      	push rax
 20813 0000EB8C 48B8-                   	mov rax, L_constants + 2023
 20813 0000EB8E [E707000000000000] 
 20814 0000EB96 50                      	push rax
 20815 0000EB97 6A04                    	push 4	; arg count
 20816 0000EB99 488B4510                	mov rax, ENV
 20817 0000EB9D 488B4008                	mov rax, qword [rax + 8 * 1]
 20818 0000EBA1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20819 0000EBA4 488B00                  	mov rax, qword [rax]
 20820 0000EBA7 803804                  	cmp byte [rax], T_closure
 20821 0000EBAA 0F85CF6A0000            	jne L_error_non_closure
 20822 0000EBB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20823                                  
 20824                                  	; recycling the current frame
 20825 0000EBB3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20826 0000EBB6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20827 0000EBB9 B908000000              	mov rcx, 4 + 4
 20828 0000EBBE 488B5D18                	mov rbx, COUNT
 20829 0000EBC2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20830 0000EBC7 488D55F8                	lea rdx, [rbp - 8 * 1]
 20831                                  .L_tc_recycle_frame_loop_0773:
 20832 0000EBCB 4883F900                	cmp rcx, 0
 20833 0000EBCF 7413                    	je .L_tc_recycle_frame_done_0773
 20834 0000EBD1 488B32                  	mov rsi, qword [rdx]
 20835 0000EBD4 488933                  	mov qword [rbx], rsi
 20836 0000EBD7 48FFC9                  	dec rcx
 20837 0000EBDA 4883EB08                	sub rbx, 8 * 1
 20838 0000EBDE 4883EA08                	sub rdx, 8 * 1
 20839 0000EBE2 EBE7                    	jmp .L_tc_recycle_frame_loop_0773
 20840                                  .L_tc_recycle_frame_done_0773:
 20841 0000EBE4 488D6308                	lea rsp, [rbx + 8 * 1]
 20842 0000EBE8 5D                      	pop rbp	; the proc will restore it!
 20843 0000EBE9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20844                                  
 20845 0000EBEC EB0A                    	jmp .L_if_end_042d
 20846                                  
 20847                                  	.L_if_else_042d:
 20848 0000EBEE 48B8-                   	mov rax, L_constants + 2
 20848 0000EBF0 [0200000000000000] 
 20849                                  
 20850                                  	.L_if_end_042d:
 20851 0000EBF8 C9                      	leave
 20852 0000EBF9 C22000                  	ret AND_KILL_FRAME(2)
 20853                                  .L_lambda_simple_end_059f:	; new closure is in rax
 20854 0000EBFC 803804                  	cmp byte [rax], T_closure
 20855 0000EBFF 0F857A6A0000            	jne L_error_non_closure
 20856 0000EC05 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20857                                  
 20858                                  	; recycling the current frame
 20859 0000EC08 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 20860 0000EC0B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 20861 0000EC0E B906000000              	mov rcx, 2 + 4
 20862 0000EC13 488B5D18                	mov rbx, COUNT
 20863 0000EC17 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 20864 0000EC1C 488D55F8                	lea rdx, [rbp - 8 * 1]
 20865                                  .L_tc_recycle_frame_loop_0774:
 20866 0000EC20 4883F900                	cmp rcx, 0
 20867 0000EC24 7413                    	je .L_tc_recycle_frame_done_0774
 20868 0000EC26 488B32                  	mov rsi, qword [rdx]
 20869 0000EC29 488933                  	mov qword [rbx], rsi
 20870 0000EC2C 48FFC9                  	dec rcx
 20871 0000EC2F 4883EB08                	sub rbx, 8 * 1
 20872 0000EC33 4883EA08                	sub rdx, 8 * 1
 20873 0000EC37 EBE7                    	jmp .L_tc_recycle_frame_loop_0774
 20874                                  .L_tc_recycle_frame_done_0774:
 20875 0000EC39 488D6308                	lea rsp, [rbx + 8 * 1]
 20876 0000EC3D 5D                      	pop rbp	; the proc will restore it!
 20877 0000EC3E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20878 0000EC41 C9                      	leave
 20879 0000EC42 C22000                  	ret AND_KILL_FRAME(2)
 20880                                  .L_lambda_simple_end_059e:	; new closure is in rax
 20881 0000EC45 50                      	push rax
 20882 0000EC46 6A01                    	push 1	; arg count
 20883 0000EC48 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20884 0000EC4D E8D66A0000              	call malloc
 20885 0000EC52 50                      	push rax
 20886 0000EC53 BF08000000              	mov rdi, 8 * 1	; new rib
 20887 0000EC58 E8CB6A0000              	call malloc
 20888 0000EC5D 50                      	push rax
 20889 0000EC5E BF18000000              	mov rdi, 8 * 3	; extended env
 20890 0000EC63 E8C06A0000              	call malloc
 20891 0000EC68 488B7D10                	mov rdi, ENV
 20892 0000EC6C BE00000000              	mov rsi, 0
 20893 0000EC71 BA01000000              	mov rdx, 1
 20894                                  .L_lambda_simple_env_loop_05a0:	; ext_env[i + 1] <-- env[i]
 20895 0000EC76 4883FE02                	cmp rsi, 2
 20896 0000EC7A 7410                    	je .L_lambda_simple_env_end_05a0
 20897 0000EC7C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20898 0000EC80 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20899 0000EC84 48FFC6                  	inc rsi
 20900 0000EC87 48FFC2                  	inc rdx
 20901 0000EC8A EBEA                    	jmp .L_lambda_simple_env_loop_05a0
 20902                                  .L_lambda_simple_env_end_05a0:
 20903 0000EC8C 5B                      	pop rbx
 20904 0000EC8D BE00000000              	mov rsi, 0
 20905                                  .L_lambda_simple_params_loop_05a0:	; copy params
 20906 0000EC92 4883FE01                	cmp rsi, 1
 20907 0000EC96 740E                    	je .L_lambda_simple_params_end_05a0
 20908 0000EC98 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20909 0000EC9D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20910 0000ECA1 48FFC6                  	inc rsi
 20911 0000ECA4 EBEC                    	jmp .L_lambda_simple_params_loop_05a0
 20912                                  .L_lambda_simple_params_end_05a0:
 20913 0000ECA6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20914 0000ECA9 4889C3                  	mov rbx, rax
 20915 0000ECAC 58                      	pop rax
 20916 0000ECAD C60004                  	mov byte [rax], T_closure
 20917 0000ECB0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20918 0000ECB4 48C74009[C1EC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05a0
 20919 0000ECBC E9AF040000              	jmp .L_lambda_simple_end_05a0
 20920                                  .L_lambda_simple_code_05a0:	; lambda-simple body
 20921 0000ECC1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20922 0000ECC7 740B                    	je .L_lambda_simple_arity_check_ok_05a0
 20923 0000ECC9 FF742410                	push qword [rsp + 8 * 2]
 20924 0000ECCD 6A01                    	push 1
 20925 0000ECCF E90D6A0000              	jmp L_error_incorrect_arity_simple
 20926                                  .L_lambda_simple_arity_check_ok_05a0:
 20927 0000ECD4 C8000000                	enter 0, 0
 20928                                  	; preparing a tail-call
 20929 0000ECD8 48B8-                   	mov rax, L_constants + 1881
 20929 0000ECDA [5907000000000000] 
 20930 0000ECE2 50                      	push rax
 20931 0000ECE3 6A01                    	push 1	; arg count
 20932 0000ECE5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20933 0000ECEA E8396A0000              	call malloc
 20934 0000ECEF 50                      	push rax
 20935 0000ECF0 BF08000000              	mov rdi, 8 * 1	; new rib
 20936 0000ECF5 E82E6A0000              	call malloc
 20937 0000ECFA 50                      	push rax
 20938 0000ECFB BF20000000              	mov rdi, 8 * 4	; extended env
 20939 0000ED00 E8236A0000              	call malloc
 20940 0000ED05 488B7D10                	mov rdi, ENV
 20941 0000ED09 BE00000000              	mov rsi, 0
 20942 0000ED0E BA01000000              	mov rdx, 1
 20943                                  .L_lambda_simple_env_loop_05a1:	; ext_env[i + 1] <-- env[i]
 20944 0000ED13 4883FE03                	cmp rsi, 3
 20945 0000ED17 7410                    	je .L_lambda_simple_env_end_05a1
 20946 0000ED19 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20947 0000ED1D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20948 0000ED21 48FFC6                  	inc rsi
 20949 0000ED24 48FFC2                  	inc rdx
 20950 0000ED27 EBEA                    	jmp .L_lambda_simple_env_loop_05a1
 20951                                  .L_lambda_simple_env_end_05a1:
 20952 0000ED29 5B                      	pop rbx
 20953 0000ED2A BE00000000              	mov rsi, 0
 20954                                  .L_lambda_simple_params_loop_05a1:	; copy params
 20955 0000ED2F 4883FE01                	cmp rsi, 1
 20956 0000ED33 740E                    	je .L_lambda_simple_params_end_05a1
 20957 0000ED35 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20958 0000ED3A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20959 0000ED3E 48FFC6                  	inc rsi
 20960 0000ED41 EBEC                    	jmp .L_lambda_simple_params_loop_05a1
 20961                                  .L_lambda_simple_params_end_05a1:
 20962 0000ED43 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20963 0000ED46 4889C3                  	mov rbx, rax
 20964 0000ED49 58                      	pop rax
 20965 0000ED4A C60004                  	mov byte [rax], T_closure
 20966 0000ED4D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20967 0000ED51 48C74009[5EED0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05a1
 20968 0000ED59 E9C9030000              	jmp .L_lambda_simple_end_05a1
 20969                                  .L_lambda_simple_code_05a1:	; lambda-simple body
 20970 0000ED5E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20971 0000ED64 740B                    	je .L_lambda_simple_arity_check_ok_05a1
 20972 0000ED66 FF742410                	push qword [rsp + 8 * 2]
 20973 0000ED6A 6A01                    	push 1
 20974 0000ED6C E970690000              	jmp L_error_incorrect_arity_simple
 20975                                  .L_lambda_simple_arity_check_ok_05a1:
 20976 0000ED71 C8000000                	enter 0, 0
 20977                                  
 20978 0000ED75 BF08000000              	mov rdi, 8
 20979 0000ED7A E8A9690000              	call malloc
 20980 0000ED7F 488B5D20                	mov rbx, PARAM(0)	; param run
 20981 0000ED83 488918                  	mov [rax], rbx	; box run
 20982 0000ED86 48894520                	mov PARAM(0), rax	;replace param run with box
 20983 0000ED8A 48B8-                   	mov rax, sob_void
 20983 0000ED8C [0000000000000000] 
 20984                                  
 20985 0000ED94 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20986 0000ED99 E88A690000              	call malloc
 20987 0000ED9E 50                      	push rax
 20988 0000ED9F BF08000000              	mov rdi, 8 * 1	; new rib
 20989 0000EDA4 E87F690000              	call malloc
 20990 0000EDA9 50                      	push rax
 20991 0000EDAA BF28000000              	mov rdi, 8 * 5	; extended env
 20992 0000EDAF E874690000              	call malloc
 20993 0000EDB4 488B7D10                	mov rdi, ENV
 20994 0000EDB8 BE00000000              	mov rsi, 0
 20995 0000EDBD BA01000000              	mov rdx, 1
 20996                                  .L_lambda_simple_env_loop_05a2:	; ext_env[i + 1] <-- env[i]
 20997 0000EDC2 4883FE04                	cmp rsi, 4
 20998 0000EDC6 7410                    	je .L_lambda_simple_env_end_05a2
 20999 0000EDC8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21000 0000EDCC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21001 0000EDD0 48FFC6                  	inc rsi
 21002 0000EDD3 48FFC2                  	inc rdx
 21003 0000EDD6 EBEA                    	jmp .L_lambda_simple_env_loop_05a2
 21004                                  .L_lambda_simple_env_end_05a2:
 21005 0000EDD8 5B                      	pop rbx
 21006 0000EDD9 BE00000000              	mov rsi, 0
 21007                                  .L_lambda_simple_params_loop_05a2:	; copy params
 21008 0000EDDE 4883FE01                	cmp rsi, 1
 21009 0000EDE2 740E                    	je .L_lambda_simple_params_end_05a2
 21010 0000EDE4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21011 0000EDE9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21012 0000EDED 48FFC6                  	inc rsi
 21013 0000EDF0 EBEC                    	jmp .L_lambda_simple_params_loop_05a2
 21014                                  .L_lambda_simple_params_end_05a2:
 21015 0000EDF2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21016 0000EDF5 4889C3                  	mov rbx, rax
 21017 0000EDF8 58                      	pop rax
 21018 0000EDF9 C60004                  	mov byte [rax], T_closure
 21019 0000EDFC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21020 0000EE00 48C74009[0DEE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05a2
 21021 0000EE08 E953010000              	jmp .L_lambda_simple_end_05a2
 21022                                  .L_lambda_simple_code_05a2:	; lambda-simple body
 21023 0000EE0D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21024 0000EE13 740B                    	je .L_lambda_simple_arity_check_ok_05a2
 21025 0000EE15 FF742410                	push qword [rsp + 8 * 2]
 21026 0000EE19 6A02                    	push 2
 21027 0000EE1B E9C1680000              	jmp L_error_incorrect_arity_simple
 21028                                  .L_lambda_simple_arity_check_ok_05a2:
 21029 0000EE20 C8000000                	enter 0, 0
 21030 0000EE24 488B4528                	mov rax, PARAM(1)	; param strs
 21031 0000EE28 50                      	push rax
 21032 0000EE29 6A01                    	push 1	; arg count
 21033 0000EE2B 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 21034 0000EE33 803805                  	cmp byte [rax], T_undefined
 21035 0000EE36 0F84BF670000            	je L_error_fvar_undefined
 21036 0000EE3C 803804                  	cmp byte [rax], T_closure
 21037 0000EE3F 0F853A680000            	jne L_error_non_closure
 21038 0000EE45 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21039 0000EE48 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21040 0000EE4B 483D[02000000]          	cmp rax, sob_boolean_false
 21041 0000EE51 0F8505010000            	jne .L_or_end_0067
 21042 0000EE57 488B4528                	mov rax, PARAM(1)	; param strs
 21043 0000EE5B 50                      	push rax
 21044 0000EE5C 6A01                    	push 1	; arg count
 21045 0000EE5E 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 21046 0000EE66 803805                  	cmp byte [rax], T_undefined
 21047 0000EE69 0F848C670000            	je L_error_fvar_undefined
 21048 0000EE6F 803804                  	cmp byte [rax], T_closure
 21049 0000EE72 0F8507680000            	jne L_error_non_closure
 21050 0000EE78 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21051 0000EE7B FF5009                  	call SOB_CLOSURE_CODE(rax)
 21052 0000EE7E 50                      	push rax
 21053 0000EE7F 488B4520                	mov rax, PARAM(0)	; param str
 21054 0000EE83 50                      	push rax
 21055 0000EE84 6A02                    	push 2	; arg count
 21056 0000EE86 488B4510                	mov rax, ENV
 21057 0000EE8A 488B4008                	mov rax, qword [rax + 8 * 1]
 21058 0000EE8E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string=?
 21059 0000EE91 803804                  	cmp byte [rax], T_closure
 21060 0000EE94 0F85E5670000            	jne L_error_non_closure
 21061 0000EE9A FF7001                  	push SOB_CLOSURE_ENV(rax)
 21062 0000EE9D FF5009                  	call SOB_CLOSURE_CODE(rax)
 21063                                  
 21064 0000EEA0 483D[02000000]          	cmp rax, sob_boolean_false
 21065 0000EEA6 0F84A6000000            	je .L_if_else_042e
 21066                                  	; preparing a tail-call
 21067 0000EEAC 488B4528                	mov rax, PARAM(1)	; param strs
 21068 0000EEB0 50                      	push rax
 21069 0000EEB1 6A01                    	push 1	; arg count
 21070 0000EEB3 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 21071 0000EEBB 803805                  	cmp byte [rax], T_undefined
 21072 0000EEBE 0F8437670000            	je L_error_fvar_undefined
 21073 0000EEC4 803804                  	cmp byte [rax], T_closure
 21074 0000EEC7 0F85B2670000            	jne L_error_non_closure
 21075 0000EECD FF7001                  	push SOB_CLOSURE_ENV(rax)
 21076 0000EED0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21077 0000EED3 50                      	push rax
 21078 0000EED4 488B4528                	mov rax, PARAM(1)	; param strs
 21079 0000EED8 50                      	push rax
 21080 0000EED9 6A01                    	push 1	; arg count
 21081 0000EEDB 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 21082 0000EEE3 803805                  	cmp byte [rax], T_undefined
 21083 0000EEE6 0F840F670000            	je L_error_fvar_undefined
 21084 0000EEEC 803804                  	cmp byte [rax], T_closure
 21085 0000EEEF 0F858A670000            	jne L_error_non_closure
 21086 0000EEF5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21087 0000EEF8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21088 0000EEFB 50                      	push rax
 21089 0000EEFC 6A02                    	push 2	; arg count
 21090 0000EEFE 488B4510                	mov rax, ENV
 21091 0000EF02 488B00                  	mov rax, qword [rax + 8 * 0]
 21092 0000EF05 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21093 0000EF08 488B00                  	mov rax, qword [rax]
 21094 0000EF0B 803804                  	cmp byte [rax], T_closure
 21095 0000EF0E 0F856B670000            	jne L_error_non_closure
 21096 0000EF14 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21097                                  
 21098                                  	; recycling the current frame
 21099 0000EF17 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21100 0000EF1A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21101 0000EF1D B906000000              	mov rcx, 2 + 4
 21102 0000EF22 488B5D18                	mov rbx, COUNT
 21103 0000EF26 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21104 0000EF2B 488D55F8                	lea rdx, [rbp - 8 * 1]
 21105                                  .L_tc_recycle_frame_loop_0775:
 21106 0000EF2F 4883F900                	cmp rcx, 0
 21107 0000EF33 7413                    	je .L_tc_recycle_frame_done_0775
 21108 0000EF35 488B32                  	mov rsi, qword [rdx]
 21109 0000EF38 488933                  	mov qword [rbx], rsi
 21110 0000EF3B 48FFC9                  	dec rcx
 21111 0000EF3E 4883EB08                	sub rbx, 8 * 1
 21112 0000EF42 4883EA08                	sub rdx, 8 * 1
 21113 0000EF46 EBE7                    	jmp .L_tc_recycle_frame_loop_0775
 21114                                  .L_tc_recycle_frame_done_0775:
 21115 0000EF48 488D6308                	lea rsp, [rbx + 8 * 1]
 21116 0000EF4C 5D                      	pop rbp	; the proc will restore it!
 21117 0000EF4D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21118                                  
 21119 0000EF50 EB0A                    	jmp .L_if_end_042e
 21120                                  
 21121                                  	.L_if_else_042e:
 21122 0000EF52 48B8-                   	mov rax, L_constants + 2
 21122 0000EF54 [0200000000000000] 
 21123                                  
 21124                                  	.L_if_end_042e:
 21125                                  .L_or_end_0067:
 21126 0000EF5C C9                      	leave
 21127 0000EF5D C22000                  	ret AND_KILL_FRAME(2)
 21128                                  .L_lambda_simple_end_05a2:	; new closure is in rax
 21129                                  
 21130 0000EF60 50                      	push rax
 21131 0000EF61 488B4520                	mov rax, PARAM(0)	; param run
 21132                                  
 21133 0000EF65 8F00                    	pop qword[rax]
 21134 0000EF67 48B8-                   	mov rax, sob_void
 21134 0000EF69 [0000000000000000] 
 21135                                  
 21136 0000EF71 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21137 0000EF76 E8AD670000              	call malloc
 21138 0000EF7B 50                      	push rax
 21139 0000EF7C BF08000000              	mov rdi, 8 * 1	; new rib
 21140 0000EF81 E8A2670000              	call malloc
 21141 0000EF86 50                      	push rax
 21142 0000EF87 BF28000000              	mov rdi, 8 * 5	; extended env
 21143 0000EF8C E897670000              	call malloc
 21144 0000EF91 488B7D10                	mov rdi, ENV
 21145 0000EF95 BE00000000              	mov rsi, 0
 21146 0000EF9A BA01000000              	mov rdx, 1
 21147                                  .L_lambda_opt_env_loop_00c3:	; ext_env[i + 1] <-- env[i]
 21148 0000EF9F 4883FE04                	cmp rsi, 4
 21149 0000EFA3 7410                    	je .L_lambda_opt_env_end_00c3
 21150 0000EFA5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21151 0000EFA9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21152 0000EFAD 48FFC6                  	inc rsi
 21153 0000EFB0 48FFC2                  	inc rdx
 21154 0000EFB3 EBEA                    	jmp .L_lambda_opt_env_loop_00c3
 21155                                  .L_lambda_opt_env_end_00c3:
 21156 0000EFB5 5B                      	pop rbx
 21157 0000EFB6 BE00000000              	mov rsi, 0
 21158                                  .L_lambda_opt_params_loop_00c3:	; copy params
 21159 0000EFBB 4883FE01                	cmp rsi, 1
 21160 0000EFBF 740E                    	je .L_lambda_opt_params_end_00c3
 21161 0000EFC1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21162 0000EFC6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21163 0000EFCA 48FFC6                  	inc rsi
 21164 0000EFCD EBEC                    	jmp .L_lambda_opt_params_loop_00c3
 21165                                  .L_lambda_opt_params_end_00c3:
 21166 0000EFCF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21167 0000EFD2 4889C3                  	mov rbx, rax
 21168 0000EFD5 58                      	pop rax
 21169 0000EFD6 C60004                  	mov byte [rax], T_closure
 21170 0000EFD9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21171 0000EFDD 48C74009[EAEF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00c3
 21172 0000EFE5 E939010000              	jmp .L_lambda_opt_end_00c3
 21173                                  .L_lambda_opt_code_00c3:	; lambda-simple body
 21174 0000EFEA 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 21175 0000EFF0 740D                    	je .L_lambda_opt_arity_check_exact_00c3 ;	 if equal, go to exact arity
 21176 0000EFF2 7F42                    	jg .L_lambda_opt_arity_check_more_00c3 ;	 if greater than, go to arity more
 21177 0000EFF4 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 21178 0000EFF8 6A01                     	push 1
 21179 0000EFFA E9F6660000              	jmp L_error_incorrect_arity_opt
 21180                                  	.L_lambda_opt_arity_check_exact_00c3:
 21181 0000EFFF 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 21182 0000F004 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 21183 0000F009 4883EC08                	sub rsp, 8
 21184 0000F00D 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 21185                                  	.L_lambda_opt_exact_shifting_loop_00c3:
 21186 0000F011 488B5108                	mov rdx, [rcx + 8]
 21187 0000F015 488911                  	mov [rcx], rdx
 21188 0000F018 4883C108                	add rcx, 8
 21189 0000F01C 4839CB                  	cmp rbx, rcx
 21190 0000F01F 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00c3
 21191                                  	.L_lambda_opt_exact_shifting_loop_end_00c3:
 21192 0000F021 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 21193 0000F028 4883C001                	add rax, 1 ; 	arg count += 1
 21194 0000F02C 4889442410              	mov qword [rsp + 8 * 2], rax
 21195 0000F031 E987000000              	jmp .L_lambda_opt_stack_adjusted_00c3
 21196                                  	.L_lambda_opt_arity_check_more_00c3:
 21197 0000F036 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 21197 0000F038 [0100000000000000] 
 21198 0000F040 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 21199 0000F046 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00c3
 21200                                  	.L_lambda_opt_stack_shrink_loop_00c3:
 21201 0000F048 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 21202 0000F04D E8D6660000              	call malloc ;	 allocated memory for the optional scheme list
 21203 0000F052 C60021                  	mov byte[rax], T_pair ;	 set type pair
 21204 0000F055 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 21205 0000F059 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 21206 0000F05C 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 21207 0000F061 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 21208 0000F066 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 21209 0000F06A 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 21210                                  	.L_lambda_opt_more_shifting_loop_00c3:
 21211 0000F06F 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 21212 0000F072 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 21213 0000F076 4883EB08                	sub rbx, 8 
 21214 0000F07A 4839DC                  	cmp rsp, rbx
 21215 0000F07D 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00c3
 21216                                  	.L_lambda_opt_more_shifting_loop_end_00c3:
 21217 0000F07F 4883C408                	add rsp, 8 ;	 update rsp
 21218 0000F083 488B5C2410              	mov rbx, [rsp + 8 * 2]
 21219 0000F088 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 21220 0000F08C 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 21221 0000F091 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21222 0000F097 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00c3
 21223                                  	.L_lambda_opt_stack_shrink_loop_exit_00c3:
 21224 0000F099 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 21225 0000F09E 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 21226 0000F0A3 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 21227 0000F0A8 E87B660000              	call malloc ;	 allocated memory for the optional scheme list
 21228 0000F0AD C60021                  	mov byte[rax], T_pair ;	 set type pair
 21229 0000F0B0 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 21230 0000F0B4 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 21231 0000F0B8 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 21232                                  	.L_lambda_opt_stack_adjusted_00c3:
 21233 0000F0BD C8000000                	enter 0, 0
 21234                                  	; preparing a tail-call
 21235 0000F0C1 488B4528                	mov rax, PARAM(1)	; param strs
 21236 0000F0C5 50                      	push rax
 21237 0000F0C6 488B4520                	mov rax, PARAM(0)	; param str
 21238 0000F0CA 50                      	push rax
 21239 0000F0CB 6A02                    	push 2	; arg count
 21240 0000F0CD 488B4510                	mov rax, ENV
 21241 0000F0D1 488B00                  	mov rax, qword [rax + 8 * 0]
 21242 0000F0D4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21243 0000F0D7 488B00                  	mov rax, qword [rax]
 21244 0000F0DA 803804                  	cmp byte [rax], T_closure
 21245 0000F0DD 0F859C650000            	jne L_error_non_closure
 21246 0000F0E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21247                                  
 21248                                  	; recycling the current frame
 21249 0000F0E6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21250 0000F0E9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21251 0000F0EC B906000000              	mov rcx, 2 + 4
 21252 0000F0F1 488B5D18                	mov rbx, COUNT
 21253 0000F0F5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21254 0000F0FA 488D55F8                	lea rdx, [rbp - 8 * 1]
 21255                                  .L_tc_recycle_frame_loop_0776:
 21256 0000F0FE 4883F900                	cmp rcx, 0
 21257 0000F102 7413                    	je .L_tc_recycle_frame_done_0776
 21258 0000F104 488B32                  	mov rsi, qword [rdx]
 21259 0000F107 488933                  	mov qword [rbx], rsi
 21260 0000F10A 48FFC9                  	dec rcx
 21261 0000F10D 4883EB08                	sub rbx, 8 * 1
 21262 0000F111 4883EA08                	sub rdx, 8 * 1
 21263 0000F115 EBE7                    	jmp .L_tc_recycle_frame_loop_0776
 21264                                  .L_tc_recycle_frame_done_0776:
 21265 0000F117 488D6308                	lea rsp, [rbx + 8 * 1]
 21266 0000F11B 5D                      	pop rbp	; the proc will restore it!
 21267 0000F11C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21268 0000F11F C9                      	leave
 21269 0000F120 C22000                  	ret AND_KILL_FRAME(2)
 21270                                  .L_lambda_opt_end_00c3:	; new closure is in rax
 21271 0000F123 C9                      	leave
 21272 0000F124 C21800                  	ret AND_KILL_FRAME(1)
 21273                                  .L_lambda_simple_end_05a1:	; new closure is in rax
 21274 0000F127 803804                  	cmp byte [rax], T_closure
 21275 0000F12A 0F854F650000            	jne L_error_non_closure
 21276 0000F130 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21277                                  
 21278                                  	; recycling the current frame
 21279 0000F133 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21280 0000F136 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21281 0000F139 B905000000              	mov rcx, 1 + 4
 21282 0000F13E 488B5D18                	mov rbx, COUNT
 21283 0000F142 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21284 0000F147 488D55F8                	lea rdx, [rbp - 8 * 1]
 21285                                  .L_tc_recycle_frame_loop_0777:
 21286 0000F14B 4883F900                	cmp rcx, 0
 21287 0000F14F 7413                    	je .L_tc_recycle_frame_done_0777
 21288 0000F151 488B32                  	mov rsi, qword [rdx]
 21289 0000F154 488933                  	mov qword [rbx], rsi
 21290 0000F157 48FFC9                  	dec rcx
 21291 0000F15A 4883EB08                	sub rbx, 8 * 1
 21292 0000F15E 4883EA08                	sub rdx, 8 * 1
 21293 0000F162 EBE7                    	jmp .L_tc_recycle_frame_loop_0777
 21294                                  .L_tc_recycle_frame_done_0777:
 21295 0000F164 488D6308                	lea rsp, [rbx + 8 * 1]
 21296 0000F168 5D                      	pop rbp	; the proc will restore it!
 21297 0000F169 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21298 0000F16C C9                      	leave
 21299 0000F16D C21800                  	ret AND_KILL_FRAME(1)
 21300                                  .L_lambda_simple_end_05a0:	; new closure is in rax
 21301 0000F170 803804                  	cmp byte [rax], T_closure
 21302 0000F173 0F8506650000            	jne L_error_non_closure
 21303 0000F179 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21304                                  
 21305                                  	; recycling the current frame
 21306 0000F17C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21307 0000F17F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21308 0000F182 B905000000              	mov rcx, 1 + 4
 21309 0000F187 488B5D18                	mov rbx, COUNT
 21310 0000F18B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21311 0000F190 488D55F8                	lea rdx, [rbp - 8 * 1]
 21312                                  .L_tc_recycle_frame_loop_0778:
 21313 0000F194 4883F900                	cmp rcx, 0
 21314 0000F198 7413                    	je .L_tc_recycle_frame_done_0778
 21315 0000F19A 488B32                  	mov rsi, qword [rdx]
 21316 0000F19D 488933                  	mov qword [rbx], rsi
 21317 0000F1A0 48FFC9                  	dec rcx
 21318 0000F1A3 4883EB08                	sub rbx, 8 * 1
 21319 0000F1A7 4883EA08                	sub rdx, 8 * 1
 21320 0000F1AB EBE7                    	jmp .L_tc_recycle_frame_loop_0778
 21321                                  .L_tc_recycle_frame_done_0778:
 21322 0000F1AD 488D6308                	lea rsp, [rbx + 8 * 1]
 21323 0000F1B1 5D                      	pop rbp	; the proc will restore it!
 21324 0000F1B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21325 0000F1B5 C9                      	leave
 21326 0000F1B6 C21800                  	ret AND_KILL_FRAME(1)
 21327                                  .L_lambda_simple_end_059c:	; new closure is in rax
 21328 0000F1B9 803804                  	cmp byte [rax], T_closure
 21329 0000F1BC 0F85BD640000            	jne L_error_non_closure
 21330 0000F1C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21331                                  
 21332                                  	; recycling the current frame
 21333 0000F1C5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21334 0000F1C8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21335 0000F1CB B905000000              	mov rcx, 1 + 4
 21336 0000F1D0 488B5D18                	mov rbx, COUNT
 21337 0000F1D4 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21338 0000F1D9 488D55F8                	lea rdx, [rbp - 8 * 1]
 21339                                  .L_tc_recycle_frame_loop_0779:
 21340 0000F1DD 4883F900                	cmp rcx, 0
 21341 0000F1E1 7413                    	je .L_tc_recycle_frame_done_0779
 21342 0000F1E3 488B32                  	mov rsi, qword [rdx]
 21343 0000F1E6 488933                  	mov qword [rbx], rsi
 21344 0000F1E9 48FFC9                  	dec rcx
 21345 0000F1EC 4883EB08                	sub rbx, 8 * 1
 21346 0000F1F0 4883EA08                	sub rdx, 8 * 1
 21347 0000F1F4 EBE7                    	jmp .L_tc_recycle_frame_loop_0779
 21348                                  .L_tc_recycle_frame_done_0779:
 21349 0000F1F6 488D6308                	lea rsp, [rbx + 8 * 1]
 21350 0000F1FA 5D                      	pop rbp	; the proc will restore it!
 21351 0000F1FB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21352 0000F1FE C9                      	leave
 21353 0000F1FF C21800                  	ret AND_KILL_FRAME(1)
 21354                                  .L_lambda_simple_end_059b:	; new closure is in rax
 21355 0000F202 50                      	push rax
 21356 0000F203 6A01                    	push 1	; arg count
 21357 0000F205 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21358 0000F20A E819650000              	call malloc
 21359 0000F20F 50                      	push rax
 21360 0000F210 BF00000000              	mov rdi, 8 * 0	; new rib
 21361 0000F215 E80E650000              	call malloc
 21362 0000F21A 50                      	push rax
 21363 0000F21B BF08000000              	mov rdi, 8 * 1	; extended env
 21364 0000F220 E803650000              	call malloc
 21365 0000F225 488B7D10                	mov rdi, ENV
 21366 0000F229 BE00000000              	mov rsi, 0
 21367 0000F22E BA01000000              	mov rdx, 1
 21368                                  .L_lambda_simple_env_loop_05a3:	; ext_env[i + 1] <-- env[i]
 21369 0000F233 4883FE00                	cmp rsi, 0
 21370 0000F237 7410                    	je .L_lambda_simple_env_end_05a3
 21371 0000F239 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21372 0000F23D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21373 0000F241 48FFC6                  	inc rsi
 21374 0000F244 48FFC2                  	inc rdx
 21375 0000F247 EBEA                    	jmp .L_lambda_simple_env_loop_05a3
 21376                                  .L_lambda_simple_env_end_05a3:
 21377 0000F249 5B                      	pop rbx
 21378 0000F24A BE00000000              	mov rsi, 0
 21379                                  .L_lambda_simple_params_loop_05a3:	; copy params
 21380 0000F24F 4883FE00                	cmp rsi, 0
 21381 0000F253 740E                    	je .L_lambda_simple_params_end_05a3
 21382 0000F255 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21383 0000F25A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21384 0000F25E 48FFC6                  	inc rsi
 21385 0000F261 EBEC                    	jmp .L_lambda_simple_params_loop_05a3
 21386                                  .L_lambda_simple_params_end_05a3:
 21387 0000F263 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21388 0000F266 4889C3                  	mov rbx, rax
 21389 0000F269 58                      	pop rax
 21390 0000F26A C60004                  	mov byte [rax], T_closure
 21391 0000F26D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21392 0000F271 48C74009[7EF20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05a3
 21393 0000F279 E99F000000              	jmp .L_lambda_simple_end_05a3
 21394                                  .L_lambda_simple_code_05a3:	; lambda-simple body
 21395 0000F27E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21396 0000F284 740B                    	je .L_lambda_simple_arity_check_ok_05a3
 21397 0000F286 FF742410                	push qword [rsp + 8 * 2]
 21398 0000F28A 6A01                    	push 1
 21399 0000F28C E950640000              	jmp L_error_incorrect_arity_simple
 21400                                  .L_lambda_simple_arity_check_ok_05a3:
 21401 0000F291 C8000000                	enter 0, 0
 21402 0000F295 488B0425[6E160000]      	mov rax, qword [free_var_130]	; free var char=?
 21403 0000F29D 803805                  	cmp byte [rax], T_undefined
 21404 0000F2A0 0F8455630000            	je L_error_fvar_undefined
 21405 0000F2A6 50                      	push rax
 21406 0000F2A7 6A01                    	push 1	; arg count
 21407 0000F2A9 488B4520                	mov rax, PARAM(0)	; param make-string=?
 21408 0000F2AD 803804                  	cmp byte [rax], T_closure
 21409 0000F2B0 0F85C9630000            	jne L_error_non_closure
 21410 0000F2B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21411 0000F2B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21412 0000F2BC 48890425[7E170000]      	mov qword [free_var_146], rax	; free var string=?
 21413 0000F2C4 803805                  	cmp byte [rax], T_undefined
 21414 0000F2C7 0F842E630000            	je L_error_fvar_undefined
 21415 0000F2CD 48B8-                   	mov rax, sob_void
 21415 0000F2CF [0000000000000000] 
 21416                                  
 21417 0000F2D7 488B0425[E5160000]      	mov rax, qword [free_var_137]	; free var char-ci=?
 21418 0000F2DF 803805                  	cmp byte [rax], T_undefined
 21419 0000F2E2 0F8413630000            	je L_error_fvar_undefined
 21420 0000F2E8 50                      	push rax
 21421 0000F2E9 6A01                    	push 1	; arg count
 21422 0000F2EB 488B4520                	mov rax, PARAM(0)	; param make-string=?
 21423 0000F2EF 803804                  	cmp byte [rax], T_closure
 21424 0000F2F2 0F8587630000            	jne L_error_non_closure
 21425 0000F2F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21426 0000F2FB FF5009                  	call SOB_CLOSURE_CODE(rax)
 21427 0000F2FE 48890425[D3170000]      	mov qword [free_var_151], rax	; free var string-ci=?
 21428 0000F306 803805                  	cmp byte [rax], T_undefined
 21429 0000F309 0F84EC620000            	je L_error_fvar_undefined
 21430 0000F30F 48B8-                   	mov rax, sob_void
 21430 0000F311 [0000000000000000] 
 21431 0000F319 C9                      	leave
 21432 0000F31A C21800                  	ret AND_KILL_FRAME(1)
 21433                                  .L_lambda_simple_end_05a3:	; new closure is in rax
 21434 0000F31D 803804                  	cmp byte [rax], T_closure
 21435 0000F320 0F8559630000            	jne L_error_non_closure
 21436 0000F326 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21437 0000F329 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21438                                  
 21439 0000F32C 4889C7                  	mov rdi, rax
 21440 0000F32F E806650000              	call print_sexpr_if_not_void
 21441                                  
 21442 0000F334 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21443 0000F339 E8EA630000              	call malloc
 21444 0000F33E 50                      	push rax
 21445 0000F33F BF00000000              	mov rdi, 8 * 0	; new rib
 21446 0000F344 E8DF630000              	call malloc
 21447 0000F349 50                      	push rax
 21448 0000F34A BF08000000              	mov rdi, 8 * 1	; extended env
 21449 0000F34F E8D4630000              	call malloc
 21450 0000F354 488B7D10                	mov rdi, ENV
 21451 0000F358 BE00000000              	mov rsi, 0
 21452 0000F35D BA01000000              	mov rdx, 1
 21453                                  .L_lambda_simple_env_loop_05a4:	; ext_env[i + 1] <-- env[i]
 21454 0000F362 4883FE00                	cmp rsi, 0
 21455 0000F366 7410                    	je .L_lambda_simple_env_end_05a4
 21456 0000F368 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21457 0000F36C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21458 0000F370 48FFC6                  	inc rsi
 21459 0000F373 48FFC2                  	inc rdx
 21460 0000F376 EBEA                    	jmp .L_lambda_simple_env_loop_05a4
 21461                                  .L_lambda_simple_env_end_05a4:
 21462 0000F378 5B                      	pop rbx
 21463 0000F379 BE00000000              	mov rsi, 0
 21464                                  .L_lambda_simple_params_loop_05a4:	; copy params
 21465 0000F37E 4883FE00                	cmp rsi, 0
 21466 0000F382 740E                    	je .L_lambda_simple_params_end_05a4
 21467 0000F384 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21468 0000F389 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21469 0000F38D 48FFC6                  	inc rsi
 21470 0000F390 EBEC                    	jmp .L_lambda_simple_params_loop_05a4
 21471                                  .L_lambda_simple_params_end_05a4:
 21472 0000F392 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21473 0000F395 4889C3                  	mov rbx, rax
 21474 0000F398 58                      	pop rax
 21475 0000F399 C60004                  	mov byte [rax], T_closure
 21476 0000F39C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21477 0000F3A0 48C74009[ADF30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05a4
 21478 0000F3A8 E907010000              	jmp .L_lambda_simple_end_05a4
 21479                                  .L_lambda_simple_code_05a4:	; lambda-simple body
 21480 0000F3AD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21481 0000F3B3 740B                    	je .L_lambda_simple_arity_check_ok_05a4
 21482 0000F3B5 FF742410                	push qword [rsp + 8 * 2]
 21483 0000F3B9 6A01                    	push 1
 21484 0000F3BB E921630000              	jmp L_error_incorrect_arity_simple
 21485                                  .L_lambda_simple_arity_check_ok_05a4:
 21486 0000F3C0 C8000000                	enter 0, 0
 21487 0000F3C4 488B4520                	mov rax, PARAM(0)	; param s
 21488 0000F3C8 50                      	push rax
 21489 0000F3C9 6A01                    	push 1	; arg count
 21490 0000F3CB 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 21491 0000F3D3 803805                  	cmp byte [rax], T_undefined
 21492 0000F3D6 0F841F620000            	je L_error_fvar_undefined
 21493 0000F3DC 803804                  	cmp byte [rax], T_closure
 21494 0000F3DF 0F859A620000            	jne L_error_non_closure
 21495 0000F3E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21496 0000F3E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21497                                  
 21498 0000F3EB 483D[02000000]          	cmp rax, sob_boolean_false
 21499 0000F3F1 740F                    	je .L_if_else_042f
 21500 0000F3F3 48B8-                   	mov rax, L_constants + 2023
 21500 0000F3F5 [E707000000000000] 
 21501                                  
 21502 0000F3FD E9AE000000              	jmp .L_if_end_042f
 21503                                  
 21504                                  	.L_if_else_042f:
 21505                                  	; preparing a tail-call
 21506 0000F402 488B4520                	mov rax, PARAM(0)	; param s
 21507 0000F406 50                      	push rax
 21508 0000F407 6A01                    	push 1	; arg count
 21509 0000F409 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 21510 0000F411 803805                  	cmp byte [rax], T_undefined
 21511 0000F414 0F84E1610000            	je L_error_fvar_undefined
 21512 0000F41A 803804                  	cmp byte [rax], T_closure
 21513 0000F41D 0F855C620000            	jne L_error_non_closure
 21514 0000F423 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21515 0000F426 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21516 0000F429 50                      	push rax
 21517 0000F42A 6A01                    	push 1	; arg count
 21518 0000F42C 488B0425[06180000]      	mov rax, qword [free_var_154]	; free var length
 21519 0000F434 803805                  	cmp byte [rax], T_undefined
 21520 0000F437 0F84BE610000            	je L_error_fvar_undefined
 21521 0000F43D 803804                  	cmp byte [rax], T_closure
 21522 0000F440 0F8539620000            	jne L_error_non_closure
 21523 0000F446 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21524 0000F449 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21525 0000F44C 50                      	push rax
 21526 0000F44D 48B8-                   	mov rax, L_constants + 2158
 21526 0000F44F [6E08000000000000] 
 21527 0000F457 50                      	push rax
 21528 0000F458 6A02                    	push 2	; arg count
 21529 0000F45A 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 21530 0000F462 803805                  	cmp byte [rax], T_undefined
 21531 0000F465 0F8490610000            	je L_error_fvar_undefined
 21532 0000F46B 803804                  	cmp byte [rax], T_closure
 21533 0000F46E 0F850B620000            	jne L_error_non_closure
 21534 0000F474 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21535                                  
 21536                                  	; recycling the current frame
 21537 0000F477 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21538 0000F47A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21539 0000F47D B906000000              	mov rcx, 2 + 4
 21540 0000F482 488B5D18                	mov rbx, COUNT
 21541 0000F486 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21542 0000F48B 488D55F8                	lea rdx, [rbp - 8 * 1]
 21543                                  .L_tc_recycle_frame_loop_077a:
 21544 0000F48F 4883F900                	cmp rcx, 0
 21545 0000F493 7413                    	je .L_tc_recycle_frame_done_077a
 21546 0000F495 488B32                  	mov rsi, qword [rdx]
 21547 0000F498 488933                  	mov qword [rbx], rsi
 21548 0000F49B 48FFC9                  	dec rcx
 21549 0000F49E 4883EB08                	sub rbx, 8 * 1
 21550 0000F4A2 4883EA08                	sub rdx, 8 * 1
 21551 0000F4A6 EBE7                    	jmp .L_tc_recycle_frame_loop_077a
 21552                                  .L_tc_recycle_frame_done_077a:
 21553 0000F4A8 488D6308                	lea rsp, [rbx + 8 * 1]
 21554 0000F4AC 5D                      	pop rbp	; the proc will restore it!
 21555 0000F4AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21556                                  
 21557                                  	.L_if_end_042f:
 21558 0000F4B0 C9                      	leave
 21559 0000F4B1 C21800                  	ret AND_KILL_FRAME(1)
 21560                                  .L_lambda_simple_end_05a4:	; new closure is in rax
 21561 0000F4B4 48890425[06180000]      	mov qword [free_var_154], rax
 21562 0000F4BC 48B8-                   	mov rax, sob_void
 21562 0000F4BE [0000000000000000] 
 21563                                  
 21564 0000F4C6 4889C7                  	mov rdi, rax
 21565 0000F4C9 E86C630000              	call print_sexpr_if_not_void
 21566                                  
 21567 0000F4CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21568 0000F4D3 E850620000              	call malloc
 21569 0000F4D8 50                      	push rax
 21570 0000F4D9 BF00000000              	mov rdi, 8 * 0	; new rib
 21571 0000F4DE E845620000              	call malloc
 21572 0000F4E3 50                      	push rax
 21573 0000F4E4 BF08000000              	mov rdi, 8 * 1	; extended env
 21574 0000F4E9 E83A620000              	call malloc
 21575 0000F4EE 488B7D10                	mov rdi, ENV
 21576 0000F4F2 BE00000000              	mov rsi, 0
 21577 0000F4F7 BA01000000              	mov rdx, 1
 21578                                  .L_lambda_simple_env_loop_05a5:	; ext_env[i + 1] <-- env[i]
 21579 0000F4FC 4883FE00                	cmp rsi, 0
 21580 0000F500 7410                    	je .L_lambda_simple_env_end_05a5
 21581 0000F502 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21582 0000F506 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21583 0000F50A 48FFC6                  	inc rsi
 21584 0000F50D 48FFC2                  	inc rdx
 21585 0000F510 EBEA                    	jmp .L_lambda_simple_env_loop_05a5
 21586                                  .L_lambda_simple_env_end_05a5:
 21587 0000F512 5B                      	pop rbx
 21588 0000F513 BE00000000              	mov rsi, 0
 21589                                  .L_lambda_simple_params_loop_05a5:	; copy params
 21590 0000F518 4883FE00                	cmp rsi, 0
 21591 0000F51C 740E                    	je .L_lambda_simple_params_end_05a5
 21592 0000F51E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21593 0000F523 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21594 0000F527 48FFC6                  	inc rsi
 21595 0000F52A EBEC                    	jmp .L_lambda_simple_params_loop_05a5
 21596                                  .L_lambda_simple_params_end_05a5:
 21597 0000F52C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21598 0000F52F 4889C3                  	mov rbx, rax
 21599 0000F532 58                      	pop rax
 21600 0000F533 C60004                  	mov byte [rax], T_closure
 21601 0000F536 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21602 0000F53A 48C74009[47F50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05a5
 21603 0000F542 E90D010000              	jmp .L_lambda_simple_end_05a5
 21604                                  .L_lambda_simple_code_05a5:	; lambda-simple body
 21605 0000F547 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21606 0000F54D 740B                    	je .L_lambda_simple_arity_check_ok_05a5
 21607 0000F54F FF742410                	push qword [rsp + 8 * 2]
 21608 0000F553 6A01                    	push 1
 21609 0000F555 E987610000              	jmp L_error_incorrect_arity_simple
 21610                                  .L_lambda_simple_arity_check_ok_05a5:
 21611 0000F55A C8000000                	enter 0, 0
 21612 0000F55E 488B4520                	mov rax, PARAM(0)	; param e
 21613 0000F562 50                      	push rax
 21614 0000F563 6A01                    	push 1	; arg count
 21615 0000F565 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 21616 0000F56D 803805                  	cmp byte [rax], T_undefined
 21617 0000F570 0F8485600000            	je L_error_fvar_undefined
 21618 0000F576 803804                  	cmp byte [rax], T_closure
 21619 0000F579 0F8500610000            	jne L_error_non_closure
 21620 0000F57F FF7001                  	push SOB_CLOSURE_ENV(rax)
 21621 0000F582 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21622 0000F585 483D[02000000]          	cmp rax, sob_boolean_false
 21623 0000F58B 0F85BF000000            	jne .L_or_end_0068
 21624 0000F591 488B4520                	mov rax, PARAM(0)	; param e
 21625 0000F595 50                      	push rax
 21626 0000F596 6A01                    	push 1	; arg count
 21627 0000F598 488B0425[DD0D0000]      	mov rax, qword [free_var_1]	; free var pair?
 21628 0000F5A0 803805                  	cmp byte [rax], T_undefined
 21629 0000F5A3 0F8452600000            	je L_error_fvar_undefined
 21630 0000F5A9 803804                  	cmp byte [rax], T_closure
 21631 0000F5AC 0F85CD600000            	jne L_error_non_closure
 21632 0000F5B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21633 0000F5B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21634                                  
 21635 0000F5B8 483D[02000000]          	cmp rax, sob_boolean_false
 21636 0000F5BE 0F8482000000            	je .L_if_else_0430
 21637                                  	; preparing a tail-call
 21638 0000F5C4 488B4520                	mov rax, PARAM(0)	; param e
 21639 0000F5C8 50                      	push rax
 21640 0000F5C9 6A01                    	push 1	; arg count
 21641 0000F5CB 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 21642 0000F5D3 803805                  	cmp byte [rax], T_undefined
 21643 0000F5D6 0F841F600000            	je L_error_fvar_undefined
 21644 0000F5DC 803804                  	cmp byte [rax], T_closure
 21645 0000F5DF 0F859A600000            	jne L_error_non_closure
 21646 0000F5E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21647 0000F5E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21648 0000F5EB 50                      	push rax
 21649 0000F5EC 6A01                    	push 1	; arg count
 21650 0000F5EE 488B0425[92140000]      	mov rax, qword [free_var_102]	; free var list?
 21651 0000F5F6 803805                  	cmp byte [rax], T_undefined
 21652 0000F5F9 0F84FC5F0000            	je L_error_fvar_undefined
 21653 0000F5FF 803804                  	cmp byte [rax], T_closure
 21654 0000F602 0F8577600000            	jne L_error_non_closure
 21655 0000F608 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21656                                  
 21657                                  	; recycling the current frame
 21658 0000F60B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21659 0000F60E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21660 0000F611 B905000000              	mov rcx, 1 + 4
 21661 0000F616 488B5D18                	mov rbx, COUNT
 21662 0000F61A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 21663 0000F61F 488D55F8                	lea rdx, [rbp - 8 * 1]
 21664                                  .L_tc_recycle_frame_loop_077b:
 21665 0000F623 4883F900                	cmp rcx, 0
 21666 0000F627 7413                    	je .L_tc_recycle_frame_done_077b
 21667 0000F629 488B32                  	mov rsi, qword [rdx]
 21668 0000F62C 488933                  	mov qword [rbx], rsi
 21669 0000F62F 48FFC9                  	dec rcx
 21670 0000F632 4883EB08                	sub rbx, 8 * 1
 21671 0000F636 4883EA08                	sub rdx, 8 * 1
 21672 0000F63A EBE7                    	jmp .L_tc_recycle_frame_loop_077b
 21673                                  .L_tc_recycle_frame_done_077b:
 21674 0000F63C 488D6308                	lea rsp, [rbx + 8 * 1]
 21675 0000F640 5D                      	pop rbp	; the proc will restore it!
 21676 0000F641 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21677                                  
 21678 0000F644 EB0A                    	jmp .L_if_end_0430
 21679                                  
 21680                                  	.L_if_else_0430:
 21681 0000F646 48B8-                   	mov rax, L_constants + 2
 21681 0000F648 [0200000000000000] 
 21682                                  
 21683                                  	.L_if_end_0430:
 21684                                  .L_or_end_0068:
 21685 0000F650 C9                      	leave
 21686 0000F651 C21800                  	ret AND_KILL_FRAME(1)
 21687                                  .L_lambda_simple_end_05a5:	; new closure is in rax
 21688 0000F654 48890425[92140000]      	mov qword [free_var_102], rax
 21689 0000F65C 48B8-                   	mov rax, sob_void
 21689 0000F65E [0000000000000000] 
 21690                                  
 21691 0000F666 4889C7                  	mov rdi, rax
 21692 0000F669 E8CC610000              	call print_sexpr_if_not_void
 21693                                  
 21694 0000F66E 488B0425[95110000]      	mov rax, qword [free_var_57]	; free var make-vector
 21695 0000F676 803805                  	cmp byte [rax], T_undefined
 21696 0000F679 0F847C5F0000            	je L_error_fvar_undefined
 21697 0000F67F 50                      	push rax
 21698 0000F680 6A01                    	push 1	; arg count
 21699 0000F682 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21700 0000F687 E89C600000              	call malloc
 21701 0000F68C 50                      	push rax
 21702 0000F68D BF00000000              	mov rdi, 8 * 0	; new rib
 21703 0000F692 E891600000              	call malloc
 21704 0000F697 50                      	push rax
 21705 0000F698 BF08000000              	mov rdi, 8 * 1	; extended env
 21706 0000F69D E886600000              	call malloc
 21707 0000F6A2 488B7D10                	mov rdi, ENV
 21708 0000F6A6 BE00000000              	mov rsi, 0
 21709 0000F6AB BA01000000              	mov rdx, 1
 21710                                  .L_lambda_simple_env_loop_05a6:	; ext_env[i + 1] <-- env[i]
 21711 0000F6B0 4883FE00                	cmp rsi, 0
 21712 0000F6B4 7410                    	je .L_lambda_simple_env_end_05a6
 21713 0000F6B6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21714 0000F6BA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21715 0000F6BE 48FFC6                  	inc rsi
 21716 0000F6C1 48FFC2                  	inc rdx
 21717 0000F6C4 EBEA                    	jmp .L_lambda_simple_env_loop_05a6
 21718                                  .L_lambda_simple_env_end_05a6:
 21719 0000F6C6 5B                      	pop rbx
 21720 0000F6C7 BE00000000              	mov rsi, 0
 21721                                  .L_lambda_simple_params_loop_05a6:	; copy params
 21722 0000F6CC 4883FE00                	cmp rsi, 0
 21723 0000F6D0 740E                    	je .L_lambda_simple_params_end_05a6
 21724 0000F6D2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21725 0000F6D7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21726 0000F6DB 48FFC6                  	inc rsi
 21727 0000F6DE EBEC                    	jmp .L_lambda_simple_params_loop_05a6
 21728                                  .L_lambda_simple_params_end_05a6:
 21729 0000F6E0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21730 0000F6E3 4889C3                  	mov rbx, rax
 21731 0000F6E6 58                      	pop rax
 21732 0000F6E7 C60004                  	mov byte [rax], T_closure
 21733 0000F6EA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21734 0000F6EE 48C74009[FBF60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05a6
 21735 0000F6F6 E9D9030000              	jmp .L_lambda_simple_end_05a6
 21736                                  .L_lambda_simple_code_05a6:	; lambda-simple body
 21737 0000F6FB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21738 0000F701 740B                    	je .L_lambda_simple_arity_check_ok_05a6
 21739 0000F703 FF742410                	push qword [rsp + 8 * 2]
 21740 0000F707 6A01                    	push 1
 21741 0000F709 E9D35F0000              	jmp L_error_incorrect_arity_simple
 21742                                  .L_lambda_simple_arity_check_ok_05a6:
 21743 0000F70E C8000000                	enter 0, 0
 21744 0000F712 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21745 0000F717 E80C600000              	call malloc
 21746 0000F71C 50                      	push rax
 21747 0000F71D BF08000000              	mov rdi, 8 * 1	; new rib
 21748 0000F722 E801600000              	call malloc
 21749 0000F727 50                      	push rax
 21750 0000F728 BF10000000              	mov rdi, 8 * 2	; extended env
 21751 0000F72D E8F65F0000              	call malloc
 21752 0000F732 488B7D10                	mov rdi, ENV
 21753 0000F736 BE00000000              	mov rsi, 0
 21754 0000F73B BA01000000              	mov rdx, 1
 21755                                  .L_lambda_opt_env_loop_00c4:	; ext_env[i + 1] <-- env[i]
 21756 0000F740 4883FE01                	cmp rsi, 1
 21757 0000F744 7410                    	je .L_lambda_opt_env_end_00c4
 21758 0000F746 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21759 0000F74A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21760 0000F74E 48FFC6                  	inc rsi
 21761 0000F751 48FFC2                  	inc rdx
 21762 0000F754 EBEA                    	jmp .L_lambda_opt_env_loop_00c4
 21763                                  .L_lambda_opt_env_end_00c4:
 21764 0000F756 5B                      	pop rbx
 21765 0000F757 BE00000000              	mov rsi, 0
 21766                                  .L_lambda_opt_params_loop_00c4:	; copy params
 21767 0000F75C 4883FE01                	cmp rsi, 1
 21768 0000F760 740E                    	je .L_lambda_opt_params_end_00c4
 21769 0000F762 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21770 0000F767 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21771 0000F76B 48FFC6                  	inc rsi
 21772 0000F76E EBEC                    	jmp .L_lambda_opt_params_loop_00c4
 21773                                  .L_lambda_opt_params_end_00c4:
 21774 0000F770 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21775 0000F773 4889C3                  	mov rbx, rax
 21776 0000F776 58                      	pop rax
 21777 0000F777 C60004                  	mov byte [rax], T_closure
 21778 0000F77A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21779 0000F77E 48C74009[8BF70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00c4
 21780 0000F786 E945030000              	jmp .L_lambda_opt_end_00c4
 21781                                  .L_lambda_opt_code_00c4:	; lambda-simple body
 21782 0000F78B 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 21783 0000F791 740D                    	je .L_lambda_opt_arity_check_exact_00c4 ;	 if equal, go to exact arity
 21784 0000F793 7F42                    	jg .L_lambda_opt_arity_check_more_00c4 ;	 if greater than, go to arity more
 21785 0000F795 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 21786 0000F799 6A01                     	push 1
 21787 0000F79B E9555F0000              	jmp L_error_incorrect_arity_opt
 21788                                  	.L_lambda_opt_arity_check_exact_00c4:
 21789 0000F7A0 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 21790 0000F7A5 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 21791 0000F7AA 4883EC08                	sub rsp, 8
 21792 0000F7AE 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 21793                                  	.L_lambda_opt_exact_shifting_loop_00c4:
 21794 0000F7B2 488B5108                	mov rdx, [rcx + 8]
 21795 0000F7B6 488911                  	mov [rcx], rdx
 21796 0000F7B9 4883C108                	add rcx, 8
 21797 0000F7BD 4839CB                  	cmp rbx, rcx
 21798 0000F7C0 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00c4
 21799                                  	.L_lambda_opt_exact_shifting_loop_end_00c4:
 21800 0000F7C2 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 21801 0000F7C9 4883C001                	add rax, 1 ; 	arg count += 1
 21802 0000F7CD 4889442410              	mov qword [rsp + 8 * 2], rax
 21803 0000F7D2 E987000000              	jmp .L_lambda_opt_stack_adjusted_00c4
 21804                                  	.L_lambda_opt_arity_check_more_00c4:
 21805 0000F7D7 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 21805 0000F7D9 [0100000000000000] 
 21806 0000F7E1 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 21807 0000F7E7 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00c4
 21808                                  	.L_lambda_opt_stack_shrink_loop_00c4:
 21809 0000F7E9 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 21810 0000F7EE E8355F0000              	call malloc ;	 allocated memory for the optional scheme list
 21811 0000F7F3 C60021                  	mov byte[rax], T_pair ;	 set type pair
 21812 0000F7F6 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 21813 0000F7FA 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 21814 0000F7FD 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 21815 0000F802 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 21816 0000F807 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 21817 0000F80B 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 21818                                  	.L_lambda_opt_more_shifting_loop_00c4:
 21819 0000F810 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 21820 0000F813 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 21821 0000F817 4883EB08                	sub rbx, 8 
 21822 0000F81B 4839DC                  	cmp rsp, rbx
 21823 0000F81E 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00c4
 21824                                  	.L_lambda_opt_more_shifting_loop_end_00c4:
 21825 0000F820 4883C408                	add rsp, 8 ;	 update rsp
 21826 0000F824 488B5C2410              	mov rbx, [rsp + 8 * 2]
 21827 0000F829 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 21828 0000F82D 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 21829 0000F832 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21830 0000F838 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00c4
 21831                                  	.L_lambda_opt_stack_shrink_loop_exit_00c4:
 21832 0000F83A 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 21833 0000F83F 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 21834 0000F844 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 21835 0000F849 E8DA5E0000              	call malloc ;	 allocated memory for the optional scheme list
 21836 0000F84E C60021                  	mov byte[rax], T_pair ;	 set type pair
 21837 0000F851 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 21838 0000F855 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 21839 0000F859 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 21840                                  	.L_lambda_opt_stack_adjusted_00c4:
 21841 0000F85E C8000000                	enter 0, 0
 21842                                  	; preparing a tail-call
 21843 0000F862 488B4528                	mov rax, PARAM(1)	; param xs
 21844 0000F866 50                      	push rax
 21845 0000F867 6A01                    	push 1	; arg count
 21846 0000F869 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 21847 0000F871 803805                  	cmp byte [rax], T_undefined
 21848 0000F874 0F84815D0000            	je L_error_fvar_undefined
 21849 0000F87A 803804                  	cmp byte [rax], T_closure
 21850 0000F87D 0F85FC5D0000            	jne L_error_non_closure
 21851 0000F883 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21852 0000F886 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21853                                  
 21854 0000F889 483D[02000000]          	cmp rax, sob_boolean_false
 21855 0000F88F 740F                    	je .L_if_else_0431
 21856 0000F891 48B8-                   	mov rax, L_constants + 0
 21856 0000F893 [0000000000000000] 
 21857                                  
 21858 0000F89B E9EE000000              	jmp .L_if_end_0431
 21859                                  
 21860                                  	.L_if_else_0431:
 21861 0000F8A0 488B4528                	mov rax, PARAM(1)	; param xs
 21862 0000F8A4 50                      	push rax
 21863 0000F8A5 6A01                    	push 1	; arg count
 21864 0000F8A7 488B0425[DD0D0000]      	mov rax, qword [free_var_1]	; free var pair?
 21865 0000F8AF 803805                  	cmp byte [rax], T_undefined
 21866 0000F8B2 0F84435D0000            	je L_error_fvar_undefined
 21867 0000F8B8 803804                  	cmp byte [rax], T_closure
 21868 0000F8BB 0F85BE5D0000            	jne L_error_non_closure
 21869 0000F8C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21870 0000F8C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21871                                  
 21872 0000F8C7 483D[02000000]          	cmp rax, sob_boolean_false
 21873 0000F8CD 744C                    	je .L_if_else_0433
 21874 0000F8CF 488B4528                	mov rax, PARAM(1)	; param xs
 21875 0000F8D3 50                      	push rax
 21876 0000F8D4 6A01                    	push 1	; arg count
 21877 0000F8D6 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 21878 0000F8DE 803805                  	cmp byte [rax], T_undefined
 21879 0000F8E1 0F84145D0000            	je L_error_fvar_undefined
 21880 0000F8E7 803804                  	cmp byte [rax], T_closure
 21881 0000F8EA 0F858F5D0000            	jne L_error_non_closure
 21882 0000F8F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21883 0000F8F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21884 0000F8F6 50                      	push rax
 21885 0000F8F7 6A01                    	push 1	; arg count
 21886 0000F8F9 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 21887 0000F901 803805                  	cmp byte [rax], T_undefined
 21888 0000F904 0F84F15C0000            	je L_error_fvar_undefined
 21889 0000F90A 803804                  	cmp byte [rax], T_closure
 21890 0000F90D 0F856C5D0000            	jne L_error_non_closure
 21891 0000F913 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21892 0000F916 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21893                                  
 21894 0000F919 EB0A                    	jmp .L_if_end_0433
 21895                                  
 21896                                  	.L_if_else_0433:
 21897 0000F91B 48B8-                   	mov rax, L_constants + 2
 21897 0000F91D [0200000000000000] 
 21898                                  
 21899                                  	.L_if_end_0433:
 21900                                  
 21901 0000F925 483D[02000000]          	cmp rax, sob_boolean_false
 21902 0000F92B 7429                    	je .L_if_else_0432
 21903 0000F92D 488B4528                	mov rax, PARAM(1)	; param xs
 21904 0000F931 50                      	push rax
 21905 0000F932 6A01                    	push 1	; arg count
 21906 0000F934 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 21907 0000F93C 803805                  	cmp byte [rax], T_undefined
 21908 0000F93F 0F84B65C0000            	je L_error_fvar_undefined
 21909 0000F945 803804                  	cmp byte [rax], T_closure
 21910 0000F948 0F85315D0000            	jne L_error_non_closure
 21911 0000F94E FF7001                  	push SOB_CLOSURE_ENV(rax)
 21912 0000F951 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21913                                  
 21914 0000F954 EB38                    	jmp .L_if_end_0432
 21915                                  
 21916                                  	.L_if_else_0432:
 21917 0000F956 48B8-                   	mov rax, L_constants + 2939
 21917 0000F958 [7B0B000000000000] 
 21918 0000F960 50                      	push rax
 21919 0000F961 48B8-                   	mov rax, L_constants + 2930
 21919 0000F963 [720B000000000000] 
 21920 0000F96B 50                      	push rax
 21921 0000F96C 6A02                    	push 2	; arg count
 21922 0000F96E 488B0425[96100000]      	mov rax, qword [free_var_42]	; free var error
 21923 0000F976 803805                  	cmp byte [rax], T_undefined
 21924 0000F979 0F847C5C0000            	je L_error_fvar_undefined
 21925 0000F97F 803804                  	cmp byte [rax], T_closure
 21926 0000F982 0F85F75C0000            	jne L_error_non_closure
 21927 0000F988 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21928 0000F98B FF5009                  	call SOB_CLOSURE_CODE(rax)
 21929                                  
 21930                                  	.L_if_end_0432:
 21931                                  
 21932                                  	.L_if_end_0431:
 21933 0000F98E 50                      	push rax
 21934 0000F98F 6A01                    	push 1	; arg count
 21935 0000F991 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21936 0000F996 E88D5D0000              	call malloc
 21937 0000F99B 50                      	push rax
 21938 0000F99C BF10000000              	mov rdi, 8 * 2	; new rib
 21939 0000F9A1 E8825D0000              	call malloc
 21940 0000F9A6 50                      	push rax
 21941 0000F9A7 BF18000000              	mov rdi, 8 * 3	; extended env
 21942 0000F9AC E8775D0000              	call malloc
 21943 0000F9B1 488B7D10                	mov rdi, ENV
 21944 0000F9B5 BE00000000              	mov rsi, 0
 21945 0000F9BA BA01000000              	mov rdx, 1
 21946                                  .L_lambda_simple_env_loop_05a7:	; ext_env[i + 1] <-- env[i]
 21947 0000F9BF 4883FE02                	cmp rsi, 2
 21948 0000F9C3 7410                    	je .L_lambda_simple_env_end_05a7
 21949 0000F9C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21950 0000F9C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21951 0000F9CD 48FFC6                  	inc rsi
 21952 0000F9D0 48FFC2                  	inc rdx
 21953 0000F9D3 EBEA                    	jmp .L_lambda_simple_env_loop_05a7
 21954                                  .L_lambda_simple_env_end_05a7:
 21955 0000F9D5 5B                      	pop rbx
 21956 0000F9D6 BE00000000              	mov rsi, 0
 21957                                  .L_lambda_simple_params_loop_05a7:	; copy params
 21958 0000F9DB 4883FE02                	cmp rsi, 2
 21959 0000F9DF 740E                    	je .L_lambda_simple_params_end_05a7
 21960 0000F9E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21961 0000F9E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21962 0000F9EA 48FFC6                  	inc rsi
 21963 0000F9ED EBEC                    	jmp .L_lambda_simple_params_loop_05a7
 21964                                  .L_lambda_simple_params_end_05a7:
 21965 0000F9EF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21966 0000F9F2 4889C3                  	mov rbx, rax
 21967 0000F9F5 58                      	pop rax
 21968 0000F9F6 C60004                  	mov byte [rax], T_closure
 21969 0000F9F9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21970 0000F9FD 48C74009[0AFA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05a7
 21971 0000FA05 E97D000000              	jmp .L_lambda_simple_end_05a7
 21972                                  .L_lambda_simple_code_05a7:	; lambda-simple body
 21973 0000FA0A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21974 0000FA10 740B                    	je .L_lambda_simple_arity_check_ok_05a7
 21975 0000FA12 FF742410                	push qword [rsp + 8 * 2]
 21976 0000FA16 6A01                    	push 1
 21977 0000FA18 E9C45C0000              	jmp L_error_incorrect_arity_simple
 21978                                  .L_lambda_simple_arity_check_ok_05a7:
 21979 0000FA1D C8000000                	enter 0, 0
 21980                                  	; preparing a tail-call
 21981 0000FA21 488B4520                	mov rax, PARAM(0)	; param x
 21982 0000FA25 50                      	push rax
 21983 0000FA26 488B4510                	mov rax, ENV
 21984 0000FA2A 488B00                  	mov rax, qword [rax + 8 * 0]
 21985 0000FA2D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 21986 0000FA30 50                      	push rax
 21987 0000FA31 6A02                    	push 2	; arg count
 21988 0000FA33 488B4510                	mov rax, ENV
 21989 0000FA37 488B4008                	mov rax, qword [rax + 8 * 1]
 21990 0000FA3B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
 21991 0000FA3E 803804                  	cmp byte [rax], T_closure
 21992 0000FA41 0F85385C0000            	jne L_error_non_closure
 21993 0000FA47 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21994                                  
 21995                                  	; recycling the current frame
 21996 0000FA4A FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 21997 0000FA4D FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 21998 0000FA50 B906000000              	mov rcx, 2 + 4
 21999 0000FA55 488B5D18                	mov rbx, COUNT
 22000 0000FA59 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22001 0000FA5E 488D55F8                	lea rdx, [rbp - 8 * 1]
 22002                                  .L_tc_recycle_frame_loop_077c:
 22003 0000FA62 4883F900                	cmp rcx, 0
 22004 0000FA66 7413                    	je .L_tc_recycle_frame_done_077c
 22005 0000FA68 488B32                  	mov rsi, qword [rdx]
 22006 0000FA6B 488933                  	mov qword [rbx], rsi
 22007 0000FA6E 48FFC9                  	dec rcx
 22008 0000FA71 4883EB08                	sub rbx, 8 * 1
 22009 0000FA75 4883EA08                	sub rdx, 8 * 1
 22010 0000FA79 EBE7                    	jmp .L_tc_recycle_frame_loop_077c
 22011                                  .L_tc_recycle_frame_done_077c:
 22012 0000FA7B 488D6308                	lea rsp, [rbx + 8 * 1]
 22013 0000FA7F 5D                      	pop rbp	; the proc will restore it!
 22014 0000FA80 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22015 0000FA83 C9                      	leave
 22016 0000FA84 C21800                  	ret AND_KILL_FRAME(1)
 22017                                  .L_lambda_simple_end_05a7:	; new closure is in rax
 22018 0000FA87 803804                  	cmp byte [rax], T_closure
 22019 0000FA8A 0F85EF5B0000            	jne L_error_non_closure
 22020 0000FA90 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22021                                  
 22022                                  	; recycling the current frame
 22023 0000FA93 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22024 0000FA96 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22025 0000FA99 B905000000              	mov rcx, 1 + 4
 22026 0000FA9E 488B5D18                	mov rbx, COUNT
 22027 0000FAA2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22028 0000FAA7 488D55F8                	lea rdx, [rbp - 8 * 1]
 22029                                  .L_tc_recycle_frame_loop_077d:
 22030 0000FAAB 4883F900                	cmp rcx, 0
 22031 0000FAAF 7413                    	je .L_tc_recycle_frame_done_077d
 22032 0000FAB1 488B32                  	mov rsi, qword [rdx]
 22033 0000FAB4 488933                  	mov qword [rbx], rsi
 22034 0000FAB7 48FFC9                  	dec rcx
 22035 0000FABA 4883EB08                	sub rbx, 8 * 1
 22036 0000FABE 4883EA08                	sub rdx, 8 * 1
 22037 0000FAC2 EBE7                    	jmp .L_tc_recycle_frame_loop_077d
 22038                                  .L_tc_recycle_frame_done_077d:
 22039 0000FAC4 488D6308                	lea rsp, [rbx + 8 * 1]
 22040 0000FAC8 5D                      	pop rbp	; the proc will restore it!
 22041 0000FAC9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22042 0000FACC C9                      	leave
 22043 0000FACD C22000                  	ret AND_KILL_FRAME(2)
 22044                                  .L_lambda_opt_end_00c4:	; new closure is in rax
 22045 0000FAD0 C9                      	leave
 22046 0000FAD1 C21800                  	ret AND_KILL_FRAME(1)
 22047                                  .L_lambda_simple_end_05a6:	; new closure is in rax
 22048 0000FAD4 803804                  	cmp byte [rax], T_closure
 22049 0000FAD7 0F85A25B0000            	jne L_error_non_closure
 22050 0000FADD FF7001                  	push SOB_CLOSURE_ENV(rax)
 22051 0000FAE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22052 0000FAE3 48890425[95110000]      	mov qword [free_var_57], rax
 22053 0000FAEB 48B8-                   	mov rax, sob_void
 22053 0000FAED [0000000000000000] 
 22054                                  
 22055 0000FAF5 4889C7                  	mov rdi, rax
 22056 0000FAF8 E83D5D0000              	call print_sexpr_if_not_void
 22057                                  
 22058 0000FAFD 488B0425[A6110000]      	mov rax, qword [free_var_58]	; free var make-string
 22059 0000FB05 803805                  	cmp byte [rax], T_undefined
 22060 0000FB08 0F84ED5A0000            	je L_error_fvar_undefined
 22061 0000FB0E 50                      	push rax
 22062 0000FB0F 6A01                    	push 1	; arg count
 22063 0000FB11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22064 0000FB16 E80D5C0000              	call malloc
 22065 0000FB1B 50                      	push rax
 22066 0000FB1C BF00000000              	mov rdi, 8 * 0	; new rib
 22067 0000FB21 E8025C0000              	call malloc
 22068 0000FB26 50                      	push rax
 22069 0000FB27 BF08000000              	mov rdi, 8 * 1	; extended env
 22070 0000FB2C E8F75B0000              	call malloc
 22071 0000FB31 488B7D10                	mov rdi, ENV
 22072 0000FB35 BE00000000              	mov rsi, 0
 22073 0000FB3A BA01000000              	mov rdx, 1
 22074                                  .L_lambda_simple_env_loop_05a8:	; ext_env[i + 1] <-- env[i]
 22075 0000FB3F 4883FE00                	cmp rsi, 0
 22076 0000FB43 7410                    	je .L_lambda_simple_env_end_05a8
 22077 0000FB45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22078 0000FB49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22079 0000FB4D 48FFC6                  	inc rsi
 22080 0000FB50 48FFC2                  	inc rdx
 22081 0000FB53 EBEA                    	jmp .L_lambda_simple_env_loop_05a8
 22082                                  .L_lambda_simple_env_end_05a8:
 22083 0000FB55 5B                      	pop rbx
 22084 0000FB56 BE00000000              	mov rsi, 0
 22085                                  .L_lambda_simple_params_loop_05a8:	; copy params
 22086 0000FB5B 4883FE00                	cmp rsi, 0
 22087 0000FB5F 740E                    	je .L_lambda_simple_params_end_05a8
 22088 0000FB61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22089 0000FB66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22090 0000FB6A 48FFC6                  	inc rsi
 22091 0000FB6D EBEC                    	jmp .L_lambda_simple_params_loop_05a8
 22092                                  .L_lambda_simple_params_end_05a8:
 22093 0000FB6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22094 0000FB72 4889C3                  	mov rbx, rax
 22095 0000FB75 58                      	pop rax
 22096 0000FB76 C60004                  	mov byte [rax], T_closure
 22097 0000FB79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22098 0000FB7D 48C74009[8AFB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05a8
 22099 0000FB85 E9D9030000              	jmp .L_lambda_simple_end_05a8
 22100                                  .L_lambda_simple_code_05a8:	; lambda-simple body
 22101 0000FB8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22102 0000FB90 740B                    	je .L_lambda_simple_arity_check_ok_05a8
 22103 0000FB92 FF742410                	push qword [rsp + 8 * 2]
 22104 0000FB96 6A01                    	push 1
 22105 0000FB98 E9445B0000              	jmp L_error_incorrect_arity_simple
 22106                                  .L_lambda_simple_arity_check_ok_05a8:
 22107 0000FB9D C8000000                	enter 0, 0
 22108 0000FBA1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22109 0000FBA6 E87D5B0000              	call malloc
 22110 0000FBAB 50                      	push rax
 22111 0000FBAC BF08000000              	mov rdi, 8 * 1	; new rib
 22112 0000FBB1 E8725B0000              	call malloc
 22113 0000FBB6 50                      	push rax
 22114 0000FBB7 BF10000000              	mov rdi, 8 * 2	; extended env
 22115 0000FBBC E8675B0000              	call malloc
 22116 0000FBC1 488B7D10                	mov rdi, ENV
 22117 0000FBC5 BE00000000              	mov rsi, 0
 22118 0000FBCA BA01000000              	mov rdx, 1
 22119                                  .L_lambda_opt_env_loop_00c5:	; ext_env[i + 1] <-- env[i]
 22120 0000FBCF 4883FE01                	cmp rsi, 1
 22121 0000FBD3 7410                    	je .L_lambda_opt_env_end_00c5
 22122 0000FBD5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22123 0000FBD9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22124 0000FBDD 48FFC6                  	inc rsi
 22125 0000FBE0 48FFC2                  	inc rdx
 22126 0000FBE3 EBEA                    	jmp .L_lambda_opt_env_loop_00c5
 22127                                  .L_lambda_opt_env_end_00c5:
 22128 0000FBE5 5B                      	pop rbx
 22129 0000FBE6 BE00000000              	mov rsi, 0
 22130                                  .L_lambda_opt_params_loop_00c5:	; copy params
 22131 0000FBEB 4883FE01                	cmp rsi, 1
 22132 0000FBEF 740E                    	je .L_lambda_opt_params_end_00c5
 22133 0000FBF1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22134 0000FBF6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22135 0000FBFA 48FFC6                  	inc rsi
 22136 0000FBFD EBEC                    	jmp .L_lambda_opt_params_loop_00c5
 22137                                  .L_lambda_opt_params_end_00c5:
 22138 0000FBFF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22139 0000FC02 4889C3                  	mov rbx, rax
 22140 0000FC05 58                      	pop rax
 22141 0000FC06 C60004                  	mov byte [rax], T_closure
 22142 0000FC09 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22143 0000FC0D 48C74009[1AFC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00c5
 22144 0000FC15 E945030000              	jmp .L_lambda_opt_end_00c5
 22145                                  .L_lambda_opt_code_00c5:	; lambda-simple body
 22146 0000FC1A 48837C241001            	cmp qword [rsp + 8 * 2], 1 ;	 check num of args
 22147 0000FC20 740D                    	je .L_lambda_opt_arity_check_exact_00c5 ;	 if equal, go to exact arity
 22148 0000FC22 7F42                    	jg .L_lambda_opt_arity_check_more_00c5 ;	 if greater than, go to arity more
 22149 0000FC24 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 22150 0000FC28 6A01                     	push 1
 22151 0000FC2A E9C65A0000              	jmp L_error_incorrect_arity_opt
 22152                                  	.L_lambda_opt_arity_check_exact_00c5:
 22153 0000FC2F 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 22154 0000FC34 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 22155 0000FC39 4883EC08                	sub rsp, 8
 22156 0000FC3D 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 22157                                  	.L_lambda_opt_exact_shifting_loop_00c5:
 22158 0000FC41 488B5108                	mov rdx, [rcx + 8]
 22159 0000FC45 488911                  	mov [rcx], rdx
 22160 0000FC48 4883C108                	add rcx, 8
 22161 0000FC4C 4839CB                  	cmp rbx, rcx
 22162 0000FC4F 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00c5
 22163                                  	.L_lambda_opt_exact_shifting_loop_end_00c5:
 22164 0000FC51 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 22165 0000FC58 4883C001                	add rax, 1 ; 	arg count += 1
 22166 0000FC5C 4889442410              	mov qword [rsp + 8 * 2], rax
 22167 0000FC61 E987000000              	jmp .L_lambda_opt_stack_adjusted_00c5
 22168                                  	.L_lambda_opt_arity_check_more_00c5:
 22169 0000FC66 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 22169 0000FC68 [0100000000000000] 
 22170 0000FC70 48837C241002            	cmp qword [rsp + 8 * 2], 2;	 compare count to params
 22171 0000FC76 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00c5
 22172                                  	.L_lambda_opt_stack_shrink_loop_00c5:
 22173 0000FC78 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 22174 0000FC7D E8A65A0000              	call malloc ;	 allocated memory for the optional scheme list
 22175 0000FC82 C60021                  	mov byte[rax], T_pair ;	 set type pair
 22176 0000FC85 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 22177 0000FC89 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 22178 0000FC8C 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 22179 0000FC91 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 22180 0000FC96 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 22181 0000FC9A 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 22182                                  	.L_lambda_opt_more_shifting_loop_00c5:
 22183 0000FC9F 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 22184 0000FCA2 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 22185 0000FCA6 4883EB08                	sub rbx, 8 
 22186 0000FCAA 4839DC                  	cmp rsp, rbx
 22187 0000FCAD 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00c5
 22188                                  	.L_lambda_opt_more_shifting_loop_end_00c5:
 22189 0000FCAF 4883C408                	add rsp, 8 ;	 update rsp
 22190 0000FCB3 488B5C2410              	mov rbx, [rsp + 8 * 2]
 22191 0000FCB8 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 22192 0000FCBC 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 22193 0000FCC1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22194 0000FCC7 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00c5
 22195                                  	.L_lambda_opt_stack_shrink_loop_exit_00c5:
 22196 0000FCC9 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 22197 0000FCCE 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 22198 0000FCD3 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 22199 0000FCD8 E84B5A0000              	call malloc ;	 allocated memory for the optional scheme list
 22200 0000FCDD C60021                  	mov byte[rax], T_pair ;	 set type pair
 22201 0000FCE0 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 22202 0000FCE4 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 22203 0000FCE8 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 22204                                  	.L_lambda_opt_stack_adjusted_00c5:
 22205 0000FCED C8000000                	enter 0, 0
 22206                                  	; preparing a tail-call
 22207 0000FCF1 488B4528                	mov rax, PARAM(1)	; param chs
 22208 0000FCF5 50                      	push rax
 22209 0000FCF6 6A01                    	push 1	; arg count
 22210 0000FCF8 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 22211 0000FD00 803805                  	cmp byte [rax], T_undefined
 22212 0000FD03 0F84F2580000            	je L_error_fvar_undefined
 22213 0000FD09 803804                  	cmp byte [rax], T_closure
 22214 0000FD0C 0F856D590000            	jne L_error_non_closure
 22215 0000FD12 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22216 0000FD15 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22217                                  
 22218 0000FD18 483D[02000000]          	cmp rax, sob_boolean_false
 22219 0000FD1E 740F                    	je .L_if_else_0434
 22220 0000FD20 48B8-                   	mov rax, L_constants + 4
 22220 0000FD22 [0400000000000000] 
 22221                                  
 22222 0000FD2A E9EE000000              	jmp .L_if_end_0434
 22223                                  
 22224                                  	.L_if_else_0434:
 22225 0000FD2F 488B4528                	mov rax, PARAM(1)	; param chs
 22226 0000FD33 50                      	push rax
 22227 0000FD34 6A01                    	push 1	; arg count
 22228 0000FD36 488B0425[DD0D0000]      	mov rax, qword [free_var_1]	; free var pair?
 22229 0000FD3E 803805                  	cmp byte [rax], T_undefined
 22230 0000FD41 0F84B4580000            	je L_error_fvar_undefined
 22231 0000FD47 803804                  	cmp byte [rax], T_closure
 22232 0000FD4A 0F852F590000            	jne L_error_non_closure
 22233 0000FD50 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22234 0000FD53 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22235                                  
 22236 0000FD56 483D[02000000]          	cmp rax, sob_boolean_false
 22237 0000FD5C 744C                    	je .L_if_else_0436
 22238 0000FD5E 488B4528                	mov rax, PARAM(1)	; param chs
 22239 0000FD62 50                      	push rax
 22240 0000FD63 6A01                    	push 1	; arg count
 22241 0000FD65 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 22242 0000FD6D 803805                  	cmp byte [rax], T_undefined
 22243 0000FD70 0F8485580000            	je L_error_fvar_undefined
 22244 0000FD76 803804                  	cmp byte [rax], T_closure
 22245 0000FD79 0F8500590000            	jne L_error_non_closure
 22246 0000FD7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 22247 0000FD82 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22248 0000FD85 50                      	push rax
 22249 0000FD86 6A01                    	push 1	; arg count
 22250 0000FD88 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 22251 0000FD90 803805                  	cmp byte [rax], T_undefined
 22252 0000FD93 0F8462580000            	je L_error_fvar_undefined
 22253 0000FD99 803804                  	cmp byte [rax], T_closure
 22254 0000FD9C 0F85DD580000            	jne L_error_non_closure
 22255 0000FDA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22256 0000FDA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22257                                  
 22258 0000FDA8 EB0A                    	jmp .L_if_end_0436
 22259                                  
 22260                                  	.L_if_else_0436:
 22261 0000FDAA 48B8-                   	mov rax, L_constants + 2
 22261 0000FDAC [0200000000000000] 
 22262                                  
 22263                                  	.L_if_end_0436:
 22264                                  
 22265 0000FDB4 483D[02000000]          	cmp rax, sob_boolean_false
 22266 0000FDBA 7429                    	je .L_if_else_0435
 22267 0000FDBC 488B4528                	mov rax, PARAM(1)	; param chs
 22268 0000FDC0 50                      	push rax
 22269 0000FDC1 6A01                    	push 1	; arg count
 22270 0000FDC3 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 22271 0000FDCB 803805                  	cmp byte [rax], T_undefined
 22272 0000FDCE 0F8427580000            	je L_error_fvar_undefined
 22273 0000FDD4 803804                  	cmp byte [rax], T_closure
 22274 0000FDD7 0F85A2580000            	jne L_error_non_closure
 22275 0000FDDD FF7001                  	push SOB_CLOSURE_ENV(rax)
 22276 0000FDE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22277                                  
 22278 0000FDE3 EB38                    	jmp .L_if_end_0435
 22279                                  
 22280                                  	.L_if_else_0435:
 22281 0000FDE5 48B8-                   	mov rax, L_constants + 3000
 22281 0000FDE7 [B80B000000000000] 
 22282 0000FDEF 50                      	push rax
 22283 0000FDF0 48B8-                   	mov rax, L_constants + 2991
 22283 0000FDF2 [AF0B000000000000] 
 22284 0000FDFA 50                      	push rax
 22285 0000FDFB 6A02                    	push 2	; arg count
 22286 0000FDFD 488B0425[96100000]      	mov rax, qword [free_var_42]	; free var error
 22287 0000FE05 803805                  	cmp byte [rax], T_undefined
 22288 0000FE08 0F84ED570000            	je L_error_fvar_undefined
 22289 0000FE0E 803804                  	cmp byte [rax], T_closure
 22290 0000FE11 0F8568580000            	jne L_error_non_closure
 22291 0000FE17 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22292 0000FE1A FF5009                  	call SOB_CLOSURE_CODE(rax)
 22293                                  
 22294                                  	.L_if_end_0435:
 22295                                  
 22296                                  	.L_if_end_0434:
 22297 0000FE1D 50                      	push rax
 22298 0000FE1E 6A01                    	push 1	; arg count
 22299 0000FE20 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22300 0000FE25 E8FE580000              	call malloc
 22301 0000FE2A 50                      	push rax
 22302 0000FE2B BF10000000              	mov rdi, 8 * 2	; new rib
 22303 0000FE30 E8F3580000              	call malloc
 22304 0000FE35 50                      	push rax
 22305 0000FE36 BF18000000              	mov rdi, 8 * 3	; extended env
 22306 0000FE3B E8E8580000              	call malloc
 22307 0000FE40 488B7D10                	mov rdi, ENV
 22308 0000FE44 BE00000000              	mov rsi, 0
 22309 0000FE49 BA01000000              	mov rdx, 1
 22310                                  .L_lambda_simple_env_loop_05a9:	; ext_env[i + 1] <-- env[i]
 22311 0000FE4E 4883FE02                	cmp rsi, 2
 22312 0000FE52 7410                    	je .L_lambda_simple_env_end_05a9
 22313 0000FE54 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22314 0000FE58 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22315 0000FE5C 48FFC6                  	inc rsi
 22316 0000FE5F 48FFC2                  	inc rdx
 22317 0000FE62 EBEA                    	jmp .L_lambda_simple_env_loop_05a9
 22318                                  .L_lambda_simple_env_end_05a9:
 22319 0000FE64 5B                      	pop rbx
 22320 0000FE65 BE00000000              	mov rsi, 0
 22321                                  .L_lambda_simple_params_loop_05a9:	; copy params
 22322 0000FE6A 4883FE02                	cmp rsi, 2
 22323 0000FE6E 740E                    	je .L_lambda_simple_params_end_05a9
 22324 0000FE70 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22325 0000FE75 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22326 0000FE79 48FFC6                  	inc rsi
 22327 0000FE7C EBEC                    	jmp .L_lambda_simple_params_loop_05a9
 22328                                  .L_lambda_simple_params_end_05a9:
 22329 0000FE7E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22330 0000FE81 4889C3                  	mov rbx, rax
 22331 0000FE84 58                      	pop rax
 22332 0000FE85 C60004                  	mov byte [rax], T_closure
 22333 0000FE88 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22334 0000FE8C 48C74009[99FE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05a9
 22335 0000FE94 E97D000000              	jmp .L_lambda_simple_end_05a9
 22336                                  .L_lambda_simple_code_05a9:	; lambda-simple body
 22337 0000FE99 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22338 0000FE9F 740B                    	je .L_lambda_simple_arity_check_ok_05a9
 22339 0000FEA1 FF742410                	push qword [rsp + 8 * 2]
 22340 0000FEA5 6A01                    	push 1
 22341 0000FEA7 E935580000              	jmp L_error_incorrect_arity_simple
 22342                                  .L_lambda_simple_arity_check_ok_05a9:
 22343 0000FEAC C8000000                	enter 0, 0
 22344                                  	; preparing a tail-call
 22345 0000FEB0 488B4520                	mov rax, PARAM(0)	; param ch
 22346 0000FEB4 50                      	push rax
 22347 0000FEB5 488B4510                	mov rax, ENV
 22348 0000FEB9 488B00                  	mov rax, qword [rax + 8 * 0]
 22349 0000FEBC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 22350 0000FEBF 50                      	push rax
 22351 0000FEC0 6A02                    	push 2	; arg count
 22352 0000FEC2 488B4510                	mov rax, ENV
 22353 0000FEC6 488B4008                	mov rax, qword [rax + 8 * 1]
 22354 0000FECA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
 22355 0000FECD 803804                  	cmp byte [rax], T_closure
 22356 0000FED0 0F85A9570000            	jne L_error_non_closure
 22357 0000FED6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22358                                  
 22359                                  	; recycling the current frame
 22360 0000FED9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22361 0000FEDC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22362 0000FEDF B906000000              	mov rcx, 2 + 4
 22363 0000FEE4 488B5D18                	mov rbx, COUNT
 22364 0000FEE8 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22365 0000FEED 488D55F8                	lea rdx, [rbp - 8 * 1]
 22366                                  .L_tc_recycle_frame_loop_077e:
 22367 0000FEF1 4883F900                	cmp rcx, 0
 22368 0000FEF5 7413                    	je .L_tc_recycle_frame_done_077e
 22369 0000FEF7 488B32                  	mov rsi, qword [rdx]
 22370 0000FEFA 488933                  	mov qword [rbx], rsi
 22371 0000FEFD 48FFC9                  	dec rcx
 22372 0000FF00 4883EB08                	sub rbx, 8 * 1
 22373 0000FF04 4883EA08                	sub rdx, 8 * 1
 22374 0000FF08 EBE7                    	jmp .L_tc_recycle_frame_loop_077e
 22375                                  .L_tc_recycle_frame_done_077e:
 22376 0000FF0A 488D6308                	lea rsp, [rbx + 8 * 1]
 22377 0000FF0E 5D                      	pop rbp	; the proc will restore it!
 22378 0000FF0F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22379 0000FF12 C9                      	leave
 22380 0000FF13 C21800                  	ret AND_KILL_FRAME(1)
 22381                                  .L_lambda_simple_end_05a9:	; new closure is in rax
 22382 0000FF16 803804                  	cmp byte [rax], T_closure
 22383 0000FF19 0F8560570000            	jne L_error_non_closure
 22384 0000FF1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 22385                                  
 22386                                  	; recycling the current frame
 22387 0000FF22 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22388 0000FF25 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22389 0000FF28 B905000000              	mov rcx, 1 + 4
 22390 0000FF2D 488B5D18                	mov rbx, COUNT
 22391 0000FF31 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22392 0000FF36 488D55F8                	lea rdx, [rbp - 8 * 1]
 22393                                  .L_tc_recycle_frame_loop_077f:
 22394 0000FF3A 4883F900                	cmp rcx, 0
 22395 0000FF3E 7413                    	je .L_tc_recycle_frame_done_077f
 22396 0000FF40 488B32                  	mov rsi, qword [rdx]
 22397 0000FF43 488933                  	mov qword [rbx], rsi
 22398 0000FF46 48FFC9                  	dec rcx
 22399 0000FF49 4883EB08                	sub rbx, 8 * 1
 22400 0000FF4D 4883EA08                	sub rdx, 8 * 1
 22401 0000FF51 EBE7                    	jmp .L_tc_recycle_frame_loop_077f
 22402                                  .L_tc_recycle_frame_done_077f:
 22403 0000FF53 488D6308                	lea rsp, [rbx + 8 * 1]
 22404 0000FF57 5D                      	pop rbp	; the proc will restore it!
 22405 0000FF58 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22406 0000FF5B C9                      	leave
 22407 0000FF5C C22000                  	ret AND_KILL_FRAME(2)
 22408                                  .L_lambda_opt_end_00c5:	; new closure is in rax
 22409 0000FF5F C9                      	leave
 22410 0000FF60 C21800                  	ret AND_KILL_FRAME(1)
 22411                                  .L_lambda_simple_end_05a8:	; new closure is in rax
 22412 0000FF63 803804                  	cmp byte [rax], T_closure
 22413 0000FF66 0F8513570000            	jne L_error_non_closure
 22414 0000FF6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22415 0000FF6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22416 0000FF72 48890425[A6110000]      	mov qword [free_var_58], rax
 22417 0000FF7A 48B8-                   	mov rax, sob_void
 22417 0000FF7C [0000000000000000] 
 22418                                  
 22419 0000FF84 4889C7                  	mov rdi, rax
 22420 0000FF87 E8AE580000              	call print_sexpr_if_not_void
 22421                                  
 22422 0000FF8C 48B8-                   	mov rax, L_constants + 1881
 22422 0000FF8E [5907000000000000] 
 22423 0000FF96 50                      	push rax
 22424 0000FF97 6A01                    	push 1	; arg count
 22425 0000FF99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22426 0000FF9E E885570000              	call malloc
 22427 0000FFA3 50                      	push rax
 22428 0000FFA4 BF00000000              	mov rdi, 8 * 0	; new rib
 22429 0000FFA9 E87A570000              	call malloc
 22430 0000FFAE 50                      	push rax
 22431 0000FFAF BF08000000              	mov rdi, 8 * 1	; extended env
 22432 0000FFB4 E86F570000              	call malloc
 22433 0000FFB9 488B7D10                	mov rdi, ENV
 22434 0000FFBD BE00000000              	mov rsi, 0
 22435 0000FFC2 BA01000000              	mov rdx, 1
 22436                                  .L_lambda_simple_env_loop_05aa:	; ext_env[i + 1] <-- env[i]
 22437 0000FFC7 4883FE00                	cmp rsi, 0
 22438 0000FFCB 7410                    	je .L_lambda_simple_env_end_05aa
 22439 0000FFCD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22440 0000FFD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22441 0000FFD5 48FFC6                  	inc rsi
 22442 0000FFD8 48FFC2                  	inc rdx
 22443 0000FFDB EBEA                    	jmp .L_lambda_simple_env_loop_05aa
 22444                                  .L_lambda_simple_env_end_05aa:
 22445 0000FFDD 5B                      	pop rbx
 22446 0000FFDE BE00000000              	mov rsi, 0
 22447                                  .L_lambda_simple_params_loop_05aa:	; copy params
 22448 0000FFE3 4883FE00                	cmp rsi, 0
 22449 0000FFE7 740E                    	je .L_lambda_simple_params_end_05aa
 22450 0000FFE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22451 0000FFEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22452 0000FFF2 48FFC6                  	inc rsi
 22453 0000FFF5 EBEC                    	jmp .L_lambda_simple_params_loop_05aa
 22454                                  .L_lambda_simple_params_end_05aa:
 22455 0000FFF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22456 0000FFFA 4889C3                  	mov rbx, rax
 22457 0000FFFD 58                      	pop rax
 22458 0000FFFE C60004                  	mov byte [rax], T_closure
 22459 00010001 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22460 00010005 48C74009[12000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05aa
 22461 0001000D E92D040000              	jmp .L_lambda_simple_end_05aa
 22462                                  .L_lambda_simple_code_05aa:	; lambda-simple body
 22463 00010012 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22464 00010018 740B                    	je .L_lambda_simple_arity_check_ok_05aa
 22465 0001001A FF742410                	push qword [rsp + 8 * 2]
 22466 0001001E 6A01                    	push 1
 22467 00010020 E9BC560000              	jmp L_error_incorrect_arity_simple
 22468                                  .L_lambda_simple_arity_check_ok_05aa:
 22469 00010025 C8000000                	enter 0, 0
 22470                                  
 22471 00010029 BF08000000              	mov rdi, 8
 22472 0001002E E8F5560000              	call malloc
 22473 00010033 488B5D20                	mov rbx, PARAM(0)	; param run
 22474 00010037 488918                  	mov [rax], rbx	; box run
 22475 0001003A 48894520                	mov PARAM(0), rax	;replace param run with box
 22476 0001003E 48B8-                   	mov rax, sob_void
 22476 00010040 [0000000000000000] 
 22477                                  
 22478 00010048 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22479 0001004D E8D6560000              	call malloc
 22480 00010052 50                      	push rax
 22481 00010053 BF08000000              	mov rdi, 8 * 1	; new rib
 22482 00010058 E8CB560000              	call malloc
 22483 0001005D 50                      	push rax
 22484 0001005E BF10000000              	mov rdi, 8 * 2	; extended env
 22485 00010063 E8C0560000              	call malloc
 22486 00010068 488B7D10                	mov rdi, ENV
 22487 0001006C BE00000000              	mov rsi, 0
 22488 00010071 BA01000000              	mov rdx, 1
 22489                                  .L_lambda_simple_env_loop_05ab:	; ext_env[i + 1] <-- env[i]
 22490 00010076 4883FE01                	cmp rsi, 1
 22491 0001007A 7410                    	je .L_lambda_simple_env_end_05ab
 22492 0001007C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22493 00010080 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22494 00010084 48FFC6                  	inc rsi
 22495 00010087 48FFC2                  	inc rdx
 22496 0001008A EBEA                    	jmp .L_lambda_simple_env_loop_05ab
 22497                                  .L_lambda_simple_env_end_05ab:
 22498 0001008C 5B                      	pop rbx
 22499 0001008D BE00000000              	mov rsi, 0
 22500                                  .L_lambda_simple_params_loop_05ab:	; copy params
 22501 00010092 4883FE01                	cmp rsi, 1
 22502 00010096 740E                    	je .L_lambda_simple_params_end_05ab
 22503 00010098 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22504 0001009D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22505 000100A1 48FFC6                  	inc rsi
 22506 000100A4 EBEC                    	jmp .L_lambda_simple_params_loop_05ab
 22507                                  .L_lambda_simple_params_end_05ab:
 22508 000100A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22509 000100A9 4889C3                  	mov rbx, rax
 22510 000100AC 58                      	pop rax
 22511 000100AD C60004                  	mov byte [rax], T_closure
 22512 000100B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22513 000100B4 48C74009[C1000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05ab
 22514 000100BC E971020000              	jmp .L_lambda_simple_end_05ab
 22515                                  .L_lambda_simple_code_05ab:	; lambda-simple body
 22516 000100C1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22517 000100C7 740B                    	je .L_lambda_simple_arity_check_ok_05ab
 22518 000100C9 FF742410                	push qword [rsp + 8 * 2]
 22519 000100CD 6A02                    	push 2
 22520 000100CF E90D560000              	jmp L_error_incorrect_arity_simple
 22521                                  .L_lambda_simple_arity_check_ok_05ab:
 22522 000100D4 C8000000                	enter 0, 0
 22523 000100D8 488B4520                	mov rax, PARAM(0)	; param s
 22524 000100DC 50                      	push rax
 22525 000100DD 6A01                    	push 1	; arg count
 22526 000100DF 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 22527 000100E7 803805                  	cmp byte [rax], T_undefined
 22528 000100EA 0F840B550000            	je L_error_fvar_undefined
 22529 000100F0 803804                  	cmp byte [rax], T_closure
 22530 000100F3 0F8586550000            	jne L_error_non_closure
 22531 000100F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22532 000100FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 22533                                  
 22534 000100FF 483D[02000000]          	cmp rax, sob_boolean_false
 22535 00010105 746D                    	je .L_if_else_0437
 22536                                  	; preparing a tail-call
 22537 00010107 48B8-                   	mov rax, L_constants + 0
 22537 00010109 [0000000000000000] 
 22538 00010111 50                      	push rax
 22539 00010112 488B4528                	mov rax, PARAM(1)	; param i
 22540 00010116 50                      	push rax
 22541 00010117 6A02                    	push 2	; arg count
 22542 00010119 488B0425[95110000]      	mov rax, qword [free_var_57]	; free var make-vector
 22543 00010121 803805                  	cmp byte [rax], T_undefined
 22544 00010124 0F84D1540000            	je L_error_fvar_undefined
 22545 0001012A 803804                  	cmp byte [rax], T_closure
 22546 0001012D 0F854C550000            	jne L_error_non_closure
 22547 00010133 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22548                                  
 22549                                  	; recycling the current frame
 22550 00010136 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22551 00010139 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22552 0001013C B906000000              	mov rcx, 2 + 4
 22553 00010141 488B5D18                	mov rbx, COUNT
 22554 00010145 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22555 0001014A 488D55F8                	lea rdx, [rbp - 8 * 1]
 22556                                  .L_tc_recycle_frame_loop_0780:
 22557 0001014E 4883F900                	cmp rcx, 0
 22558 00010152 7413                    	je .L_tc_recycle_frame_done_0780
 22559 00010154 488B32                  	mov rsi, qword [rdx]
 22560 00010157 488933                  	mov qword [rbx], rsi
 22561 0001015A 48FFC9                  	dec rcx
 22562 0001015D 4883EB08                	sub rbx, 8 * 1
 22563 00010161 4883EA08                	sub rdx, 8 * 1
 22564 00010165 EBE7                    	jmp .L_tc_recycle_frame_loop_0780
 22565                                  .L_tc_recycle_frame_done_0780:
 22566 00010167 488D6308                	lea rsp, [rbx + 8 * 1]
 22567 0001016B 5D                      	pop rbp	; the proc will restore it!
 22568 0001016C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22569                                  
 22570 0001016F E9BA010000              	jmp .L_if_end_0437
 22571                                  
 22572                                  	.L_if_else_0437:
 22573                                  	; preparing a tail-call
 22574 00010174 48B8-                   	mov rax, L_constants + 2158
 22574 00010176 [6E08000000000000] 
 22575 0001017E 50                      	push rax
 22576 0001017F 488B4528                	mov rax, PARAM(1)	; param i
 22577 00010183 50                      	push rax
 22578 00010184 6A02                    	push 2	; arg count
 22579 00010186 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 22580 0001018E 803805                  	cmp byte [rax], T_undefined
 22581 00010191 0F8464540000            	je L_error_fvar_undefined
 22582 00010197 803804                  	cmp byte [rax], T_closure
 22583 0001019A 0F85DF540000            	jne L_error_non_closure
 22584 000101A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22585 000101A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22586 000101A6 50                      	push rax
 22587 000101A7 488B4520                	mov rax, PARAM(0)	; param s
 22588 000101AB 50                      	push rax
 22589 000101AC 6A01                    	push 1	; arg count
 22590 000101AE 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 22591 000101B6 803805                  	cmp byte [rax], T_undefined
 22592 000101B9 0F843C540000            	je L_error_fvar_undefined
 22593 000101BF 803804                  	cmp byte [rax], T_closure
 22594 000101C2 0F85B7540000            	jne L_error_non_closure
 22595 000101C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22596 000101CB FF5009                  	call SOB_CLOSURE_CODE(rax)
 22597 000101CE 50                      	push rax
 22598 000101CF 6A02                    	push 2	; arg count
 22599 000101D1 488B4510                	mov rax, ENV
 22600 000101D5 488B00                  	mov rax, qword [rax + 8 * 0]
 22601 000101D8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22602 000101DB 488B00                  	mov rax, qword [rax]
 22603 000101DE 803804                  	cmp byte [rax], T_closure
 22604 000101E1 0F8598540000            	jne L_error_non_closure
 22605 000101E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22606 000101EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 22607 000101ED 50                      	push rax
 22608 000101EE 6A01                    	push 1	; arg count
 22609 000101F0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22610 000101F5 E82E550000              	call malloc
 22611 000101FA 50                      	push rax
 22612 000101FB BF10000000              	mov rdi, 8 * 2	; new rib
 22613 00010200 E823550000              	call malloc
 22614 00010205 50                      	push rax
 22615 00010206 BF18000000              	mov rdi, 8 * 3	; extended env
 22616 0001020B E818550000              	call malloc
 22617 00010210 488B7D10                	mov rdi, ENV
 22618 00010214 BE00000000              	mov rsi, 0
 22619 00010219 BA01000000              	mov rdx, 1
 22620                                  .L_lambda_simple_env_loop_05ac:	; ext_env[i + 1] <-- env[i]
 22621 0001021E 4883FE02                	cmp rsi, 2
 22622 00010222 7410                    	je .L_lambda_simple_env_end_05ac
 22623 00010224 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22624 00010228 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22625 0001022C 48FFC6                  	inc rsi
 22626 0001022F 48FFC2                  	inc rdx
 22627 00010232 EBEA                    	jmp .L_lambda_simple_env_loop_05ac
 22628                                  .L_lambda_simple_env_end_05ac:
 22629 00010234 5B                      	pop rbx
 22630 00010235 BE00000000              	mov rsi, 0
 22631                                  .L_lambda_simple_params_loop_05ac:	; copy params
 22632 0001023A 4883FE02                	cmp rsi, 2
 22633 0001023E 740E                    	je .L_lambda_simple_params_end_05ac
 22634 00010240 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22635 00010245 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22636 00010249 48FFC6                  	inc rsi
 22637 0001024C EBEC                    	jmp .L_lambda_simple_params_loop_05ac
 22638                                  .L_lambda_simple_params_end_05ac:
 22639 0001024E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22640 00010251 4889C3                  	mov rbx, rax
 22641 00010254 58                      	pop rax
 22642 00010255 C60004                  	mov byte [rax], T_closure
 22643 00010258 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22644 0001025C 48C74009[69020100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05ac
 22645 00010264 E980000000              	jmp .L_lambda_simple_end_05ac
 22646                                  .L_lambda_simple_code_05ac:	; lambda-simple body
 22647 00010269 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22648 0001026F 740B                    	je .L_lambda_simple_arity_check_ok_05ac
 22649 00010271 FF742410                	push qword [rsp + 8 * 2]
 22650 00010275 6A01                    	push 1
 22651 00010277 E965540000              	jmp L_error_incorrect_arity_simple
 22652                                  .L_lambda_simple_arity_check_ok_05ac:
 22653 0001027C C8000000                	enter 0, 0
 22654 00010280 488B4510                	mov rax, ENV
 22655 00010284 488B00                  	mov rax, qword [rax + 8 * 0]
 22656 00010287 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 22657 0001028A 50                      	push rax
 22658 0001028B 6A01                    	push 1	; arg count
 22659 0001028D 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 22660 00010295 803805                  	cmp byte [rax], T_undefined
 22661 00010298 0F845D530000            	je L_error_fvar_undefined
 22662 0001029E 803804                  	cmp byte [rax], T_closure
 22663 000102A1 0F85D8530000            	jne L_error_non_closure
 22664 000102A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22665 000102AA FF5009                  	call SOB_CLOSURE_CODE(rax)
 22666 000102AD 50                      	push rax
 22667 000102AE 488B4510                	mov rax, ENV
 22668 000102B2 488B00                  	mov rax, qword [rax + 8 * 0]
 22669 000102B5 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 22670 000102B9 50                      	push rax
 22671 000102BA 488B4520                	mov rax, PARAM(0)	; param v
 22672 000102BE 50                      	push rax
 22673 000102BF 6A03                    	push 3	; arg count
 22674 000102C1 488B0425[73110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 22675 000102C9 803805                  	cmp byte [rax], T_undefined
 22676 000102CC 0F8429530000            	je L_error_fvar_undefined
 22677 000102D2 803804                  	cmp byte [rax], T_closure
 22678 000102D5 0F85A4530000            	jne L_error_non_closure
 22679 000102DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 22680 000102DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 22681                                  
 22682 000102E1 488B4520                	mov rax, PARAM(0)	; param v
 22683 000102E5 C9                      	leave
 22684 000102E6 C21800                  	ret AND_KILL_FRAME(1)
 22685                                  .L_lambda_simple_end_05ac:	; new closure is in rax
 22686 000102E9 803804                  	cmp byte [rax], T_closure
 22687 000102EC 0F858D530000            	jne L_error_non_closure
 22688 000102F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22689                                  
 22690                                  	; recycling the current frame
 22691 000102F5 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22692 000102F8 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22693 000102FB B905000000              	mov rcx, 1 + 4
 22694 00010300 488B5D18                	mov rbx, COUNT
 22695 00010304 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22696 00010309 488D55F8                	lea rdx, [rbp - 8 * 1]
 22697                                  .L_tc_recycle_frame_loop_0781:
 22698 0001030D 4883F900                	cmp rcx, 0
 22699 00010311 7413                    	je .L_tc_recycle_frame_done_0781
 22700 00010313 488B32                  	mov rsi, qword [rdx]
 22701 00010316 488933                  	mov qword [rbx], rsi
 22702 00010319 48FFC9                  	dec rcx
 22703 0001031C 4883EB08                	sub rbx, 8 * 1
 22704 00010320 4883EA08                	sub rdx, 8 * 1
 22705 00010324 EBE7                    	jmp .L_tc_recycle_frame_loop_0781
 22706                                  .L_tc_recycle_frame_done_0781:
 22707 00010326 488D6308                	lea rsp, [rbx + 8 * 1]
 22708 0001032A 5D                      	pop rbp	; the proc will restore it!
 22709 0001032B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22710                                  
 22711                                  	.L_if_end_0437:
 22712 0001032E C9                      	leave
 22713 0001032F C22000                  	ret AND_KILL_FRAME(2)
 22714                                  .L_lambda_simple_end_05ab:	; new closure is in rax
 22715                                  
 22716 00010332 50                      	push rax
 22717 00010333 488B4520                	mov rax, PARAM(0)	; param run
 22718                                  
 22719 00010337 8F00                    	pop qword[rax]
 22720 00010339 48B8-                   	mov rax, sob_void
 22720 0001033B [0000000000000000] 
 22721                                  
 22722 00010343 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22723 00010348 E8DB530000              	call malloc
 22724 0001034D 50                      	push rax
 22725 0001034E BF08000000              	mov rdi, 8 * 1	; new rib
 22726 00010353 E8D0530000              	call malloc
 22727 00010358 50                      	push rax
 22728 00010359 BF10000000              	mov rdi, 8 * 2	; extended env
 22729 0001035E E8C5530000              	call malloc
 22730 00010363 488B7D10                	mov rdi, ENV
 22731 00010367 BE00000000              	mov rsi, 0
 22732 0001036C BA01000000              	mov rdx, 1
 22733                                  .L_lambda_simple_env_loop_05ad:	; ext_env[i + 1] <-- env[i]
 22734 00010371 4883FE01                	cmp rsi, 1
 22735 00010375 7410                    	je .L_lambda_simple_env_end_05ad
 22736 00010377 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22737 0001037B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22738 0001037F 48FFC6                  	inc rsi
 22739 00010382 48FFC2                  	inc rdx
 22740 00010385 EBEA                    	jmp .L_lambda_simple_env_loop_05ad
 22741                                  .L_lambda_simple_env_end_05ad:
 22742 00010387 5B                      	pop rbx
 22743 00010388 BE00000000              	mov rsi, 0
 22744                                  .L_lambda_simple_params_loop_05ad:	; copy params
 22745 0001038D 4883FE01                	cmp rsi, 1
 22746 00010391 740E                    	je .L_lambda_simple_params_end_05ad
 22747 00010393 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22748 00010398 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22749 0001039C 48FFC6                  	inc rsi
 22750 0001039F EBEC                    	jmp .L_lambda_simple_params_loop_05ad
 22751                                  .L_lambda_simple_params_end_05ad:
 22752 000103A1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22753 000103A4 4889C3                  	mov rbx, rax
 22754 000103A7 58                      	pop rax
 22755 000103A8 C60004                  	mov byte [rax], T_closure
 22756 000103AB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22757 000103AF 48C74009[BC030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05ad
 22758 000103B7 E97F000000              	jmp .L_lambda_simple_end_05ad
 22759                                  .L_lambda_simple_code_05ad:	; lambda-simple body
 22760 000103BC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22761 000103C2 740B                    	je .L_lambda_simple_arity_check_ok_05ad
 22762 000103C4 FF742410                	push qword [rsp + 8 * 2]
 22763 000103C8 6A01                    	push 1
 22764 000103CA E912530000              	jmp L_error_incorrect_arity_simple
 22765                                  .L_lambda_simple_arity_check_ok_05ad:
 22766 000103CF C8000000                	enter 0, 0
 22767                                  	; preparing a tail-call
 22768 000103D3 48B8-                   	mov rax, L_constants + 2023
 22768 000103D5 [E707000000000000] 
 22769 000103DD 50                      	push rax
 22770 000103DE 488B4520                	mov rax, PARAM(0)	; param s
 22771 000103E2 50                      	push rax
 22772 000103E3 6A02                    	push 2	; arg count
 22773 000103E5 488B4510                	mov rax, ENV
 22774 000103E9 488B00                  	mov rax, qword [rax + 8 * 0]
 22775 000103EC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22776 000103EF 488B00                  	mov rax, qword [rax]
 22777 000103F2 803804                  	cmp byte [rax], T_closure
 22778 000103F5 0F8584520000            	jne L_error_non_closure
 22779 000103FB FF7001                  	push SOB_CLOSURE_ENV(rax)
 22780                                  
 22781                                  	; recycling the current frame
 22782 000103FE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22783 00010401 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22784 00010404 B906000000              	mov rcx, 2 + 4
 22785 00010409 488B5D18                	mov rbx, COUNT
 22786 0001040D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22787 00010412 488D55F8                	lea rdx, [rbp - 8 * 1]
 22788                                  .L_tc_recycle_frame_loop_0782:
 22789 00010416 4883F900                	cmp rcx, 0
 22790 0001041A 7413                    	je .L_tc_recycle_frame_done_0782
 22791 0001041C 488B32                  	mov rsi, qword [rdx]
 22792 0001041F 488933                  	mov qword [rbx], rsi
 22793 00010422 48FFC9                  	dec rcx
 22794 00010425 4883EB08                	sub rbx, 8 * 1
 22795 00010429 4883EA08                	sub rdx, 8 * 1
 22796 0001042D EBE7                    	jmp .L_tc_recycle_frame_loop_0782
 22797                                  .L_tc_recycle_frame_done_0782:
 22798 0001042F 488D6308                	lea rsp, [rbx + 8 * 1]
 22799 00010433 5D                      	pop rbp	; the proc will restore it!
 22800 00010434 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22801 00010437 C9                      	leave
 22802 00010438 C21800                  	ret AND_KILL_FRAME(1)
 22803                                  .L_lambda_simple_end_05ad:	; new closure is in rax
 22804 0001043B C9                      	leave
 22805 0001043C C21800                  	ret AND_KILL_FRAME(1)
 22806                                  .L_lambda_simple_end_05aa:	; new closure is in rax
 22807 0001043F 803804                  	cmp byte [rax], T_closure
 22808 00010442 0F8537520000            	jne L_error_non_closure
 22809 00010448 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22810 0001044B FF5009                  	call SOB_CLOSURE_CODE(rax)
 22811 0001044E 48890425[17180000]      	mov qword [free_var_155], rax
 22812 00010456 48B8-                   	mov rax, sob_void
 22812 00010458 [0000000000000000] 
 22813                                  
 22814 00010460 4889C7                  	mov rdi, rax
 22815 00010463 E8D2530000              	call print_sexpr_if_not_void
 22816                                  
 22817 00010468 48B8-                   	mov rax, L_constants + 1881
 22817 0001046A [5907000000000000] 
 22818 00010472 50                      	push rax
 22819 00010473 6A01                    	push 1	; arg count
 22820 00010475 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22821 0001047A E8A9520000              	call malloc
 22822 0001047F 50                      	push rax
 22823 00010480 BF00000000              	mov rdi, 8 * 0	; new rib
 22824 00010485 E89E520000              	call malloc
 22825 0001048A 50                      	push rax
 22826 0001048B BF08000000              	mov rdi, 8 * 1	; extended env
 22827 00010490 E893520000              	call malloc
 22828 00010495 488B7D10                	mov rdi, ENV
 22829 00010499 BE00000000              	mov rsi, 0
 22830 0001049E BA01000000              	mov rdx, 1
 22831                                  .L_lambda_simple_env_loop_05ae:	; ext_env[i + 1] <-- env[i]
 22832 000104A3 4883FE00                	cmp rsi, 0
 22833 000104A7 7410                    	je .L_lambda_simple_env_end_05ae
 22834 000104A9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22835 000104AD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22836 000104B1 48FFC6                  	inc rsi
 22837 000104B4 48FFC2                  	inc rdx
 22838 000104B7 EBEA                    	jmp .L_lambda_simple_env_loop_05ae
 22839                                  .L_lambda_simple_env_end_05ae:
 22840 000104B9 5B                      	pop rbx
 22841 000104BA BE00000000              	mov rsi, 0
 22842                                  .L_lambda_simple_params_loop_05ae:	; copy params
 22843 000104BF 4883FE00                	cmp rsi, 0
 22844 000104C3 740E                    	je .L_lambda_simple_params_end_05ae
 22845 000104C5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22846 000104CA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22847 000104CE 48FFC6                  	inc rsi
 22848 000104D1 EBEC                    	jmp .L_lambda_simple_params_loop_05ae
 22849                                  .L_lambda_simple_params_end_05ae:
 22850 000104D3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22851 000104D6 4889C3                  	mov rbx, rax
 22852 000104D9 58                      	pop rax
 22853 000104DA C60004                  	mov byte [rax], T_closure
 22854 000104DD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22855 000104E1 48C74009[EE040100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05ae
 22856 000104E9 E92D040000              	jmp .L_lambda_simple_end_05ae
 22857                                  .L_lambda_simple_code_05ae:	; lambda-simple body
 22858 000104EE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22859 000104F4 740B                    	je .L_lambda_simple_arity_check_ok_05ae
 22860 000104F6 FF742410                	push qword [rsp + 8 * 2]
 22861 000104FA 6A01                    	push 1
 22862 000104FC E9E0510000              	jmp L_error_incorrect_arity_simple
 22863                                  .L_lambda_simple_arity_check_ok_05ae:
 22864 00010501 C8000000                	enter 0, 0
 22865                                  
 22866 00010505 BF08000000              	mov rdi, 8
 22867 0001050A E819520000              	call malloc
 22868 0001050F 488B5D20                	mov rbx, PARAM(0)	; param run
 22869 00010513 488918                  	mov [rax], rbx	; box run
 22870 00010516 48894520                	mov PARAM(0), rax	;replace param run with box
 22871 0001051A 48B8-                   	mov rax, sob_void
 22871 0001051C [0000000000000000] 
 22872                                  
 22873 00010524 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22874 00010529 E8FA510000              	call malloc
 22875 0001052E 50                      	push rax
 22876 0001052F BF08000000              	mov rdi, 8 * 1	; new rib
 22877 00010534 E8EF510000              	call malloc
 22878 00010539 50                      	push rax
 22879 0001053A BF10000000              	mov rdi, 8 * 2	; extended env
 22880 0001053F E8E4510000              	call malloc
 22881 00010544 488B7D10                	mov rdi, ENV
 22882 00010548 BE00000000              	mov rsi, 0
 22883 0001054D BA01000000              	mov rdx, 1
 22884                                  .L_lambda_simple_env_loop_05af:	; ext_env[i + 1] <-- env[i]
 22885 00010552 4883FE01                	cmp rsi, 1
 22886 00010556 7410                    	je .L_lambda_simple_env_end_05af
 22887 00010558 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22888 0001055C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22889 00010560 48FFC6                  	inc rsi
 22890 00010563 48FFC2                  	inc rdx
 22891 00010566 EBEA                    	jmp .L_lambda_simple_env_loop_05af
 22892                                  .L_lambda_simple_env_end_05af:
 22893 00010568 5B                      	pop rbx
 22894 00010569 BE00000000              	mov rsi, 0
 22895                                  .L_lambda_simple_params_loop_05af:	; copy params
 22896 0001056E 4883FE01                	cmp rsi, 1
 22897 00010572 740E                    	je .L_lambda_simple_params_end_05af
 22898 00010574 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22899 00010579 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22900 0001057D 48FFC6                  	inc rsi
 22901 00010580 EBEC                    	jmp .L_lambda_simple_params_loop_05af
 22902                                  .L_lambda_simple_params_end_05af:
 22903 00010582 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22904 00010585 4889C3                  	mov rbx, rax
 22905 00010588 58                      	pop rax
 22906 00010589 C60004                  	mov byte [rax], T_closure
 22907 0001058C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22908 00010590 48C74009[9D050100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05af
 22909 00010598 E971020000              	jmp .L_lambda_simple_end_05af
 22910                                  .L_lambda_simple_code_05af:	; lambda-simple body
 22911 0001059D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22912 000105A3 740B                    	je .L_lambda_simple_arity_check_ok_05af
 22913 000105A5 FF742410                	push qword [rsp + 8 * 2]
 22914 000105A9 6A02                    	push 2
 22915 000105AB E931510000              	jmp L_error_incorrect_arity_simple
 22916                                  .L_lambda_simple_arity_check_ok_05af:
 22917 000105B0 C8000000                	enter 0, 0
 22918 000105B4 488B4520                	mov rax, PARAM(0)	; param s
 22919 000105B8 50                      	push rax
 22920 000105B9 6A01                    	push 1	; arg count
 22921 000105BB 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 22922 000105C3 803805                  	cmp byte [rax], T_undefined
 22923 000105C6 0F842F500000            	je L_error_fvar_undefined
 22924 000105CC 803804                  	cmp byte [rax], T_closure
 22925 000105CF 0F85AA500000            	jne L_error_non_closure
 22926 000105D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22927 000105D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22928                                  
 22929 000105DB 483D[02000000]          	cmp rax, sob_boolean_false
 22930 000105E1 746D                    	je .L_if_else_0438
 22931                                  	; preparing a tail-call
 22932 000105E3 48B8-                   	mov rax, L_constants + 4
 22932 000105E5 [0400000000000000] 
 22933 000105ED 50                      	push rax
 22934 000105EE 488B4528                	mov rax, PARAM(1)	; param i
 22935 000105F2 50                      	push rax
 22936 000105F3 6A02                    	push 2	; arg count
 22937 000105F5 488B0425[A6110000]      	mov rax, qword [free_var_58]	; free var make-string
 22938 000105FD 803805                  	cmp byte [rax], T_undefined
 22939 00010600 0F84F54F0000            	je L_error_fvar_undefined
 22940 00010606 803804                  	cmp byte [rax], T_closure
 22941 00010609 0F8570500000            	jne L_error_non_closure
 22942 0001060F FF7001                  	push SOB_CLOSURE_ENV(rax)
 22943                                  
 22944                                  	; recycling the current frame
 22945 00010612 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 22946 00010615 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 22947 00010618 B906000000              	mov rcx, 2 + 4
 22948 0001061D 488B5D18                	mov rbx, COUNT
 22949 00010621 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 22950 00010626 488D55F8                	lea rdx, [rbp - 8 * 1]
 22951                                  .L_tc_recycle_frame_loop_0783:
 22952 0001062A 4883F900                	cmp rcx, 0
 22953 0001062E 7413                    	je .L_tc_recycle_frame_done_0783
 22954 00010630 488B32                  	mov rsi, qword [rdx]
 22955 00010633 488933                  	mov qword [rbx], rsi
 22956 00010636 48FFC9                  	dec rcx
 22957 00010639 4883EB08                	sub rbx, 8 * 1
 22958 0001063D 4883EA08                	sub rdx, 8 * 1
 22959 00010641 EBE7                    	jmp .L_tc_recycle_frame_loop_0783
 22960                                  .L_tc_recycle_frame_done_0783:
 22961 00010643 488D6308                	lea rsp, [rbx + 8 * 1]
 22962 00010647 5D                      	pop rbp	; the proc will restore it!
 22963 00010648 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22964                                  
 22965 0001064B E9BA010000              	jmp .L_if_end_0438
 22966                                  
 22967                                  	.L_if_else_0438:
 22968                                  	; preparing a tail-call
 22969 00010650 48B8-                   	mov rax, L_constants + 2158
 22969 00010652 [6E08000000000000] 
 22970 0001065A 50                      	push rax
 22971 0001065B 488B4528                	mov rax, PARAM(1)	; param i
 22972 0001065F 50                      	push rax
 22973 00010660 6A02                    	push 2	; arg count
 22974 00010662 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 22975 0001066A 803805                  	cmp byte [rax], T_undefined
 22976 0001066D 0F84884F0000            	je L_error_fvar_undefined
 22977 00010673 803804                  	cmp byte [rax], T_closure
 22978 00010676 0F8503500000            	jne L_error_non_closure
 22979 0001067C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22980 0001067F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22981 00010682 50                      	push rax
 22982 00010683 488B4520                	mov rax, PARAM(0)	; param s
 22983 00010687 50                      	push rax
 22984 00010688 6A01                    	push 1	; arg count
 22985 0001068A 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 22986 00010692 803805                  	cmp byte [rax], T_undefined
 22987 00010695 0F84604F0000            	je L_error_fvar_undefined
 22988 0001069B 803804                  	cmp byte [rax], T_closure
 22989 0001069E 0F85DB4F0000            	jne L_error_non_closure
 22990 000106A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22991 000106A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22992 000106AA 50                      	push rax
 22993 000106AB 6A02                    	push 2	; arg count
 22994 000106AD 488B4510                	mov rax, ENV
 22995 000106B1 488B00                  	mov rax, qword [rax + 8 * 0]
 22996 000106B4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22997 000106B7 488B00                  	mov rax, qword [rax]
 22998 000106BA 803804                  	cmp byte [rax], T_closure
 22999 000106BD 0F85BC4F0000            	jne L_error_non_closure
 23000 000106C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23001 000106C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23002 000106C9 50                      	push rax
 23003 000106CA 6A01                    	push 1	; arg count
 23004 000106CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23005 000106D1 E852500000              	call malloc
 23006 000106D6 50                      	push rax
 23007 000106D7 BF10000000              	mov rdi, 8 * 2	; new rib
 23008 000106DC E847500000              	call malloc
 23009 000106E1 50                      	push rax
 23010 000106E2 BF18000000              	mov rdi, 8 * 3	; extended env
 23011 000106E7 E83C500000              	call malloc
 23012 000106EC 488B7D10                	mov rdi, ENV
 23013 000106F0 BE00000000              	mov rsi, 0
 23014 000106F5 BA01000000              	mov rdx, 1
 23015                                  .L_lambda_simple_env_loop_05b0:	; ext_env[i + 1] <-- env[i]
 23016 000106FA 4883FE02                	cmp rsi, 2
 23017 000106FE 7410                    	je .L_lambda_simple_env_end_05b0
 23018 00010700 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23019 00010704 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23020 00010708 48FFC6                  	inc rsi
 23021 0001070B 48FFC2                  	inc rdx
 23022 0001070E EBEA                    	jmp .L_lambda_simple_env_loop_05b0
 23023                                  .L_lambda_simple_env_end_05b0:
 23024 00010710 5B                      	pop rbx
 23025 00010711 BE00000000              	mov rsi, 0
 23026                                  .L_lambda_simple_params_loop_05b0:	; copy params
 23027 00010716 4883FE02                	cmp rsi, 2
 23028 0001071A 740E                    	je .L_lambda_simple_params_end_05b0
 23029 0001071C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23030 00010721 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23031 00010725 48FFC6                  	inc rsi
 23032 00010728 EBEC                    	jmp .L_lambda_simple_params_loop_05b0
 23033                                  .L_lambda_simple_params_end_05b0:
 23034 0001072A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23035 0001072D 4889C3                  	mov rbx, rax
 23036 00010730 58                      	pop rax
 23037 00010731 C60004                  	mov byte [rax], T_closure
 23038 00010734 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23039 00010738 48C74009[45070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05b0
 23040 00010740 E980000000              	jmp .L_lambda_simple_end_05b0
 23041                                  .L_lambda_simple_code_05b0:	; lambda-simple body
 23042 00010745 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23043 0001074B 740B                    	je .L_lambda_simple_arity_check_ok_05b0
 23044 0001074D FF742410                	push qword [rsp + 8 * 2]
 23045 00010751 6A01                    	push 1
 23046 00010753 E9894F0000              	jmp L_error_incorrect_arity_simple
 23047                                  .L_lambda_simple_arity_check_ok_05b0:
 23048 00010758 C8000000                	enter 0, 0
 23049 0001075C 488B4510                	mov rax, ENV
 23050 00010760 488B00                  	mov rax, qword [rax + 8 * 0]
 23051 00010763 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 23052 00010766 50                      	push rax
 23053 00010767 6A01                    	push 1	; arg count
 23054 00010769 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 23055 00010771 803805                  	cmp byte [rax], T_undefined
 23056 00010774 0F84814E0000            	je L_error_fvar_undefined
 23057 0001077A 803804                  	cmp byte [rax], T_closure
 23058 0001077D 0F85FC4E0000            	jne L_error_non_closure
 23059 00010783 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23060 00010786 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23061 00010789 50                      	push rax
 23062 0001078A 488B4510                	mov rax, ENV
 23063 0001078E 488B00                  	mov rax, qword [rax + 8 * 0]
 23064 00010791 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 23065 00010795 50                      	push rax
 23066 00010796 488B4520                	mov rax, PARAM(0)	; param str
 23067 0001079A 50                      	push rax
 23068 0001079B 6A03                    	push 3	; arg count
 23069 0001079D 488B0425[84110000]      	mov rax, qword [free_var_56]	; free var string-set!
 23070 000107A5 803805                  	cmp byte [rax], T_undefined
 23071 000107A8 0F844D4E0000            	je L_error_fvar_undefined
 23072 000107AE 803804                  	cmp byte [rax], T_closure
 23073 000107B1 0F85C84E0000            	jne L_error_non_closure
 23074 000107B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23075 000107BA FF5009                  	call SOB_CLOSURE_CODE(rax)
 23076                                  
 23077 000107BD 488B4520                	mov rax, PARAM(0)	; param str
 23078 000107C1 C9                      	leave
 23079 000107C2 C21800                  	ret AND_KILL_FRAME(1)
 23080                                  .L_lambda_simple_end_05b0:	; new closure is in rax
 23081 000107C5 803804                  	cmp byte [rax], T_closure
 23082 000107C8 0F85B14E0000            	jne L_error_non_closure
 23083 000107CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 23084                                  
 23085                                  	; recycling the current frame
 23086 000107D1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23087 000107D4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23088 000107D7 B905000000              	mov rcx, 1 + 4
 23089 000107DC 488B5D18                	mov rbx, COUNT
 23090 000107E0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23091 000107E5 488D55F8                	lea rdx, [rbp - 8 * 1]
 23092                                  .L_tc_recycle_frame_loop_0784:
 23093 000107E9 4883F900                	cmp rcx, 0
 23094 000107ED 7413                    	je .L_tc_recycle_frame_done_0784
 23095 000107EF 488B32                  	mov rsi, qword [rdx]
 23096 000107F2 488933                  	mov qword [rbx], rsi
 23097 000107F5 48FFC9                  	dec rcx
 23098 000107F8 4883EB08                	sub rbx, 8 * 1
 23099 000107FC 4883EA08                	sub rdx, 8 * 1
 23100 00010800 EBE7                    	jmp .L_tc_recycle_frame_loop_0784
 23101                                  .L_tc_recycle_frame_done_0784:
 23102 00010802 488D6308                	lea rsp, [rbx + 8 * 1]
 23103 00010806 5D                      	pop rbp	; the proc will restore it!
 23104 00010807 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23105                                  
 23106                                  	.L_if_end_0438:
 23107 0001080A C9                      	leave
 23108 0001080B C22000                  	ret AND_KILL_FRAME(2)
 23109                                  .L_lambda_simple_end_05af:	; new closure is in rax
 23110                                  
 23111 0001080E 50                      	push rax
 23112 0001080F 488B4520                	mov rax, PARAM(0)	; param run
 23113                                  
 23114 00010813 8F00                    	pop qword[rax]
 23115 00010815 48B8-                   	mov rax, sob_void
 23115 00010817 [0000000000000000] 
 23116                                  
 23117 0001081F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23118 00010824 E8FF4E0000              	call malloc
 23119 00010829 50                      	push rax
 23120 0001082A BF08000000              	mov rdi, 8 * 1	; new rib
 23121 0001082F E8F44E0000              	call malloc
 23122 00010834 50                      	push rax
 23123 00010835 BF10000000              	mov rdi, 8 * 2	; extended env
 23124 0001083A E8E94E0000              	call malloc
 23125 0001083F 488B7D10                	mov rdi, ENV
 23126 00010843 BE00000000              	mov rsi, 0
 23127 00010848 BA01000000              	mov rdx, 1
 23128                                  .L_lambda_simple_env_loop_05b1:	; ext_env[i + 1] <-- env[i]
 23129 0001084D 4883FE01                	cmp rsi, 1
 23130 00010851 7410                    	je .L_lambda_simple_env_end_05b1
 23131 00010853 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23132 00010857 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23133 0001085B 48FFC6                  	inc rsi
 23134 0001085E 48FFC2                  	inc rdx
 23135 00010861 EBEA                    	jmp .L_lambda_simple_env_loop_05b1
 23136                                  .L_lambda_simple_env_end_05b1:
 23137 00010863 5B                      	pop rbx
 23138 00010864 BE00000000              	mov rsi, 0
 23139                                  .L_lambda_simple_params_loop_05b1:	; copy params
 23140 00010869 4883FE01                	cmp rsi, 1
 23141 0001086D 740E                    	je .L_lambda_simple_params_end_05b1
 23142 0001086F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23143 00010874 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23144 00010878 48FFC6                  	inc rsi
 23145 0001087B EBEC                    	jmp .L_lambda_simple_params_loop_05b1
 23146                                  .L_lambda_simple_params_end_05b1:
 23147 0001087D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23148 00010880 4889C3                  	mov rbx, rax
 23149 00010883 58                      	pop rax
 23150 00010884 C60004                  	mov byte [rax], T_closure
 23151 00010887 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23152 0001088B 48C74009[98080100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05b1
 23153 00010893 E97F000000              	jmp .L_lambda_simple_end_05b1
 23154                                  .L_lambda_simple_code_05b1:	; lambda-simple body
 23155 00010898 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23156 0001089E 740B                    	je .L_lambda_simple_arity_check_ok_05b1
 23157 000108A0 FF742410                	push qword [rsp + 8 * 2]
 23158 000108A4 6A01                    	push 1
 23159 000108A6 E9364E0000              	jmp L_error_incorrect_arity_simple
 23160                                  .L_lambda_simple_arity_check_ok_05b1:
 23161 000108AB C8000000                	enter 0, 0
 23162                                  	; preparing a tail-call
 23163 000108AF 48B8-                   	mov rax, L_constants + 2023
 23163 000108B1 [E707000000000000] 
 23164 000108B9 50                      	push rax
 23165 000108BA 488B4520                	mov rax, PARAM(0)	; param s
 23166 000108BE 50                      	push rax
 23167 000108BF 6A02                    	push 2	; arg count
 23168 000108C1 488B4510                	mov rax, ENV
 23169 000108C5 488B00                  	mov rax, qword [rax + 8 * 0]
 23170 000108C8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23171 000108CB 488B00                  	mov rax, qword [rax]
 23172 000108CE 803804                  	cmp byte [rax], T_closure
 23173 000108D1 0F85A84D0000            	jne L_error_non_closure
 23174 000108D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23175                                  
 23176                                  	; recycling the current frame
 23177 000108DA FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23178 000108DD FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23179 000108E0 B906000000              	mov rcx, 2 + 4
 23180 000108E5 488B5D18                	mov rbx, COUNT
 23181 000108E9 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23182 000108EE 488D55F8                	lea rdx, [rbp - 8 * 1]
 23183                                  .L_tc_recycle_frame_loop_0785:
 23184 000108F2 4883F900                	cmp rcx, 0
 23185 000108F6 7413                    	je .L_tc_recycle_frame_done_0785
 23186 000108F8 488B32                  	mov rsi, qword [rdx]
 23187 000108FB 488933                  	mov qword [rbx], rsi
 23188 000108FE 48FFC9                  	dec rcx
 23189 00010901 4883EB08                	sub rbx, 8 * 1
 23190 00010905 4883EA08                	sub rdx, 8 * 1
 23191 00010909 EBE7                    	jmp .L_tc_recycle_frame_loop_0785
 23192                                  .L_tc_recycle_frame_done_0785:
 23193 0001090B 488D6308                	lea rsp, [rbx + 8 * 1]
 23194 0001090F 5D                      	pop rbp	; the proc will restore it!
 23195 00010910 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23196 00010913 C9                      	leave
 23197 00010914 C21800                  	ret AND_KILL_FRAME(1)
 23198                                  .L_lambda_simple_end_05b1:	; new closure is in rax
 23199 00010917 C9                      	leave
 23200 00010918 C21800                  	ret AND_KILL_FRAME(1)
 23201                                  .L_lambda_simple_end_05ae:	; new closure is in rax
 23202 0001091B 803804                  	cmp byte [rax], T_closure
 23203 0001091E 0F855B4D0000            	jne L_error_non_closure
 23204 00010924 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23205 00010927 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23206 0001092A 48890425[3A170000]      	mov qword [free_var_142], rax
 23207 00010932 48B8-                   	mov rax, sob_void
 23207 00010934 [0000000000000000] 
 23208                                  
 23209 0001093C 4889C7                  	mov rdi, rax
 23210 0001093F E8F64E0000              	call print_sexpr_if_not_void
 23211                                  
 23212 00010944 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23213 00010949 E8DA4D0000              	call malloc
 23214 0001094E 50                      	push rax
 23215 0001094F BF00000000              	mov rdi, 8 * 0	; new rib
 23216 00010954 E8CF4D0000              	call malloc
 23217 00010959 50                      	push rax
 23218 0001095A BF08000000              	mov rdi, 8 * 1	; extended env
 23219 0001095F E8C44D0000              	call malloc
 23220 00010964 488B7D10                	mov rdi, ENV
 23221 00010968 BE00000000              	mov rsi, 0
 23222 0001096D BA01000000              	mov rdx, 1
 23223                                  .L_lambda_opt_env_loop_00c6:	; ext_env[i + 1] <-- env[i]
 23224 00010972 4883FE00                	cmp rsi, 0
 23225 00010976 7410                    	je .L_lambda_opt_env_end_00c6
 23226 00010978 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23227 0001097C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23228 00010980 48FFC6                  	inc rsi
 23229 00010983 48FFC2                  	inc rdx
 23230 00010986 EBEA                    	jmp .L_lambda_opt_env_loop_00c6
 23231                                  .L_lambda_opt_env_end_00c6:
 23232 00010988 5B                      	pop rbx
 23233 00010989 BE00000000              	mov rsi, 0
 23234                                  .L_lambda_opt_params_loop_00c6:	; copy params
 23235 0001098E 4883FE00                	cmp rsi, 0
 23236 00010992 740E                    	je .L_lambda_opt_params_end_00c6
 23237 00010994 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23238 00010999 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23239 0001099D 48FFC6                  	inc rsi
 23240 000109A0 EBEC                    	jmp .L_lambda_opt_params_loop_00c6
 23241                                  .L_lambda_opt_params_end_00c6:
 23242 000109A2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23243 000109A5 4889C3                  	mov rbx, rax
 23244 000109A8 58                      	pop rax
 23245 000109A9 C60004                  	mov byte [rax], T_closure
 23246 000109AC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23247 000109B0 48C74009[BD090100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00c6
 23248 000109B8 E938010000              	jmp .L_lambda_opt_end_00c6
 23249                                  .L_lambda_opt_code_00c6:	; lambda-simple body
 23250 000109BD 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 23251 000109C3 740D                    	je .L_lambda_opt_arity_check_exact_00c6 ;	 if equal, go to exact arity
 23252 000109C5 7F42                    	jg .L_lambda_opt_arity_check_more_00c6 ;	 if greater than, go to arity more
 23253 000109C7 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 23254 000109CB 6A00                     	push 0
 23255 000109CD E9234D0000              	jmp L_error_incorrect_arity_opt
 23256                                  	.L_lambda_opt_arity_check_exact_00c6:
 23257 000109D2 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 23258 000109D7 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 23259 000109DC 4883EC08                	sub rsp, 8
 23260 000109E0 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 23261                                  	.L_lambda_opt_exact_shifting_loop_00c6:
 23262 000109E4 488B5108                	mov rdx, [rcx + 8]
 23263 000109E8 488911                  	mov [rcx], rdx
 23264 000109EB 4883C108                	add rcx, 8
 23265 000109EF 4839CB                  	cmp rbx, rcx
 23266 000109F2 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00c6
 23267                                  	.L_lambda_opt_exact_shifting_loop_end_00c6:
 23268 000109F4 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 23269 000109FB 4883C001                	add rax, 1 ; 	arg count += 1
 23270 000109FF 4889442410              	mov qword [rsp + 8 * 2], rax
 23271 00010A04 E987000000              	jmp .L_lambda_opt_stack_adjusted_00c6
 23272                                  	.L_lambda_opt_arity_check_more_00c6:
 23273 00010A09 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 23273 00010A0B [0100000000000000] 
 23274 00010A13 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 23275 00010A19 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00c6
 23276                                  	.L_lambda_opt_stack_shrink_loop_00c6:
 23277 00010A1B BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 23278 00010A20 E8034D0000              	call malloc ;	 allocated memory for the optional scheme list
 23279 00010A25 C60021                  	mov byte[rax], T_pair ;	 set type pair
 23280 00010A28 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 23281 00010A2C 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 23282 00010A2F 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 23283 00010A34 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 23284 00010A39 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 23285 00010A3D 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 23286                                  	.L_lambda_opt_more_shifting_loop_00c6:
 23287 00010A42 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 23288 00010A45 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 23289 00010A49 4883EB08                	sub rbx, 8 
 23290 00010A4D 4839DC                  	cmp rsp, rbx
 23291 00010A50 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00c6
 23292                                  	.L_lambda_opt_more_shifting_loop_end_00c6:
 23293 00010A52 4883C408                	add rsp, 8 ;	 update rsp
 23294 00010A56 488B5C2410              	mov rbx, [rsp + 8 * 2]
 23295 00010A5B 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 23296 00010A5F 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 23297 00010A64 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23298 00010A6A 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00c6
 23299                                  	.L_lambda_opt_stack_shrink_loop_exit_00c6:
 23300 00010A6C 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 23301 00010A71 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 23302 00010A76 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 23303 00010A7B E8A84C0000              	call malloc ;	 allocated memory for the optional scheme list
 23304 00010A80 C60021                  	mov byte[rax], T_pair ;	 set type pair
 23305 00010A83 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 23306 00010A87 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 23307 00010A8B 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 23308                                  	.L_lambda_opt_stack_adjusted_00c6:
 23309 00010A90 C8000000                	enter 0, 0
 23310                                  	; preparing a tail-call
 23311 00010A94 488B4520                	mov rax, PARAM(0)	; param s
 23312 00010A98 50                      	push rax
 23313 00010A99 6A01                    	push 1	; arg count
 23314 00010A9B 488B0425[17180000]      	mov rax, qword [free_var_155]	; free var list->vector
 23315 00010AA3 803805                  	cmp byte [rax], T_undefined
 23316 00010AA6 0F844F4B0000            	je L_error_fvar_undefined
 23317 00010AAC 803804                  	cmp byte [rax], T_closure
 23318 00010AAF 0F85CA4B0000            	jne L_error_non_closure
 23319 00010AB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23320                                  
 23321                                  	; recycling the current frame
 23322 00010AB8 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23323 00010ABB FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23324 00010ABE B905000000              	mov rcx, 1 + 4
 23325 00010AC3 488B5D18                	mov rbx, COUNT
 23326 00010AC7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23327 00010ACC 488D55F8                	lea rdx, [rbp - 8 * 1]
 23328                                  .L_tc_recycle_frame_loop_0786:
 23329 00010AD0 4883F900                	cmp rcx, 0
 23330 00010AD4 7413                    	je .L_tc_recycle_frame_done_0786
 23331 00010AD6 488B32                  	mov rsi, qword [rdx]
 23332 00010AD9 488933                  	mov qword [rbx], rsi
 23333 00010ADC 48FFC9                  	dec rcx
 23334 00010ADF 4883EB08                	sub rbx, 8 * 1
 23335 00010AE3 4883EA08                	sub rdx, 8 * 1
 23336 00010AE7 EBE7                    	jmp .L_tc_recycle_frame_loop_0786
 23337                                  .L_tc_recycle_frame_done_0786:
 23338 00010AE9 488D6308                	lea rsp, [rbx + 8 * 1]
 23339 00010AED 5D                      	pop rbp	; the proc will restore it!
 23340 00010AEE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23341 00010AF1 C9                      	leave
 23342 00010AF2 C21800                  	ret AND_KILL_FRAME(1)
 23343                                  .L_lambda_opt_end_00c6:	; new closure is in rax
 23344 00010AF5 48890425[28180000]      	mov qword [free_var_156], rax
 23345 00010AFD 48B8-                   	mov rax, sob_void
 23345 00010AFF [0000000000000000] 
 23346                                  
 23347 00010B07 4889C7                  	mov rdi, rax
 23348 00010B0A E82B4D0000              	call print_sexpr_if_not_void
 23349                                  
 23350 00010B0F 48B8-                   	mov rax, L_constants + 1881
 23350 00010B11 [5907000000000000] 
 23351 00010B19 50                      	push rax
 23352 00010B1A 6A01                    	push 1	; arg count
 23353 00010B1C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23354 00010B21 E8024C0000              	call malloc
 23355 00010B26 50                      	push rax
 23356 00010B27 BF00000000              	mov rdi, 8 * 0	; new rib
 23357 00010B2C E8F74B0000              	call malloc
 23358 00010B31 50                      	push rax
 23359 00010B32 BF08000000              	mov rdi, 8 * 1	; extended env
 23360 00010B37 E8EC4B0000              	call malloc
 23361 00010B3C 488B7D10                	mov rdi, ENV
 23362 00010B40 BE00000000              	mov rsi, 0
 23363 00010B45 BA01000000              	mov rdx, 1
 23364                                  .L_lambda_simple_env_loop_05b2:	; ext_env[i + 1] <-- env[i]
 23365 00010B4A 4883FE00                	cmp rsi, 0
 23366 00010B4E 7410                    	je .L_lambda_simple_env_end_05b2
 23367 00010B50 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23368 00010B54 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23369 00010B58 48FFC6                  	inc rsi
 23370 00010B5B 48FFC2                  	inc rdx
 23371 00010B5E EBEA                    	jmp .L_lambda_simple_env_loop_05b2
 23372                                  .L_lambda_simple_env_end_05b2:
 23373 00010B60 5B                      	pop rbx
 23374 00010B61 BE00000000              	mov rsi, 0
 23375                                  .L_lambda_simple_params_loop_05b2:	; copy params
 23376 00010B66 4883FE00                	cmp rsi, 0
 23377 00010B6A 740E                    	je .L_lambda_simple_params_end_05b2
 23378 00010B6C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23379 00010B71 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23380 00010B75 48FFC6                  	inc rsi
 23381 00010B78 EBEC                    	jmp .L_lambda_simple_params_loop_05b2
 23382                                  .L_lambda_simple_params_end_05b2:
 23383 00010B7A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23384 00010B7D 4889C3                  	mov rbx, rax
 23385 00010B80 58                      	pop rax
 23386 00010B81 C60004                  	mov byte [rax], T_closure
 23387 00010B84 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23388 00010B88 48C74009[950B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05b2
 23389 00010B90 E924030000              	jmp .L_lambda_simple_end_05b2
 23390                                  .L_lambda_simple_code_05b2:	; lambda-simple body
 23391 00010B95 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23392 00010B9B 740B                    	je .L_lambda_simple_arity_check_ok_05b2
 23393 00010B9D FF742410                	push qword [rsp + 8 * 2]
 23394 00010BA1 6A01                    	push 1
 23395 00010BA3 E9394B0000              	jmp L_error_incorrect_arity_simple
 23396                                  .L_lambda_simple_arity_check_ok_05b2:
 23397 00010BA8 C8000000                	enter 0, 0
 23398                                  
 23399 00010BAC BF08000000              	mov rdi, 8
 23400 00010BB1 E8724B0000              	call malloc
 23401 00010BB6 488B5D20                	mov rbx, PARAM(0)	; param run
 23402 00010BBA 488918                  	mov [rax], rbx	; box run
 23403 00010BBD 48894520                	mov PARAM(0), rax	;replace param run with box
 23404 00010BC1 48B8-                   	mov rax, sob_void
 23404 00010BC3 [0000000000000000] 
 23405                                  
 23406 00010BCB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23407 00010BD0 E8534B0000              	call malloc
 23408 00010BD5 50                      	push rax
 23409 00010BD6 BF08000000              	mov rdi, 8 * 1	; new rib
 23410 00010BDB E8484B0000              	call malloc
 23411 00010BE0 50                      	push rax
 23412 00010BE1 BF10000000              	mov rdi, 8 * 2	; extended env
 23413 00010BE6 E83D4B0000              	call malloc
 23414 00010BEB 488B7D10                	mov rdi, ENV
 23415 00010BEF BE00000000              	mov rsi, 0
 23416 00010BF4 BA01000000              	mov rdx, 1
 23417                                  .L_lambda_simple_env_loop_05b3:	; ext_env[i + 1] <-- env[i]
 23418 00010BF9 4883FE01                	cmp rsi, 1
 23419 00010BFD 7410                    	je .L_lambda_simple_env_end_05b3
 23420 00010BFF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23421 00010C03 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23422 00010C07 48FFC6                  	inc rsi
 23423 00010C0A 48FFC2                  	inc rdx
 23424 00010C0D EBEA                    	jmp .L_lambda_simple_env_loop_05b3
 23425                                  .L_lambda_simple_env_end_05b3:
 23426 00010C0F 5B                      	pop rbx
 23427 00010C10 BE00000000              	mov rsi, 0
 23428                                  .L_lambda_simple_params_loop_05b3:	; copy params
 23429 00010C15 4883FE01                	cmp rsi, 1
 23430 00010C19 740E                    	je .L_lambda_simple_params_end_05b3
 23431 00010C1B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23432 00010C20 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23433 00010C24 48FFC6                  	inc rsi
 23434 00010C27 EBEC                    	jmp .L_lambda_simple_params_loop_05b3
 23435                                  .L_lambda_simple_params_end_05b3:
 23436 00010C29 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23437 00010C2C 4889C3                  	mov rbx, rax
 23438 00010C2F 58                      	pop rax
 23439 00010C30 C60004                  	mov byte [rax], T_closure
 23440 00010C33 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23441 00010C37 48C74009[440C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05b3
 23442 00010C3F E940010000              	jmp .L_lambda_simple_end_05b3
 23443                                  .L_lambda_simple_code_05b3:	; lambda-simple body
 23444 00010C44 48837C241003            	cmp qword [rsp + 8 * 2], 3
 23445 00010C4A 740B                    	je .L_lambda_simple_arity_check_ok_05b3
 23446 00010C4C FF742410                	push qword [rsp + 8 * 2]
 23447 00010C50 6A03                    	push 3
 23448 00010C52 E98A4A0000              	jmp L_error_incorrect_arity_simple
 23449                                  .L_lambda_simple_arity_check_ok_05b3:
 23450 00010C57 C8000000                	enter 0, 0
 23451 00010C5B 488B4530                	mov rax, PARAM(2)	; param n
 23452 00010C5F 50                      	push rax
 23453 00010C60 488B4528                	mov rax, PARAM(1)	; param i
 23454 00010C64 50                      	push rax
 23455 00010C65 6A02                    	push 2	; arg count
 23456 00010C67 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 23457 00010C6F 803805                  	cmp byte [rax], T_undefined
 23458 00010C72 0F8483490000            	je L_error_fvar_undefined
 23459 00010C78 803804                  	cmp byte [rax], T_closure
 23460 00010C7B 0F85FE490000            	jne L_error_non_closure
 23461 00010C81 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23462 00010C84 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23463                                  
 23464 00010C87 483D[02000000]          	cmp rax, sob_boolean_false
 23465 00010C8D 0F84E3000000            	je .L_if_else_0439
 23466                                  	; preparing a tail-call
 23467 00010C93 488B4530                	mov rax, PARAM(2)	; param n
 23468 00010C97 50                      	push rax
 23469 00010C98 48B8-                   	mov rax, L_constants + 2158
 23469 00010C9A [6E08000000000000] 
 23470 00010CA2 50                      	push rax
 23471 00010CA3 488B4528                	mov rax, PARAM(1)	; param i
 23472 00010CA7 50                      	push rax
 23473 00010CA8 6A02                    	push 2	; arg count
 23474 00010CAA 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 23475 00010CB2 803805                  	cmp byte [rax], T_undefined
 23476 00010CB5 0F8440490000            	je L_error_fvar_undefined
 23477 00010CBB 803804                  	cmp byte [rax], T_closure
 23478 00010CBE 0F85BB490000            	jne L_error_non_closure
 23479 00010CC4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23480 00010CC7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23481 00010CCA 50                      	push rax
 23482 00010CCB 488B4520                	mov rax, PARAM(0)	; param str
 23483 00010CCF 50                      	push rax
 23484 00010CD0 6A03                    	push 3	; arg count
 23485 00010CD2 488B4510                	mov rax, ENV
 23486 00010CD6 488B00                  	mov rax, qword [rax + 8 * 0]
 23487 00010CD9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23488 00010CDC 488B00                  	mov rax, qword [rax]
 23489 00010CDF 803804                  	cmp byte [rax], T_closure
 23490 00010CE2 0F8597490000            	jne L_error_non_closure
 23491 00010CE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23492 00010CEB FF5009                  	call SOB_CLOSURE_CODE(rax)
 23493 00010CEE 50                      	push rax
 23494 00010CEF 488B4528                	mov rax, PARAM(1)	; param i
 23495 00010CF3 50                      	push rax
 23496 00010CF4 488B4520                	mov rax, PARAM(0)	; param str
 23497 00010CF8 50                      	push rax
 23498 00010CF9 6A02                    	push 2	; arg count
 23499 00010CFB 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 23500 00010D03 803805                  	cmp byte [rax], T_undefined
 23501 00010D06 0F84EF480000            	je L_error_fvar_undefined
 23502 00010D0C 803804                  	cmp byte [rax], T_closure
 23503 00010D0F 0F856A490000            	jne L_error_non_closure
 23504 00010D15 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23505 00010D18 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23506 00010D1B 50                      	push rax
 23507 00010D1C 6A02                    	push 2	; arg count
 23508 00010D1E 488B0425[A90E0000]      	mov rax, qword [free_var_13]	; free var cons
 23509 00010D26 803805                  	cmp byte [rax], T_undefined
 23510 00010D29 0F84CC480000            	je L_error_fvar_undefined
 23511 00010D2F 803804                  	cmp byte [rax], T_closure
 23512 00010D32 0F8547490000            	jne L_error_non_closure
 23513 00010D38 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23514                                  
 23515                                  	; recycling the current frame
 23516 00010D3B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23517 00010D3E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23518 00010D41 B906000000              	mov rcx, 2 + 4
 23519 00010D46 488B5D18                	mov rbx, COUNT
 23520 00010D4A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23521 00010D4F 488D55F8                	lea rdx, [rbp - 8 * 1]
 23522                                  .L_tc_recycle_frame_loop_0787:
 23523 00010D53 4883F900                	cmp rcx, 0
 23524 00010D57 7413                    	je .L_tc_recycle_frame_done_0787
 23525 00010D59 488B32                  	mov rsi, qword [rdx]
 23526 00010D5C 488933                  	mov qword [rbx], rsi
 23527 00010D5F 48FFC9                  	dec rcx
 23528 00010D62 4883EB08                	sub rbx, 8 * 1
 23529 00010D66 4883EA08                	sub rdx, 8 * 1
 23530 00010D6A EBE7                    	jmp .L_tc_recycle_frame_loop_0787
 23531                                  .L_tc_recycle_frame_done_0787:
 23532 00010D6C 488D6308                	lea rsp, [rbx + 8 * 1]
 23533 00010D70 5D                      	pop rbp	; the proc will restore it!
 23534 00010D71 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23535                                  
 23536 00010D74 EB0A                    	jmp .L_if_end_0439
 23537                                  
 23538                                  	.L_if_else_0439:
 23539 00010D76 48B8-                   	mov rax, L_constants + 1
 23539 00010D78 [0100000000000000] 
 23540                                  
 23541                                  	.L_if_end_0439:
 23542 00010D80 C9                      	leave
 23543 00010D81 C22800                  	ret AND_KILL_FRAME(3)
 23544                                  .L_lambda_simple_end_05b3:	; new closure is in rax
 23545                                  
 23546 00010D84 50                      	push rax
 23547 00010D85 488B4520                	mov rax, PARAM(0)	; param run
 23548                                  
 23549 00010D89 8F00                    	pop qword[rax]
 23550 00010D8B 48B8-                   	mov rax, sob_void
 23550 00010D8D [0000000000000000] 
 23551                                  
 23552 00010D95 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23553 00010D9A E889490000              	call malloc
 23554 00010D9F 50                      	push rax
 23555 00010DA0 BF08000000              	mov rdi, 8 * 1	; new rib
 23556 00010DA5 E87E490000              	call malloc
 23557 00010DAA 50                      	push rax
 23558 00010DAB BF10000000              	mov rdi, 8 * 2	; extended env
 23559 00010DB0 E873490000              	call malloc
 23560 00010DB5 488B7D10                	mov rdi, ENV
 23561 00010DB9 BE00000000              	mov rsi, 0
 23562 00010DBE BA01000000              	mov rdx, 1
 23563                                  .L_lambda_simple_env_loop_05b4:	; ext_env[i + 1] <-- env[i]
 23564 00010DC3 4883FE01                	cmp rsi, 1
 23565 00010DC7 7410                    	je .L_lambda_simple_env_end_05b4
 23566 00010DC9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23567 00010DCD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23568 00010DD1 48FFC6                  	inc rsi
 23569 00010DD4 48FFC2                  	inc rdx
 23570 00010DD7 EBEA                    	jmp .L_lambda_simple_env_loop_05b4
 23571                                  .L_lambda_simple_env_end_05b4:
 23572 00010DD9 5B                      	pop rbx
 23573 00010DDA BE00000000              	mov rsi, 0
 23574                                  .L_lambda_simple_params_loop_05b4:	; copy params
 23575 00010DDF 4883FE01                	cmp rsi, 1
 23576 00010DE3 740E                    	je .L_lambda_simple_params_end_05b4
 23577 00010DE5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23578 00010DEA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23579 00010DEE 48FFC6                  	inc rsi
 23580 00010DF1 EBEC                    	jmp .L_lambda_simple_params_loop_05b4
 23581                                  .L_lambda_simple_params_end_05b4:
 23582 00010DF3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23583 00010DF6 4889C3                  	mov rbx, rax
 23584 00010DF9 58                      	pop rax
 23585 00010DFA C60004                  	mov byte [rax], T_closure
 23586 00010DFD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23587 00010E01 48C74009[0E0E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05b4
 23588 00010E09 E9A7000000              	jmp .L_lambda_simple_end_05b4
 23589                                  .L_lambda_simple_code_05b4:	; lambda-simple body
 23590 00010E0E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23591 00010E14 740B                    	je .L_lambda_simple_arity_check_ok_05b4
 23592 00010E16 FF742410                	push qword [rsp + 8 * 2]
 23593 00010E1A 6A01                    	push 1
 23594 00010E1C E9C0480000              	jmp L_error_incorrect_arity_simple
 23595                                  .L_lambda_simple_arity_check_ok_05b4:
 23596 00010E21 C8000000                	enter 0, 0
 23597                                  	; preparing a tail-call
 23598 00010E25 488B4520                	mov rax, PARAM(0)	; param str
 23599 00010E29 50                      	push rax
 23600 00010E2A 6A01                    	push 1	; arg count
 23601 00010E2C 488B0425[FE0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 23602 00010E34 803805                  	cmp byte [rax], T_undefined
 23603 00010E37 0F84BE470000            	je L_error_fvar_undefined
 23604 00010E3D 803804                  	cmp byte [rax], T_closure
 23605 00010E40 0F8539480000            	jne L_error_non_closure
 23606 00010E46 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23607 00010E49 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23608 00010E4C 50                      	push rax
 23609 00010E4D 48B8-                   	mov rax, L_constants + 2023
 23609 00010E4F [E707000000000000] 
 23610 00010E57 50                      	push rax
 23611 00010E58 488B4520                	mov rax, PARAM(0)	; param str
 23612 00010E5C 50                      	push rax
 23613 00010E5D 6A03                    	push 3	; arg count
 23614 00010E5F 488B4510                	mov rax, ENV
 23615 00010E63 488B00                  	mov rax, qword [rax + 8 * 0]
 23616 00010E66 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23617 00010E69 488B00                  	mov rax, qword [rax]
 23618 00010E6C 803804                  	cmp byte [rax], T_closure
 23619 00010E6F 0F850A480000            	jne L_error_non_closure
 23620 00010E75 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23621                                  
 23622                                  	; recycling the current frame
 23623 00010E78 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23624 00010E7B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23625 00010E7E B907000000              	mov rcx, 3 + 4
 23626 00010E83 488B5D18                	mov rbx, COUNT
 23627 00010E87 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23628 00010E8C 488D55F8                	lea rdx, [rbp - 8 * 1]
 23629                                  .L_tc_recycle_frame_loop_0788:
 23630 00010E90 4883F900                	cmp rcx, 0
 23631 00010E94 7413                    	je .L_tc_recycle_frame_done_0788
 23632 00010E96 488B32                  	mov rsi, qword [rdx]
 23633 00010E99 488933                  	mov qword [rbx], rsi
 23634 00010E9C 48FFC9                  	dec rcx
 23635 00010E9F 4883EB08                	sub rbx, 8 * 1
 23636 00010EA3 4883EA08                	sub rdx, 8 * 1
 23637 00010EA7 EBE7                    	jmp .L_tc_recycle_frame_loop_0788
 23638                                  .L_tc_recycle_frame_done_0788:
 23639 00010EA9 488D6308                	lea rsp, [rbx + 8 * 1]
 23640 00010EAD 5D                      	pop rbp	; the proc will restore it!
 23641 00010EAE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23642 00010EB1 C9                      	leave
 23643 00010EB2 C21800                  	ret AND_KILL_FRAME(1)
 23644                                  .L_lambda_simple_end_05b4:	; new closure is in rax
 23645 00010EB5 C9                      	leave
 23646 00010EB6 C21800                  	ret AND_KILL_FRAME(1)
 23647                                  .L_lambda_simple_end_05b2:	; new closure is in rax
 23648 00010EB9 803804                  	cmp byte [rax], T_closure
 23649 00010EBC 0F85BD470000            	jne L_error_non_closure
 23650 00010EC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23651 00010EC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23652 00010EC8 48890425[4B170000]      	mov qword [free_var_143], rax
 23653 00010ED0 48B8-                   	mov rax, sob_void
 23653 00010ED2 [0000000000000000] 
 23654                                  
 23655 00010EDA 4889C7                  	mov rdi, rax
 23656 00010EDD E858490000              	call print_sexpr_if_not_void
 23657                                  
 23658 00010EE2 48B8-                   	mov rax, L_constants + 1881
 23658 00010EE4 [5907000000000000] 
 23659 00010EEC 50                      	push rax
 23660 00010EED 6A01                    	push 1	; arg count
 23661 00010EEF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23662 00010EF4 E82F480000              	call malloc
 23663 00010EF9 50                      	push rax
 23664 00010EFA BF00000000              	mov rdi, 8 * 0	; new rib
 23665 00010EFF E824480000              	call malloc
 23666 00010F04 50                      	push rax
 23667 00010F05 BF08000000              	mov rdi, 8 * 1	; extended env
 23668 00010F0A E819480000              	call malloc
 23669 00010F0F 488B7D10                	mov rdi, ENV
 23670 00010F13 BE00000000              	mov rsi, 0
 23671 00010F18 BA01000000              	mov rdx, 1
 23672                                  .L_lambda_simple_env_loop_05b5:	; ext_env[i + 1] <-- env[i]
 23673 00010F1D 4883FE00                	cmp rsi, 0
 23674 00010F21 7410                    	je .L_lambda_simple_env_end_05b5
 23675 00010F23 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23676 00010F27 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23677 00010F2B 48FFC6                  	inc rsi
 23678 00010F2E 48FFC2                  	inc rdx
 23679 00010F31 EBEA                    	jmp .L_lambda_simple_env_loop_05b5
 23680                                  .L_lambda_simple_env_end_05b5:
 23681 00010F33 5B                      	pop rbx
 23682 00010F34 BE00000000              	mov rsi, 0
 23683                                  .L_lambda_simple_params_loop_05b5:	; copy params
 23684 00010F39 4883FE00                	cmp rsi, 0
 23685 00010F3D 740E                    	je .L_lambda_simple_params_end_05b5
 23686 00010F3F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23687 00010F44 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23688 00010F48 48FFC6                  	inc rsi
 23689 00010F4B EBEC                    	jmp .L_lambda_simple_params_loop_05b5
 23690                                  .L_lambda_simple_params_end_05b5:
 23691 00010F4D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23692 00010F50 4889C3                  	mov rbx, rax
 23693 00010F53 58                      	pop rax
 23694 00010F54 C60004                  	mov byte [rax], T_closure
 23695 00010F57 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23696 00010F5B 48C74009[680F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05b5
 23697 00010F63 E924030000              	jmp .L_lambda_simple_end_05b5
 23698                                  .L_lambda_simple_code_05b5:	; lambda-simple body
 23699 00010F68 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23700 00010F6E 740B                    	je .L_lambda_simple_arity_check_ok_05b5
 23701 00010F70 FF742410                	push qword [rsp + 8 * 2]
 23702 00010F74 6A01                    	push 1
 23703 00010F76 E966470000              	jmp L_error_incorrect_arity_simple
 23704                                  .L_lambda_simple_arity_check_ok_05b5:
 23705 00010F7B C8000000                	enter 0, 0
 23706                                  
 23707 00010F7F BF08000000              	mov rdi, 8
 23708 00010F84 E89F470000              	call malloc
 23709 00010F89 488B5D20                	mov rbx, PARAM(0)	; param run
 23710 00010F8D 488918                  	mov [rax], rbx	; box run
 23711 00010F90 48894520                	mov PARAM(0), rax	;replace param run with box
 23712 00010F94 48B8-                   	mov rax, sob_void
 23712 00010F96 [0000000000000000] 
 23713                                  
 23714 00010F9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23715 00010FA3 E880470000              	call malloc
 23716 00010FA8 50                      	push rax
 23717 00010FA9 BF08000000              	mov rdi, 8 * 1	; new rib
 23718 00010FAE E875470000              	call malloc
 23719 00010FB3 50                      	push rax
 23720 00010FB4 BF10000000              	mov rdi, 8 * 2	; extended env
 23721 00010FB9 E86A470000              	call malloc
 23722 00010FBE 488B7D10                	mov rdi, ENV
 23723 00010FC2 BE00000000              	mov rsi, 0
 23724 00010FC7 BA01000000              	mov rdx, 1
 23725                                  .L_lambda_simple_env_loop_05b6:	; ext_env[i + 1] <-- env[i]
 23726 00010FCC 4883FE01                	cmp rsi, 1
 23727 00010FD0 7410                    	je .L_lambda_simple_env_end_05b6
 23728 00010FD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23729 00010FD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23730 00010FDA 48FFC6                  	inc rsi
 23731 00010FDD 48FFC2                  	inc rdx
 23732 00010FE0 EBEA                    	jmp .L_lambda_simple_env_loop_05b6
 23733                                  .L_lambda_simple_env_end_05b6:
 23734 00010FE2 5B                      	pop rbx
 23735 00010FE3 BE00000000              	mov rsi, 0
 23736                                  .L_lambda_simple_params_loop_05b6:	; copy params
 23737 00010FE8 4883FE01                	cmp rsi, 1
 23738 00010FEC 740E                    	je .L_lambda_simple_params_end_05b6
 23739 00010FEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23740 00010FF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23741 00010FF7 48FFC6                  	inc rsi
 23742 00010FFA EBEC                    	jmp .L_lambda_simple_params_loop_05b6
 23743                                  .L_lambda_simple_params_end_05b6:
 23744 00010FFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23745 00010FFF 4889C3                  	mov rbx, rax
 23746 00011002 58                      	pop rax
 23747 00011003 C60004                  	mov byte [rax], T_closure
 23748 00011006 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23749 0001100A 48C74009[17100100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05b6
 23750 00011012 E940010000              	jmp .L_lambda_simple_end_05b6
 23751                                  .L_lambda_simple_code_05b6:	; lambda-simple body
 23752 00011017 48837C241003            	cmp qword [rsp + 8 * 2], 3
 23753 0001101D 740B                    	je .L_lambda_simple_arity_check_ok_05b6
 23754 0001101F FF742410                	push qword [rsp + 8 * 2]
 23755 00011023 6A03                    	push 3
 23756 00011025 E9B7460000              	jmp L_error_incorrect_arity_simple
 23757                                  .L_lambda_simple_arity_check_ok_05b6:
 23758 0001102A C8000000                	enter 0, 0
 23759 0001102E 488B4530                	mov rax, PARAM(2)	; param n
 23760 00011032 50                      	push rax
 23761 00011033 488B4528                	mov rax, PARAM(1)	; param i
 23762 00011037 50                      	push rax
 23763 00011038 6A02                    	push 2	; arg count
 23764 0001103A 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 23765 00011042 803805                  	cmp byte [rax], T_undefined
 23766 00011045 0F84B0450000            	je L_error_fvar_undefined
 23767 0001104B 803804                  	cmp byte [rax], T_closure
 23768 0001104E 0F852B460000            	jne L_error_non_closure
 23769 00011054 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23770 00011057 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23771                                  
 23772 0001105A 483D[02000000]          	cmp rax, sob_boolean_false
 23773 00011060 0F84E3000000            	je .L_if_else_043a
 23774                                  	; preparing a tail-call
 23775 00011066 488B4530                	mov rax, PARAM(2)	; param n
 23776 0001106A 50                      	push rax
 23777 0001106B 48B8-                   	mov rax, L_constants + 2158
 23777 0001106D [6E08000000000000] 
 23778 00011075 50                      	push rax
 23779 00011076 488B4528                	mov rax, PARAM(1)	; param i
 23780 0001107A 50                      	push rax
 23781 0001107B 6A02                    	push 2	; arg count
 23782 0001107D 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 23783 00011085 803805                  	cmp byte [rax], T_undefined
 23784 00011088 0F846D450000            	je L_error_fvar_undefined
 23785 0001108E 803804                  	cmp byte [rax], T_closure
 23786 00011091 0F85E8450000            	jne L_error_non_closure
 23787 00011097 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23788 0001109A FF5009                  	call SOB_CLOSURE_CODE(rax)
 23789 0001109D 50                      	push rax
 23790 0001109E 488B4520                	mov rax, PARAM(0)	; param v
 23791 000110A2 50                      	push rax
 23792 000110A3 6A03                    	push 3	; arg count
 23793 000110A5 488B4510                	mov rax, ENV
 23794 000110A9 488B00                  	mov rax, qword [rax + 8 * 0]
 23795 000110AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23796 000110AF 488B00                  	mov rax, qword [rax]
 23797 000110B2 803804                  	cmp byte [rax], T_closure
 23798 000110B5 0F85C4450000            	jne L_error_non_closure
 23799 000110BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 23800 000110BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 23801 000110C1 50                      	push rax
 23802 000110C2 488B4528                	mov rax, PARAM(1)	; param i
 23803 000110C6 50                      	push rax
 23804 000110C7 488B4520                	mov rax, PARAM(0)	; param v
 23805 000110CB 50                      	push rax
 23806 000110CC 6A02                    	push 2	; arg count
 23807 000110CE 488B0425[62110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 23808 000110D6 803805                  	cmp byte [rax], T_undefined
 23809 000110D9 0F841C450000            	je L_error_fvar_undefined
 23810 000110DF 803804                  	cmp byte [rax], T_closure
 23811 000110E2 0F8597450000            	jne L_error_non_closure
 23812 000110E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23813 000110EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 23814 000110EE 50                      	push rax
 23815 000110EF 6A02                    	push 2	; arg count
 23816 000110F1 488B0425[A90E0000]      	mov rax, qword [free_var_13]	; free var cons
 23817 000110F9 803805                  	cmp byte [rax], T_undefined
 23818 000110FC 0F84F9440000            	je L_error_fvar_undefined
 23819 00011102 803804                  	cmp byte [rax], T_closure
 23820 00011105 0F8574450000            	jne L_error_non_closure
 23821 0001110B FF7001                  	push SOB_CLOSURE_ENV(rax)
 23822                                  
 23823                                  	; recycling the current frame
 23824 0001110E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23825 00011111 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23826 00011114 B906000000              	mov rcx, 2 + 4
 23827 00011119 488B5D18                	mov rbx, COUNT
 23828 0001111D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23829 00011122 488D55F8                	lea rdx, [rbp - 8 * 1]
 23830                                  .L_tc_recycle_frame_loop_0789:
 23831 00011126 4883F900                	cmp rcx, 0
 23832 0001112A 7413                    	je .L_tc_recycle_frame_done_0789
 23833 0001112C 488B32                  	mov rsi, qword [rdx]
 23834 0001112F 488933                  	mov qword [rbx], rsi
 23835 00011132 48FFC9                  	dec rcx
 23836 00011135 4883EB08                	sub rbx, 8 * 1
 23837 00011139 4883EA08                	sub rdx, 8 * 1
 23838 0001113D EBE7                    	jmp .L_tc_recycle_frame_loop_0789
 23839                                  .L_tc_recycle_frame_done_0789:
 23840 0001113F 488D6308                	lea rsp, [rbx + 8 * 1]
 23841 00011143 5D                      	pop rbp	; the proc will restore it!
 23842 00011144 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23843                                  
 23844 00011147 EB0A                    	jmp .L_if_end_043a
 23845                                  
 23846                                  	.L_if_else_043a:
 23847 00011149 48B8-                   	mov rax, L_constants + 1
 23847 0001114B [0100000000000000] 
 23848                                  
 23849                                  	.L_if_end_043a:
 23850 00011153 C9                      	leave
 23851 00011154 C22800                  	ret AND_KILL_FRAME(3)
 23852                                  .L_lambda_simple_end_05b6:	; new closure is in rax
 23853                                  
 23854 00011157 50                      	push rax
 23855 00011158 488B4520                	mov rax, PARAM(0)	; param run
 23856                                  
 23857 0001115C 8F00                    	pop qword[rax]
 23858 0001115E 48B8-                   	mov rax, sob_void
 23858 00011160 [0000000000000000] 
 23859                                  
 23860 00011168 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23861 0001116D E8B6450000              	call malloc
 23862 00011172 50                      	push rax
 23863 00011173 BF08000000              	mov rdi, 8 * 1	; new rib
 23864 00011178 E8AB450000              	call malloc
 23865 0001117D 50                      	push rax
 23866 0001117E BF10000000              	mov rdi, 8 * 2	; extended env
 23867 00011183 E8A0450000              	call malloc
 23868 00011188 488B7D10                	mov rdi, ENV
 23869 0001118C BE00000000              	mov rsi, 0
 23870 00011191 BA01000000              	mov rdx, 1
 23871                                  .L_lambda_simple_env_loop_05b7:	; ext_env[i + 1] <-- env[i]
 23872 00011196 4883FE01                	cmp rsi, 1
 23873 0001119A 7410                    	je .L_lambda_simple_env_end_05b7
 23874 0001119C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23875 000111A0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23876 000111A4 48FFC6                  	inc rsi
 23877 000111A7 48FFC2                  	inc rdx
 23878 000111AA EBEA                    	jmp .L_lambda_simple_env_loop_05b7
 23879                                  .L_lambda_simple_env_end_05b7:
 23880 000111AC 5B                      	pop rbx
 23881 000111AD BE00000000              	mov rsi, 0
 23882                                  .L_lambda_simple_params_loop_05b7:	; copy params
 23883 000111B2 4883FE01                	cmp rsi, 1
 23884 000111B6 740E                    	je .L_lambda_simple_params_end_05b7
 23885 000111B8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23886 000111BD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23887 000111C1 48FFC6                  	inc rsi
 23888 000111C4 EBEC                    	jmp .L_lambda_simple_params_loop_05b7
 23889                                  .L_lambda_simple_params_end_05b7:
 23890 000111C6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23891 000111C9 4889C3                  	mov rbx, rax
 23892 000111CC 58                      	pop rax
 23893 000111CD C60004                  	mov byte [rax], T_closure
 23894 000111D0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23895 000111D4 48C74009[E1110100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05b7
 23896 000111DC E9A7000000              	jmp .L_lambda_simple_end_05b7
 23897                                  .L_lambda_simple_code_05b7:	; lambda-simple body
 23898 000111E1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23899 000111E7 740B                    	je .L_lambda_simple_arity_check_ok_05b7
 23900 000111E9 FF742410                	push qword [rsp + 8 * 2]
 23901 000111ED 6A01                    	push 1
 23902 000111EF E9ED440000              	jmp L_error_incorrect_arity_simple
 23903                                  .L_lambda_simple_arity_check_ok_05b7:
 23904 000111F4 C8000000                	enter 0, 0
 23905                                  	; preparing a tail-call
 23906 000111F8 488B4520                	mov rax, PARAM(0)	; param v
 23907 000111FC 50                      	push rax
 23908 000111FD 6A01                    	push 1	; arg count
 23909 000111FF 488B0425[0F0F0000]      	mov rax, qword [free_var_19]	; free var vector-length
 23910 00011207 803805                  	cmp byte [rax], T_undefined
 23911 0001120A 0F84EB430000            	je L_error_fvar_undefined
 23912 00011210 803804                  	cmp byte [rax], T_closure
 23913 00011213 0F8566440000            	jne L_error_non_closure
 23914 00011219 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23915 0001121C FF5009                  	call SOB_CLOSURE_CODE(rax)
 23916 0001121F 50                      	push rax
 23917 00011220 48B8-                   	mov rax, L_constants + 2023
 23917 00011222 [E707000000000000] 
 23918 0001122A 50                      	push rax
 23919 0001122B 488B4520                	mov rax, PARAM(0)	; param v
 23920 0001122F 50                      	push rax
 23921 00011230 6A03                    	push 3	; arg count
 23922 00011232 488B4510                	mov rax, ENV
 23923 00011236 488B00                  	mov rax, qword [rax + 8 * 0]
 23924 00011239 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 23925 0001123C 488B00                  	mov rax, qword [rax]
 23926 0001123F 803804                  	cmp byte [rax], T_closure
 23927 00011242 0F8537440000            	jne L_error_non_closure
 23928 00011248 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23929                                  
 23930                                  	; recycling the current frame
 23931 0001124B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 23932 0001124E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 23933 00011251 B907000000              	mov rcx, 3 + 4
 23934 00011256 488B5D18                	mov rbx, COUNT
 23935 0001125A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 23936 0001125F 488D55F8                	lea rdx, [rbp - 8 * 1]
 23937                                  .L_tc_recycle_frame_loop_078a:
 23938 00011263 4883F900                	cmp rcx, 0
 23939 00011267 7413                    	je .L_tc_recycle_frame_done_078a
 23940 00011269 488B32                  	mov rsi, qword [rdx]
 23941 0001126C 488933                  	mov qword [rbx], rsi
 23942 0001126F 48FFC9                  	dec rcx
 23943 00011272 4883EB08                	sub rbx, 8 * 1
 23944 00011276 4883EA08                	sub rdx, 8 * 1
 23945 0001127A EBE7                    	jmp .L_tc_recycle_frame_loop_078a
 23946                                  .L_tc_recycle_frame_done_078a:
 23947 0001127C 488D6308                	lea rsp, [rbx + 8 * 1]
 23948 00011280 5D                      	pop rbp	; the proc will restore it!
 23949 00011281 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23950 00011284 C9                      	leave
 23951 00011285 C21800                  	ret AND_KILL_FRAME(1)
 23952                                  .L_lambda_simple_end_05b7:	; new closure is in rax
 23953 00011288 C9                      	leave
 23954 00011289 C21800                  	ret AND_KILL_FRAME(1)
 23955                                  .L_lambda_simple_end_05b5:	; new closure is in rax
 23956 0001128C 803804                  	cmp byte [rax], T_closure
 23957 0001128F 0F85EA430000            	jne L_error_non_closure
 23958 00011295 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23959 00011298 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23960 0001129B 48890425[39180000]      	mov qword [free_var_157], rax
 23961 000112A3 48B8-                   	mov rax, sob_void
 23961 000112A5 [0000000000000000] 
 23962                                  
 23963 000112AD 4889C7                  	mov rdi, rax
 23964 000112B0 E885450000              	call print_sexpr_if_not_void
 23965                                  
 23966 000112B5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23967 000112BA E869440000              	call malloc
 23968 000112BF 50                      	push rax
 23969 000112C0 BF00000000              	mov rdi, 8 * 0	; new rib
 23970 000112C5 E85E440000              	call malloc
 23971 000112CA 50                      	push rax
 23972 000112CB BF08000000              	mov rdi, 8 * 1	; extended env
 23973 000112D0 E853440000              	call malloc
 23974 000112D5 488B7D10                	mov rdi, ENV
 23975 000112D9 BE00000000              	mov rsi, 0
 23976 000112DE BA01000000              	mov rdx, 1
 23977                                  .L_lambda_simple_env_loop_05b8:	; ext_env[i + 1] <-- env[i]
 23978 000112E3 4883FE00                	cmp rsi, 0
 23979 000112E7 7410                    	je .L_lambda_simple_env_end_05b8
 23980 000112E9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23981 000112ED 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23982 000112F1 48FFC6                  	inc rsi
 23983 000112F4 48FFC2                  	inc rdx
 23984 000112F7 EBEA                    	jmp .L_lambda_simple_env_loop_05b8
 23985                                  .L_lambda_simple_env_end_05b8:
 23986 000112F9 5B                      	pop rbx
 23987 000112FA BE00000000              	mov rsi, 0
 23988                                  .L_lambda_simple_params_loop_05b8:	; copy params
 23989 000112FF 4883FE00                	cmp rsi, 0
 23990 00011303 740E                    	je .L_lambda_simple_params_end_05b8
 23991 00011305 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23992 0001130A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23993 0001130E 48FFC6                  	inc rsi
 23994 00011311 EBEC                    	jmp .L_lambda_simple_params_loop_05b8
 23995                                  .L_lambda_simple_params_end_05b8:
 23996 00011313 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23997 00011316 4889C3                  	mov rbx, rax
 23998 00011319 58                      	pop rax
 23999 0001131A C60004                  	mov byte [rax], T_closure
 24000 0001131D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24001 00011321 48C74009[2E130100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05b8
 24002 00011329 E99B000000              	jmp .L_lambda_simple_end_05b8
 24003                                  .L_lambda_simple_code_05b8:	; lambda-simple body
 24004 0001132E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24005 00011334 740B                    	je .L_lambda_simple_arity_check_ok_05b8
 24006 00011336 FF742410                	push qword [rsp + 8 * 2]
 24007 0001133A 6A01                    	push 1
 24008 0001133C E9A0430000              	jmp L_error_incorrect_arity_simple
 24009                                  .L_lambda_simple_arity_check_ok_05b8:
 24010 00011341 C8000000                	enter 0, 0
 24011                                  	; preparing a tail-call
 24012 00011345 488B4520                	mov rax, PARAM(0)	; param n
 24013 00011349 50                      	push rax
 24014 0001134A 6A00                    	push 0	; arg count
 24015 0001134C 488B0425[860F0000]      	mov rax, qword [free_var_26]	; free var trng
 24016 00011354 803805                  	cmp byte [rax], T_undefined
 24017 00011357 0F849E420000            	je L_error_fvar_undefined
 24018 0001135D 803804                  	cmp byte [rax], T_closure
 24019 00011360 0F8519430000            	jne L_error_non_closure
 24020 00011366 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24021 00011369 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24022 0001136C 50                      	push rax
 24023 0001136D 6A02                    	push 2	; arg count
 24024 0001136F 488B0425[1E110000]      	mov rax, qword [free_var_50]	; free var remainder
 24025 00011377 803805                  	cmp byte [rax], T_undefined
 24026 0001137A 0F847B420000            	je L_error_fvar_undefined
 24027 00011380 803804                  	cmp byte [rax], T_closure
 24028 00011383 0F85F6420000            	jne L_error_non_closure
 24029 00011389 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24030                                  
 24031                                  	; recycling the current frame
 24032 0001138C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24033 0001138F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24034 00011392 B906000000              	mov rcx, 2 + 4
 24035 00011397 488B5D18                	mov rbx, COUNT
 24036 0001139B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24037 000113A0 488D55F8                	lea rdx, [rbp - 8 * 1]
 24038                                  .L_tc_recycle_frame_loop_078b:
 24039 000113A4 4883F900                	cmp rcx, 0
 24040 000113A8 7413                    	je .L_tc_recycle_frame_done_078b
 24041 000113AA 488B32                  	mov rsi, qword [rdx]
 24042 000113AD 488933                  	mov qword [rbx], rsi
 24043 000113B0 48FFC9                  	dec rcx
 24044 000113B3 4883EB08                	sub rbx, 8 * 1
 24045 000113B7 4883EA08                	sub rdx, 8 * 1
 24046 000113BB EBE7                    	jmp .L_tc_recycle_frame_loop_078b
 24047                                  .L_tc_recycle_frame_done_078b:
 24048 000113BD 488D6308                	lea rsp, [rbx + 8 * 1]
 24049 000113C1 5D                      	pop rbp	; the proc will restore it!
 24050 000113C2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24051 000113C5 C9                      	leave
 24052 000113C6 C21800                  	ret AND_KILL_FRAME(1)
 24053                                  .L_lambda_simple_end_05b8:	; new closure is in rax
 24054 000113C9 48890425[4A180000]      	mov qword [free_var_158], rax
 24055 000113D1 48B8-                   	mov rax, sob_void
 24055 000113D3 [0000000000000000] 
 24056                                  
 24057 000113DB 4889C7                  	mov rdi, rax
 24058 000113DE E857440000              	call print_sexpr_if_not_void
 24059                                  
 24060 000113E3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24061 000113E8 E83B430000              	call malloc
 24062 000113ED 50                      	push rax
 24063 000113EE BF00000000              	mov rdi, 8 * 0	; new rib
 24064 000113F3 E830430000              	call malloc
 24065 000113F8 50                      	push rax
 24066 000113F9 BF08000000              	mov rdi, 8 * 1	; extended env
 24067 000113FE E825430000              	call malloc
 24068 00011403 488B7D10                	mov rdi, ENV
 24069 00011407 BE00000000              	mov rsi, 0
 24070 0001140C BA01000000              	mov rdx, 1
 24071                                  .L_lambda_simple_env_loop_05b9:	; ext_env[i + 1] <-- env[i]
 24072 00011411 4883FE00                	cmp rsi, 0
 24073 00011415 7410                    	je .L_lambda_simple_env_end_05b9
 24074 00011417 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24075 0001141B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24076 0001141F 48FFC6                  	inc rsi
 24077 00011422 48FFC2                  	inc rdx
 24078 00011425 EBEA                    	jmp .L_lambda_simple_env_loop_05b9
 24079                                  .L_lambda_simple_env_end_05b9:
 24080 00011427 5B                      	pop rbx
 24081 00011428 BE00000000              	mov rsi, 0
 24082                                  .L_lambda_simple_params_loop_05b9:	; copy params
 24083 0001142D 4883FE00                	cmp rsi, 0
 24084 00011431 740E                    	je .L_lambda_simple_params_end_05b9
 24085 00011433 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24086 00011438 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24087 0001143C 48FFC6                  	inc rsi
 24088 0001143F EBEC                    	jmp .L_lambda_simple_params_loop_05b9
 24089                                  .L_lambda_simple_params_end_05b9:
 24090 00011441 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24091 00011444 4889C3                  	mov rbx, rax
 24092 00011447 58                      	pop rax
 24093 00011448 C60004                  	mov byte [rax], T_closure
 24094 0001144B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24095 0001144F 48C74009[5C140100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05b9
 24096 00011457 E983000000              	jmp .L_lambda_simple_end_05b9
 24097                                  .L_lambda_simple_code_05b9:	; lambda-simple body
 24098 0001145C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24099 00011462 740B                    	je .L_lambda_simple_arity_check_ok_05b9
 24100 00011464 FF742410                	push qword [rsp + 8 * 2]
 24101 00011468 6A01                    	push 1
 24102 0001146A E972420000              	jmp L_error_incorrect_arity_simple
 24103                                  .L_lambda_simple_arity_check_ok_05b9:
 24104 0001146F C8000000                	enter 0, 0
 24105                                  	; preparing a tail-call
 24106 00011473 488B4520                	mov rax, PARAM(0)	; param x
 24107 00011477 50                      	push rax
 24108 00011478 48B8-                   	mov rax, L_constants + 2023
 24108 0001147A [E707000000000000] 
 24109 00011482 50                      	push rax
 24110 00011483 6A02                    	push 2	; arg count
 24111 00011485 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 24112 0001148D 803805                  	cmp byte [rax], T_undefined
 24113 00011490 0F8465410000            	je L_error_fvar_undefined
 24114 00011496 803804                  	cmp byte [rax], T_closure
 24115 00011499 0F85E0410000            	jne L_error_non_closure
 24116 0001149F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24117                                  
 24118                                  	; recycling the current frame
 24119 000114A2 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24120 000114A5 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24121 000114A8 B906000000              	mov rcx, 2 + 4
 24122 000114AD 488B5D18                	mov rbx, COUNT
 24123 000114B1 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24124 000114B6 488D55F8                	lea rdx, [rbp - 8 * 1]
 24125                                  .L_tc_recycle_frame_loop_078c:
 24126 000114BA 4883F900                	cmp rcx, 0
 24127 000114BE 7413                    	je .L_tc_recycle_frame_done_078c
 24128 000114C0 488B32                  	mov rsi, qword [rdx]
 24129 000114C3 488933                  	mov qword [rbx], rsi
 24130 000114C6 48FFC9                  	dec rcx
 24131 000114C9 4883EB08                	sub rbx, 8 * 1
 24132 000114CD 4883EA08                	sub rdx, 8 * 1
 24133 000114D1 EBE7                    	jmp .L_tc_recycle_frame_loop_078c
 24134                                  .L_tc_recycle_frame_done_078c:
 24135 000114D3 488D6308                	lea rsp, [rbx + 8 * 1]
 24136 000114D7 5D                      	pop rbp	; the proc will restore it!
 24137 000114D8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24138 000114DB C9                      	leave
 24139 000114DC C21800                  	ret AND_KILL_FRAME(1)
 24140                                  .L_lambda_simple_end_05b9:	; new closure is in rax
 24141 000114DF 48890425[5B180000]      	mov qword [free_var_159], rax
 24142 000114E7 48B8-                   	mov rax, sob_void
 24142 000114E9 [0000000000000000] 
 24143                                  
 24144 000114F1 4889C7                  	mov rdi, rax
 24145 000114F4 E841430000              	call print_sexpr_if_not_void
 24146                                  
 24147 000114F9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24148 000114FE E825420000              	call malloc
 24149 00011503 50                      	push rax
 24150 00011504 BF00000000              	mov rdi, 8 * 0	; new rib
 24151 00011509 E81A420000              	call malloc
 24152 0001150E 50                      	push rax
 24153 0001150F BF08000000              	mov rdi, 8 * 1	; extended env
 24154 00011514 E80F420000              	call malloc
 24155 00011519 488B7D10                	mov rdi, ENV
 24156 0001151D BE00000000              	mov rsi, 0
 24157 00011522 BA01000000              	mov rdx, 1
 24158                                  .L_lambda_simple_env_loop_05ba:	; ext_env[i + 1] <-- env[i]
 24159 00011527 4883FE00                	cmp rsi, 0
 24160 0001152B 7410                    	je .L_lambda_simple_env_end_05ba
 24161 0001152D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24162 00011531 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24163 00011535 48FFC6                  	inc rsi
 24164 00011538 48FFC2                  	inc rdx
 24165 0001153B EBEA                    	jmp .L_lambda_simple_env_loop_05ba
 24166                                  .L_lambda_simple_env_end_05ba:
 24167 0001153D 5B                      	pop rbx
 24168 0001153E BE00000000              	mov rsi, 0
 24169                                  .L_lambda_simple_params_loop_05ba:	; copy params
 24170 00011543 4883FE00                	cmp rsi, 0
 24171 00011547 740E                    	je .L_lambda_simple_params_end_05ba
 24172 00011549 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24173 0001154E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24174 00011552 48FFC6                  	inc rsi
 24175 00011555 EBEC                    	jmp .L_lambda_simple_params_loop_05ba
 24176                                  .L_lambda_simple_params_end_05ba:
 24177 00011557 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24178 0001155A 4889C3                  	mov rbx, rax
 24179 0001155D 58                      	pop rax
 24180 0001155E C60004                  	mov byte [rax], T_closure
 24181 00011561 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24182 00011565 48C74009[72150100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05ba
 24183 0001156D E983000000              	jmp .L_lambda_simple_end_05ba
 24184                                  .L_lambda_simple_code_05ba:	; lambda-simple body
 24185 00011572 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24186 00011578 740B                    	je .L_lambda_simple_arity_check_ok_05ba
 24187 0001157A FF742410                	push qword [rsp + 8 * 2]
 24188 0001157E 6A01                    	push 1
 24189 00011580 E95C410000              	jmp L_error_incorrect_arity_simple
 24190                                  .L_lambda_simple_arity_check_ok_05ba:
 24191 00011585 C8000000                	enter 0, 0
 24192                                  	; preparing a tail-call
 24193 00011589 48B8-                   	mov rax, L_constants + 2023
 24193 0001158B [E707000000000000] 
 24194 00011593 50                      	push rax
 24195 00011594 488B4520                	mov rax, PARAM(0)	; param x
 24196 00011598 50                      	push rax
 24197 00011599 6A02                    	push 2	; arg count
 24198 0001159B 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 24199 000115A3 803805                  	cmp byte [rax], T_undefined
 24200 000115A6 0F844F400000            	je L_error_fvar_undefined
 24201 000115AC 803804                  	cmp byte [rax], T_closure
 24202 000115AF 0F85CA400000            	jne L_error_non_closure
 24203 000115B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24204                                  
 24205                                  	; recycling the current frame
 24206 000115B8 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24207 000115BB FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24208 000115BE B906000000              	mov rcx, 2 + 4
 24209 000115C3 488B5D18                	mov rbx, COUNT
 24210 000115C7 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24211 000115CC 488D55F8                	lea rdx, [rbp - 8 * 1]
 24212                                  .L_tc_recycle_frame_loop_078d:
 24213 000115D0 4883F900                	cmp rcx, 0
 24214 000115D4 7413                    	je .L_tc_recycle_frame_done_078d
 24215 000115D6 488B32                  	mov rsi, qword [rdx]
 24216 000115D9 488933                  	mov qword [rbx], rsi
 24217 000115DC 48FFC9                  	dec rcx
 24218 000115DF 4883EB08                	sub rbx, 8 * 1
 24219 000115E3 4883EA08                	sub rdx, 8 * 1
 24220 000115E7 EBE7                    	jmp .L_tc_recycle_frame_loop_078d
 24221                                  .L_tc_recycle_frame_done_078d:
 24222 000115E9 488D6308                	lea rsp, [rbx + 8 * 1]
 24223 000115ED 5D                      	pop rbp	; the proc will restore it!
 24224 000115EE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24225 000115F1 C9                      	leave
 24226 000115F2 C21800                  	ret AND_KILL_FRAME(1)
 24227                                  .L_lambda_simple_end_05ba:	; new closure is in rax
 24228 000115F5 48890425[6C180000]      	mov qword [free_var_160], rax
 24229 000115FD 48B8-                   	mov rax, sob_void
 24229 000115FF [0000000000000000] 
 24230                                  
 24231 00011607 4889C7                  	mov rdi, rax
 24232 0001160A E82B420000              	call print_sexpr_if_not_void
 24233                                  
 24234 0001160F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24235 00011614 E80F410000              	call malloc
 24236 00011619 50                      	push rax
 24237 0001161A BF00000000              	mov rdi, 8 * 0	; new rib
 24238 0001161F E804410000              	call malloc
 24239 00011624 50                      	push rax
 24240 00011625 BF08000000              	mov rdi, 8 * 1	; extended env
 24241 0001162A E8F9400000              	call malloc
 24242 0001162F 488B7D10                	mov rdi, ENV
 24243 00011633 BE00000000              	mov rsi, 0
 24244 00011638 BA01000000              	mov rdx, 1
 24245                                  .L_lambda_simple_env_loop_05bb:	; ext_env[i + 1] <-- env[i]
 24246 0001163D 4883FE00                	cmp rsi, 0
 24247 00011641 7410                    	je .L_lambda_simple_env_end_05bb
 24248 00011643 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24249 00011647 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24250 0001164B 48FFC6                  	inc rsi
 24251 0001164E 48FFC2                  	inc rdx
 24252 00011651 EBEA                    	jmp .L_lambda_simple_env_loop_05bb
 24253                                  .L_lambda_simple_env_end_05bb:
 24254 00011653 5B                      	pop rbx
 24255 00011654 BE00000000              	mov rsi, 0
 24256                                  .L_lambda_simple_params_loop_05bb:	; copy params
 24257 00011659 4883FE00                	cmp rsi, 0
 24258 0001165D 740E                    	je .L_lambda_simple_params_end_05bb
 24259 0001165F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24260 00011664 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24261 00011668 48FFC6                  	inc rsi
 24262 0001166B EBEC                    	jmp .L_lambda_simple_params_loop_05bb
 24263                                  .L_lambda_simple_params_end_05bb:
 24264 0001166D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24265 00011670 4889C3                  	mov rbx, rax
 24266 00011673 58                      	pop rax
 24267 00011674 C60004                  	mov byte [rax], T_closure
 24268 00011677 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24269 0001167B 48C74009[88160100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05bb
 24270 00011683 E9A6000000              	jmp .L_lambda_simple_end_05bb
 24271                                  .L_lambda_simple_code_05bb:	; lambda-simple body
 24272 00011688 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24273 0001168E 740B                    	je .L_lambda_simple_arity_check_ok_05bb
 24274 00011690 FF742410                	push qword [rsp + 8 * 2]
 24275 00011694 6A01                    	push 1
 24276 00011696 E946400000              	jmp L_error_incorrect_arity_simple
 24277                                  .L_lambda_simple_arity_check_ok_05bb:
 24278 0001169B C8000000                	enter 0, 0
 24279                                  	; preparing a tail-call
 24280 0001169F 48B8-                   	mov rax, L_constants + 3174
 24280 000116A1 [660C000000000000] 
 24281 000116A9 50                      	push rax
 24282 000116AA 488B4520                	mov rax, PARAM(0)	; param n
 24283 000116AE 50                      	push rax
 24284 000116AF 6A02                    	push 2	; arg count
 24285 000116B1 488B0425[1E110000]      	mov rax, qword [free_var_50]	; free var remainder
 24286 000116B9 803805                  	cmp byte [rax], T_undefined
 24287 000116BC 0F84393F0000            	je L_error_fvar_undefined
 24288 000116C2 803804                  	cmp byte [rax], T_closure
 24289 000116C5 0F85B43F0000            	jne L_error_non_closure
 24290 000116CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 24291 000116CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 24292 000116D1 50                      	push rax
 24293 000116D2 6A01                    	push 1	; arg count
 24294 000116D4 488B0425[970F0000]      	mov rax, qword [free_var_27]	; free var zero?
 24295 000116DC 803805                  	cmp byte [rax], T_undefined
 24296 000116DF 0F84163F0000            	je L_error_fvar_undefined
 24297 000116E5 803804                  	cmp byte [rax], T_closure
 24298 000116E8 0F85913F0000            	jne L_error_non_closure
 24299 000116EE FF7001                  	push SOB_CLOSURE_ENV(rax)
 24300                                  
 24301                                  	; recycling the current frame
 24302 000116F1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24303 000116F4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24304 000116F7 B905000000              	mov rcx, 1 + 4
 24305 000116FC 488B5D18                	mov rbx, COUNT
 24306 00011700 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24307 00011705 488D55F8                	lea rdx, [rbp - 8 * 1]
 24308                                  .L_tc_recycle_frame_loop_078e:
 24309 00011709 4883F900                	cmp rcx, 0
 24310 0001170D 7413                    	je .L_tc_recycle_frame_done_078e
 24311 0001170F 488B32                  	mov rsi, qword [rdx]
 24312 00011712 488933                  	mov qword [rbx], rsi
 24313 00011715 48FFC9                  	dec rcx
 24314 00011718 4883EB08                	sub rbx, 8 * 1
 24315 0001171C 4883EA08                	sub rdx, 8 * 1
 24316 00011720 EBE7                    	jmp .L_tc_recycle_frame_loop_078e
 24317                                  .L_tc_recycle_frame_done_078e:
 24318 00011722 488D6308                	lea rsp, [rbx + 8 * 1]
 24319 00011726 5D                      	pop rbp	; the proc will restore it!
 24320 00011727 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24321 0001172A C9                      	leave
 24322 0001172B C21800                  	ret AND_KILL_FRAME(1)
 24323                                  .L_lambda_simple_end_05bb:	; new closure is in rax
 24324 0001172E 48890425[7D180000]      	mov qword [free_var_161], rax
 24325 00011736 48B8-                   	mov rax, sob_void
 24325 00011738 [0000000000000000] 
 24326                                  
 24327 00011740 4889C7                  	mov rdi, rax
 24328 00011743 E8F2400000              	call print_sexpr_if_not_void
 24329                                  
 24330 00011748 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24331 0001174D E8D63F0000              	call malloc
 24332 00011752 50                      	push rax
 24333 00011753 BF00000000              	mov rdi, 8 * 0	; new rib
 24334 00011758 E8CB3F0000              	call malloc
 24335 0001175D 50                      	push rax
 24336 0001175E BF08000000              	mov rdi, 8 * 1	; extended env
 24337 00011763 E8C03F0000              	call malloc
 24338 00011768 488B7D10                	mov rdi, ENV
 24339 0001176C BE00000000              	mov rsi, 0
 24340 00011771 BA01000000              	mov rdx, 1
 24341                                  .L_lambda_simple_env_loop_05bc:	; ext_env[i + 1] <-- env[i]
 24342 00011776 4883FE00                	cmp rsi, 0
 24343 0001177A 7410                    	je .L_lambda_simple_env_end_05bc
 24344 0001177C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24345 00011780 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24346 00011784 48FFC6                  	inc rsi
 24347 00011787 48FFC2                  	inc rdx
 24348 0001178A EBEA                    	jmp .L_lambda_simple_env_loop_05bc
 24349                                  .L_lambda_simple_env_end_05bc:
 24350 0001178C 5B                      	pop rbx
 24351 0001178D BE00000000              	mov rsi, 0
 24352                                  .L_lambda_simple_params_loop_05bc:	; copy params
 24353 00011792 4883FE00                	cmp rsi, 0
 24354 00011796 740E                    	je .L_lambda_simple_params_end_05bc
 24355 00011798 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24356 0001179D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24357 000117A1 48FFC6                  	inc rsi
 24358 000117A4 EBEC                    	jmp .L_lambda_simple_params_loop_05bc
 24359                                  .L_lambda_simple_params_end_05bc:
 24360 000117A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24361 000117A9 4889C3                  	mov rbx, rax
 24362 000117AC 58                      	pop rax
 24363 000117AD C60004                  	mov byte [rax], T_closure
 24364 000117B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24365 000117B4 48C74009[C1170100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05bc
 24366 000117BC E99B000000              	jmp .L_lambda_simple_end_05bc
 24367                                  .L_lambda_simple_code_05bc:	; lambda-simple body
 24368 000117C1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24369 000117C7 740B                    	je .L_lambda_simple_arity_check_ok_05bc
 24370 000117C9 FF742410                	push qword [rsp + 8 * 2]
 24371 000117CD 6A01                    	push 1
 24372 000117CF E90D3F0000              	jmp L_error_incorrect_arity_simple
 24373                                  .L_lambda_simple_arity_check_ok_05bc:
 24374 000117D4 C8000000                	enter 0, 0
 24375                                  	; preparing a tail-call
 24376 000117D8 488B4520                	mov rax, PARAM(0)	; param n
 24377 000117DC 50                      	push rax
 24378 000117DD 6A01                    	push 1	; arg count
 24379 000117DF 488B0425[7D180000]      	mov rax, qword [free_var_161]	; free var even?
 24380 000117E7 803805                  	cmp byte [rax], T_undefined
 24381 000117EA 0F840B3E0000            	je L_error_fvar_undefined
 24382 000117F0 803804                  	cmp byte [rax], T_closure
 24383 000117F3 0F85863E0000            	jne L_error_non_closure
 24384 000117F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24385 000117FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 24386 000117FF 50                      	push rax
 24387 00011800 6A01                    	push 1	; arg count
 24388 00011802 488B0425[B4140000]      	mov rax, qword [free_var_104]	; free var not
 24389 0001180A 803805                  	cmp byte [rax], T_undefined
 24390 0001180D 0F84E83D0000            	je L_error_fvar_undefined
 24391 00011813 803804                  	cmp byte [rax], T_closure
 24392 00011816 0F85633E0000            	jne L_error_non_closure
 24393 0001181C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24394                                  
 24395                                  	; recycling the current frame
 24396 0001181F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24397 00011822 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24398 00011825 B905000000              	mov rcx, 1 + 4
 24399 0001182A 488B5D18                	mov rbx, COUNT
 24400 0001182E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24401 00011833 488D55F8                	lea rdx, [rbp - 8 * 1]
 24402                                  .L_tc_recycle_frame_loop_078f:
 24403 00011837 4883F900                	cmp rcx, 0
 24404 0001183B 7413                    	je .L_tc_recycle_frame_done_078f
 24405 0001183D 488B32                  	mov rsi, qword [rdx]
 24406 00011840 488933                  	mov qword [rbx], rsi
 24407 00011843 48FFC9                  	dec rcx
 24408 00011846 4883EB08                	sub rbx, 8 * 1
 24409 0001184A 4883EA08                	sub rdx, 8 * 1
 24410 0001184E EBE7                    	jmp .L_tc_recycle_frame_loop_078f
 24411                                  .L_tc_recycle_frame_done_078f:
 24412 00011850 488D6308                	lea rsp, [rbx + 8 * 1]
 24413 00011854 5D                      	pop rbp	; the proc will restore it!
 24414 00011855 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24415 00011858 C9                      	leave
 24416 00011859 C21800                  	ret AND_KILL_FRAME(1)
 24417                                  .L_lambda_simple_end_05bc:	; new closure is in rax
 24418 0001185C 48890425[8E180000]      	mov qword [free_var_162], rax
 24419 00011864 48B8-                   	mov rax, sob_void
 24419 00011866 [0000000000000000] 
 24420                                  
 24421 0001186E 4889C7                  	mov rdi, rax
 24422 00011871 E8C43F0000              	call print_sexpr_if_not_void
 24423                                  
 24424 00011876 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24425 0001187B E8A83E0000              	call malloc
 24426 00011880 50                      	push rax
 24427 00011881 BF00000000              	mov rdi, 8 * 0	; new rib
 24428 00011886 E89D3E0000              	call malloc
 24429 0001188B 50                      	push rax
 24430 0001188C BF08000000              	mov rdi, 8 * 1	; extended env
 24431 00011891 E8923E0000              	call malloc
 24432 00011896 488B7D10                	mov rdi, ENV
 24433 0001189A BE00000000              	mov rsi, 0
 24434 0001189F BA01000000              	mov rdx, 1
 24435                                  .L_lambda_simple_env_loop_05bd:	; ext_env[i + 1] <-- env[i]
 24436 000118A4 4883FE00                	cmp rsi, 0
 24437 000118A8 7410                    	je .L_lambda_simple_env_end_05bd
 24438 000118AA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24439 000118AE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24440 000118B2 48FFC6                  	inc rsi
 24441 000118B5 48FFC2                  	inc rdx
 24442 000118B8 EBEA                    	jmp .L_lambda_simple_env_loop_05bd
 24443                                  .L_lambda_simple_env_end_05bd:
 24444 000118BA 5B                      	pop rbx
 24445 000118BB BE00000000              	mov rsi, 0
 24446                                  .L_lambda_simple_params_loop_05bd:	; copy params
 24447 000118C0 4883FE00                	cmp rsi, 0
 24448 000118C4 740E                    	je .L_lambda_simple_params_end_05bd
 24449 000118C6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24450 000118CB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24451 000118CF 48FFC6                  	inc rsi
 24452 000118D2 EBEC                    	jmp .L_lambda_simple_params_loop_05bd
 24453                                  .L_lambda_simple_params_end_05bd:
 24454 000118D4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24455 000118D7 4889C3                  	mov rbx, rax
 24456 000118DA 58                      	pop rax
 24457 000118DB C60004                  	mov byte [rax], T_closure
 24458 000118DE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24459 000118E2 48C74009[EF180100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05bd
 24460 000118EA E9AD000000              	jmp .L_lambda_simple_end_05bd
 24461                                  .L_lambda_simple_code_05bd:	; lambda-simple body
 24462 000118EF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24463 000118F5 740B                    	je .L_lambda_simple_arity_check_ok_05bd
 24464 000118F7 FF742410                	push qword [rsp + 8 * 2]
 24465 000118FB 6A01                    	push 1
 24466 000118FD E9DF3D0000              	jmp L_error_incorrect_arity_simple
 24467                                  .L_lambda_simple_arity_check_ok_05bd:
 24468 00011902 C8000000                	enter 0, 0
 24469 00011906 488B4520                	mov rax, PARAM(0)	; param x
 24470 0001190A 50                      	push rax
 24471 0001190B 6A01                    	push 1	; arg count
 24472 0001190D 488B0425[6C180000]      	mov rax, qword [free_var_160]	; free var negative?
 24473 00011915 803805                  	cmp byte [rax], T_undefined
 24474 00011918 0F84DD3C0000            	je L_error_fvar_undefined
 24475 0001191E 803804                  	cmp byte [rax], T_closure
 24476 00011921 0F85583D0000            	jne L_error_non_closure
 24477 00011927 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24478 0001192A FF5009                  	call SOB_CLOSURE_CODE(rax)
 24479                                  
 24480 0001192D 483D[02000000]          	cmp rax, sob_boolean_false
 24481 00011933 745F                    	je .L_if_else_043b
 24482                                  	; preparing a tail-call
 24483 00011935 488B4520                	mov rax, PARAM(0)	; param x
 24484 00011939 50                      	push rax
 24485 0001193A 6A01                    	push 1	; arg count
 24486 0001193C 488B0425[91150000]      	mov rax, qword [free_var_117]	; free var -
 24487 00011944 803805                  	cmp byte [rax], T_undefined
 24488 00011947 0F84AE3C0000            	je L_error_fvar_undefined
 24489 0001194D 803804                  	cmp byte [rax], T_closure
 24490 00011950 0F85293D0000            	jne L_error_non_closure
 24491 00011956 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24492                                  
 24493                                  	; recycling the current frame
 24494 00011959 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24495 0001195C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24496 0001195F B905000000              	mov rcx, 1 + 4
 24497 00011964 488B5D18                	mov rbx, COUNT
 24498 00011968 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24499 0001196D 488D55F8                	lea rdx, [rbp - 8 * 1]
 24500                                  .L_tc_recycle_frame_loop_0790:
 24501 00011971 4883F900                	cmp rcx, 0
 24502 00011975 7413                    	je .L_tc_recycle_frame_done_0790
 24503 00011977 488B32                  	mov rsi, qword [rdx]
 24504 0001197A 488933                  	mov qword [rbx], rsi
 24505 0001197D 48FFC9                  	dec rcx
 24506 00011980 4883EB08                	sub rbx, 8 * 1
 24507 00011984 4883EA08                	sub rdx, 8 * 1
 24508 00011988 EBE7                    	jmp .L_tc_recycle_frame_loop_0790
 24509                                  .L_tc_recycle_frame_done_0790:
 24510 0001198A 488D6308                	lea rsp, [rbx + 8 * 1]
 24511 0001198E 5D                      	pop rbp	; the proc will restore it!
 24512 0001198F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24513                                  
 24514 00011992 EB04                    	jmp .L_if_end_043b
 24515                                  
 24516                                  	.L_if_else_043b:
 24517 00011994 488B4520                	mov rax, PARAM(0)	; param x
 24518                                  
 24519                                  	.L_if_end_043b:
 24520 00011998 C9                      	leave
 24521 00011999 C21800                  	ret AND_KILL_FRAME(1)
 24522                                  .L_lambda_simple_end_05bd:	; new closure is in rax
 24523 0001199C 48890425[9F180000]      	mov qword [free_var_163], rax
 24524 000119A4 48B8-                   	mov rax, sob_void
 24524 000119A6 [0000000000000000] 
 24525                                  
 24526 000119AE 4889C7                  	mov rdi, rax
 24527 000119B1 E8843E0000              	call print_sexpr_if_not_void
 24528                                  
 24529 000119B6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24530 000119BB E8683D0000              	call malloc
 24531 000119C0 50                      	push rax
 24532 000119C1 BF00000000              	mov rdi, 8 * 0	; new rib
 24533 000119C6 E85D3D0000              	call malloc
 24534 000119CB 50                      	push rax
 24535 000119CC BF08000000              	mov rdi, 8 * 1	; extended env
 24536 000119D1 E8523D0000              	call malloc
 24537 000119D6 488B7D10                	mov rdi, ENV
 24538 000119DA BE00000000              	mov rsi, 0
 24539 000119DF BA01000000              	mov rdx, 1
 24540                                  .L_lambda_simple_env_loop_05be:	; ext_env[i + 1] <-- env[i]
 24541 000119E4 4883FE00                	cmp rsi, 0
 24542 000119E8 7410                    	je .L_lambda_simple_env_end_05be
 24543 000119EA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24544 000119EE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24545 000119F2 48FFC6                  	inc rsi
 24546 000119F5 48FFC2                  	inc rdx
 24547 000119F8 EBEA                    	jmp .L_lambda_simple_env_loop_05be
 24548                                  .L_lambda_simple_env_end_05be:
 24549 000119FA 5B                      	pop rbx
 24550 000119FB BE00000000              	mov rsi, 0
 24551                                  .L_lambda_simple_params_loop_05be:	; copy params
 24552 00011A00 4883FE00                	cmp rsi, 0
 24553 00011A04 740E                    	je .L_lambda_simple_params_end_05be
 24554 00011A06 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24555 00011A0B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24556 00011A0F 48FFC6                  	inc rsi
 24557 00011A12 EBEC                    	jmp .L_lambda_simple_params_loop_05be
 24558                                  .L_lambda_simple_params_end_05be:
 24559 00011A14 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24560 00011A17 4889C3                  	mov rbx, rax
 24561 00011A1A 58                      	pop rax
 24562 00011A1B C60004                  	mov byte [rax], T_closure
 24563 00011A1E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24564 00011A22 48C74009[2F1A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05be
 24565 00011A2A E9C1060000              	jmp .L_lambda_simple_end_05be
 24566                                  .L_lambda_simple_code_05be:	; lambda-simple body
 24567 00011A2F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24568 00011A35 740B                    	je .L_lambda_simple_arity_check_ok_05be
 24569 00011A37 FF742410                	push qword [rsp + 8 * 2]
 24570 00011A3B 6A02                    	push 2
 24571 00011A3D E99F3C0000              	jmp L_error_incorrect_arity_simple
 24572                                  .L_lambda_simple_arity_check_ok_05be:
 24573 00011A42 C8000000                	enter 0, 0
 24574 00011A46 488B4520                	mov rax, PARAM(0)	; param e1
 24575 00011A4A 50                      	push rax
 24576 00011A4B 6A01                    	push 1	; arg count
 24577 00011A4D 488B0425[DD0D0000]      	mov rax, qword [free_var_1]	; free var pair?
 24578 00011A55 803805                  	cmp byte [rax], T_undefined
 24579 00011A58 0F849D3B0000            	je L_error_fvar_undefined
 24580 00011A5E 803804                  	cmp byte [rax], T_closure
 24581 00011A61 0F85183C0000            	jne L_error_non_closure
 24582 00011A67 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24583 00011A6A FF5009                  	call SOB_CLOSURE_CODE(rax)
 24584                                  
 24585 00011A6D 483D[02000000]          	cmp rax, sob_boolean_false
 24586 00011A73 7429                    	je .L_if_else_043d
 24587 00011A75 488B4528                	mov rax, PARAM(1)	; param e2
 24588 00011A79 50                      	push rax
 24589 00011A7A 6A01                    	push 1	; arg count
 24590 00011A7C 488B0425[DD0D0000]      	mov rax, qword [free_var_1]	; free var pair?
 24591 00011A84 803805                  	cmp byte [rax], T_undefined
 24592 00011A87 0F846E3B0000            	je L_error_fvar_undefined
 24593 00011A8D 803804                  	cmp byte [rax], T_closure
 24594 00011A90 0F85E93B0000            	jne L_error_non_closure
 24595 00011A96 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24596 00011A99 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24597                                  
 24598 00011A9C EB0A                    	jmp .L_if_end_043d
 24599                                  
 24600                                  	.L_if_else_043d:
 24601 00011A9E 48B8-                   	mov rax, L_constants + 2
 24601 00011AA0 [0200000000000000] 
 24602                                  
 24603                                  	.L_if_end_043d:
 24604                                  
 24605 00011AA8 483D[02000000]          	cmp rax, sob_boolean_false
 24606 00011AAE 0F8437010000            	je .L_if_else_043c
 24607 00011AB4 488B4528                	mov rax, PARAM(1)	; param e2
 24608 00011AB8 50                      	push rax
 24609 00011AB9 6A01                    	push 1	; arg count
 24610 00011ABB 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 24611 00011AC3 803805                  	cmp byte [rax], T_undefined
 24612 00011AC6 0F842F3B0000            	je L_error_fvar_undefined
 24613 00011ACC 803804                  	cmp byte [rax], T_closure
 24614 00011ACF 0F85AA3B0000            	jne L_error_non_closure
 24615 00011AD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24616 00011AD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24617 00011ADB 50                      	push rax
 24618 00011ADC 488B4520                	mov rax, PARAM(0)	; param e1
 24619 00011AE0 50                      	push rax
 24620 00011AE1 6A01                    	push 1	; arg count
 24621 00011AE3 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 24622 00011AEB 803805                  	cmp byte [rax], T_undefined
 24623 00011AEE 0F84073B0000            	je L_error_fvar_undefined
 24624 00011AF4 803804                  	cmp byte [rax], T_closure
 24625 00011AF7 0F85823B0000            	jne L_error_non_closure
 24626 00011AFD FF7001                  	push SOB_CLOSURE_ENV(rax)
 24627 00011B00 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24628 00011B03 50                      	push rax
 24629 00011B04 6A02                    	push 2	; arg count
 24630 00011B06 488B0425[B0180000]      	mov rax, qword [free_var_164]	; free var equal?
 24631 00011B0E 803805                  	cmp byte [rax], T_undefined
 24632 00011B11 0F84E43A0000            	je L_error_fvar_undefined
 24633 00011B17 803804                  	cmp byte [rax], T_closure
 24634 00011B1A 0F855F3B0000            	jne L_error_non_closure
 24635 00011B20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24636 00011B23 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24637                                  
 24638 00011B26 483D[02000000]          	cmp rax, sob_boolean_false
 24639 00011B2C 0F84AA000000            	je .L_if_else_043e
 24640                                  	; preparing a tail-call
 24641 00011B32 488B4528                	mov rax, PARAM(1)	; param e2
 24642 00011B36 50                      	push rax
 24643 00011B37 6A01                    	push 1	; arg count
 24644 00011B39 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 24645 00011B41 803805                  	cmp byte [rax], T_undefined
 24646 00011B44 0F84B13A0000            	je L_error_fvar_undefined
 24647 00011B4A 803804                  	cmp byte [rax], T_closure
 24648 00011B4D 0F852C3B0000            	jne L_error_non_closure
 24649 00011B53 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24650 00011B56 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24651 00011B59 50                      	push rax
 24652 00011B5A 488B4520                	mov rax, PARAM(0)	; param e1
 24653 00011B5E 50                      	push rax
 24654 00011B5F 6A01                    	push 1	; arg count
 24655 00011B61 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 24656 00011B69 803805                  	cmp byte [rax], T_undefined
 24657 00011B6C 0F84893A0000            	je L_error_fvar_undefined
 24658 00011B72 803804                  	cmp byte [rax], T_closure
 24659 00011B75 0F85043B0000            	jne L_error_non_closure
 24660 00011B7B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24661 00011B7E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24662 00011B81 50                      	push rax
 24663 00011B82 6A02                    	push 2	; arg count
 24664 00011B84 488B0425[B0180000]      	mov rax, qword [free_var_164]	; free var equal?
 24665 00011B8C 803805                  	cmp byte [rax], T_undefined
 24666 00011B8F 0F84663A0000            	je L_error_fvar_undefined
 24667 00011B95 803804                  	cmp byte [rax], T_closure
 24668 00011B98 0F85E13A0000            	jne L_error_non_closure
 24669 00011B9E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24670                                  
 24671                                  	; recycling the current frame
 24672 00011BA1 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24673 00011BA4 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24674 00011BA7 B906000000              	mov rcx, 2 + 4
 24675 00011BAC 488B5D18                	mov rbx, COUNT
 24676 00011BB0 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24677 00011BB5 488D55F8                	lea rdx, [rbp - 8 * 1]
 24678                                  .L_tc_recycle_frame_loop_0791:
 24679 00011BB9 4883F900                	cmp rcx, 0
 24680 00011BBD 7413                    	je .L_tc_recycle_frame_done_0791
 24681 00011BBF 488B32                  	mov rsi, qword [rdx]
 24682 00011BC2 488933                  	mov qword [rbx], rsi
 24683 00011BC5 48FFC9                  	dec rcx
 24684 00011BC8 4883EB08                	sub rbx, 8 * 1
 24685 00011BCC 4883EA08                	sub rdx, 8 * 1
 24686 00011BD0 EBE7                    	jmp .L_tc_recycle_frame_loop_0791
 24687                                  .L_tc_recycle_frame_done_0791:
 24688 00011BD2 488D6308                	lea rsp, [rbx + 8 * 1]
 24689 00011BD6 5D                      	pop rbp	; the proc will restore it!
 24690 00011BD7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24691                                  
 24692 00011BDA EB0A                    	jmp .L_if_end_043e
 24693                                  
 24694                                  	.L_if_else_043e:
 24695 00011BDC 48B8-                   	mov rax, L_constants + 2
 24695 00011BDE [0200000000000000] 
 24696                                  
 24697                                  	.L_if_end_043e:
 24698                                  
 24699 00011BE6 E901050000              	jmp .L_if_end_043c
 24700                                  
 24701                                  	.L_if_else_043c:
 24702 00011BEB 488B4520                	mov rax, PARAM(0)	; param e1
 24703 00011BEF 50                      	push rax
 24704 00011BF0 6A01                    	push 1	; arg count
 24705 00011BF2 488B0425[320E0000]      	mov rax, qword [free_var_6]	; free var vector?
 24706 00011BFA 803805                  	cmp byte [rax], T_undefined
 24707 00011BFD 0F84F8390000            	je L_error_fvar_undefined
 24708 00011C03 803804                  	cmp byte [rax], T_closure
 24709 00011C06 0F85733A0000            	jne L_error_non_closure
 24710 00011C0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24711 00011C0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24712                                  
 24713 00011C12 483D[02000000]          	cmp rax, sob_boolean_false
 24714 00011C18 0F84AF000000            	je .L_if_else_0440
 24715 00011C1E 488B4528                	mov rax, PARAM(1)	; param e2
 24716 00011C22 50                      	push rax
 24717 00011C23 6A01                    	push 1	; arg count
 24718 00011C25 488B0425[320E0000]      	mov rax, qword [free_var_6]	; free var vector?
 24719 00011C2D 803805                  	cmp byte [rax], T_undefined
 24720 00011C30 0F84C5390000            	je L_error_fvar_undefined
 24721 00011C36 803804                  	cmp byte [rax], T_closure
 24722 00011C39 0F85403A0000            	jne L_error_non_closure
 24723 00011C3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24724 00011C42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24725                                  
 24726 00011C45 483D[02000000]          	cmp rax, sob_boolean_false
 24727 00011C4B 7474                    	je .L_if_else_0441
 24728 00011C4D 488B4528                	mov rax, PARAM(1)	; param e2
 24729 00011C51 50                      	push rax
 24730 00011C52 6A01                    	push 1	; arg count
 24731 00011C54 488B0425[0F0F0000]      	mov rax, qword [free_var_19]	; free var vector-length
 24732 00011C5C 803805                  	cmp byte [rax], T_undefined
 24733 00011C5F 0F8496390000            	je L_error_fvar_undefined
 24734 00011C65 803804                  	cmp byte [rax], T_closure
 24735 00011C68 0F85113A0000            	jne L_error_non_closure
 24736 00011C6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24737 00011C71 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24738 00011C74 50                      	push rax
 24739 00011C75 488B4520                	mov rax, PARAM(0)	; param e1
 24740 00011C79 50                      	push rax
 24741 00011C7A 6A01                    	push 1	; arg count
 24742 00011C7C 488B0425[0F0F0000]      	mov rax, qword [free_var_19]	; free var vector-length
 24743 00011C84 803805                  	cmp byte [rax], T_undefined
 24744 00011C87 0F846E390000            	je L_error_fvar_undefined
 24745 00011C8D 803804                  	cmp byte [rax], T_closure
 24746 00011C90 0F85E9390000            	jne L_error_non_closure
 24747 00011C96 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24748 00011C99 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24749 00011C9C 50                      	push rax
 24750 00011C9D 6A02                    	push 2	; arg count
 24751 00011C9F 488B0425[2A160000]      	mov rax, qword [free_var_126]	; free var =
 24752 00011CA7 803805                  	cmp byte [rax], T_undefined
 24753 00011CAA 0F844B390000            	je L_error_fvar_undefined
 24754 00011CB0 803804                  	cmp byte [rax], T_closure
 24755 00011CB3 0F85C6390000            	jne L_error_non_closure
 24756 00011CB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24757 00011CBC FF5009                  	call SOB_CLOSURE_CODE(rax)
 24758                                  
 24759 00011CBF EB0A                    	jmp .L_if_end_0441
 24760                                  
 24761                                  	.L_if_else_0441:
 24762 00011CC1 48B8-                   	mov rax, L_constants + 2
 24762 00011CC3 [0200000000000000] 
 24763                                  
 24764                                  	.L_if_end_0441:
 24765                                  
 24766 00011CCB EB0A                    	jmp .L_if_end_0440
 24767                                  
 24768                                  	.L_if_else_0440:
 24769 00011CCD 48B8-                   	mov rax, L_constants + 2
 24769 00011CCF [0200000000000000] 
 24770                                  
 24771                                  	.L_if_end_0440:
 24772                                  
 24773 00011CD7 483D[02000000]          	cmp rax, sob_boolean_false
 24774 00011CDD 0F84AD000000            	je .L_if_else_043f
 24775                                  	; preparing a tail-call
 24776 00011CE3 488B4528                	mov rax, PARAM(1)	; param e2
 24777 00011CE7 50                      	push rax
 24778 00011CE8 6A01                    	push 1	; arg count
 24779 00011CEA 488B0425[39180000]      	mov rax, qword [free_var_157]	; free var vector->list
 24780 00011CF2 803805                  	cmp byte [rax], T_undefined
 24781 00011CF5 0F8400390000            	je L_error_fvar_undefined
 24782 00011CFB 803804                  	cmp byte [rax], T_closure
 24783 00011CFE 0F857B390000            	jne L_error_non_closure
 24784 00011D04 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24785 00011D07 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24786 00011D0A 50                      	push rax
 24787 00011D0B 488B4520                	mov rax, PARAM(0)	; param e1
 24788 00011D0F 50                      	push rax
 24789 00011D10 6A01                    	push 1	; arg count
 24790 00011D12 488B0425[39180000]      	mov rax, qword [free_var_157]	; free var vector->list
 24791 00011D1A 803805                  	cmp byte [rax], T_undefined
 24792 00011D1D 0F84D8380000            	je L_error_fvar_undefined
 24793 00011D23 803804                  	cmp byte [rax], T_closure
 24794 00011D26 0F8553390000            	jne L_error_non_closure
 24795 00011D2C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24796 00011D2F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24797 00011D32 50                      	push rax
 24798 00011D33 6A02                    	push 2	; arg count
 24799 00011D35 488B0425[B0180000]      	mov rax, qword [free_var_164]	; free var equal?
 24800 00011D3D 803805                  	cmp byte [rax], T_undefined
 24801 00011D40 0F84B5380000            	je L_error_fvar_undefined
 24802 00011D46 803804                  	cmp byte [rax], T_closure
 24803 00011D49 0F8530390000            	jne L_error_non_closure
 24804 00011D4F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24805                                  
 24806                                  	; recycling the current frame
 24807 00011D52 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24808 00011D55 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24809 00011D58 B906000000              	mov rcx, 2 + 4
 24810 00011D5D 488B5D18                	mov rbx, COUNT
 24811 00011D61 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24812 00011D66 488D55F8                	lea rdx, [rbp - 8 * 1]
 24813                                  .L_tc_recycle_frame_loop_0792:
 24814 00011D6A 4883F900                	cmp rcx, 0
 24815 00011D6E 7413                    	je .L_tc_recycle_frame_done_0792
 24816 00011D70 488B32                  	mov rsi, qword [rdx]
 24817 00011D73 488933                  	mov qword [rbx], rsi
 24818 00011D76 48FFC9                  	dec rcx
 24819 00011D79 4883EB08                	sub rbx, 8 * 1
 24820 00011D7D 4883EA08                	sub rdx, 8 * 1
 24821 00011D81 EBE7                    	jmp .L_tc_recycle_frame_loop_0792
 24822                                  .L_tc_recycle_frame_done_0792:
 24823 00011D83 488D6308                	lea rsp, [rbx + 8 * 1]
 24824 00011D87 5D                      	pop rbp	; the proc will restore it!
 24825 00011D88 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24826                                  
 24827 00011D8B E95C030000              	jmp .L_if_end_043f
 24828                                  
 24829                                  	.L_if_else_043f:
 24830 00011D90 488B4520                	mov rax, PARAM(0)	; param e1
 24831 00011D94 50                      	push rax
 24832 00011D95 6A01                    	push 1	; arg count
 24833 00011D97 488B0425[100E0000]      	mov rax, qword [free_var_4]	; free var string?
 24834 00011D9F 803805                  	cmp byte [rax], T_undefined
 24835 00011DA2 0F8453380000            	je L_error_fvar_undefined
 24836 00011DA8 803804                  	cmp byte [rax], T_closure
 24837 00011DAB 0F85CE380000            	jne L_error_non_closure
 24838 00011DB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24839 00011DB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24840                                  
 24841 00011DB7 483D[02000000]          	cmp rax, sob_boolean_false
 24842 00011DBD 0F84AF000000            	je .L_if_else_0443
 24843 00011DC3 488B4528                	mov rax, PARAM(1)	; param e2
 24844 00011DC7 50                      	push rax
 24845 00011DC8 6A01                    	push 1	; arg count
 24846 00011DCA 488B0425[100E0000]      	mov rax, qword [free_var_4]	; free var string?
 24847 00011DD2 803805                  	cmp byte [rax], T_undefined
 24848 00011DD5 0F8420380000            	je L_error_fvar_undefined
 24849 00011DDB 803804                  	cmp byte [rax], T_closure
 24850 00011DDE 0F859B380000            	jne L_error_non_closure
 24851 00011DE4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24852 00011DE7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24853                                  
 24854 00011DEA 483D[02000000]          	cmp rax, sob_boolean_false
 24855 00011DF0 7474                    	je .L_if_else_0444
 24856 00011DF2 488B4528                	mov rax, PARAM(1)	; param e2
 24857 00011DF6 50                      	push rax
 24858 00011DF7 6A01                    	push 1	; arg count
 24859 00011DF9 488B0425[FE0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 24860 00011E01 803805                  	cmp byte [rax], T_undefined
 24861 00011E04 0F84F1370000            	je L_error_fvar_undefined
 24862 00011E0A 803804                  	cmp byte [rax], T_closure
 24863 00011E0D 0F856C380000            	jne L_error_non_closure
 24864 00011E13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24865 00011E16 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24866 00011E19 50                      	push rax
 24867 00011E1A 488B4520                	mov rax, PARAM(0)	; param e1
 24868 00011E1E 50                      	push rax
 24869 00011E1F 6A01                    	push 1	; arg count
 24870 00011E21 488B0425[FE0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 24871 00011E29 803805                  	cmp byte [rax], T_undefined
 24872 00011E2C 0F84C9370000            	je L_error_fvar_undefined
 24873 00011E32 803804                  	cmp byte [rax], T_closure
 24874 00011E35 0F8544380000            	jne L_error_non_closure
 24875 00011E3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24876 00011E3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24877 00011E41 50                      	push rax
 24878 00011E42 6A02                    	push 2	; arg count
 24879 00011E44 488B0425[2A160000]      	mov rax, qword [free_var_126]	; free var =
 24880 00011E4C 803805                  	cmp byte [rax], T_undefined
 24881 00011E4F 0F84A6370000            	je L_error_fvar_undefined
 24882 00011E55 803804                  	cmp byte [rax], T_closure
 24883 00011E58 0F8521380000            	jne L_error_non_closure
 24884 00011E5E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24885 00011E61 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24886                                  
 24887 00011E64 EB0A                    	jmp .L_if_end_0444
 24888                                  
 24889                                  	.L_if_else_0444:
 24890 00011E66 48B8-                   	mov rax, L_constants + 2
 24890 00011E68 [0200000000000000] 
 24891                                  
 24892                                  	.L_if_end_0444:
 24893                                  
 24894 00011E70 EB0A                    	jmp .L_if_end_0443
 24895                                  
 24896                                  	.L_if_else_0443:
 24897 00011E72 48B8-                   	mov rax, L_constants + 2
 24897 00011E74 [0200000000000000] 
 24898                                  
 24899                                  	.L_if_end_0443:
 24900                                  
 24901 00011E7C 483D[02000000]          	cmp rax, sob_boolean_false
 24902 00011E82 7467                    	je .L_if_else_0442
 24903                                  	; preparing a tail-call
 24904 00011E84 488B4528                	mov rax, PARAM(1)	; param e2
 24905 00011E88 50                      	push rax
 24906 00011E89 488B4520                	mov rax, PARAM(0)	; param e1
 24907 00011E8D 50                      	push rax
 24908 00011E8E 6A02                    	push 2	; arg count
 24909 00011E90 488B0425[7E170000]      	mov rax, qword [free_var_146]	; free var string=?
 24910 00011E98 803805                  	cmp byte [rax], T_undefined
 24911 00011E9B 0F845A370000            	je L_error_fvar_undefined
 24912 00011EA1 803804                  	cmp byte [rax], T_closure
 24913 00011EA4 0F85D5370000            	jne L_error_non_closure
 24914 00011EAA FF7001                  	push SOB_CLOSURE_ENV(rax)
 24915                                  
 24916                                  	; recycling the current frame
 24917 00011EAD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24918 00011EB0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24919 00011EB3 B906000000              	mov rcx, 2 + 4
 24920 00011EB8 488B5D18                	mov rbx, COUNT
 24921 00011EBC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24922 00011EC1 488D55F8                	lea rdx, [rbp - 8 * 1]
 24923                                  .L_tc_recycle_frame_loop_0793:
 24924 00011EC5 4883F900                	cmp rcx, 0
 24925 00011EC9 7413                    	je .L_tc_recycle_frame_done_0793
 24926 00011ECB 488B32                  	mov rsi, qword [rdx]
 24927 00011ECE 488933                  	mov qword [rbx], rsi
 24928 00011ED1 48FFC9                  	dec rcx
 24929 00011ED4 4883EB08                	sub rbx, 8 * 1
 24930 00011ED8 4883EA08                	sub rdx, 8 * 1
 24931 00011EDC EBE7                    	jmp .L_tc_recycle_frame_loop_0793
 24932                                  .L_tc_recycle_frame_done_0793:
 24933 00011EDE 488D6308                	lea rsp, [rbx + 8 * 1]
 24934 00011EE2 5D                      	pop rbp	; the proc will restore it!
 24935 00011EE3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24936                                  
 24937 00011EE6 E901020000              	jmp .L_if_end_0442
 24938                                  
 24939                                  	.L_if_else_0442:
 24940 00011EEB 488B4520                	mov rax, PARAM(0)	; param e1
 24941 00011EEF 50                      	push rax
 24942 00011EF0 6A01                    	push 1	; arg count
 24943 00011EF2 488B0425[870E0000]      	mov rax, qword [free_var_11]	; free var number?
 24944 00011EFA 803805                  	cmp byte [rax], T_undefined
 24945 00011EFD 0F84F8360000            	je L_error_fvar_undefined
 24946 00011F03 803804                  	cmp byte [rax], T_closure
 24947 00011F06 0F8573370000            	jne L_error_non_closure
 24948 00011F0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24949 00011F0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24950                                  
 24951 00011F12 483D[02000000]          	cmp rax, sob_boolean_false
 24952 00011F18 7429                    	je .L_if_else_0446
 24953 00011F1A 488B4528                	mov rax, PARAM(1)	; param e2
 24954 00011F1E 50                      	push rax
 24955 00011F1F 6A01                    	push 1	; arg count
 24956 00011F21 488B0425[870E0000]      	mov rax, qword [free_var_11]	; free var number?
 24957 00011F29 803805                  	cmp byte [rax], T_undefined
 24958 00011F2C 0F84C9360000            	je L_error_fvar_undefined
 24959 00011F32 803804                  	cmp byte [rax], T_closure
 24960 00011F35 0F8544370000            	jne L_error_non_closure
 24961 00011F3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24962 00011F3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24963                                  
 24964 00011F41 EB0A                    	jmp .L_if_end_0446
 24965                                  
 24966                                  	.L_if_else_0446:
 24967 00011F43 48B8-                   	mov rax, L_constants + 2
 24967 00011F45 [0200000000000000] 
 24968                                  
 24969                                  	.L_if_end_0446:
 24970                                  
 24971 00011F4D 483D[02000000]          	cmp rax, sob_boolean_false
 24972 00011F53 7467                    	je .L_if_else_0445
 24973                                  	; preparing a tail-call
 24974 00011F55 488B4528                	mov rax, PARAM(1)	; param e2
 24975 00011F59 50                      	push rax
 24976 00011F5A 488B4520                	mov rax, PARAM(0)	; param e1
 24977 00011F5E 50                      	push rax
 24978 00011F5F 6A02                    	push 2	; arg count
 24979 00011F61 488B0425[2A160000]      	mov rax, qword [free_var_126]	; free var =
 24980 00011F69 803805                  	cmp byte [rax], T_undefined
 24981 00011F6C 0F8489360000            	je L_error_fvar_undefined
 24982 00011F72 803804                  	cmp byte [rax], T_closure
 24983 00011F75 0F8504370000            	jne L_error_non_closure
 24984 00011F7B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24985                                  
 24986                                  	; recycling the current frame
 24987 00011F7E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 24988 00011F81 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 24989 00011F84 B906000000              	mov rcx, 2 + 4
 24990 00011F89 488B5D18                	mov rbx, COUNT
 24991 00011F8D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 24992 00011F92 488D55F8                	lea rdx, [rbp - 8 * 1]
 24993                                  .L_tc_recycle_frame_loop_0794:
 24994 00011F96 4883F900                	cmp rcx, 0
 24995 00011F9A 7413                    	je .L_tc_recycle_frame_done_0794
 24996 00011F9C 488B32                  	mov rsi, qword [rdx]
 24997 00011F9F 488933                  	mov qword [rbx], rsi
 24998 00011FA2 48FFC9                  	dec rcx
 24999 00011FA5 4883EB08                	sub rbx, 8 * 1
 25000 00011FA9 4883EA08                	sub rdx, 8 * 1
 25001 00011FAD EBE7                    	jmp .L_tc_recycle_frame_loop_0794
 25002                                  .L_tc_recycle_frame_done_0794:
 25003 00011FAF 488D6308                	lea rsp, [rbx + 8 * 1]
 25004 00011FB3 5D                      	pop rbp	; the proc will restore it!
 25005 00011FB4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25006                                  
 25007 00011FB7 E930010000              	jmp .L_if_end_0445
 25008                                  
 25009                                  	.L_if_else_0445:
 25010 00011FBC 488B4520                	mov rax, PARAM(0)	; param e1
 25011 00011FC0 50                      	push rax
 25012 00011FC1 6A01                    	push 1	; arg count
 25013 00011FC3 488B0425[FF0D0000]      	mov rax, qword [free_var_3]	; free var char?
 25014 00011FCB 803805                  	cmp byte [rax], T_undefined
 25015 00011FCE 0F8427360000            	je L_error_fvar_undefined
 25016 00011FD4 803804                  	cmp byte [rax], T_closure
 25017 00011FD7 0F85A2360000            	jne L_error_non_closure
 25018 00011FDD FF7001                  	push SOB_CLOSURE_ENV(rax)
 25019 00011FE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25020                                  
 25021 00011FE3 483D[02000000]          	cmp rax, sob_boolean_false
 25022 00011FE9 7429                    	je .L_if_else_0448
 25023 00011FEB 488B4528                	mov rax, PARAM(1)	; param e2
 25024 00011FEF 50                      	push rax
 25025 00011FF0 6A01                    	push 1	; arg count
 25026 00011FF2 488B0425[FF0D0000]      	mov rax, qword [free_var_3]	; free var char?
 25027 00011FFA 803805                  	cmp byte [rax], T_undefined
 25028 00011FFD 0F84F8350000            	je L_error_fvar_undefined
 25029 00012003 803804                  	cmp byte [rax], T_closure
 25030 00012006 0F8573360000            	jne L_error_non_closure
 25031 0001200C FF7001                  	push SOB_CLOSURE_ENV(rax)
 25032 0001200F FF5009                  	call SOB_CLOSURE_CODE(rax)
 25033                                  
 25034 00012012 EB0A                    	jmp .L_if_end_0448
 25035                                  
 25036                                  	.L_if_else_0448:
 25037 00012014 48B8-                   	mov rax, L_constants + 2
 25037 00012016 [0200000000000000] 
 25038                                  
 25039                                  	.L_if_end_0448:
 25040                                  
 25041 0001201E 483D[02000000]          	cmp rax, sob_boolean_false
 25042 00012024 7464                    	je .L_if_else_0447
 25043                                  	; preparing a tail-call
 25044 00012026 488B4528                	mov rax, PARAM(1)	; param e2
 25045 0001202A 50                      	push rax
 25046 0001202B 488B4520                	mov rax, PARAM(0)	; param e1
 25047 0001202F 50                      	push rax
 25048 00012030 6A02                    	push 2	; arg count
 25049 00012032 488B0425[6E160000]      	mov rax, qword [free_var_130]	; free var char=?
 25050 0001203A 803805                  	cmp byte [rax], T_undefined
 25051 0001203D 0F84B8350000            	je L_error_fvar_undefined
 25052 00012043 803804                  	cmp byte [rax], T_closure
 25053 00012046 0F8533360000            	jne L_error_non_closure
 25054 0001204C FF7001                  	push SOB_CLOSURE_ENV(rax)
 25055                                  
 25056                                  	; recycling the current frame
 25057 0001204F FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25058 00012052 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25059 00012055 B906000000              	mov rcx, 2 + 4
 25060 0001205A 488B5D18                	mov rbx, COUNT
 25061 0001205E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25062 00012063 488D55F8                	lea rdx, [rbp - 8 * 1]
 25063                                  .L_tc_recycle_frame_loop_0795:
 25064 00012067 4883F900                	cmp rcx, 0
 25065 0001206B 7413                    	je .L_tc_recycle_frame_done_0795
 25066 0001206D 488B32                  	mov rsi, qword [rdx]
 25067 00012070 488933                  	mov qword [rbx], rsi
 25068 00012073 48FFC9                  	dec rcx
 25069 00012076 4883EB08                	sub rbx, 8 * 1
 25070 0001207A 4883EA08                	sub rdx, 8 * 1
 25071 0001207E EBE7                    	jmp .L_tc_recycle_frame_loop_0795
 25072                                  .L_tc_recycle_frame_done_0795:
 25073 00012080 488D6308                	lea rsp, [rbx + 8 * 1]
 25074 00012084 5D                      	pop rbp	; the proc will restore it!
 25075 00012085 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25076                                  
 25077 00012088 EB62                    	jmp .L_if_end_0447
 25078                                  
 25079                                  	.L_if_else_0447:
 25080                                  	; preparing a tail-call
 25081 0001208A 488B4528                	mov rax, PARAM(1)	; param e2
 25082 0001208E 50                      	push rax
 25083 0001208F 488B4520                	mov rax, PARAM(0)	; param e1
 25084 00012093 50                      	push rax
 25085 00012094 6A02                    	push 2	; arg count
 25086 00012096 488B0425[D9110000]      	mov rax, qword [free_var_61]	; free var eq?
 25087 0001209E 803805                  	cmp byte [rax], T_undefined
 25088 000120A1 0F8454350000            	je L_error_fvar_undefined
 25089 000120A7 803804                  	cmp byte [rax], T_closure
 25090 000120AA 0F85CF350000            	jne L_error_non_closure
 25091 000120B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25092                                  
 25093                                  	; recycling the current frame
 25094 000120B3 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25095 000120B6 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25096 000120B9 B906000000              	mov rcx, 2 + 4
 25097 000120BE 488B5D18                	mov rbx, COUNT
 25098 000120C2 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25099 000120C7 488D55F8                	lea rdx, [rbp - 8 * 1]
 25100                                  .L_tc_recycle_frame_loop_0796:
 25101 000120CB 4883F900                	cmp rcx, 0
 25102 000120CF 7413                    	je .L_tc_recycle_frame_done_0796
 25103 000120D1 488B32                  	mov rsi, qword [rdx]
 25104 000120D4 488933                  	mov qword [rbx], rsi
 25105 000120D7 48FFC9                  	dec rcx
 25106 000120DA 4883EB08                	sub rbx, 8 * 1
 25107 000120DE 4883EA08                	sub rdx, 8 * 1
 25108 000120E2 EBE7                    	jmp .L_tc_recycle_frame_loop_0796
 25109                                  .L_tc_recycle_frame_done_0796:
 25110 000120E4 488D6308                	lea rsp, [rbx + 8 * 1]
 25111 000120E8 5D                      	pop rbp	; the proc will restore it!
 25112 000120E9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25113                                  
 25114                                  	.L_if_end_0447:
 25115                                  
 25116                                  	.L_if_end_0445:
 25117                                  
 25118                                  	.L_if_end_0442:
 25119                                  
 25120                                  	.L_if_end_043f:
 25121                                  
 25122                                  	.L_if_end_043c:
 25123 000120EC C9                      	leave
 25124 000120ED C22000                  	ret AND_KILL_FRAME(2)
 25125                                  .L_lambda_simple_end_05be:	; new closure is in rax
 25126 000120F0 48890425[B0180000]      	mov qword [free_var_164], rax
 25127 000120F8 48B8-                   	mov rax, sob_void
 25127 000120FA [0000000000000000] 
 25128                                  
 25129 00012102 4889C7                  	mov rdi, rax
 25130 00012105 E830370000              	call print_sexpr_if_not_void
 25131                                  
 25132 0001210A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25133 0001210F E814360000              	call malloc
 25134 00012114 50                      	push rax
 25135 00012115 BF00000000              	mov rdi, 8 * 0	; new rib
 25136 0001211A E809360000              	call malloc
 25137 0001211F 50                      	push rax
 25138 00012120 BF08000000              	mov rdi, 8 * 1	; extended env
 25139 00012125 E8FE350000              	call malloc
 25140 0001212A 488B7D10                	mov rdi, ENV
 25141 0001212E BE00000000              	mov rsi, 0
 25142 00012133 BA01000000              	mov rdx, 1
 25143                                  .L_lambda_simple_env_loop_05bf:	; ext_env[i + 1] <-- env[i]
 25144 00012138 4883FE00                	cmp rsi, 0
 25145 0001213C 7410                    	je .L_lambda_simple_env_end_05bf
 25146 0001213E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25147 00012142 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25148 00012146 48FFC6                  	inc rsi
 25149 00012149 48FFC2                  	inc rdx
 25150 0001214C EBEA                    	jmp .L_lambda_simple_env_loop_05bf
 25151                                  .L_lambda_simple_env_end_05bf:
 25152 0001214E 5B                      	pop rbx
 25153 0001214F BE00000000              	mov rsi, 0
 25154                                  .L_lambda_simple_params_loop_05bf:	; copy params
 25155 00012154 4883FE00                	cmp rsi, 0
 25156 00012158 740E                    	je .L_lambda_simple_params_end_05bf
 25157 0001215A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25158 0001215F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25159 00012163 48FFC6                  	inc rsi
 25160 00012166 EBEC                    	jmp .L_lambda_simple_params_loop_05bf
 25161                                  .L_lambda_simple_params_end_05bf:
 25162 00012168 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25163 0001216B 4889C3                  	mov rbx, rax
 25164 0001216E 58                      	pop rax
 25165 0001216F C60004                  	mov byte [rax], T_closure
 25166 00012172 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25167 00012176 48C74009[83210100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05bf
 25168 0001217E E997010000              	jmp .L_lambda_simple_end_05bf
 25169                                  .L_lambda_simple_code_05bf:	; lambda-simple body
 25170 00012183 48837C241002            	cmp qword [rsp + 8 * 2], 2
 25171 00012189 740B                    	je .L_lambda_simple_arity_check_ok_05bf
 25172 0001218B FF742410                	push qword [rsp + 8 * 2]
 25173 0001218F 6A02                    	push 2
 25174 00012191 E94B350000              	jmp L_error_incorrect_arity_simple
 25175                                  .L_lambda_simple_arity_check_ok_05bf:
 25176 00012196 C8000000                	enter 0, 0
 25177 0001219A 488B4528                	mov rax, PARAM(1)	; param s
 25178 0001219E 50                      	push rax
 25179 0001219F 6A01                    	push 1	; arg count
 25180 000121A1 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 25181 000121A9 803805                  	cmp byte [rax], T_undefined
 25182 000121AC 0F8449340000            	je L_error_fvar_undefined
 25183 000121B2 803804                  	cmp byte [rax], T_closure
 25184 000121B5 0F85C4340000            	jne L_error_non_closure
 25185 000121BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 25186 000121BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 25187                                  
 25188 000121C1 483D[02000000]          	cmp rax, sob_boolean_false
 25189 000121C7 740F                    	je .L_if_else_0449
 25190 000121C9 48B8-                   	mov rax, L_constants + 2
 25190 000121CB [0200000000000000] 
 25191                                  
 25192 000121D3 E93E010000              	jmp .L_if_end_0449
 25193                                  
 25194                                  	.L_if_else_0449:
 25195 000121D8 488B4520                	mov rax, PARAM(0)	; param a
 25196 000121DC 50                      	push rax
 25197 000121DD 488B4528                	mov rax, PARAM(1)	; param s
 25198 000121E1 50                      	push rax
 25199 000121E2 6A01                    	push 1	; arg count
 25200 000121E4 488B0425[B6120000]      	mov rax, qword [free_var_74]	; free var caar
 25201 000121EC 803805                  	cmp byte [rax], T_undefined
 25202 000121EF 0F8406340000            	je L_error_fvar_undefined
 25203 000121F5 803804                  	cmp byte [rax], T_closure
 25204 000121F8 0F8581340000            	jne L_error_non_closure
 25205 000121FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 25206 00012201 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25207 00012204 50                      	push rax
 25208 00012205 6A02                    	push 2	; arg count
 25209 00012207 488B0425[D9110000]      	mov rax, qword [free_var_61]	; free var eq?
 25210 0001220F 803805                  	cmp byte [rax], T_undefined
 25211 00012212 0F84E3330000            	je L_error_fvar_undefined
 25212 00012218 803804                  	cmp byte [rax], T_closure
 25213 0001221B 0F855E340000            	jne L_error_non_closure
 25214 00012221 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25215 00012224 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25216                                  
 25217 00012227 483D[02000000]          	cmp rax, sob_boolean_false
 25218 0001222D 7462                    	je .L_if_else_044a
 25219                                  	; preparing a tail-call
 25220 0001222F 488B4528                	mov rax, PARAM(1)	; param s
 25221 00012233 50                      	push rax
 25222 00012234 6A01                    	push 1	; arg count
 25223 00012236 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 25224 0001223E 803805                  	cmp byte [rax], T_undefined
 25225 00012241 0F84B4330000            	je L_error_fvar_undefined
 25226 00012247 803804                  	cmp byte [rax], T_closure
 25227 0001224A 0F852F340000            	jne L_error_non_closure
 25228 00012250 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25229                                  
 25230                                  	; recycling the current frame
 25231 00012253 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25232 00012256 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25233 00012259 B905000000              	mov rcx, 1 + 4
 25234 0001225E 488B5D18                	mov rbx, COUNT
 25235 00012262 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25236 00012267 488D55F8                	lea rdx, [rbp - 8 * 1]
 25237                                  .L_tc_recycle_frame_loop_0797:
 25238 0001226B 4883F900                	cmp rcx, 0
 25239 0001226F 7413                    	je .L_tc_recycle_frame_done_0797
 25240 00012271 488B32                  	mov rsi, qword [rdx]
 25241 00012274 488933                  	mov qword [rbx], rsi
 25242 00012277 48FFC9                  	dec rcx
 25243 0001227A 4883EB08                	sub rbx, 8 * 1
 25244 0001227E 4883EA08                	sub rdx, 8 * 1
 25245 00012282 EBE7                    	jmp .L_tc_recycle_frame_loop_0797
 25246                                  .L_tc_recycle_frame_done_0797:
 25247 00012284 488D6308                	lea rsp, [rbx + 8 * 1]
 25248 00012288 5D                      	pop rbp	; the proc will restore it!
 25249 00012289 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25250                                  
 25251 0001228C E985000000              	jmp .L_if_end_044a
 25252                                  
 25253                                  	.L_if_else_044a:
 25254                                  	; preparing a tail-call
 25255 00012291 488B4528                	mov rax, PARAM(1)	; param s
 25256 00012295 50                      	push rax
 25257 00012296 6A01                    	push 1	; arg count
 25258 00012298 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 25259 000122A0 803805                  	cmp byte [rax], T_undefined
 25260 000122A3 0F8452330000            	je L_error_fvar_undefined
 25261 000122A9 803804                  	cmp byte [rax], T_closure
 25262 000122AC 0F85CD330000            	jne L_error_non_closure
 25263 000122B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25264 000122B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25265 000122B8 50                      	push rax
 25266 000122B9 488B4520                	mov rax, PARAM(0)	; param a
 25267 000122BD 50                      	push rax
 25268 000122BE 6A02                    	push 2	; arg count
 25269 000122C0 488B0425[C1180000]      	mov rax, qword [free_var_165]	; free var assoc
 25270 000122C8 803805                  	cmp byte [rax], T_undefined
 25271 000122CB 0F842A330000            	je L_error_fvar_undefined
 25272 000122D1 803804                  	cmp byte [rax], T_closure
 25273 000122D4 0F85A5330000            	jne L_error_non_closure
 25274 000122DA FF7001                  	push SOB_CLOSURE_ENV(rax)
 25275                                  
 25276                                  	; recycling the current frame
 25277 000122DD FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25278 000122E0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25279 000122E3 B906000000              	mov rcx, 2 + 4
 25280 000122E8 488B5D18                	mov rbx, COUNT
 25281 000122EC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25282 000122F1 488D55F8                	lea rdx, [rbp - 8 * 1]
 25283                                  .L_tc_recycle_frame_loop_0798:
 25284 000122F5 4883F900                	cmp rcx, 0
 25285 000122F9 7413                    	je .L_tc_recycle_frame_done_0798
 25286 000122FB 488B32                  	mov rsi, qword [rdx]
 25287 000122FE 488933                  	mov qword [rbx], rsi
 25288 00012301 48FFC9                  	dec rcx
 25289 00012304 4883EB08                	sub rbx, 8 * 1
 25290 00012308 4883EA08                	sub rdx, 8 * 1
 25291 0001230C EBE7                    	jmp .L_tc_recycle_frame_loop_0798
 25292                                  .L_tc_recycle_frame_done_0798:
 25293 0001230E 488D6308                	lea rsp, [rbx + 8 * 1]
 25294 00012312 5D                      	pop rbp	; the proc will restore it!
 25295 00012313 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25296                                  
 25297                                  	.L_if_end_044a:
 25298                                  
 25299                                  	.L_if_end_0449:
 25300 00012316 C9                      	leave
 25301 00012317 C22000                  	ret AND_KILL_FRAME(2)
 25302                                  .L_lambda_simple_end_05bf:	; new closure is in rax
 25303 0001231A 48890425[C1180000]      	mov qword [free_var_165], rax
 25304 00012322 48B8-                   	mov rax, sob_void
 25304 00012324 [0000000000000000] 
 25305                                  
 25306 0001232C 4889C7                  	mov rdi, rax
 25307 0001232F E806350000              	call print_sexpr_if_not_void
 25308                                  
 25309 00012334 48B8-                   	mov rax, L_constants + 1881
 25309 00012336 [5907000000000000] 
 25310 0001233E 50                      	push rax
 25311 0001233F 48B8-                   	mov rax, L_constants + 1881
 25311 00012341 [5907000000000000] 
 25312 00012349 50                      	push rax
 25313 0001234A 6A02                    	push 2	; arg count
 25314 0001234C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25315 00012351 E8D2330000              	call malloc
 25316 00012356 50                      	push rax
 25317 00012357 BF00000000              	mov rdi, 8 * 0	; new rib
 25318 0001235C E8C7330000              	call malloc
 25319 00012361 50                      	push rax
 25320 00012362 BF08000000              	mov rdi, 8 * 1	; extended env
 25321 00012367 E8BC330000              	call malloc
 25322 0001236C 488B7D10                	mov rdi, ENV
 25323 00012370 BE00000000              	mov rsi, 0
 25324 00012375 BA01000000              	mov rdx, 1
 25325                                  .L_lambda_simple_env_loop_05c0:	; ext_env[i + 1] <-- env[i]
 25326 0001237A 4883FE00                	cmp rsi, 0
 25327 0001237E 7410                    	je .L_lambda_simple_env_end_05c0
 25328 00012380 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25329 00012384 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25330 00012388 48FFC6                  	inc rsi
 25331 0001238B 48FFC2                  	inc rdx
 25332 0001238E EBEA                    	jmp .L_lambda_simple_env_loop_05c0
 25333                                  .L_lambda_simple_env_end_05c0:
 25334 00012390 5B                      	pop rbx
 25335 00012391 BE00000000              	mov rsi, 0
 25336                                  .L_lambda_simple_params_loop_05c0:	; copy params
 25337 00012396 4883FE00                	cmp rsi, 0
 25338 0001239A 740E                    	je .L_lambda_simple_params_end_05c0
 25339 0001239C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25340 000123A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25341 000123A5 48FFC6                  	inc rsi
 25342 000123A8 EBEC                    	jmp .L_lambda_simple_params_loop_05c0
 25343                                  .L_lambda_simple_params_end_05c0:
 25344 000123AA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25345 000123AD 4889C3                  	mov rbx, rax
 25346 000123B0 58                      	pop rax
 25347 000123B1 C60004                  	mov byte [rax], T_closure
 25348 000123B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25349 000123B8 48C74009[C5230100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05c0
 25350 000123C0 E99D070000              	jmp .L_lambda_simple_end_05c0
 25351                                  .L_lambda_simple_code_05c0:	; lambda-simple body
 25352 000123C5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 25353 000123CB 740B                    	je .L_lambda_simple_arity_check_ok_05c0
 25354 000123CD FF742410                	push qword [rsp + 8 * 2]
 25355 000123D1 6A02                    	push 2
 25356 000123D3 E909330000              	jmp L_error_incorrect_arity_simple
 25357                                  .L_lambda_simple_arity_check_ok_05c0:
 25358 000123D8 C8000000                	enter 0, 0
 25359                                  
 25360 000123DC BF08000000              	mov rdi, 8
 25361 000123E1 E842330000              	call malloc
 25362 000123E6 488B5D20                	mov rbx, PARAM(0)	; param run
 25363 000123EA 488918                  	mov [rax], rbx	; box run
 25364 000123ED 48894520                	mov PARAM(0), rax	;replace param run with box
 25365 000123F1 48B8-                   	mov rax, sob_void
 25365 000123F3 [0000000000000000] 
 25366                                  
 25367                                  
 25368 000123FB BF08000000              	mov rdi, 8
 25369 00012400 E823330000              	call malloc
 25370 00012405 488B5D28                	mov rbx, PARAM(1)	; param add
 25371 00012409 488918                  	mov [rax], rbx	; box add
 25372 0001240C 48894528                	mov PARAM(1), rax	;replace param add with box
 25373 00012410 48B8-                   	mov rax, sob_void
 25373 00012412 [0000000000000000] 
 25374                                  
 25375 0001241A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25376 0001241F E804330000              	call malloc
 25377 00012424 50                      	push rax
 25378 00012425 BF10000000              	mov rdi, 8 * 2	; new rib
 25379 0001242A E8F9320000              	call malloc
 25380 0001242F 50                      	push rax
 25381 00012430 BF10000000              	mov rdi, 8 * 2	; extended env
 25382 00012435 E8EE320000              	call malloc
 25383 0001243A 488B7D10                	mov rdi, ENV
 25384 0001243E BE00000000              	mov rsi, 0
 25385 00012443 BA01000000              	mov rdx, 1
 25386                                  .L_lambda_simple_env_loop_05c1:	; ext_env[i + 1] <-- env[i]
 25387 00012448 4883FE01                	cmp rsi, 1
 25388 0001244C 7410                    	je .L_lambda_simple_env_end_05c1
 25389 0001244E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25390 00012452 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25391 00012456 48FFC6                  	inc rsi
 25392 00012459 48FFC2                  	inc rdx
 25393 0001245C EBEA                    	jmp .L_lambda_simple_env_loop_05c1
 25394                                  .L_lambda_simple_env_end_05c1:
 25395 0001245E 5B                      	pop rbx
 25396 0001245F BE00000000              	mov rsi, 0
 25397                                  .L_lambda_simple_params_loop_05c1:	; copy params
 25398 00012464 4883FE02                	cmp rsi, 2
 25399 00012468 740E                    	je .L_lambda_simple_params_end_05c1
 25400 0001246A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25401 0001246F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25402 00012473 48FFC6                  	inc rsi
 25403 00012476 EBEC                    	jmp .L_lambda_simple_params_loop_05c1
 25404                                  .L_lambda_simple_params_end_05c1:
 25405 00012478 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25406 0001247B 4889C3                  	mov rbx, rax
 25407 0001247E 58                      	pop rax
 25408 0001247F C60004                  	mov byte [rax], T_closure
 25409 00012482 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25410 00012486 48C74009[93240100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05c1
 25411 0001248E E96A020000              	jmp .L_lambda_simple_end_05c1
 25412                                  .L_lambda_simple_code_05c1:	; lambda-simple body
 25413 00012493 48837C241003            	cmp qword [rsp + 8 * 2], 3
 25414 00012499 740B                    	je .L_lambda_simple_arity_check_ok_05c1
 25415 0001249B FF742410                	push qword [rsp + 8 * 2]
 25416 0001249F 6A03                    	push 3
 25417 000124A1 E93B320000              	jmp L_error_incorrect_arity_simple
 25418                                  .L_lambda_simple_arity_check_ok_05c1:
 25419 000124A6 C8000000                	enter 0, 0
 25420 000124AA 488B4530                	mov rax, PARAM(2)	; param s
 25421 000124AE 50                      	push rax
 25422 000124AF 6A01                    	push 1	; arg count
 25423 000124B1 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 25424 000124B9 803805                  	cmp byte [rax], T_undefined
 25425 000124BC 0F8439310000            	je L_error_fvar_undefined
 25426 000124C2 803804                  	cmp byte [rax], T_closure
 25427 000124C5 0F85B4310000            	jne L_error_non_closure
 25428 000124CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 25429 000124CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 25430                                  
 25431 000124D1 483D[02000000]          	cmp rax, sob_boolean_false
 25432 000124D7 7409                    	je .L_if_else_044b
 25433 000124D9 488B4520                	mov rax, PARAM(0)	; param target
 25434                                  
 25435 000124DD E917020000              	jmp .L_if_end_044b
 25436                                  
 25437                                  	.L_if_else_044b:
 25438                                  	; preparing a tail-call
 25439 000124E2 488B4530                	mov rax, PARAM(2)	; param s
 25440 000124E6 50                      	push rax
 25441 000124E7 6A01                    	push 1	; arg count
 25442 000124E9 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 25443 000124F1 803805                  	cmp byte [rax], T_undefined
 25444 000124F4 0F8401310000            	je L_error_fvar_undefined
 25445 000124FA 803804                  	cmp byte [rax], T_closure
 25446 000124FD 0F857C310000            	jne L_error_non_closure
 25447 00012503 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25448 00012506 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25449 00012509 50                      	push rax
 25450 0001250A 6A01                    	push 1	; arg count
 25451 0001250C 488B0425[FE0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 25452 00012514 803805                  	cmp byte [rax], T_undefined
 25453 00012517 0F84DE300000            	je L_error_fvar_undefined
 25454 0001251D 803804                  	cmp byte [rax], T_closure
 25455 00012520 0F8559310000            	jne L_error_non_closure
 25456 00012526 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25457 00012529 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25458 0001252C 50                      	push rax
 25459 0001252D 48B8-                   	mov rax, L_constants + 2023
 25459 0001252F [E707000000000000] 
 25460 00012537 50                      	push rax
 25461 00012538 488B4530                	mov rax, PARAM(2)	; param s
 25462 0001253C 50                      	push rax
 25463 0001253D 6A01                    	push 1	; arg count
 25464 0001253F 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 25465 00012547 803805                  	cmp byte [rax], T_undefined
 25466 0001254A 0F84AB300000            	je L_error_fvar_undefined
 25467 00012550 803804                  	cmp byte [rax], T_closure
 25468 00012553 0F8526310000            	jne L_error_non_closure
 25469 00012559 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25470 0001255C FF5009                  	call SOB_CLOSURE_CODE(rax)
 25471 0001255F 50                      	push rax
 25472 00012560 488B4528                	mov rax, PARAM(1)	; param i
 25473 00012564 50                      	push rax
 25474 00012565 488B4520                	mov rax, PARAM(0)	; param target
 25475 00012569 50                      	push rax
 25476 0001256A 6A05                    	push 5	; arg count
 25477 0001256C 488B4510                	mov rax, ENV
 25478 00012570 488B00                  	mov rax, qword [rax + 8 * 0]
 25479 00012573 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 25480 00012577 488B00                  	mov rax, qword [rax]
 25481 0001257A 803804                  	cmp byte [rax], T_closure
 25482 0001257D 0F85FC300000            	jne L_error_non_closure
 25483 00012583 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25484 00012586 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25485 00012589 50                      	push rax
 25486 0001258A 6A01                    	push 1	; arg count
 25487 0001258C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25488 00012591 E892310000              	call malloc
 25489 00012596 50                      	push rax
 25490 00012597 BF18000000              	mov rdi, 8 * 3	; new rib
 25491 0001259C E887310000              	call malloc
 25492 000125A1 50                      	push rax
 25493 000125A2 BF18000000              	mov rdi, 8 * 3	; extended env
 25494 000125A7 E87C310000              	call malloc
 25495 000125AC 488B7D10                	mov rdi, ENV
 25496 000125B0 BE00000000              	mov rsi, 0
 25497 000125B5 BA01000000              	mov rdx, 1
 25498                                  .L_lambda_simple_env_loop_05c2:	; ext_env[i + 1] <-- env[i]
 25499 000125BA 4883FE02                	cmp rsi, 2
 25500 000125BE 7410                    	je .L_lambda_simple_env_end_05c2
 25501 000125C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25502 000125C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25503 000125C8 48FFC6                  	inc rsi
 25504 000125CB 48FFC2                  	inc rdx
 25505 000125CE EBEA                    	jmp .L_lambda_simple_env_loop_05c2
 25506                                  .L_lambda_simple_env_end_05c2:
 25507 000125D0 5B                      	pop rbx
 25508 000125D1 BE00000000              	mov rsi, 0
 25509                                  .L_lambda_simple_params_loop_05c2:	; copy params
 25510 000125D6 4883FE03                	cmp rsi, 3
 25511 000125DA 740E                    	je .L_lambda_simple_params_end_05c2
 25512 000125DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25513 000125E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25514 000125E5 48FFC6                  	inc rsi
 25515 000125E8 EBEC                    	jmp .L_lambda_simple_params_loop_05c2
 25516                                  .L_lambda_simple_params_end_05c2:
 25517 000125EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25518 000125ED 4889C3                  	mov rbx, rax
 25519 000125F0 58                      	pop rax
 25520 000125F1 C60004                  	mov byte [rax], T_closure
 25521 000125F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25522 000125F8 48C74009[05260100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05c2
 25523 00012600 E9AF000000              	jmp .L_lambda_simple_end_05c2
 25524                                  .L_lambda_simple_code_05c2:	; lambda-simple body
 25525 00012605 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25526 0001260B 740B                    	je .L_lambda_simple_arity_check_ok_05c2
 25527 0001260D FF742410                	push qword [rsp + 8 * 2]
 25528 00012611 6A01                    	push 1
 25529 00012613 E9C9300000              	jmp L_error_incorrect_arity_simple
 25530                                  .L_lambda_simple_arity_check_ok_05c2:
 25531 00012618 C8000000                	enter 0, 0
 25532                                  	; preparing a tail-call
 25533 0001261C 488B4510                	mov rax, ENV
 25534 00012620 488B00                  	mov rax, qword [rax + 8 * 0]
 25535 00012623 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 25536 00012627 50                      	push rax
 25537 00012628 6A01                    	push 1	; arg count
 25538 0001262A 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 25539 00012632 803805                  	cmp byte [rax], T_undefined
 25540 00012635 0F84C02F0000            	je L_error_fvar_undefined
 25541 0001263B 803804                  	cmp byte [rax], T_closure
 25542 0001263E 0F853B300000            	jne L_error_non_closure
 25543 00012644 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25544 00012647 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25545 0001264A 50                      	push rax
 25546 0001264B 488B4520                	mov rax, PARAM(0)	; param i
 25547 0001264F 50                      	push rax
 25548 00012650 488B4510                	mov rax, ENV
 25549 00012654 488B00                  	mov rax, qword [rax + 8 * 0]
 25550 00012657 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 25551 0001265A 50                      	push rax
 25552 0001265B 6A03                    	push 3	; arg count
 25553 0001265D 488B4510                	mov rax, ENV
 25554 00012661 488B4008                	mov rax, qword [rax + 8 * 1]
 25555 00012665 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25556 00012668 488B00                  	mov rax, qword [rax]
 25557 0001266B 803804                  	cmp byte [rax], T_closure
 25558 0001266E 0F850B300000            	jne L_error_non_closure
 25559 00012674 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25560                                  
 25561                                  	; recycling the current frame
 25562 00012677 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25563 0001267A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25564 0001267D B907000000              	mov rcx, 3 + 4
 25565 00012682 488B5D18                	mov rbx, COUNT
 25566 00012686 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25567 0001268B 488D55F8                	lea rdx, [rbp - 8 * 1]
 25568                                  .L_tc_recycle_frame_loop_0799:
 25569 0001268F 4883F900                	cmp rcx, 0
 25570 00012693 7413                    	je .L_tc_recycle_frame_done_0799
 25571 00012695 488B32                  	mov rsi, qword [rdx]
 25572 00012698 488933                  	mov qword [rbx], rsi
 25573 0001269B 48FFC9                  	dec rcx
 25574 0001269E 4883EB08                	sub rbx, 8 * 1
 25575 000126A2 4883EA08                	sub rdx, 8 * 1
 25576 000126A6 EBE7                    	jmp .L_tc_recycle_frame_loop_0799
 25577                                  .L_tc_recycle_frame_done_0799:
 25578 000126A8 488D6308                	lea rsp, [rbx + 8 * 1]
 25579 000126AC 5D                      	pop rbp	; the proc will restore it!
 25580 000126AD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25581 000126B0 C9                      	leave
 25582 000126B1 C21800                  	ret AND_KILL_FRAME(1)
 25583                                  .L_lambda_simple_end_05c2:	; new closure is in rax
 25584 000126B4 803804                  	cmp byte [rax], T_closure
 25585 000126B7 0F85C22F0000            	jne L_error_non_closure
 25586 000126BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 25587                                  
 25588                                  	; recycling the current frame
 25589 000126C0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25590 000126C3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25591 000126C6 B905000000              	mov rcx, 1 + 4
 25592 000126CB 488B5D18                	mov rbx, COUNT
 25593 000126CF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25594 000126D4 488D55F8                	lea rdx, [rbp - 8 * 1]
 25595                                  .L_tc_recycle_frame_loop_079a:
 25596 000126D8 4883F900                	cmp rcx, 0
 25597 000126DC 7413                    	je .L_tc_recycle_frame_done_079a
 25598 000126DE 488B32                  	mov rsi, qword [rdx]
 25599 000126E1 488933                  	mov qword [rbx], rsi
 25600 000126E4 48FFC9                  	dec rcx
 25601 000126E7 4883EB08                	sub rbx, 8 * 1
 25602 000126EB 4883EA08                	sub rdx, 8 * 1
 25603 000126EF EBE7                    	jmp .L_tc_recycle_frame_loop_079a
 25604                                  .L_tc_recycle_frame_done_079a:
 25605 000126F1 488D6308                	lea rsp, [rbx + 8 * 1]
 25606 000126F5 5D                      	pop rbp	; the proc will restore it!
 25607 000126F6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25608                                  
 25609                                  	.L_if_end_044b:
 25610 000126F9 C9                      	leave
 25611 000126FA C22800                  	ret AND_KILL_FRAME(3)
 25612                                  .L_lambda_simple_end_05c1:	; new closure is in rax
 25613                                  
 25614 000126FD 50                      	push rax
 25615 000126FE 488B4520                	mov rax, PARAM(0)	; param run
 25616                                  
 25617 00012702 8F00                    	pop qword[rax]
 25618 00012704 48B8-                   	mov rax, sob_void
 25618 00012706 [0000000000000000] 
 25619                                  
 25620 0001270E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25621 00012713 E810300000              	call malloc
 25622 00012718 50                      	push rax
 25623 00012719 BF10000000              	mov rdi, 8 * 2	; new rib
 25624 0001271E E805300000              	call malloc
 25625 00012723 50                      	push rax
 25626 00012724 BF10000000              	mov rdi, 8 * 2	; extended env
 25627 00012729 E8FA2F0000              	call malloc
 25628 0001272E 488B7D10                	mov rdi, ENV
 25629 00012732 BE00000000              	mov rsi, 0
 25630 00012737 BA01000000              	mov rdx, 1
 25631                                  .L_lambda_simple_env_loop_05c3:	; ext_env[i + 1] <-- env[i]
 25632 0001273C 4883FE01                	cmp rsi, 1
 25633 00012740 7410                    	je .L_lambda_simple_env_end_05c3
 25634 00012742 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25635 00012746 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25636 0001274A 48FFC6                  	inc rsi
 25637 0001274D 48FFC2                  	inc rdx
 25638 00012750 EBEA                    	jmp .L_lambda_simple_env_loop_05c3
 25639                                  .L_lambda_simple_env_end_05c3:
 25640 00012752 5B                      	pop rbx
 25641 00012753 BE00000000              	mov rsi, 0
 25642                                  .L_lambda_simple_params_loop_05c3:	; copy params
 25643 00012758 4883FE02                	cmp rsi, 2
 25644 0001275C 740E                    	je .L_lambda_simple_params_end_05c3
 25645 0001275E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25646 00012763 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25647 00012767 48FFC6                  	inc rsi
 25648 0001276A EBEC                    	jmp .L_lambda_simple_params_loop_05c3
 25649                                  .L_lambda_simple_params_end_05c3:
 25650 0001276C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25651 0001276F 4889C3                  	mov rbx, rax
 25652 00012772 58                      	pop rax
 25653 00012773 C60004                  	mov byte [rax], T_closure
 25654 00012776 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25655 0001277A 48C74009[87270100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05c3
 25656 00012782 E97C010000              	jmp .L_lambda_simple_end_05c3
 25657                                  .L_lambda_simple_code_05c3:	; lambda-simple body
 25658 00012787 48837C241005            	cmp qword [rsp + 8 * 2], 5
 25659 0001278D 740B                    	je .L_lambda_simple_arity_check_ok_05c3
 25660 0001278F FF742410                	push qword [rsp + 8 * 2]
 25661 00012793 6A05                    	push 5
 25662 00012795 E9472F0000              	jmp L_error_incorrect_arity_simple
 25663                                  .L_lambda_simple_arity_check_ok_05c3:
 25664 0001279A C8000000                	enter 0, 0
 25665 0001279E 488B4540                	mov rax, PARAM(4)	; param limit
 25666 000127A2 50                      	push rax
 25667 000127A3 488B4538                	mov rax, PARAM(3)	; param j
 25668 000127A7 50                      	push rax
 25669 000127A8 6A02                    	push 2	; arg count
 25670 000127AA 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 25671 000127B2 803805                  	cmp byte [rax], T_undefined
 25672 000127B5 0F84402E0000            	je L_error_fvar_undefined
 25673 000127BB 803804                  	cmp byte [rax], T_closure
 25674 000127BE 0F85BB2E0000            	jne L_error_non_closure
 25675 000127C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25676 000127C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25677                                  
 25678 000127CA 483D[02000000]          	cmp rax, sob_boolean_false
 25679 000127D0 0F8425010000            	je .L_if_else_044c
 25680 000127D6 488B4538                	mov rax, PARAM(3)	; param j
 25681 000127DA 50                      	push rax
 25682 000127DB 488B4530                	mov rax, PARAM(2)	; param str
 25683 000127DF 50                      	push rax
 25684 000127E0 6A02                    	push 2	; arg count
 25685 000127E2 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 25686 000127EA 803805                  	cmp byte [rax], T_undefined
 25687 000127ED 0F84082E0000            	je L_error_fvar_undefined
 25688 000127F3 803804                  	cmp byte [rax], T_closure
 25689 000127F6 0F85832E0000            	jne L_error_non_closure
 25690 000127FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 25691 000127FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 25692 00012802 50                      	push rax
 25693 00012803 488B4528                	mov rax, PARAM(1)	; param i
 25694 00012807 50                      	push rax
 25695 00012808 488B4520                	mov rax, PARAM(0)	; param target
 25696 0001280C 50                      	push rax
 25697 0001280D 6A03                    	push 3	; arg count
 25698 0001280F 488B0425[84110000]      	mov rax, qword [free_var_56]	; free var string-set!
 25699 00012817 803805                  	cmp byte [rax], T_undefined
 25700 0001281A 0F84DB2D0000            	je L_error_fvar_undefined
 25701 00012820 803804                  	cmp byte [rax], T_closure
 25702 00012823 0F85562E0000            	jne L_error_non_closure
 25703 00012829 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25704 0001282C FF5009                  	call SOB_CLOSURE_CODE(rax)
 25705                                  
 25706                                  	; preparing a tail-call
 25707 0001282F 488B4540                	mov rax, PARAM(4)	; param limit
 25708 00012833 50                      	push rax
 25709 00012834 48B8-                   	mov rax, L_constants + 2158
 25709 00012836 [6E08000000000000] 
 25710 0001283E 50                      	push rax
 25711 0001283F 488B4538                	mov rax, PARAM(3)	; param j
 25712 00012843 50                      	push rax
 25713 00012844 6A02                    	push 2	; arg count
 25714 00012846 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 25715 0001284E 803805                  	cmp byte [rax], T_undefined
 25716 00012851 0F84A42D0000            	je L_error_fvar_undefined
 25717 00012857 803804                  	cmp byte [rax], T_closure
 25718 0001285A 0F851F2E0000            	jne L_error_non_closure
 25719 00012860 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25720 00012863 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25721 00012866 50                      	push rax
 25722 00012867 488B4530                	mov rax, PARAM(2)	; param str
 25723 0001286B 50                      	push rax
 25724 0001286C 48B8-                   	mov rax, L_constants + 2158
 25724 0001286E [6E08000000000000] 
 25725 00012876 50                      	push rax
 25726 00012877 488B4528                	mov rax, PARAM(1)	; param i
 25727 0001287B 50                      	push rax
 25728 0001287C 6A02                    	push 2	; arg count
 25729 0001287E 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 25730 00012886 803805                  	cmp byte [rax], T_undefined
 25731 00012889 0F846C2D0000            	je L_error_fvar_undefined
 25732 0001288F 803804                  	cmp byte [rax], T_closure
 25733 00012892 0F85E72D0000            	jne L_error_non_closure
 25734 00012898 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25735 0001289B FF5009                  	call SOB_CLOSURE_CODE(rax)
 25736 0001289E 50                      	push rax
 25737 0001289F 488B4520                	mov rax, PARAM(0)	; param target
 25738 000128A3 50                      	push rax
 25739 000128A4 6A05                    	push 5	; arg count
 25740 000128A6 488B4510                	mov rax, ENV
 25741 000128AA 488B00                  	mov rax, qword [rax + 8 * 0]
 25742 000128AD 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 25743 000128B1 488B00                  	mov rax, qword [rax]
 25744 000128B4 803804                  	cmp byte [rax], T_closure
 25745 000128B7 0F85C22D0000            	jne L_error_non_closure
 25746 000128BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 25747                                  
 25748                                  	; recycling the current frame
 25749 000128C0 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25750 000128C3 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25751 000128C6 B909000000              	mov rcx, 5 + 4
 25752 000128CB 488B5D18                	mov rbx, COUNT
 25753 000128CF 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25754 000128D4 488D55F8                	lea rdx, [rbp - 8 * 1]
 25755                                  .L_tc_recycle_frame_loop_079b:
 25756 000128D8 4883F900                	cmp rcx, 0
 25757 000128DC 7413                    	je .L_tc_recycle_frame_done_079b
 25758 000128DE 488B32                  	mov rsi, qword [rdx]
 25759 000128E1 488933                  	mov qword [rbx], rsi
 25760 000128E4 48FFC9                  	dec rcx
 25761 000128E7 4883EB08                	sub rbx, 8 * 1
 25762 000128EB 4883EA08                	sub rdx, 8 * 1
 25763 000128EF EBE7                    	jmp .L_tc_recycle_frame_loop_079b
 25764                                  .L_tc_recycle_frame_done_079b:
 25765 000128F1 488D6308                	lea rsp, [rbx + 8 * 1]
 25766 000128F5 5D                      	pop rbp	; the proc will restore it!
 25767 000128F6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25768                                  
 25769 000128F9 EB04                    	jmp .L_if_end_044c
 25770                                  
 25771                                  	.L_if_else_044c:
 25772 000128FB 488B4528                	mov rax, PARAM(1)	; param i
 25773                                  
 25774                                  	.L_if_end_044c:
 25775 000128FF C9                      	leave
 25776 00012900 C23800                  	ret AND_KILL_FRAME(5)
 25777                                  .L_lambda_simple_end_05c3:	; new closure is in rax
 25778                                  
 25779 00012903 50                      	push rax
 25780 00012904 488B4528                	mov rax, PARAM(1)	; param add
 25781                                  
 25782 00012908 8F00                    	pop qword[rax]
 25783 0001290A 48B8-                   	mov rax, sob_void
 25783 0001290C [0000000000000000] 
 25784                                  
 25785 00012914 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25786 00012919 E80A2E0000              	call malloc
 25787 0001291E 50                      	push rax
 25788 0001291F BF10000000              	mov rdi, 8 * 2	; new rib
 25789 00012924 E8FF2D0000              	call malloc
 25790 00012929 50                      	push rax
 25791 0001292A BF10000000              	mov rdi, 8 * 2	; extended env
 25792 0001292F E8F42D0000              	call malloc
 25793 00012934 488B7D10                	mov rdi, ENV
 25794 00012938 BE00000000              	mov rsi, 0
 25795 0001293D BA01000000              	mov rdx, 1
 25796                                  .L_lambda_opt_env_loop_00c7:	; ext_env[i + 1] <-- env[i]
 25797 00012942 4883FE01                	cmp rsi, 1
 25798 00012946 7410                    	je .L_lambda_opt_env_end_00c7
 25799 00012948 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25800 0001294C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25801 00012950 48FFC6                  	inc rsi
 25802 00012953 48FFC2                  	inc rdx
 25803 00012956 EBEA                    	jmp .L_lambda_opt_env_loop_00c7
 25804                                  .L_lambda_opt_env_end_00c7:
 25805 00012958 5B                      	pop rbx
 25806 00012959 BE00000000              	mov rsi, 0
 25807                                  .L_lambda_opt_params_loop_00c7:	; copy params
 25808 0001295E 4883FE02                	cmp rsi, 2
 25809 00012962 740E                    	je .L_lambda_opt_params_end_00c7
 25810 00012964 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25811 00012969 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25812 0001296D 48FFC6                  	inc rsi
 25813 00012970 EBEC                    	jmp .L_lambda_opt_params_loop_00c7
 25814                                  .L_lambda_opt_params_end_00c7:
 25815 00012972 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25816 00012975 4889C3                  	mov rbx, rax
 25817 00012978 58                      	pop rax
 25818 00012979 C60004                  	mov byte [rax], T_closure
 25819 0001297C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25820 00012980 48C74009[8D290100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00c7
 25821 00012988 E9D1010000              	jmp .L_lambda_opt_end_00c7
 25822                                  .L_lambda_opt_code_00c7:	; lambda-simple body
 25823 0001298D 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 25824 00012993 740D                    	je .L_lambda_opt_arity_check_exact_00c7 ;	 if equal, go to exact arity
 25825 00012995 7F42                    	jg .L_lambda_opt_arity_check_more_00c7 ;	 if greater than, go to arity more
 25826 00012997 FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 25827 0001299B 6A00                     	push 0
 25828 0001299D E9532D0000              	jmp L_error_incorrect_arity_opt
 25829                                  	.L_lambda_opt_arity_check_exact_00c7:
 25830 000129A2 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 25831 000129A7 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 25832 000129AC 4883EC08                	sub rsp, 8
 25833 000129B0 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 25834                                  	.L_lambda_opt_exact_shifting_loop_00c7:
 25835 000129B4 488B5108                	mov rdx, [rcx + 8]
 25836 000129B8 488911                  	mov [rcx], rdx
 25837 000129BB 4883C108                	add rcx, 8
 25838 000129BF 4839CB                  	cmp rbx, rcx
 25839 000129C2 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00c7
 25840                                  	.L_lambda_opt_exact_shifting_loop_end_00c7:
 25841 000129C4 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 25842 000129CB 4883C001                	add rax, 1 ; 	arg count += 1
 25843 000129CF 4889442410              	mov qword [rsp + 8 * 2], rax
 25844 000129D4 E987000000              	jmp .L_lambda_opt_stack_adjusted_00c7
 25845                                  	.L_lambda_opt_arity_check_more_00c7:
 25846 000129D9 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 25846 000129DB [0100000000000000] 
 25847 000129E3 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 25848 000129E9 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00c7
 25849                                  	.L_lambda_opt_stack_shrink_loop_00c7:
 25850 000129EB BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 25851 000129F0 E8332D0000              	call malloc ;	 allocated memory for the optional scheme list
 25852 000129F5 C60021                  	mov byte[rax], T_pair ;	 set type pair
 25853 000129F8 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 25854 000129FC 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 25855 000129FF 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 25856 00012A04 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 25857 00012A09 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 25858 00012A0D 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 25859                                  	.L_lambda_opt_more_shifting_loop_00c7:
 25860 00012A12 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 25861 00012A15 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 25862 00012A19 4883EB08                	sub rbx, 8 
 25863 00012A1D 4839DC                  	cmp rsp, rbx
 25864 00012A20 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00c7
 25865                                  	.L_lambda_opt_more_shifting_loop_end_00c7:
 25866 00012A22 4883C408                	add rsp, 8 ;	 update rsp
 25867 00012A26 488B5C2410              	mov rbx, [rsp + 8 * 2]
 25868 00012A2B 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 25869 00012A2F 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 25870 00012A34 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25871 00012A3A 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00c7
 25872                                  	.L_lambda_opt_stack_shrink_loop_exit_00c7:
 25873 00012A3C 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 25874 00012A41 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 25875 00012A46 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 25876 00012A4B E8D82C0000              	call malloc ;	 allocated memory for the optional scheme list
 25877 00012A50 C60021                  	mov byte[rax], T_pair ;	 set type pair
 25878 00012A53 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 25879 00012A57 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 25880 00012A5B 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 25881                                  	.L_lambda_opt_stack_adjusted_00c7:
 25882 00012A60 C8000000                	enter 0, 0
 25883                                  	; preparing a tail-call
 25884 00012A64 488B4520                	mov rax, PARAM(0)	; param strings
 25885 00012A68 50                      	push rax
 25886 00012A69 48B8-                   	mov rax, L_constants + 2023
 25886 00012A6B [E707000000000000] 
 25887 00012A73 50                      	push rax
 25888 00012A74 488B4520                	mov rax, PARAM(0)	; param strings
 25889 00012A78 50                      	push rax
 25890 00012A79 488B0425[FE0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 25891 00012A81 803805                  	cmp byte [rax], T_undefined
 25892 00012A84 0F84712B0000            	je L_error_fvar_undefined
 25893 00012A8A 50                      	push rax
 25894 00012A8B 6A02                    	push 2	; arg count
 25895 00012A8D 488B0425[09150000]      	mov rax, qword [free_var_109]	; free var map
 25896 00012A95 803805                  	cmp byte [rax], T_undefined
 25897 00012A98 0F845D2B0000            	je L_error_fvar_undefined
 25898 00012A9E 803804                  	cmp byte [rax], T_closure
 25899 00012AA1 0F85D82B0000            	jne L_error_non_closure
 25900 00012AA7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25901 00012AAA FF5009                  	call SOB_CLOSURE_CODE(rax)
 25902 00012AAD 50                      	push rax
 25903 00012AAE 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 25904 00012AB6 803805                  	cmp byte [rax], T_undefined
 25905 00012AB9 0F843C2B0000            	je L_error_fvar_undefined
 25906 00012ABF 50                      	push rax
 25907 00012AC0 6A02                    	push 2	; arg count
 25908 00012AC2 488B0425[E7140000]      	mov rax, qword [free_var_107]	; free var apply
 25909 00012ACA 803805                  	cmp byte [rax], T_undefined
 25910 00012ACD 0F84282B0000            	je L_error_fvar_undefined
 25911 00012AD3 803804                  	cmp byte [rax], T_closure
 25912 00012AD6 0F85A32B0000            	jne L_error_non_closure
 25913 00012ADC FF7001                  	push SOB_CLOSURE_ENV(rax)
 25914 00012ADF FF5009                  	call SOB_CLOSURE_CODE(rax)
 25915 00012AE2 50                      	push rax
 25916 00012AE3 6A01                    	push 1	; arg count
 25917 00012AE5 488B0425[A6110000]      	mov rax, qword [free_var_58]	; free var make-string
 25918 00012AED 803805                  	cmp byte [rax], T_undefined
 25919 00012AF0 0F84052B0000            	je L_error_fvar_undefined
 25920 00012AF6 803804                  	cmp byte [rax], T_closure
 25921 00012AF9 0F85802B0000            	jne L_error_non_closure
 25922 00012AFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 25923 00012B02 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25924 00012B05 50                      	push rax
 25925 00012B06 6A03                    	push 3	; arg count
 25926 00012B08 488B4510                	mov rax, ENV
 25927 00012B0C 488B00                  	mov rax, qword [rax + 8 * 0]
 25928 00012B0F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25929 00012B12 488B00                  	mov rax, qword [rax]
 25930 00012B15 803804                  	cmp byte [rax], T_closure
 25931 00012B18 0F85612B0000            	jne L_error_non_closure
 25932 00012B1E FF7001                  	push SOB_CLOSURE_ENV(rax)
 25933                                  
 25934                                  	; recycling the current frame
 25935 00012B21 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 25936 00012B24 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 25937 00012B27 B907000000              	mov rcx, 3 + 4
 25938 00012B2C 488B5D18                	mov rbx, COUNT
 25939 00012B30 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 25940 00012B35 488D55F8                	lea rdx, [rbp - 8 * 1]
 25941                                  .L_tc_recycle_frame_loop_079c:
 25942 00012B39 4883F900                	cmp rcx, 0
 25943 00012B3D 7413                    	je .L_tc_recycle_frame_done_079c
 25944 00012B3F 488B32                  	mov rsi, qword [rdx]
 25945 00012B42 488933                  	mov qword [rbx], rsi
 25946 00012B45 48FFC9                  	dec rcx
 25947 00012B48 4883EB08                	sub rbx, 8 * 1
 25948 00012B4C 4883EA08                	sub rdx, 8 * 1
 25949 00012B50 EBE7                    	jmp .L_tc_recycle_frame_loop_079c
 25950                                  .L_tc_recycle_frame_done_079c:
 25951 00012B52 488D6308                	lea rsp, [rbx + 8 * 1]
 25952 00012B56 5D                      	pop rbp	; the proc will restore it!
 25953 00012B57 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25954 00012B5A C9                      	leave
 25955 00012B5B C21800                  	ret AND_KILL_FRAME(1)
 25956                                  .L_lambda_opt_end_00c7:	; new closure is in rax
 25957 00012B5E C9                      	leave
 25958 00012B5F C22000                  	ret AND_KILL_FRAME(2)
 25959                                  .L_lambda_simple_end_05c0:	; new closure is in rax
 25960 00012B62 803804                  	cmp byte [rax], T_closure
 25961 00012B65 0F85142B0000            	jne L_error_non_closure
 25962 00012B6B FF7001                  	push SOB_CLOSURE_ENV(rax)
 25963 00012B6E FF5009                  	call SOB_CLOSURE_CODE(rax)
 25964 00012B71 48890425[D2180000]      	mov qword [free_var_166], rax
 25965 00012B79 48B8-                   	mov rax, sob_void
 25965 00012B7B [0000000000000000] 
 25966                                  
 25967 00012B83 4889C7                  	mov rdi, rax
 25968 00012B86 E8AF2C0000              	call print_sexpr_if_not_void
 25969                                  
 25970 00012B8B 48B8-                   	mov rax, L_constants + 1881
 25970 00012B8D [5907000000000000] 
 25971 00012B95 50                      	push rax
 25972 00012B96 48B8-                   	mov rax, L_constants + 1881
 25972 00012B98 [5907000000000000] 
 25973 00012BA0 50                      	push rax
 25974 00012BA1 6A02                    	push 2	; arg count
 25975 00012BA3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25976 00012BA8 E87B2B0000              	call malloc
 25977 00012BAD 50                      	push rax
 25978 00012BAE BF00000000              	mov rdi, 8 * 0	; new rib
 25979 00012BB3 E8702B0000              	call malloc
 25980 00012BB8 50                      	push rax
 25981 00012BB9 BF08000000              	mov rdi, 8 * 1	; extended env
 25982 00012BBE E8652B0000              	call malloc
 25983 00012BC3 488B7D10                	mov rdi, ENV
 25984 00012BC7 BE00000000              	mov rsi, 0
 25985 00012BCC BA01000000              	mov rdx, 1
 25986                                  .L_lambda_simple_env_loop_05c4:	; ext_env[i + 1] <-- env[i]
 25987 00012BD1 4883FE00                	cmp rsi, 0
 25988 00012BD5 7410                    	je .L_lambda_simple_env_end_05c4
 25989 00012BD7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25990 00012BDB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25991 00012BDF 48FFC6                  	inc rsi
 25992 00012BE2 48FFC2                  	inc rdx
 25993 00012BE5 EBEA                    	jmp .L_lambda_simple_env_loop_05c4
 25994                                  .L_lambda_simple_env_end_05c4:
 25995 00012BE7 5B                      	pop rbx
 25996 00012BE8 BE00000000              	mov rsi, 0
 25997                                  .L_lambda_simple_params_loop_05c4:	; copy params
 25998 00012BED 4883FE00                	cmp rsi, 0
 25999 00012BF1 740E                    	je .L_lambda_simple_params_end_05c4
 26000 00012BF3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26001 00012BF8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26002 00012BFC 48FFC6                  	inc rsi
 26003 00012BFF EBEC                    	jmp .L_lambda_simple_params_loop_05c4
 26004                                  .L_lambda_simple_params_end_05c4:
 26005 00012C01 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26006 00012C04 4889C3                  	mov rbx, rax
 26007 00012C07 58                      	pop rax
 26008 00012C08 C60004                  	mov byte [rax], T_closure
 26009 00012C0B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26010 00012C0F 48C74009[1C2C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05c4
 26011 00012C17 E99D070000              	jmp .L_lambda_simple_end_05c4
 26012                                  .L_lambda_simple_code_05c4:	; lambda-simple body
 26013 00012C1C 48837C241002            	cmp qword [rsp + 8 * 2], 2
 26014 00012C22 740B                    	je .L_lambda_simple_arity_check_ok_05c4
 26015 00012C24 FF742410                	push qword [rsp + 8 * 2]
 26016 00012C28 6A02                    	push 2
 26017 00012C2A E9B22A0000              	jmp L_error_incorrect_arity_simple
 26018                                  .L_lambda_simple_arity_check_ok_05c4:
 26019 00012C2F C8000000                	enter 0, 0
 26020                                  
 26021 00012C33 BF08000000              	mov rdi, 8
 26022 00012C38 E8EB2A0000              	call malloc
 26023 00012C3D 488B5D20                	mov rbx, PARAM(0)	; param run
 26024 00012C41 488918                  	mov [rax], rbx	; box run
 26025 00012C44 48894520                	mov PARAM(0), rax	;replace param run with box
 26026 00012C48 48B8-                   	mov rax, sob_void
 26026 00012C4A [0000000000000000] 
 26027                                  
 26028                                  
 26029 00012C52 BF08000000              	mov rdi, 8
 26030 00012C57 E8CC2A0000              	call malloc
 26031 00012C5C 488B5D28                	mov rbx, PARAM(1)	; param add
 26032 00012C60 488918                  	mov [rax], rbx	; box add
 26033 00012C63 48894528                	mov PARAM(1), rax	;replace param add with box
 26034 00012C67 48B8-                   	mov rax, sob_void
 26034 00012C69 [0000000000000000] 
 26035                                  
 26036 00012C71 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26037 00012C76 E8AD2A0000              	call malloc
 26038 00012C7B 50                      	push rax
 26039 00012C7C BF10000000              	mov rdi, 8 * 2	; new rib
 26040 00012C81 E8A22A0000              	call malloc
 26041 00012C86 50                      	push rax
 26042 00012C87 BF10000000              	mov rdi, 8 * 2	; extended env
 26043 00012C8C E8972A0000              	call malloc
 26044 00012C91 488B7D10                	mov rdi, ENV
 26045 00012C95 BE00000000              	mov rsi, 0
 26046 00012C9A BA01000000              	mov rdx, 1
 26047                                  .L_lambda_simple_env_loop_05c5:	; ext_env[i + 1] <-- env[i]
 26048 00012C9F 4883FE01                	cmp rsi, 1
 26049 00012CA3 7410                    	je .L_lambda_simple_env_end_05c5
 26050 00012CA5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26051 00012CA9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26052 00012CAD 48FFC6                  	inc rsi
 26053 00012CB0 48FFC2                  	inc rdx
 26054 00012CB3 EBEA                    	jmp .L_lambda_simple_env_loop_05c5
 26055                                  .L_lambda_simple_env_end_05c5:
 26056 00012CB5 5B                      	pop rbx
 26057 00012CB6 BE00000000              	mov rsi, 0
 26058                                  .L_lambda_simple_params_loop_05c5:	; copy params
 26059 00012CBB 4883FE02                	cmp rsi, 2
 26060 00012CBF 740E                    	je .L_lambda_simple_params_end_05c5
 26061 00012CC1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26062 00012CC6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26063 00012CCA 48FFC6                  	inc rsi
 26064 00012CCD EBEC                    	jmp .L_lambda_simple_params_loop_05c5
 26065                                  .L_lambda_simple_params_end_05c5:
 26066 00012CCF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26067 00012CD2 4889C3                  	mov rbx, rax
 26068 00012CD5 58                      	pop rax
 26069 00012CD6 C60004                  	mov byte [rax], T_closure
 26070 00012CD9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26071 00012CDD 48C74009[EA2C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05c5
 26072 00012CE5 E96A020000              	jmp .L_lambda_simple_end_05c5
 26073                                  .L_lambda_simple_code_05c5:	; lambda-simple body
 26074 00012CEA 48837C241003            	cmp qword [rsp + 8 * 2], 3
 26075 00012CF0 740B                    	je .L_lambda_simple_arity_check_ok_05c5
 26076 00012CF2 FF742410                	push qword [rsp + 8 * 2]
 26077 00012CF6 6A03                    	push 3
 26078 00012CF8 E9E4290000              	jmp L_error_incorrect_arity_simple
 26079                                  .L_lambda_simple_arity_check_ok_05c5:
 26080 00012CFD C8000000                	enter 0, 0
 26081 00012D01 488B4530                	mov rax, PARAM(2)	; param s
 26082 00012D05 50                      	push rax
 26083 00012D06 6A01                    	push 1	; arg count
 26084 00012D08 488B0425[CC0D0000]      	mov rax, qword [free_var_0]	; free var null?
 26085 00012D10 803805                  	cmp byte [rax], T_undefined
 26086 00012D13 0F84E2280000            	je L_error_fvar_undefined
 26087 00012D19 803804                  	cmp byte [rax], T_closure
 26088 00012D1C 0F855D290000            	jne L_error_non_closure
 26089 00012D22 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26090 00012D25 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26091                                  
 26092 00012D28 483D[02000000]          	cmp rax, sob_boolean_false
 26093 00012D2E 7409                    	je .L_if_else_044d
 26094 00012D30 488B4520                	mov rax, PARAM(0)	; param target
 26095                                  
 26096 00012D34 E917020000              	jmp .L_if_end_044d
 26097                                  
 26098                                  	.L_if_else_044d:
 26099                                  	; preparing a tail-call
 26100 00012D39 488B4530                	mov rax, PARAM(2)	; param s
 26101 00012D3D 50                      	push rax
 26102 00012D3E 6A01                    	push 1	; arg count
 26103 00012D40 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 26104 00012D48 803805                  	cmp byte [rax], T_undefined
 26105 00012D4B 0F84AA280000            	je L_error_fvar_undefined
 26106 00012D51 803804                  	cmp byte [rax], T_closure
 26107 00012D54 0F8525290000            	jne L_error_non_closure
 26108 00012D5A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26109 00012D5D FF5009                  	call SOB_CLOSURE_CODE(rax)
 26110 00012D60 50                      	push rax
 26111 00012D61 6A01                    	push 1	; arg count
 26112 00012D63 488B0425[0F0F0000]      	mov rax, qword [free_var_19]	; free var vector-length
 26113 00012D6B 803805                  	cmp byte [rax], T_undefined
 26114 00012D6E 0F8487280000            	je L_error_fvar_undefined
 26115 00012D74 803804                  	cmp byte [rax], T_closure
 26116 00012D77 0F8502290000            	jne L_error_non_closure
 26117 00012D7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26118 00012D80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26119 00012D83 50                      	push rax
 26120 00012D84 48B8-                   	mov rax, L_constants + 2023
 26120 00012D86 [E707000000000000] 
 26121 00012D8E 50                      	push rax
 26122 00012D8F 488B4530                	mov rax, PARAM(2)	; param s
 26123 00012D93 50                      	push rax
 26124 00012D94 6A01                    	push 1	; arg count
 26125 00012D96 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 26126 00012D9E 803805                  	cmp byte [rax], T_undefined
 26127 00012DA1 0F8454280000            	je L_error_fvar_undefined
 26128 00012DA7 803804                  	cmp byte [rax], T_closure
 26129 00012DAA 0F85CF280000            	jne L_error_non_closure
 26130 00012DB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26131 00012DB3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26132 00012DB6 50                      	push rax
 26133 00012DB7 488B4528                	mov rax, PARAM(1)	; param i
 26134 00012DBB 50                      	push rax
 26135 00012DBC 488B4520                	mov rax, PARAM(0)	; param target
 26136 00012DC0 50                      	push rax
 26137 00012DC1 6A05                    	push 5	; arg count
 26138 00012DC3 488B4510                	mov rax, ENV
 26139 00012DC7 488B00                  	mov rax, qword [rax + 8 * 0]
 26140 00012DCA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 26141 00012DCE 488B00                  	mov rax, qword [rax]
 26142 00012DD1 803804                  	cmp byte [rax], T_closure
 26143 00012DD4 0F85A5280000            	jne L_error_non_closure
 26144 00012DDA FF7001                  	push SOB_CLOSURE_ENV(rax)
 26145 00012DDD FF5009                  	call SOB_CLOSURE_CODE(rax)
 26146 00012DE0 50                      	push rax
 26147 00012DE1 6A01                    	push 1	; arg count
 26148 00012DE3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26149 00012DE8 E83B290000              	call malloc
 26150 00012DED 50                      	push rax
 26151 00012DEE BF18000000              	mov rdi, 8 * 3	; new rib
 26152 00012DF3 E830290000              	call malloc
 26153 00012DF8 50                      	push rax
 26154 00012DF9 BF18000000              	mov rdi, 8 * 3	; extended env
 26155 00012DFE E825290000              	call malloc
 26156 00012E03 488B7D10                	mov rdi, ENV
 26157 00012E07 BE00000000              	mov rsi, 0
 26158 00012E0C BA01000000              	mov rdx, 1
 26159                                  .L_lambda_simple_env_loop_05c6:	; ext_env[i + 1] <-- env[i]
 26160 00012E11 4883FE02                	cmp rsi, 2
 26161 00012E15 7410                    	je .L_lambda_simple_env_end_05c6
 26162 00012E17 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26163 00012E1B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26164 00012E1F 48FFC6                  	inc rsi
 26165 00012E22 48FFC2                  	inc rdx
 26166 00012E25 EBEA                    	jmp .L_lambda_simple_env_loop_05c6
 26167                                  .L_lambda_simple_env_end_05c6:
 26168 00012E27 5B                      	pop rbx
 26169 00012E28 BE00000000              	mov rsi, 0
 26170                                  .L_lambda_simple_params_loop_05c6:	; copy params
 26171 00012E2D 4883FE03                	cmp rsi, 3
 26172 00012E31 740E                    	je .L_lambda_simple_params_end_05c6
 26173 00012E33 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26174 00012E38 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26175 00012E3C 48FFC6                  	inc rsi
 26176 00012E3F EBEC                    	jmp .L_lambda_simple_params_loop_05c6
 26177                                  .L_lambda_simple_params_end_05c6:
 26178 00012E41 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26179 00012E44 4889C3                  	mov rbx, rax
 26180 00012E47 58                      	pop rax
 26181 00012E48 C60004                  	mov byte [rax], T_closure
 26182 00012E4B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26183 00012E4F 48C74009[5C2E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05c6
 26184 00012E57 E9AF000000              	jmp .L_lambda_simple_end_05c6
 26185                                  .L_lambda_simple_code_05c6:	; lambda-simple body
 26186 00012E5C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26187 00012E62 740B                    	je .L_lambda_simple_arity_check_ok_05c6
 26188 00012E64 FF742410                	push qword [rsp + 8 * 2]
 26189 00012E68 6A01                    	push 1
 26190 00012E6A E972280000              	jmp L_error_incorrect_arity_simple
 26191                                  .L_lambda_simple_arity_check_ok_05c6:
 26192 00012E6F C8000000                	enter 0, 0
 26193                                  	; preparing a tail-call
 26194 00012E73 488B4510                	mov rax, ENV
 26195 00012E77 488B00                  	mov rax, qword [rax + 8 * 0]
 26196 00012E7A 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 26197 00012E7E 50                      	push rax
 26198 00012E7F 6A01                    	push 1	; arg count
 26199 00012E81 488B0425[ED0E0000]      	mov rax, qword [free_var_17]	; free var cdr
 26200 00012E89 803805                  	cmp byte [rax], T_undefined
 26201 00012E8C 0F8469270000            	je L_error_fvar_undefined
 26202 00012E92 803804                  	cmp byte [rax], T_closure
 26203 00012E95 0F85E4270000            	jne L_error_non_closure
 26204 00012E9B FF7001                  	push SOB_CLOSURE_ENV(rax)
 26205 00012E9E FF5009                  	call SOB_CLOSURE_CODE(rax)
 26206 00012EA1 50                      	push rax
 26207 00012EA2 488B4520                	mov rax, PARAM(0)	; param i
 26208 00012EA6 50                      	push rax
 26209 00012EA7 488B4510                	mov rax, ENV
 26210 00012EAB 488B00                  	mov rax, qword [rax + 8 * 0]
 26211 00012EAE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 26212 00012EB1 50                      	push rax
 26213 00012EB2 6A03                    	push 3	; arg count
 26214 00012EB4 488B4510                	mov rax, ENV
 26215 00012EB8 488B4008                	mov rax, qword [rax + 8 * 1]
 26216 00012EBC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 26217 00012EBF 488B00                  	mov rax, qword [rax]
 26218 00012EC2 803804                  	cmp byte [rax], T_closure
 26219 00012EC5 0F85B4270000            	jne L_error_non_closure
 26220 00012ECB FF7001                  	push SOB_CLOSURE_ENV(rax)
 26221                                  
 26222                                  	; recycling the current frame
 26223 00012ECE FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26224 00012ED1 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26225 00012ED4 B907000000              	mov rcx, 3 + 4
 26226 00012ED9 488B5D18                	mov rbx, COUNT
 26227 00012EDD 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26228 00012EE2 488D55F8                	lea rdx, [rbp - 8 * 1]
 26229                                  .L_tc_recycle_frame_loop_079d:
 26230 00012EE6 4883F900                	cmp rcx, 0
 26231 00012EEA 7413                    	je .L_tc_recycle_frame_done_079d
 26232 00012EEC 488B32                  	mov rsi, qword [rdx]
 26233 00012EEF 488933                  	mov qword [rbx], rsi
 26234 00012EF2 48FFC9                  	dec rcx
 26235 00012EF5 4883EB08                	sub rbx, 8 * 1
 26236 00012EF9 4883EA08                	sub rdx, 8 * 1
 26237 00012EFD EBE7                    	jmp .L_tc_recycle_frame_loop_079d
 26238                                  .L_tc_recycle_frame_done_079d:
 26239 00012EFF 488D6308                	lea rsp, [rbx + 8 * 1]
 26240 00012F03 5D                      	pop rbp	; the proc will restore it!
 26241 00012F04 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26242 00012F07 C9                      	leave
 26243 00012F08 C21800                  	ret AND_KILL_FRAME(1)
 26244                                  .L_lambda_simple_end_05c6:	; new closure is in rax
 26245 00012F0B 803804                  	cmp byte [rax], T_closure
 26246 00012F0E 0F856B270000            	jne L_error_non_closure
 26247 00012F14 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26248                                  
 26249                                  	; recycling the current frame
 26250 00012F17 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26251 00012F1A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26252 00012F1D B905000000              	mov rcx, 1 + 4
 26253 00012F22 488B5D18                	mov rbx, COUNT
 26254 00012F26 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26255 00012F2B 488D55F8                	lea rdx, [rbp - 8 * 1]
 26256                                  .L_tc_recycle_frame_loop_079e:
 26257 00012F2F 4883F900                	cmp rcx, 0
 26258 00012F33 7413                    	je .L_tc_recycle_frame_done_079e
 26259 00012F35 488B32                  	mov rsi, qword [rdx]
 26260 00012F38 488933                  	mov qword [rbx], rsi
 26261 00012F3B 48FFC9                  	dec rcx
 26262 00012F3E 4883EB08                	sub rbx, 8 * 1
 26263 00012F42 4883EA08                	sub rdx, 8 * 1
 26264 00012F46 EBE7                    	jmp .L_tc_recycle_frame_loop_079e
 26265                                  .L_tc_recycle_frame_done_079e:
 26266 00012F48 488D6308                	lea rsp, [rbx + 8 * 1]
 26267 00012F4C 5D                      	pop rbp	; the proc will restore it!
 26268 00012F4D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26269                                  
 26270                                  	.L_if_end_044d:
 26271 00012F50 C9                      	leave
 26272 00012F51 C22800                  	ret AND_KILL_FRAME(3)
 26273                                  .L_lambda_simple_end_05c5:	; new closure is in rax
 26274                                  
 26275 00012F54 50                      	push rax
 26276 00012F55 488B4520                	mov rax, PARAM(0)	; param run
 26277                                  
 26278 00012F59 8F00                    	pop qword[rax]
 26279 00012F5B 48B8-                   	mov rax, sob_void
 26279 00012F5D [0000000000000000] 
 26280                                  
 26281 00012F65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26282 00012F6A E8B9270000              	call malloc
 26283 00012F6F 50                      	push rax
 26284 00012F70 BF10000000              	mov rdi, 8 * 2	; new rib
 26285 00012F75 E8AE270000              	call malloc
 26286 00012F7A 50                      	push rax
 26287 00012F7B BF10000000              	mov rdi, 8 * 2	; extended env
 26288 00012F80 E8A3270000              	call malloc
 26289 00012F85 488B7D10                	mov rdi, ENV
 26290 00012F89 BE00000000              	mov rsi, 0
 26291 00012F8E BA01000000              	mov rdx, 1
 26292                                  .L_lambda_simple_env_loop_05c7:	; ext_env[i + 1] <-- env[i]
 26293 00012F93 4883FE01                	cmp rsi, 1
 26294 00012F97 7410                    	je .L_lambda_simple_env_end_05c7
 26295 00012F99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26296 00012F9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26297 00012FA1 48FFC6                  	inc rsi
 26298 00012FA4 48FFC2                  	inc rdx
 26299 00012FA7 EBEA                    	jmp .L_lambda_simple_env_loop_05c7
 26300                                  .L_lambda_simple_env_end_05c7:
 26301 00012FA9 5B                      	pop rbx
 26302 00012FAA BE00000000              	mov rsi, 0
 26303                                  .L_lambda_simple_params_loop_05c7:	; copy params
 26304 00012FAF 4883FE02                	cmp rsi, 2
 26305 00012FB3 740E                    	je .L_lambda_simple_params_end_05c7
 26306 00012FB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26307 00012FBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26308 00012FBE 48FFC6                  	inc rsi
 26309 00012FC1 EBEC                    	jmp .L_lambda_simple_params_loop_05c7
 26310                                  .L_lambda_simple_params_end_05c7:
 26311 00012FC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26312 00012FC6 4889C3                  	mov rbx, rax
 26313 00012FC9 58                      	pop rax
 26314 00012FCA C60004                  	mov byte [rax], T_closure
 26315 00012FCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26316 00012FD1 48C74009[DE2F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05c7
 26317 00012FD9 E97C010000              	jmp .L_lambda_simple_end_05c7
 26318                                  .L_lambda_simple_code_05c7:	; lambda-simple body
 26319 00012FDE 48837C241005            	cmp qword [rsp + 8 * 2], 5
 26320 00012FE4 740B                    	je .L_lambda_simple_arity_check_ok_05c7
 26321 00012FE6 FF742410                	push qword [rsp + 8 * 2]
 26322 00012FEA 6A05                    	push 5
 26323 00012FEC E9F0260000              	jmp L_error_incorrect_arity_simple
 26324                                  .L_lambda_simple_arity_check_ok_05c7:
 26325 00012FF1 C8000000                	enter 0, 0
 26326 00012FF5 488B4540                	mov rax, PARAM(4)	; param limit
 26327 00012FF9 50                      	push rax
 26328 00012FFA 488B4538                	mov rax, PARAM(3)	; param j
 26329 00012FFE 50                      	push rax
 26330 00012FFF 6A02                    	push 2	; arg count
 26331 00013001 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 26332 00013009 803805                  	cmp byte [rax], T_undefined
 26333 0001300C 0F84E9250000            	je L_error_fvar_undefined
 26334 00013012 803804                  	cmp byte [rax], T_closure
 26335 00013015 0F8564260000            	jne L_error_non_closure
 26336 0001301B FF7001                  	push SOB_CLOSURE_ENV(rax)
 26337 0001301E FF5009                  	call SOB_CLOSURE_CODE(rax)
 26338                                  
 26339 00013021 483D[02000000]          	cmp rax, sob_boolean_false
 26340 00013027 0F8425010000            	je .L_if_else_044e
 26341 0001302D 488B4538                	mov rax, PARAM(3)	; param j
 26342 00013031 50                      	push rax
 26343 00013032 488B4530                	mov rax, PARAM(2)	; param vec
 26344 00013036 50                      	push rax
 26345 00013037 6A02                    	push 2	; arg count
 26346 00013039 488B0425[62110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 26347 00013041 803805                  	cmp byte [rax], T_undefined
 26348 00013044 0F84B1250000            	je L_error_fvar_undefined
 26349 0001304A 803804                  	cmp byte [rax], T_closure
 26350 0001304D 0F852C260000            	jne L_error_non_closure
 26351 00013053 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26352 00013056 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26353 00013059 50                      	push rax
 26354 0001305A 488B4528                	mov rax, PARAM(1)	; param i
 26355 0001305E 50                      	push rax
 26356 0001305F 488B4520                	mov rax, PARAM(0)	; param target
 26357 00013063 50                      	push rax
 26358 00013064 6A03                    	push 3	; arg count
 26359 00013066 488B0425[73110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 26360 0001306E 803805                  	cmp byte [rax], T_undefined
 26361 00013071 0F8484250000            	je L_error_fvar_undefined
 26362 00013077 803804                  	cmp byte [rax], T_closure
 26363 0001307A 0F85FF250000            	jne L_error_non_closure
 26364 00013080 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26365 00013083 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26366                                  
 26367                                  	; preparing a tail-call
 26368 00013086 488B4540                	mov rax, PARAM(4)	; param limit
 26369 0001308A 50                      	push rax
 26370 0001308B 48B8-                   	mov rax, L_constants + 2158
 26370 0001308D [6E08000000000000] 
 26371 00013095 50                      	push rax
 26372 00013096 488B4538                	mov rax, PARAM(3)	; param j
 26373 0001309A 50                      	push rax
 26374 0001309B 6A02                    	push 2	; arg count
 26375 0001309D 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 26376 000130A5 803805                  	cmp byte [rax], T_undefined
 26377 000130A8 0F844D250000            	je L_error_fvar_undefined
 26378 000130AE 803804                  	cmp byte [rax], T_closure
 26379 000130B1 0F85C8250000            	jne L_error_non_closure
 26380 000130B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26381 000130BA FF5009                  	call SOB_CLOSURE_CODE(rax)
 26382 000130BD 50                      	push rax
 26383 000130BE 488B4530                	mov rax, PARAM(2)	; param vec
 26384 000130C2 50                      	push rax
 26385 000130C3 48B8-                   	mov rax, L_constants + 2158
 26385 000130C5 [6E08000000000000] 
 26386 000130CD 50                      	push rax
 26387 000130CE 488B4528                	mov rax, PARAM(1)	; param i
 26388 000130D2 50                      	push rax
 26389 000130D3 6A02                    	push 2	; arg count
 26390 000130D5 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 26391 000130DD 803805                  	cmp byte [rax], T_undefined
 26392 000130E0 0F8415250000            	je L_error_fvar_undefined
 26393 000130E6 803804                  	cmp byte [rax], T_closure
 26394 000130E9 0F8590250000            	jne L_error_non_closure
 26395 000130EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 26396 000130F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26397 000130F5 50                      	push rax
 26398 000130F6 488B4520                	mov rax, PARAM(0)	; param target
 26399 000130FA 50                      	push rax
 26400 000130FB 6A05                    	push 5	; arg count
 26401 000130FD 488B4510                	mov rax, ENV
 26402 00013101 488B00                  	mov rax, qword [rax + 8 * 0]
 26403 00013104 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 26404 00013108 488B00                  	mov rax, qword [rax]
 26405 0001310B 803804                  	cmp byte [rax], T_closure
 26406 0001310E 0F856B250000            	jne L_error_non_closure
 26407 00013114 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26408                                  
 26409                                  	; recycling the current frame
 26410 00013117 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26411 0001311A FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26412 0001311D B909000000              	mov rcx, 5 + 4
 26413 00013122 488B5D18                	mov rbx, COUNT
 26414 00013126 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26415 0001312B 488D55F8                	lea rdx, [rbp - 8 * 1]
 26416                                  .L_tc_recycle_frame_loop_079f:
 26417 0001312F 4883F900                	cmp rcx, 0
 26418 00013133 7413                    	je .L_tc_recycle_frame_done_079f
 26419 00013135 488B32                  	mov rsi, qword [rdx]
 26420 00013138 488933                  	mov qword [rbx], rsi
 26421 0001313B 48FFC9                  	dec rcx
 26422 0001313E 4883EB08                	sub rbx, 8 * 1
 26423 00013142 4883EA08                	sub rdx, 8 * 1
 26424 00013146 EBE7                    	jmp .L_tc_recycle_frame_loop_079f
 26425                                  .L_tc_recycle_frame_done_079f:
 26426 00013148 488D6308                	lea rsp, [rbx + 8 * 1]
 26427 0001314C 5D                      	pop rbp	; the proc will restore it!
 26428 0001314D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26429                                  
 26430 00013150 EB04                    	jmp .L_if_end_044e
 26431                                  
 26432                                  	.L_if_else_044e:
 26433 00013152 488B4528                	mov rax, PARAM(1)	; param i
 26434                                  
 26435                                  	.L_if_end_044e:
 26436 00013156 C9                      	leave
 26437 00013157 C23800                  	ret AND_KILL_FRAME(5)
 26438                                  .L_lambda_simple_end_05c7:	; new closure is in rax
 26439                                  
 26440 0001315A 50                      	push rax
 26441 0001315B 488B4528                	mov rax, PARAM(1)	; param add
 26442                                  
 26443 0001315F 8F00                    	pop qword[rax]
 26444 00013161 48B8-                   	mov rax, sob_void
 26444 00013163 [0000000000000000] 
 26445                                  
 26446 0001316B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26447 00013170 E8B3250000              	call malloc
 26448 00013175 50                      	push rax
 26449 00013176 BF10000000              	mov rdi, 8 * 2	; new rib
 26450 0001317B E8A8250000              	call malloc
 26451 00013180 50                      	push rax
 26452 00013181 BF10000000              	mov rdi, 8 * 2	; extended env
 26453 00013186 E89D250000              	call malloc
 26454 0001318B 488B7D10                	mov rdi, ENV
 26455 0001318F BE00000000              	mov rsi, 0
 26456 00013194 BA01000000              	mov rdx, 1
 26457                                  .L_lambda_opt_env_loop_00c8:	; ext_env[i + 1] <-- env[i]
 26458 00013199 4883FE01                	cmp rsi, 1
 26459 0001319D 7410                    	je .L_lambda_opt_env_end_00c8
 26460 0001319F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26461 000131A3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26462 000131A7 48FFC6                  	inc rsi
 26463 000131AA 48FFC2                  	inc rdx
 26464 000131AD EBEA                    	jmp .L_lambda_opt_env_loop_00c8
 26465                                  .L_lambda_opt_env_end_00c8:
 26466 000131AF 5B                      	pop rbx
 26467 000131B0 BE00000000              	mov rsi, 0
 26468                                  .L_lambda_opt_params_loop_00c8:	; copy params
 26469 000131B5 4883FE02                	cmp rsi, 2
 26470 000131B9 740E                    	je .L_lambda_opt_params_end_00c8
 26471 000131BB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26472 000131C0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26473 000131C4 48FFC6                  	inc rsi
 26474 000131C7 EBEC                    	jmp .L_lambda_opt_params_loop_00c8
 26475                                  .L_lambda_opt_params_end_00c8:
 26476 000131C9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26477 000131CC 4889C3                  	mov rbx, rax
 26478 000131CF 58                      	pop rax
 26479 000131D0 C60004                  	mov byte [rax], T_closure
 26480 000131D3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26481 000131D7 48C74009[E4310100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00c8
 26482 000131DF E9D1010000              	jmp .L_lambda_opt_end_00c8
 26483                                  .L_lambda_opt_code_00c8:	; lambda-simple body
 26484 000131E4 48837C241000            	cmp qword [rsp + 8 * 2], 0 ;	 check num of args
 26485 000131EA 740D                    	je .L_lambda_opt_arity_check_exact_00c8 ;	 if equal, go to exact arity
 26486 000131EC 7F42                    	jg .L_lambda_opt_arity_check_more_00c8 ;	 if greater than, go to arity more
 26487 000131EE FF742410                	push qword [rsp + 8 * 2] ;	 else, throw opt erity error
 26488 000131F2 6A00                     	push 0
 26489 000131F4 E9FC240000              	jmp L_error_incorrect_arity_opt
 26490                                  	.L_lambda_opt_arity_check_exact_00c8:
 26491 000131F9 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time
 26492 000131FE 488D5CC410              	lea rbx, [rsp + 8 * (2 + rax)] ;	 rbx holds address of last element
 26493 00013203 4883EC08                	sub rsp, 8
 26494 00013207 488D0C24                	lea rcx, [rsp + 8 * 0] ;	 rcx holds address of first element
 26495                                  	.L_lambda_opt_exact_shifting_loop_00c8:
 26496 0001320B 488B5108                	mov rdx, [rcx + 8]
 26497 0001320F 488911                  	mov [rcx], rdx
 26498 00013212 4883C108                	add rcx, 8
 26499 00013216 4839CB                  	cmp rbx, rcx
 26500 00013219 75F0                    	jne .L_lambda_opt_exact_shifting_loop_00c8
 26501                                  	.L_lambda_opt_exact_shifting_loop_end_00c8:
 26502 0001321B 48C703[01000000]        	mov qword[rbx], sob_nil ;	 place nil into address of last slot
 26503 00013222 4883C001                	add rax, 1 ; 	arg count += 1
 26504 00013226 4889442410              	mov qword [rsp + 8 * 2], rax
 26505 0001322B E987000000              	jmp .L_lambda_opt_stack_adjusted_00c8
 26506                                  	.L_lambda_opt_arity_check_more_00c8:
 26507 00013230 48BA-                   	mov rdx, sob_nil ;	 () is the base cdr for the list
 26507 00013232 [0100000000000000] 
 26508 0001323A 48837C241001            	cmp qword [rsp + 8 * 2], 1;	 compare count to params
 26509 00013240 7451                    	je .L_lambda_opt_stack_shrink_loop_exit_00c8
 26510                                  	.L_lambda_opt_stack_shrink_loop_00c8:
 26511 00013242 BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 26512 00013247 E8DC240000              	call malloc ;	 allocated memory for the optional scheme list
 26513 0001324C C60021                  	mov byte[rax], T_pair ;	 set type pair
 26514 0001324F 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 26515 00013253 4889C2                  	 mov rdx, rax ;	 list address is in rdx
 26516 00013256 488B442410              	mov rax, qword [rsp + 8 * 2] ;	 number of argument in run time 
 26517 0001325B 488B5CC410              	mov rbx, qword [rsp + 8 * (2 + rax)] ;	 in rbx, the value of the last argument
 26518 00013260 48895A01                 	mov SOB_PAIR_CAR(rdx) , rbx ;	 place the value in the car of the pair
 26519 00013264 488D5CC408              	lea rbx, [rsp + 8 * (2 + rax - 1)] ;	 in rbx, the address of the one before last (rbx is the inner loop's index!)
 26520                                  	.L_lambda_opt_more_shifting_loop_00c8:
 26521 00013269 488B0B                  	mov rcx, [rbx] ;	 in rcx the value of the one before last
 26522 0001326C 48894B08                	mov [rbx + 8], rcx ;	 put the value of one before last, in last position
 26523 00013270 4883EB08                	sub rbx, 8 
 26524 00013274 4839DC                  	cmp rsp, rbx
 26525 00013277 7EF0                    	jle .L_lambda_opt_more_shifting_loop_00c8
 26526                                  	.L_lambda_opt_more_shifting_loop_end_00c8:
 26527 00013279 4883C408                	add rsp, 8 ;	 update rsp
 26528 0001327D 488B5C2410              	mov rbx, [rsp + 8 * 2]
 26529 00013282 4883EB01                	sub rbx, 1 ;	 Subtract 1 from the register
 26530 00013286 48895C2410              	mov [rsp + 8 * 2], rbx ;	 Store the result back to memory
 26531 0001328B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26532 00013291 7FAF                    	jg .L_lambda_opt_stack_shrink_loop_00c8
 26533                                  	.L_lambda_opt_stack_shrink_loop_exit_00c8:
 26534 00013293 488B4C2410              	mov rcx, qword [rsp + 8 * 2] ;	 number of argument in run time
 26535 00013298 488B5CCC10              	mov rbx, qword [rsp + 8 * (2 + rcx)] ;	 in rbx, the value of the last argument
 26536 0001329D BF11000000              	mov rdi, (1 + 8 + 8) ;	 SOB PAIR
 26537 000132A2 E881240000              	call malloc ;	 allocated memory for the optional scheme list
 26538 000132A7 C60021                  	mov byte[rax], T_pair ;	 set type pair
 26539 000132AA 48895009                	mov SOB_PAIR_CDR(rax), rdx ;	 set the cdr to the to curr cdr
 26540 000132AE 48895801                	mov SOB_PAIR_CAR(rax) , rbx
 26541 000132B2 488944CC10              	mov qword [rsp + 8 * (2 + rcx)], rax
 26542                                  	.L_lambda_opt_stack_adjusted_00c8:
 26543 000132B7 C8000000                	enter 0, 0
 26544                                  	; preparing a tail-call
 26545 000132BB 488B4520                	mov rax, PARAM(0)	; param vectors
 26546 000132BF 50                      	push rax
 26547 000132C0 48B8-                   	mov rax, L_constants + 2023
 26547 000132C2 [E707000000000000] 
 26548 000132CA 50                      	push rax
 26549 000132CB 488B4520                	mov rax, PARAM(0)	; param vectors
 26550 000132CF 50                      	push rax
 26551 000132D0 488B0425[0F0F0000]      	mov rax, qword [free_var_19]	; free var vector-length
 26552 000132D8 803805                  	cmp byte [rax], T_undefined
 26553 000132DB 0F841A230000            	je L_error_fvar_undefined
 26554 000132E1 50                      	push rax
 26555 000132E2 6A02                    	push 2	; arg count
 26556 000132E4 488B0425[09150000]      	mov rax, qword [free_var_109]	; free var map
 26557 000132EC 803805                  	cmp byte [rax], T_undefined
 26558 000132EF 0F8406230000            	je L_error_fvar_undefined
 26559 000132F5 803804                  	cmp byte [rax], T_closure
 26560 000132F8 0F8581230000            	jne L_error_non_closure
 26561 000132FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26562 00013301 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26563 00013304 50                      	push rax
 26564 00013305 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 26565 0001330D 803805                  	cmp byte [rax], T_undefined
 26566 00013310 0F84E5220000            	je L_error_fvar_undefined
 26567 00013316 50                      	push rax
 26568 00013317 6A02                    	push 2	; arg count
 26569 00013319 488B0425[E7140000]      	mov rax, qword [free_var_107]	; free var apply
 26570 00013321 803805                  	cmp byte [rax], T_undefined
 26571 00013324 0F84D1220000            	je L_error_fvar_undefined
 26572 0001332A 803804                  	cmp byte [rax], T_closure
 26573 0001332D 0F854C230000            	jne L_error_non_closure
 26574 00013333 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26575 00013336 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26576 00013339 50                      	push rax
 26577 0001333A 6A01                    	push 1	; arg count
 26578 0001333C 488B0425[95110000]      	mov rax, qword [free_var_57]	; free var make-vector
 26579 00013344 803805                  	cmp byte [rax], T_undefined
 26580 00013347 0F84AE220000            	je L_error_fvar_undefined
 26581 0001334D 803804                  	cmp byte [rax], T_closure
 26582 00013350 0F8529230000            	jne L_error_non_closure
 26583 00013356 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26584 00013359 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26585 0001335C 50                      	push rax
 26586 0001335D 6A03                    	push 3	; arg count
 26587 0001335F 488B4510                	mov rax, ENV
 26588 00013363 488B00                  	mov rax, qword [rax + 8 * 0]
 26589 00013366 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 26590 00013369 488B00                  	mov rax, qword [rax]
 26591 0001336C 803804                  	cmp byte [rax], T_closure
 26592 0001336F 0F850A230000            	jne L_error_non_closure
 26593 00013375 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26594                                  
 26595                                  	; recycling the current frame
 26596 00013378 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26597 0001337B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26598 0001337E B907000000              	mov rcx, 3 + 4
 26599 00013383 488B5D18                	mov rbx, COUNT
 26600 00013387 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26601 0001338C 488D55F8                	lea rdx, [rbp - 8 * 1]
 26602                                  .L_tc_recycle_frame_loop_07a0:
 26603 00013390 4883F900                	cmp rcx, 0
 26604 00013394 7413                    	je .L_tc_recycle_frame_done_07a0
 26605 00013396 488B32                  	mov rsi, qword [rdx]
 26606 00013399 488933                  	mov qword [rbx], rsi
 26607 0001339C 48FFC9                  	dec rcx
 26608 0001339F 4883EB08                	sub rbx, 8 * 1
 26609 000133A3 4883EA08                	sub rdx, 8 * 1
 26610 000133A7 EBE7                    	jmp .L_tc_recycle_frame_loop_07a0
 26611                                  .L_tc_recycle_frame_done_07a0:
 26612 000133A9 488D6308                	lea rsp, [rbx + 8 * 1]
 26613 000133AD 5D                      	pop rbp	; the proc will restore it!
 26614 000133AE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26615 000133B1 C9                      	leave
 26616 000133B2 C21800                  	ret AND_KILL_FRAME(1)
 26617                                  .L_lambda_opt_end_00c8:	; new closure is in rax
 26618 000133B5 C9                      	leave
 26619 000133B6 C22000                  	ret AND_KILL_FRAME(2)
 26620                                  .L_lambda_simple_end_05c4:	; new closure is in rax
 26621 000133B9 803804                  	cmp byte [rax], T_closure
 26622 000133BC 0F85BD220000            	jne L_error_non_closure
 26623 000133C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26624 000133C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26625 000133C8 48890425[E3180000]      	mov qword [free_var_167], rax
 26626 000133D0 48B8-                   	mov rax, sob_void
 26626 000133D2 [0000000000000000] 
 26627                                  
 26628 000133DA 4889C7                  	mov rdi, rax
 26629 000133DD E858240000              	call print_sexpr_if_not_void
 26630                                  
 26631 000133E2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26632 000133E7 E83C230000              	call malloc
 26633 000133EC 50                      	push rax
 26634 000133ED BF00000000              	mov rdi, 8 * 0	; new rib
 26635 000133F2 E831230000              	call malloc
 26636 000133F7 50                      	push rax
 26637 000133F8 BF08000000              	mov rdi, 8 * 1	; extended env
 26638 000133FD E826230000              	call malloc
 26639 00013402 488B7D10                	mov rdi, ENV
 26640 00013406 BE00000000              	mov rsi, 0
 26641 0001340B BA01000000              	mov rdx, 1
 26642                                  .L_lambda_simple_env_loop_05c8:	; ext_env[i + 1] <-- env[i]
 26643 00013410 4883FE00                	cmp rsi, 0
 26644 00013414 7410                    	je .L_lambda_simple_env_end_05c8
 26645 00013416 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26646 0001341A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26647 0001341E 48FFC6                  	inc rsi
 26648 00013421 48FFC2                  	inc rdx
 26649 00013424 EBEA                    	jmp .L_lambda_simple_env_loop_05c8
 26650                                  .L_lambda_simple_env_end_05c8:
 26651 00013426 5B                      	pop rbx
 26652 00013427 BE00000000              	mov rsi, 0
 26653                                  .L_lambda_simple_params_loop_05c8:	; copy params
 26654 0001342C 4883FE00                	cmp rsi, 0
 26655 00013430 740E                    	je .L_lambda_simple_params_end_05c8
 26656 00013432 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26657 00013437 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26658 0001343B 48FFC6                  	inc rsi
 26659 0001343E EBEC                    	jmp .L_lambda_simple_params_loop_05c8
 26660                                  .L_lambda_simple_params_end_05c8:
 26661 00013440 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26662 00013443 4889C3                  	mov rbx, rax
 26663 00013446 58                      	pop rax
 26664 00013447 C60004                  	mov byte [rax], T_closure
 26665 0001344A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26666 0001344E 48C74009[5B340100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05c8
 26667 00013456 E9BE000000              	jmp .L_lambda_simple_end_05c8
 26668                                  .L_lambda_simple_code_05c8:	; lambda-simple body
 26669 0001345B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26670 00013461 740B                    	je .L_lambda_simple_arity_check_ok_05c8
 26671 00013463 FF742410                	push qword [rsp + 8 * 2]
 26672 00013467 6A01                    	push 1
 26673 00013469 E973220000              	jmp L_error_incorrect_arity_simple
 26674                                  .L_lambda_simple_arity_check_ok_05c8:
 26675 0001346E C8000000                	enter 0, 0
 26676                                  	; preparing a tail-call
 26677 00013472 488B4520                	mov rax, PARAM(0)	; param str
 26678 00013476 50                      	push rax
 26679 00013477 6A01                    	push 1	; arg count
 26680 00013479 488B0425[4B170000]      	mov rax, qword [free_var_143]	; free var string->list
 26681 00013481 803805                  	cmp byte [rax], T_undefined
 26682 00013484 0F8471210000            	je L_error_fvar_undefined
 26683 0001348A 803804                  	cmp byte [rax], T_closure
 26684 0001348D 0F85EC210000            	jne L_error_non_closure
 26685 00013493 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26686 00013496 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26687 00013499 50                      	push rax
 26688 0001349A 6A01                    	push 1	; arg count
 26689 0001349C 488B0425[2B150000]      	mov rax, qword [free_var_111]	; free var reverse
 26690 000134A4 803805                  	cmp byte [rax], T_undefined
 26691 000134A7 0F844E210000            	je L_error_fvar_undefined
 26692 000134AD 803804                  	cmp byte [rax], T_closure
 26693 000134B0 0F85C9210000            	jne L_error_non_closure
 26694 000134B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26695 000134B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26696 000134BC 50                      	push rax
 26697 000134BD 6A01                    	push 1	; arg count
 26698 000134BF 488B0425[3A170000]      	mov rax, qword [free_var_142]	; free var list->string
 26699 000134C7 803805                  	cmp byte [rax], T_undefined
 26700 000134CA 0F842B210000            	je L_error_fvar_undefined
 26701 000134D0 803804                  	cmp byte [rax], T_closure
 26702 000134D3 0F85A6210000            	jne L_error_non_closure
 26703 000134D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26704                                  
 26705                                  	; recycling the current frame
 26706 000134DC FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26707 000134DF FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26708 000134E2 B905000000              	mov rcx, 1 + 4
 26709 000134E7 488B5D18                	mov rbx, COUNT
 26710 000134EB 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26711 000134F0 488D55F8                	lea rdx, [rbp - 8 * 1]
 26712                                  .L_tc_recycle_frame_loop_07a1:
 26713 000134F4 4883F900                	cmp rcx, 0
 26714 000134F8 7413                    	je .L_tc_recycle_frame_done_07a1
 26715 000134FA 488B32                  	mov rsi, qword [rdx]
 26716 000134FD 488933                  	mov qword [rbx], rsi
 26717 00013500 48FFC9                  	dec rcx
 26718 00013503 4883EB08                	sub rbx, 8 * 1
 26719 00013507 4883EA08                	sub rdx, 8 * 1
 26720 0001350B EBE7                    	jmp .L_tc_recycle_frame_loop_07a1
 26721                                  .L_tc_recycle_frame_done_07a1:
 26722 0001350D 488D6308                	lea rsp, [rbx + 8 * 1]
 26723 00013511 5D                      	pop rbp	; the proc will restore it!
 26724 00013512 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26725 00013515 C9                      	leave
 26726 00013516 C21800                  	ret AND_KILL_FRAME(1)
 26727                                  .L_lambda_simple_end_05c8:	; new closure is in rax
 26728 00013519 48890425[F4180000]      	mov qword [free_var_168], rax
 26729 00013521 48B8-                   	mov rax, sob_void
 26729 00013523 [0000000000000000] 
 26730                                  
 26731 0001352B 4889C7                  	mov rdi, rax
 26732 0001352E E807230000              	call print_sexpr_if_not_void
 26733                                  
 26734 00013533 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26735 00013538 E8EB210000              	call malloc
 26736 0001353D 50                      	push rax
 26737 0001353E BF00000000              	mov rdi, 8 * 0	; new rib
 26738 00013543 E8E0210000              	call malloc
 26739 00013548 50                      	push rax
 26740 00013549 BF08000000              	mov rdi, 8 * 1	; extended env
 26741 0001354E E8D5210000              	call malloc
 26742 00013553 488B7D10                	mov rdi, ENV
 26743 00013557 BE00000000              	mov rsi, 0
 26744 0001355C BA01000000              	mov rdx, 1
 26745                                  .L_lambda_simple_env_loop_05c9:	; ext_env[i + 1] <-- env[i]
 26746 00013561 4883FE00                	cmp rsi, 0
 26747 00013565 7410                    	je .L_lambda_simple_env_end_05c9
 26748 00013567 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26749 0001356B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26750 0001356F 48FFC6                  	inc rsi
 26751 00013572 48FFC2                  	inc rdx
 26752 00013575 EBEA                    	jmp .L_lambda_simple_env_loop_05c9
 26753                                  .L_lambda_simple_env_end_05c9:
 26754 00013577 5B                      	pop rbx
 26755 00013578 BE00000000              	mov rsi, 0
 26756                                  .L_lambda_simple_params_loop_05c9:	; copy params
 26757 0001357D 4883FE00                	cmp rsi, 0
 26758 00013581 740E                    	je .L_lambda_simple_params_end_05c9
 26759 00013583 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26760 00013588 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26761 0001358C 48FFC6                  	inc rsi
 26762 0001358F EBEC                    	jmp .L_lambda_simple_params_loop_05c9
 26763                                  .L_lambda_simple_params_end_05c9:
 26764 00013591 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26765 00013594 4889C3                  	mov rbx, rax
 26766 00013597 58                      	pop rax
 26767 00013598 C60004                  	mov byte [rax], T_closure
 26768 0001359B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26769 0001359F 48C74009[AC350100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05c9
 26770 000135A7 E9BE000000              	jmp .L_lambda_simple_end_05c9
 26771                                  .L_lambda_simple_code_05c9:	; lambda-simple body
 26772 000135AC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26773 000135B2 740B                    	je .L_lambda_simple_arity_check_ok_05c9
 26774 000135B4 FF742410                	push qword [rsp + 8 * 2]
 26775 000135B8 6A01                    	push 1
 26776 000135BA E922210000              	jmp L_error_incorrect_arity_simple
 26777                                  .L_lambda_simple_arity_check_ok_05c9:
 26778 000135BF C8000000                	enter 0, 0
 26779                                  	; preparing a tail-call
 26780 000135C3 488B4520                	mov rax, PARAM(0)	; param vec
 26781 000135C7 50                      	push rax
 26782 000135C8 6A01                    	push 1	; arg count
 26783 000135CA 488B0425[39180000]      	mov rax, qword [free_var_157]	; free var vector->list
 26784 000135D2 803805                  	cmp byte [rax], T_undefined
 26785 000135D5 0F8420200000            	je L_error_fvar_undefined
 26786 000135DB 803804                  	cmp byte [rax], T_closure
 26787 000135DE 0F859B200000            	jne L_error_non_closure
 26788 000135E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26789 000135E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26790 000135EA 50                      	push rax
 26791 000135EB 6A01                    	push 1	; arg count
 26792 000135ED 488B0425[2B150000]      	mov rax, qword [free_var_111]	; free var reverse
 26793 000135F5 803805                  	cmp byte [rax], T_undefined
 26794 000135F8 0F84FD1F0000            	je L_error_fvar_undefined
 26795 000135FE 803804                  	cmp byte [rax], T_closure
 26796 00013601 0F8578200000            	jne L_error_non_closure
 26797 00013607 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26798 0001360A FF5009                  	call SOB_CLOSURE_CODE(rax)
 26799 0001360D 50                      	push rax
 26800 0001360E 6A01                    	push 1	; arg count
 26801 00013610 488B0425[17180000]      	mov rax, qword [free_var_155]	; free var list->vector
 26802 00013618 803805                  	cmp byte [rax], T_undefined
 26803 0001361B 0F84DA1F0000            	je L_error_fvar_undefined
 26804 00013621 803804                  	cmp byte [rax], T_closure
 26805 00013624 0F8555200000            	jne L_error_non_closure
 26806 0001362A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26807                                  
 26808                                  	; recycling the current frame
 26809 0001362D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 26810 00013630 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 26811 00013633 B905000000              	mov rcx, 1 + 4
 26812 00013638 488B5D18                	mov rbx, COUNT
 26813 0001363C 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 26814 00013641 488D55F8                	lea rdx, [rbp - 8 * 1]
 26815                                  .L_tc_recycle_frame_loop_07a2:
 26816 00013645 4883F900                	cmp rcx, 0
 26817 00013649 7413                    	je .L_tc_recycle_frame_done_07a2
 26818 0001364B 488B32                  	mov rsi, qword [rdx]
 26819 0001364E 488933                  	mov qword [rbx], rsi
 26820 00013651 48FFC9                  	dec rcx
 26821 00013654 4883EB08                	sub rbx, 8 * 1
 26822 00013658 4883EA08                	sub rdx, 8 * 1
 26823 0001365C EBE7                    	jmp .L_tc_recycle_frame_loop_07a2
 26824                                  .L_tc_recycle_frame_done_07a2:
 26825 0001365E 488D6308                	lea rsp, [rbx + 8 * 1]
 26826 00013662 5D                      	pop rbp	; the proc will restore it!
 26827 00013663 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26828 00013666 C9                      	leave
 26829 00013667 C21800                  	ret AND_KILL_FRAME(1)
 26830                                  .L_lambda_simple_end_05c9:	; new closure is in rax
 26831 0001366A 48890425[05190000]      	mov qword [free_var_169], rax
 26832 00013672 48B8-                   	mov rax, sob_void
 26832 00013674 [0000000000000000] 
 26833                                  
 26834 0001367C 4889C7                  	mov rdi, rax
 26835 0001367F E8B6210000              	call print_sexpr_if_not_void
 26836                                  
 26837 00013684 48B8-                   	mov rax, L_constants + 1881
 26837 00013686 [5907000000000000] 
 26838 0001368E 50                      	push rax
 26839 0001368F 6A01                    	push 1	; arg count
 26840 00013691 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26841 00013696 E88D200000              	call malloc
 26842 0001369B 50                      	push rax
 26843 0001369C BF00000000              	mov rdi, 8 * 0	; new rib
 26844 000136A1 E882200000              	call malloc
 26845 000136A6 50                      	push rax
 26846 000136A7 BF08000000              	mov rdi, 8 * 1	; extended env
 26847 000136AC E877200000              	call malloc
 26848 000136B1 488B7D10                	mov rdi, ENV
 26849 000136B5 BE00000000              	mov rsi, 0
 26850 000136BA BA01000000              	mov rdx, 1
 26851                                  .L_lambda_simple_env_loop_05ca:	; ext_env[i + 1] <-- env[i]
 26852 000136BF 4883FE00                	cmp rsi, 0
 26853 000136C3 7410                    	je .L_lambda_simple_env_end_05ca
 26854 000136C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26855 000136C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26856 000136CD 48FFC6                  	inc rsi
 26857 000136D0 48FFC2                  	inc rdx
 26858 000136D3 EBEA                    	jmp .L_lambda_simple_env_loop_05ca
 26859                                  .L_lambda_simple_env_end_05ca:
 26860 000136D5 5B                      	pop rbx
 26861 000136D6 BE00000000              	mov rsi, 0
 26862                                  .L_lambda_simple_params_loop_05ca:	; copy params
 26863 000136DB 4883FE00                	cmp rsi, 0
 26864 000136DF 740E                    	je .L_lambda_simple_params_end_05ca
 26865 000136E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26866 000136E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26867 000136EA 48FFC6                  	inc rsi
 26868 000136ED EBEC                    	jmp .L_lambda_simple_params_loop_05ca
 26869                                  .L_lambda_simple_params_end_05ca:
 26870 000136EF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26871 000136F2 4889C3                  	mov rbx, rax
 26872 000136F5 58                      	pop rax
 26873 000136F6 C60004                  	mov byte [rax], T_closure
 26874 000136F9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26875 000136FD 48C74009[0A370100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05ca
 26876 00013705 E91D060000              	jmp .L_lambda_simple_end_05ca
 26877                                  .L_lambda_simple_code_05ca:	; lambda-simple body
 26878 0001370A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26879 00013710 740B                    	je .L_lambda_simple_arity_check_ok_05ca
 26880 00013712 FF742410                	push qword [rsp + 8 * 2]
 26881 00013716 6A01                    	push 1
 26882 00013718 E9C41F0000              	jmp L_error_incorrect_arity_simple
 26883                                  .L_lambda_simple_arity_check_ok_05ca:
 26884 0001371D C8000000                	enter 0, 0
 26885                                  
 26886 00013721 BF08000000              	mov rdi, 8
 26887 00013726 E8FD1F0000              	call malloc
 26888 0001372B 488B5D20                	mov rbx, PARAM(0)	; param run
 26889 0001372F 488918                  	mov [rax], rbx	; box run
 26890 00013732 48894520                	mov PARAM(0), rax	;replace param run with box
 26891 00013736 48B8-                   	mov rax, sob_void
 26891 00013738 [0000000000000000] 
 26892                                  
 26893 00013740 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26894 00013745 E8DE1F0000              	call malloc
 26895 0001374A 50                      	push rax
 26896 0001374B BF08000000              	mov rdi, 8 * 1	; new rib
 26897 00013750 E8D31F0000              	call malloc
 26898 00013755 50                      	push rax
 26899 00013756 BF10000000              	mov rdi, 8 * 2	; extended env
 26900 0001375B E8C81F0000              	call malloc
 26901 00013760 488B7D10                	mov rdi, ENV
 26902 00013764 BE00000000              	mov rsi, 0
 26903 00013769 BA01000000              	mov rdx, 1
 26904                                  .L_lambda_simple_env_loop_05cb:	; ext_env[i + 1] <-- env[i]
 26905 0001376E 4883FE01                	cmp rsi, 1
 26906 00013772 7410                    	je .L_lambda_simple_env_end_05cb
 26907 00013774 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26908 00013778 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26909 0001377C 48FFC6                  	inc rsi
 26910 0001377F 48FFC2                  	inc rdx
 26911 00013782 EBEA                    	jmp .L_lambda_simple_env_loop_05cb
 26912                                  .L_lambda_simple_env_end_05cb:
 26913 00013784 5B                      	pop rbx
 26914 00013785 BE00000000              	mov rsi, 0
 26915                                  .L_lambda_simple_params_loop_05cb:	; copy params
 26916 0001378A 4883FE01                	cmp rsi, 1
 26917 0001378E 740E                    	je .L_lambda_simple_params_end_05cb
 26918 00013790 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26919 00013795 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26920 00013799 48FFC6                  	inc rsi
 26921 0001379C EBEC                    	jmp .L_lambda_simple_params_loop_05cb
 26922                                  .L_lambda_simple_params_end_05cb:
 26923 0001379E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26924 000137A1 4889C3                  	mov rbx, rax
 26925 000137A4 58                      	pop rax
 26926 000137A5 C60004                  	mov byte [rax], T_closure
 26927 000137A8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26928 000137AC 48C74009[B9370100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05cb
 26929 000137B4 E9E6020000              	jmp .L_lambda_simple_end_05cb
 26930                                  .L_lambda_simple_code_05cb:	; lambda-simple body
 26931 000137B9 48837C241003            	cmp qword [rsp + 8 * 2], 3
 26932 000137BF 740B                    	je .L_lambda_simple_arity_check_ok_05cb
 26933 000137C1 FF742410                	push qword [rsp + 8 * 2]
 26934 000137C5 6A03                    	push 3
 26935 000137C7 E9151F0000              	jmp L_error_incorrect_arity_simple
 26936                                  .L_lambda_simple_arity_check_ok_05cb:
 26937 000137CC C8000000                	enter 0, 0
 26938 000137D0 488B4530                	mov rax, PARAM(2)	; param j
 26939 000137D4 50                      	push rax
 26940 000137D5 488B4528                	mov rax, PARAM(1)	; param i
 26941 000137D9 50                      	push rax
 26942 000137DA 6A02                    	push 2	; arg count
 26943 000137DC 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 26944 000137E4 803805                  	cmp byte [rax], T_undefined
 26945 000137E7 0F840E1E0000            	je L_error_fvar_undefined
 26946 000137ED 803804                  	cmp byte [rax], T_closure
 26947 000137F0 0F85891E0000            	jne L_error_non_closure
 26948 000137F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26949 000137F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26950                                  
 26951 000137FC 483D[02000000]          	cmp rax, sob_boolean_false
 26952 00013802 0F848F020000            	je .L_if_else_044f
 26953                                  	; preparing a tail-call
 26954 00013808 488B4528                	mov rax, PARAM(1)	; param i
 26955 0001380C 50                      	push rax
 26956 0001380D 488B4520                	mov rax, PARAM(0)	; param str
 26957 00013811 50                      	push rax
 26958 00013812 6A02                    	push 2	; arg count
 26959 00013814 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 26960 0001381C 803805                  	cmp byte [rax], T_undefined
 26961 0001381F 0F84D61D0000            	je L_error_fvar_undefined
 26962 00013825 803804                  	cmp byte [rax], T_closure
 26963 00013828 0F85511E0000            	jne L_error_non_closure
 26964 0001382E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26965 00013831 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26966 00013834 50                      	push rax
 26967 00013835 6A01                    	push 1	; arg count
 26968 00013837 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26969 0001383C E8E71E0000              	call malloc
 26970 00013841 50                      	push rax
 26971 00013842 BF18000000              	mov rdi, 8 * 3	; new rib
 26972 00013847 E8DC1E0000              	call malloc
 26973 0001384C 50                      	push rax
 26974 0001384D BF18000000              	mov rdi, 8 * 3	; extended env
 26975 00013852 E8D11E0000              	call malloc
 26976 00013857 488B7D10                	mov rdi, ENV
 26977 0001385B BE00000000              	mov rsi, 0
 26978 00013860 BA01000000              	mov rdx, 1
 26979                                  .L_lambda_simple_env_loop_05cc:	; ext_env[i + 1] <-- env[i]
 26980 00013865 4883FE02                	cmp rsi, 2
 26981 00013869 7410                    	je .L_lambda_simple_env_end_05cc
 26982 0001386B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26983 0001386F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26984 00013873 48FFC6                  	inc rsi
 26985 00013876 48FFC2                  	inc rdx
 26986 00013879 EBEA                    	jmp .L_lambda_simple_env_loop_05cc
 26987                                  .L_lambda_simple_env_end_05cc:
 26988 0001387B 5B                      	pop rbx
 26989 0001387C BE00000000              	mov rsi, 0
 26990                                  .L_lambda_simple_params_loop_05cc:	; copy params
 26991 00013881 4883FE03                	cmp rsi, 3
 26992 00013885 740E                    	je .L_lambda_simple_params_end_05cc
 26993 00013887 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26994 0001388C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26995 00013890 48FFC6                  	inc rsi
 26996 00013893 EBEC                    	jmp .L_lambda_simple_params_loop_05cc
 26997                                  .L_lambda_simple_params_end_05cc:
 26998 00013895 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26999 00013898 4889C3                  	mov rbx, rax
 27000 0001389B 58                      	pop rax
 27001 0001389C C60004                  	mov byte [rax], T_closure
 27002 0001389F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27003 000138A3 48C74009[B0380100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05cc
 27004 000138AB E9A0010000              	jmp .L_lambda_simple_end_05cc
 27005                                  .L_lambda_simple_code_05cc:	; lambda-simple body
 27006 000138B0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27007 000138B6 740B                    	je .L_lambda_simple_arity_check_ok_05cc
 27008 000138B8 FF742410                	push qword [rsp + 8 * 2]
 27009 000138BC 6A01                    	push 1
 27010 000138BE E91E1E0000              	jmp L_error_incorrect_arity_simple
 27011                                  .L_lambda_simple_arity_check_ok_05cc:
 27012 000138C3 C8000000                	enter 0, 0
 27013 000138C7 488B4510                	mov rax, ENV
 27014 000138CB 488B00                  	mov rax, qword [rax + 8 * 0]
 27015 000138CE 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27016 000138D2 50                      	push rax
 27017 000138D3 488B4510                	mov rax, ENV
 27018 000138D7 488B00                  	mov rax, qword [rax + 8 * 0]
 27019 000138DA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27020 000138DD 50                      	push rax
 27021 000138DE 6A02                    	push 2	; arg count
 27022 000138E0 488B0425[51110000]      	mov rax, qword [free_var_53]	; free var string-ref
 27023 000138E8 803805                  	cmp byte [rax], T_undefined
 27024 000138EB 0F840A1D0000            	je L_error_fvar_undefined
 27025 000138F1 803804                  	cmp byte [rax], T_closure
 27026 000138F4 0F85851D0000            	jne L_error_non_closure
 27027 000138FA FF7001                  	push SOB_CLOSURE_ENV(rax)
 27028 000138FD FF5009                  	call SOB_CLOSURE_CODE(rax)
 27029 00013900 50                      	push rax
 27030 00013901 488B4510                	mov rax, ENV
 27031 00013905 488B00                  	mov rax, qword [rax + 8 * 0]
 27032 00013908 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27033 0001390C 50                      	push rax
 27034 0001390D 488B4510                	mov rax, ENV
 27035 00013911 488B00                  	mov rax, qword [rax + 8 * 0]
 27036 00013914 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27037 00013917 50                      	push rax
 27038 00013918 6A03                    	push 3	; arg count
 27039 0001391A 488B0425[84110000]      	mov rax, qword [free_var_56]	; free var string-set!
 27040 00013922 803805                  	cmp byte [rax], T_undefined
 27041 00013925 0F84D01C0000            	je L_error_fvar_undefined
 27042 0001392B 803804                  	cmp byte [rax], T_closure
 27043 0001392E 0F854B1D0000            	jne L_error_non_closure
 27044 00013934 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27045 00013937 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27046                                  
 27047 0001393A 488B4520                	mov rax, PARAM(0)	; param ch
 27048 0001393E 50                      	push rax
 27049 0001393F 488B4510                	mov rax, ENV
 27050 00013943 488B00                  	mov rax, qword [rax + 8 * 0]
 27051 00013946 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27052 0001394A 50                      	push rax
 27053 0001394B 488B4510                	mov rax, ENV
 27054 0001394F 488B00                  	mov rax, qword [rax + 8 * 0]
 27055 00013952 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27056 00013955 50                      	push rax
 27057 00013956 6A03                    	push 3	; arg count
 27058 00013958 488B0425[84110000]      	mov rax, qword [free_var_56]	; free var string-set!
 27059 00013960 803805                  	cmp byte [rax], T_undefined
 27060 00013963 0F84921C0000            	je L_error_fvar_undefined
 27061 00013969 803804                  	cmp byte [rax], T_closure
 27062 0001396C 0F850D1D0000            	jne L_error_non_closure
 27063 00013972 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27064 00013975 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27065                                  
 27066                                  	; preparing a tail-call
 27067 00013978 48B8-                   	mov rax, L_constants + 2158
 27067 0001397A [6E08000000000000] 
 27068 00013982 50                      	push rax
 27069 00013983 488B4510                	mov rax, ENV
 27070 00013987 488B00                  	mov rax, qword [rax + 8 * 0]
 27071 0001398A 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27072 0001398E 50                      	push rax
 27073 0001398F 6A02                    	push 2	; arg count
 27074 00013991 488B0425[91150000]      	mov rax, qword [free_var_117]	; free var -
 27075 00013999 803805                  	cmp byte [rax], T_undefined
 27076 0001399C 0F84591C0000            	je L_error_fvar_undefined
 27077 000139A2 803804                  	cmp byte [rax], T_closure
 27078 000139A5 0F85D41C0000            	jne L_error_non_closure
 27079 000139AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 27080 000139AE FF5009                  	call SOB_CLOSURE_CODE(rax)
 27081 000139B1 50                      	push rax
 27082 000139B2 48B8-                   	mov rax, L_constants + 2158
 27082 000139B4 [6E08000000000000] 
 27083 000139BC 50                      	push rax
 27084 000139BD 488B4510                	mov rax, ENV
 27085 000139C1 488B00                  	mov rax, qword [rax + 8 * 0]
 27086 000139C4 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27087 000139C8 50                      	push rax
 27088 000139C9 6A02                    	push 2	; arg count
 27089 000139CB 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 27090 000139D3 803805                  	cmp byte [rax], T_undefined
 27091 000139D6 0F841F1C0000            	je L_error_fvar_undefined
 27092 000139DC 803804                  	cmp byte [rax], T_closure
 27093 000139DF 0F859A1C0000            	jne L_error_non_closure
 27094 000139E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27095 000139E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27096 000139EB 50                      	push rax
 27097 000139EC 488B4510                	mov rax, ENV
 27098 000139F0 488B00                  	mov rax, qword [rax + 8 * 0]
 27099 000139F3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27100 000139F6 50                      	push rax
 27101 000139F7 6A03                    	push 3	; arg count
 27102 000139F9 488B4510                	mov rax, ENV
 27103 000139FD 488B4008                	mov rax, qword [rax + 8 * 1]
 27104 00013A01 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27105 00013A04 488B00                  	mov rax, qword [rax]
 27106 00013A07 803804                  	cmp byte [rax], T_closure
 27107 00013A0A 0F856F1C0000            	jne L_error_non_closure
 27108 00013A10 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27109                                  
 27110                                  	; recycling the current frame
 27111 00013A13 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27112 00013A16 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27113 00013A19 B907000000              	mov rcx, 3 + 4
 27114 00013A1E 488B5D18                	mov rbx, COUNT
 27115 00013A22 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27116 00013A27 488D55F8                	lea rdx, [rbp - 8 * 1]
 27117                                  .L_tc_recycle_frame_loop_07a3:
 27118 00013A2B 4883F900                	cmp rcx, 0
 27119 00013A2F 7413                    	je .L_tc_recycle_frame_done_07a3
 27120 00013A31 488B32                  	mov rsi, qword [rdx]
 27121 00013A34 488933                  	mov qword [rbx], rsi
 27122 00013A37 48FFC9                  	dec rcx
 27123 00013A3A 4883EB08                	sub rbx, 8 * 1
 27124 00013A3E 4883EA08                	sub rdx, 8 * 1
 27125 00013A42 EBE7                    	jmp .L_tc_recycle_frame_loop_07a3
 27126                                  .L_tc_recycle_frame_done_07a3:
 27127 00013A44 488D6308                	lea rsp, [rbx + 8 * 1]
 27128 00013A48 5D                      	pop rbp	; the proc will restore it!
 27129 00013A49 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27130 00013A4C C9                      	leave
 27131 00013A4D C21800                  	ret AND_KILL_FRAME(1)
 27132                                  .L_lambda_simple_end_05cc:	; new closure is in rax
 27133 00013A50 803804                  	cmp byte [rax], T_closure
 27134 00013A53 0F85261C0000            	jne L_error_non_closure
 27135 00013A59 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27136                                  
 27137                                  	; recycling the current frame
 27138 00013A5C FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27139 00013A5F FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27140 00013A62 B905000000              	mov rcx, 1 + 4
 27141 00013A67 488B5D18                	mov rbx, COUNT
 27142 00013A6B 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27143 00013A70 488D55F8                	lea rdx, [rbp - 8 * 1]
 27144                                  .L_tc_recycle_frame_loop_07a4:
 27145 00013A74 4883F900                	cmp rcx, 0
 27146 00013A78 7413                    	je .L_tc_recycle_frame_done_07a4
 27147 00013A7A 488B32                  	mov rsi, qword [rdx]
 27148 00013A7D 488933                  	mov qword [rbx], rsi
 27149 00013A80 48FFC9                  	dec rcx
 27150 00013A83 4883EB08                	sub rbx, 8 * 1
 27151 00013A87 4883EA08                	sub rdx, 8 * 1
 27152 00013A8B EBE7                    	jmp .L_tc_recycle_frame_loop_07a4
 27153                                  .L_tc_recycle_frame_done_07a4:
 27154 00013A8D 488D6308                	lea rsp, [rbx + 8 * 1]
 27155 00013A91 5D                      	pop rbp	; the proc will restore it!
 27156 00013A92 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27157                                  
 27158 00013A95 EB04                    	jmp .L_if_end_044f
 27159                                  
 27160                                  	.L_if_else_044f:
 27161 00013A97 488B4520                	mov rax, PARAM(0)	; param str
 27162                                  
 27163                                  	.L_if_end_044f:
 27164 00013A9B C9                      	leave
 27165 00013A9C C22800                  	ret AND_KILL_FRAME(3)
 27166                                  .L_lambda_simple_end_05cb:	; new closure is in rax
 27167                                  
 27168 00013A9F 50                      	push rax
 27169 00013AA0 488B4520                	mov rax, PARAM(0)	; param run
 27170                                  
 27171 00013AA4 8F00                    	pop qword[rax]
 27172 00013AA6 48B8-                   	mov rax, sob_void
 27172 00013AA8 [0000000000000000] 
 27173                                  
 27174 00013AB0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27175 00013AB5 E86E1C0000              	call malloc
 27176 00013ABA 50                      	push rax
 27177 00013ABB BF08000000              	mov rdi, 8 * 1	; new rib
 27178 00013AC0 E8631C0000              	call malloc
 27179 00013AC5 50                      	push rax
 27180 00013AC6 BF10000000              	mov rdi, 8 * 2	; extended env
 27181 00013ACB E8581C0000              	call malloc
 27182 00013AD0 488B7D10                	mov rdi, ENV
 27183 00013AD4 BE00000000              	mov rsi, 0
 27184 00013AD9 BA01000000              	mov rdx, 1
 27185                                  .L_lambda_simple_env_loop_05cd:	; ext_env[i + 1] <-- env[i]
 27186 00013ADE 4883FE01                	cmp rsi, 1
 27187 00013AE2 7410                    	je .L_lambda_simple_env_end_05cd
 27188 00013AE4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27189 00013AE8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27190 00013AEC 48FFC6                  	inc rsi
 27191 00013AEF 48FFC2                  	inc rdx
 27192 00013AF2 EBEA                    	jmp .L_lambda_simple_env_loop_05cd
 27193                                  .L_lambda_simple_env_end_05cd:
 27194 00013AF4 5B                      	pop rbx
 27195 00013AF5 BE00000000              	mov rsi, 0
 27196                                  .L_lambda_simple_params_loop_05cd:	; copy params
 27197 00013AFA 4883FE01                	cmp rsi, 1
 27198 00013AFE 740E                    	je .L_lambda_simple_params_end_05cd
 27199 00013B00 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27200 00013B05 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27201 00013B09 48FFC6                  	inc rsi
 27202 00013B0C EBEC                    	jmp .L_lambda_simple_params_loop_05cd
 27203                                  .L_lambda_simple_params_end_05cd:
 27204 00013B0E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27205 00013B11 4889C3                  	mov rbx, rax
 27206 00013B14 58                      	pop rax
 27207 00013B15 C60004                  	mov byte [rax], T_closure
 27208 00013B18 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27209 00013B1C 48C74009[293B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05cd
 27210 00013B24 E9FA010000              	jmp .L_lambda_simple_end_05cd
 27211                                  .L_lambda_simple_code_05cd:	; lambda-simple body
 27212 00013B29 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27213 00013B2F 740B                    	je .L_lambda_simple_arity_check_ok_05cd
 27214 00013B31 FF742410                	push qword [rsp + 8 * 2]
 27215 00013B35 6A01                    	push 1
 27216 00013B37 E9A51B0000              	jmp L_error_incorrect_arity_simple
 27217                                  .L_lambda_simple_arity_check_ok_05cd:
 27218 00013B3C C8000000                	enter 0, 0
 27219                                  	; preparing a tail-call
 27220 00013B40 488B4520                	mov rax, PARAM(0)	; param str
 27221 00013B44 50                      	push rax
 27222 00013B45 6A01                    	push 1	; arg count
 27223 00013B47 488B0425[FE0E0000]      	mov rax, qword [free_var_18]	; free var string-length
 27224 00013B4F 803805                  	cmp byte [rax], T_undefined
 27225 00013B52 0F84A31A0000            	je L_error_fvar_undefined
 27226 00013B58 803804                  	cmp byte [rax], T_closure
 27227 00013B5B 0F851E1B0000            	jne L_error_non_closure
 27228 00013B61 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27229 00013B64 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27230 00013B67 50                      	push rax
 27231 00013B68 6A01                    	push 1	; arg count
 27232 00013B6A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27233 00013B6F E8B41B0000              	call malloc
 27234 00013B74 50                      	push rax
 27235 00013B75 BF08000000              	mov rdi, 8 * 1	; new rib
 27236 00013B7A E8A91B0000              	call malloc
 27237 00013B7F 50                      	push rax
 27238 00013B80 BF18000000              	mov rdi, 8 * 3	; extended env
 27239 00013B85 E89E1B0000              	call malloc
 27240 00013B8A 488B7D10                	mov rdi, ENV
 27241 00013B8E BE00000000              	mov rsi, 0
 27242 00013B93 BA01000000              	mov rdx, 1
 27243                                  .L_lambda_simple_env_loop_05ce:	; ext_env[i + 1] <-- env[i]
 27244 00013B98 4883FE02                	cmp rsi, 2
 27245 00013B9C 7410                    	je .L_lambda_simple_env_end_05ce
 27246 00013B9E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27247 00013BA2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27248 00013BA6 48FFC6                  	inc rsi
 27249 00013BA9 48FFC2                  	inc rdx
 27250 00013BAC EBEA                    	jmp .L_lambda_simple_env_loop_05ce
 27251                                  .L_lambda_simple_env_end_05ce:
 27252 00013BAE 5B                      	pop rbx
 27253 00013BAF BE00000000              	mov rsi, 0
 27254                                  .L_lambda_simple_params_loop_05ce:	; copy params
 27255 00013BB4 4883FE01                	cmp rsi, 1
 27256 00013BB8 740E                    	je .L_lambda_simple_params_end_05ce
 27257 00013BBA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27258 00013BBF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27259 00013BC3 48FFC6                  	inc rsi
 27260 00013BC6 EBEC                    	jmp .L_lambda_simple_params_loop_05ce
 27261                                  .L_lambda_simple_params_end_05ce:
 27262 00013BC8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27263 00013BCB 4889C3                  	mov rbx, rax
 27264 00013BCE 58                      	pop rax
 27265 00013BCF C60004                  	mov byte [rax], T_closure
 27266 00013BD2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27267 00013BD6 48C74009[E33B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05ce
 27268 00013BDE E9F7000000              	jmp .L_lambda_simple_end_05ce
 27269                                  .L_lambda_simple_code_05ce:	; lambda-simple body
 27270 00013BE3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27271 00013BE9 740B                    	je .L_lambda_simple_arity_check_ok_05ce
 27272 00013BEB FF742410                	push qword [rsp + 8 * 2]
 27273 00013BEF 6A01                    	push 1
 27274 00013BF1 E9EB1A0000              	jmp L_error_incorrect_arity_simple
 27275                                  .L_lambda_simple_arity_check_ok_05ce:
 27276 00013BF6 C8000000                	enter 0, 0
 27277 00013BFA 488B4520                	mov rax, PARAM(0)	; param n
 27278 00013BFE 50                      	push rax
 27279 00013BFF 6A01                    	push 1	; arg count
 27280 00013C01 488B0425[970F0000]      	mov rax, qword [free_var_27]	; free var zero?
 27281 00013C09 803805                  	cmp byte [rax], T_undefined
 27282 00013C0C 0F84E9190000            	je L_error_fvar_undefined
 27283 00013C12 803804                  	cmp byte [rax], T_closure
 27284 00013C15 0F85641A0000            	jne L_error_non_closure
 27285 00013C1B FF7001                  	push SOB_CLOSURE_ENV(rax)
 27286 00013C1E FF5009                  	call SOB_CLOSURE_CODE(rax)
 27287                                  
 27288 00013C21 483D[02000000]          	cmp rax, sob_boolean_false
 27289 00013C27 740F                    	je .L_if_else_0450
 27290 00013C29 488B4510                	mov rax, ENV
 27291 00013C2D 488B00                  	mov rax, qword [rax + 8 * 0]
 27292 00013C30 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27293                                  
 27294 00013C33 E99E000000              	jmp .L_if_end_0450
 27295                                  
 27296                                  	.L_if_else_0450:
 27297                                  	; preparing a tail-call
 27298 00013C38 48B8-                   	mov rax, L_constants + 2158
 27298 00013C3A [6E08000000000000] 
 27299 00013C42 50                      	push rax
 27300 00013C43 488B4520                	mov rax, PARAM(0)	; param n
 27301 00013C47 50                      	push rax
 27302 00013C48 6A02                    	push 2	; arg count
 27303 00013C4A 488B0425[91150000]      	mov rax, qword [free_var_117]	; free var -
 27304 00013C52 803805                  	cmp byte [rax], T_undefined
 27305 00013C55 0F84A0190000            	je L_error_fvar_undefined
 27306 00013C5B 803804                  	cmp byte [rax], T_closure
 27307 00013C5E 0F851B1A0000            	jne L_error_non_closure
 27308 00013C64 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27309 00013C67 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27310 00013C6A 50                      	push rax
 27311 00013C6B 48B8-                   	mov rax, L_constants + 2023
 27311 00013C6D [E707000000000000] 
 27312 00013C75 50                      	push rax
 27313 00013C76 488B4510                	mov rax, ENV
 27314 00013C7A 488B00                  	mov rax, qword [rax + 8 * 0]
 27315 00013C7D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 27316 00013C80 50                      	push rax
 27317 00013C81 6A03                    	push 3	; arg count
 27318 00013C83 488B4510                	mov rax, ENV
 27319 00013C87 488B4008                	mov rax, qword [rax + 8 * 1]
 27320 00013C8B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27321 00013C8E 488B00                  	mov rax, qword [rax]
 27322 00013C91 803804                  	cmp byte [rax], T_closure
 27323 00013C94 0F85E5190000            	jne L_error_non_closure
 27324 00013C9A FF7001                  	push SOB_CLOSURE_ENV(rax)
 27325                                  
 27326                                  	; recycling the current frame
 27327 00013C9D FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27328 00013CA0 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27329 00013CA3 B907000000              	mov rcx, 3 + 4
 27330 00013CA8 488B5D18                	mov rbx, COUNT
 27331 00013CAC 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27332 00013CB1 488D55F8                	lea rdx, [rbp - 8 * 1]
 27333                                  .L_tc_recycle_frame_loop_07a5:
 27334 00013CB5 4883F900                	cmp rcx, 0
 27335 00013CB9 7413                    	je .L_tc_recycle_frame_done_07a5
 27336 00013CBB 488B32                  	mov rsi, qword [rdx]
 27337 00013CBE 488933                  	mov qword [rbx], rsi
 27338 00013CC1 48FFC9                  	dec rcx
 27339 00013CC4 4883EB08                	sub rbx, 8 * 1
 27340 00013CC8 4883EA08                	sub rdx, 8 * 1
 27341 00013CCC EBE7                    	jmp .L_tc_recycle_frame_loop_07a5
 27342                                  .L_tc_recycle_frame_done_07a5:
 27343 00013CCE 488D6308                	lea rsp, [rbx + 8 * 1]
 27344 00013CD2 5D                      	pop rbp	; the proc will restore it!
 27345 00013CD3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27346                                  
 27347                                  	.L_if_end_0450:
 27348 00013CD6 C9                      	leave
 27349 00013CD7 C21800                  	ret AND_KILL_FRAME(1)
 27350                                  .L_lambda_simple_end_05ce:	; new closure is in rax
 27351 00013CDA 803804                  	cmp byte [rax], T_closure
 27352 00013CDD 0F859C190000            	jne L_error_non_closure
 27353 00013CE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27354                                  
 27355                                  	; recycling the current frame
 27356 00013CE6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27357 00013CE9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27358 00013CEC B905000000              	mov rcx, 1 + 4
 27359 00013CF1 488B5D18                	mov rbx, COUNT
 27360 00013CF5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27361 00013CFA 488D55F8                	lea rdx, [rbp - 8 * 1]
 27362                                  .L_tc_recycle_frame_loop_07a6:
 27363 00013CFE 4883F900                	cmp rcx, 0
 27364 00013D02 7413                    	je .L_tc_recycle_frame_done_07a6
 27365 00013D04 488B32                  	mov rsi, qword [rdx]
 27366 00013D07 488933                  	mov qword [rbx], rsi
 27367 00013D0A 48FFC9                  	dec rcx
 27368 00013D0D 4883EB08                	sub rbx, 8 * 1
 27369 00013D11 4883EA08                	sub rdx, 8 * 1
 27370 00013D15 EBE7                    	jmp .L_tc_recycle_frame_loop_07a6
 27371                                  .L_tc_recycle_frame_done_07a6:
 27372 00013D17 488D6308                	lea rsp, [rbx + 8 * 1]
 27373 00013D1B 5D                      	pop rbp	; the proc will restore it!
 27374 00013D1C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27375 00013D1F C9                      	leave
 27376 00013D20 C21800                  	ret AND_KILL_FRAME(1)
 27377                                  .L_lambda_simple_end_05cd:	; new closure is in rax
 27378 00013D23 C9                      	leave
 27379 00013D24 C21800                  	ret AND_KILL_FRAME(1)
 27380                                  .L_lambda_simple_end_05ca:	; new closure is in rax
 27381 00013D27 803804                  	cmp byte [rax], T_closure
 27382 00013D2A 0F854F190000            	jne L_error_non_closure
 27383 00013D30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27384 00013D33 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27385 00013D36 48890425[16190000]      	mov qword [free_var_170], rax
 27386 00013D3E 48B8-                   	mov rax, sob_void
 27386 00013D40 [0000000000000000] 
 27387                                  
 27388 00013D48 4889C7                  	mov rdi, rax
 27389 00013D4B E8EA1A0000              	call print_sexpr_if_not_void
 27390                                  
 27391 00013D50 48B8-                   	mov rax, L_constants + 1881
 27391 00013D52 [5907000000000000] 
 27392 00013D5A 50                      	push rax
 27393 00013D5B 6A01                    	push 1	; arg count
 27394 00013D5D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27395 00013D62 E8C1190000              	call malloc
 27396 00013D67 50                      	push rax
 27397 00013D68 BF00000000              	mov rdi, 8 * 0	; new rib
 27398 00013D6D E8B6190000              	call malloc
 27399 00013D72 50                      	push rax
 27400 00013D73 BF08000000              	mov rdi, 8 * 1	; extended env
 27401 00013D78 E8AB190000              	call malloc
 27402 00013D7D 488B7D10                	mov rdi, ENV
 27403 00013D81 BE00000000              	mov rsi, 0
 27404 00013D86 BA01000000              	mov rdx, 1
 27405                                  .L_lambda_simple_env_loop_05cf:	; ext_env[i + 1] <-- env[i]
 27406 00013D8B 4883FE00                	cmp rsi, 0
 27407 00013D8F 7410                    	je .L_lambda_simple_env_end_05cf
 27408 00013D91 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27409 00013D95 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27410 00013D99 48FFC6                  	inc rsi
 27411 00013D9C 48FFC2                  	inc rdx
 27412 00013D9F EBEA                    	jmp .L_lambda_simple_env_loop_05cf
 27413                                  .L_lambda_simple_env_end_05cf:
 27414 00013DA1 5B                      	pop rbx
 27415 00013DA2 BE00000000              	mov rsi, 0
 27416                                  .L_lambda_simple_params_loop_05cf:	; copy params
 27417 00013DA7 4883FE00                	cmp rsi, 0
 27418 00013DAB 740E                    	je .L_lambda_simple_params_end_05cf
 27419 00013DAD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27420 00013DB2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27421 00013DB6 48FFC6                  	inc rsi
 27422 00013DB9 EBEC                    	jmp .L_lambda_simple_params_loop_05cf
 27423                                  .L_lambda_simple_params_end_05cf:
 27424 00013DBB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27425 00013DBE 4889C3                  	mov rbx, rax
 27426 00013DC1 58                      	pop rax
 27427 00013DC2 C60004                  	mov byte [rax], T_closure
 27428 00013DC5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27429 00013DC9 48C74009[D63D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05cf
 27430 00013DD1 E91D060000              	jmp .L_lambda_simple_end_05cf
 27431                                  .L_lambda_simple_code_05cf:	; lambda-simple body
 27432 00013DD6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27433 00013DDC 740B                    	je .L_lambda_simple_arity_check_ok_05cf
 27434 00013DDE FF742410                	push qword [rsp + 8 * 2]
 27435 00013DE2 6A01                    	push 1
 27436 00013DE4 E9F8180000              	jmp L_error_incorrect_arity_simple
 27437                                  .L_lambda_simple_arity_check_ok_05cf:
 27438 00013DE9 C8000000                	enter 0, 0
 27439                                  
 27440 00013DED BF08000000              	mov rdi, 8
 27441 00013DF2 E831190000              	call malloc
 27442 00013DF7 488B5D20                	mov rbx, PARAM(0)	; param run
 27443 00013DFB 488918                  	mov [rax], rbx	; box run
 27444 00013DFE 48894520                	mov PARAM(0), rax	;replace param run with box
 27445 00013E02 48B8-                   	mov rax, sob_void
 27445 00013E04 [0000000000000000] 
 27446                                  
 27447 00013E0C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27448 00013E11 E812190000              	call malloc
 27449 00013E16 50                      	push rax
 27450 00013E17 BF08000000              	mov rdi, 8 * 1	; new rib
 27451 00013E1C E807190000              	call malloc
 27452 00013E21 50                      	push rax
 27453 00013E22 BF10000000              	mov rdi, 8 * 2	; extended env
 27454 00013E27 E8FC180000              	call malloc
 27455 00013E2C 488B7D10                	mov rdi, ENV
 27456 00013E30 BE00000000              	mov rsi, 0
 27457 00013E35 BA01000000              	mov rdx, 1
 27458                                  .L_lambda_simple_env_loop_05d0:	; ext_env[i + 1] <-- env[i]
 27459 00013E3A 4883FE01                	cmp rsi, 1
 27460 00013E3E 7410                    	je .L_lambda_simple_env_end_05d0
 27461 00013E40 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27462 00013E44 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27463 00013E48 48FFC6                  	inc rsi
 27464 00013E4B 48FFC2                  	inc rdx
 27465 00013E4E EBEA                    	jmp .L_lambda_simple_env_loop_05d0
 27466                                  .L_lambda_simple_env_end_05d0:
 27467 00013E50 5B                      	pop rbx
 27468 00013E51 BE00000000              	mov rsi, 0
 27469                                  .L_lambda_simple_params_loop_05d0:	; copy params
 27470 00013E56 4883FE01                	cmp rsi, 1
 27471 00013E5A 740E                    	je .L_lambda_simple_params_end_05d0
 27472 00013E5C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27473 00013E61 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27474 00013E65 48FFC6                  	inc rsi
 27475 00013E68 EBEC                    	jmp .L_lambda_simple_params_loop_05d0
 27476                                  .L_lambda_simple_params_end_05d0:
 27477 00013E6A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27478 00013E6D 4889C3                  	mov rbx, rax
 27479 00013E70 58                      	pop rax
 27480 00013E71 C60004                  	mov byte [rax], T_closure
 27481 00013E74 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27482 00013E78 48C74009[853E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05d0
 27483 00013E80 E9E6020000              	jmp .L_lambda_simple_end_05d0
 27484                                  .L_lambda_simple_code_05d0:	; lambda-simple body
 27485 00013E85 48837C241003            	cmp qword [rsp + 8 * 2], 3
 27486 00013E8B 740B                    	je .L_lambda_simple_arity_check_ok_05d0
 27487 00013E8D FF742410                	push qword [rsp + 8 * 2]
 27488 00013E91 6A03                    	push 3
 27489 00013E93 E949180000              	jmp L_error_incorrect_arity_simple
 27490                                  .L_lambda_simple_arity_check_ok_05d0:
 27491 00013E98 C8000000                	enter 0, 0
 27492 00013E9C 488B4530                	mov rax, PARAM(2)	; param j
 27493 00013EA0 50                      	push rax
 27494 00013EA1 488B4528                	mov rax, PARAM(1)	; param i
 27495 00013EA5 50                      	push rax
 27496 00013EA6 6A02                    	push 2	; arg count
 27497 00013EA8 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 27498 00013EB0 803805                  	cmp byte [rax], T_undefined
 27499 00013EB3 0F8442170000            	je L_error_fvar_undefined
 27500 00013EB9 803804                  	cmp byte [rax], T_closure
 27501 00013EBC 0F85BD170000            	jne L_error_non_closure
 27502 00013EC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27503 00013EC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27504                                  
 27505 00013EC8 483D[02000000]          	cmp rax, sob_boolean_false
 27506 00013ECE 0F848F020000            	je .L_if_else_0451
 27507                                  	; preparing a tail-call
 27508 00013ED4 488B4528                	mov rax, PARAM(1)	; param i
 27509 00013ED8 50                      	push rax
 27510 00013ED9 488B4520                	mov rax, PARAM(0)	; param vec
 27511 00013EDD 50                      	push rax
 27512 00013EDE 6A02                    	push 2	; arg count
 27513 00013EE0 488B0425[62110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 27514 00013EE8 803805                  	cmp byte [rax], T_undefined
 27515 00013EEB 0F840A170000            	je L_error_fvar_undefined
 27516 00013EF1 803804                  	cmp byte [rax], T_closure
 27517 00013EF4 0F8585170000            	jne L_error_non_closure
 27518 00013EFA FF7001                  	push SOB_CLOSURE_ENV(rax)
 27519 00013EFD FF5009                  	call SOB_CLOSURE_CODE(rax)
 27520 00013F00 50                      	push rax
 27521 00013F01 6A01                    	push 1	; arg count
 27522 00013F03 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27523 00013F08 E81B180000              	call malloc
 27524 00013F0D 50                      	push rax
 27525 00013F0E BF18000000              	mov rdi, 8 * 3	; new rib
 27526 00013F13 E810180000              	call malloc
 27527 00013F18 50                      	push rax
 27528 00013F19 BF18000000              	mov rdi, 8 * 3	; extended env
 27529 00013F1E E805180000              	call malloc
 27530 00013F23 488B7D10                	mov rdi, ENV
 27531 00013F27 BE00000000              	mov rsi, 0
 27532 00013F2C BA01000000              	mov rdx, 1
 27533                                  .L_lambda_simple_env_loop_05d1:	; ext_env[i + 1] <-- env[i]
 27534 00013F31 4883FE02                	cmp rsi, 2
 27535 00013F35 7410                    	je .L_lambda_simple_env_end_05d1
 27536 00013F37 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27537 00013F3B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27538 00013F3F 48FFC6                  	inc rsi
 27539 00013F42 48FFC2                  	inc rdx
 27540 00013F45 EBEA                    	jmp .L_lambda_simple_env_loop_05d1
 27541                                  .L_lambda_simple_env_end_05d1:
 27542 00013F47 5B                      	pop rbx
 27543 00013F48 BE00000000              	mov rsi, 0
 27544                                  .L_lambda_simple_params_loop_05d1:	; copy params
 27545 00013F4D 4883FE03                	cmp rsi, 3
 27546 00013F51 740E                    	je .L_lambda_simple_params_end_05d1
 27547 00013F53 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27548 00013F58 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27549 00013F5C 48FFC6                  	inc rsi
 27550 00013F5F EBEC                    	jmp .L_lambda_simple_params_loop_05d1
 27551                                  .L_lambda_simple_params_end_05d1:
 27552 00013F61 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27553 00013F64 4889C3                  	mov rbx, rax
 27554 00013F67 58                      	pop rax
 27555 00013F68 C60004                  	mov byte [rax], T_closure
 27556 00013F6B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27557 00013F6F 48C74009[7C3F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05d1
 27558 00013F77 E9A0010000              	jmp .L_lambda_simple_end_05d1
 27559                                  .L_lambda_simple_code_05d1:	; lambda-simple body
 27560 00013F7C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27561 00013F82 740B                    	je .L_lambda_simple_arity_check_ok_05d1
 27562 00013F84 FF742410                	push qword [rsp + 8 * 2]
 27563 00013F88 6A01                    	push 1
 27564 00013F8A E952170000              	jmp L_error_incorrect_arity_simple
 27565                                  .L_lambda_simple_arity_check_ok_05d1:
 27566 00013F8F C8000000                	enter 0, 0
 27567 00013F93 488B4510                	mov rax, ENV
 27568 00013F97 488B00                  	mov rax, qword [rax + 8 * 0]
 27569 00013F9A 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27570 00013F9E 50                      	push rax
 27571 00013F9F 488B4510                	mov rax, ENV
 27572 00013FA3 488B00                  	mov rax, qword [rax + 8 * 0]
 27573 00013FA6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27574 00013FA9 50                      	push rax
 27575 00013FAA 6A02                    	push 2	; arg count
 27576 00013FAC 488B0425[62110000]      	mov rax, qword [free_var_54]	; free var vector-ref
 27577 00013FB4 803805                  	cmp byte [rax], T_undefined
 27578 00013FB7 0F843E160000            	je L_error_fvar_undefined
 27579 00013FBD 803804                  	cmp byte [rax], T_closure
 27580 00013FC0 0F85B9160000            	jne L_error_non_closure
 27581 00013FC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27582 00013FC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27583 00013FCC 50                      	push rax
 27584 00013FCD 488B4510                	mov rax, ENV
 27585 00013FD1 488B00                  	mov rax, qword [rax + 8 * 0]
 27586 00013FD4 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27587 00013FD8 50                      	push rax
 27588 00013FD9 488B4510                	mov rax, ENV
 27589 00013FDD 488B00                  	mov rax, qword [rax + 8 * 0]
 27590 00013FE0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27591 00013FE3 50                      	push rax
 27592 00013FE4 6A03                    	push 3	; arg count
 27593 00013FE6 488B0425[73110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 27594 00013FEE 803805                  	cmp byte [rax], T_undefined
 27595 00013FF1 0F8404160000            	je L_error_fvar_undefined
 27596 00013FF7 803804                  	cmp byte [rax], T_closure
 27597 00013FFA 0F857F160000            	jne L_error_non_closure
 27598 00014000 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27599 00014003 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27600                                  
 27601 00014006 488B4520                	mov rax, PARAM(0)	; param ch
 27602 0001400A 50                      	push rax
 27603 0001400B 488B4510                	mov rax, ENV
 27604 0001400F 488B00                  	mov rax, qword [rax + 8 * 0]
 27605 00014012 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27606 00014016 50                      	push rax
 27607 00014017 488B4510                	mov rax, ENV
 27608 0001401B 488B00                  	mov rax, qword [rax + 8 * 0]
 27609 0001401E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27610 00014021 50                      	push rax
 27611 00014022 6A03                    	push 3	; arg count
 27612 00014024 488B0425[73110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 27613 0001402C 803805                  	cmp byte [rax], T_undefined
 27614 0001402F 0F84C6150000            	je L_error_fvar_undefined
 27615 00014035 803804                  	cmp byte [rax], T_closure
 27616 00014038 0F8541160000            	jne L_error_non_closure
 27617 0001403E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27618 00014041 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27619                                  
 27620                                  	; preparing a tail-call
 27621 00014044 48B8-                   	mov rax, L_constants + 2158
 27621 00014046 [6E08000000000000] 
 27622 0001404E 50                      	push rax
 27623 0001404F 488B4510                	mov rax, ENV
 27624 00014053 488B00                  	mov rax, qword [rax + 8 * 0]
 27625 00014056 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 27626 0001405A 50                      	push rax
 27627 0001405B 6A02                    	push 2	; arg count
 27628 0001405D 488B0425[91150000]      	mov rax, qword [free_var_117]	; free var -
 27629 00014065 803805                  	cmp byte [rax], T_undefined
 27630 00014068 0F848D150000            	je L_error_fvar_undefined
 27631 0001406E 803804                  	cmp byte [rax], T_closure
 27632 00014071 0F8508160000            	jne L_error_non_closure
 27633 00014077 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27634 0001407A FF5009                  	call SOB_CLOSURE_CODE(rax)
 27635 0001407D 50                      	push rax
 27636 0001407E 48B8-                   	mov rax, L_constants + 2158
 27636 00014080 [6E08000000000000] 
 27637 00014088 50                      	push rax
 27638 00014089 488B4510                	mov rax, ENV
 27639 0001408D 488B00                  	mov rax, qword [rax + 8 * 0]
 27640 00014090 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 27641 00014094 50                      	push rax
 27642 00014095 6A02                    	push 2	; arg count
 27643 00014097 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 27644 0001409F 803805                  	cmp byte [rax], T_undefined
 27645 000140A2 0F8453150000            	je L_error_fvar_undefined
 27646 000140A8 803804                  	cmp byte [rax], T_closure
 27647 000140AB 0F85CE150000            	jne L_error_non_closure
 27648 000140B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27649 000140B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27650 000140B7 50                      	push rax
 27651 000140B8 488B4510                	mov rax, ENV
 27652 000140BC 488B00                  	mov rax, qword [rax + 8 * 0]
 27653 000140BF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27654 000140C2 50                      	push rax
 27655 000140C3 6A03                    	push 3	; arg count
 27656 000140C5 488B4510                	mov rax, ENV
 27657 000140C9 488B4008                	mov rax, qword [rax + 8 * 1]
 27658 000140CD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27659 000140D0 488B00                  	mov rax, qword [rax]
 27660 000140D3 803804                  	cmp byte [rax], T_closure
 27661 000140D6 0F85A3150000            	jne L_error_non_closure
 27662 000140DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 27663                                  
 27664                                  	; recycling the current frame
 27665 000140DF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27666 000140E2 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27667 000140E5 B907000000              	mov rcx, 3 + 4
 27668 000140EA 488B5D18                	mov rbx, COUNT
 27669 000140EE 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27670 000140F3 488D55F8                	lea rdx, [rbp - 8 * 1]
 27671                                  .L_tc_recycle_frame_loop_07a7:
 27672 000140F7 4883F900                	cmp rcx, 0
 27673 000140FB 7413                    	je .L_tc_recycle_frame_done_07a7
 27674 000140FD 488B32                  	mov rsi, qword [rdx]
 27675 00014100 488933                  	mov qword [rbx], rsi
 27676 00014103 48FFC9                  	dec rcx
 27677 00014106 4883EB08                	sub rbx, 8 * 1
 27678 0001410A 4883EA08                	sub rdx, 8 * 1
 27679 0001410E EBE7                    	jmp .L_tc_recycle_frame_loop_07a7
 27680                                  .L_tc_recycle_frame_done_07a7:
 27681 00014110 488D6308                	lea rsp, [rbx + 8 * 1]
 27682 00014114 5D                      	pop rbp	; the proc will restore it!
 27683 00014115 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27684 00014118 C9                      	leave
 27685 00014119 C21800                  	ret AND_KILL_FRAME(1)
 27686                                  .L_lambda_simple_end_05d1:	; new closure is in rax
 27687 0001411C 803804                  	cmp byte [rax], T_closure
 27688 0001411F 0F855A150000            	jne L_error_non_closure
 27689 00014125 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27690                                  
 27691                                  	; recycling the current frame
 27692 00014128 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27693 0001412B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27694 0001412E B905000000              	mov rcx, 1 + 4
 27695 00014133 488B5D18                	mov rbx, COUNT
 27696 00014137 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27697 0001413C 488D55F8                	lea rdx, [rbp - 8 * 1]
 27698                                  .L_tc_recycle_frame_loop_07a8:
 27699 00014140 4883F900                	cmp rcx, 0
 27700 00014144 7413                    	je .L_tc_recycle_frame_done_07a8
 27701 00014146 488B32                  	mov rsi, qword [rdx]
 27702 00014149 488933                  	mov qword [rbx], rsi
 27703 0001414C 48FFC9                  	dec rcx
 27704 0001414F 4883EB08                	sub rbx, 8 * 1
 27705 00014153 4883EA08                	sub rdx, 8 * 1
 27706 00014157 EBE7                    	jmp .L_tc_recycle_frame_loop_07a8
 27707                                  .L_tc_recycle_frame_done_07a8:
 27708 00014159 488D6308                	lea rsp, [rbx + 8 * 1]
 27709 0001415D 5D                      	pop rbp	; the proc will restore it!
 27710 0001415E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27711                                  
 27712 00014161 EB04                    	jmp .L_if_end_0451
 27713                                  
 27714                                  	.L_if_else_0451:
 27715 00014163 488B4520                	mov rax, PARAM(0)	; param vec
 27716                                  
 27717                                  	.L_if_end_0451:
 27718 00014167 C9                      	leave
 27719 00014168 C22800                  	ret AND_KILL_FRAME(3)
 27720                                  .L_lambda_simple_end_05d0:	; new closure is in rax
 27721                                  
 27722 0001416B 50                      	push rax
 27723 0001416C 488B4520                	mov rax, PARAM(0)	; param run
 27724                                  
 27725 00014170 8F00                    	pop qword[rax]
 27726 00014172 48B8-                   	mov rax, sob_void
 27726 00014174 [0000000000000000] 
 27727                                  
 27728 0001417C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27729 00014181 E8A2150000              	call malloc
 27730 00014186 50                      	push rax
 27731 00014187 BF08000000              	mov rdi, 8 * 1	; new rib
 27732 0001418C E897150000              	call malloc
 27733 00014191 50                      	push rax
 27734 00014192 BF10000000              	mov rdi, 8 * 2	; extended env
 27735 00014197 E88C150000              	call malloc
 27736 0001419C 488B7D10                	mov rdi, ENV
 27737 000141A0 BE00000000              	mov rsi, 0
 27738 000141A5 BA01000000              	mov rdx, 1
 27739                                  .L_lambda_simple_env_loop_05d2:	; ext_env[i + 1] <-- env[i]
 27740 000141AA 4883FE01                	cmp rsi, 1
 27741 000141AE 7410                    	je .L_lambda_simple_env_end_05d2
 27742 000141B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27743 000141B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27744 000141B8 48FFC6                  	inc rsi
 27745 000141BB 48FFC2                  	inc rdx
 27746 000141BE EBEA                    	jmp .L_lambda_simple_env_loop_05d2
 27747                                  .L_lambda_simple_env_end_05d2:
 27748 000141C0 5B                      	pop rbx
 27749 000141C1 BE00000000              	mov rsi, 0
 27750                                  .L_lambda_simple_params_loop_05d2:	; copy params
 27751 000141C6 4883FE01                	cmp rsi, 1
 27752 000141CA 740E                    	je .L_lambda_simple_params_end_05d2
 27753 000141CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27754 000141D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27755 000141D5 48FFC6                  	inc rsi
 27756 000141D8 EBEC                    	jmp .L_lambda_simple_params_loop_05d2
 27757                                  .L_lambda_simple_params_end_05d2:
 27758 000141DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27759 000141DD 4889C3                  	mov rbx, rax
 27760 000141E0 58                      	pop rax
 27761 000141E1 C60004                  	mov byte [rax], T_closure
 27762 000141E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27763 000141E8 48C74009[F5410100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05d2
 27764 000141F0 E9FA010000              	jmp .L_lambda_simple_end_05d2
 27765                                  .L_lambda_simple_code_05d2:	; lambda-simple body
 27766 000141F5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27767 000141FB 740B                    	je .L_lambda_simple_arity_check_ok_05d2
 27768 000141FD FF742410                	push qword [rsp + 8 * 2]
 27769 00014201 6A01                    	push 1
 27770 00014203 E9D9140000              	jmp L_error_incorrect_arity_simple
 27771                                  .L_lambda_simple_arity_check_ok_05d2:
 27772 00014208 C8000000                	enter 0, 0
 27773                                  	; preparing a tail-call
 27774 0001420C 488B4520                	mov rax, PARAM(0)	; param vec
 27775 00014210 50                      	push rax
 27776 00014211 6A01                    	push 1	; arg count
 27777 00014213 488B0425[0F0F0000]      	mov rax, qword [free_var_19]	; free var vector-length
 27778 0001421B 803805                  	cmp byte [rax], T_undefined
 27779 0001421E 0F84D7130000            	je L_error_fvar_undefined
 27780 00014224 803804                  	cmp byte [rax], T_closure
 27781 00014227 0F8552140000            	jne L_error_non_closure
 27782 0001422D FF7001                  	push SOB_CLOSURE_ENV(rax)
 27783 00014230 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27784 00014233 50                      	push rax
 27785 00014234 6A01                    	push 1	; arg count
 27786 00014236 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27787 0001423B E8E8140000              	call malloc
 27788 00014240 50                      	push rax
 27789 00014241 BF08000000              	mov rdi, 8 * 1	; new rib
 27790 00014246 E8DD140000              	call malloc
 27791 0001424B 50                      	push rax
 27792 0001424C BF18000000              	mov rdi, 8 * 3	; extended env
 27793 00014251 E8D2140000              	call malloc
 27794 00014256 488B7D10                	mov rdi, ENV
 27795 0001425A BE00000000              	mov rsi, 0
 27796 0001425F BA01000000              	mov rdx, 1
 27797                                  .L_lambda_simple_env_loop_05d3:	; ext_env[i + 1] <-- env[i]
 27798 00014264 4883FE02                	cmp rsi, 2
 27799 00014268 7410                    	je .L_lambda_simple_env_end_05d3
 27800 0001426A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27801 0001426E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27802 00014272 48FFC6                  	inc rsi
 27803 00014275 48FFC2                  	inc rdx
 27804 00014278 EBEA                    	jmp .L_lambda_simple_env_loop_05d3
 27805                                  .L_lambda_simple_env_end_05d3:
 27806 0001427A 5B                      	pop rbx
 27807 0001427B BE00000000              	mov rsi, 0
 27808                                  .L_lambda_simple_params_loop_05d3:	; copy params
 27809 00014280 4883FE01                	cmp rsi, 1
 27810 00014284 740E                    	je .L_lambda_simple_params_end_05d3
 27811 00014286 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27812 0001428B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27813 0001428F 48FFC6                  	inc rsi
 27814 00014292 EBEC                    	jmp .L_lambda_simple_params_loop_05d3
 27815                                  .L_lambda_simple_params_end_05d3:
 27816 00014294 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27817 00014297 4889C3                  	mov rbx, rax
 27818 0001429A 58                      	pop rax
 27819 0001429B C60004                  	mov byte [rax], T_closure
 27820 0001429E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27821 000142A2 48C74009[AF420100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05d3
 27822 000142AA E9F7000000              	jmp .L_lambda_simple_end_05d3
 27823                                  .L_lambda_simple_code_05d3:	; lambda-simple body
 27824 000142AF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27825 000142B5 740B                    	je .L_lambda_simple_arity_check_ok_05d3
 27826 000142B7 FF742410                	push qword [rsp + 8 * 2]
 27827 000142BB 6A01                    	push 1
 27828 000142BD E91F140000              	jmp L_error_incorrect_arity_simple
 27829                                  .L_lambda_simple_arity_check_ok_05d3:
 27830 000142C2 C8000000                	enter 0, 0
 27831 000142C6 488B4520                	mov rax, PARAM(0)	; param n
 27832 000142CA 50                      	push rax
 27833 000142CB 6A01                    	push 1	; arg count
 27834 000142CD 488B0425[970F0000]      	mov rax, qword [free_var_27]	; free var zero?
 27835 000142D5 803805                  	cmp byte [rax], T_undefined
 27836 000142D8 0F841D130000            	je L_error_fvar_undefined
 27837 000142DE 803804                  	cmp byte [rax], T_closure
 27838 000142E1 0F8598130000            	jne L_error_non_closure
 27839 000142E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27840 000142EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 27841                                  
 27842 000142ED 483D[02000000]          	cmp rax, sob_boolean_false
 27843 000142F3 740F                    	je .L_if_else_0452
 27844 000142F5 488B4510                	mov rax, ENV
 27845 000142F9 488B00                  	mov rax, qword [rax + 8 * 0]
 27846 000142FC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27847                                  
 27848 000142FF E99E000000              	jmp .L_if_end_0452
 27849                                  
 27850                                  	.L_if_else_0452:
 27851                                  	; preparing a tail-call
 27852 00014304 48B8-                   	mov rax, L_constants + 2158
 27852 00014306 [6E08000000000000] 
 27853 0001430E 50                      	push rax
 27854 0001430F 488B4520                	mov rax, PARAM(0)	; param n
 27855 00014313 50                      	push rax
 27856 00014314 6A02                    	push 2	; arg count
 27857 00014316 488B0425[91150000]      	mov rax, qword [free_var_117]	; free var -
 27858 0001431E 803805                  	cmp byte [rax], T_undefined
 27859 00014321 0F84D4120000            	je L_error_fvar_undefined
 27860 00014327 803804                  	cmp byte [rax], T_closure
 27861 0001432A 0F854F130000            	jne L_error_non_closure
 27862 00014330 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27863 00014333 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27864 00014336 50                      	push rax
 27865 00014337 48B8-                   	mov rax, L_constants + 2023
 27865 00014339 [E707000000000000] 
 27866 00014341 50                      	push rax
 27867 00014342 488B4510                	mov rax, ENV
 27868 00014346 488B00                  	mov rax, qword [rax + 8 * 0]
 27869 00014349 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 27870 0001434C 50                      	push rax
 27871 0001434D 6A03                    	push 3	; arg count
 27872 0001434F 488B4510                	mov rax, ENV
 27873 00014353 488B4008                	mov rax, qword [rax + 8 * 1]
 27874 00014357 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27875 0001435A 488B00                  	mov rax, qword [rax]
 27876 0001435D 803804                  	cmp byte [rax], T_closure
 27877 00014360 0F8519130000            	jne L_error_non_closure
 27878 00014366 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27879                                  
 27880                                  	; recycling the current frame
 27881 00014369 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27882 0001436C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27883 0001436F B907000000              	mov rcx, 3 + 4
 27884 00014374 488B5D18                	mov rbx, COUNT
 27885 00014378 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27886 0001437D 488D55F8                	lea rdx, [rbp - 8 * 1]
 27887                                  .L_tc_recycle_frame_loop_07a9:
 27888 00014381 4883F900                	cmp rcx, 0
 27889 00014385 7413                    	je .L_tc_recycle_frame_done_07a9
 27890 00014387 488B32                  	mov rsi, qword [rdx]
 27891 0001438A 488933                  	mov qword [rbx], rsi
 27892 0001438D 48FFC9                  	dec rcx
 27893 00014390 4883EB08                	sub rbx, 8 * 1
 27894 00014394 4883EA08                	sub rdx, 8 * 1
 27895 00014398 EBE7                    	jmp .L_tc_recycle_frame_loop_07a9
 27896                                  .L_tc_recycle_frame_done_07a9:
 27897 0001439A 488D6308                	lea rsp, [rbx + 8 * 1]
 27898 0001439E 5D                      	pop rbp	; the proc will restore it!
 27899 0001439F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27900                                  
 27901                                  	.L_if_end_0452:
 27902 000143A2 C9                      	leave
 27903 000143A3 C21800                  	ret AND_KILL_FRAME(1)
 27904                                  .L_lambda_simple_end_05d3:	; new closure is in rax
 27905 000143A6 803804                  	cmp byte [rax], T_closure
 27906 000143A9 0F85D0120000            	jne L_error_non_closure
 27907 000143AF FF7001                  	push SOB_CLOSURE_ENV(rax)
 27908                                  
 27909                                  	; recycling the current frame
 27910 000143B2 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 27911 000143B5 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 27912 000143B8 B905000000              	mov rcx, 1 + 4
 27913 000143BD 488B5D18                	mov rbx, COUNT
 27914 000143C1 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 27915 000143C6 488D55F8                	lea rdx, [rbp - 8 * 1]
 27916                                  .L_tc_recycle_frame_loop_07aa:
 27917 000143CA 4883F900                	cmp rcx, 0
 27918 000143CE 7413                    	je .L_tc_recycle_frame_done_07aa
 27919 000143D0 488B32                  	mov rsi, qword [rdx]
 27920 000143D3 488933                  	mov qword [rbx], rsi
 27921 000143D6 48FFC9                  	dec rcx
 27922 000143D9 4883EB08                	sub rbx, 8 * 1
 27923 000143DD 4883EA08                	sub rdx, 8 * 1
 27924 000143E1 EBE7                    	jmp .L_tc_recycle_frame_loop_07aa
 27925                                  .L_tc_recycle_frame_done_07aa:
 27926 000143E3 488D6308                	lea rsp, [rbx + 8 * 1]
 27927 000143E7 5D                      	pop rbp	; the proc will restore it!
 27928 000143E8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27929 000143EB C9                      	leave
 27930 000143EC C21800                  	ret AND_KILL_FRAME(1)
 27931                                  .L_lambda_simple_end_05d2:	; new closure is in rax
 27932 000143EF C9                      	leave
 27933 000143F0 C21800                  	ret AND_KILL_FRAME(1)
 27934                                  .L_lambda_simple_end_05cf:	; new closure is in rax
 27935 000143F3 803804                  	cmp byte [rax], T_closure
 27936 000143F6 0F8583120000            	jne L_error_non_closure
 27937 000143FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 27938 000143FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 27939 00014402 48890425[27190000]      	mov qword [free_var_171], rax
 27940 0001440A 48B8-                   	mov rax, sob_void
 27940 0001440C [0000000000000000] 
 27941                                  
 27942 00014414 4889C7                  	mov rdi, rax
 27943 00014417 E81E140000              	call print_sexpr_if_not_void
 27944                                  
 27945 0001441C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27946 00014421 E802130000              	call malloc
 27947 00014426 50                      	push rax
 27948 00014427 BF00000000              	mov rdi, 8 * 0	; new rib
 27949 0001442C E8F7120000              	call malloc
 27950 00014431 50                      	push rax
 27951 00014432 BF08000000              	mov rdi, 8 * 1	; extended env
 27952 00014437 E8EC120000              	call malloc
 27953 0001443C 488B7D10                	mov rdi, ENV
 27954 00014440 BE00000000              	mov rsi, 0
 27955 00014445 BA01000000              	mov rdx, 1
 27956                                  .L_lambda_simple_env_loop_05d4:	; ext_env[i + 1] <-- env[i]
 27957 0001444A 4883FE00                	cmp rsi, 0
 27958 0001444E 7410                    	je .L_lambda_simple_env_end_05d4
 27959 00014450 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27960 00014454 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27961 00014458 48FFC6                  	inc rsi
 27962 0001445B 48FFC2                  	inc rdx
 27963 0001445E EBEA                    	jmp .L_lambda_simple_env_loop_05d4
 27964                                  .L_lambda_simple_env_end_05d4:
 27965 00014460 5B                      	pop rbx
 27966 00014461 BE00000000              	mov rsi, 0
 27967                                  .L_lambda_simple_params_loop_05d4:	; copy params
 27968 00014466 4883FE00                	cmp rsi, 0
 27969 0001446A 740E                    	je .L_lambda_simple_params_end_05d4
 27970 0001446C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27971 00014471 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27972 00014475 48FFC6                  	inc rsi
 27973 00014478 EBEC                    	jmp .L_lambda_simple_params_loop_05d4
 27974                                  .L_lambda_simple_params_end_05d4:
 27975 0001447A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27976 0001447D 4889C3                  	mov rbx, rax
 27977 00014480 58                      	pop rax
 27978 00014481 C60004                  	mov byte [rax], T_closure
 27979 00014484 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27980 00014488 48C74009[95440100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05d4
 27981 00014490 E936030000              	jmp .L_lambda_simple_end_05d4
 27982                                  .L_lambda_simple_code_05d4:	; lambda-simple body
 27983 00014495 48837C241002            	cmp qword [rsp + 8 * 2], 2
 27984 0001449B 740B                    	je .L_lambda_simple_arity_check_ok_05d4
 27985 0001449D FF742410                	push qword [rsp + 8 * 2]
 27986 000144A1 6A02                    	push 2
 27987 000144A3 E939120000              	jmp L_error_incorrect_arity_simple
 27988                                  .L_lambda_simple_arity_check_ok_05d4:
 27989 000144A8 C8000000                	enter 0, 0
 27990                                  	; preparing a tail-call
 27991 000144AC 48B8-                   	mov rax, L_constants + 1881
 27991 000144AE [5907000000000000] 
 27992 000144B6 50                      	push rax
 27993 000144B7 6A01                    	push 1	; arg count
 27994 000144B9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27995 000144BE E865120000              	call malloc
 27996 000144C3 50                      	push rax
 27997 000144C4 BF10000000              	mov rdi, 8 * 2	; new rib
 27998 000144C9 E85A120000              	call malloc
 27999 000144CE 50                      	push rax
 28000 000144CF BF10000000              	mov rdi, 8 * 2	; extended env
 28001 000144D4 E84F120000              	call malloc
 28002 000144D9 488B7D10                	mov rdi, ENV
 28003 000144DD BE00000000              	mov rsi, 0
 28004 000144E2 BA01000000              	mov rdx, 1
 28005                                  .L_lambda_simple_env_loop_05d5:	; ext_env[i + 1] <-- env[i]
 28006 000144E7 4883FE01                	cmp rsi, 1
 28007 000144EB 7410                    	je .L_lambda_simple_env_end_05d5
 28008 000144ED 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28009 000144F1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28010 000144F5 48FFC6                  	inc rsi
 28011 000144F8 48FFC2                  	inc rdx
 28012 000144FB EBEA                    	jmp .L_lambda_simple_env_loop_05d5
 28013                                  .L_lambda_simple_env_end_05d5:
 28014 000144FD 5B                      	pop rbx
 28015 000144FE BE00000000              	mov rsi, 0
 28016                                  .L_lambda_simple_params_loop_05d5:	; copy params
 28017 00014503 4883FE02                	cmp rsi, 2
 28018 00014507 740E                    	je .L_lambda_simple_params_end_05d5
 28019 00014509 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28020 0001450E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28021 00014512 48FFC6                  	inc rsi
 28022 00014515 EBEC                    	jmp .L_lambda_simple_params_loop_05d5
 28023                                  .L_lambda_simple_params_end_05d5:
 28024 00014517 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28025 0001451A 4889C3                  	mov rbx, rax
 28026 0001451D 58                      	pop rax
 28027 0001451E C60004                  	mov byte [rax], T_closure
 28028 00014521 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28029 00014525 48C74009[32450100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05d5
 28030 0001452D E950020000              	jmp .L_lambda_simple_end_05d5
 28031                                  .L_lambda_simple_code_05d5:	; lambda-simple body
 28032 00014532 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28033 00014538 740B                    	je .L_lambda_simple_arity_check_ok_05d5
 28034 0001453A FF742410                	push qword [rsp + 8 * 2]
 28035 0001453E 6A01                    	push 1
 28036 00014540 E99C110000              	jmp L_error_incorrect_arity_simple
 28037                                  .L_lambda_simple_arity_check_ok_05d5:
 28038 00014545 C8000000                	enter 0, 0
 28039                                  
 28040 00014549 BF08000000              	mov rdi, 8
 28041 0001454E E8D5110000              	call malloc
 28042 00014553 488B5D20                	mov rbx, PARAM(0)	; param run
 28043 00014557 488918                  	mov [rax], rbx	; box run
 28044 0001455A 48894520                	mov PARAM(0), rax	;replace param run with box
 28045 0001455E 48B8-                   	mov rax, sob_void
 28045 00014560 [0000000000000000] 
 28046                                  
 28047 00014568 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28048 0001456D E8B6110000              	call malloc
 28049 00014572 50                      	push rax
 28050 00014573 BF08000000              	mov rdi, 8 * 1	; new rib
 28051 00014578 E8AB110000              	call malloc
 28052 0001457D 50                      	push rax
 28053 0001457E BF18000000              	mov rdi, 8 * 3	; extended env
 28054 00014583 E8A0110000              	call malloc
 28055 00014588 488B7D10                	mov rdi, ENV
 28056 0001458C BE00000000              	mov rsi, 0
 28057 00014591 BA01000000              	mov rdx, 1
 28058                                  .L_lambda_simple_env_loop_05d6:	; ext_env[i + 1] <-- env[i]
 28059 00014596 4883FE02                	cmp rsi, 2
 28060 0001459A 7410                    	je .L_lambda_simple_env_end_05d6
 28061 0001459C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28062 000145A0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28063 000145A4 48FFC6                  	inc rsi
 28064 000145A7 48FFC2                  	inc rdx
 28065 000145AA EBEA                    	jmp .L_lambda_simple_env_loop_05d6
 28066                                  .L_lambda_simple_env_end_05d6:
 28067 000145AC 5B                      	pop rbx
 28068 000145AD BE00000000              	mov rsi, 0
 28069                                  .L_lambda_simple_params_loop_05d6:	; copy params
 28070 000145B2 4883FE01                	cmp rsi, 1
 28071 000145B6 740E                    	je .L_lambda_simple_params_end_05d6
 28072 000145B8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28073 000145BD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28074 000145C1 48FFC6                  	inc rsi
 28075 000145C4 EBEC                    	jmp .L_lambda_simple_params_loop_05d6
 28076                                  .L_lambda_simple_params_end_05d6:
 28077 000145C6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28078 000145C9 4889C3                  	mov rbx, rax
 28079 000145CC 58                      	pop rax
 28080 000145CD C60004                  	mov byte [rax], T_closure
 28081 000145D0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28082 000145D4 48C74009[E1450100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05d6
 28083 000145DC E933010000              	jmp .L_lambda_simple_end_05d6
 28084                                  .L_lambda_simple_code_05d6:	; lambda-simple body
 28085 000145E1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28086 000145E7 740B                    	je .L_lambda_simple_arity_check_ok_05d6
 28087 000145E9 FF742410                	push qword [rsp + 8 * 2]
 28088 000145ED 6A01                    	push 1
 28089 000145EF E9ED100000              	jmp L_error_incorrect_arity_simple
 28090                                  .L_lambda_simple_arity_check_ok_05d6:
 28091 000145F4 C8000000                	enter 0, 0
 28092 000145F8 488B4510                	mov rax, ENV
 28093 000145FC 488B4008                	mov rax, qword [rax + 8 * 1]
 28094 00014600 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 28095 00014603 50                      	push rax
 28096 00014604 488B4520                	mov rax, PARAM(0)	; param i
 28097 00014608 50                      	push rax
 28098 00014609 6A02                    	push 2	; arg count
 28099 0001460B 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 28100 00014613 803805                  	cmp byte [rax], T_undefined
 28101 00014616 0F84DF0F0000            	je L_error_fvar_undefined
 28102 0001461C 803804                  	cmp byte [rax], T_closure
 28103 0001461F 0F855A100000            	jne L_error_non_closure
 28104 00014625 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28105 00014628 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28106                                  
 28107 0001462B 483D[02000000]          	cmp rax, sob_boolean_false
 28108 00014631 0F84CF000000            	je .L_if_else_0453
 28109                                  	; preparing a tail-call
 28110 00014637 48B8-                   	mov rax, L_constants + 2158
 28110 00014639 [6E08000000000000] 
 28111 00014641 50                      	push rax
 28112 00014642 488B4520                	mov rax, PARAM(0)	; param i
 28113 00014646 50                      	push rax
 28114 00014647 6A02                    	push 2	; arg count
 28115 00014649 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 28116 00014651 803805                  	cmp byte [rax], T_undefined
 28117 00014654 0F84A10F0000            	je L_error_fvar_undefined
 28118 0001465A 803804                  	cmp byte [rax], T_closure
 28119 0001465D 0F851C100000            	jne L_error_non_closure
 28120 00014663 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28121 00014666 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28122 00014669 50                      	push rax
 28123 0001466A 6A01                    	push 1	; arg count
 28124 0001466C 488B4510                	mov rax, ENV
 28125 00014670 488B00                  	mov rax, qword [rax + 8 * 0]
 28126 00014673 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28127 00014676 488B00                  	mov rax, qword [rax]
 28128 00014679 803804                  	cmp byte [rax], T_closure
 28129 0001467C 0F85FD0F0000            	jne L_error_non_closure
 28130 00014682 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28131 00014685 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28132 00014688 50                      	push rax
 28133 00014689 488B4520                	mov rax, PARAM(0)	; param i
 28134 0001468D 50                      	push rax
 28135 0001468E 6A01                    	push 1	; arg count
 28136 00014690 488B4510                	mov rax, ENV
 28137 00014694 488B4008                	mov rax, qword [rax + 8 * 1]
 28138 00014698 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 28139 0001469C 803804                  	cmp byte [rax], T_closure
 28140 0001469F 0F85DA0F0000            	jne L_error_non_closure
 28141 000146A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28142 000146A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28143 000146AB 50                      	push rax
 28144 000146AC 6A02                    	push 2	; arg count
 28145 000146AE 488B0425[A90E0000]      	mov rax, qword [free_var_13]	; free var cons
 28146 000146B6 803805                  	cmp byte [rax], T_undefined
 28147 000146B9 0F843C0F0000            	je L_error_fvar_undefined
 28148 000146BF 803804                  	cmp byte [rax], T_closure
 28149 000146C2 0F85B70F0000            	jne L_error_non_closure
 28150 000146C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28151                                  
 28152                                  	; recycling the current frame
 28153 000146CB FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28154 000146CE FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28155 000146D1 B906000000              	mov rcx, 2 + 4
 28156 000146D6 488B5D18                	mov rbx, COUNT
 28157 000146DA 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28158 000146DF 488D55F8                	lea rdx, [rbp - 8 * 1]
 28159                                  .L_tc_recycle_frame_loop_07ab:
 28160 000146E3 4883F900                	cmp rcx, 0
 28161 000146E7 7413                    	je .L_tc_recycle_frame_done_07ab
 28162 000146E9 488B32                  	mov rsi, qword [rdx]
 28163 000146EC 488933                  	mov qword [rbx], rsi
 28164 000146EF 48FFC9                  	dec rcx
 28165 000146F2 4883EB08                	sub rbx, 8 * 1
 28166 000146F6 4883EA08                	sub rdx, 8 * 1
 28167 000146FA EBE7                    	jmp .L_tc_recycle_frame_loop_07ab
 28168                                  .L_tc_recycle_frame_done_07ab:
 28169 000146FC 488D6308                	lea rsp, [rbx + 8 * 1]
 28170 00014700 5D                      	pop rbp	; the proc will restore it!
 28171 00014701 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28172                                  
 28173 00014704 EB0A                    	jmp .L_if_end_0453
 28174                                  
 28175                                  	.L_if_else_0453:
 28176 00014706 48B8-                   	mov rax, L_constants + 1
 28176 00014708 [0100000000000000] 
 28177                                  
 28178                                  	.L_if_end_0453:
 28179 00014710 C9                      	leave
 28180 00014711 C21800                  	ret AND_KILL_FRAME(1)
 28181                                  .L_lambda_simple_end_05d6:	; new closure is in rax
 28182                                  
 28183 00014714 50                      	push rax
 28184 00014715 488B4520                	mov rax, PARAM(0)	; param run
 28185                                  
 28186 00014719 8F00                    	pop qword[rax]
 28187 0001471B 48B8-                   	mov rax, sob_void
 28187 0001471D [0000000000000000] 
 28188                                  
 28189                                  	; preparing a tail-call
 28190 00014725 48B8-                   	mov rax, L_constants + 2023
 28190 00014727 [E707000000000000] 
 28191 0001472F 50                      	push rax
 28192 00014730 6A01                    	push 1	; arg count
 28193 00014732 488B4520                	mov rax, PARAM(0)	; param run
 28194 00014736 488B00                  	mov rax, qword [rax]
 28195 00014739 803804                  	cmp byte [rax], T_closure
 28196 0001473C 0F853D0F0000            	jne L_error_non_closure
 28197 00014742 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28198                                  
 28199                                  	; recycling the current frame
 28200 00014745 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28201 00014748 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28202 0001474B B905000000              	mov rcx, 1 + 4
 28203 00014750 488B5D18                	mov rbx, COUNT
 28204 00014754 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28205 00014759 488D55F8                	lea rdx, [rbp - 8 * 1]
 28206                                  .L_tc_recycle_frame_loop_07ac:
 28207 0001475D 4883F900                	cmp rcx, 0
 28208 00014761 7413                    	je .L_tc_recycle_frame_done_07ac
 28209 00014763 488B32                  	mov rsi, qword [rdx]
 28210 00014766 488933                  	mov qword [rbx], rsi
 28211 00014769 48FFC9                  	dec rcx
 28212 0001476C 4883EB08                	sub rbx, 8 * 1
 28213 00014770 4883EA08                	sub rdx, 8 * 1
 28214 00014774 EBE7                    	jmp .L_tc_recycle_frame_loop_07ac
 28215                                  .L_tc_recycle_frame_done_07ac:
 28216 00014776 488D6308                	lea rsp, [rbx + 8 * 1]
 28217 0001477A 5D                      	pop rbp	; the proc will restore it!
 28218 0001477B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28219 0001477E C9                      	leave
 28220 0001477F C21800                  	ret AND_KILL_FRAME(1)
 28221                                  .L_lambda_simple_end_05d5:	; new closure is in rax
 28222 00014782 803804                  	cmp byte [rax], T_closure
 28223 00014785 0F85F40E0000            	jne L_error_non_closure
 28224 0001478B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28225                                  
 28226                                  	; recycling the current frame
 28227 0001478E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28228 00014791 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28229 00014794 B905000000              	mov rcx, 1 + 4
 28230 00014799 488B5D18                	mov rbx, COUNT
 28231 0001479D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28232 000147A2 488D55F8                	lea rdx, [rbp - 8 * 1]
 28233                                  .L_tc_recycle_frame_loop_07ad:
 28234 000147A6 4883F900                	cmp rcx, 0
 28235 000147AA 7413                    	je .L_tc_recycle_frame_done_07ad
 28236 000147AC 488B32                  	mov rsi, qword [rdx]
 28237 000147AF 488933                  	mov qword [rbx], rsi
 28238 000147B2 48FFC9                  	dec rcx
 28239 000147B5 4883EB08                	sub rbx, 8 * 1
 28240 000147B9 4883EA08                	sub rdx, 8 * 1
 28241 000147BD EBE7                    	jmp .L_tc_recycle_frame_loop_07ad
 28242                                  .L_tc_recycle_frame_done_07ad:
 28243 000147BF 488D6308                	lea rsp, [rbx + 8 * 1]
 28244 000147C3 5D                      	pop rbp	; the proc will restore it!
 28245 000147C4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28246 000147C7 C9                      	leave
 28247 000147C8 C22000                  	ret AND_KILL_FRAME(2)
 28248                                  .L_lambda_simple_end_05d4:	; new closure is in rax
 28249 000147CB 48890425[38190000]      	mov qword [free_var_172], rax
 28250 000147D3 48B8-                   	mov rax, sob_void
 28250 000147D5 [0000000000000000] 
 28251                                  
 28252 000147DD 4889C7                  	mov rdi, rax
 28253 000147E0 E855100000              	call print_sexpr_if_not_void
 28254                                  
 28255 000147E5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28256 000147EA E8390F0000              	call malloc
 28257 000147EF 50                      	push rax
 28258 000147F0 BF00000000              	mov rdi, 8 * 0	; new rib
 28259 000147F5 E82E0F0000              	call malloc
 28260 000147FA 50                      	push rax
 28261 000147FB BF08000000              	mov rdi, 8 * 1	; extended env
 28262 00014800 E8230F0000              	call malloc
 28263 00014805 488B7D10                	mov rdi, ENV
 28264 00014809 BE00000000              	mov rsi, 0
 28265 0001480E BA01000000              	mov rdx, 1
 28266                                  .L_lambda_simple_env_loop_05d7:	; ext_env[i + 1] <-- env[i]
 28267 00014813 4883FE00                	cmp rsi, 0
 28268 00014817 7410                    	je .L_lambda_simple_env_end_05d7
 28269 00014819 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28270 0001481D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28271 00014821 48FFC6                  	inc rsi
 28272 00014824 48FFC2                  	inc rdx
 28273 00014827 EBEA                    	jmp .L_lambda_simple_env_loop_05d7
 28274                                  .L_lambda_simple_env_end_05d7:
 28275 00014829 5B                      	pop rbx
 28276 0001482A BE00000000              	mov rsi, 0
 28277                                  .L_lambda_simple_params_loop_05d7:	; copy params
 28278 0001482F 4883FE00                	cmp rsi, 0
 28279 00014833 740E                    	je .L_lambda_simple_params_end_05d7
 28280 00014835 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28281 0001483A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28282 0001483E 48FFC6                  	inc rsi
 28283 00014841 EBEC                    	jmp .L_lambda_simple_params_loop_05d7
 28284                                  .L_lambda_simple_params_end_05d7:
 28285 00014843 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28286 00014846 4889C3                  	mov rbx, rax
 28287 00014849 58                      	pop rax
 28288 0001484A C60004                  	mov byte [rax], T_closure
 28289 0001484D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28290 00014851 48C74009[5E480100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05d7
 28291 00014859 E94A040000              	jmp .L_lambda_simple_end_05d7
 28292                                  .L_lambda_simple_code_05d7:	; lambda-simple body
 28293 0001485E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 28294 00014864 740B                    	je .L_lambda_simple_arity_check_ok_05d7
 28295 00014866 FF742410                	push qword [rsp + 8 * 2]
 28296 0001486A 6A02                    	push 2
 28297 0001486C E9700E0000              	jmp L_error_incorrect_arity_simple
 28298                                  .L_lambda_simple_arity_check_ok_05d7:
 28299 00014871 C8000000                	enter 0, 0
 28300                                  	; preparing a tail-call
 28301 00014875 488B4520                	mov rax, PARAM(0)	; param n
 28302 00014879 50                      	push rax
 28303 0001487A 6A01                    	push 1	; arg count
 28304 0001487C 488B0425[A6110000]      	mov rax, qword [free_var_58]	; free var make-string
 28305 00014884 803805                  	cmp byte [rax], T_undefined
 28306 00014887 0F846E0D0000            	je L_error_fvar_undefined
 28307 0001488D 803804                  	cmp byte [rax], T_closure
 28308 00014890 0F85E90D0000            	jne L_error_non_closure
 28309 00014896 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28310 00014899 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28311 0001489C 50                      	push rax
 28312 0001489D 6A01                    	push 1	; arg count
 28313 0001489F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28314 000148A4 E87F0E0000              	call malloc
 28315 000148A9 50                      	push rax
 28316 000148AA BF10000000              	mov rdi, 8 * 2	; new rib
 28317 000148AF E8740E0000              	call malloc
 28318 000148B4 50                      	push rax
 28319 000148B5 BF10000000              	mov rdi, 8 * 2	; extended env
 28320 000148BA E8690E0000              	call malloc
 28321 000148BF 488B7D10                	mov rdi, ENV
 28322 000148C3 BE00000000              	mov rsi, 0
 28323 000148C8 BA01000000              	mov rdx, 1
 28324                                  .L_lambda_simple_env_loop_05d8:	; ext_env[i + 1] <-- env[i]
 28325 000148CD 4883FE01                	cmp rsi, 1
 28326 000148D1 7410                    	je .L_lambda_simple_env_end_05d8
 28327 000148D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28328 000148D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28329 000148DB 48FFC6                  	inc rsi
 28330 000148DE 48FFC2                  	inc rdx
 28331 000148E1 EBEA                    	jmp .L_lambda_simple_env_loop_05d8
 28332                                  .L_lambda_simple_env_end_05d8:
 28333 000148E3 5B                      	pop rbx
 28334 000148E4 BE00000000              	mov rsi, 0
 28335                                  .L_lambda_simple_params_loop_05d8:	; copy params
 28336 000148E9 4883FE02                	cmp rsi, 2
 28337 000148ED 740E                    	je .L_lambda_simple_params_end_05d8
 28338 000148EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28339 000148F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28340 000148F8 48FFC6                  	inc rsi
 28341 000148FB EBEC                    	jmp .L_lambda_simple_params_loop_05d8
 28342                                  .L_lambda_simple_params_end_05d8:
 28343 000148FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28344 00014900 4889C3                  	mov rbx, rax
 28345 00014903 58                      	pop rax
 28346 00014904 C60004                  	mov byte [rax], T_closure
 28347 00014907 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28348 0001490B 48C74009[18490100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05d8
 28349 00014913 E947030000              	jmp .L_lambda_simple_end_05d8
 28350                                  .L_lambda_simple_code_05d8:	; lambda-simple body
 28351 00014918 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28352 0001491E 740B                    	je .L_lambda_simple_arity_check_ok_05d8
 28353 00014920 FF742410                	push qword [rsp + 8 * 2]
 28354 00014924 6A01                    	push 1
 28355 00014926 E9B60D0000              	jmp L_error_incorrect_arity_simple
 28356                                  .L_lambda_simple_arity_check_ok_05d8:
 28357 0001492B C8000000                	enter 0, 0
 28358                                  	; preparing a tail-call
 28359 0001492F 48B8-                   	mov rax, L_constants + 1881
 28359 00014931 [5907000000000000] 
 28360 00014939 50                      	push rax
 28361 0001493A 6A01                    	push 1	; arg count
 28362 0001493C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28363 00014941 E8E20D0000              	call malloc
 28364 00014946 50                      	push rax
 28365 00014947 BF08000000              	mov rdi, 8 * 1	; new rib
 28366 0001494C E8D70D0000              	call malloc
 28367 00014951 50                      	push rax
 28368 00014952 BF18000000              	mov rdi, 8 * 3	; extended env
 28369 00014957 E8CC0D0000              	call malloc
 28370 0001495C 488B7D10                	mov rdi, ENV
 28371 00014960 BE00000000              	mov rsi, 0
 28372 00014965 BA01000000              	mov rdx, 1
 28373                                  .L_lambda_simple_env_loop_05d9:	; ext_env[i + 1] <-- env[i]
 28374 0001496A 4883FE02                	cmp rsi, 2
 28375 0001496E 7410                    	je .L_lambda_simple_env_end_05d9
 28376 00014970 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28377 00014974 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28378 00014978 48FFC6                  	inc rsi
 28379 0001497B 48FFC2                  	inc rdx
 28380 0001497E EBEA                    	jmp .L_lambda_simple_env_loop_05d9
 28381                                  .L_lambda_simple_env_end_05d9:
 28382 00014980 5B                      	pop rbx
 28383 00014981 BE00000000              	mov rsi, 0
 28384                                  .L_lambda_simple_params_loop_05d9:	; copy params
 28385 00014986 4883FE01                	cmp rsi, 1
 28386 0001498A 740E                    	je .L_lambda_simple_params_end_05d9
 28387 0001498C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28388 00014991 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28389 00014995 48FFC6                  	inc rsi
 28390 00014998 EBEC                    	jmp .L_lambda_simple_params_loop_05d9
 28391                                  .L_lambda_simple_params_end_05d9:
 28392 0001499A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28393 0001499D 4889C3                  	mov rbx, rax
 28394 000149A0 58                      	pop rax
 28395 000149A1 C60004                  	mov byte [rax], T_closure
 28396 000149A4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28397 000149A8 48C74009[B5490100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05d9
 28398 000149B0 E961020000              	jmp .L_lambda_simple_end_05d9
 28399                                  .L_lambda_simple_code_05d9:	; lambda-simple body
 28400 000149B5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28401 000149BB 740B                    	je .L_lambda_simple_arity_check_ok_05d9
 28402 000149BD FF742410                	push qword [rsp + 8 * 2]
 28403 000149C1 6A01                    	push 1
 28404 000149C3 E9190D0000              	jmp L_error_incorrect_arity_simple
 28405                                  .L_lambda_simple_arity_check_ok_05d9:
 28406 000149C8 C8000000                	enter 0, 0
 28407                                  
 28408 000149CC BF08000000              	mov rdi, 8
 28409 000149D1 E8520D0000              	call malloc
 28410 000149D6 488B5D20                	mov rbx, PARAM(0)	; param run
 28411 000149DA 488918                  	mov [rax], rbx	; box run
 28412 000149DD 48894520                	mov PARAM(0), rax	;replace param run with box
 28413 000149E1 48B8-                   	mov rax, sob_void
 28413 000149E3 [0000000000000000] 
 28414                                  
 28415 000149EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28416 000149F0 E8330D0000              	call malloc
 28417 000149F5 50                      	push rax
 28418 000149F6 BF08000000              	mov rdi, 8 * 1	; new rib
 28419 000149FB E8280D0000              	call malloc
 28420 00014A00 50                      	push rax
 28421 00014A01 BF20000000              	mov rdi, 8 * 4	; extended env
 28422 00014A06 E81D0D0000              	call malloc
 28423 00014A0B 488B7D10                	mov rdi, ENV
 28424 00014A0F BE00000000              	mov rsi, 0
 28425 00014A14 BA01000000              	mov rdx, 1
 28426                                  .L_lambda_simple_env_loop_05da:	; ext_env[i + 1] <-- env[i]
 28427 00014A19 4883FE03                	cmp rsi, 3
 28428 00014A1D 7410                    	je .L_lambda_simple_env_end_05da
 28429 00014A1F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28430 00014A23 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28431 00014A27 48FFC6                  	inc rsi
 28432 00014A2A 48FFC2                  	inc rdx
 28433 00014A2D EBEA                    	jmp .L_lambda_simple_env_loop_05da
 28434                                  .L_lambda_simple_env_end_05da:
 28435 00014A2F 5B                      	pop rbx
 28436 00014A30 BE00000000              	mov rsi, 0
 28437                                  .L_lambda_simple_params_loop_05da:	; copy params
 28438 00014A35 4883FE01                	cmp rsi, 1
 28439 00014A39 740E                    	je .L_lambda_simple_params_end_05da
 28440 00014A3B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28441 00014A40 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28442 00014A44 48FFC6                  	inc rsi
 28443 00014A47 EBEC                    	jmp .L_lambda_simple_params_loop_05da
 28444                                  .L_lambda_simple_params_end_05da:
 28445 00014A49 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28446 00014A4C 4889C3                  	mov rbx, rax
 28447 00014A4F 58                      	pop rax
 28448 00014A50 C60004                  	mov byte [rax], T_closure
 28449 00014A53 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28450 00014A57 48C74009[644A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05da
 28451 00014A5F E944010000              	jmp .L_lambda_simple_end_05da
 28452                                  .L_lambda_simple_code_05da:	; lambda-simple body
 28453 00014A64 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28454 00014A6A 740B                    	je .L_lambda_simple_arity_check_ok_05da
 28455 00014A6C FF742410                	push qword [rsp + 8 * 2]
 28456 00014A70 6A01                    	push 1
 28457 00014A72 E96A0C0000              	jmp L_error_incorrect_arity_simple
 28458                                  .L_lambda_simple_arity_check_ok_05da:
 28459 00014A77 C8000000                	enter 0, 0
 28460 00014A7B 488B4510                	mov rax, ENV
 28461 00014A7F 488B4010                	mov rax, qword [rax + 8 * 2]
 28462 00014A83 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 28463 00014A86 50                      	push rax
 28464 00014A87 488B4520                	mov rax, PARAM(0)	; param i
 28465 00014A8B 50                      	push rax
 28466 00014A8C 6A02                    	push 2	; arg count
 28467 00014A8E 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 28468 00014A96 803805                  	cmp byte [rax], T_undefined
 28469 00014A99 0F845C0B0000            	je L_error_fvar_undefined
 28470 00014A9F 803804                  	cmp byte [rax], T_closure
 28471 00014AA2 0F85D70B0000            	jne L_error_non_closure
 28472 00014AA8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28473 00014AAB FF5009                  	call SOB_CLOSURE_CODE(rax)
 28474                                  
 28475 00014AAE 483D[02000000]          	cmp rax, sob_boolean_false
 28476 00014AB4 0F84DF000000            	je .L_if_else_0454
 28477 00014ABA 488B4520                	mov rax, PARAM(0)	; param i
 28478 00014ABE 50                      	push rax
 28479 00014ABF 6A01                    	push 1	; arg count
 28480 00014AC1 488B4510                	mov rax, ENV
 28481 00014AC5 488B4010                	mov rax, qword [rax + 8 * 2]
 28482 00014AC9 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 28483 00014ACD 803804                  	cmp byte [rax], T_closure
 28484 00014AD0 0F85A90B0000            	jne L_error_non_closure
 28485 00014AD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28486 00014AD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28487 00014ADC 50                      	push rax
 28488 00014ADD 488B4520                	mov rax, PARAM(0)	; param i
 28489 00014AE1 50                      	push rax
 28490 00014AE2 488B4510                	mov rax, ENV
 28491 00014AE6 488B4008                	mov rax, qword [rax + 8 * 1]
 28492 00014AEA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28493 00014AED 50                      	push rax
 28494 00014AEE 6A03                    	push 3	; arg count
 28495 00014AF0 488B0425[84110000]      	mov rax, qword [free_var_56]	; free var string-set!
 28496 00014AF8 803805                  	cmp byte [rax], T_undefined
 28497 00014AFB 0F84FA0A0000            	je L_error_fvar_undefined
 28498 00014B01 803804                  	cmp byte [rax], T_closure
 28499 00014B04 0F85750B0000            	jne L_error_non_closure
 28500 00014B0A FF7001                  	push SOB_CLOSURE_ENV(rax)
 28501 00014B0D FF5009                  	call SOB_CLOSURE_CODE(rax)
 28502                                  
 28503                                  	; preparing a tail-call
 28504 00014B10 48B8-                   	mov rax, L_constants + 2158
 28504 00014B12 [6E08000000000000] 
 28505 00014B1A 50                      	push rax
 28506 00014B1B 488B4520                	mov rax, PARAM(0)	; param i
 28507 00014B1F 50                      	push rax
 28508 00014B20 6A02                    	push 2	; arg count
 28509 00014B22 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 28510 00014B2A 803805                  	cmp byte [rax], T_undefined
 28511 00014B2D 0F84C80A0000            	je L_error_fvar_undefined
 28512 00014B33 803804                  	cmp byte [rax], T_closure
 28513 00014B36 0F85430B0000            	jne L_error_non_closure
 28514 00014B3C FF7001                  	push SOB_CLOSURE_ENV(rax)
 28515 00014B3F FF5009                  	call SOB_CLOSURE_CODE(rax)
 28516 00014B42 50                      	push rax
 28517 00014B43 6A01                    	push 1	; arg count
 28518 00014B45 488B4510                	mov rax, ENV
 28519 00014B49 488B00                  	mov rax, qword [rax + 8 * 0]
 28520 00014B4C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28521 00014B4F 488B00                  	mov rax, qword [rax]
 28522 00014B52 803804                  	cmp byte [rax], T_closure
 28523 00014B55 0F85240B0000            	jne L_error_non_closure
 28524 00014B5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28525                                  
 28526                                  	; recycling the current frame
 28527 00014B5E FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28528 00014B61 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28529 00014B64 B905000000              	mov rcx, 1 + 4
 28530 00014B69 488B5D18                	mov rbx, COUNT
 28531 00014B6D 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28532 00014B72 488D55F8                	lea rdx, [rbp - 8 * 1]
 28533                                  .L_tc_recycle_frame_loop_07ae:
 28534 00014B76 4883F900                	cmp rcx, 0
 28535 00014B7A 7413                    	je .L_tc_recycle_frame_done_07ae
 28536 00014B7C 488B32                  	mov rsi, qword [rdx]
 28537 00014B7F 488933                  	mov qword [rbx], rsi
 28538 00014B82 48FFC9                  	dec rcx
 28539 00014B85 4883EB08                	sub rbx, 8 * 1
 28540 00014B89 4883EA08                	sub rdx, 8 * 1
 28541 00014B8D EBE7                    	jmp .L_tc_recycle_frame_loop_07ae
 28542                                  .L_tc_recycle_frame_done_07ae:
 28543 00014B8F 488D6308                	lea rsp, [rbx + 8 * 1]
 28544 00014B93 5D                      	pop rbp	; the proc will restore it!
 28545 00014B94 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28546                                  
 28547 00014B97 EB0B                    	jmp .L_if_end_0454
 28548                                  
 28549                                  	.L_if_else_0454:
 28550 00014B99 488B4510                	mov rax, ENV
 28551 00014B9D 488B4008                	mov rax, qword [rax + 8 * 1]
 28552 00014BA1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 28553                                  
 28554                                  	.L_if_end_0454:
 28555 00014BA4 C9                      	leave
 28556 00014BA5 C21800                  	ret AND_KILL_FRAME(1)
 28557                                  .L_lambda_simple_end_05da:	; new closure is in rax
 28558                                  
 28559 00014BA8 50                      	push rax
 28560 00014BA9 488B4520                	mov rax, PARAM(0)	; param run
 28561                                  
 28562 00014BAD 8F00                    	pop qword[rax]
 28563 00014BAF 48B8-                   	mov rax, sob_void
 28563 00014BB1 [0000000000000000] 
 28564                                  
 28565                                  	; preparing a tail-call
 28566 00014BB9 48B8-                   	mov rax, L_constants + 2023
 28566 00014BBB [E707000000000000] 
 28567 00014BC3 50                      	push rax
 28568 00014BC4 6A01                    	push 1	; arg count
 28569 00014BC6 488B4520                	mov rax, PARAM(0)	; param run
 28570 00014BCA 488B00                  	mov rax, qword [rax]
 28571 00014BCD 803804                  	cmp byte [rax], T_closure
 28572 00014BD0 0F85A90A0000            	jne L_error_non_closure
 28573 00014BD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28574                                  
 28575                                  	; recycling the current frame
 28576 00014BD9 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28577 00014BDC FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28578 00014BDF B905000000              	mov rcx, 1 + 4
 28579 00014BE4 488B5D18                	mov rbx, COUNT
 28580 00014BE8 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28581 00014BED 488D55F8                	lea rdx, [rbp - 8 * 1]
 28582                                  .L_tc_recycle_frame_loop_07af:
 28583 00014BF1 4883F900                	cmp rcx, 0
 28584 00014BF5 7413                    	je .L_tc_recycle_frame_done_07af
 28585 00014BF7 488B32                  	mov rsi, qword [rdx]
 28586 00014BFA 488933                  	mov qword [rbx], rsi
 28587 00014BFD 48FFC9                  	dec rcx
 28588 00014C00 4883EB08                	sub rbx, 8 * 1
 28589 00014C04 4883EA08                	sub rdx, 8 * 1
 28590 00014C08 EBE7                    	jmp .L_tc_recycle_frame_loop_07af
 28591                                  .L_tc_recycle_frame_done_07af:
 28592 00014C0A 488D6308                	lea rsp, [rbx + 8 * 1]
 28593 00014C0E 5D                      	pop rbp	; the proc will restore it!
 28594 00014C0F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28595 00014C12 C9                      	leave
 28596 00014C13 C21800                  	ret AND_KILL_FRAME(1)
 28597                                  .L_lambda_simple_end_05d9:	; new closure is in rax
 28598 00014C16 803804                  	cmp byte [rax], T_closure
 28599 00014C19 0F85600A0000            	jne L_error_non_closure
 28600 00014C1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 28601                                  
 28602                                  	; recycling the current frame
 28603 00014C22 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28604 00014C25 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28605 00014C28 B905000000              	mov rcx, 1 + 4
 28606 00014C2D 488B5D18                	mov rbx, COUNT
 28607 00014C31 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28608 00014C36 488D55F8                	lea rdx, [rbp - 8 * 1]
 28609                                  .L_tc_recycle_frame_loop_07b0:
 28610 00014C3A 4883F900                	cmp rcx, 0
 28611 00014C3E 7413                    	je .L_tc_recycle_frame_done_07b0
 28612 00014C40 488B32                  	mov rsi, qword [rdx]
 28613 00014C43 488933                  	mov qword [rbx], rsi
 28614 00014C46 48FFC9                  	dec rcx
 28615 00014C49 4883EB08                	sub rbx, 8 * 1
 28616 00014C4D 4883EA08                	sub rdx, 8 * 1
 28617 00014C51 EBE7                    	jmp .L_tc_recycle_frame_loop_07b0
 28618                                  .L_tc_recycle_frame_done_07b0:
 28619 00014C53 488D6308                	lea rsp, [rbx + 8 * 1]
 28620 00014C57 5D                      	pop rbp	; the proc will restore it!
 28621 00014C58 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28622 00014C5B C9                      	leave
 28623 00014C5C C21800                  	ret AND_KILL_FRAME(1)
 28624                                  .L_lambda_simple_end_05d8:	; new closure is in rax
 28625 00014C5F 803804                  	cmp byte [rax], T_closure
 28626 00014C62 0F85170A0000            	jne L_error_non_closure
 28627 00014C68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28628                                  
 28629                                  	; recycling the current frame
 28630 00014C6B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28631 00014C6E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28632 00014C71 B905000000              	mov rcx, 1 + 4
 28633 00014C76 488B5D18                	mov rbx, COUNT
 28634 00014C7A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28635 00014C7F 488D55F8                	lea rdx, [rbp - 8 * 1]
 28636                                  .L_tc_recycle_frame_loop_07b1:
 28637 00014C83 4883F900                	cmp rcx, 0
 28638 00014C87 7413                    	je .L_tc_recycle_frame_done_07b1
 28639 00014C89 488B32                  	mov rsi, qword [rdx]
 28640 00014C8C 488933                  	mov qword [rbx], rsi
 28641 00014C8F 48FFC9                  	dec rcx
 28642 00014C92 4883EB08                	sub rbx, 8 * 1
 28643 00014C96 4883EA08                	sub rdx, 8 * 1
 28644 00014C9A EBE7                    	jmp .L_tc_recycle_frame_loop_07b1
 28645                                  .L_tc_recycle_frame_done_07b1:
 28646 00014C9C 488D6308                	lea rsp, [rbx + 8 * 1]
 28647 00014CA0 5D                      	pop rbp	; the proc will restore it!
 28648 00014CA1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28649 00014CA4 C9                      	leave
 28650 00014CA5 C22000                  	ret AND_KILL_FRAME(2)
 28651                                  .L_lambda_simple_end_05d7:	; new closure is in rax
 28652 00014CA8 48890425[49190000]      	mov qword [free_var_173], rax
 28653 00014CB0 48B8-                   	mov rax, sob_void
 28653 00014CB2 [0000000000000000] 
 28654                                  
 28655 00014CBA 4889C7                  	mov rdi, rax
 28656 00014CBD E8780B0000              	call print_sexpr_if_not_void
 28657                                  
 28658 00014CC2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28659 00014CC7 E85C0A0000              	call malloc
 28660 00014CCC 50                      	push rax
 28661 00014CCD BF00000000              	mov rdi, 8 * 0	; new rib
 28662 00014CD2 E8510A0000              	call malloc
 28663 00014CD7 50                      	push rax
 28664 00014CD8 BF08000000              	mov rdi, 8 * 1	; extended env
 28665 00014CDD E8460A0000              	call malloc
 28666 00014CE2 488B7D10                	mov rdi, ENV
 28667 00014CE6 BE00000000              	mov rsi, 0
 28668 00014CEB BA01000000              	mov rdx, 1
 28669                                  .L_lambda_simple_env_loop_05db:	; ext_env[i + 1] <-- env[i]
 28670 00014CF0 4883FE00                	cmp rsi, 0
 28671 00014CF4 7410                    	je .L_lambda_simple_env_end_05db
 28672 00014CF6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28673 00014CFA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28674 00014CFE 48FFC6                  	inc rsi
 28675 00014D01 48FFC2                  	inc rdx
 28676 00014D04 EBEA                    	jmp .L_lambda_simple_env_loop_05db
 28677                                  .L_lambda_simple_env_end_05db:
 28678 00014D06 5B                      	pop rbx
 28679 00014D07 BE00000000              	mov rsi, 0
 28680                                  .L_lambda_simple_params_loop_05db:	; copy params
 28681 00014D0C 4883FE00                	cmp rsi, 0
 28682 00014D10 740E                    	je .L_lambda_simple_params_end_05db
 28683 00014D12 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28684 00014D17 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28685 00014D1B 48FFC6                  	inc rsi
 28686 00014D1E EBEC                    	jmp .L_lambda_simple_params_loop_05db
 28687                                  .L_lambda_simple_params_end_05db:
 28688 00014D20 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28689 00014D23 4889C3                  	mov rbx, rax
 28690 00014D26 58                      	pop rax
 28691 00014D27 C60004                  	mov byte [rax], T_closure
 28692 00014D2A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28693 00014D2E 48C74009[3B4D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05db
 28694 00014D36 E94A040000              	jmp .L_lambda_simple_end_05db
 28695                                  .L_lambda_simple_code_05db:	; lambda-simple body
 28696 00014D3B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 28697 00014D41 740B                    	je .L_lambda_simple_arity_check_ok_05db
 28698 00014D43 FF742410                	push qword [rsp + 8 * 2]
 28699 00014D47 6A02                    	push 2
 28700 00014D49 E993090000              	jmp L_error_incorrect_arity_simple
 28701                                  .L_lambda_simple_arity_check_ok_05db:
 28702 00014D4E C8000000                	enter 0, 0
 28703                                  	; preparing a tail-call
 28704 00014D52 488B4520                	mov rax, PARAM(0)	; param n
 28705 00014D56 50                      	push rax
 28706 00014D57 6A01                    	push 1	; arg count
 28707 00014D59 488B0425[95110000]      	mov rax, qword [free_var_57]	; free var make-vector
 28708 00014D61 803805                  	cmp byte [rax], T_undefined
 28709 00014D64 0F8491080000            	je L_error_fvar_undefined
 28710 00014D6A 803804                  	cmp byte [rax], T_closure
 28711 00014D6D 0F850C090000            	jne L_error_non_closure
 28712 00014D73 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28713 00014D76 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28714 00014D79 50                      	push rax
 28715 00014D7A 6A01                    	push 1	; arg count
 28716 00014D7C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28717 00014D81 E8A2090000              	call malloc
 28718 00014D86 50                      	push rax
 28719 00014D87 BF10000000              	mov rdi, 8 * 2	; new rib
 28720 00014D8C E897090000              	call malloc
 28721 00014D91 50                      	push rax
 28722 00014D92 BF10000000              	mov rdi, 8 * 2	; extended env
 28723 00014D97 E88C090000              	call malloc
 28724 00014D9C 488B7D10                	mov rdi, ENV
 28725 00014DA0 BE00000000              	mov rsi, 0
 28726 00014DA5 BA01000000              	mov rdx, 1
 28727                                  .L_lambda_simple_env_loop_05dc:	; ext_env[i + 1] <-- env[i]
 28728 00014DAA 4883FE01                	cmp rsi, 1
 28729 00014DAE 7410                    	je .L_lambda_simple_env_end_05dc
 28730 00014DB0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28731 00014DB4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28732 00014DB8 48FFC6                  	inc rsi
 28733 00014DBB 48FFC2                  	inc rdx
 28734 00014DBE EBEA                    	jmp .L_lambda_simple_env_loop_05dc
 28735                                  .L_lambda_simple_env_end_05dc:
 28736 00014DC0 5B                      	pop rbx
 28737 00014DC1 BE00000000              	mov rsi, 0
 28738                                  .L_lambda_simple_params_loop_05dc:	; copy params
 28739 00014DC6 4883FE02                	cmp rsi, 2
 28740 00014DCA 740E                    	je .L_lambda_simple_params_end_05dc
 28741 00014DCC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28742 00014DD1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28743 00014DD5 48FFC6                  	inc rsi
 28744 00014DD8 EBEC                    	jmp .L_lambda_simple_params_loop_05dc
 28745                                  .L_lambda_simple_params_end_05dc:
 28746 00014DDA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28747 00014DDD 4889C3                  	mov rbx, rax
 28748 00014DE0 58                      	pop rax
 28749 00014DE1 C60004                  	mov byte [rax], T_closure
 28750 00014DE4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28751 00014DE8 48C74009[F54D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05dc
 28752 00014DF0 E947030000              	jmp .L_lambda_simple_end_05dc
 28753                                  .L_lambda_simple_code_05dc:	; lambda-simple body
 28754 00014DF5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28755 00014DFB 740B                    	je .L_lambda_simple_arity_check_ok_05dc
 28756 00014DFD FF742410                	push qword [rsp + 8 * 2]
 28757 00014E01 6A01                    	push 1
 28758 00014E03 E9D9080000              	jmp L_error_incorrect_arity_simple
 28759                                  .L_lambda_simple_arity_check_ok_05dc:
 28760 00014E08 C8000000                	enter 0, 0
 28761                                  	; preparing a tail-call
 28762 00014E0C 48B8-                   	mov rax, L_constants + 1881
 28762 00014E0E [5907000000000000] 
 28763 00014E16 50                      	push rax
 28764 00014E17 6A01                    	push 1	; arg count
 28765 00014E19 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28766 00014E1E E805090000              	call malloc
 28767 00014E23 50                      	push rax
 28768 00014E24 BF08000000              	mov rdi, 8 * 1	; new rib
 28769 00014E29 E8FA080000              	call malloc
 28770 00014E2E 50                      	push rax
 28771 00014E2F BF18000000              	mov rdi, 8 * 3	; extended env
 28772 00014E34 E8EF080000              	call malloc
 28773 00014E39 488B7D10                	mov rdi, ENV
 28774 00014E3D BE00000000              	mov rsi, 0
 28775 00014E42 BA01000000              	mov rdx, 1
 28776                                  .L_lambda_simple_env_loop_05dd:	; ext_env[i + 1] <-- env[i]
 28777 00014E47 4883FE02                	cmp rsi, 2
 28778 00014E4B 7410                    	je .L_lambda_simple_env_end_05dd
 28779 00014E4D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28780 00014E51 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28781 00014E55 48FFC6                  	inc rsi
 28782 00014E58 48FFC2                  	inc rdx
 28783 00014E5B EBEA                    	jmp .L_lambda_simple_env_loop_05dd
 28784                                  .L_lambda_simple_env_end_05dd:
 28785 00014E5D 5B                      	pop rbx
 28786 00014E5E BE00000000              	mov rsi, 0
 28787                                  .L_lambda_simple_params_loop_05dd:	; copy params
 28788 00014E63 4883FE01                	cmp rsi, 1
 28789 00014E67 740E                    	je .L_lambda_simple_params_end_05dd
 28790 00014E69 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28791 00014E6E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28792 00014E72 48FFC6                  	inc rsi
 28793 00014E75 EBEC                    	jmp .L_lambda_simple_params_loop_05dd
 28794                                  .L_lambda_simple_params_end_05dd:
 28795 00014E77 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28796 00014E7A 4889C3                  	mov rbx, rax
 28797 00014E7D 58                      	pop rax
 28798 00014E7E C60004                  	mov byte [rax], T_closure
 28799 00014E81 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28800 00014E85 48C74009[924E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05dd
 28801 00014E8D E961020000              	jmp .L_lambda_simple_end_05dd
 28802                                  .L_lambda_simple_code_05dd:	; lambda-simple body
 28803 00014E92 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28804 00014E98 740B                    	je .L_lambda_simple_arity_check_ok_05dd
 28805 00014E9A FF742410                	push qword [rsp + 8 * 2]
 28806 00014E9E 6A01                    	push 1
 28807 00014EA0 E93C080000              	jmp L_error_incorrect_arity_simple
 28808                                  .L_lambda_simple_arity_check_ok_05dd:
 28809 00014EA5 C8000000                	enter 0, 0
 28810                                  
 28811 00014EA9 BF08000000              	mov rdi, 8
 28812 00014EAE E875080000              	call malloc
 28813 00014EB3 488B5D20                	mov rbx, PARAM(0)	; param run
 28814 00014EB7 488918                  	mov [rax], rbx	; box run
 28815 00014EBA 48894520                	mov PARAM(0), rax	;replace param run with box
 28816 00014EBE 48B8-                   	mov rax, sob_void
 28816 00014EC0 [0000000000000000] 
 28817                                  
 28818 00014EC8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28819 00014ECD E856080000              	call malloc
 28820 00014ED2 50                      	push rax
 28821 00014ED3 BF08000000              	mov rdi, 8 * 1	; new rib
 28822 00014ED8 E84B080000              	call malloc
 28823 00014EDD 50                      	push rax
 28824 00014EDE BF20000000              	mov rdi, 8 * 4	; extended env
 28825 00014EE3 E840080000              	call malloc
 28826 00014EE8 488B7D10                	mov rdi, ENV
 28827 00014EEC BE00000000              	mov rsi, 0
 28828 00014EF1 BA01000000              	mov rdx, 1
 28829                                  .L_lambda_simple_env_loop_05de:	; ext_env[i + 1] <-- env[i]
 28830 00014EF6 4883FE03                	cmp rsi, 3
 28831 00014EFA 7410                    	je .L_lambda_simple_env_end_05de
 28832 00014EFC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28833 00014F00 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28834 00014F04 48FFC6                  	inc rsi
 28835 00014F07 48FFC2                  	inc rdx
 28836 00014F0A EBEA                    	jmp .L_lambda_simple_env_loop_05de
 28837                                  .L_lambda_simple_env_end_05de:
 28838 00014F0C 5B                      	pop rbx
 28839 00014F0D BE00000000              	mov rsi, 0
 28840                                  .L_lambda_simple_params_loop_05de:	; copy params
 28841 00014F12 4883FE01                	cmp rsi, 1
 28842 00014F16 740E                    	je .L_lambda_simple_params_end_05de
 28843 00014F18 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28844 00014F1D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28845 00014F21 48FFC6                  	inc rsi
 28846 00014F24 EBEC                    	jmp .L_lambda_simple_params_loop_05de
 28847                                  .L_lambda_simple_params_end_05de:
 28848 00014F26 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28849 00014F29 4889C3                  	mov rbx, rax
 28850 00014F2C 58                      	pop rax
 28851 00014F2D C60004                  	mov byte [rax], T_closure
 28852 00014F30 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28853 00014F34 48C74009[414F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05de
 28854 00014F3C E944010000              	jmp .L_lambda_simple_end_05de
 28855                                  .L_lambda_simple_code_05de:	; lambda-simple body
 28856 00014F41 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28857 00014F47 740B                    	je .L_lambda_simple_arity_check_ok_05de
 28858 00014F49 FF742410                	push qword [rsp + 8 * 2]
 28859 00014F4D 6A01                    	push 1
 28860 00014F4F E98D070000              	jmp L_error_incorrect_arity_simple
 28861                                  .L_lambda_simple_arity_check_ok_05de:
 28862 00014F54 C8000000                	enter 0, 0
 28863 00014F58 488B4510                	mov rax, ENV
 28864 00014F5C 488B4010                	mov rax, qword [rax + 8 * 2]
 28865 00014F60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 28866 00014F63 50                      	push rax
 28867 00014F64 488B4520                	mov rax, PARAM(0)	; param i
 28868 00014F68 50                      	push rax
 28869 00014F69 6A02                    	push 2	; arg count
 28870 00014F6B 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 28871 00014F73 803805                  	cmp byte [rax], T_undefined
 28872 00014F76 0F847F060000            	je L_error_fvar_undefined
 28873 00014F7C 803804                  	cmp byte [rax], T_closure
 28874 00014F7F 0F85FA060000            	jne L_error_non_closure
 28875 00014F85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28876 00014F88 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28877                                  
 28878 00014F8B 483D[02000000]          	cmp rax, sob_boolean_false
 28879 00014F91 0F84DF000000            	je .L_if_else_0455
 28880 00014F97 488B4520                	mov rax, PARAM(0)	; param i
 28881 00014F9B 50                      	push rax
 28882 00014F9C 6A01                    	push 1	; arg count
 28883 00014F9E 488B4510                	mov rax, ENV
 28884 00014FA2 488B4010                	mov rax, qword [rax + 8 * 2]
 28885 00014FA6 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 28886 00014FAA 803804                  	cmp byte [rax], T_closure
 28887 00014FAD 0F85CC060000            	jne L_error_non_closure
 28888 00014FB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28889 00014FB6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28890 00014FB9 50                      	push rax
 28891 00014FBA 488B4520                	mov rax, PARAM(0)	; param i
 28892 00014FBE 50                      	push rax
 28893 00014FBF 488B4510                	mov rax, ENV
 28894 00014FC3 488B4008                	mov rax, qword [rax + 8 * 1]
 28895 00014FC7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28896 00014FCA 50                      	push rax
 28897 00014FCB 6A03                    	push 3	; arg count
 28898 00014FCD 488B0425[73110000]      	mov rax, qword [free_var_55]	; free var vector-set!
 28899 00014FD5 803805                  	cmp byte [rax], T_undefined
 28900 00014FD8 0F841D060000            	je L_error_fvar_undefined
 28901 00014FDE 803804                  	cmp byte [rax], T_closure
 28902 00014FE1 0F8598060000            	jne L_error_non_closure
 28903 00014FE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28904 00014FEA FF5009                  	call SOB_CLOSURE_CODE(rax)
 28905                                  
 28906                                  	; preparing a tail-call
 28907 00014FED 48B8-                   	mov rax, L_constants + 2158
 28907 00014FEF [6E08000000000000] 
 28908 00014FF7 50                      	push rax
 28909 00014FF8 488B4520                	mov rax, PARAM(0)	; param i
 28910 00014FFC 50                      	push rax
 28911 00014FFD 6A02                    	push 2	; arg count
 28912 00014FFF 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 28913 00015007 803805                  	cmp byte [rax], T_undefined
 28914 0001500A 0F84EB050000            	je L_error_fvar_undefined
 28915 00015010 803804                  	cmp byte [rax], T_closure
 28916 00015013 0F8566060000            	jne L_error_non_closure
 28917 00015019 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28918 0001501C FF5009                  	call SOB_CLOSURE_CODE(rax)
 28919 0001501F 50                      	push rax
 28920 00015020 6A01                    	push 1	; arg count
 28921 00015022 488B4510                	mov rax, ENV
 28922 00015026 488B00                  	mov rax, qword [rax + 8 * 0]
 28923 00015029 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28924 0001502C 488B00                  	mov rax, qword [rax]
 28925 0001502F 803804                  	cmp byte [rax], T_closure
 28926 00015032 0F8547060000            	jne L_error_non_closure
 28927 00015038 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28928                                  
 28929                                  	; recycling the current frame
 28930 0001503B FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28931 0001503E FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28932 00015041 B905000000              	mov rcx, 1 + 4
 28933 00015046 488B5D18                	mov rbx, COUNT
 28934 0001504A 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28935 0001504F 488D55F8                	lea rdx, [rbp - 8 * 1]
 28936                                  .L_tc_recycle_frame_loop_07b2:
 28937 00015053 4883F900                	cmp rcx, 0
 28938 00015057 7413                    	je .L_tc_recycle_frame_done_07b2
 28939 00015059 488B32                  	mov rsi, qword [rdx]
 28940 0001505C 488933                  	mov qword [rbx], rsi
 28941 0001505F 48FFC9                  	dec rcx
 28942 00015062 4883EB08                	sub rbx, 8 * 1
 28943 00015066 4883EA08                	sub rdx, 8 * 1
 28944 0001506A EBE7                    	jmp .L_tc_recycle_frame_loop_07b2
 28945                                  .L_tc_recycle_frame_done_07b2:
 28946 0001506C 488D6308                	lea rsp, [rbx + 8 * 1]
 28947 00015070 5D                      	pop rbp	; the proc will restore it!
 28948 00015071 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28949                                  
 28950 00015074 EB0B                    	jmp .L_if_end_0455
 28951                                  
 28952                                  	.L_if_else_0455:
 28953 00015076 488B4510                	mov rax, ENV
 28954 0001507A 488B4008                	mov rax, qword [rax + 8 * 1]
 28955 0001507E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 28956                                  
 28957                                  	.L_if_end_0455:
 28958 00015081 C9                      	leave
 28959 00015082 C21800                  	ret AND_KILL_FRAME(1)
 28960                                  .L_lambda_simple_end_05de:	; new closure is in rax
 28961                                  
 28962 00015085 50                      	push rax
 28963 00015086 488B4520                	mov rax, PARAM(0)	; param run
 28964                                  
 28965 0001508A 8F00                    	pop qword[rax]
 28966 0001508C 48B8-                   	mov rax, sob_void
 28966 0001508E [0000000000000000] 
 28967                                  
 28968                                  	; preparing a tail-call
 28969 00015096 48B8-                   	mov rax, L_constants + 2023
 28969 00015098 [E707000000000000] 
 28970 000150A0 50                      	push rax
 28971 000150A1 6A01                    	push 1	; arg count
 28972 000150A3 488B4520                	mov rax, PARAM(0)	; param run
 28973 000150A7 488B00                  	mov rax, qword [rax]
 28974 000150AA 803804                  	cmp byte [rax], T_closure
 28975 000150AD 0F85CC050000            	jne L_error_non_closure
 28976 000150B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28977                                  
 28978                                  	; recycling the current frame
 28979 000150B6 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 28980 000150B9 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 28981 000150BC B905000000              	mov rcx, 1 + 4
 28982 000150C1 488B5D18                	mov rbx, COUNT
 28983 000150C5 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 28984 000150CA 488D55F8                	lea rdx, [rbp - 8 * 1]
 28985                                  .L_tc_recycle_frame_loop_07b3:
 28986 000150CE 4883F900                	cmp rcx, 0
 28987 000150D2 7413                    	je .L_tc_recycle_frame_done_07b3
 28988 000150D4 488B32                  	mov rsi, qword [rdx]
 28989 000150D7 488933                  	mov qword [rbx], rsi
 28990 000150DA 48FFC9                  	dec rcx
 28991 000150DD 4883EB08                	sub rbx, 8 * 1
 28992 000150E1 4883EA08                	sub rdx, 8 * 1
 28993 000150E5 EBE7                    	jmp .L_tc_recycle_frame_loop_07b3
 28994                                  .L_tc_recycle_frame_done_07b3:
 28995 000150E7 488D6308                	lea rsp, [rbx + 8 * 1]
 28996 000150EB 5D                      	pop rbp	; the proc will restore it!
 28997 000150EC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28998 000150EF C9                      	leave
 28999 000150F0 C21800                  	ret AND_KILL_FRAME(1)
 29000                                  .L_lambda_simple_end_05dd:	; new closure is in rax
 29001 000150F3 803804                  	cmp byte [rax], T_closure
 29002 000150F6 0F8583050000            	jne L_error_non_closure
 29003 000150FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 29004                                  
 29005                                  	; recycling the current frame
 29006 000150FF FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29007 00015102 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29008 00015105 B905000000              	mov rcx, 1 + 4
 29009 0001510A 488B5D18                	mov rbx, COUNT
 29010 0001510E 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29011 00015113 488D55F8                	lea rdx, [rbp - 8 * 1]
 29012                                  .L_tc_recycle_frame_loop_07b4:
 29013 00015117 4883F900                	cmp rcx, 0
 29014 0001511B 7413                    	je .L_tc_recycle_frame_done_07b4
 29015 0001511D 488B32                  	mov rsi, qword [rdx]
 29016 00015120 488933                  	mov qword [rbx], rsi
 29017 00015123 48FFC9                  	dec rcx
 29018 00015126 4883EB08                	sub rbx, 8 * 1
 29019 0001512A 4883EA08                	sub rdx, 8 * 1
 29020 0001512E EBE7                    	jmp .L_tc_recycle_frame_loop_07b4
 29021                                  .L_tc_recycle_frame_done_07b4:
 29022 00015130 488D6308                	lea rsp, [rbx + 8 * 1]
 29023 00015134 5D                      	pop rbp	; the proc will restore it!
 29024 00015135 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29025 00015138 C9                      	leave
 29026 00015139 C21800                  	ret AND_KILL_FRAME(1)
 29027                                  .L_lambda_simple_end_05dc:	; new closure is in rax
 29028 0001513C 803804                  	cmp byte [rax], T_closure
 29029 0001513F 0F853A050000            	jne L_error_non_closure
 29030 00015145 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29031                                  
 29032                                  	; recycling the current frame
 29033 00015148 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29034 0001514B FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29035 0001514E B905000000              	mov rcx, 1 + 4
 29036 00015153 488B5D18                	mov rbx, COUNT
 29037 00015157 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29038 0001515C 488D55F8                	lea rdx, [rbp - 8 * 1]
 29039                                  .L_tc_recycle_frame_loop_07b5:
 29040 00015160 4883F900                	cmp rcx, 0
 29041 00015164 7413                    	je .L_tc_recycle_frame_done_07b5
 29042 00015166 488B32                  	mov rsi, qword [rdx]
 29043 00015169 488933                  	mov qword [rbx], rsi
 29044 0001516C 48FFC9                  	dec rcx
 29045 0001516F 4883EB08                	sub rbx, 8 * 1
 29046 00015173 4883EA08                	sub rdx, 8 * 1
 29047 00015177 EBE7                    	jmp .L_tc_recycle_frame_loop_07b5
 29048                                  .L_tc_recycle_frame_done_07b5:
 29049 00015179 488D6308                	lea rsp, [rbx + 8 * 1]
 29050 0001517D 5D                      	pop rbp	; the proc will restore it!
 29051 0001517E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29052 00015181 C9                      	leave
 29053 00015182 C22000                  	ret AND_KILL_FRAME(2)
 29054                                  .L_lambda_simple_end_05db:	; new closure is in rax
 29055 00015185 48890425[5A190000]      	mov qword [free_var_174], rax
 29056 0001518D 48B8-                   	mov rax, sob_void
 29056 0001518F [0000000000000000] 
 29057                                  
 29058 00015197 4889C7                  	mov rdi, rax
 29059 0001519A E89B060000              	call print_sexpr_if_not_void
 29060                                  
 29061 0001519F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29062 000151A4 E87F050000              	call malloc
 29063 000151A9 50                      	push rax
 29064 000151AA BF00000000              	mov rdi, 8 * 0	; new rib
 29065 000151AF E874050000              	call malloc
 29066 000151B4 50                      	push rax
 29067 000151B5 BF08000000              	mov rdi, 8 * 1	; extended env
 29068 000151BA E869050000              	call malloc
 29069 000151BF 488B7D10                	mov rdi, ENV
 29070 000151C3 BE00000000              	mov rsi, 0
 29071 000151C8 BA01000000              	mov rdx, 1
 29072                                  .L_lambda_simple_env_loop_05df:	; ext_env[i + 1] <-- env[i]
 29073 000151CD 4883FE00                	cmp rsi, 0
 29074 000151D1 7410                    	je .L_lambda_simple_env_end_05df
 29075 000151D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29076 000151D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29077 000151DB 48FFC6                  	inc rsi
 29078 000151DE 48FFC2                  	inc rdx
 29079 000151E1 EBEA                    	jmp .L_lambda_simple_env_loop_05df
 29080                                  .L_lambda_simple_env_end_05df:
 29081 000151E3 5B                      	pop rbx
 29082 000151E4 BE00000000              	mov rsi, 0
 29083                                  .L_lambda_simple_params_loop_05df:	; copy params
 29084 000151E9 4883FE00                	cmp rsi, 0
 29085 000151ED 740E                    	je .L_lambda_simple_params_end_05df
 29086 000151EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29087 000151F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29088 000151F8 48FFC6                  	inc rsi
 29089 000151FB EBEC                    	jmp .L_lambda_simple_params_loop_05df
 29090                                  .L_lambda_simple_params_end_05df:
 29091 000151FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29092 00015200 4889C3                  	mov rbx, rax
 29093 00015203 58                      	pop rax
 29094 00015204 C60004                  	mov byte [rax], T_closure
 29095 00015207 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29096 0001520B 48C74009[18520100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05df
 29097 00015213 E959020000              	jmp .L_lambda_simple_end_05df
 29098                                  .L_lambda_simple_code_05df:	; lambda-simple body
 29099 00015218 48837C241003            	cmp qword [rsp + 8 * 2], 3
 29100 0001521E 740B                    	je .L_lambda_simple_arity_check_ok_05df
 29101 00015220 FF742410                	push qword [rsp + 8 * 2]
 29102 00015224 6A03                    	push 3
 29103 00015226 E9B6040000              	jmp L_error_incorrect_arity_simple
 29104                                  .L_lambda_simple_arity_check_ok_05df:
 29105 0001522B C8000000                	enter 0, 0
 29106 0001522F 488B4530                	mov rax, PARAM(2)	; param n
 29107 00015233 50                      	push rax
 29108 00015234 6A01                    	push 1	; arg count
 29109 00015236 488B0425[970F0000]      	mov rax, qword [free_var_27]	; free var zero?
 29110 0001523E 803805                  	cmp byte [rax], T_undefined
 29111 00015241 0F84B4030000            	je L_error_fvar_undefined
 29112 00015247 803804                  	cmp byte [rax], T_closure
 29113 0001524A 0F852F040000            	jne L_error_non_closure
 29114 00015250 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29115 00015253 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29116                                  
 29117 00015256 483D[02000000]          	cmp rax, sob_boolean_false
 29118 0001525C 740F                    	je .L_if_else_0456
 29119 0001525E 48B8-                   	mov rax, L_constants + 3469
 29119 00015260 [8D0D000000000000] 
 29120                                  
 29121 00015268 E900020000              	jmp .L_if_end_0456
 29122                                  
 29123                                  	.L_if_else_0456:
 29124 0001526D 488B4528                	mov rax, PARAM(1)	; param b
 29125 00015271 50                      	push rax
 29126 00015272 488B4520                	mov rax, PARAM(0)	; param a
 29127 00015276 50                      	push rax
 29128 00015277 6A02                    	push 2	; arg count
 29129 00015279 488B0425[E6150000]      	mov rax, qword [free_var_122]	; free var <
 29130 00015281 803805                  	cmp byte [rax], T_undefined
 29131 00015284 0F8471030000            	je L_error_fvar_undefined
 29132 0001528A 803804                  	cmp byte [rax], T_closure
 29133 0001528D 0F85EC030000            	jne L_error_non_closure
 29134 00015293 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29135 00015296 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29136                                  
 29137 00015299 483D[02000000]          	cmp rax, sob_boolean_false
 29138 0001529F 0F84C2000000            	je .L_if_else_0457
 29139                                  	; preparing a tail-call
 29140 000152A5 488B4530                	mov rax, PARAM(2)	; param n
 29141 000152A9 50                      	push rax
 29142 000152AA 488B4520                	mov rax, PARAM(0)	; param a
 29143 000152AE 50                      	push rax
 29144 000152AF 488B4528                	mov rax, PARAM(1)	; param b
 29145 000152B3 50                      	push rax
 29146 000152B4 6A02                    	push 2	; arg count
 29147 000152B6 488B0425[C4150000]      	mov rax, qword [free_var_120]	; free var /
 29148 000152BE 803805                  	cmp byte [rax], T_undefined
 29149 000152C1 0F8434030000            	je L_error_fvar_undefined
 29150 000152C7 803804                  	cmp byte [rax], T_closure
 29151 000152CA 0F85AF030000            	jne L_error_non_closure
 29152 000152D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29153 000152D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29154 000152D6 50                      	push rax
 29155 000152D7 488B4520                	mov rax, PARAM(0)	; param a
 29156 000152DB 50                      	push rax
 29157 000152DC 6A03                    	push 3	; arg count
 29158 000152DE 488B0425[6B190000]      	mov rax, qword [free_var_175]	; free var logarithm
 29159 000152E6 803805                  	cmp byte [rax], T_undefined
 29160 000152E9 0F840C030000            	je L_error_fvar_undefined
 29161 000152EF 803804                  	cmp byte [rax], T_closure
 29162 000152F2 0F8587030000            	jne L_error_non_closure
 29163 000152F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29164 000152FB FF5009                  	call SOB_CLOSURE_CODE(rax)
 29165 000152FE 50                      	push rax
 29166 000152FF 48B8-                   	mov rax, L_constants + 3469
 29166 00015301 [8D0D000000000000] 
 29167 00015309 50                      	push rax
 29168 0001530A 6A02                    	push 2	; arg count
 29169 0001530C 488B0425[6F150000]      	mov rax, qword [free_var_115]	; free var +
 29170 00015314 803805                  	cmp byte [rax], T_undefined
 29171 00015317 0F84DE020000            	je L_error_fvar_undefined
 29172 0001531D 803804                  	cmp byte [rax], T_closure
 29173 00015320 0F8559030000            	jne L_error_non_closure
 29174 00015326 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29175                                  
 29176                                  	; recycling the current frame
 29177 00015329 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29178 0001532C FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29179 0001532F B906000000              	mov rcx, 2 + 4
 29180 00015334 488B5D18                	mov rbx, COUNT
 29181 00015338 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29182 0001533D 488D55F8                	lea rdx, [rbp - 8 * 1]
 29183                                  .L_tc_recycle_frame_loop_07b6:
 29184 00015341 4883F900                	cmp rcx, 0
 29185 00015345 7413                    	je .L_tc_recycle_frame_done_07b6
 29186 00015347 488B32                  	mov rsi, qword [rdx]
 29187 0001534A 488933                  	mov qword [rbx], rsi
 29188 0001534D 48FFC9                  	dec rcx
 29189 00015350 4883EB08                	sub rbx, 8 * 1
 29190 00015354 4883EA08                	sub rdx, 8 * 1
 29191 00015358 EBE7                    	jmp .L_tc_recycle_frame_loop_07b6
 29192                                  .L_tc_recycle_frame_done_07b6:
 29193 0001535A 488D6308                	lea rsp, [rbx + 8 * 1]
 29194 0001535E 5D                      	pop rbp	; the proc will restore it!
 29195 0001535F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29196                                  
 29197 00015362 E906010000              	jmp .L_if_end_0457
 29198                                  
 29199                                  	.L_if_else_0457:
 29200 00015367 488B4528                	mov rax, PARAM(1)	; param b
 29201 0001536B 50                      	push rax
 29202 0001536C 488B4520                	mov rax, PARAM(0)	; param a
 29203 00015370 50                      	push rax
 29204 00015371 6A02                    	push 2	; arg count
 29205 00015373 488B0425[2A160000]      	mov rax, qword [free_var_126]	; free var =
 29206 0001537B 803805                  	cmp byte [rax], T_undefined
 29207 0001537E 0F8477020000            	je L_error_fvar_undefined
 29208 00015384 803804                  	cmp byte [rax], T_closure
 29209 00015387 0F85F2020000            	jne L_error_non_closure
 29210 0001538D FF7001                  	push SOB_CLOSURE_ENV(rax)
 29211 00015390 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29212                                  
 29213 00015393 483D[02000000]          	cmp rax, sob_boolean_false
 29214 00015399 740F                    	je .L_if_else_0458
 29215 0001539B 48B8-                   	mov rax, L_constants + 3469
 29215 0001539D [8D0D000000000000] 
 29216                                  
 29217 000153A5 E9C3000000              	jmp .L_if_end_0458
 29218                                  
 29219                                  	.L_if_else_0458:
 29220                                  	; preparing a tail-call
 29221 000153AA 48B8-                   	mov rax, L_constants + 2158
 29221 000153AC [6E08000000000000] 
 29222 000153B4 50                      	push rax
 29223 000153B5 488B4530                	mov rax, PARAM(2)	; param n
 29224 000153B9 50                      	push rax
 29225 000153BA 6A02                    	push 2	; arg count
 29226 000153BC 488B0425[91150000]      	mov rax, qword [free_var_117]	; free var -
 29227 000153C4 803805                  	cmp byte [rax], T_undefined
 29228 000153C7 0F842E020000            	je L_error_fvar_undefined
 29229 000153CD 803804                  	cmp byte [rax], T_closure
 29230 000153D0 0F85A9020000            	jne L_error_non_closure
 29231 000153D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29232 000153D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29233 000153DC 50                      	push rax
 29234 000153DD 488B4520                	mov rax, PARAM(0)	; param a
 29235 000153E1 50                      	push rax
 29236 000153E2 488B4528                	mov rax, PARAM(1)	; param b
 29237 000153E6 50                      	push rax
 29238 000153E7 6A03                    	push 3	; arg count
 29239 000153E9 488B0425[6B190000]      	mov rax, qword [free_var_175]	; free var logarithm
 29240 000153F1 803805                  	cmp byte [rax], T_undefined
 29241 000153F4 0F8401020000            	je L_error_fvar_undefined
 29242 000153FA 803804                  	cmp byte [rax], T_closure
 29243 000153FD 0F857C020000            	jne L_error_non_closure
 29244 00015403 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29245 00015406 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29246 00015409 50                      	push rax
 29247 0001540A 48B8-                   	mov rax, L_constants + 3469
 29247 0001540C [8D0D000000000000] 
 29248 00015414 50                      	push rax
 29249 00015415 6A02                    	push 2	; arg count
 29250 00015417 488B0425[C4150000]      	mov rax, qword [free_var_120]	; free var /
 29251 0001541F 803805                  	cmp byte [rax], T_undefined
 29252 00015422 0F84D3010000            	je L_error_fvar_undefined
 29253 00015428 803804                  	cmp byte [rax], T_closure
 29254 0001542B 0F854E020000            	jne L_error_non_closure
 29255 00015431 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29256                                  
 29257                                  	; recycling the current frame
 29258 00015434 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29259 00015437 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29260 0001543A B906000000              	mov rcx, 2 + 4
 29261 0001543F 488B5D18                	mov rbx, COUNT
 29262 00015443 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29263 00015448 488D55F8                	lea rdx, [rbp - 8 * 1]
 29264                                  .L_tc_recycle_frame_loop_07b7:
 29265 0001544C 4883F900                	cmp rcx, 0
 29266 00015450 7413                    	je .L_tc_recycle_frame_done_07b7
 29267 00015452 488B32                  	mov rsi, qword [rdx]
 29268 00015455 488933                  	mov qword [rbx], rsi
 29269 00015458 48FFC9                  	dec rcx
 29270 0001545B 4883EB08                	sub rbx, 8 * 1
 29271 0001545F 4883EA08                	sub rdx, 8 * 1
 29272 00015463 EBE7                    	jmp .L_tc_recycle_frame_loop_07b7
 29273                                  .L_tc_recycle_frame_done_07b7:
 29274 00015465 488D6308                	lea rsp, [rbx + 8 * 1]
 29275 00015469 5D                      	pop rbp	; the proc will restore it!
 29276 0001546A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29277                                  
 29278                                  	.L_if_end_0458:
 29279                                  
 29280                                  	.L_if_end_0457:
 29281                                  
 29282                                  	.L_if_end_0456:
 29283 0001546D C9                      	leave
 29284 0001546E C22800                  	ret AND_KILL_FRAME(3)
 29285                                  .L_lambda_simple_end_05df:	; new closure is in rax
 29286 00015471 48890425[6B190000]      	mov qword [free_var_175], rax
 29287 00015479 48B8-                   	mov rax, sob_void
 29287 0001547B [0000000000000000] 
 29288                                  
 29289 00015483 4889C7                  	mov rdi, rax
 29290 00015486 E8AF030000              	call print_sexpr_if_not_void
 29291                                  
 29292 0001548B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29293 00015490 E893020000              	call malloc
 29294 00015495 50                      	push rax
 29295 00015496 BF00000000              	mov rdi, 8 * 0	; new rib
 29296 0001549B E888020000              	call malloc
 29297 000154A0 50                      	push rax
 29298 000154A1 BF08000000              	mov rdi, 8 * 1	; extended env
 29299 000154A6 E87D020000              	call malloc
 29300 000154AB 488B7D10                	mov rdi, ENV
 29301 000154AF BE00000000              	mov rsi, 0
 29302 000154B4 BA01000000              	mov rdx, 1
 29303                                  .L_lambda_simple_env_loop_05e0:	; ext_env[i + 1] <-- env[i]
 29304 000154B9 4883FE00                	cmp rsi, 0
 29305 000154BD 7410                    	je .L_lambda_simple_env_end_05e0
 29306 000154BF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29307 000154C3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29308 000154C7 48FFC6                  	inc rsi
 29309 000154CA 48FFC2                  	inc rdx
 29310 000154CD EBEA                    	jmp .L_lambda_simple_env_loop_05e0
 29311                                  .L_lambda_simple_env_end_05e0:
 29312 000154CF 5B                      	pop rbx
 29313 000154D0 BE00000000              	mov rsi, 0
 29314                                  .L_lambda_simple_params_loop_05e0:	; copy params
 29315 000154D5 4883FE00                	cmp rsi, 0
 29316 000154D9 740E                    	je .L_lambda_simple_params_end_05e0
 29317 000154DB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29318 000154E0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29319 000154E4 48FFC6                  	inc rsi
 29320 000154E7 EBEC                    	jmp .L_lambda_simple_params_loop_05e0
 29321                                  .L_lambda_simple_params_end_05e0:
 29322 000154E9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29323 000154EC 4889C3                  	mov rbx, rax
 29324 000154EF 58                      	pop rax
 29325 000154F0 C60004                  	mov byte [rax], T_closure
 29326 000154F3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29327 000154F7 48C74009[04550100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_05e0
 29328 000154FF E97E000000              	jmp .L_lambda_simple_end_05e0
 29329                                  .L_lambda_simple_code_05e0:	; lambda-simple body
 29330 00015504 48837C241000            	cmp qword [rsp + 8 * 2], 0
 29331 0001550A 740B                    	je .L_lambda_simple_arity_check_ok_05e0
 29332 0001550C FF742410                	push qword [rsp + 8 * 2]
 29333 00015510 6A00                    	push 0
 29334 00015512 E9CA010000              	jmp L_error_incorrect_arity_simple
 29335                                  .L_lambda_simple_arity_check_ok_05e0:
 29336 00015517 C8000000                	enter 0, 0
 29337                                  	; preparing a tail-call
 29338 0001551B 48B8-                   	mov rax, L_constants + 3494
 29338 0001551D [A60D000000000000] 
 29339 00015525 50                      	push rax
 29340 00015526 6A01                    	push 1	; arg count
 29341 00015528 488B0425[CB0E0000]      	mov rax, qword [free_var_15]	; free var write-char
 29342 00015530 803805                  	cmp byte [rax], T_undefined
 29343 00015533 0F84C2000000            	je L_error_fvar_undefined
 29344 00015539 803804                  	cmp byte [rax], T_closure
 29345 0001553C 0F853D010000            	jne L_error_non_closure
 29346 00015542 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29347                                  
 29348                                  	; recycling the current frame
 29349 00015545 FF7508                  	push qword [rbp + 8 * 1]	; preserve old return address
 29350 00015548 FF7500                  	push qword [rbp + 8 * 0]	; preserve old frame-pointer
 29351 0001554B B905000000              	mov rcx, 1 + 4
 29352 00015550 488B5D18                	mov rbx, COUNT
 29353 00015554 488D5CDD18              	lea rbx, [rbp + 8 * rbx + 8 * 3]
 29354 00015559 488D55F8                	lea rdx, [rbp - 8 * 1]
 29355                                  .L_tc_recycle_frame_loop_07b8:
 29356 0001555D 4883F900                	cmp rcx, 0
 29357 00015561 7413                    	je .L_tc_recycle_frame_done_07b8
 29358 00015563 488B32                  	mov rsi, qword [rdx]
 29359 00015566 488933                  	mov qword [rbx], rsi
 29360 00015569 48FFC9                  	dec rcx
 29361 0001556C 4883EB08                	sub rbx, 8 * 1
 29362 00015570 4883EA08                	sub rdx, 8 * 1
 29363 00015574 EBE7                    	jmp .L_tc_recycle_frame_loop_07b8
 29364                                  .L_tc_recycle_frame_done_07b8:
 29365 00015576 488D6308                	lea rsp, [rbx + 8 * 1]
 29366 0001557A 5D                      	pop rbp	; the proc will restore it!
 29367 0001557B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29368 0001557E C9                      	leave
 29369 0001557F C21000                  	ret AND_KILL_FRAME(0)
 29370                                  .L_lambda_simple_end_05e0:	; new closure is in rax
 29371 00015582 48890425[7C190000]      	mov qword [free_var_176], rax
 29372 0001558A 48B8-                   	mov rax, sob_void
 29372 0001558C [0000000000000000] 
 29373                                  
 29374 00015594 4889C7                  	mov rdi, rax
 29375 00015597 E89E020000              	call print_sexpr_if_not_void
 29376                                  
 29377 0001559C 48B8-                   	mov rax, L_constants + 3515
 29377 0001559E [BB0D000000000000] 
 29378 000155A6 50                      	push rax
 29379 000155A7 6A01                    	push 1	; arg count
 29380 000155A9 488B0425[DC0E0000]      	mov rax, qword [free_var_16]	; free var car
 29381 000155B1 803805                  	cmp byte [rax], T_undefined
 29382 000155B4 7445                    	je L_error_fvar_undefined
 29383 000155B6 803804                  	cmp byte [rax], T_closure
 29384 000155B9 0F85C0000000            	jne L_error_non_closure
 29385 000155BF FF7001                  	push SOB_CLOSURE_ENV(rax)
 29386 000155C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29387                                  
 29388 000155C5 4889C7                  	mov rdi, rax
 29389 000155C8 E86D020000              	call print_sexpr_if_not_void
 29390                                  
 29391 000155CD 48BF-                           mov rdi, fmt_memory_usage
 29391 000155CF [251A000000000000] 
 29392 000155D7 488B3425[AB1A0000]              mov rsi, qword [top_of_memory]
 29393 000155DF 4881EE[00000000]                sub rsi, memory
 29394 000155E6 B800000000                      mov rax, 0
 29395                                          ENTER
    44 000155EB C8000000            <1>  enter 0, 0
    45 000155EF 4883E4F0            <1>  and rsp, ~15
 29396 000155F3 E8(00000000)                    call printf
 29397                                          LEAVE
    49 000155F8 C9                  <1>  leave
 29398 000155F9 C9                      	leave
 29399 000155FA C3                      	ret
 29400                                  
 29401                                  L_error_fvar_undefined:
 29402 000155FB 50                              push rax
 29403 000155FC 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
 29404 00015604 48BE-                           mov rsi, fmt_undefined_free_var_1
 29404 00015606 [8D19000000000000] 
 29405 0001560E B800000000                      mov rax, 0
 29406                                          ENTER
    44 00015613 C8000000            <1>  enter 0, 0
    45 00015617 4883E4F0            <1>  and rsp, ~15
 29407 0001561B E8(00000000)                    call fprintf
 29408                                          LEAVE
    49 00015620 C9                  <1>  leave
 29409 00015621 58                              pop rax
 29410 00015622 488B4001                        mov rax, qword [rax + 1] ; string
 29411 00015626 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 29412 0001562A BE01000000                      mov rsi, 1               ; sizeof(char)
 29413 0001562F 488B5001                        mov rdx, qword [rax + 1] ; string-length
 29414 00015633 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
 29415 0001563B B800000000                      mov rax, 0
 29416                                          ENTER
    44 00015640 C8000000            <1>  enter 0, 0
    45 00015644 4883E4F0            <1>  and rsp, ~15
 29417 00015648 E8(00000000)                    call fwrite
 29418                                          LEAVE
    49 0001564D C9                  <1>  leave
 29419 0001564E 488B3C25[00000000]              mov rdi, [stderr]       ; destination
 29420 00015656 48BE-                           mov rsi, fmt_undefined_free_var_2
 29420 00015658 [A419000000000000] 
 29421 00015660 B800000000                      mov rax, 0
 29422                                          ENTER
    44 00015665 C8000000            <1>  enter 0, 0
    45 00015669 4883E4F0            <1>  and rsp, ~15
 29423 0001566D E8(00000000)                    call fprintf
 29424                                          LEAVE
    49 00015672 C9                  <1>  leave
 29425 00015673 48C7C0F6FFFFFF                  mov rax, -10
 29426 0001567A E8(00000000)                    call exit
 29427                                  
 29428                                  L_error_non_closure:
 29429 0001567F 488B3C25[00000000]              mov rdi, qword [stderr]
 29430 00015687 48BE-                           mov rsi, fmt_non_closure
 29430 00015689 [5B1A000000000000] 
 29431 00015691 B800000000                      mov rax, 0
 29432                                          ENTER
    44 00015696 C8000000            <1>  enter 0, 0
    45 0001569A 4883E4F0            <1>  and rsp, ~15
 29433 0001569E E8(00000000)                    call fprintf
 29434                                          LEAVE
    49 000156A3 C9                  <1>  leave
 29435 000156A4 48C7C0FEFFFFFF                  mov rax, -2
 29436 000156AB E8(00000000)                    call exit
 29437                                  
 29438                                  L_error_improper_list:
 29439 000156B0 488B3C25[00000000]      	mov rdi, qword [stderr]
 29440 000156B8 48BE-                   	mov rsi, fmt_error_improper_list
 29440 000156BA [831A000000000000] 
 29441 000156C2 B800000000              	mov rax, 0
 29442                                          ENTER
    44 000156C7 C8000000            <1>  enter 0, 0
    45 000156CB 4883E4F0            <1>  and rsp, ~15
 29443 000156CF E8(00000000)            	call fprintf
 29444                                          LEAVE
    49 000156D4 C9                  <1>  leave
 29445 000156D5 48C7C0F9FFFFFF          	mov rax, -7
 29446 000156DC E8(00000000)            	call exit
 29447                                  
 29448                                  L_error_incorrect_arity_simple:
 29449 000156E1 488B3C25[00000000]              mov rdi, qword [stderr]
 29450 000156E9 48BE-                           mov rsi, fmt_incorrect_arity_simple
 29450 000156EB [C619000000000000] 
 29451 000156F3 EB12                            jmp L_error_incorrect_arity_common
 29452                                  L_error_incorrect_arity_opt:
 29453 000156F5 488B3C25[00000000]              mov rdi, qword [stderr]
 29454 000156FD 48BE-                           mov rsi, fmt_incorrect_arity_opt
 29454 000156FF [F119000000000000] 
 29455                                  L_error_incorrect_arity_common:
 29456 00015707 5A                              pop rdx
 29457 00015708 59                              pop rcx
 29458 00015709 B800000000                      mov rax, 0
 29459                                          ENTER
    44 0001570E C8000000            <1>  enter 0, 0
    45 00015712 4883E4F0            <1>  and rsp, ~15
 29460 00015716 E8(00000000)                    call fprintf
 29461                                          LEAVE
    49 0001571B C9                  <1>  leave
 29462 0001571C 48C7C0FAFFFFFF                  mov rax, -6
 29463 00015723 E8(00000000)                    call exit
 29464                                  
 29465                                  section .data
 29466                                  fmt_undefined_free_var_1:
 29467 0000198D 212121205468652066-             db `!!! The free variable \0`
 29467 00001996 726565207661726961-
 29467 0000199F 626C652000         
 29468                                  fmt_undefined_free_var_2:
 29469 000019A4 207761732075736564-             db ` was used before it was defined.\n\0`
 29469 000019AD 206265666F72652069-
 29469 000019B6 742077617320646566-
 29469 000019BF 696E65642E0A00     
 29470                                  fmt_incorrect_arity_simple:
 29471 000019C6 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 29471 000019CF 74656420256C642061-
 29471 000019D8 7267756D656E74732C-
 29471 000019E1 206275742067697665-
 29471 000019EA 6E20256C640A00     
 29472                                  fmt_incorrect_arity_opt:
 29473 000019F1 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 29473 000019FA 746564206174206C65-
 29473 00001A03 61737420256C642061-
 29473 00001A0C 7267756D656E74732C-
 29473 00001A15 206275742067697665-
 29473 00001A1E 6E20256C640A00     
 29474                                  fmt_memory_usage:
 29475 00001A25 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 29475 00001A2E 20256C642062797465-
 29475 00001A37 73206F662064796E61-
 29475 00001A40 6D6963616C6C792D61-
 29475 00001A49 6C6C6F636174656420-
 29475 00001A52 6D656D6F72790A0A00 
 29476                                  fmt_non_closure:
 29477 00001A5B 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 29477 00001A64 7074696E6720746F20-
 29477 00001A6D 6170706C792061206E-
 29477 00001A76 6F6E2D636C6F737572-
 29477 00001A7F 65210A00           
 29478                                  fmt_error_improper_list:
 29479 00001A83 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 29479 00001A8C 7267756D656E742069-
 29479 00001A95 73206E6F7420612070-
 29479 00001A9E 726F706572206C6973-
 29479 00001AA7 74210A00           
 29480                                  
 29481                                  section .bss
 29482                                  memory:
 29483 00000000 <res 40000000h>         	resb gbytes(1)
 29484                                  
 29485                                  section .data
 29486                                  top_of_memory:
 29487 00001AAB [0000000000000000]              dq memory
 29488                                  
 29489                                  section .text
 29490                                  malloc:
 29491 00015728 488B0425[AB1A0000]              mov rax, qword [top_of_memory]
 29492 00015730 48013C25[AB1A0000]              add qword [top_of_memory], rdi
 29493 00015738 C3                              ret
 29494                                  
 29495                                  L_code_ptr_break:
 29496 00015739 48837C241000                    cmp qword [rsp + 8 * 2], 0
 29497 0001573F 0F85001B0000                    jne L_error_arg_count_0
 29498 00015745 CC                              int3
 29499 00015746 48B8-                           mov rax, sob_void
 29499 00015748 [0000000000000000] 
 29500 00015750 C21000                          ret AND_KILL_FRAME(0)        
 29501                                  
 29502                                  L_code_ptr_frame:
 29503 00015753 C8000000                        enter 0, 0
 29504 00015757 48837D1800                      cmp COUNT, 0
 29505 0001575C 0F85E31A0000                    jne L_error_arg_count_0
 29506                                  
 29507 00015762 48BF-                           mov rdi, fmt_frame
 29507 00015764 [B31A000000000000] 
 29508 0001576C 488B7500                        mov rsi, qword [rbp]    ; old rbp
 29509 00015770 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
 29510 00015774 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
 29511 00015778 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
 29512 0001577C 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
 29513 00015780 6A00                            push 0
 29514 00015782 4151                            push r9
 29515 00015784 4150                            push r8                   ; we'll use it when printing the params
 29516 00015786 B800000000                      mov rax, 0
 29517                                          
 29518                                          ENTER
    44 0001578B C8000000            <1>  enter 0, 0
    45 0001578F 4883E4F0            <1>  and rsp, ~15
 29519 00015793 E8(00000000)                    call printf
 29520                                          LEAVE
    49 00015798 C9                  <1>  leave
 29521                                  
 29522                                  .L:
 29523 00015799 488B0C24                        mov rcx, qword [rsp]
 29524 0001579D 4883F900                        cmp rcx, 0
 29525 000157A1 7467                            je .L_out
 29526 000157A3 48BF-                           mov rdi, fmt_frame_param_prefix
 29526 000157A5 [EC1A000000000000] 
 29527 000157AD 488B742410                      mov rsi, qword [rsp + 8*2]
 29528 000157B2 B800000000                      mov rax, 0
 29529                                          
 29530                                          ENTER
    44 000157B7 C8000000            <1>  enter 0, 0
    45 000157BB 4883E4F0            <1>  and rsp, ~15
 29531 000157BF E8(00000000)                    call printf
 29532                                          LEAVE
    49 000157C4 C9                  <1>  leave
 29533                                  
 29534 000157C5 488B0C24                        mov rcx, qword [rsp]
 29535 000157C9 48FFC9                          dec rcx
 29536 000157CC 48890C24                        mov qword [rsp], rcx    ; dec arg count
 29537 000157D0 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
 29538 000157D5 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
 29539 000157DA 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
 29540 000157DE 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
 29541 000157E3 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
 29542 000157E6 E87B000000                      call print_sexpr
 29543 000157EB 48BF-                           mov rdi, fmt_newline
 29543 000157ED [181B000000000000] 
 29544 000157F5 B800000000                      mov rax, 0
 29545                                          ENTER
    44 000157FA C8000000            <1>  enter 0, 0
    45 000157FE 4883E4F0            <1>  and rsp, ~15
 29546 00015802 E8(00000000)                    call printf
 29547                                          LEAVE
    49 00015807 C9                  <1>  leave
 29548 00015808 EB8F                            jmp .L
 29549                                  .L_out:
 29550 0001580A 48BF-                           mov rdi, fmt_frame_continue
 29550 0001580C [FD1A000000000000] 
 29551 00015814 B800000000                      mov rax, 0
 29552                                          ENTER
    44 00015819 C8000000            <1>  enter 0, 0
    45 0001581D 4883E4F0            <1>  and rsp, ~15
 29553 00015821 E8(00000000)                    call printf
 29554 00015826 E8(00000000)                    call getchar
 29555                                          LEAVE
    49 0001582B C9                  <1>  leave
 29556                                          
 29557 0001582C 48B8-                           mov rax, sob_void
 29557 0001582E [0000000000000000] 
 29558 00015836 C9                              leave
 29559 00015837 C21000                          ret AND_KILL_FRAME(0)
 29560                                          
 29561                                  print_sexpr_if_not_void:
 29562 0001583A 4881FF[00000000]        	cmp rdi, sob_void
 29563 00015841 7422                    	je .done
 29564 00015843 E81E000000              	call print_sexpr
 29565 00015848 48BF-                   	mov rdi, fmt_newline
 29565 0001584A [181B000000000000] 
 29566 00015852 B800000000              	mov rax, 0
 29567                                  	ENTER
    44 00015857 C8000000            <1>  enter 0, 0
    45 0001585B 4883E4F0            <1>  and rsp, ~15
 29568 0001585F E8(00000000)            	call printf
 29569                                  	LEAVE
    49 00015864 C9                  <1>  leave
 29570                                  .done:
 29571 00015865 C3                      	ret
 29572                                  
 29573                                  section .data
 29574                                  fmt_frame:
 29575 00001AB3 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
 29575 00001ABC 207265742061646472-
 29575 00001AC5 203D2025703B206C65-
 29575 00001ACE 7820656E76203D2025-
 29575 00001AD7 703B20706172616D20-
 29575 00001AE0 636F756E74203D2025-
 29575 00001AE9 640A00             
 29576                                  fmt_frame_param_prefix:
 29577 00001AEC 3D3D5B706172616D20-             db `==[param %d]==> \0`
 29577 00001AF5 25645D3D3D3E2000   
 29578                                  fmt_frame_continue:
 29579 00001AFD 486974203C456E7465-             db `Hit <Enter> to continue...\0`
 29579 00001B06 723E20746F20636F6E-
 29579 00001B0F 74696E75652E2E2E00 
 29580                                  fmt_newline:
 29581 00001B18 0A00                    	db `\n\0`
 29582                                  fmt_void:
 29583 00001B1A 233C766F69643E00        	db `#<void>\0`
 29584                                  fmt_nil:
 29585 00001B22 282900                  	db `()\0`
 29586                                  fmt_boolean_false:
 29587 00001B25 236600                  	db `#f\0`
 29588                                  fmt_boolean_true:
 29589 00001B28 237400                  	db `#t\0`
 29590                                  fmt_char_backslash:
 29591 00001B2B 235C5C00                	db `#\\\\\0`
 29592                                  fmt_char_dquote:
 29593 00001B2F 235C2200                	db `#\\"\0`
 29594                                  fmt_char_simple:
 29595 00001B33 235C256300              	db `#\\%c\0`
 29596                                  fmt_char_null:
 29597 00001B38 235C6E756C00            	db `#\\nul\0`
 29598                                  fmt_char_bell:
 29599 00001B3E 235C62656C6C00          	db `#\\bell\0`
 29600                                  fmt_char_backspace:
 29601 00001B45 235C6261636B737061-     	db `#\\backspace\0`
 29601 00001B4E 636500             
 29602                                  fmt_char_tab:
 29603 00001B51 235C74616200            	db `#\\tab\0`
 29604                                  fmt_char_newline:
 29605 00001B57 235C6E65776C696E65-     	db `#\\newline\0`
 29605 00001B60 00                 
 29606                                  fmt_char_formfeed:
 29607 00001B61 235C7061676500          	db `#\\page\0`
 29608                                  fmt_char_return:
 29609 00001B68 235C72657475726E00      	db `#\\return\0`
 29610                                  fmt_char_escape:
 29611 00001B71 235C65736300            	db `#\\esc\0`
 29612                                  fmt_char_space:
 29613 00001B77 235C737061636500        	db `#\\space\0`
 29614                                  fmt_char_hex:
 29615 00001B7F 235C782530325800        	db `#\\x%02X\0`
 29616                                  fmt_gensym:
 29617 00001B87 47256C6400                      db `G%ld\0`
 29618                                  fmt_closure:
 29619 00001B8C 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 29619 00001B95 206174203078253038-
 29619 00001B9E 5820656E763D307825-
 29619 00001BA7 30385820636F64653D-
 29619 00001BB0 3078253038583E00   
 29620                                  fmt_lparen:
 29621 00001BB8 2800                    	db `(\0`
 29622                                  fmt_dotted_pair:
 29623 00001BBA 202E2000                	db ` . \0`
 29624                                  fmt_rparen:
 29625 00001BBE 2900                    	db `)\0`
 29626                                  fmt_space:
 29627 00001BC0 2000                    	db ` \0`
 29628                                  fmt_empty_vector:
 29629 00001BC2 23282900                	db `#()\0`
 29630                                  fmt_vector:
 29631 00001BC6 232800                  	db `#(\0`
 29632                                  fmt_real:
 29633 00001BC9 256600                  	db `%f\0`
 29634                                  fmt_fraction:
 29635 00001BCC 256C642F256C6400        	db `%ld/%ld\0`
 29636                                  fmt_zero:
 29637 00001BD4 3000                    	db `0\0`
 29638                                  fmt_int:
 29639 00001BD6 256C6400                	db `%ld\0`
 29640                                  fmt_unknown_scheme_object_error:
 29641 00001BDA 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
 29641 00001BE3 6F723A20556E6B6E6F-
 29641 00001BEC 776E20536368656D65-
 29641 00001BF5 2D6F626A6563742028-
 29641 00001BFE 525454492030782530-
 29641 00001C07 32582920           
 29642 00001C0B 617420616464726573-     	db `at address 0x%08X\n\n\0`
 29642 00001C14 73203078253038580A-
 29642 00001C1D 0A00               
 29643                                  fmt_dquote:
 29644 00001C1F 2200                    	db `\"\0`
 29645                                  fmt_string_char:
 29646 00001C21 256300                          db `%c\0`
 29647                                  fmt_string_char_7:
 29648 00001C24 5C6100                          db `\\a\0`
 29649                                  fmt_string_char_8:
 29650 00001C27 5C6200                          db `\\b\0`
 29651                                  fmt_string_char_9:
 29652 00001C2A 5C7400                          db `\\t\0`
 29653                                  fmt_string_char_10:
 29654 00001C2D 5C6E00                          db `\\n\0`
 29655                                  fmt_string_char_11:
 29656 00001C30 5C7600                          db `\\v\0`
 29657                                  fmt_string_char_12:
 29658 00001C33 5C6600                          db `\\f\0`
 29659                                  fmt_string_char_13:
 29660 00001C36 5C7200                          db `\\r\0`
 29661                                  fmt_string_char_34:
 29662 00001C39 5C2200                          db `\\"\0`
 29663                                  fmt_string_char_92:
 29664 00001C3C 5C5C00                          db `\\\\\0`
 29665                                  fmt_string_char_hex:
 29666 00001C3F 5C7825583B00                    db `\\x%X;\0`
 29667                                  
 29668                                  section .text
 29669                                  
 29670                                  print_sexpr:
 29671 00015866 C8000000                	enter 0, 0
 29672 0001586A 8A07                    	mov al, byte [rdi]
 29673 0001586C 3C00                    	cmp al, T_void
 29674 0001586E 7465                    	je .Lvoid
 29675 00015870 3C01                    	cmp al, T_nil
 29676 00015872 7470                    	je .Lnil
 29677 00015874 3C09                    	cmp al, T_boolean_false
 29678 00015876 747B                    	je .Lboolean_false
 29679 00015878 3C0A                    	cmp al, T_boolean_true
 29680 0001587A 0F8482000000            	je .Lboolean_true
 29681 00015880 3C02                    	cmp al, T_char
 29682 00015882 0F8489000000            	je .Lchar
 29683 00015888 3C41                    	cmp al, T_interned_symbol
 29684 0001588A 0F84CB010000            	je .Linterned_symbol
 29685 00015890 3C42                            cmp al, T_uninterned_symbol
 29686 00015892 0F84EF010000                    je .Luninterned_symbol
 29687 00015898 3C21                    	cmp al, T_pair
 29688 0001589A 0F84FA010000            	je .Lpair
 29689 000158A0 3C22                    	cmp al, T_vector
 29690 000158A2 0F84C3020000            	je .Lvector
 29691 000158A8 3C04                    	cmp al, T_closure
 29692 000158AA 0F8491010000            	je .Lclosure
 29693 000158B0 3C13                    	cmp al, T_real
 29694 000158B2 0F8454030000            	je .Lreal
 29695 000158B8 3C12                    	cmp al, T_fraction
 29696 000158BA 0F847A030000            	je .Lfraction
 29697 000158C0 3C11                    	cmp al, T_integer
 29698 000158C2 0F84B3030000            	je .Linteger
 29699 000158C8 3C03                    	cmp al, T_string
 29700 000158CA 0F84BE030000            	je .Lstring
 29701                                  
 29702 000158D0 E9F6040000              	jmp .Lunknown_sexpr_type
 29703                                  
 29704                                  .Lvoid:
 29705 000158D5 48BF-                   	mov rdi, fmt_void
 29705 000158D7 [1A1B000000000000] 
 29706 000158DF E91A050000              	jmp .Lemit
 29707                                  
 29708                                  .Lnil:
 29709 000158E4 48BF-                   	mov rdi, fmt_nil
 29709 000158E6 [221B000000000000] 
 29710 000158EE E90B050000              	jmp .Lemit
 29711                                  
 29712                                  .Lboolean_false:
 29713 000158F3 48BF-                   	mov rdi, fmt_boolean_false
 29713 000158F5 [251B000000000000] 
 29714 000158FD E9FC040000              	jmp .Lemit
 29715                                  
 29716                                  .Lboolean_true:
 29717 00015902 48BF-                   	mov rdi, fmt_boolean_true
 29717 00015904 [281B000000000000] 
 29718 0001590C E9ED040000              	jmp .Lemit
 29719                                  
 29720                                  .Lchar:
 29721 00015911 8A4701                  	mov al, byte [rdi + 1]
 29722 00015914 3C20                    	cmp al, ' '
 29723 00015916 7E28                    	jle .Lchar_whitespace
 29724 00015918 3C5C                    	cmp al, 92 		; backslash
 29725 0001591A 0F847C000000            	je .Lchar_backslash
 29726 00015920 3C22                    	cmp al, '"'
 29727 00015922 0F8483000000            	je .Lchar_dquote
 29728 00015928 4825FF000000            	and rax, 255
 29729 0001592E 48BF-                   	mov rdi, fmt_char_simple
 29729 00015930 [331B000000000000] 
 29730 00015938 4889C6                  	mov rsi, rax
 29731 0001593B E9BE040000              	jmp .Lemit
 29732                                  
 29733                                  .Lchar_whitespace:
 29734 00015940 3C00                    	cmp al, 0
 29735 00015942 7476                    	je .Lchar_null
 29736 00015944 3C07                    	cmp al, 7
 29737 00015946 0F847D000000            	je .Lchar_bell
 29738 0001594C 3C08                    	cmp al, 8
 29739 0001594E 0F8484000000            	je .Lchar_backspace
 29740 00015954 3C09                    	cmp al, 9
 29741 00015956 0F848B000000            	je .Lchar_tab
 29742 0001595C 3C0A                    	cmp al, 10
 29743 0001595E 0F8492000000            	je .Lchar_newline
 29744 00015964 3C0C                    	cmp al, 12
 29745 00015966 0F8499000000            	je .Lchar_formfeed
 29746 0001596C 3C0D                    	cmp al, 13
 29747 0001596E 0F84A0000000            	je .Lchar_return
 29748 00015974 3C1B                    	cmp al, 27
 29749 00015976 0F84A7000000            	je .Lchar_escape
 29750 0001597C 4825FF000000            	and rax, 255
 29751 00015982 3C20                    	cmp al, ' '
 29752 00015984 0F84A8000000            	je .Lchar_space
 29753 0001598A 48BF-                   	mov rdi, fmt_char_hex
 29753 0001598C [7F1B000000000000] 
 29754 00015994 4889C6                  	mov rsi, rax
 29755 00015997 E962040000              	jmp .Lemit	
 29756                                  
 29757                                  .Lchar_backslash:
 29758 0001599C 48BF-                   	mov rdi, fmt_char_backslash
 29758 0001599E [2B1B000000000000] 
 29759 000159A6 E953040000              	jmp .Lemit
 29760                                  
 29761                                  .Lchar_dquote:
 29762 000159AB 48BF-                   	mov rdi, fmt_char_dquote
 29762 000159AD [2F1B000000000000] 
 29763 000159B5 E944040000              	jmp .Lemit
 29764                                  
 29765                                  .Lchar_null:
 29766 000159BA 48BF-                   	mov rdi, fmt_char_null
 29766 000159BC [381B000000000000] 
 29767 000159C4 E935040000              	jmp .Lemit
 29768                                  
 29769                                  .Lchar_bell:
 29770 000159C9 48BF-                   	mov rdi, fmt_char_bell
 29770 000159CB [3E1B000000000000] 
 29771 000159D3 E926040000              	jmp .Lemit
 29772                                  
 29773                                  .Lchar_backspace:
 29774 000159D8 48BF-                   	mov rdi, fmt_char_backspace
 29774 000159DA [451B000000000000] 
 29775 000159E2 E917040000              	jmp .Lemit
 29776                                  
 29777                                  .Lchar_tab:
 29778 000159E7 48BF-                   	mov rdi, fmt_char_tab
 29778 000159E9 [511B000000000000] 
 29779 000159F1 E908040000              	jmp .Lemit
 29780                                  
 29781                                  .Lchar_newline:
 29782 000159F6 48BF-                   	mov rdi, fmt_char_newline
 29782 000159F8 [571B000000000000] 
 29783 00015A00 E9F9030000              	jmp .Lemit
 29784                                  
 29785                                  .Lchar_formfeed:
 29786 00015A05 48BF-                   	mov rdi, fmt_char_formfeed
 29786 00015A07 [611B000000000000] 
 29787 00015A0F E9EA030000              	jmp .Lemit
 29788                                  
 29789                                  .Lchar_return:
 29790 00015A14 48BF-                   	mov rdi, fmt_char_return
 29790 00015A16 [681B000000000000] 
 29791 00015A1E E9DB030000              	jmp .Lemit
 29792                                  
 29793                                  .Lchar_escape:
 29794 00015A23 48BF-                   	mov rdi, fmt_char_escape
 29794 00015A25 [711B000000000000] 
 29795 00015A2D E9CC030000              	jmp .Lemit
 29796                                  
 29797                                  .Lchar_space:
 29798 00015A32 48BF-                   	mov rdi, fmt_char_space
 29798 00015A34 [771B000000000000] 
 29799 00015A3C E9BD030000              	jmp .Lemit
 29800                                  
 29801                                  .Lclosure:
 29802 00015A41 4889FE                  	mov rsi, qword rdi
 29803 00015A44 48BF-                   	mov rdi, fmt_closure
 29803 00015A46 [8C1B000000000000] 
 29804 00015A4E 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 29805 00015A52 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 29806 00015A56 E9A3030000              	jmp .Lemit
 29807                                  
 29808                                  .Linterned_symbol:
 29809 00015A5B 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 29810 00015A5F BE01000000              	mov rsi, 1		 ; size = 1 byte
 29811 00015A64 488B5701                	mov rdx, qword [rdi + 1] ; length
 29812 00015A68 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 29813 00015A6C 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 29814                                  	ENTER
    44 00015A74 C8000000            <1>  enter 0, 0
    45 00015A78 4883E4F0            <1>  and rsp, ~15
 29815 00015A7C E8(00000000)            	call fwrite
 29816                                  	LEAVE
    49 00015A81 C9                  <1>  leave
 29817 00015A82 E98C030000              	jmp .Lend
 29818                                  
 29819                                  .Luninterned_symbol:
 29820 00015A87 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
 29821 00015A8B 48BF-                           mov rdi, fmt_gensym
 29821 00015A8D [871B000000000000] 
 29822 00015A95 E964030000                      jmp .Lemit
 29823                                  	
 29824                                  .Lpair:
 29825 00015A9A 57                      	push rdi
 29826 00015A9B 48BF-                   	mov rdi, fmt_lparen
 29826 00015A9D [B81B000000000000] 
 29827 00015AA5 B800000000              	mov rax, 0
 29828                                          ENTER
    44 00015AAA C8000000            <1>  enter 0, 0
    45 00015AAE 4883E4F0            <1>  and rsp, ~15
 29829 00015AB2 E8(00000000)            	call printf
 29830                                          LEAVE
    49 00015AB7 C9                  <1>  leave
 29831 00015AB8 488B3C24                	mov rdi, qword [rsp] 	; pair
 29832 00015ABC 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 29833 00015AC0 E8A1FDFFFF              	call print_sexpr
 29834 00015AC5 5F                      	pop rdi 		; pair
 29835 00015AC6 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 29836                                  .Lcdr:
 29837 00015ACA 8A07                    	mov al, byte [rdi]
 29838 00015ACC 3C01                    	cmp al, T_nil
 29839 00015ACE 7447                    	je .Lcdr_nil
 29840 00015AD0 3C21                    	cmp al, T_pair
 29841 00015AD2 7462                    	je .Lcdr_pair
 29842 00015AD4 57                      	push rdi
 29843 00015AD5 48BF-                   	mov rdi, fmt_dotted_pair
 29843 00015AD7 [BA1B000000000000] 
 29844 00015ADF B800000000              	mov rax, 0
 29845                                          ENTER
    44 00015AE4 C8000000            <1>  enter 0, 0
    45 00015AE8 4883E4F0            <1>  and rsp, ~15
 29846 00015AEC E8(00000000)            	call printf
 29847                                          LEAVE
    49 00015AF1 C9                  <1>  leave
 29848 00015AF2 5F                      	pop rdi
 29849 00015AF3 E86EFDFFFF              	call print_sexpr
 29850 00015AF8 48BF-                   	mov rdi, fmt_rparen
 29850 00015AFA [BE1B000000000000] 
 29851 00015B02 B800000000              	mov rax, 0
 29852                                          ENTER
    44 00015B07 C8000000            <1>  enter 0, 0
    45 00015B0B 4883E4F0            <1>  and rsp, ~15
 29853 00015B0F E8(00000000)            	call printf
 29854                                          LEAVE
    49 00015B14 C9                  <1>  leave
 29855 00015B15 C9                      	leave
 29856 00015B16 C3                      	ret
 29857                                  
 29858                                  .Lcdr_nil:
 29859 00015B17 48BF-                   	mov rdi, fmt_rparen
 29859 00015B19 [BE1B000000000000] 
 29860 00015B21 B800000000              	mov rax, 0
 29861                                          ENTER
    44 00015B26 C8000000            <1>  enter 0, 0
    45 00015B2A 4883E4F0            <1>  and rsp, ~15
 29862 00015B2E E8(00000000)            	call printf
 29863                                          LEAVE
    49 00015B33 C9                  <1>  leave
 29864 00015B34 C9                      	leave
 29865 00015B35 C3                      	ret
 29866                                  
 29867                                  .Lcdr_pair:
 29868 00015B36 57                      	push rdi
 29869 00015B37 48BF-                   	mov rdi, fmt_space
 29869 00015B39 [C01B000000000000] 
 29870 00015B41 B800000000              	mov rax, 0
 29871                                          ENTER
    44 00015B46 C8000000            <1>  enter 0, 0
    45 00015B4A 4883E4F0            <1>  and rsp, ~15
 29872 00015B4E E8(00000000)            	call printf
 29873                                          LEAVE
    49 00015B53 C9                  <1>  leave
 29874 00015B54 488B3C24                	mov rdi, qword [rsp]
 29875 00015B58 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 29876 00015B5C E805FDFFFF              	call print_sexpr
 29877 00015B61 5F                      	pop rdi
 29878 00015B62 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 29879 00015B66 E95FFFFFFF              	jmp .Lcdr
 29880                                  
 29881                                  .Lvector:
 29882 00015B6B 488B4701                	mov rax, qword [rdi + 1] ; length
 29883 00015B6F 4883F800                	cmp rax, 0
 29884 00015B73 0F8484000000            	je .Lvector_empty
 29885 00015B79 57                      	push rdi
 29886 00015B7A 48BF-                   	mov rdi, fmt_vector
 29886 00015B7C [C61B000000000000] 
 29887 00015B84 B800000000              	mov rax, 0
 29888                                          ENTER
    44 00015B89 C8000000            <1>  enter 0, 0
    45 00015B8D 4883E4F0            <1>  and rsp, ~15
 29889 00015B91 E8(00000000)            	call printf
 29890                                          LEAVE
    49 00015B96 C9                  <1>  leave
 29891 00015B97 488B3C24                	mov rdi, qword [rsp]
 29892 00015B9B FF7701                  	push qword [rdi + 1]
 29893 00015B9E 6A01                    	push 1
 29894 00015BA0 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 29895 00015BA4 E8BDFCFFFF              	call print_sexpr
 29896                                  .Lvector_loop:
 29897                                  	; [rsp] index
 29898                                  	; [rsp + 8*1] limit
 29899                                  	; [rsp + 8*2] vector
 29900 00015BA9 488B0424                	mov rax, qword [rsp]
 29901 00015BAD 483B442408              	cmp rax, qword [rsp + 8*1]
 29902 00015BB2 7436                    	je .Lvector_end
 29903 00015BB4 48BF-                   	mov rdi, fmt_space
 29903 00015BB6 [C01B000000000000] 
 29904 00015BBE B800000000              	mov rax, 0
 29905                                          ENTER
    44 00015BC3 C8000000            <1>  enter 0, 0
    45 00015BC7 4883E4F0            <1>  and rsp, ~15
 29906 00015BCB E8(00000000)            	call printf
 29907                                          LEAVE
    49 00015BD0 C9                  <1>  leave
 29908 00015BD1 488B0424                	mov rax, qword [rsp]
 29909 00015BD5 488B5C2410              	mov rbx, qword [rsp + 8*2]
 29910 00015BDA 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 29911 00015BDF E882FCFFFF              	call print_sexpr
 29912 00015BE4 48FF0424                	inc qword [rsp]
 29913 00015BE8 EBBF                    	jmp .Lvector_loop
 29914                                  
 29915                                  .Lvector_end:
 29916 00015BEA 4883C418                	add rsp, 8*3
 29917 00015BEE 48BF-                   	mov rdi, fmt_rparen
 29917 00015BF0 [BE1B000000000000] 
 29918 00015BF8 E901020000              	jmp .Lemit	
 29919                                  
 29920                                  .Lvector_empty:
 29921 00015BFD 48BF-                   	mov rdi, fmt_empty_vector
 29921 00015BFF [C21B000000000000] 
 29922 00015C07 E9F2010000              	jmp .Lemit
 29923                                  
 29924                                  .Lreal:
 29925 00015C0C FF7701                  	push qword [rdi + 1]
 29926 00015C0F F20F100424              	movsd xmm0, qword [rsp]
 29927 00015C14 4883C408                	add rsp, 8*1
 29928 00015C18 48BF-                   	mov rdi, fmt_real
 29928 00015C1A [C91B000000000000] 
 29929 00015C22 B801000000              	mov rax, 1
 29930                                  	ENTER
    44 00015C27 C8000000            <1>  enter 0, 0
    45 00015C2B 4883E4F0            <1>  and rsp, ~15
 29931 00015C2F E8(00000000)            	call printf
 29932                                  	LEAVE
    49 00015C34 C9                  <1>  leave
 29933 00015C35 E9D9010000              	jmp .Lend
 29934                                  
 29935                                  .Lfraction:
 29936 00015C3A 488B7701                	mov rsi, qword [rdi + 1]
 29937 00015C3E 488B5709                	mov rdx, qword [rdi + 1 + 8]
 29938 00015C42 4883FE00                	cmp rsi, 0
 29939 00015C46 7415                    	je .Lrat_zero
 29940 00015C48 4883FA01                	cmp rdx, 1
 29941 00015C4C 741E                    	je .Lrat_int
 29942 00015C4E 48BF-                   	mov rdi, fmt_fraction
 29942 00015C50 [CC1B000000000000] 
 29943 00015C58 E9A1010000              	jmp .Lemit
 29944                                  
 29945                                  .Lrat_zero:
 29946 00015C5D 48BF-                   	mov rdi, fmt_zero
 29946 00015C5F [D41B000000000000] 
 29947 00015C67 E992010000              	jmp .Lemit
 29948                                  
 29949                                  .Lrat_int:
 29950 00015C6C 48BF-                   	mov rdi, fmt_int
 29950 00015C6E [D61B000000000000] 
 29951 00015C76 E983010000              	jmp .Lemit
 29952                                  
 29953                                  .Linteger:
 29954 00015C7B 488B7701                	mov rsi, qword [rdi + 1]
 29955 00015C7F 48BF-                   	mov rdi, fmt_int
 29955 00015C81 [D61B000000000000] 
 29956 00015C89 E970010000              	jmp .Lemit
 29957                                  
 29958                                  .Lstring:
 29959 00015C8E 488D4709                	lea rax, [rdi + 1 + 8]
 29960 00015C92 50                      	push rax
 29961 00015C93 FF7701                  	push qword [rdi + 1]
 29962 00015C96 48BF-                   	mov rdi, fmt_dquote
 29962 00015C98 [1F1C000000000000] 
 29963 00015CA0 B800000000              	mov rax, 0
 29964                                  	ENTER
    44 00015CA5 C8000000            <1>  enter 0, 0
    45 00015CA9 4883E4F0            <1>  and rsp, ~15
 29965 00015CAD E8(00000000)            	call printf
 29966                                  	LEAVE
    49 00015CB2 C9                  <1>  leave
 29967                                  .Lstring_loop:
 29968                                  	; qword [rsp]: limit
 29969                                  	; qword [rsp + 8*1]: char *
 29970 00015CB3 48833C2400              	cmp qword [rsp], 0
 29971 00015CB8 0F84FD000000            	je .Lstring_end
 29972 00015CBE 488B442408              	mov rax, qword [rsp + 8*1]
 29973 00015CC3 8A00                    	mov al, byte [rax]
 29974 00015CC5 4825FF000000            	and rax, 255
 29975 00015CCB 3C07                    	cmp al, 7
 29976 00015CCD 7468                            je .Lstring_char_7
 29977 00015CCF 3C08                            cmp al, 8
 29978 00015CD1 7470                            je .Lstring_char_8
 29979 00015CD3 3C09                            cmp al, 9
 29980 00015CD5 7478                            je .Lstring_char_9
 29981 00015CD7 3C0A                            cmp al, 10
 29982 00015CD9 0F847C000000                    je .Lstring_char_10
 29983 00015CDF 3C0B                            cmp al, 11
 29984 00015CE1 0F8480000000                    je .Lstring_char_11
 29985 00015CE7 3C0C                            cmp al, 12
 29986 00015CE9 0F8484000000                    je .Lstring_char_12
 29987 00015CEF 3C0D                            cmp al, 13
 29988 00015CF1 0F8488000000                    je .Lstring_char_13
 29989 00015CF7 3C22                            cmp al, 34
 29990 00015CF9 0F848C000000                    je .Lstring_char_34
 29991 00015CFF 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 29993 00015D01 3C20                            cmp al, ' '
 29994 00015D03 0F8CA0000000                    jl .Lstring_char_hex
 29995 00015D09 48BF-                           mov rdi, fmt_string_char
 29995 00015D0B [211C000000000000] 
 29996 00015D13 4889C6                          mov rsi, rax
 29997                                  .Lstring_char_emit:
 29998 00015D16 B800000000                      mov rax, 0
 29999                                          ENTER
    44 00015D1B C8000000            <1>  enter 0, 0
    45 00015D1F 4883E4F0            <1>  and rsp, ~15
 30000 00015D23 E8(00000000)                    call printf
 30001                                          LEAVE
    49 00015D28 C9                  <1>  leave
 30002 00015D29 48FF0C24                        dec qword [rsp]
 30003 00015D2D 48FF442408                      inc qword [rsp + 8*1]
 30004 00015D32 E97CFFFFFF                      jmp .Lstring_loop
 30005                                  
 30006                                  .Lstring_char_7:
 30007 00015D37 48BF-                           mov rdi, fmt_string_char_7
 30007 00015D39 [241C000000000000] 
 30008 00015D41 EBD3                            jmp .Lstring_char_emit
 30009                                  
 30010                                  .Lstring_char_8:
 30011 00015D43 48BF-                           mov rdi, fmt_string_char_8
 30011 00015D45 [271C000000000000] 
 30012 00015D4D EBC7                            jmp .Lstring_char_emit
 30013                                          
 30014                                  .Lstring_char_9:
 30015 00015D4F 48BF-                           mov rdi, fmt_string_char_9
 30015 00015D51 [2A1C000000000000] 
 30016 00015D59 EBBB                            jmp .Lstring_char_emit
 30017                                  
 30018                                  .Lstring_char_10:
 30019 00015D5B 48BF-                           mov rdi, fmt_string_char_10
 30019 00015D5D [2D1C000000000000] 
 30020 00015D65 EBAF                            jmp .Lstring_char_emit
 30021                                  
 30022                                  .Lstring_char_11:
 30023 00015D67 48BF-                           mov rdi, fmt_string_char_11
 30023 00015D69 [301C000000000000] 
 30024 00015D71 EBA3                            jmp .Lstring_char_emit
 30025                                  
 30026                                  .Lstring_char_12:
 30027 00015D73 48BF-                           mov rdi, fmt_string_char_12
 30027 00015D75 [331C000000000000] 
 30028 00015D7D EB97                            jmp .Lstring_char_emit
 30029                                  
 30030                                  .Lstring_char_13:
 30031 00015D7F 48BF-                           mov rdi, fmt_string_char_13
 30031 00015D81 [361C000000000000] 
 30032 00015D89 EB8B                            jmp .Lstring_char_emit
 30033                                  
 30034                                  .Lstring_char_34:
 30035 00015D8B 48BF-                           mov rdi, fmt_string_char_34
 30035 00015D8D [391C000000000000] 
 30036 00015D95 E97CFFFFFF                      jmp .Lstring_char_emit
 30037                                  
 30038                                  .Lstring_char_92:
 30039 00015D9A 48BF-                           mov rdi, fmt_string_char_92
 30039 00015D9C [3C1C000000000000] 
 30040 00015DA4 E96DFFFFFF                      jmp .Lstring_char_emit
 30041                                  
 30042                                  .Lstring_char_hex:
 30043 00015DA9 48BF-                           mov rdi, fmt_string_char_hex
 30043 00015DAB [3F1C000000000000] 
 30044 00015DB3 4889C6                          mov rsi, rax
 30045 00015DB6 E95BFFFFFF                      jmp .Lstring_char_emit        
 30046                                  
 30047                                  .Lstring_end:
 30048 00015DBB 4883C410                	add rsp, 8 * 2
 30049 00015DBF 48BF-                   	mov rdi, fmt_dquote
 30049 00015DC1 [1F1C000000000000] 
 30050 00015DC9 EB33                    	jmp .Lemit
 30051                                  
 30052                                  .Lunknown_sexpr_type:
 30053 00015DCB 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
 30053 00015DCD [DA1B000000000000] 
 30054 00015DD5 4825FF000000            	and rax, 255
 30055 00015DDB 4889C2                  	mov rdx, rax
 30056 00015DDE 4889F9                  	mov rcx, rdi
 30057 00015DE1 488B3C25[00000000]      	mov rdi, qword [stderr]
 30058 00015DE9 B800000000              	mov rax, 0
 30059                                          ENTER
    44 00015DEE C8000000            <1>  enter 0, 0
    45 00015DF2 4883E4F0            <1>  and rsp, ~15
 30060 00015DF6 E8(00000000)            	call fprintf
 30061                                          LEAVE
    49 00015DFB C9                  <1>  leave
 30062 00015DFC C9                              leave
 30063 00015DFD C3                              ret
 30064                                  
 30065                                  .Lemit:
 30066 00015DFE B800000000              	mov rax, 0
 30067                                          ENTER
    44 00015E03 C8000000            <1>  enter 0, 0
    45 00015E07 4883E4F0            <1>  and rsp, ~15
 30068 00015E0B E8(00000000)            	call printf
 30069                                          LEAVE
    49 00015E10 C9                  <1>  leave
 30070 00015E11 EB00                    	jmp .Lend
 30071                                  
 30072                                  .Lend:
 30073                                  	LEAVE
    49 00015E13 C9                  <1>  leave
 30074 00015E14 C3                      	ret
 30075                                  
 30076                                  ;;; rdi: address of free variable
 30077                                  ;;; rsi: address of code-pointer
 30078                                  bind_primitive:
 30079 00015E15 C8000000                        enter 0, 0
 30080 00015E19 57                              push rdi
 30081 00015E1A BF11000000                      mov rdi, (1 + 8 + 8)
 30082 00015E1F E804F9FFFF                      call malloc
 30083 00015E24 5F                              pop rdi
 30084 00015E25 C60004                          mov byte [rax], T_closure
 30085 00015E28 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 30086 00015E30 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 30087 00015E34 488907                          mov qword [rdi], rax
 30088 00015E37 48B8-                           mov rax, sob_void
 30088 00015E39 [0000000000000000] 
 30089 00015E41 C9                              leave
 30090 00015E42 C3                              ret
 30091                                  
 30092                                  L_code_ptr_ash:
 30093 00015E43 C8000000                        enter 0, 0
 30094 00015E47 48837D1802                      cmp COUNT, 2
 30095 00015E4C 0F855D140000                    jne L_error_arg_count_2
 30096 00015E52 488B7D20                        mov rdi, PARAM(0)
 30097                                          assert_integer(rdi)
    53 00015E56 803F11              <1>  cmp byte [%1], %2
    54 00015E59 0F85EF140000        <1>  jne L_error_incorrect_type
 30098 00015E5F 488B4D28                        mov rcx, PARAM(1)
 30099                                          assert_integer(rcx)
    53 00015E63 803911              <1>  cmp byte [%1], %2
    54 00015E66 0F85E2140000        <1>  jne L_error_incorrect_type
 30100 00015E6C 488B7F01                        mov rdi, qword [rdi + 1]
 30101 00015E70 488B4901                        mov rcx, qword [rcx + 1]
 30102 00015E74 4883F900                        cmp rcx, 0
 30103 00015E78 7C0F                            jl .L_negative
 30104                                  .L_loop_positive:
 30105 00015E7A 4883F900                        cmp rcx, 0
 30106 00015E7E 741B                            je .L_exit
 30107 00015E80 48D3E7                          sal rdi, cl
 30108 00015E83 48C1E908                        shr rcx, 8
 30109 00015E87 EBF1                            jmp .L_loop_positive
 30110                                  .L_negative:
 30111 00015E89 48F7D9                          neg rcx
 30112                                  .L_loop_negative:
 30113 00015E8C 4883F900                        cmp rcx, 0
 30114 00015E90 7409                            je .L_exit
 30115 00015E92 48D3FF                          sar rdi, cl
 30116 00015E95 48C1E908                        shr rcx, 8
 30117 00015E99 EBF1                            jmp .L_loop_negative
 30118                                  .L_exit:
 30119 00015E9B E85A130000                      call make_integer
 30120 00015EA0 C9                              leave
 30121 00015EA1 C22000                          ret AND_KILL_FRAME(2)
 30122                                  
 30123                                  L_code_ptr_logand:
 30124 00015EA4 C8000000                        enter 0, 0
 30125 00015EA8 48837D1802                      cmp COUNT, 2
 30126 00015EAD 0F85FC130000                    jne L_error_arg_count_2
 30127 00015EB3 4C8B4520                        mov r8, PARAM(0)
 30128                                          assert_integer(r8)
    53 00015EB7 41803811            <1>  cmp byte [%1], %2
    54 00015EBB 0F858D140000        <1>  jne L_error_incorrect_type
 30129 00015EC1 4C8B4D28                        mov r9, PARAM(1)
 30130                                          assert_integer(r9)
    53 00015EC5 41803911            <1>  cmp byte [%1], %2
    54 00015EC9 0F857F140000        <1>  jne L_error_incorrect_type
 30131 00015ECF 498B7801                        mov rdi, qword [r8 + 1]
 30132 00015ED3 49237901                        and rdi, qword [r9 + 1]
 30133 00015ED7 E81E130000                      call make_integer
 30134 00015EDC C9                              leave
 30135 00015EDD C22000                          ret AND_KILL_FRAME(2)
 30136                                  
 30137                                  L_code_ptr_logor:
 30138 00015EE0 C8000000                        enter 0, 0
 30139 00015EE4 48837D1802                      cmp COUNT, 2
 30140 00015EE9 0F85C0130000                    jne L_error_arg_count_2
 30141 00015EEF 4C8B4520                        mov r8, PARAM(0)
 30142                                          assert_integer(r8)
    53 00015EF3 41803811            <1>  cmp byte [%1], %2
    54 00015EF7 0F8551140000        <1>  jne L_error_incorrect_type
 30143 00015EFD 4C8B4D28                        mov r9, PARAM(1)
 30144                                          assert_integer(r9)
    53 00015F01 41803911            <1>  cmp byte [%1], %2
    54 00015F05 0F8543140000        <1>  jne L_error_incorrect_type
 30145 00015F0B 498B7801                        mov rdi, qword [r8 + 1]
 30146 00015F0F 490B7901                        or rdi, qword [r9 + 1]
 30147 00015F13 E8E2120000                      call make_integer
 30148 00015F18 C9                              leave
 30149 00015F19 C22000                          ret AND_KILL_FRAME(2)
 30150                                  
 30151                                  L_code_ptr_logxor:
 30152 00015F1C C8000000                        enter 0, 0
 30153 00015F20 48837D1802                      cmp COUNT, 2
 30154 00015F25 0F8584130000                    jne L_error_arg_count_2
 30155 00015F2B 4C8B4520                        mov r8, PARAM(0)
 30156                                          assert_integer(r8)
    53 00015F2F 41803811            <1>  cmp byte [%1], %2
    54 00015F33 0F8515140000        <1>  jne L_error_incorrect_type
 30157 00015F39 4C8B4D28                        mov r9, PARAM(1)
 30158                                          assert_integer(r9)
    53 00015F3D 41803911            <1>  cmp byte [%1], %2
    54 00015F41 0F8507140000        <1>  jne L_error_incorrect_type
 30159 00015F47 498B7801                        mov rdi, qword [r8 + 1]
 30160 00015F4B 49337901                        xor rdi, qword [r9 + 1]
 30161 00015F4F E8A6120000                      call make_integer
 30162                                          LEAVE
    49 00015F54 C9                  <1>  leave
 30163 00015F55 C22000                          ret AND_KILL_FRAME(2)
 30164                                  
 30165                                  L_code_ptr_lognot:
 30166 00015F58 C8000000                        enter 0, 0
 30167 00015F5C 48837D1801                      cmp COUNT, 1
 30168 00015F61 0F8513130000                    jne L_error_arg_count_1
 30169 00015F67 4C8B4520                        mov r8, PARAM(0)
 30170                                          assert_integer(r8)
    53 00015F6B 41803811            <1>  cmp byte [%1], %2
    54 00015F6F 0F85D9130000        <1>  jne L_error_incorrect_type
 30171 00015F75 498B7801                        mov rdi, qword [r8 + 1]
 30172 00015F79 48F7D7                          not rdi
 30173 00015F7C E879120000                      call make_integer
 30174 00015F81 C9                              leave
 30175 00015F82 C21800                          ret AND_KILL_FRAME(1)
 30176                                  
 30177                                  L_code_ptr_bin_apply:
 30178 00015F85 48837C241002                    cmp qword [rsp + 8 * 2], 2
 30179 00015F8B 0F851E130000                    jne L_error_arg_count_2
 30180 00015F91 4C8B642418                      mov r12, qword [rsp + 8 * 3]
 30181                                          assert_closure(r12)
    53 00015F96 41803C2404          <1>  cmp byte [%1], %2
    54 00015F9B 0F85AD130000        <1>  jne L_error_incorrect_type
 30182 00015FA1 4C8D542420                      lea r10, [rsp + 8 * 4]
 30183 00015FA6 4D8B1A                          mov r11, qword [r10]
 30184 00015FA9 4C8B0C24                        mov r9, qword [rsp]
 30185 00015FAD B900000000                      mov rcx, 0
 30186 00015FB2 4C89DE                          mov rsi, r11
 30187                                  .L0:
 30188 00015FB5 4881FE[01000000]                cmp rsi, sob_nil
 30189 00015FBC 7412                            je .L0_out
 30190                                          assert_pair(rsi)
    53 00015FBE 803E21              <1>  cmp byte [%1], %2
    54 00015FC1 0F8587130000        <1>  jne L_error_incorrect_type
 30191 00015FC7 48FFC1                          inc rcx
 30192 00015FCA 488B7609                        mov rsi, SOB_PAIR_CDR(rsi)
 30193 00015FCE EBE5                            jmp .L0
 30194                                  .L0_out:
 30195 00015FD0 488D1CCDF0FFFFFF                lea rbx, [8 * (rcx - 2)]
 30196 00015FD8 4829DC                          sub rsp, rbx
 30197 00015FDB 4889E7                          mov rdi, rsp
 30198 00015FDE FC                              cld
 30199                                          ; place ret addr
 30200 00015FDF 4C89C8                          mov rax, r9
 30201 00015FE2 48AB                            stosq
 30202                                          ; place env_f
 30203 00015FE4 498B442401                      mov rax, SOB_CLOSURE_ENV(r12)
 30204 00015FE9 48AB                            stosq
 30205                                          ; place COUNT = rcx
 30206 00015FEB 4889C8                          mov rax, rcx
 30207 00015FEE 48AB                            stosq
 30208                                  .L1:
 30209 00015FF0 4883F900                        cmp rcx, 0
 30210 00015FF4 740F                            je .L1_out
 30211 00015FF6 498B4301                        mov rax, SOB_PAIR_CAR(r11)
 30212 00015FFA 48AB                            stosq
 30213 00015FFC 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11)
 30214 00016000 48FFC9                          dec rcx
 30215 00016003 EBEB                            jmp .L1
 30216                                  .L1_out:
 30217 00016005 4883EF08                        sub rdi, 8*1
 30218 00016009 4939FA                          cmp r10, rdi
 30219 0001600C 7505                            jne .L_error_apply_stack_corrupted
 30220 0001600E 41FF642409                      jmp SOB_CLOSURE_CODE(r12)
 30221                                  .L_error_apply_stack_corrupted:
 30222 00016013 CC                              int3
 30223                                  
 30224                                  L_code_ptr_is_null:
 30225 00016014 C8000000                        enter 0, 0
 30226 00016018 48837D1801                      cmp COUNT, 1
 30227 0001601D 0F8557120000                    jne L_error_arg_count_1
 30228 00016023 488B4520                        mov rax, PARAM(0)
 30229 00016027 803801                          cmp byte [rax], T_nil
 30230 0001602A 750C                            jne .L_false
 30231 0001602C 48B8-                           mov rax, sob_boolean_true
 30231 0001602E [0300000000000000] 
 30232 00016036 EB0A                            jmp .L_end
 30233                                  .L_false:
 30234 00016038 48B8-                           mov rax, sob_boolean_false
 30234 0001603A [0200000000000000] 
 30235                                  .L_end:
 30236 00016042 C9                              leave
 30237 00016043 C21800                          ret AND_KILL_FRAME(1)
 30238                                  
 30239                                  L_code_ptr_is_pair:
 30240 00016046 C8000000                        enter 0, 0
 30241 0001604A 48837D1801                      cmp COUNT, 1
 30242 0001604F 0F8525120000                    jne L_error_arg_count_1
 30243 00016055 488B4520                        mov rax, PARAM(0)
 30244 00016059 803821                          cmp byte [rax], T_pair
 30245 0001605C 750C                            jne .L_false
 30246 0001605E 48B8-                           mov rax, sob_boolean_true
 30246 00016060 [0300000000000000] 
 30247 00016068 EB0A                            jmp .L_end
 30248                                  .L_false:
 30249 0001606A 48B8-                           mov rax, sob_boolean_false
 30249 0001606C [0200000000000000] 
 30250                                  .L_end:
 30251 00016074 C9                              leave
 30252 00016075 C21800                          ret AND_KILL_FRAME(1)
 30253                                          
 30254                                  L_code_ptr_is_void:
 30255 00016078 C8000000                        enter 0, 0
 30256 0001607C 48837D1801                      cmp COUNT, 1
 30257 00016081 0F85F3110000                    jne L_error_arg_count_1
 30258 00016087 488B4520                        mov rax, PARAM(0)
 30259 0001608B 803800                          cmp byte [rax], T_void
 30260 0001608E 750C                            jne .L_false
 30261 00016090 48B8-                           mov rax, sob_boolean_true
 30261 00016092 [0300000000000000] 
 30262 0001609A EB0A                            jmp .L_end
 30263                                  .L_false:
 30264 0001609C 48B8-                           mov rax, sob_boolean_false
 30264 0001609E [0200000000000000] 
 30265                                  .L_end:
 30266 000160A6 C9                              leave
 30267 000160A7 C21800                          ret AND_KILL_FRAME(1)
 30268                                  
 30269                                  L_code_ptr_is_char:
 30270 000160AA C8000000                        enter 0, 0
 30271 000160AE 48837D1801                      cmp COUNT, 1
 30272 000160B3 0F85C1110000                    jne L_error_arg_count_1
 30273 000160B9 488B4520                        mov rax, PARAM(0)
 30274 000160BD 803802                          cmp byte [rax], T_char
 30275 000160C0 750C                            jne .L_false
 30276 000160C2 48B8-                           mov rax, sob_boolean_true
 30276 000160C4 [0300000000000000] 
 30277 000160CC EB0A                            jmp .L_end
 30278                                  .L_false:
 30279 000160CE 48B8-                           mov rax, sob_boolean_false
 30279 000160D0 [0200000000000000] 
 30280                                  .L_end:
 30281 000160D8 C9                              leave
 30282 000160D9 C21800                          ret AND_KILL_FRAME(1)
 30283                                  
 30284                                  L_code_ptr_is_string:
 30285 000160DC C8000000                        enter 0, 0
 30286 000160E0 48837D1801                      cmp COUNT, 1
 30287 000160E5 0F858F110000                    jne L_error_arg_count_1
 30288 000160EB 488B4520                        mov rax, PARAM(0)
 30289 000160EF 803803                          cmp byte [rax], T_string
 30290 000160F2 750C                            jne .L_false
 30291 000160F4 48B8-                           mov rax, sob_boolean_true
 30291 000160F6 [0300000000000000] 
 30292 000160FE EB0A                            jmp .L_end
 30293                                  .L_false:
 30294 00016100 48B8-                           mov rax, sob_boolean_false
 30294 00016102 [0200000000000000] 
 30295                                  .L_end:
 30296 0001610A C9                              leave
 30297 0001610B C21800                          ret AND_KILL_FRAME(1)
 30298                                  
 30299                                  L_code_ptr_is_symbol:
 30300 0001610E C8000000                        enter 0, 0
 30301 00016112 48837D1801                      cmp COUNT, 1
 30302 00016117 0F855D110000                    jne L_error_arg_count_1
 30303 0001611D 4C8B4520                        mov r8, PARAM(0)
 30304 00016121 41802040                        and byte [r8], T_symbol
 30305 00016125 740C                            jz .L_false
 30306 00016127 48B8-                           mov rax, sob_boolean_true
 30306 00016129 [0300000000000000] 
 30307 00016131 EB0A                            jmp .L_exit
 30308                                  .L_false:
 30309 00016133 48B8-                           mov rax, sob_boolean_false
 30309 00016135 [0200000000000000] 
 30310                                  .L_exit:
 30311 0001613D C9                              leave
 30312 0001613E C21800                          ret AND_KILL_FRAME(1)
 30313                                  
 30314                                  L_code_ptr_is_uninterned_symbol:
 30315 00016141 C8000000                        enter 0, 0
 30316 00016145 48837D1801                      cmp COUNT, 1
 30317 0001614A 0F852A110000                    jne L_error_arg_count_1
 30318 00016150 4C8B4520                        mov r8, PARAM(0)
 30319 00016154 41803842                        cmp byte [r8], T_uninterned_symbol
 30320 00016158 750C                            jne .L_false
 30321 0001615A 48B8-                           mov rax, sob_boolean_true
 30321 0001615C [0300000000000000] 
 30322 00016164 EB0A                            jmp .L_exit
 30323                                  .L_false:
 30324 00016166 48B8-                           mov rax, sob_boolean_false
 30324 00016168 [0200000000000000] 
 30325                                  .L_exit:
 30326 00016170 C9                              leave
 30327 00016171 C21800                          ret AND_KILL_FRAME(1)
 30328                                  
 30329                                  L_code_ptr_is_interned_symbol:
 30330 00016174 C8000000                        enter 0, 0
 30331 00016178 48837D1801                      cmp COUNT, 1
 30332 0001617D 0F85F7100000                    jne L_error_arg_count_1
 30333 00016183 488B4520                        mov rax, PARAM(0)
 30334 00016187 803841                          cmp byte [rax], T_interned_symbol
 30335 0001618A 750C                            jne .L_false
 30336 0001618C 48B8-                           mov rax, sob_boolean_true
 30336 0001618E [0300000000000000] 
 30337 00016196 EB0A                            jmp .L_end
 30338                                  .L_false:
 30339 00016198 48B8-                           mov rax, sob_boolean_false
 30339 0001619A [0200000000000000] 
 30340                                  .L_end:
 30341 000161A2 C9                              leave
 30342 000161A3 C21800                          ret AND_KILL_FRAME(1)
 30343                                  
 30344                                  L_code_ptr_gensym:
 30345 000161A6 C8000000                        enter 0, 0
 30346 000161AA 48837D1800                      cmp COUNT, 0
 30347 000161AF 0F8590100000                    jne L_error_arg_count_0
 30348 000161B5 48FF0425[451C0000]              inc qword [gensym_count]
 30349 000161BD BF09000000                      mov rdi, (1 + 8)
 30350 000161C2 E861F5FFFF                      call malloc
 30351 000161C7 C60042                          mov byte [rax], T_uninterned_symbol
 30352 000161CA 488B0C25[451C0000]              mov rcx, qword [gensym_count]
 30353 000161D2 48894801                        mov qword [rax + 1], rcx
 30354 000161D6 C9                              leave
 30355 000161D7 C21000                          ret AND_KILL_FRAME(0)
 30356                                  
 30357                                  L_code_ptr_is_vector:
 30358 000161DA C8000000                        enter 0, 0
 30359 000161DE 48837D1801                      cmp COUNT, 1
 30360 000161E3 0F8591100000                    jne L_error_arg_count_1
 30361 000161E9 488B4520                        mov rax, PARAM(0)
 30362 000161ED 803822                          cmp byte [rax], T_vector
 30363 000161F0 750C                            jne .L_false
 30364 000161F2 48B8-                           mov rax, sob_boolean_true
 30364 000161F4 [0300000000000000] 
 30365 000161FC EB0A                            jmp .L_end
 30366                                  .L_false:
 30367 000161FE 48B8-                           mov rax, sob_boolean_false
 30367 00016200 [0200000000000000] 
 30368                                  .L_end:
 30369 00016208 C9                              leave
 30370 00016209 C21800                          ret AND_KILL_FRAME(1)
 30371                                  
 30372                                  L_code_ptr_is_closure:
 30373 0001620C C8000000                        enter 0, 0
 30374 00016210 48837D1801                      cmp COUNT, 1
 30375 00016215 0F855F100000                    jne L_error_arg_count_1
 30376 0001621B 488B4520                        mov rax, PARAM(0)
 30377 0001621F 803804                          cmp byte [rax], T_closure
 30378 00016222 750C                            jne .L_false
 30379 00016224 48B8-                           mov rax, sob_boolean_true
 30379 00016226 [0300000000000000] 
 30380 0001622E EB0A                            jmp .L_end
 30381                                  .L_false:
 30382 00016230 48B8-                           mov rax, sob_boolean_false
 30382 00016232 [0200000000000000] 
 30383                                  .L_end:
 30384 0001623A C9                              leave
 30385 0001623B C21800                          ret AND_KILL_FRAME(1)
 30386                                  
 30387                                  L_code_ptr_is_real:
 30388 0001623E C8000000                        enter 0, 0
 30389 00016242 48837D1801                      cmp COUNT, 1
 30390 00016247 0F852D100000                    jne L_error_arg_count_1
 30391 0001624D 488B4520                        mov rax, PARAM(0)
 30392 00016251 803813                          cmp byte [rax], T_real
 30393 00016254 750C                            jne .L_false
 30394 00016256 48B8-                           mov rax, sob_boolean_true
 30394 00016258 [0300000000000000] 
 30395 00016260 EB0A                            jmp .L_end
 30396                                  .L_false:
 30397 00016262 48B8-                           mov rax, sob_boolean_false
 30397 00016264 [0200000000000000] 
 30398                                  .L_end:
 30399 0001626C C9                              leave
 30400 0001626D C21800                          ret AND_KILL_FRAME(1)
 30401                                  
 30402                                  L_code_ptr_is_fraction:
 30403 00016270 C8000000                        enter 0, 0
 30404 00016274 48837D1801                      cmp COUNT, 1
 30405 00016279 0F85FB0F0000                    jne L_error_arg_count_1
 30406 0001627F 488B4520                        mov rax, PARAM(0)
 30407 00016283 803812                          cmp byte [rax], T_fraction
 30408 00016286 750C                            jne .L_false
 30409 00016288 48B8-                           mov rax, sob_boolean_true
 30409 0001628A [0300000000000000] 
 30410 00016292 EB0A                            jmp .L_end
 30411                                  .L_false:
 30412 00016294 48B8-                           mov rax, sob_boolean_false
 30412 00016296 [0200000000000000] 
 30413                                  .L_end:
 30414 0001629E C9                              leave
 30415 0001629F C21800                          ret AND_KILL_FRAME(1)
 30416                                  
 30417                                  L_code_ptr_is_boolean:
 30418 000162A2 C8000000                        enter 0, 0
 30419 000162A6 48837D1801                      cmp COUNT, 1
 30420 000162AB 0F85C90F0000                    jne L_error_arg_count_1
 30421 000162B1 488B4520                        mov rax, PARAM(0)
 30422 000162B5 8A18                            mov bl, byte [rax]
 30423 000162B7 80E308                          and bl, T_boolean
 30424 000162BA 740C                            je .L_false
 30425 000162BC 48B8-                           mov rax, sob_boolean_true
 30425 000162BE [0300000000000000] 
 30426 000162C6 EB0A                            jmp .L_end
 30427                                  .L_false:
 30428 000162C8 48B8-                           mov rax, sob_boolean_false
 30428 000162CA [0200000000000000] 
 30429                                  .L_end:
 30430 000162D2 C9                              leave
 30431 000162D3 C21800                          ret AND_KILL_FRAME(1)
 30432                                          
 30433                                  L_code_ptr_is_boolean_false:
 30434 000162D6 C8000000                        enter 0, 0
 30435 000162DA 48837D1801                      cmp COUNT, 1
 30436 000162DF 0F85950F0000                    jne L_error_arg_count_1
 30437 000162E5 488B4520                        mov rax, PARAM(0)
 30438 000162E9 8A18                            mov bl, byte [rax]
 30439 000162EB 80FB09                          cmp bl, T_boolean_false
 30440 000162EE 750C                            jne .L_false
 30441 000162F0 48B8-                           mov rax, sob_boolean_true
 30441 000162F2 [0300000000000000] 
 30442 000162FA EB0A                            jmp .L_end
 30443                                  .L_false:
 30444 000162FC 48B8-                           mov rax, sob_boolean_false
 30444 000162FE [0200000000000000] 
 30445                                  .L_end:
 30446 00016306 C9                              leave
 30447 00016307 C21800                          ret AND_KILL_FRAME(1)
 30448                                  
 30449                                  L_code_ptr_is_boolean_true:
 30450 0001630A C8000000                        enter 0, 0
 30451 0001630E 48837D1801                      cmp COUNT, 1
 30452 00016313 0F85610F0000                    jne L_error_arg_count_1
 30453 00016319 488B4520                        mov rax, PARAM(0)
 30454 0001631D 8A18                            mov bl, byte [rax]
 30455 0001631F 80FB0A                          cmp bl, T_boolean_true
 30456 00016322 750C                            jne .L_false
 30457 00016324 48B8-                           mov rax, sob_boolean_true
 30457 00016326 [0300000000000000] 
 30458 0001632E EB0A                            jmp .L_end
 30459                                  .L_false:
 30460 00016330 48B8-                           mov rax, sob_boolean_false
 30460 00016332 [0200000000000000] 
 30461                                  .L_end:
 30462 0001633A C9                              leave
 30463 0001633B C21800                          ret AND_KILL_FRAME(1)
 30464                                  
 30465                                  L_code_ptr_is_number:
 30466 0001633E C8000000                        enter 0, 0
 30467 00016342 48837D1801                      cmp COUNT, 1
 30468 00016347 0F852D0F0000                    jne L_error_arg_count_1
 30469 0001634D 488B4520                        mov rax, PARAM(0)
 30470 00016351 8A18                            mov bl, byte [rax]
 30471 00016353 80E310                          and bl, T_number
 30472 00016356 740C                            jz .L_false
 30473 00016358 48B8-                           mov rax, sob_boolean_true
 30473 0001635A [0300000000000000] 
 30474 00016362 EB0A                            jmp .L_end
 30475                                  .L_false:
 30476 00016364 48B8-                           mov rax, sob_boolean_false
 30476 00016366 [0200000000000000] 
 30477                                  .L_end:
 30478 0001636E C9                              leave
 30479 0001636F C21800                          ret AND_KILL_FRAME(1)
 30480                                          
 30481                                  L_code_ptr_is_collection:
 30482 00016372 C8000000                        enter 0, 0
 30483 00016376 48837D1801                      cmp COUNT, 1
 30484 0001637B 0F85F90E0000                    jne L_error_arg_count_1
 30485 00016381 488B4520                        mov rax, PARAM(0)
 30486 00016385 8A18                            mov bl, byte [rax]
 30487 00016387 80E320                          and bl, T_collection
 30488 0001638A 740C                            je .L_false
 30489 0001638C 48B8-                           mov rax, sob_boolean_true
 30489 0001638E [0300000000000000] 
 30490 00016396 EB0A                            jmp .L_end
 30491                                  .L_false:
 30492 00016398 48B8-                           mov rax, sob_boolean_false
 30492 0001639A [0200000000000000] 
 30493                                  .L_end:
 30494 000163A2 C9                              leave
 30495 000163A3 C21800                          ret AND_KILL_FRAME(1)
 30496                                  
 30497                                  L_code_ptr_cons:
 30498 000163A6 C8000000                        enter 0, 0
 30499 000163AA 48837D1802                      cmp COUNT, 2
 30500 000163AF 0F85FA0E0000                    jne L_error_arg_count_2
 30501 000163B5 BF11000000                      mov rdi, (1 + 8 + 8)
 30502 000163BA E869F3FFFF                      call malloc
 30503 000163BF C60021                          mov byte [rax], T_pair
 30504 000163C2 488B5D20                        mov rbx, PARAM(0)
 30505 000163C6 48895801                        mov SOB_PAIR_CAR(rax), rbx
 30506 000163CA 488B5D28                        mov rbx, PARAM(1)
 30507 000163CE 48895809                        mov SOB_PAIR_CDR(rax), rbx
 30508 000163D2 C9                              leave
 30509 000163D3 C22000                          ret AND_KILL_FRAME(2)
 30510                                  
 30511                                  L_code_ptr_display_sexpr:
 30512 000163D6 C8000000                        enter 0, 0
 30513 000163DA 48837D1801                      cmp COUNT, 1
 30514 000163DF 0F85950E0000                    jne L_error_arg_count_1
 30515 000163E5 488B7D20                        mov rdi, PARAM(0)
 30516 000163E9 E878F4FFFF                      call print_sexpr
 30517 000163EE 48B8-                           mov rax, sob_void
 30517 000163F0 [0000000000000000] 
 30518 000163F8 C9                              leave
 30519 000163F9 C21800                          ret AND_KILL_FRAME(1)
 30520                                  
 30521                                  L_code_ptr_write_char:
 30522 000163FC C8000000                        enter 0, 0
 30523 00016400 48837D1801                      cmp COUNT, 1
 30524 00016405 0F856F0E0000                    jne L_error_arg_count_1
 30525 0001640B 488B4520                        mov rax, PARAM(0)
 30526                                          assert_char(rax)
    53 0001640F 803802              <1>  cmp byte [%1], %2
    54 00016412 0F85360F0000        <1>  jne L_error_incorrect_type
 30527 00016418 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 30528 0001641B 4825FF000000                    and rax, 255
 30529 00016421 48BF-                           mov rdi, fmt_char
 30529 00016423 [4D1C000000000000] 
 30530 0001642B 4889C6                          mov rsi, rax
 30531 0001642E B800000000                      mov rax, 0
 30532                                          ENTER
    44 00016433 C8000000            <1>  enter 0, 0
    45 00016437 4883E4F0            <1>  and rsp, ~15
 30533 0001643B E8(00000000)                    call printf
 30534                                          LEAVE
    49 00016440 C9                  <1>  leave
 30535 00016441 48B8-                           mov rax, sob_void
 30535 00016443 [0000000000000000] 
 30536 0001644B C9                              leave
 30537 0001644C C21800                          ret AND_KILL_FRAME(1)
 30538                                  
 30539                                  L_code_ptr_car:
 30540 0001644F C8000000                        enter 0, 0
 30541 00016453 48837D1801                      cmp COUNT, 1
 30542 00016458 0F851C0E0000                    jne L_error_arg_count_1
 30543 0001645E 488B4520                        mov rax, PARAM(0)
 30544                                          assert_pair(rax)
    53 00016462 803821              <1>  cmp byte [%1], %2
    54 00016465 0F85E30E0000        <1>  jne L_error_incorrect_type
 30545 0001646B 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 30546 0001646F C9                              leave
 30547 00016470 C21800                          ret AND_KILL_FRAME(1)
 30548                                          
 30549                                  L_code_ptr_cdr:
 30550 00016473 C8000000                        enter 0, 0
 30551 00016477 48837D1801                      cmp COUNT, 1
 30552 0001647C 0F85F80D0000                    jne L_error_arg_count_1
 30553 00016482 488B4520                        mov rax, PARAM(0)
 30554                                          assert_pair(rax)
    53 00016486 803821              <1>  cmp byte [%1], %2
    54 00016489 0F85BF0E0000        <1>  jne L_error_incorrect_type
 30555 0001648F 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 30556 00016493 C9                              leave
 30557 00016494 C21800                          ret AND_KILL_FRAME(1)
 30558                                          
 30559                                  L_code_ptr_string_length:
 30560 00016497 C8000000                        enter 0, 0
 30561 0001649B 48837D1801                      cmp COUNT, 1
 30562 000164A0 0F85D40D0000                    jne L_error_arg_count_1
 30563 000164A6 488B4520                        mov rax, PARAM(0)
 30564                                          assert_string(rax)
    53 000164AA 803803              <1>  cmp byte [%1], %2
    54 000164AD 0F859B0E0000        <1>  jne L_error_incorrect_type
 30565 000164B3 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 30566 000164B7 E83E0D0000                      call make_integer
 30567 000164BC C9                              leave
 30568 000164BD C21800                          ret AND_KILL_FRAME(1)
 30569                                  
 30570                                  L_code_ptr_vector_length:
 30571 000164C0 C8000000                        enter 0, 0
 30572 000164C4 48837D1801                      cmp COUNT, 1
 30573 000164C9 0F85AB0D0000                    jne L_error_arg_count_1
 30574 000164CF 488B4520                        mov rax, PARAM(0)
 30575                                          assert_vector(rax)
    53 000164D3 803822              <1>  cmp byte [%1], %2
    54 000164D6 0F85720E0000        <1>  jne L_error_incorrect_type
 30576 000164DC 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 30577 000164E0 E8150D0000                      call make_integer
 30578 000164E5 C9                              leave
 30579 000164E6 C21800                          ret AND_KILL_FRAME(1)
 30580                                  
 30581                                  L_code_ptr_real_to_integer:
 30582 000164E9 C8000000                        enter 0, 0
 30583 000164ED 48837D1801                      cmp COUNT, 1
 30584 000164F2 0F85820D0000                    jne L_error_arg_count_1
 30585 000164F8 488B5D20                        mov rbx, PARAM(0)
 30586                                          assert_real(rbx)
    53 000164FC 803B13              <1>  cmp byte [%1], %2
    54 000164FF 0F85490E0000        <1>  jne L_error_incorrect_type
 30587 00016505 F20F104301                      movsd xmm0, qword [rbx + 1]
 30588 0001650A F2480F2CF8                      cvttsd2si rdi, xmm0
 30589 0001650F E8E60C0000                      call make_integer
 30590 00016514 C9                              leave
 30591 00016515 C21800                          ret AND_KILL_FRAME(1)
 30592                                  
 30593                                  L_code_ptr_exit:
 30594 00016518 C8000000                        enter 0, 0
 30595 0001651C 48837D1800                      cmp COUNT, 0
 30596 00016521 0F851E0D0000                    jne L_error_arg_count_0
 30597 00016527 B800000000                      mov rax, 0
 30598 0001652C E8(00000000)                    call exit
 30599                                  
 30600                                  L_code_ptr_integer_to_real:
 30601 00016531 C8000000                        enter 0, 0
 30602 00016535 48837D1801                      cmp COUNT, 1
 30603 0001653A 0F853A0D0000                    jne L_error_arg_count_1
 30604 00016540 488B4520                        mov rax, PARAM(0)
 30605                                          assert_integer(rax)
    53 00016544 803811              <1>  cmp byte [%1], %2
    54 00016547 0F85010E0000        <1>  jne L_error_incorrect_type
 30606 0001654D FF7001                          push qword [rax + 1]
 30607 00016550 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 30608 00016556 E8870C0000                      call make_real
 30609 0001655B C9                              leave
 30610 0001655C C21800                          ret AND_KILL_FRAME(1)
 30611                                  
 30612                                  L_code_ptr_fraction_to_real:
 30613 0001655F C8000000                        enter 0, 0
 30614 00016563 48837D1801                      cmp COUNT, 1
 30615 00016568 0F850C0D0000                    jne L_error_arg_count_1
 30616 0001656E 488B4520                        mov rax, PARAM(0)
 30617                                          assert_fraction(rax)
    53 00016572 803812              <1>  cmp byte [%1], %2
    54 00016575 0F85D30D0000        <1>  jne L_error_incorrect_type
 30618 0001657B FF7001                          push qword [rax + 1]
 30619 0001657E F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 30620 00016584 FF7009                          push qword [rax + 1 + 8]
 30621 00016587 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 30622 0001658D F20F5EC1                        divsd xmm0, xmm1
 30623 00016591 E84C0C0000                      call make_real
 30624 00016596 C9                              leave
 30625 00016597 C21800                          ret AND_KILL_FRAME(1)
 30626                                  
 30627                                  L_code_ptr_char_to_integer:
 30628 0001659A C8000000                        enter 0, 0
 30629 0001659E 48837D1801                      cmp COUNT, 1
 30630 000165A3 0F85D10C0000                    jne L_error_arg_count_1
 30631 000165A9 488B4520                        mov rax, PARAM(0)
 30632                                          assert_char(rax)
    53 000165AD 803802              <1>  cmp byte [%1], %2
    54 000165B0 0F85980D0000        <1>  jne L_error_incorrect_type
 30633 000165B6 8A4001                          mov al, byte [rax + 1]
 30634 000165B9 4825FF000000                    and rax, 255
 30635 000165BF 4889C7                          mov rdi, rax
 30636 000165C2 E8330C0000                      call make_integer
 30637 000165C7 C9                              leave
 30638 000165C8 C21800                          ret AND_KILL_FRAME(1)
 30639                                  
 30640                                  L_code_ptr_integer_to_fraction:
 30641 000165CB C8000000                        enter 0, 0
 30642 000165CF 48837D1801                      cmp COUNT, 1
 30643 000165D4 0F85A00C0000                    jne L_error_arg_count_1
 30644 000165DA 4C8B4520                        mov r8, PARAM(0)
 30645                                          assert_integer(r8)
    53 000165DE 41803811            <1>  cmp byte [%1], %2
    54 000165E2 0F85660D0000        <1>  jne L_error_incorrect_type
 30646 000165E8 BF11000000                      mov rdi, (1 + 8 + 8)
 30647 000165ED E836F1FFFF                      call malloc
 30648 000165F2 498B5801                        mov rbx, qword [r8 + 1]
 30649 000165F6 C60012                          mov byte [rax], T_fraction
 30650 000165F9 48895801                        mov qword [rax + 1], rbx
 30651 000165FD 48C7400901000000                mov qword [rax + 1 + 8], 1
 30652 00016605 C9                              leave
 30653 00016606 C21800                          ret AND_KILL_FRAME(1)
 30654                                  
 30655                                  L_code_ptr_integer_to_char:
 30656 00016609 C8000000                        enter 0, 0
 30657 0001660D 48837D1801                      cmp COUNT, 1
 30658 00016612 0F85620C0000                    jne L_error_arg_count_1
 30659 00016618 488B4520                        mov rax, PARAM(0)
 30660                                          assert_integer(rax)
    53 0001661C 803811              <1>  cmp byte [%1], %2
    54 0001661F 0F85290D0000        <1>  jne L_error_incorrect_type
 30661 00016625 488B5801                        mov rbx, qword [rax + 1]
 30662 00016629 4883FB00                        cmp rbx, 0
 30663 0001662D 0F8EE10B0000                    jle L_error_integer_range
 30664 00016633 4881FB00010000                  cmp rbx, 256
 30665 0001663A 0F8DD40B0000                    jge L_error_integer_range
 30666 00016640 BF02000000                      mov rdi, (1 + 1)
 30667 00016645 E8DEF0FFFF                      call malloc
 30668 0001664A C60002                          mov byte [rax], T_char
 30669 0001664D 885801                          mov byte [rax + 1], bl
 30670 00016650 C9                              leave
 30671 00016651 C21800                          ret AND_KILL_FRAME(1)
 30672                                  
 30673                                  L_code_ptr_trng:
 30674 00016654 C8000000                        enter 0, 0
 30675 00016658 48837D1800                      cmp COUNT, 0
 30676 0001665D 0F85E20B0000                    jne L_error_arg_count_0
 30677 00016663 480FC7F7                        rdrand rdi
 30678 00016667 48D1EF                          shr rdi, 1
 30679 0001666A E88B0B0000                      call make_integer
 30680 0001666F C9                              leave
 30681 00016670 C21000                          ret AND_KILL_FRAME(0)
 30682                                  
 30683                                  L_code_ptr_is_zero:
 30684 00016673 C8000000                        enter 0, 0
 30685 00016677 48837D1801                      cmp COUNT, 1
 30686 0001667C 0F85F80B0000                    jne L_error_arg_count_1
 30687 00016682 488B4520                        mov rax, PARAM(0)
 30688 00016686 803811                          cmp byte [rax], T_integer
 30689 00016689 740F                            je .L_integer
 30690 0001668B 803812                          cmp byte [rax], T_fraction
 30691 0001668E 7413                            je .L_fraction
 30692 00016690 803813                          cmp byte [rax], T_real
 30693 00016693 7417                            je .L_real
 30694 00016695 E9B40C0000                      jmp L_error_incorrect_type
 30695                                  .L_integer:
 30696 0001669A 4883780100                      cmp qword [rax + 1], 0
 30697 0001669F 7429                            je .L_zero
 30698 000166A1 EB1B                            jmp .L_not_zero
 30699                                  .L_fraction:
 30700 000166A3 4883780100                      cmp qword [rax + 1], 0
 30701 000166A8 7420                            je .L_zero
 30702 000166AA EB12                            jmp .L_not_zero
 30703                                  .L_real:
 30704 000166AC 660FEFC0                        pxor xmm0, xmm0
 30705 000166B0 FF7001                          push qword [rax + 1]
 30706 000166B3 F20F100C24                      movsd xmm1, qword [rsp]
 30707 000166B8 660F2EC1                        ucomisd xmm0, xmm1
 30708 000166BC 740C                            je .L_zero
 30709                                  .L_not_zero:
 30710 000166BE 48B8-                           mov rax, sob_boolean_false
 30710 000166C0 [0200000000000000] 
 30711 000166C8 EB0A                            jmp .L_end
 30712                                  .L_zero:
 30713 000166CA 48B8-                           mov rax, sob_boolean_true
 30713 000166CC [0300000000000000] 
 30714                                  .L_end:
 30715 000166D4 C9                              leave
 30716 000166D5 C21800                          ret AND_KILL_FRAME(1)
 30717                                  
 30718                                  L_code_ptr_is_integer:
 30719 000166D8 C8000000                        enter 0, 0
 30720 000166DC 48837D1801                      cmp COUNT, 1
 30721 000166E1 0F85930B0000                    jne L_error_arg_count_1
 30722 000166E7 488B4520                        mov rax, PARAM(0)
 30723 000166EB 803811                          cmp byte [rax], T_integer
 30724 000166EE 750C                            jne .L_false
 30725 000166F0 48B8-                           mov rax, sob_boolean_true
 30725 000166F2 [0300000000000000] 
 30726 000166FA EB0A                            jmp .L_exit
 30727                                  .L_false:
 30728 000166FC 48B8-                           mov rax, sob_boolean_false
 30728 000166FE [0200000000000000] 
 30729                                  .L_exit:
 30730 00016706 C9                              leave
 30731 00016707 C21800                          ret AND_KILL_FRAME(1)
 30732                                  
 30733                                  L_code_ptr_raw_bin_add_rr:
 30734 0001670A C8000000                        enter 0, 0
 30735 0001670E 48837D1802                      cmp COUNT, 2
 30736 00016713 0F85960B0000                    jne L_error_arg_count_2
 30737 00016719 488B5D20                        mov rbx, PARAM(0)
 30738                                          assert_real(rbx)
    53 0001671D 803B13              <1>  cmp byte [%1], %2
    54 00016720 0F85280C0000        <1>  jne L_error_incorrect_type
 30739 00016726 488B4D28                        mov rcx, PARAM(1)
 30740                                          assert_real(rcx)
    53 0001672A 803913              <1>  cmp byte [%1], %2
    54 0001672D 0F851B0C0000        <1>  jne L_error_incorrect_type
 30741 00016733 F20F104301                      movsd xmm0, qword [rbx + 1]
 30742 00016738 F20F104901                      movsd xmm1, qword [rcx + 1]
 30743 0001673D F20F58C1                        addsd xmm0, xmm1
 30744 00016741 E89C0A0000                      call make_real
 30745 00016746 C9                              leave
 30746 00016747 C22000                          ret AND_KILL_FRAME(2)
 30747                                  
 30748                                  L_code_ptr_raw_bin_sub_rr:
 30749 0001674A C8000000                        enter 0, 0
 30750 0001674E 48837D1802                      cmp COUNT, 2
 30751 00016753 0F85560B0000                    jne L_error_arg_count_2
 30752 00016759 488B5D20                        mov rbx, PARAM(0)
 30753                                          assert_real(rbx)
    53 0001675D 803B13              <1>  cmp byte [%1], %2
    54 00016760 0F85E80B0000        <1>  jne L_error_incorrect_type
 30754 00016766 488B4D28                        mov rcx, PARAM(1)
 30755                                          assert_real(rcx)
    53 0001676A 803913              <1>  cmp byte [%1], %2
    54 0001676D 0F85DB0B0000        <1>  jne L_error_incorrect_type
 30756 00016773 F20F104301                      movsd xmm0, qword [rbx + 1]
 30757 00016778 F20F104901                      movsd xmm1, qword [rcx + 1]
 30758 0001677D F20F5CC1                        subsd xmm0, xmm1
 30759 00016781 E85C0A0000                      call make_real
 30760 00016786 C9                              leave
 30761 00016787 C22000                          ret AND_KILL_FRAME(2)
 30762                                  
 30763                                  L_code_ptr_raw_bin_mul_rr:
 30764 0001678A C8000000                        enter 0, 0
 30765 0001678E 48837D1802                      cmp COUNT, 2
 30766 00016793 0F85160B0000                    jne L_error_arg_count_2
 30767 00016799 488B5D20                        mov rbx, PARAM(0)
 30768                                          assert_real(rbx)
    53 0001679D 803B13              <1>  cmp byte [%1], %2
    54 000167A0 0F85A80B0000        <1>  jne L_error_incorrect_type
 30769 000167A6 488B4D28                        mov rcx, PARAM(1)
 30770                                          assert_real(rcx)
    53 000167AA 803913              <1>  cmp byte [%1], %2
    54 000167AD 0F859B0B0000        <1>  jne L_error_incorrect_type
 30771 000167B3 F20F104301                      movsd xmm0, qword [rbx + 1]
 30772 000167B8 F20F104901                      movsd xmm1, qword [rcx + 1]
 30773 000167BD F20F59C1                        mulsd xmm0, xmm1
 30774 000167C1 E81C0A0000                      call make_real
 30775 000167C6 C9                              leave
 30776 000167C7 C22000                          ret AND_KILL_FRAME(2)
 30777                                  
 30778                                  L_code_ptr_raw_bin_div_rr:
 30779 000167CA C8000000                        enter 0, 0
 30780 000167CE 48837D1802                      cmp COUNT, 2
 30781 000167D3 0F85D60A0000                    jne L_error_arg_count_2
 30782 000167D9 488B5D20                        mov rbx, PARAM(0)
 30783                                          assert_real(rbx)
    53 000167DD 803B13              <1>  cmp byte [%1], %2
    54 000167E0 0F85680B0000        <1>  jne L_error_incorrect_type
 30784 000167E6 488B4D28                        mov rcx, PARAM(1)
 30785                                          assert_real(rcx)
    53 000167EA 803913              <1>  cmp byte [%1], %2
    54 000167ED 0F855B0B0000        <1>  jne L_error_incorrect_type
 30786 000167F3 F20F104301                      movsd xmm0, qword [rbx + 1]
 30787 000167F8 F20F104901                      movsd xmm1, qword [rcx + 1]
 30788 000167FD 660FEFD2                        pxor xmm2, xmm2
 30789 00016801 660F2ECA                        ucomisd xmm1, xmm2
 30790 00016805 0F84740B0000                    je L_error_division_by_zero
 30791 0001680B F20F5EC1                        divsd xmm0, xmm1
 30792 0001680F E8CE090000                      call make_real
 30793 00016814 C9                              leave
 30794 00016815 C22000                          ret AND_KILL_FRAME(2)
 30795                                  
 30796                                  L_code_ptr_raw_bin_add_zz:
 30797 00016818 C8000000                	enter 0, 0
 30798 0001681C 48837D1802              	cmp COUNT, 2
 30799 00016821 0F85880A0000            	jne L_error_arg_count_2
 30800 00016827 4C8B4520                	mov r8, PARAM(0)
 30801                                  	assert_integer(r8)
    53 0001682B 41803811            <1>  cmp byte [%1], %2
    54 0001682F 0F85190B0000        <1>  jne L_error_incorrect_type
 30802 00016835 4C8B4D28                	mov r9, PARAM(1)
 30803                                  	assert_integer(r9)
    53 00016839 41803911            <1>  cmp byte [%1], %2
    54 0001683D 0F850B0B0000        <1>  jne L_error_incorrect_type
 30804 00016843 498B7801                	mov rdi, qword [r8 + 1]
 30805 00016847 49037901                	add rdi, qword [r9 + 1]
 30806 0001684B E8AA090000              	call make_integer
 30807 00016850 C9                      	leave
 30808 00016851 C22000                  	ret AND_KILL_FRAME(2)
 30809                                  	
 30810                                  L_code_ptr_raw_bin_add_qq:
 30811 00016854 C8000000                        enter 0, 0
 30812 00016858 48837D1802                      cmp COUNT, 2
 30813 0001685D 0F854C0A0000                    jne L_error_arg_count_2
 30814 00016863 4C8B4520                        mov r8, PARAM(0)
 30815                                          assert_fraction(r8)
    53 00016867 41803812            <1>  cmp byte [%1], %2
    54 0001686B 0F85DD0A0000        <1>  jne L_error_incorrect_type
 30816 00016871 4C8B4D28                        mov r9, PARAM(1)
 30817                                          assert_fraction(r9)
    53 00016875 41803912            <1>  cmp byte [%1], %2
    54 00016879 0F85CF0A0000        <1>  jne L_error_incorrect_type
 30818 0001687F 498B4001                        mov rax, qword [r8 + 1] ; num1
 30819 00016883 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 30820 00016887 4899                            cqo
 30821 00016889 48F7EB                          imul rbx
 30822 0001688C 4889C6                          mov rsi, rax
 30823 0001688F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30824 00016893 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 30825 00016897 4899                            cqo
 30826 00016899 48F7EB                          imul rbx
 30827 0001689C 4801C6                          add rsi, rax
 30828 0001689F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30829 000168A3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 30830 000168A7 4899                            cqo
 30831 000168A9 48F7EB                          imul rbx
 30832 000168AC 4889C7                          mov rdi, rax
 30833 000168AF E8DE010000                      call normalize_fraction
 30834 000168B4 C9                              leave
 30835 000168B5 C22000                          ret AND_KILL_FRAME(2)
 30836                                  
 30837                                  L_code_ptr_raw_bin_sub_zz:
 30838 000168B8 C8000000                	enter 0, 0
 30839 000168BC 48837D1802              	cmp COUNT, 2
 30840 000168C1 0F85E8090000            	jne L_error_arg_count_2
 30841 000168C7 4C8B4520                	mov r8, PARAM(0)
 30842                                  	assert_integer(r8)
    53 000168CB 41803811            <1>  cmp byte [%1], %2
    54 000168CF 0F85790A0000        <1>  jne L_error_incorrect_type
 30843 000168D5 4C8B4D28                	mov r9, PARAM(1)
 30844                                  	assert_integer(r9)
    53 000168D9 41803911            <1>  cmp byte [%1], %2
    54 000168DD 0F856B0A0000        <1>  jne L_error_incorrect_type
 30845 000168E3 498B7801                	mov rdi, qword [r8 + 1]
 30846 000168E7 492B7901                	sub rdi, qword [r9 + 1]
 30847 000168EB E80A090000              	call make_integer
 30848 000168F0 C9                      	leave
 30849 000168F1 C22000                  	ret AND_KILL_FRAME(2)
 30850                                  
 30851                                  L_code_ptr_raw_bin_sub_qq:
 30852 000168F4 C8000000                        enter 0, 0
 30853 000168F8 48837D1802                      cmp COUNT, 2
 30854 000168FD 0F85AC090000                    jne L_error_arg_count_2
 30855 00016903 4C8B4520                        mov r8, PARAM(0)
 30856                                          assert_fraction(r8)
    53 00016907 41803812            <1>  cmp byte [%1], %2
    54 0001690B 0F853D0A0000        <1>  jne L_error_incorrect_type
 30857 00016911 4C8B4D28                        mov r9, PARAM(1)
 30858                                          assert_fraction(r9)
    53 00016915 41803912            <1>  cmp byte [%1], %2
    54 00016919 0F852F0A0000        <1>  jne L_error_incorrect_type
 30859 0001691F 498B4001                        mov rax, qword [r8 + 1] ; num1
 30860 00016923 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 30861 00016927 4899                            cqo
 30862 00016929 48F7EB                          imul rbx
 30863 0001692C 4889C6                          mov rsi, rax
 30864 0001692F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30865 00016933 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 30866 00016937 4899                            cqo
 30867 00016939 48F7EB                          imul rbx
 30868 0001693C 4829C6                          sub rsi, rax
 30869 0001693F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30870 00016943 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 30871 00016947 4899                            cqo
 30872 00016949 48F7EB                          imul rbx
 30873 0001694C 4889C7                          mov rdi, rax
 30874 0001694F E83E010000                      call normalize_fraction
 30875 00016954 C9                              leave
 30876 00016955 C22000                          ret AND_KILL_FRAME(2)
 30877                                  
 30878                                  L_code_ptr_raw_bin_mul_zz:
 30879 00016958 C8000000                	enter 0, 0
 30880 0001695C 48837D1802              	cmp COUNT, 2
 30881 00016961 0F8548090000            	jne L_error_arg_count_2
 30882 00016967 4C8B4520                	mov r8, PARAM(0)
 30883                                  	assert_integer(r8)
    53 0001696B 41803811            <1>  cmp byte [%1], %2
    54 0001696F 0F85D9090000        <1>  jne L_error_incorrect_type
 30884 00016975 4C8B4D28                	mov r9, PARAM(1)
 30885                                  	assert_integer(r9)
    53 00016979 41803911            <1>  cmp byte [%1], %2
    54 0001697D 0F85CB090000        <1>  jne L_error_incorrect_type
 30886 00016983 4899                    	cqo
 30887 00016985 498B4001                	mov rax, qword [r8 + 1]
 30888 00016989 49F76101                	mul qword [r9 + 1]
 30889 0001698D 4889C7                  	mov rdi, rax
 30890 00016990 E865080000              	call make_integer
 30891 00016995 C9                      	leave
 30892 00016996 C22000                  	ret AND_KILL_FRAME(2)
 30893                                  
 30894                                  L_code_ptr_raw_bin_mul_qq:
 30895 00016999 C8000000                        enter 0, 0
 30896 0001699D 48837D1802                      cmp COUNT, 2
 30897 000169A2 0F8507090000                    jne L_error_arg_count_2
 30898 000169A8 4C8B4520                        mov r8, PARAM(0)
 30899                                          assert_fraction(r8)
    53 000169AC 41803812            <1>  cmp byte [%1], %2
    54 000169B0 0F8598090000        <1>  jne L_error_incorrect_type
 30900 000169B6 4C8B4D28                        mov r9, PARAM(1)
 30901                                          assert_fraction(r9)
    53 000169BA 41803912            <1>  cmp byte [%1], %2
    54 000169BE 0F858A090000        <1>  jne L_error_incorrect_type
 30902 000169C4 498B4001                        mov rax, qword [r8 + 1] ; num1
 30903 000169C8 498B5901                        mov rbx, qword [r9 + 1] ; num2
 30904 000169CC 4899                            cqo
 30905 000169CE 48F7EB                          imul rbx
 30906 000169D1 4889C6                          mov rsi, rax
 30907 000169D4 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30908 000169D8 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 30909 000169DC 4899                            cqo
 30910 000169DE 48F7EB                          imul rbx
 30911 000169E1 4889C7                          mov rdi, rax
 30912 000169E4 E8A9000000                      call normalize_fraction
 30913 000169E9 C9                              leave
 30914 000169EA C22000                          ret AND_KILL_FRAME(2)
 30915                                          
 30916                                  L_code_ptr_raw_bin_div_zz:
 30917 000169ED C8000000                	enter 0, 0
 30918 000169F1 48837D1802              	cmp COUNT, 2
 30919 000169F6 0F85B3080000            	jne L_error_arg_count_2
 30920 000169FC 4C8B4520                	mov r8, PARAM(0)
 30921                                  	assert_integer(r8)
    53 00016A00 41803811            <1>  cmp byte [%1], %2
    54 00016A04 0F8544090000        <1>  jne L_error_incorrect_type
 30922 00016A0A 4C8B4D28                	mov r9, PARAM(1)
 30923                                  	assert_integer(r9)
    53 00016A0E 41803911            <1>  cmp byte [%1], %2
    54 00016A12 0F8536090000        <1>  jne L_error_incorrect_type
 30924 00016A18 498B7901                	mov rdi, qword [r9 + 1]
 30925 00016A1C 4883FF00                	cmp rdi, 0
 30926 00016A20 0F8459090000            	je L_error_division_by_zero
 30927 00016A26 498B7001                	mov rsi, qword [r8 + 1]
 30928 00016A2A E863000000              	call normalize_fraction
 30929 00016A2F C9                      	leave
 30930 00016A30 C22000                  	ret AND_KILL_FRAME(2)
 30931                                  
 30932                                  L_code_ptr_raw_bin_div_qq:
 30933 00016A33 C8000000                        enter 0, 0
 30934 00016A37 48837D1802                      cmp COUNT, 2
 30935 00016A3C 0F856D080000                    jne L_error_arg_count_2
 30936 00016A42 4C8B4520                        mov r8, PARAM(0)
 30937                                          assert_fraction(r8)
    53 00016A46 41803812            <1>  cmp byte [%1], %2
    54 00016A4A 0F85FE080000        <1>  jne L_error_incorrect_type
 30938 00016A50 4C8B4D28                        mov r9, PARAM(1)
 30939                                          assert_fraction(r9)
    53 00016A54 41803912            <1>  cmp byte [%1], %2
    54 00016A58 0F85F0080000        <1>  jne L_error_incorrect_type
 30940 00016A5E 4983790100                      cmp qword [r9 + 1], 0
 30941 00016A63 0F8416090000                    je L_error_division_by_zero
 30942 00016A69 498B4001                        mov rax, qword [r8 + 1] ; num1
 30943 00016A6D 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 30944 00016A71 4899                            cqo
 30945 00016A73 48F7EB                          imul rbx
 30946 00016A76 4889C6                          mov rsi, rax
 30947 00016A79 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 30948 00016A7D 498B5901                        mov rbx, qword [r9 + 1] ; num2
 30949 00016A81 4899                            cqo
 30950 00016A83 48F7EB                          imul rbx
 30951 00016A86 4889C7                          mov rdi, rax
 30952 00016A89 E804000000                      call normalize_fraction
 30953 00016A8E C9                              leave
 30954 00016A8F C22000                          ret AND_KILL_FRAME(2)
 30955                                          
 30956                                  normalize_fraction:
 30957 00016A92 56                              push rsi
 30958 00016A93 57                              push rdi
 30959 00016A94 E859000000                      call gcd
 30960 00016A99 4889C3                          mov rbx, rax
 30961 00016A9C 58                              pop rax
 30962 00016A9D 4899                            cqo
 30963 00016A9F 48F7FB                          idiv rbx
 30964 00016AA2 4989C0                          mov r8, rax
 30965 00016AA5 58                              pop rax
 30966 00016AA6 4899                            cqo
 30967 00016AA8 48F7FB                          idiv rbx
 30968 00016AAB 4989C1                          mov r9, rax
 30969 00016AAE 4983F900                        cmp r9, 0
 30970 00016AB2 741C                            je .L_zero
 30971 00016AB4 4983F801                        cmp r8, 1
 30972 00016AB8 7421                            je .L_int
 30973 00016ABA BF11000000                      mov rdi, (1 + 8 + 8)
 30974 00016ABF E864ECFFFF                      call malloc
 30975 00016AC4 C60012                          mov byte [rax], T_fraction
 30976 00016AC7 4C894801                        mov qword [rax + 1], r9
 30977 00016ACB 4C894009                        mov qword [rax + 1 + 8], r8
 30978 00016ACF C3                              ret
 30979                                  .L_zero:
 30980 00016AD0 BF00000000                      mov rdi, 0
 30981 00016AD5 E820070000                      call make_integer
 30982 00016ADA C3                              ret
 30983                                  .L_int:
 30984 00016ADB 4C89CF                          mov rdi, r9
 30985 00016ADE E817070000                      call make_integer
 30986 00016AE3 C3                              ret
 30987                                  
 30988                                  iabs:
 30989 00016AE4 4889F8                          mov rax, rdi
 30990 00016AE7 4883F800                        cmp rax, 0
 30991 00016AEB 7C01                            jl .Lneg
 30992 00016AED C3                              ret
 30993                                  .Lneg:
 30994 00016AEE 48F7D8                          neg rax
 30995 00016AF1 C3                              ret
 30996                                  
 30997                                  gcd:
 30998 00016AF2 E8EDFFFFFF                      call iabs
 30999 00016AF7 4889C3                          mov rbx, rax
 31000 00016AFA 4889F7                          mov rdi, rsi
 31001 00016AFD E8E2FFFFFF                      call iabs
 31002 00016B02 4883F800                        cmp rax, 0
 31003 00016B06 7502                            jne .L0
 31004 00016B08 4893                            xchg rax, rbx
 31005                                  .L0:
 31006 00016B0A 4883FB00                        cmp rbx, 0
 31007 00016B0E 740C                            je .L1
 31008 00016B10 4899                            cqo
 31009 00016B12 48F7F3                          div rbx
 31010 00016B15 4889D0                          mov rax, rdx
 31011 00016B18 4893                            xchg rax, rbx
 31012 00016B1A EBEE                            jmp .L0
 31013                                  .L1:
 31014 00016B1C C3                              ret
 31015                                  
 31016                                  L_code_ptr_error:
 31017 00016B1D C8000000                        enter 0, 0
 31018 00016B21 48837D1802                      cmp COUNT, 2
 31019 00016B26 0F8583070000                    jne L_error_arg_count_2
 31020 00016B2C 488B7520                        mov rsi, PARAM(0)
 31021                                          assert_interned_symbol(rsi)
    53 00016B30 803E41              <1>  cmp byte [%1], %2
    54 00016B33 0F8515080000        <1>  jne L_error_incorrect_type
 31022 00016B39 488B7528                        mov rsi, PARAM(1)
 31023                                          assert_string(rsi)
    53 00016B3D 803E03              <1>  cmp byte [%1], %2
    54 00016B40 0F8508080000        <1>  jne L_error_incorrect_type
 31024 00016B46 48BF-                           mov rdi, fmt_scheme_error_part_1
 31024 00016B48 [851D000000000000] 
 31025 00016B50 B800000000                      mov rax, 0
 31026                                          ENTER
    44 00016B55 C8000000            <1>  enter 0, 0
    45 00016B59 4883E4F0            <1>  and rsp, ~15
 31027 00016B5D E8(00000000)                    call printf
 31028                                          LEAVE
    49 00016B62 C9                  <1>  leave
 31029 00016B63 488B7D20                        mov rdi, PARAM(0)
 31030 00016B67 E8FAECFFFF                      call print_sexpr
 31031 00016B6C 48BF-                           mov rdi, fmt_scheme_error_part_2
 31031 00016B6E [991D000000000000] 
 31032 00016B76 B800000000                      mov rax, 0
 31033                                          ENTER
    44 00016B7B C8000000            <1>  enter 0, 0
    45 00016B7F 4883E4F0            <1>  and rsp, ~15
 31034 00016B83 E8(00000000)                    call printf
 31035                                          LEAVE
    49 00016B88 C9                  <1>  leave
 31036 00016B89 488B4528                        mov rax, PARAM(1)       ; sob_string
 31037 00016B8D BE01000000                      mov rsi, 1              ; size = 1 byte
 31038 00016B92 488B5001                        mov rdx, qword [rax + 1] ; length
 31039 00016B96 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 31040 00016B9A 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 31041                                  	ENTER
    44 00016BA2 C8000000            <1>  enter 0, 0
    45 00016BA6 4883E4F0            <1>  and rsp, ~15
 31042 00016BAA E8(00000000)                    call fwrite
 31043                                  	LEAVE
    49 00016BAF C9                  <1>  leave
 31044 00016BB0 48BF-                           mov rdi, fmt_scheme_error_part_3
 31044 00016BB2 [DB1D000000000000] 
 31045 00016BBA B800000000                      mov rax, 0
 31046                                          ENTER
    44 00016BBF C8000000            <1>  enter 0, 0
    45 00016BC3 4883E4F0            <1>  and rsp, ~15
 31047 00016BC7 E8(00000000)                    call printf
 31048                                          LEAVE
    49 00016BCC C9                  <1>  leave
 31049 00016BCD 48C7C0F7FFFFFF                  mov rax, -9
 31050 00016BD4 E8(00000000)                    call exit
 31051                                  
 31052                                  L_code_ptr_raw_less_than_rr:
 31053 00016BD9 C8000000                        enter 0, 0
 31054 00016BDD 48837D1802                      cmp COUNT, 2
 31055 00016BE2 0F85C7060000                    jne L_error_arg_count_2
 31056 00016BE8 488B7520                        mov rsi, PARAM(0)
 31057                                          assert_real(rsi)
    53 00016BEC 803E13              <1>  cmp byte [%1], %2
    54 00016BEF 0F8559070000        <1>  jne L_error_incorrect_type
 31058 00016BF5 488B7D28                        mov rdi, PARAM(1)
 31059                                          assert_real(rdi)
    53 00016BF9 803F13              <1>  cmp byte [%1], %2
    54 00016BFC 0F854C070000        <1>  jne L_error_incorrect_type
 31060 00016C02 F20F104601                      movsd xmm0, qword [rsi + 1]
 31061 00016C07 F20F104F01                      movsd xmm1, qword [rdi + 1]
 31062 00016C0C 660F2FC1                        comisd xmm0, xmm1
 31063 00016C10 730C                            jae .L_false
 31064 00016C12 48B8-                           mov rax, sob_boolean_true
 31064 00016C14 [0300000000000000] 
 31065 00016C1C EB0A                            jmp .L_exit
 31066                                  .L_false:
 31067 00016C1E 48B8-                           mov rax, sob_boolean_false
 31067 00016C20 [0200000000000000] 
 31068                                  .L_exit:
 31069 00016C28 C9                              leave
 31070 00016C29 C22000                          ret AND_KILL_FRAME(2)
 31071                                          
 31072                                  L_code_ptr_raw_less_than_zz:
 31073 00016C2C C8000000                	enter 0, 0
 31074 00016C30 48837D1802              	cmp COUNT, 2
 31075 00016C35 0F8574060000            	jne L_error_arg_count_2
 31076 00016C3B 4C8B4520                	mov r8, PARAM(0)
 31077                                  	assert_integer(r8)
    53 00016C3F 41803811            <1>  cmp byte [%1], %2
    54 00016C43 0F8505070000        <1>  jne L_error_incorrect_type
 31078 00016C49 4C8B4D28                	mov r9, PARAM(1)
 31079                                  	assert_integer(r9)
    53 00016C4D 41803911            <1>  cmp byte [%1], %2
    54 00016C51 0F85F7060000        <1>  jne L_error_incorrect_type
 31080 00016C57 498B7801                	mov rdi, qword [r8 + 1]
 31081 00016C5B 493B7901                	cmp rdi, qword [r9 + 1]
 31082 00016C5F 7D0C                    	jge .L_false
 31083 00016C61 48B8-                   	mov rax, sob_boolean_true
 31083 00016C63 [0300000000000000] 
 31084 00016C6B EB0A                    	jmp .L_exit
 31085                                  .L_false:
 31086 00016C6D 48B8-                   	mov rax, sob_boolean_false
 31086 00016C6F [0200000000000000] 
 31087                                  .L_exit:
 31088 00016C77 C9                      	leave
 31089 00016C78 C22000                  	ret AND_KILL_FRAME(2)
 31090                                  
 31091                                  L_code_ptr_raw_less_than_qq:
 31092 00016C7B C8000000                        enter 0, 0
 31093 00016C7F 48837D1802                      cmp COUNT, 2
 31094 00016C84 0F8525060000                    jne L_error_arg_count_2
 31095 00016C8A 488B7520                        mov rsi, PARAM(0)
 31096                                          assert_fraction(rsi)
    53 00016C8E 803E12              <1>  cmp byte [%1], %2
    54 00016C91 0F85B7060000        <1>  jne L_error_incorrect_type
 31097 00016C97 488B7D28                        mov rdi, PARAM(1)
 31098                                          assert_fraction(rdi)
    53 00016C9B 803F12              <1>  cmp byte [%1], %2
    54 00016C9E 0F85AA060000        <1>  jne L_error_incorrect_type
 31099 00016CA4 488B4601                        mov rax, qword [rsi + 1] ; num1
 31100 00016CA8 4899                            cqo
 31101 00016CAA 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 31102 00016CAE 4889C1                          mov rcx, rax
 31103 00016CB1 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 31104 00016CB5 4899                            cqo
 31105 00016CB7 48F76F01                        imul qword [rdi + 1]          ; num2
 31106 00016CBB 4829C1                          sub rcx, rax
 31107 00016CBE 7D0C                            jge .L_false
 31108 00016CC0 48B8-                           mov rax, sob_boolean_true
 31108 00016CC2 [0300000000000000] 
 31109 00016CCA EB0A                            jmp .L_exit
 31110                                  .L_false:
 31111 00016CCC 48B8-                           mov rax, sob_boolean_false
 31111 00016CCE [0200000000000000] 
 31112                                  .L_exit:
 31113 00016CD6 C9                              leave
 31114 00016CD7 C22000                          ret AND_KILL_FRAME(2)
 31115                                  
 31116                                  L_code_ptr_raw_equal_rr:
 31117 00016CDA C8000000                        enter 0, 0
 31118 00016CDE 48837D1802                      cmp COUNT, 2
 31119 00016CE3 0F85C6050000                    jne L_error_arg_count_2
 31120 00016CE9 488B7520                        mov rsi, PARAM(0)
 31121                                          assert_real(rsi)
    53 00016CED 803E13              <1>  cmp byte [%1], %2
    54 00016CF0 0F8558060000        <1>  jne L_error_incorrect_type
 31122 00016CF6 488B7D28                        mov rdi, PARAM(1)
 31123                                          assert_real(rdi)
    53 00016CFA 803F13              <1>  cmp byte [%1], %2
    54 00016CFD 0F854B060000        <1>  jne L_error_incorrect_type
 31124 00016D03 F20F104601                      movsd xmm0, qword [rsi + 1]
 31125 00016D08 F20F104F01                      movsd xmm1, qword [rdi + 1]
 31126 00016D0D 660F2FC1                        comisd xmm0, xmm1
 31127 00016D11 750C                            jne .L_false
 31128 00016D13 48B8-                           mov rax, sob_boolean_true
 31128 00016D15 [0300000000000000] 
 31129 00016D1D EB0A                            jmp .L_exit
 31130                                  .L_false:
 31131 00016D1F 48B8-                           mov rax, sob_boolean_false
 31131 00016D21 [0200000000000000] 
 31132                                  .L_exit:
 31133 00016D29 C9                              leave
 31134 00016D2A C22000                          ret AND_KILL_FRAME(2)
 31135                                          
 31136                                  L_code_ptr_raw_equal_zz:
 31137 00016D2D C8000000                	enter 0, 0
 31138 00016D31 48837D1802              	cmp COUNT, 2
 31139 00016D36 0F8573050000            	jne L_error_arg_count_2
 31140 00016D3C 4C8B4520                	mov r8, PARAM(0)
 31141                                  	assert_integer(r8)
    53 00016D40 41803811            <1>  cmp byte [%1], %2
    54 00016D44 0F8504060000        <1>  jne L_error_incorrect_type
 31142 00016D4A 4C8B4D28                	mov r9, PARAM(1)
 31143                                  	assert_integer(r9)
    53 00016D4E 41803911            <1>  cmp byte [%1], %2
    54 00016D52 0F85F6050000        <1>  jne L_error_incorrect_type
 31144 00016D58 498B7801                	mov rdi, qword [r8 + 1]
 31145 00016D5C 493B7901                	cmp rdi, qword [r9 + 1]
 31146 00016D60 750C                    	jne .L_false
 31147 00016D62 48B8-                   	mov rax, sob_boolean_true
 31147 00016D64 [0300000000000000] 
 31148 00016D6C EB0A                    	jmp .L_exit
 31149                                  .L_false:
 31150 00016D6E 48B8-                   	mov rax, sob_boolean_false
 31150 00016D70 [0200000000000000] 
 31151                                  .L_exit:
 31152 00016D78 C9                      	leave
 31153 00016D79 C22000                  	ret AND_KILL_FRAME(2)
 31154                                  
 31155                                  L_code_ptr_raw_equal_qq:
 31156 00016D7C C8000000                        enter 0, 0
 31157 00016D80 48837D1802                      cmp COUNT, 2
 31158 00016D85 0F8524050000                    jne L_error_arg_count_2
 31159 00016D8B 488B7520                        mov rsi, PARAM(0)
 31160                                          assert_fraction(rsi)
    53 00016D8F 803E12              <1>  cmp byte [%1], %2
    54 00016D92 0F85B6050000        <1>  jne L_error_incorrect_type
 31161 00016D98 488B7D28                        mov rdi, PARAM(1)
 31162                                          assert_fraction(rdi)
    53 00016D9C 803F12              <1>  cmp byte [%1], %2
    54 00016D9F 0F85A9050000        <1>  jne L_error_incorrect_type
 31163 00016DA5 488B4601                        mov rax, qword [rsi + 1] ; num1
 31164 00016DA9 4899                            cqo
 31165 00016DAB 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 31166 00016DAF 4889C1                          mov rcx, rax
 31167 00016DB2 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 31168 00016DB6 4899                            cqo
 31169 00016DB8 48F76F01                        imul qword [rdi + 1]          ; num2
 31170 00016DBC 4829C1                          sub rcx, rax
 31171 00016DBF 750C                            jne .L_false
 31172 00016DC1 48B8-                           mov rax, sob_boolean_true
 31172 00016DC3 [0300000000000000] 
 31173 00016DCB EB0A                            jmp .L_exit
 31174                                  .L_false:
 31175 00016DCD 48B8-                           mov rax, sob_boolean_false
 31175 00016DCF [0200000000000000] 
 31176                                  .L_exit:
 31177 00016DD7 C9                              leave
 31178 00016DD8 C22000                          ret AND_KILL_FRAME(2)
 31179                                  
 31180                                  L_code_ptr_quotient:
 31181 00016DDB C8000000                        enter 0, 0
 31182 00016DDF 48837D1802                      cmp COUNT, 2
 31183 00016DE4 0F85C5040000                    jne L_error_arg_count_2
 31184 00016DEA 488B7520                        mov rsi, PARAM(0)
 31185                                          assert_integer(rsi)
    53 00016DEE 803E11              <1>  cmp byte [%1], %2
    54 00016DF1 0F8557050000        <1>  jne L_error_incorrect_type
 31186 00016DF7 488B7D28                        mov rdi, PARAM(1)
 31187                                          assert_integer(rdi)
    53 00016DFB 803F11              <1>  cmp byte [%1], %2
    54 00016DFE 0F854A050000        <1>  jne L_error_incorrect_type
 31188 00016E04 488B4601                        mov rax, qword [rsi + 1]
 31189 00016E08 488B5F01                        mov rbx, qword [rdi + 1]
 31190 00016E0C 4883FB00                        cmp rbx, 0
 31191 00016E10 0F8469050000                    je L_error_division_by_zero
 31192 00016E16 4899                            cqo
 31193 00016E18 48F7FB                          idiv rbx
 31194 00016E1B 4889C7                          mov rdi, rax
 31195 00016E1E E8D7030000                      call make_integer
 31196 00016E23 C9                              leave
 31197 00016E24 C22000                          ret AND_KILL_FRAME(2)
 31198                                          
 31199                                  L_code_ptr_remainder:
 31200 00016E27 C8000000                        enter 0, 0
 31201 00016E2B 48837D1802                      cmp COUNT, 2
 31202 00016E30 0F8579040000                    jne L_error_arg_count_2
 31203 00016E36 488B7520                        mov rsi, PARAM(0)
 31204                                          assert_integer(rsi)
    53 00016E3A 803E11              <1>  cmp byte [%1], %2
    54 00016E3D 0F850B050000        <1>  jne L_error_incorrect_type
 31205 00016E43 488B7D28                        mov rdi, PARAM(1)
 31206                                          assert_integer(rdi)
    53 00016E47 803F11              <1>  cmp byte [%1], %2
    54 00016E4A 0F85FE040000        <1>  jne L_error_incorrect_type
 31207 00016E50 488B4601                        mov rax, qword [rsi + 1]
 31208 00016E54 488B5F01                        mov rbx, qword [rdi + 1]
 31209 00016E58 4883FB00                        cmp rbx, 0
 31210 00016E5C 0F841D050000                    je L_error_division_by_zero
 31211 00016E62 4899                            cqo
 31212 00016E64 48F7FB                          idiv rbx
 31213 00016E67 4889D7                          mov rdi, rdx
 31214 00016E6A E88B030000                      call make_integer
 31215 00016E6F C9                              leave
 31216 00016E70 C22000                          ret AND_KILL_FRAME(2)
 31217                                  
 31218                                  L_code_ptr_set_car:
 31219 00016E73 C8000000                        enter 0, 0
 31220 00016E77 48837D1802                      cmp COUNT, 2
 31221 00016E7C 0F852D040000                    jne L_error_arg_count_2
 31222 00016E82 488B4520                        mov rax, PARAM(0)
 31223                                          assert_pair(rax)
    53 00016E86 803821              <1>  cmp byte [%1], %2
    54 00016E89 0F85BF040000        <1>  jne L_error_incorrect_type
 31224 00016E8F 488B5D28                        mov rbx, PARAM(1)
 31225 00016E93 48895801                        mov SOB_PAIR_CAR(rax), rbx
 31226 00016E97 48B8-                           mov rax, sob_void
 31226 00016E99 [0000000000000000] 
 31227 00016EA1 C9                              leave
 31228 00016EA2 C22000                          ret AND_KILL_FRAME(2)
 31229                                  
 31230                                  L_code_ptr_set_cdr:
 31231 00016EA5 C8000000                        enter 0, 0
 31232 00016EA9 48837D1802                      cmp COUNT, 2
 31233 00016EAE 0F85FB030000                    jne L_error_arg_count_2
 31234 00016EB4 488B4520                        mov rax, PARAM(0)
 31235                                          assert_pair(rax)
    53 00016EB8 803821              <1>  cmp byte [%1], %2
    54 00016EBB 0F858D040000        <1>  jne L_error_incorrect_type
 31236 00016EC1 488B5D28                        mov rbx, PARAM(1)
 31237 00016EC5 48895809                        mov SOB_PAIR_CDR(rax), rbx
 31238 00016EC9 48B8-                           mov rax, sob_void
 31238 00016ECB [0000000000000000] 
 31239 00016ED3 C9                              leave
 31240 00016ED4 C22000                          ret AND_KILL_FRAME(2)
 31241                                  
 31242                                  L_code_ptr_string_ref:
 31243 00016ED7 C8000000                        enter 0, 0
 31244 00016EDB 48837D1802                      cmp COUNT, 2
 31245 00016EE0 0F85C9030000                    jne L_error_arg_count_2
 31246 00016EE6 488B7D20                        mov rdi, PARAM(0)
 31247                                          assert_string(rdi)
    53 00016EEA 803F03              <1>  cmp byte [%1], %2
    54 00016EED 0F855B040000        <1>  jne L_error_incorrect_type
 31248 00016EF3 488B7528                        mov rsi, PARAM(1)
 31249                                          assert_integer(rsi)
    53 00016EF7 803E11              <1>  cmp byte [%1], %2
    54 00016EFA 0F854E040000        <1>  jne L_error_incorrect_type
 31250 00016F00 488B5701                        mov rdx, qword [rdi + 1]
 31251 00016F04 488B4E01                        mov rcx, qword [rsi + 1]
 31252 00016F08 4839D1                          cmp rcx, rdx
 31253 00016F0B 0F8D03030000                    jge L_error_integer_range
 31254 00016F11 4883F900                        cmp rcx, 0
 31255 00016F15 0F8CF9020000                    jl L_error_integer_range
 31256 00016F1B 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 31257 00016F1F BF02000000                      mov rdi, 2
 31258 00016F24 E8FFE7FFFF                      call malloc
 31259 00016F29 C60002                          mov byte [rax], T_char
 31260 00016F2C 885801                          mov byte [rax + 1], bl
 31261 00016F2F C9                              leave
 31262 00016F30 C22000                          ret AND_KILL_FRAME(2)
 31263                                  
 31264                                  L_code_ptr_vector_ref:
 31265 00016F33 C8000000                        enter 0, 0
 31266 00016F37 48837D1802                      cmp COUNT, 2
 31267 00016F3C 0F856D030000                    jne L_error_arg_count_2
 31268 00016F42 488B7D20                        mov rdi, PARAM(0)
 31269                                          assert_vector(rdi)
    53 00016F46 803F22              <1>  cmp byte [%1], %2
    54 00016F49 0F85FF030000        <1>  jne L_error_incorrect_type
 31270 00016F4F 488B7528                        mov rsi, PARAM(1)
 31271                                          assert_integer(rsi)
    53 00016F53 803E11              <1>  cmp byte [%1], %2
    54 00016F56 0F85F2030000        <1>  jne L_error_incorrect_type
 31272 00016F5C 488B5701                        mov rdx, qword [rdi + 1]
 31273 00016F60 488B4E01                        mov rcx, qword [rsi + 1]
 31274 00016F64 4839D1                          cmp rcx, rdx
 31275 00016F67 0F8DA7020000                    jge L_error_integer_range
 31276 00016F6D 4883F900                        cmp rcx, 0
 31277 00016F71 0F8C9D020000                    jl L_error_integer_range
 31278 00016F77 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 31279 00016F7C C9                              leave
 31280 00016F7D C22000                          ret AND_KILL_FRAME(2)
 31281                                  
 31282                                  L_code_ptr_vector_set:
 31283 00016F80 C8000000                        enter 0, 0
 31284 00016F84 48837D1803                      cmp COUNT, 3
 31285 00016F89 0F858A030000                    jne L_error_arg_count_3
 31286 00016F8F 488B7D20                        mov rdi, PARAM(0)
 31287                                          assert_vector(rdi)
    53 00016F93 803F22              <1>  cmp byte [%1], %2
    54 00016F96 0F85B2030000        <1>  jne L_error_incorrect_type
 31288 00016F9C 488B7528                        mov rsi, PARAM(1)
 31289                                          assert_integer(rsi)
    53 00016FA0 803E11              <1>  cmp byte [%1], %2
    54 00016FA3 0F85A5030000        <1>  jne L_error_incorrect_type
 31290 00016FA9 488B5701                        mov rdx, qword [rdi + 1]
 31291 00016FAD 488B4E01                        mov rcx, qword [rsi + 1]
 31292 00016FB1 4839D1                          cmp rcx, rdx
 31293 00016FB4 0F8D5A020000                    jge L_error_integer_range
 31294 00016FBA 4883F900                        cmp rcx, 0
 31295 00016FBE 0F8C50020000                    jl L_error_integer_range
 31296 00016FC4 488B4530                        mov rax, PARAM(2)
 31297 00016FC8 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 31298 00016FCD 48B8-                           mov rax, sob_void
 31298 00016FCF [0000000000000000] 
 31299 00016FD7 C9                              leave
 31300 00016FD8 C22800                          ret AND_KILL_FRAME(3)
 31301                                  
 31302                                  L_code_ptr_string_set:
 31303 00016FDB C8000000                        enter 0, 0
 31304 00016FDF 48837D1803                      cmp COUNT, 3
 31305 00016FE4 0F852F030000                    jne L_error_arg_count_3
 31306 00016FEA 488B7D20                        mov rdi, PARAM(0)
 31307                                          assert_string(rdi)
    53 00016FEE 803F03              <1>  cmp byte [%1], %2
    54 00016FF1 0F8557030000        <1>  jne L_error_incorrect_type
 31308 00016FF7 488B7528                        mov rsi, PARAM(1)
 31309                                          assert_integer(rsi)
    53 00016FFB 803E11              <1>  cmp byte [%1], %2
    54 00016FFE 0F854A030000        <1>  jne L_error_incorrect_type
 31310 00017004 488B5701                        mov rdx, qword [rdi + 1]
 31311 00017008 488B4E01                        mov rcx, qword [rsi + 1]
 31312 0001700C 4839D1                          cmp rcx, rdx
 31313 0001700F 0F8DFF010000                    jge L_error_integer_range
 31314 00017015 4883F900                        cmp rcx, 0
 31315 00017019 0F8CF5010000                    jl L_error_integer_range
 31316 0001701F 488B4530                        mov rax, PARAM(2)
 31317                                          assert_char(rax)
    53 00017023 803802              <1>  cmp byte [%1], %2
    54 00017026 0F8522030000        <1>  jne L_error_incorrect_type
 31318 0001702C 8A4001                          mov al, byte [rax + 1]
 31319 0001702F 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 31320 00017033 48B8-                           mov rax, sob_void
 31320 00017035 [0000000000000000] 
 31321 0001703D C9                              leave
 31322 0001703E C22800                          ret AND_KILL_FRAME(3)
 31323                                  
 31324                                  L_code_ptr_make_vector:
 31325 00017041 C8000000                        enter 0, 0
 31326 00017045 48837D1802                      cmp COUNT, 2
 31327 0001704A 0F855F020000                    jne L_error_arg_count_2
 31328 00017050 488B4D20                        mov rcx, PARAM(0)
 31329                                          assert_integer(rcx)
    53 00017054 803911              <1>  cmp byte [%1], %2
    54 00017057 0F85F1020000        <1>  jne L_error_incorrect_type
 31330 0001705D 488B4901                        mov rcx, qword [rcx + 1]
 31331 00017061 4883F900                        cmp rcx, 0
 31332 00017065 0F8CA9010000                    jl L_error_integer_range
 31333 0001706B 488B5528                        mov rdx, PARAM(1)
 31334 0001706F 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 31335 00017077 E8ACE6FFFF                      call malloc
 31336 0001707C C60022                          mov byte [rax], T_vector
 31337 0001707F 48894801                        mov qword [rax + 1], rcx
 31338 00017083 41B800000000                    mov r8, 0
 31339                                  .L0:
 31340 00017089 4939C8                          cmp r8, rcx
 31341 0001708C 740A                            je .L1
 31342 0001708E 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 31343 00017093 49FFC0                          inc r8
 31344 00017096 EBF1                            jmp .L0
 31345                                  .L1:
 31346 00017098 C9                              leave
 31347 00017099 C22000                          ret AND_KILL_FRAME(2)
 31348                                          
 31349                                  L_code_ptr_make_string:
 31350 0001709C C8000000                        enter 0, 0
 31351 000170A0 48837D1802                      cmp COUNT, 2
 31352 000170A5 0F8504020000                    jne L_error_arg_count_2
 31353 000170AB 488B4D20                        mov rcx, PARAM(0)
 31354                                          assert_integer(rcx)
    53 000170AF 803911              <1>  cmp byte [%1], %2
    54 000170B2 0F8596020000        <1>  jne L_error_incorrect_type
 31355 000170B8 488B4901                        mov rcx, qword [rcx + 1]
 31356 000170BC 4883F900                        cmp rcx, 0
 31357 000170C0 0F8C4E010000                    jl L_error_integer_range
 31358 000170C6 488B5528                        mov rdx, PARAM(1)
 31359                                          assert_char(rdx)
    53 000170CA 803A02              <1>  cmp byte [%1], %2
    54 000170CD 0F857B020000        <1>  jne L_error_incorrect_type
 31360 000170D3 8A5201                          mov dl, byte [rdx + 1]
 31361 000170D6 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 31362 000170DA E849E6FFFF                      call malloc
 31363 000170DF C60003                          mov byte [rax], T_string
 31364 000170E2 48894801                        mov qword [rax + 1], rcx
 31365 000170E6 41B800000000                    mov r8, 0
 31366                                  .L0:
 31367 000170EC 4939C8                          cmp r8, rcx
 31368 000170EF 740A                            je .L1
 31369 000170F1 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 31370 000170F6 49FFC0                          inc r8
 31371 000170F9 EBF1                            jmp .L0
 31372                                  .L1:
 31373 000170FB C9                              leave
 31374 000170FC C22000                          ret AND_KILL_FRAME(2)
 31375                                  
 31376                                  L_code_ptr_numerator:
 31377 000170FF C8000000                        enter 0, 0
 31378 00017103 48837D1801                      cmp COUNT, 1
 31379 00017108 0F856C010000                    jne L_error_arg_count_1
 31380 0001710E 488B4520                        mov rax, PARAM(0)
 31381                                          assert_fraction(rax)
    53 00017112 803812              <1>  cmp byte [%1], %2
    54 00017115 0F8533020000        <1>  jne L_error_incorrect_type
 31382 0001711B 488B7801                        mov rdi, qword [rax + 1]
 31383 0001711F E8D6000000                      call make_integer
 31384 00017124 C9                              leave
 31385 00017125 C21800                          ret AND_KILL_FRAME(1)
 31386                                          
 31387                                  L_code_ptr_denominator:
 31388 00017128 C8000000                        enter 0, 0
 31389 0001712C 48837D1801                      cmp COUNT, 1
 31390 00017131 0F8543010000                    jne L_error_arg_count_1
 31391 00017137 488B4520                        mov rax, PARAM(0)
 31392                                          assert_fraction(rax)
    53 0001713B 803812              <1>  cmp byte [%1], %2
    54 0001713E 0F850A020000        <1>  jne L_error_incorrect_type
 31393 00017144 488B7809                        mov rdi, qword [rax + 1 + 8]
 31394 00017148 E8AD000000                      call make_integer
 31395 0001714D C9                              leave
 31396 0001714E C21800                          ret AND_KILL_FRAME(1)
 31397                                  
 31398                                  L_code_ptr_is_eq:
 31399 00017151 C8000000                	enter 0, 0
 31400 00017155 48837D1802              	cmp COUNT, 2
 31401 0001715A 0F854F010000            	jne L_error_arg_count_2
 31402 00017160 488B7D20                	mov rdi, PARAM(0)
 31403 00017164 488B7528                	mov rsi, PARAM(1)
 31404 00017168 4839F7                  	cmp rdi, rsi
 31405 0001716B 745B                    	je .L_eq_true
 31406 0001716D 8A17                    	mov dl, byte [rdi]
 31407 0001716F 3A16                    	cmp dl, byte [rsi]
 31408 00017171 7561                    	jne .L_eq_false
 31409 00017173 80FA02                  	cmp dl, T_char
 31410 00017176 7448                    	je .L_char
 31411 00017178 80FA41                  	cmp dl, T_interned_symbol
 31412 0001717B 742F                    	je .L_interned_symbol
 31413 0001717D 80FA42                          cmp dl, T_uninterned_symbol
 31414 00017180 7432                            je .L_uninterned_symbol
 31415 00017182 80FA13                  	cmp dl, T_real
 31416 00017185 741D                    	je .L_real
 31417 00017187 80FA12                  	cmp dl, T_fraction
 31418 0001718A 7402                    	je .L_fraction
 31419 0001718C EB46                    	jmp .L_eq_false
 31420                                  .L_fraction:
 31421 0001718E 488B4601                	mov rax, qword [rsi + 1]
 31422 00017192 483B4701                	cmp rax, qword [rdi + 1]
 31423 00017196 753C                    	jne .L_eq_false
 31424 00017198 488B4609                	mov rax, qword [rsi + 1 + 8]
 31425 0001719C 483B4709                	cmp rax, qword [rdi + 1 + 8]
 31426 000171A0 7532                    	jne .L_eq_false
 31427 000171A2 EB24                    	jmp .L_eq_true
 31428                                  .L_real:
 31429 000171A4 488B4601                	mov rax, qword [rsi + 1]
 31430 000171A8 483B4701                	cmp rax, qword [rdi + 1]
 31431                                  .L_interned_symbol:
 31432                                  	; never reached, because interned_symbols are static!
 31433                                  	; but I'm keeping it in case, I'll ever change
 31434                                  	; the implementation
 31435 000171AC 488B4601                	mov rax, qword [rsi + 1]
 31436 000171B0 483B4701                	cmp rax, qword [rdi + 1]
 31437                                  .L_uninterned_symbol:
 31438 000171B4 4C8B4701                        mov r8, qword [rdi + 1]
 31439 000171B8 4C3B4601                        cmp r8, qword [rsi + 1]
 31440 000171BC 7516                            jne .L_eq_false
 31441 000171BE EB08                            jmp .L_eq_true
 31442                                  .L_char:
 31443 000171C0 8A5E01                  	mov bl, byte [rsi + 1]
 31444 000171C3 3A5F01                  	cmp bl, byte [rdi + 1]
 31445 000171C6 750C                    	jne .L_eq_false
 31446                                  .L_eq_true:
 31447 000171C8 48B8-                   	mov rax, sob_boolean_true
 31447 000171CA [0300000000000000] 
 31448 000171D2 EB0A                    	jmp .L_eq_exit
 31449                                  .L_eq_false:
 31450 000171D4 48B8-                   	mov rax, sob_boolean_false
 31450 000171D6 [0200000000000000] 
 31451                                  .L_eq_exit:
 31452 000171DE C9                      	leave
 31453 000171DF C22000                  	ret AND_KILL_FRAME(2)
 31454                                  
 31455                                  make_real:
 31456 000171E2 C8000000                        enter 0, 0
 31457 000171E6 BF09000000                      mov rdi, (1 + 8)
 31458 000171EB E838E5FFFF                      call malloc
 31459 000171F0 C60013                          mov byte [rax], T_real
 31460 000171F3 F20F114001                      movsd qword [rax + 1], xmm0
 31461 000171F8 C9                              leave 
 31462 000171F9 C3                              ret
 31463                                          
 31464                                  make_integer:
 31465 000171FA C8000000                        enter 0, 0
 31466 000171FE 4889FE                          mov rsi, rdi
 31467 00017201 BF09000000                      mov rdi, (1 + 8)
 31468 00017206 E81DE5FFFF                      call malloc
 31469 0001720B C60011                          mov byte [rax], T_integer
 31470 0001720E 48897001                        mov qword [rax + 1], rsi
 31471 00017212 C9                              leave
 31472 00017213 C3                              ret
 31473                                          
 31474                                  L_error_integer_range:
 31475 00017214 488B3C25[00000000]              mov rdi, qword [stderr]
 31476 0001721C 48BE-                           mov rsi, fmt_integer_range
 31476 0001721E [521D000000000000] 
 31477 00017226 B800000000                      mov rax, 0
 31478                                          ENTER
    44 0001722B C8000000            <1>  enter 0, 0
    45 0001722F 4883E4F0            <1>  and rsp, ~15
 31479 00017233 E8(00000000)                    call fprintf
 31480                                          LEAVE
    49 00017238 C9                  <1>  leave
 31481 00017239 48C7C0FBFFFFFF                  mov rax, -5
 31482 00017240 E8(00000000)                    call exit
 31483                                  
 31484                                  L_error_arg_count_0:
 31485 00017245 488B3C25[00000000]              mov rdi, qword [stderr]
 31486 0001724D 48BE-                           mov rsi, fmt_arg_count_0
 31486 0001724F [501C000000000000] 
 31487 00017257 488B5518                        mov rdx, COUNT
 31488 0001725B B800000000                      mov rax, 0
 31489                                          ENTER
    44 00017260 C8000000            <1>  enter 0, 0
    45 00017264 4883E4F0            <1>  and rsp, ~15
 31490 00017268 E8(00000000)                    call fprintf
 31491                                          LEAVE
    49 0001726D C9                  <1>  leave
 31492 0001726E 48C7C0FDFFFFFF                  mov rax, -3
 31493 00017275 E8(00000000)                    call exit
 31494                                  
 31495                                  L_error_arg_count_1:
 31496 0001727A 488B3C25[00000000]              mov rdi, qword [stderr]
 31497 00017282 48BE-                           mov rsi, fmt_arg_count_1
 31497 00017284 [781C000000000000] 
 31498 0001728C 488B5518                        mov rdx, COUNT
 31499 00017290 B800000000                      mov rax, 0
 31500                                          ENTER
    44 00017295 C8000000            <1>  enter 0, 0
    45 00017299 4883E4F0            <1>  and rsp, ~15
 31501 0001729D E8(00000000)                    call fprintf
 31502                                          LEAVE
    49 000172A2 C9                  <1>  leave
 31503 000172A3 48C7C0FDFFFFFF                  mov rax, -3
 31504 000172AA E8(00000000)                    call exit
 31505                                  
 31506                                  L_error_arg_count_2:
 31507 000172AF 488B3C25[00000000]              mov rdi, qword [stderr]
 31508 000172B7 48BE-                           mov rsi, fmt_arg_count_2
 31508 000172B9 [DE1C000000000000] 
 31509 000172C1 488B5518                        mov rdx, COUNT
 31510 000172C5 B800000000                      mov rax, 0
 31511                                          ENTER
    44 000172CA C8000000            <1>  enter 0, 0
    45 000172CE 4883E4F0            <1>  and rsp, ~15
 31512 000172D2 E8(00000000)                    call fprintf
 31513                                          LEAVE
    49 000172D7 C9                  <1>  leave
 31514 000172D8 48C7C0FDFFFFFF                  mov rax, -3
 31515 000172DF E8(00000000)                    call exit
 31516                                  
 31517                                  L_error_arg_count_12:
 31518 000172E4 488B3C25[00000000]              mov rdi, qword [stderr]
 31519 000172EC 48BE-                           mov rsi, fmt_arg_count_12
 31519 000172EE [9E1C000000000000] 
 31520 000172F6 488B5518                        mov rdx, COUNT
 31521 000172FA B800000000                      mov rax, 0
 31522                                          ENTER
    44 000172FF C8000000            <1>  enter 0, 0
    45 00017303 4883E4F0            <1>  and rsp, ~15
 31523 00017307 E8(00000000)                    call fprintf
 31524                                          LEAVE
    49 0001730C C9                  <1>  leave
 31525 0001730D 48C7C0FDFFFFFF                  mov rax, -3
 31526 00017314 E8(00000000)                    call exit
 31527                                  
 31528                                  L_error_arg_count_3:
 31529 00017319 488B3C25[00000000]              mov rdi, qword [stderr]
 31530 00017321 48BE-                           mov rsi, fmt_arg_count_3
 31530 00017323 [051D000000000000] 
 31531 0001732B 488B5518                        mov rdx, COUNT
 31532 0001732F B800000000                      mov rax, 0
 31533                                          ENTER
    44 00017334 C8000000            <1>  enter 0, 0
    45 00017338 4883E4F0            <1>  and rsp, ~15
 31534 0001733C E8(00000000)                    call fprintf
 31535                                          LEAVE
    49 00017341 C9                  <1>  leave
 31536 00017342 48C7C0FDFFFFFF                  mov rax, -3
 31537 00017349 E8(00000000)                    call exit
 31538                                          
 31539                                  L_error_incorrect_type:
 31540 0001734E 488B3C25[00000000]              mov rdi, qword [stderr]
 31541 00017356 48BE-                           mov rsi, fmt_type
 31541 00017358 [2E1D000000000000] 
 31542 00017360 B800000000                      mov rax, 0
 31543                                          ENTER
    44 00017365 C8000000            <1>  enter 0, 0
    45 00017369 4883E4F0            <1>  and rsp, ~15
 31544 0001736D E8(00000000)                    call fprintf
 31545                                          LEAVE
    49 00017372 C9                  <1>  leave
 31546 00017373 48C7C0FCFFFFFF                  mov rax, -4
 31547 0001737A E8(00000000)                    call exit
 31548                                  
 31549                                  L_error_division_by_zero:
 31550 0001737F 488B3C25[00000000]              mov rdi, qword [stderr]
 31551 00017387 48BE-                           mov rsi, fmt_division_by_zero
 31551 00017389 [6F1D000000000000] 
 31552 00017391 B800000000                      mov rax, 0
 31553                                          ENTER
    44 00017396 C8000000            <1>  enter 0, 0
    45 0001739A 4883E4F0            <1>  and rsp, ~15
 31554 0001739E E8(00000000)                    call fprintf
 31555                                          LEAVE
    49 000173A3 C9                  <1>  leave
 31556 000173A4 48C7C0F8FFFFFF                  mov rax, -8
 31557 000173AB E8(00000000)                    call exit
 31558                                  
 31559                                  section .data
 31560                                  gensym_count:
 31561 00001C45 0000000000000000                dq 0
 31562                                  fmt_char:
 31563 00001C4D 256300                          db `%c\0`
 31564                                  fmt_arg_count_0:
 31565 00001C50 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 31565 00001C59 74696E67207A65726F-
 31565 00001C62 20617267756D656E74-
 31565 00001C6B 732E20466F756E6420-
 31565 00001C74 25640A00           
 31566                                  fmt_arg_count_1:
 31567 00001C78 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 31567 00001C81 74696E67206F6E6520-
 31567 00001C8A 617267756D656E742E-
 31567 00001C93 20466F756E64202564-
 31567 00001C9C 0A00               
 31568                                  fmt_arg_count_12:
 31569 00001C9E 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 31569 00001CA7 74696E67206F6E6520-
 31569 00001CB0 726571756972656420-
 31569 00001CB9 616E64206F6E65206F-
 31569 00001CC2 7074696F6E616C2061-
 31569 00001CCB 7267756D656E742E20-
 31569 00001CD4 466F756E642025640A-
 31569 00001CDD 00                 
 31570                                  fmt_arg_count_2:
 31571 00001CDE 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 31571 00001CE7 74696E672074776F20-
 31571 00001CF0 617267756D656E7473-
 31571 00001CF9 2E20466F756E642025-
 31571 00001D02 640A00             
 31572                                  fmt_arg_count_3:
 31573 00001D05 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 31573 00001D0E 74696E672074687265-
 31573 00001D17 6520617267756D656E-
 31573 00001D20 74732E20466F756E64-
 31573 00001D29 2025640A00         
 31574                                  fmt_type:
 31575 00001D2E 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 31575 00001D37 696F6E207061737365-
 31575 00001D40 6420696E636F727265-
 31575 00001D49 637420747970650A00 
 31576                                  fmt_integer_range:
 31577 00001D52 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 31577 00001D5B 7265637420696E7465-
 31577 00001D64 6765722072616E6765-
 31577 00001D6D 0A00               
 31578                                  fmt_division_by_zero:
 31579 00001D6F 212121204469766973-             db `!!! Division by zero\n\0`
 31579 00001D78 696F6E206279207A65-
 31579 00001D81 726F0A00           
 31580                                  fmt_scheme_error_part_1:
 31581 00001D85 0A2121212054686520-             db `\n!!! The procedure \0`
 31581 00001D8E 70726F636564757265-
 31581 00001D97 2000               
 31582                                  fmt_scheme_error_part_2:
 31583 00001D99 2061736B656420746F-             db ` asked to terminate the program\n`
 31583 00001DA2 207465726D696E6174-
 31583 00001DAB 65207468652070726F-
 31583 00001DB4 6772616D0A         
 31584 00001DB9 202020207769746820-             db `    with the following message:\n\n\0`
 31584 00001DC2 74686520666F6C6C6F-
 31584 00001DCB 77696E67206D657373-
 31584 00001DD4 6167653A0A0A00     
 31585                                  fmt_scheme_error_part_3:
 31586 00001DDB 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 31586 00001DE4 210A0A00           
