     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RDP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 11                      	db T_integer	; 1
   441 0000056E 0100000000000000        	dq 1
   442                                  	; L_constants + 1398:
   443 00000576 11                      	db T_integer	; 2
   444 00000577 0200000000000000        	dq 2
   445                                  free_var_0:	; location of null?
   446 0000057F [8705000000000000]      	dq .undefined_object
   447                                  .undefined_object:
   448 00000587 05                      	db T_undefined
   449 00000588 [0600000000000000]      	dq L_constants + 6
   450                                  
   451                                  free_var_1:	; location of pair?
   452 00000590 [9805000000000000]      	dq .undefined_object
   453                                  .undefined_object:
   454 00000598 05                      	db T_undefined
   455 00000599 [1400000000000000]      	dq L_constants + 20
   456                                  
   457                                  free_var_2:	; location of void?
   458 000005A1 [A905000000000000]      	dq .undefined_object
   459                                  .undefined_object:
   460 000005A9 05                      	db T_undefined
   461 000005AA [2200000000000000]      	dq L_constants + 34
   462                                  
   463                                  free_var_3:	; location of char?
   464 000005B2 [BA05000000000000]      	dq .undefined_object
   465                                  .undefined_object:
   466 000005BA 05                      	db T_undefined
   467 000005BB [3000000000000000]      	dq L_constants + 48
   468                                  
   469                                  free_var_4:	; location of string?
   470 000005C3 [CB05000000000000]      	dq .undefined_object
   471                                  .undefined_object:
   472 000005CB 05                      	db T_undefined
   473 000005CC [3E00000000000000]      	dq L_constants + 62
   474                                  
   475                                  free_var_5:	; location of interned-symbol?
   476 000005D4 [DC05000000000000]      	dq .undefined_object
   477                                  .undefined_object:
   478 000005DC 05                      	db T_undefined
   479 000005DD [4E00000000000000]      	dq L_constants + 78
   480                                  
   481                                  free_var_6:	; location of vector?
   482 000005E5 [ED05000000000000]      	dq .undefined_object
   483                                  .undefined_object:
   484 000005ED 05                      	db T_undefined
   485 000005EE [6700000000000000]      	dq L_constants + 103
   486                                  
   487                                  free_var_7:	; location of procedure?
   488 000005F6 [FE05000000000000]      	dq .undefined_object
   489                                  .undefined_object:
   490 000005FE 05                      	db T_undefined
   491 000005FF [7700000000000000]      	dq L_constants + 119
   492                                  
   493                                  free_var_8:	; location of real?
   494 00000607 [0F06000000000000]      	dq .undefined_object
   495                                  .undefined_object:
   496 0000060F 05                      	db T_undefined
   497 00000610 [8A00000000000000]      	dq L_constants + 138
   498                                  
   499                                  free_var_9:	; location of fraction?
   500 00000618 [2006000000000000]      	dq .undefined_object
   501                                  .undefined_object:
   502 00000620 05                      	db T_undefined
   503 00000621 [9800000000000000]      	dq L_constants + 152
   504                                  
   505                                  free_var_10:	; location of boolean?
   506 00000629 [3106000000000000]      	dq .undefined_object
   507                                  .undefined_object:
   508 00000631 05                      	db T_undefined
   509 00000632 [AA00000000000000]      	dq L_constants + 170
   510                                  
   511                                  free_var_11:	; location of number?
   512 0000063A [4206000000000000]      	dq .undefined_object
   513                                  .undefined_object:
   514 00000642 05                      	db T_undefined
   515 00000643 [BB00000000000000]      	dq L_constants + 187
   516                                  
   517                                  free_var_12:	; location of collection?
   518 0000064B [5306000000000000]      	dq .undefined_object
   519                                  .undefined_object:
   520 00000653 05                      	db T_undefined
   521 00000654 [CB00000000000000]      	dq L_constants + 203
   522                                  
   523                                  free_var_13:	; location of cons
   524 0000065C [6406000000000000]      	dq .undefined_object
   525                                  .undefined_object:
   526 00000664 05                      	db T_undefined
   527 00000665 [DF00000000000000]      	dq L_constants + 223
   528                                  
   529                                  free_var_14:	; location of display-sexpr
   530 0000066D [7506000000000000]      	dq .undefined_object
   531                                  .undefined_object:
   532 00000675 05                      	db T_undefined
   533 00000676 [EC00000000000000]      	dq L_constants + 236
   534                                  
   535                                  free_var_15:	; location of write-char
   536 0000067E [8606000000000000]      	dq .undefined_object
   537                                  .undefined_object:
   538 00000686 05                      	db T_undefined
   539 00000687 [0201000000000000]      	dq L_constants + 258
   540                                  
   541                                  free_var_16:	; location of car
   542 0000068F [9706000000000000]      	dq .undefined_object
   543                                  .undefined_object:
   544 00000697 05                      	db T_undefined
   545 00000698 [1501000000000000]      	dq L_constants + 277
   546                                  
   547                                  free_var_17:	; location of cdr
   548 000006A0 [A806000000000000]      	dq .undefined_object
   549                                  .undefined_object:
   550 000006A8 05                      	db T_undefined
   551 000006A9 [2101000000000000]      	dq L_constants + 289
   552                                  
   553                                  free_var_18:	; location of string-length
   554 000006B1 [B906000000000000]      	dq .undefined_object
   555                                  .undefined_object:
   556 000006B9 05                      	db T_undefined
   557 000006BA [2D01000000000000]      	dq L_constants + 301
   558                                  
   559                                  free_var_19:	; location of vector-length
   560 000006C2 [CA06000000000000]      	dq .undefined_object
   561                                  .undefined_object:
   562 000006CA 05                      	db T_undefined
   563 000006CB [4301000000000000]      	dq L_constants + 323
   564                                  
   565                                  free_var_20:	; location of real->integer
   566 000006D3 [DB06000000000000]      	dq .undefined_object
   567                                  .undefined_object:
   568 000006DB 05                      	db T_undefined
   569 000006DC [5901000000000000]      	dq L_constants + 345
   570                                  
   571                                  free_var_21:	; location of exit
   572 000006E4 [EC06000000000000]      	dq .undefined_object
   573                                  .undefined_object:
   574 000006EC 05                      	db T_undefined
   575 000006ED [6F01000000000000]      	dq L_constants + 367
   576                                  
   577                                  free_var_22:	; location of integer->real
   578 000006F5 [FD06000000000000]      	dq .undefined_object
   579                                  .undefined_object:
   580 000006FD 05                      	db T_undefined
   581 000006FE [7C01000000000000]      	dq L_constants + 380
   582                                  
   583                                  free_var_23:	; location of fraction->real
   584 00000706 [0E07000000000000]      	dq .undefined_object
   585                                  .undefined_object:
   586 0000070E 05                      	db T_undefined
   587 0000070F [9201000000000000]      	dq L_constants + 402
   588                                  
   589                                  free_var_24:	; location of char->integer
   590 00000717 [1F07000000000000]      	dq .undefined_object
   591                                  .undefined_object:
   592 0000071F 05                      	db T_undefined
   593 00000720 [A901000000000000]      	dq L_constants + 425
   594                                  
   595                                  free_var_25:	; location of integer->char
   596 00000728 [3007000000000000]      	dq .undefined_object
   597                                  .undefined_object:
   598 00000730 05                      	db T_undefined
   599 00000731 [BF01000000000000]      	dq L_constants + 447
   600                                  
   601                                  free_var_26:	; location of trng
   602 00000739 [4107000000000000]      	dq .undefined_object
   603                                  .undefined_object:
   604 00000741 05                      	db T_undefined
   605 00000742 [D501000000000000]      	dq L_constants + 469
   606                                  
   607                                  free_var_27:	; location of zero?
   608 0000074A [5207000000000000]      	dq .undefined_object
   609                                  .undefined_object:
   610 00000752 05                      	db T_undefined
   611 00000753 [E201000000000000]      	dq L_constants + 482
   612                                  
   613                                  free_var_28:	; location of integer?
   614 0000075B [6307000000000000]      	dq .undefined_object
   615                                  .undefined_object:
   616 00000763 05                      	db T_undefined
   617 00000764 [F001000000000000]      	dq L_constants + 496
   618                                  
   619                                  free_var_29:	; location of __bin-apply
   620 0000076C [7407000000000000]      	dq .undefined_object
   621                                  .undefined_object:
   622 00000774 05                      	db T_undefined
   623 00000775 [0102000000000000]      	dq L_constants + 513
   624                                  
   625                                  free_var_30:	; location of __bin-add-rr
   626 0000077D [8507000000000000]      	dq .undefined_object
   627                                  .undefined_object:
   628 00000785 05                      	db T_undefined
   629 00000786 [1502000000000000]      	dq L_constants + 533
   630                                  
   631                                  free_var_31:	; location of __bin-sub-rr
   632 0000078E [9607000000000000]      	dq .undefined_object
   633                                  .undefined_object:
   634 00000796 05                      	db T_undefined
   635 00000797 [2A02000000000000]      	dq L_constants + 554
   636                                  
   637                                  free_var_32:	; location of __bin-mul-rr
   638 0000079F [A707000000000000]      	dq .undefined_object
   639                                  .undefined_object:
   640 000007A7 05                      	db T_undefined
   641 000007A8 [3F02000000000000]      	dq L_constants + 575
   642                                  
   643                                  free_var_33:	; location of __bin-div-rr
   644 000007B0 [B807000000000000]      	dq .undefined_object
   645                                  .undefined_object:
   646 000007B8 05                      	db T_undefined
   647 000007B9 [5402000000000000]      	dq L_constants + 596
   648                                  
   649                                  free_var_34:	; location of __bin-add-qq
   650 000007C1 [C907000000000000]      	dq .undefined_object
   651                                  .undefined_object:
   652 000007C9 05                      	db T_undefined
   653 000007CA [6902000000000000]      	dq L_constants + 617
   654                                  
   655                                  free_var_35:	; location of __bin-sub-qq
   656 000007D2 [DA07000000000000]      	dq .undefined_object
   657                                  .undefined_object:
   658 000007DA 05                      	db T_undefined
   659 000007DB [7E02000000000000]      	dq L_constants + 638
   660                                  
   661                                  free_var_36:	; location of __bin-mul-qq
   662 000007E3 [EB07000000000000]      	dq .undefined_object
   663                                  .undefined_object:
   664 000007EB 05                      	db T_undefined
   665 000007EC [9302000000000000]      	dq L_constants + 659
   666                                  
   667                                  free_var_37:	; location of __bin-div-qq
   668 000007F4 [FC07000000000000]      	dq .undefined_object
   669                                  .undefined_object:
   670 000007FC 05                      	db T_undefined
   671 000007FD [A802000000000000]      	dq L_constants + 680
   672                                  
   673                                  free_var_38:	; location of __bin-add-zz
   674 00000805 [0D08000000000000]      	dq .undefined_object
   675                                  .undefined_object:
   676 0000080D 05                      	db T_undefined
   677 0000080E [BD02000000000000]      	dq L_constants + 701
   678                                  
   679                                  free_var_39:	; location of __bin-sub-zz
   680 00000816 [1E08000000000000]      	dq .undefined_object
   681                                  .undefined_object:
   682 0000081E 05                      	db T_undefined
   683 0000081F [D202000000000000]      	dq L_constants + 722
   684                                  
   685                                  free_var_40:	; location of __bin-mul-zz
   686 00000827 [2F08000000000000]      	dq .undefined_object
   687                                  .undefined_object:
   688 0000082F 05                      	db T_undefined
   689 00000830 [E702000000000000]      	dq L_constants + 743
   690                                  
   691                                  free_var_41:	; location of __bin-div-zz
   692 00000838 [4008000000000000]      	dq .undefined_object
   693                                  .undefined_object:
   694 00000840 05                      	db T_undefined
   695 00000841 [FC02000000000000]      	dq L_constants + 764
   696                                  
   697                                  free_var_42:	; location of error
   698 00000849 [5108000000000000]      	dq .undefined_object
   699                                  .undefined_object:
   700 00000851 05                      	db T_undefined
   701 00000852 [1103000000000000]      	dq L_constants + 785
   702                                  
   703                                  free_var_43:	; location of __bin-less-than-rr
   704 0000085A [6208000000000000]      	dq .undefined_object
   705                                  .undefined_object:
   706 00000862 05                      	db T_undefined
   707 00000863 [1F03000000000000]      	dq L_constants + 799
   708                                  
   709                                  free_var_44:	; location of __bin-less-than-qq
   710 0000086B [7308000000000000]      	dq .undefined_object
   711                                  .undefined_object:
   712 00000873 05                      	db T_undefined
   713 00000874 [3A03000000000000]      	dq L_constants + 826
   714                                  
   715                                  free_var_45:	; location of __bin-less-than-zz
   716 0000087C [8408000000000000]      	dq .undefined_object
   717                                  .undefined_object:
   718 00000884 05                      	db T_undefined
   719 00000885 [5503000000000000]      	dq L_constants + 853
   720                                  
   721                                  free_var_46:	; location of __bin-equal-rr
   722 0000088D [9508000000000000]      	dq .undefined_object
   723                                  .undefined_object:
   724 00000895 05                      	db T_undefined
   725 00000896 [7003000000000000]      	dq L_constants + 880
   726                                  
   727                                  free_var_47:	; location of __bin-equal-qq
   728 0000089E [A608000000000000]      	dq .undefined_object
   729                                  .undefined_object:
   730 000008A6 05                      	db T_undefined
   731 000008A7 [8703000000000000]      	dq L_constants + 903
   732                                  
   733                                  free_var_48:	; location of __bin-equal-zz
   734 000008AF [B708000000000000]      	dq .undefined_object
   735                                  .undefined_object:
   736 000008B7 05                      	db T_undefined
   737 000008B8 [9E03000000000000]      	dq L_constants + 926
   738                                  
   739                                  free_var_49:	; location of quotient
   740 000008C0 [C808000000000000]      	dq .undefined_object
   741                                  .undefined_object:
   742 000008C8 05                      	db T_undefined
   743 000008C9 [B503000000000000]      	dq L_constants + 949
   744                                  
   745                                  free_var_50:	; location of remainder
   746 000008D1 [D908000000000000]      	dq .undefined_object
   747                                  .undefined_object:
   748 000008D9 05                      	db T_undefined
   749 000008DA [C603000000000000]      	dq L_constants + 966
   750                                  
   751                                  free_var_51:	; location of set-car!
   752 000008E2 [EA08000000000000]      	dq .undefined_object
   753                                  .undefined_object:
   754 000008EA 05                      	db T_undefined
   755 000008EB [D803000000000000]      	dq L_constants + 984
   756                                  
   757                                  free_var_52:	; location of set-cdr!
   758 000008F3 [FB08000000000000]      	dq .undefined_object
   759                                  .undefined_object:
   760 000008FB 05                      	db T_undefined
   761 000008FC [E903000000000000]      	dq L_constants + 1001
   762                                  
   763                                  free_var_53:	; location of string-ref
   764 00000904 [0C09000000000000]      	dq .undefined_object
   765                                  .undefined_object:
   766 0000090C 05                      	db T_undefined
   767 0000090D [FA03000000000000]      	dq L_constants + 1018
   768                                  
   769                                  free_var_54:	; location of vector-ref
   770 00000915 [1D09000000000000]      	dq .undefined_object
   771                                  .undefined_object:
   772 0000091D 05                      	db T_undefined
   773 0000091E [0D04000000000000]      	dq L_constants + 1037
   774                                  
   775                                  free_var_55:	; location of vector-set!
   776 00000926 [2E09000000000000]      	dq .undefined_object
   777                                  .undefined_object:
   778 0000092E 05                      	db T_undefined
   779 0000092F [2004000000000000]      	dq L_constants + 1056
   780                                  
   781                                  free_var_56:	; location of string-set!
   782 00000937 [3F09000000000000]      	dq .undefined_object
   783                                  .undefined_object:
   784 0000093F 05                      	db T_undefined
   785 00000940 [3404000000000000]      	dq L_constants + 1076
   786                                  
   787                                  free_var_57:	; location of make-vector
   788 00000948 [5009000000000000]      	dq .undefined_object
   789                                  .undefined_object:
   790 00000950 05                      	db T_undefined
   791 00000951 [4804000000000000]      	dq L_constants + 1096
   792                                  
   793                                  free_var_58:	; location of make-string
   794 00000959 [6109000000000000]      	dq .undefined_object
   795                                  .undefined_object:
   796 00000961 05                      	db T_undefined
   797 00000962 [5C04000000000000]      	dq L_constants + 1116
   798                                  
   799                                  free_var_59:	; location of numerator
   800 0000096A [7209000000000000]      	dq .undefined_object
   801                                  .undefined_object:
   802 00000972 05                      	db T_undefined
   803 00000973 [7004000000000000]      	dq L_constants + 1136
   804                                  
   805                                  free_var_60:	; location of denominator
   806 0000097B [8309000000000000]      	dq .undefined_object
   807                                  .undefined_object:
   808 00000983 05                      	db T_undefined
   809 00000984 [8204000000000000]      	dq L_constants + 1154
   810                                  
   811                                  free_var_61:	; location of eq?
   812 0000098C [9409000000000000]      	dq .undefined_object
   813                                  .undefined_object:
   814 00000994 05                      	db T_undefined
   815 00000995 [9604000000000000]      	dq L_constants + 1174
   816                                  
   817                                  free_var_62:	; location of __integer-to-fraction
   818 0000099D [A509000000000000]      	dq .undefined_object
   819                                  .undefined_object:
   820 000009A5 05                      	db T_undefined
   821 000009A6 [A204000000000000]      	dq L_constants + 1186
   822                                  
   823                                  free_var_63:	; location of logand
   824 000009AE [B609000000000000]      	dq .undefined_object
   825                                  .undefined_object:
   826 000009B6 05                      	db T_undefined
   827 000009B7 [C004000000000000]      	dq L_constants + 1216
   828                                  
   829                                  free_var_64:	; location of logor
   830 000009BF [C709000000000000]      	dq .undefined_object
   831                                  .undefined_object:
   832 000009C7 05                      	db T_undefined
   833 000009C8 [CF04000000000000]      	dq L_constants + 1231
   834                                  
   835                                  free_var_65:	; location of logxor
   836 000009D0 [D809000000000000]      	dq .undefined_object
   837                                  .undefined_object:
   838 000009D8 05                      	db T_undefined
   839 000009D9 [DD04000000000000]      	dq L_constants + 1245
   840                                  
   841                                  free_var_66:	; location of lognot
   842 000009E1 [E909000000000000]      	dq .undefined_object
   843                                  .undefined_object:
   844 000009E9 05                      	db T_undefined
   845 000009EA [EC04000000000000]      	dq L_constants + 1260
   846                                  
   847                                  free_var_67:	; location of ash
   848 000009F2 [FA09000000000000]      	dq .undefined_object
   849                                  .undefined_object:
   850 000009FA 05                      	db T_undefined
   851 000009FB [FB04000000000000]      	dq L_constants + 1275
   852                                  
   853                                  free_var_68:	; location of symbol?
   854 00000A03 [0B0A000000000000]      	dq .undefined_object
   855                                  .undefined_object:
   856 00000A0B 05                      	db T_undefined
   857 00000A0C [0705000000000000]      	dq L_constants + 1287
   858                                  
   859                                  free_var_69:	; location of uninterned-symbol?
   860 00000A14 [1C0A000000000000]      	dq .undefined_object
   861                                  .undefined_object:
   862 00000A1C 05                      	db T_undefined
   863 00000A1D [1705000000000000]      	dq L_constants + 1303
   864                                  
   865                                  free_var_70:	; location of gensym?
   866 00000A25 [2D0A000000000000]      	dq .undefined_object
   867                                  .undefined_object:
   868 00000A2D 05                      	db T_undefined
   869 00000A2E [3205000000000000]      	dq L_constants + 1330
   870                                  
   871                                  free_var_71:	; location of gensym
   872 00000A36 [3E0A000000000000]      	dq .undefined_object
   873                                  .undefined_object:
   874 00000A3E 05                      	db T_undefined
   875 00000A3F [4205000000000000]      	dq L_constants + 1346
   876                                  
   877                                  free_var_72:	; location of frame
   878 00000A47 [4F0A000000000000]      	dq .undefined_object
   879                                  .undefined_object:
   880 00000A4F 05                      	db T_undefined
   881 00000A50 [5105000000000000]      	dq L_constants + 1361
   882                                  
   883                                  free_var_73:	; location of break
   884 00000A58 [600A000000000000]      	dq .undefined_object
   885                                  .undefined_object:
   886 00000A60 05                      	db T_undefined
   887 00000A61 [5F05000000000000]      	dq L_constants + 1375
   888                                  
   889                                  
   890                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   891                                  global main
   892                                  section .text
   893                                  main:
   894 00000000 C8000000                        enter 0, 0
   895                                          
   896                                  	; building closure for null?
   897 00000004 48BF-                   	mov rdi, free_var_0
   897 00000006 [7F05000000000000] 
   898 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   898 00000010 [C511000000000000] 
   899 00000018 E8A90F0000              	call bind_primitive
   900                                  
   901                                  	; building closure for pair?
   902 0000001D 48BF-                   	mov rdi, free_var_1
   902 0000001F [9005000000000000] 
   903 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   903 00000029 [F711000000000000] 
   904 00000031 E8900F0000              	call bind_primitive
   905                                  
   906                                  	; building closure for void?
   907 00000036 48BF-                   	mov rdi, free_var_2
   907 00000038 [A105000000000000] 
   908 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   908 00000042 [2912000000000000] 
   909 0000004A E8770F0000              	call bind_primitive
   910                                  
   911                                  	; building closure for char?
   912 0000004F 48BF-                   	mov rdi, free_var_3
   912 00000051 [B205000000000000] 
   913 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   913 0000005B [5B12000000000000] 
   914 00000063 E85E0F0000              	call bind_primitive
   915                                  
   916                                  	; building closure for string?
   917 00000068 48BF-                   	mov rdi, free_var_4
   917 0000006A [C305000000000000] 
   918 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   918 00000074 [8D12000000000000] 
   919 0000007C E8450F0000              	call bind_primitive
   920                                  
   921                                  	; building closure for interned-symbol?
   922 00000081 48BF-                   	mov rdi, free_var_5
   922 00000083 [D405000000000000] 
   923 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   923 0000008D [BF12000000000000] 
   924 00000095 E82C0F0000              	call bind_primitive
   925                                  
   926                                  	; building closure for vector?
   927 0000009A 48BF-                   	mov rdi, free_var_6
   927 0000009C [E505000000000000] 
   928 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   928 000000A6 [8B13000000000000] 
   929 000000AE E8130F0000              	call bind_primitive
   930                                  
   931                                  	; building closure for procedure?
   932 000000B3 48BF-                   	mov rdi, free_var_7
   932 000000B5 [F605000000000000] 
   933 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   933 000000BF [BD13000000000000] 
   934 000000C7 E8FA0E0000              	call bind_primitive
   935                                  
   936                                  	; building closure for real?
   937 000000CC 48BF-                   	mov rdi, free_var_8
   937 000000CE [0706000000000000] 
   938 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   938 000000D8 [EF13000000000000] 
   939 000000E0 E8E10E0000              	call bind_primitive
   940                                  
   941                                  	; building closure for fraction?
   942 000000E5 48BF-                   	mov rdi, free_var_9
   942 000000E7 [1806000000000000] 
   943 000000EF 48BE-                   	mov rsi, L_code_ptr_is_fraction
   943 000000F1 [2114000000000000] 
   944 000000F9 E8C80E0000              	call bind_primitive
   945                                  
   946                                  	; building closure for boolean?
   947 000000FE 48BF-                   	mov rdi, free_var_10
   947 00000100 [2906000000000000] 
   948 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   948 0000010A [5314000000000000] 
   949 00000112 E8AF0E0000              	call bind_primitive
   950                                  
   951                                  	; building closure for number?
   952 00000117 48BF-                   	mov rdi, free_var_11
   952 00000119 [3A06000000000000] 
   953 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   953 00000123 [8714000000000000] 
   954 0000012B E8960E0000              	call bind_primitive
   955                                  
   956                                  	; building closure for collection?
   957 00000130 48BF-                   	mov rdi, free_var_12
   957 00000132 [4B06000000000000] 
   958 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   958 0000013C [BB14000000000000] 
   959 00000144 E87D0E0000              	call bind_primitive
   960                                  
   961                                  	; building closure for cons
   962 00000149 48BF-                   	mov rdi, free_var_13
   962 0000014B [5C06000000000000] 
   963 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   963 00000155 [EF14000000000000] 
   964 0000015D E8640E0000              	call bind_primitive
   965                                  
   966                                  	; building closure for display-sexpr
   967 00000162 48BF-                   	mov rdi, free_var_14
   967 00000164 [6D06000000000000] 
   968 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   968 0000016E [1F15000000000000] 
   969 00000176 E84B0E0000              	call bind_primitive
   970                                  
   971                                  	; building closure for write-char
   972 0000017B 48BF-                   	mov rdi, free_var_15
   972 0000017D [7E06000000000000] 
   973 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   973 00000187 [4515000000000000] 
   974 0000018F E8320E0000              	call bind_primitive
   975                                  
   976                                  	; building closure for car
   977 00000194 48BF-                   	mov rdi, free_var_16
   977 00000196 [8F06000000000000] 
   978 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   978 000001A0 [9815000000000000] 
   979 000001A8 E8190E0000              	call bind_primitive
   980                                  
   981                                  	; building closure for cdr
   982 000001AD 48BF-                   	mov rdi, free_var_17
   982 000001AF [A006000000000000] 
   983 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   983 000001B9 [BC15000000000000] 
   984 000001C1 E8000E0000              	call bind_primitive
   985                                  
   986                                  	; building closure for string-length
   987 000001C6 48BF-                   	mov rdi, free_var_18
   987 000001C8 [B106000000000000] 
   988 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   988 000001D2 [E015000000000000] 
   989 000001DA E8E70D0000              	call bind_primitive
   990                                  
   991                                  	; building closure for vector-length
   992 000001DF 48BF-                   	mov rdi, free_var_19
   992 000001E1 [C206000000000000] 
   993 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   993 000001EB [0916000000000000] 
   994 000001F3 E8CE0D0000              	call bind_primitive
   995                                  
   996                                  	; building closure for real->integer
   997 000001F8 48BF-                   	mov rdi, free_var_20
   997 000001FA [D306000000000000] 
   998 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   998 00000204 [3216000000000000] 
   999 0000020C E8B50D0000              	call bind_primitive
  1000                                  
  1001                                  	; building closure for exit
  1002 00000211 48BF-                   	mov rdi, free_var_21
  1002 00000213 [E406000000000000] 
  1003 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
  1003 0000021D [6116000000000000] 
  1004 00000225 E89C0D0000              	call bind_primitive
  1005                                  
  1006                                  	; building closure for integer->real
  1007 0000022A 48BF-                   	mov rdi, free_var_22
  1007 0000022C [F506000000000000] 
  1008 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  1008 00000236 [7A16000000000000] 
  1009 0000023E E8830D0000              	call bind_primitive
  1010                                  
  1011                                  	; building closure for fraction->real
  1012 00000243 48BF-                   	mov rdi, free_var_23
  1012 00000245 [0607000000000000] 
  1013 0000024D 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  1013 0000024F [A816000000000000] 
  1014 00000257 E86A0D0000              	call bind_primitive
  1015                                  
  1016                                  	; building closure for char->integer
  1017 0000025C 48BF-                   	mov rdi, free_var_24
  1017 0000025E [1707000000000000] 
  1018 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
  1018 00000268 [E316000000000000] 
  1019 00000270 E8510D0000              	call bind_primitive
  1020                                  
  1021                                  	; building closure for integer->char
  1022 00000275 48BF-                   	mov rdi, free_var_25
  1022 00000277 [2807000000000000] 
  1023 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
  1023 00000281 [5217000000000000] 
  1024 00000289 E8380D0000              	call bind_primitive
  1025                                  
  1026                                  	; building closure for trng
  1027 0000028E 48BF-                   	mov rdi, free_var_26
  1027 00000290 [3907000000000000] 
  1028 00000298 48BE-                   	mov rsi, L_code_ptr_trng
  1028 0000029A [9D17000000000000] 
  1029 000002A2 E81F0D0000              	call bind_primitive
  1030                                  
  1031                                  	; building closure for zero?
  1032 000002A7 48BF-                   	mov rdi, free_var_27
  1032 000002A9 [4A07000000000000] 
  1033 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
  1033 000002B3 [BC17000000000000] 
  1034 000002BB E8060D0000              	call bind_primitive
  1035                                  
  1036                                  	; building closure for integer?
  1037 000002C0 48BF-                   	mov rdi, free_var_28
  1037 000002C2 [5B07000000000000] 
  1038 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
  1038 000002CC [2118000000000000] 
  1039 000002D4 E8ED0C0000              	call bind_primitive
  1040                                  
  1041                                  	; building closure for __bin-apply
  1042 000002D9 48BF-                   	mov rdi, free_var_29
  1042 000002DB [6C07000000000000] 
  1043 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
  1043 000002E5 [3611000000000000] 
  1044 000002ED E8D40C0000              	call bind_primitive
  1045                                  
  1046                                  	; building closure for __bin-add-rr
  1047 000002F2 48BF-                   	mov rdi, free_var_30
  1047 000002F4 [7D07000000000000] 
  1048 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  1048 000002FE [5318000000000000] 
  1049 00000306 E8BB0C0000              	call bind_primitive
  1050                                  
  1051                                  	; building closure for __bin-sub-rr
  1052 0000030B 48BF-                   	mov rdi, free_var_31
  1052 0000030D [8E07000000000000] 
  1053 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
  1053 00000317 [9318000000000000] 
  1054 0000031F E8A20C0000              	call bind_primitive
  1055                                  
  1056                                  	; building closure for __bin-mul-rr
  1057 00000324 48BF-                   	mov rdi, free_var_32
  1057 00000326 [9F07000000000000] 
  1058 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
  1058 00000330 [D318000000000000] 
  1059 00000338 E8890C0000              	call bind_primitive
  1060                                  
  1061                                  	; building closure for __bin-div-rr
  1062 0000033D 48BF-                   	mov rdi, free_var_33
  1062 0000033F [B007000000000000] 
  1063 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
  1063 00000349 [1319000000000000] 
  1064 00000351 E8700C0000              	call bind_primitive
  1065                                  
  1066                                  	; building closure for __bin-add-qq
  1067 00000356 48BF-                   	mov rdi, free_var_34
  1067 00000358 [C107000000000000] 
  1068 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  1068 00000362 [9D19000000000000] 
  1069 0000036A E8570C0000              	call bind_primitive
  1070                                  
  1071                                  	; building closure for __bin-sub-qq
  1072 0000036F 48BF-                   	mov rdi, free_var_35
  1072 00000371 [D207000000000000] 
  1073 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
  1073 0000037B [3D1A000000000000] 
  1074 00000383 E83E0C0000              	call bind_primitive
  1075                                  
  1076                                  	; building closure for __bin-mul-qq
  1077 00000388 48BF-                   	mov rdi, free_var_36
  1077 0000038A [E307000000000000] 
  1078 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
  1078 00000394 [E21A000000000000] 
  1079 0000039C E8250C0000              	call bind_primitive
  1080                                  
  1081                                  	; building closure for __bin-div-qq
  1082 000003A1 48BF-                   	mov rdi, free_var_37
  1082 000003A3 [F407000000000000] 
  1083 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
  1083 000003AD [7C1B000000000000] 
  1084 000003B5 E80C0C0000              	call bind_primitive
  1085                                  
  1086                                  	; building closure for __bin-add-zz
  1087 000003BA 48BF-                   	mov rdi, free_var_38
  1087 000003BC [0508000000000000] 
  1088 000003C4 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  1088 000003C6 [6119000000000000] 
  1089 000003CE E8F30B0000              	call bind_primitive
  1090                                  
  1091                                  	; building closure for __bin-sub-zz
  1092 000003D3 48BF-                   	mov rdi, free_var_39
  1092 000003D5 [1608000000000000] 
  1093 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_zz
  1093 000003DF [011A000000000000] 
  1094 000003E7 E8DA0B0000              	call bind_primitive
  1095                                  
  1096                                  	; building closure for __bin-mul-zz
  1097 000003EC 48BF-                   	mov rdi, free_var_40
  1097 000003EE [2708000000000000] 
  1098 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_zz
  1098 000003F8 [A11A000000000000] 
  1099 00000400 E8C10B0000              	call bind_primitive
  1100                                  
  1101                                  	; building closure for __bin-div-zz
  1102 00000405 48BF-                   	mov rdi, free_var_41
  1102 00000407 [3808000000000000] 
  1103 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_zz
  1103 00000411 [361B000000000000] 
  1104 00000419 E8A80B0000              	call bind_primitive
  1105                                  
  1106                                  	; building closure for error
  1107 0000041E 48BF-                   	mov rdi, free_var_42
  1107 00000420 [4908000000000000] 
  1108 00000428 48BE-                   	mov rsi, L_code_ptr_error
  1108 0000042A [661C000000000000] 
  1109 00000432 E88F0B0000              	call bind_primitive
  1110                                  
  1111                                  	; building closure for __bin-less-than-rr
  1112 00000437 48BF-                   	mov rdi, free_var_43
  1112 00000439 [5A08000000000000] 
  1113 00000441 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
  1113 00000443 [191D000000000000] 
  1114 0000044B E8760B0000              	call bind_primitive
  1115                                  
  1116                                  	; building closure for __bin-less-than-qq
  1117 00000450 48BF-                   	mov rdi, free_var_44
  1117 00000452 [6B08000000000000] 
  1118 0000045A 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
  1118 0000045C [BB1D000000000000] 
  1119 00000464 E85D0B0000              	call bind_primitive
  1120                                  
  1121                                  	; building closure for __bin-less-than-zz
  1122 00000469 48BF-                   	mov rdi, free_var_45
  1122 0000046B [7C08000000000000] 
  1123 00000473 48BE-                   	mov rsi, L_code_ptr_raw_less_than_zz
  1123 00000475 [6C1D000000000000] 
  1124 0000047D E8440B0000              	call bind_primitive
  1125                                  
  1126                                  	; building closure for __bin-equal-rr
  1127 00000482 48BF-                   	mov rdi, free_var_46
  1127 00000484 [8D08000000000000] 
  1128 0000048C 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
  1128 0000048E [1A1E000000000000] 
  1129 00000496 E82B0B0000              	call bind_primitive
  1130                                  
  1131                                  	; building closure for __bin-equal-qq
  1132 0000049B 48BF-                   	mov rdi, free_var_47
  1132 0000049D [9E08000000000000] 
  1133 000004A5 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
  1133 000004A7 [BC1E000000000000] 
  1134 000004AF E8120B0000              	call bind_primitive
  1135                                  
  1136                                  	; building closure for __bin-equal-zz
  1137 000004B4 48BF-                   	mov rdi, free_var_48
  1137 000004B6 [AF08000000000000] 
  1138 000004BE 48BE-                   	mov rsi, L_code_ptr_raw_equal_zz
  1138 000004C0 [6D1E000000000000] 
  1139 000004C8 E8F90A0000              	call bind_primitive
  1140                                  
  1141                                  	; building closure for quotient
  1142 000004CD 48BF-                   	mov rdi, free_var_49
  1142 000004CF [C008000000000000] 
  1143 000004D7 48BE-                   	mov rsi, L_code_ptr_quotient
  1143 000004D9 [1B1F000000000000] 
  1144 000004E1 E8E00A0000              	call bind_primitive
  1145                                  
  1146                                  	; building closure for remainder
  1147 000004E6 48BF-                   	mov rdi, free_var_50
  1147 000004E8 [D108000000000000] 
  1148 000004F0 48BE-                   	mov rsi, L_code_ptr_remainder
  1148 000004F2 [671F000000000000] 
  1149 000004FA E8C70A0000              	call bind_primitive
  1150                                  
  1151                                  	; building closure for set-car!
  1152 000004FF 48BF-                   	mov rdi, free_var_51
  1152 00000501 [E208000000000000] 
  1153 00000509 48BE-                   	mov rsi, L_code_ptr_set_car
  1153 0000050B [B31F000000000000] 
  1154 00000513 E8AE0A0000              	call bind_primitive
  1155                                  
  1156                                  	; building closure for set-cdr!
  1157 00000518 48BF-                   	mov rdi, free_var_52
  1157 0000051A [F308000000000000] 
  1158 00000522 48BE-                   	mov rsi, L_code_ptr_set_cdr
  1158 00000524 [E51F000000000000] 
  1159 0000052C E8950A0000              	call bind_primitive
  1160                                  
  1161                                  	; building closure for string-ref
  1162 00000531 48BF-                   	mov rdi, free_var_53
  1162 00000533 [0409000000000000] 
  1163 0000053B 48BE-                   	mov rsi, L_code_ptr_string_ref
  1163 0000053D [1720000000000000] 
  1164 00000545 E87C0A0000              	call bind_primitive
  1165                                  
  1166                                  	; building closure for vector-ref
  1167 0000054A 48BF-                   	mov rdi, free_var_54
  1167 0000054C [1509000000000000] 
  1168 00000554 48BE-                   	mov rsi, L_code_ptr_vector_ref
  1168 00000556 [7320000000000000] 
  1169 0000055E E8630A0000              	call bind_primitive
  1170                                  
  1171                                  	; building closure for vector-set!
  1172 00000563 48BF-                   	mov rdi, free_var_55
  1172 00000565 [2609000000000000] 
  1173 0000056D 48BE-                   	mov rsi, L_code_ptr_vector_set
  1173 0000056F [C020000000000000] 
  1174 00000577 E84A0A0000              	call bind_primitive
  1175                                  
  1176                                  	; building closure for string-set!
  1177 0000057C 48BF-                   	mov rdi, free_var_56
  1177 0000057E [3709000000000000] 
  1178 00000586 48BE-                   	mov rsi, L_code_ptr_string_set
  1178 00000588 [1B21000000000000] 
  1179 00000590 E8310A0000              	call bind_primitive
  1180                                  
  1181                                  	; building closure for make-vector
  1182 00000595 48BF-                   	mov rdi, free_var_57
  1182 00000597 [4809000000000000] 
  1183 0000059F 48BE-                   	mov rsi, L_code_ptr_make_vector
  1183 000005A1 [8121000000000000] 
  1184 000005A9 E8180A0000              	call bind_primitive
  1185                                  
  1186                                  	; building closure for make-string
  1187 000005AE 48BF-                   	mov rdi, free_var_58
  1187 000005B0 [5909000000000000] 
  1188 000005B8 48BE-                   	mov rsi, L_code_ptr_make_string
  1188 000005BA [DC21000000000000] 
  1189 000005C2 E8FF090000              	call bind_primitive
  1190                                  
  1191                                  	; building closure for numerator
  1192 000005C7 48BF-                   	mov rdi, free_var_59
  1192 000005C9 [6A09000000000000] 
  1193 000005D1 48BE-                   	mov rsi, L_code_ptr_numerator
  1193 000005D3 [3F22000000000000] 
  1194 000005DB E8E6090000              	call bind_primitive
  1195                                  
  1196                                  	; building closure for denominator
  1197 000005E0 48BF-                   	mov rdi, free_var_60
  1197 000005E2 [7B09000000000000] 
  1198 000005EA 48BE-                   	mov rsi, L_code_ptr_denominator
  1198 000005EC [6822000000000000] 
  1199 000005F4 E8CD090000              	call bind_primitive
  1200                                  
  1201                                  	; building closure for eq?
  1202 000005F9 48BF-                   	mov rdi, free_var_61
  1202 000005FB [8C09000000000000] 
  1203 00000603 48BE-                   	mov rsi, L_code_ptr_is_eq
  1203 00000605 [9122000000000000] 
  1204 0000060D E8B4090000              	call bind_primitive
  1205                                  
  1206                                  	; building closure for __integer-to-fraction
  1207 00000612 48BF-                   	mov rdi, free_var_62
  1207 00000614 [9D09000000000000] 
  1208 0000061C 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  1208 0000061E [1417000000000000] 
  1209 00000626 E89B090000              	call bind_primitive
  1210                                  
  1211                                  	; building closure for logand
  1212 0000062B 48BF-                   	mov rdi, free_var_63
  1212 0000062D [AE09000000000000] 
  1213 00000635 48BE-                   	mov rsi, L_code_ptr_logand
  1213 00000637 [5510000000000000] 
  1214 0000063F E882090000              	call bind_primitive
  1215                                  
  1216                                  	; building closure for logor
  1217 00000644 48BF-                   	mov rdi, free_var_64
  1217 00000646 [BF09000000000000] 
  1218 0000064E 48BE-                   	mov rsi, L_code_ptr_logor
  1218 00000650 [9110000000000000] 
  1219 00000658 E869090000              	call bind_primitive
  1220                                  
  1221                                  	; building closure for logxor
  1222 0000065D 48BF-                   	mov rdi, free_var_65
  1222 0000065F [D009000000000000] 
  1223 00000667 48BE-                   	mov rsi, L_code_ptr_logxor
  1223 00000669 [CD10000000000000] 
  1224 00000671 E850090000              	call bind_primitive
  1225                                  
  1226                                  	; building closure for lognot
  1227 00000676 48BF-                   	mov rdi, free_var_66
  1227 00000678 [E109000000000000] 
  1228 00000680 48BE-                   	mov rsi, L_code_ptr_lognot
  1228 00000682 [0911000000000000] 
  1229 0000068A E837090000              	call bind_primitive
  1230                                  
  1231                                  	; building closure for ash
  1232 0000068F 48BF-                   	mov rdi, free_var_67
  1232 00000691 [F209000000000000] 
  1233 00000699 48BE-                   	mov rsi, L_code_ptr_ash
  1233 0000069B [F40F000000000000] 
  1234 000006A3 E81E090000              	call bind_primitive
  1235                                  
  1236                                  	; building closure for symbol?
  1237 000006A8 48BF-                   	mov rdi, free_var_68
  1237 000006AA [030A000000000000] 
  1238 000006B2 48BE-                   	mov rsi, L_code_ptr_is_symbol
  1238 000006B4 [BF12000000000000] 
  1239 000006BC E805090000              	call bind_primitive
  1240                                  
  1241                                  	; building closure for uninterned-symbol?
  1242 000006C1 48BF-                   	mov rdi, free_var_69
  1242 000006C3 [140A000000000000] 
  1243 000006CB 48BE-                   	mov rsi, L_code_ptr_is_uninterned_symbol
  1243 000006CD [F212000000000000] 
  1244 000006D5 E8EC080000              	call bind_primitive
  1245                                  
  1246                                  	; building closure for gensym?
  1247 000006DA 48BF-                   	mov rdi, free_var_70
  1247 000006DC [250A000000000000] 
  1248 000006E4 48BE-                   	mov rsi, L_code_ptr_is_uninterned_symbol
  1248 000006E6 [F212000000000000] 
  1249 000006EE E8D3080000              	call bind_primitive
  1250                                  
  1251                                  	; building closure for interned-symbol?
  1252 000006F3 48BF-                   	mov rdi, free_var_5
  1252 000006F5 [D405000000000000] 
  1253 000006FD 48BE-                   	mov rsi, L_code_ptr_is_interned_symbol
  1253 000006FF [2513000000000000] 
  1254 00000707 E8BA080000              	call bind_primitive
  1255                                  
  1256                                  	; building closure for gensym
  1257 0000070C 48BF-                   	mov rdi, free_var_71
  1257 0000070E [360A000000000000] 
  1258 00000716 48BE-                   	mov rsi, L_code_ptr_gensym
  1258 00000718 [5713000000000000] 
  1259 00000720 E8A1080000              	call bind_primitive
  1260                                  
  1261                                  	; building closure for frame
  1262 00000725 48BF-                   	mov rdi, free_var_72
  1262 00000727 [470A000000000000] 
  1263 0000072F 48BE-                   	mov rsi, L_code_ptr_frame
  1263 00000731 [0D09000000000000] 
  1264 00000739 E888080000              	call bind_primitive
  1265                                  
  1266                                  	; building closure for break
  1267 0000073E 48BF-                   	mov rdi, free_var_73
  1267 00000740 [580A000000000000] 
  1268 00000748 48BE-                   	mov rsi, L_code_ptr_break
  1268 0000074A [F308000000000000] 
  1269 00000752 E86F080000              	call bind_primitive
  1270                                  
  1271 00000757 48B8-                   	mov rax, L_constants + 2
  1271 00000759 [0200000000000000] 
  1272                                  
  1273 00000761 483D[02000000]          	cmp rax, sob_boolean_false
  1274 00000767 740C                    	je .L_if_else_0002
  1275 00000769 48B8-                   	mov rax, L_constants + 1389
  1275 0000076B [6D05000000000000] 
  1276                                  
  1277 00000773 EB0A                    	jmp .L_if_end_0002
  1278                                  
  1279                                  	.L_if_else_0002:
  1280 00000775 48B8-                   	mov rax, L_constants + 1398
  1280 00000777 [7605000000000000] 
  1281                                  
  1282                                  	.L_if_end_0002:
  1283                                  
  1284 0000077F 4889C7                  	mov rdi, rax
  1285 00000782 E86D020000              	call print_sexpr_if_not_void
  1286                                  
  1287 00000787 48BF-                           mov rdi, fmt_memory_usage
  1287 00000789 [010B000000000000] 
  1288 00000791 488B3425[870B0000]              mov rsi, qword [top_of_memory]
  1289 00000799 4881EE[00000000]                sub rsi, memory
  1290 000007A0 B800000000                      mov rax, 0
  1291                                          ENTER
    44 000007A5 C8000000            <1>  enter 0, 0
    45 000007A9 4883E4F0            <1>  and rsp, ~15
  1292 000007AD E8(00000000)                    call printf
  1293                                          LEAVE
    49 000007B2 C9                  <1>  leave
  1294 000007B3 C9                      	leave
  1295 000007B4 C3                      	ret
  1296                                  
  1297                                  L_error_fvar_undefined:
  1298 000007B5 50                              push rax
  1299 000007B6 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
  1300 000007BE 48BE-                           mov rsi, fmt_undefined_free_var_1
  1300 000007C0 [690A000000000000] 
  1301 000007C8 B800000000                      mov rax, 0
  1302                                          ENTER
    44 000007CD C8000000            <1>  enter 0, 0
    45 000007D1 4883E4F0            <1>  and rsp, ~15
  1303 000007D5 E8(00000000)                    call fprintf
  1304                                          LEAVE
    49 000007DA C9                  <1>  leave
  1305 000007DB 58                              pop rax
  1306 000007DC 488B4001                        mov rax, qword [rax + 1] ; string
  1307 000007E0 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1308 000007E4 BE01000000                      mov rsi, 1               ; sizeof(char)
  1309 000007E9 488B5001                        mov rdx, qword [rax + 1] ; string-length
  1310 000007ED 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
  1311 000007F5 B800000000                      mov rax, 0
  1312                                          ENTER
    44 000007FA C8000000            <1>  enter 0, 0
    45 000007FE 4883E4F0            <1>  and rsp, ~15
  1313 00000802 E8(00000000)                    call fwrite
  1314                                          LEAVE
    49 00000807 C9                  <1>  leave
  1315 00000808 488B3C25[00000000]              mov rdi, [stderr]       ; destination
  1316 00000810 48BE-                           mov rsi, fmt_undefined_free_var_2
  1316 00000812 [800A000000000000] 
  1317 0000081A B800000000                      mov rax, 0
  1318                                          ENTER
    44 0000081F C8000000            <1>  enter 0, 0
    45 00000823 4883E4F0            <1>  and rsp, ~15
  1319 00000827 E8(00000000)                    call fprintf
  1320                                          LEAVE
    49 0000082C C9                  <1>  leave
  1321 0000082D 48C7C0F6FFFFFF                  mov rax, -10
  1322 00000834 E8(00000000)                    call exit
  1323                                  
  1324                                  L_error_non_closure:
  1325 00000839 488B3C25[00000000]              mov rdi, qword [stderr]
  1326 00000841 48BE-                           mov rsi, fmt_non_closure
  1326 00000843 [370B000000000000] 
  1327 0000084B B800000000                      mov rax, 0
  1328                                          ENTER
    44 00000850 C8000000            <1>  enter 0, 0
    45 00000854 4883E4F0            <1>  and rsp, ~15
  1329 00000858 E8(00000000)                    call fprintf
  1330                                          LEAVE
    49 0000085D C9                  <1>  leave
  1331 0000085E 48C7C0FEFFFFFF                  mov rax, -2
  1332 00000865 E8(00000000)                    call exit
  1333                                  
  1334                                  L_error_improper_list:
  1335 0000086A 488B3C25[00000000]      	mov rdi, qword [stderr]
  1336 00000872 48BE-                   	mov rsi, fmt_error_improper_list
  1336 00000874 [5F0B000000000000] 
  1337 0000087C B800000000              	mov rax, 0
  1338                                          ENTER
    44 00000881 C8000000            <1>  enter 0, 0
    45 00000885 4883E4F0            <1>  and rsp, ~15
  1339 00000889 E8(00000000)            	call fprintf
  1340                                          LEAVE
    49 0000088E C9                  <1>  leave
  1341 0000088F 48C7C0F9FFFFFF          	mov rax, -7
  1342 00000896 E8(00000000)            	call exit
  1343                                  
  1344                                  L_error_incorrect_arity_simple:
  1345 0000089B 488B3C25[00000000]              mov rdi, qword [stderr]
  1346 000008A3 48BE-                           mov rsi, fmt_incorrect_arity_simple
  1346 000008A5 [A20A000000000000] 
  1347 000008AD EB12                            jmp L_error_incorrect_arity_common
  1348                                  L_error_incorrect_arity_opt:
  1349 000008AF 488B3C25[00000000]              mov rdi, qword [stderr]
  1350 000008B7 48BE-                           mov rsi, fmt_incorrect_arity_opt
  1350 000008B9 [CD0A000000000000] 
  1351                                  L_error_incorrect_arity_common:
  1352 000008C1 5A                              pop rdx
  1353 000008C2 59                              pop rcx
  1354 000008C3 B800000000                      mov rax, 0
  1355                                          ENTER
    44 000008C8 C8000000            <1>  enter 0, 0
    45 000008CC 4883E4F0            <1>  and rsp, ~15
  1356 000008D0 E8(00000000)                    call fprintf
  1357                                          LEAVE
    49 000008D5 C9                  <1>  leave
  1358 000008D6 48C7C0FAFFFFFF                  mov rax, -6
  1359 000008DD E8(00000000)                    call exit
  1360                                  
  1361                                  section .data
  1362                                  fmt_undefined_free_var_1:
  1363 00000A69 212121205468652066-             db `!!! The free variable \0`
  1363 00000A72 726565207661726961-
  1363 00000A7B 626C652000         
  1364                                  fmt_undefined_free_var_2:
  1365 00000A80 207761732075736564-             db ` was used before it was defined.\n\0`
  1365 00000A89 206265666F72652069-
  1365 00000A92 742077617320646566-
  1365 00000A9B 696E65642E0A00     
  1366                                  fmt_incorrect_arity_simple:
  1367 00000AA2 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  1367 00000AAB 74656420256C642061-
  1367 00000AB4 7267756D656E74732C-
  1367 00000ABD 206275742067697665-
  1367 00000AC6 6E20256C640A00     
  1368                                  fmt_incorrect_arity_opt:
  1369 00000ACD 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  1369 00000AD6 746564206174206C65-
  1369 00000ADF 61737420256C642061-
  1369 00000AE8 7267756D656E74732C-
  1369 00000AF1 206275742067697665-
  1369 00000AFA 6E20256C640A00     
  1370                                  fmt_memory_usage:
  1371 00000B01 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  1371 00000B0A 20256C642062797465-
  1371 00000B13 73206F662064796E61-
  1371 00000B1C 6D6963616C6C792D61-
  1371 00000B25 6C6C6F636174656420-
  1371 00000B2E 6D656D6F72790A0A00 
  1372                                  fmt_non_closure:
  1373 00000B37 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  1373 00000B40 7074696E6720746F20-
  1373 00000B49 6170706C792061206E-
  1373 00000B52 6F6E2D636C6F737572-
  1373 00000B5B 65210A00           
  1374                                  fmt_error_improper_list:
  1375 00000B5F 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  1375 00000B68 7267756D656E742069-
  1375 00000B71 73206E6F7420612070-
  1375 00000B7A 726F706572206C6973-
  1375 00000B83 74210A00           
  1376                                  
  1377                                  section .bss
  1378                                  memory:
  1379 00000000 <res 40000000h>         	resb gbytes(1)
  1380                                  
  1381                                  section .data
  1382                                  top_of_memory:
  1383 00000B87 [0000000000000000]              dq memory
  1384                                  
  1385                                  section .text
  1386                                  malloc:
  1387 000008E2 488B0425[870B0000]              mov rax, qword [top_of_memory]
  1388 000008EA 48013C25[870B0000]              add qword [top_of_memory], rdi
  1389 000008F2 C3                              ret
  1390                                  
  1391                                  L_code_ptr_break:
  1392 000008F3 48837C241000                    cmp qword [rsp + 8 * 2], 0
  1393 000008F9 0F85861A0000                    jne L_error_arg_count_0
  1394 000008FF CC                              int3
  1395 00000900 48B8-                           mov rax, sob_void
  1395 00000902 [0000000000000000] 
  1396 0000090A C21000                          ret AND_KILL_FRAME(0)        
  1397                                  
  1398                                  L_code_ptr_frame:
  1399 0000090D C8000000                        enter 0, 0
  1400 00000911 48837D1800                      cmp COUNT, 0
  1401 00000916 0F85691A0000                    jne L_error_arg_count_0
  1402                                  
  1403 0000091C 48BF-                           mov rdi, fmt_frame
  1403 0000091E [8F0B000000000000] 
  1404 00000926 488B7500                        mov rsi, qword [rbp]    ; old rbp
  1405 0000092A 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
  1406 0000092E 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
  1407 00000932 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
  1408 00000936 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
  1409 0000093A 6A00                            push 0
  1410 0000093C 4151                            push r9
  1411 0000093E 4150                            push r8                   ; we'll use it when printing the params
  1412 00000940 B800000000                      mov rax, 0
  1413                                          
  1414                                          ENTER
    44 00000945 C8000000            <1>  enter 0, 0
    45 00000949 4883E4F0            <1>  and rsp, ~15
  1415 0000094D E8(00000000)                    call printf
  1416                                          LEAVE
    49 00000952 C9                  <1>  leave
  1417                                  
  1418                                  .L:
  1419 00000953 488B0C24                        mov rcx, qword [rsp]
  1420 00000957 4883F900                        cmp rcx, 0
  1421 0000095B 7467                            je .L_out
  1422 0000095D 48BF-                           mov rdi, fmt_frame_param_prefix
  1422 0000095F [C80B000000000000] 
  1423 00000967 488B742410                      mov rsi, qword [rsp + 8*2]
  1424 0000096C B800000000                      mov rax, 0
  1425                                          
  1426                                          ENTER
    44 00000971 C8000000            <1>  enter 0, 0
    45 00000975 4883E4F0            <1>  and rsp, ~15
  1427 00000979 E8(00000000)                    call printf
  1428                                          LEAVE
    49 0000097E C9                  <1>  leave
  1429                                  
  1430 0000097F 488B0C24                        mov rcx, qword [rsp]
  1431 00000983 48FFC9                          dec rcx
  1432 00000986 48890C24                        mov qword [rsp], rcx    ; dec arg count
  1433 0000098A 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
  1434 0000098F 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
  1435 00000994 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
  1436 00000998 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  1437 0000099D 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  1438 000009A0 E87B000000                      call print_sexpr
  1439 000009A5 48BF-                           mov rdi, fmt_newline
  1439 000009A7 [F40B000000000000] 
  1440 000009AF B800000000                      mov rax, 0
  1441                                          ENTER
    44 000009B4 C8000000            <1>  enter 0, 0
    45 000009B8 4883E4F0            <1>  and rsp, ~15
  1442 000009BC E8(00000000)                    call printf
  1443                                          LEAVE
    49 000009C1 C9                  <1>  leave
  1444 000009C2 EB8F                            jmp .L
  1445                                  .L_out:
  1446 000009C4 48BF-                           mov rdi, fmt_frame_continue
  1446 000009C6 [D90B000000000000] 
  1447 000009CE B800000000                      mov rax, 0
  1448                                          ENTER
    44 000009D3 C8000000            <1>  enter 0, 0
    45 000009D7 4883E4F0            <1>  and rsp, ~15
  1449 000009DB E8(00000000)                    call printf
  1450 000009E0 E8(00000000)                    call getchar
  1451                                          LEAVE
    49 000009E5 C9                  <1>  leave
  1452                                          
  1453 000009E6 48B8-                           mov rax, sob_void
  1453 000009E8 [0000000000000000] 
  1454 000009F0 C9                              leave
  1455 000009F1 C21000                          ret AND_KILL_FRAME(0)
  1456                                          
  1457                                  print_sexpr_if_not_void:
  1458 000009F4 4881FF[00000000]        	cmp rdi, sob_void
  1459 000009FB 7422                    	je .done
  1460 000009FD E81E000000              	call print_sexpr
  1461 00000A02 48BF-                   	mov rdi, fmt_newline
  1461 00000A04 [F40B000000000000] 
  1462 00000A0C B800000000              	mov rax, 0
  1463                                  	ENTER
    44 00000A11 C8000000            <1>  enter 0, 0
    45 00000A15 4883E4F0            <1>  and rsp, ~15
  1464 00000A19 E8(00000000)            	call printf
  1465                                  	LEAVE
    49 00000A1E C9                  <1>  leave
  1466                                  .done:
  1467 00000A1F C3                      	ret
  1468                                  
  1469                                  section .data
  1470                                  fmt_frame:
  1471 00000B8F 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  1471 00000B98 207265742061646472-
  1471 00000BA1 203D2025703B206C65-
  1471 00000BAA 7820656E76203D2025-
  1471 00000BB3 703B20706172616D20-
  1471 00000BBC 636F756E74203D2025-
  1471 00000BC5 640A00             
  1472                                  fmt_frame_param_prefix:
  1473 00000BC8 3D3D5B706172616D20-             db `==[param %d]==> \0`
  1473 00000BD1 25645D3D3D3E2000   
  1474                                  fmt_frame_continue:
  1475 00000BD9 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  1475 00000BE2 723E20746F20636F6E-
  1475 00000BEB 74696E75652E2E2E00 
  1476                                  fmt_newline:
  1477 00000BF4 0A00                    	db `\n\0`
  1478                                  fmt_void:
  1479 00000BF6 233C766F69643E00        	db `#<void>\0`
  1480                                  fmt_nil:
  1481 00000BFE 282900                  	db `()\0`
  1482                                  fmt_boolean_false:
  1483 00000C01 236600                  	db `#f\0`
  1484                                  fmt_boolean_true:
  1485 00000C04 237400                  	db `#t\0`
  1486                                  fmt_char_backslash:
  1487 00000C07 235C5C00                	db `#\\\\\0`
  1488                                  fmt_char_dquote:
  1489 00000C0B 235C2200                	db `#\\"\0`
  1490                                  fmt_char_simple:
  1491 00000C0F 235C256300              	db `#\\%c\0`
  1492                                  fmt_char_null:
  1493 00000C14 235C6E756C00            	db `#\\nul\0`
  1494                                  fmt_char_bell:
  1495 00000C1A 235C62656C6C00          	db `#\\bell\0`
  1496                                  fmt_char_backspace:
  1497 00000C21 235C6261636B737061-     	db `#\\backspace\0`
  1497 00000C2A 636500             
  1498                                  fmt_char_tab:
  1499 00000C2D 235C74616200            	db `#\\tab\0`
  1500                                  fmt_char_newline:
  1501 00000C33 235C6E65776C696E65-     	db `#\\newline\0`
  1501 00000C3C 00                 
  1502                                  fmt_char_formfeed:
  1503 00000C3D 235C7061676500          	db `#\\page\0`
  1504                                  fmt_char_return:
  1505 00000C44 235C72657475726E00      	db `#\\return\0`
  1506                                  fmt_char_escape:
  1507 00000C4D 235C65736300            	db `#\\esc\0`
  1508                                  fmt_char_space:
  1509 00000C53 235C737061636500        	db `#\\space\0`
  1510                                  fmt_char_hex:
  1511 00000C5B 235C782530325800        	db `#\\x%02X\0`
  1512                                  fmt_gensym:
  1513 00000C63 47256C6400                      db `G%ld\0`
  1514                                  fmt_closure:
  1515 00000C68 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  1515 00000C71 206174203078253038-
  1515 00000C7A 5820656E763D307825-
  1515 00000C83 30385820636F64653D-
  1515 00000C8C 3078253038583E00   
  1516                                  fmt_lparen:
  1517 00000C94 2800                    	db `(\0`
  1518                                  fmt_dotted_pair:
  1519 00000C96 202E2000                	db ` . \0`
  1520                                  fmt_rparen:
  1521 00000C9A 2900                    	db `)\0`
  1522                                  fmt_space:
  1523 00000C9C 2000                    	db ` \0`
  1524                                  fmt_empty_vector:
  1525 00000C9E 23282900                	db `#()\0`
  1526                                  fmt_vector:
  1527 00000CA2 232800                  	db `#(\0`
  1528                                  fmt_real:
  1529 00000CA5 256600                  	db `%f\0`
  1530                                  fmt_fraction:
  1531 00000CA8 256C642F256C6400        	db `%ld/%ld\0`
  1532                                  fmt_zero:
  1533 00000CB0 3000                    	db `0\0`
  1534                                  fmt_int:
  1535 00000CB2 256C6400                	db `%ld\0`
  1536                                  fmt_unknown_scheme_object_error:
  1537 00000CB6 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  1537 00000CBF 6F723A20556E6B6E6F-
  1537 00000CC8 776E20536368656D65-
  1537 00000CD1 2D6F626A6563742028-
  1537 00000CDA 525454492030782530-
  1537 00000CE3 32582920           
  1538 00000CE7 617420616464726573-     	db `at address 0x%08X\n\n\0`
  1538 00000CF0 73203078253038580A-
  1538 00000CF9 0A00               
  1539                                  fmt_dquote:
  1540 00000CFB 2200                    	db `\"\0`
  1541                                  fmt_string_char:
  1542 00000CFD 256300                          db `%c\0`
  1543                                  fmt_string_char_7:
  1544 00000D00 5C6100                          db `\\a\0`
  1545                                  fmt_string_char_8:
  1546 00000D03 5C6200                          db `\\b\0`
  1547                                  fmt_string_char_9:
  1548 00000D06 5C7400                          db `\\t\0`
  1549                                  fmt_string_char_10:
  1550 00000D09 5C6E00                          db `\\n\0`
  1551                                  fmt_string_char_11:
  1552 00000D0C 5C7600                          db `\\v\0`
  1553                                  fmt_string_char_12:
  1554 00000D0F 5C6600                          db `\\f\0`
  1555                                  fmt_string_char_13:
  1556 00000D12 5C7200                          db `\\r\0`
  1557                                  fmt_string_char_34:
  1558 00000D15 5C2200                          db `\\"\0`
  1559                                  fmt_string_char_92:
  1560 00000D18 5C5C00                          db `\\\\\0`
  1561                                  fmt_string_char_hex:
  1562 00000D1B 5C7825583B00                    db `\\x%X;\0`
  1563                                  
  1564                                  section .text
  1565                                  
  1566                                  print_sexpr:
  1567 00000A20 C8000000                	enter 0, 0
  1568 00000A24 8A07                    	mov al, byte [rdi]
  1569 00000A26 3C00                    	cmp al, T_void
  1570 00000A28 7465                    	je .Lvoid
  1571 00000A2A 3C01                    	cmp al, T_nil
  1572 00000A2C 7470                    	je .Lnil
  1573 00000A2E 3C09                    	cmp al, T_boolean_false
  1574 00000A30 747B                    	je .Lboolean_false
  1575 00000A32 3C0A                    	cmp al, T_boolean_true
  1576 00000A34 0F8482000000            	je .Lboolean_true
  1577 00000A3A 3C02                    	cmp al, T_char
  1578 00000A3C 0F8489000000            	je .Lchar
  1579 00000A42 3C41                    	cmp al, T_interned_symbol
  1580 00000A44 0F84CB010000            	je .Linterned_symbol
  1581 00000A4A 3C42                            cmp al, T_uninterned_symbol
  1582 00000A4C 0F84E6010000                    je .Luninterned_symbol
  1583 00000A52 3C21                    	cmp al, T_pair
  1584 00000A54 0F84F1010000            	je .Lpair
  1585 00000A5A 3C22                    	cmp al, T_vector
  1586 00000A5C 0F84BA020000            	je .Lvector
  1587 00000A62 3C04                    	cmp al, T_closure
  1588 00000A64 0F8491010000            	je .Lclosure
  1589 00000A6A 3C13                    	cmp al, T_real
  1590 00000A6C 0F844B030000            	je .Lreal
  1591 00000A72 3C12                    	cmp al, T_fraction
  1592 00000A74 0F8471030000            	je .Lfraction
  1593 00000A7A 3C11                    	cmp al, T_integer
  1594 00000A7C 0F84AA030000            	je .Linteger
  1595 00000A82 3C03                    	cmp al, T_string
  1596 00000A84 0F84B5030000            	je .Lstring
  1597                                  
  1598 00000A8A E9ED040000              	jmp .Lunknown_sexpr_type
  1599                                  
  1600                                  .Lvoid:
  1601 00000A8F 48BF-                   	mov rdi, fmt_void
  1601 00000A91 [F60B000000000000] 
  1602 00000A99 E911050000              	jmp .Lemit
  1603                                  
  1604                                  .Lnil:
  1605 00000A9E 48BF-                   	mov rdi, fmt_nil
  1605 00000AA0 [FE0B000000000000] 
  1606 00000AA8 E902050000              	jmp .Lemit
  1607                                  
  1608                                  .Lboolean_false:
  1609 00000AAD 48BF-                   	mov rdi, fmt_boolean_false
  1609 00000AAF [010C000000000000] 
  1610 00000AB7 E9F3040000              	jmp .Lemit
  1611                                  
  1612                                  .Lboolean_true:
  1613 00000ABC 48BF-                   	mov rdi, fmt_boolean_true
  1613 00000ABE [040C000000000000] 
  1614 00000AC6 E9E4040000              	jmp .Lemit
  1615                                  
  1616                                  .Lchar:
  1617 00000ACB 8A4701                  	mov al, byte [rdi + 1]
  1618 00000ACE 3C20                    	cmp al, ' '
  1619 00000AD0 7E28                    	jle .Lchar_whitespace
  1620 00000AD2 3C5C                    	cmp al, 92 		; backslash
  1621 00000AD4 0F847C000000            	je .Lchar_backslash
  1622 00000ADA 3C22                    	cmp al, '"'
  1623 00000ADC 0F8483000000            	je .Lchar_dquote
  1624 00000AE2 4825FF000000            	and rax, 255
  1625 00000AE8 48BF-                   	mov rdi, fmt_char_simple
  1625 00000AEA [0F0C000000000000] 
  1626 00000AF2 4889C6                  	mov rsi, rax
  1627 00000AF5 E9B5040000              	jmp .Lemit
  1628                                  
  1629                                  .Lchar_whitespace:
  1630 00000AFA 3C00                    	cmp al, 0
  1631 00000AFC 7476                    	je .Lchar_null
  1632 00000AFE 3C07                    	cmp al, 7
  1633 00000B00 0F847D000000            	je .Lchar_bell
  1634 00000B06 3C08                    	cmp al, 8
  1635 00000B08 0F8484000000            	je .Lchar_backspace
  1636 00000B0E 3C09                    	cmp al, 9
  1637 00000B10 0F848B000000            	je .Lchar_tab
  1638 00000B16 3C0A                    	cmp al, 10
  1639 00000B18 0F8492000000            	je .Lchar_newline
  1640 00000B1E 3C0C                    	cmp al, 12
  1641 00000B20 0F8499000000            	je .Lchar_formfeed
  1642 00000B26 3C0D                    	cmp al, 13
  1643 00000B28 0F84A0000000            	je .Lchar_return
  1644 00000B2E 3C1B                    	cmp al, 27
  1645 00000B30 0F84A7000000            	je .Lchar_escape
  1646 00000B36 4825FF000000            	and rax, 255
  1647 00000B3C 3C20                    	cmp al, ' '
  1648 00000B3E 0F84A8000000            	je .Lchar_space
  1649 00000B44 48BF-                   	mov rdi, fmt_char_hex
  1649 00000B46 [5B0C000000000000] 
  1650 00000B4E 4889C6                  	mov rsi, rax
  1651 00000B51 E959040000              	jmp .Lemit	
  1652                                  
  1653                                  .Lchar_backslash:
  1654 00000B56 48BF-                   	mov rdi, fmt_char_backslash
  1654 00000B58 [070C000000000000] 
  1655 00000B60 E94A040000              	jmp .Lemit
  1656                                  
  1657                                  .Lchar_dquote:
  1658 00000B65 48BF-                   	mov rdi, fmt_char_dquote
  1658 00000B67 [0B0C000000000000] 
  1659 00000B6F E93B040000              	jmp .Lemit
  1660                                  
  1661                                  .Lchar_null:
  1662 00000B74 48BF-                   	mov rdi, fmt_char_null
  1662 00000B76 [140C000000000000] 
  1663 00000B7E E92C040000              	jmp .Lemit
  1664                                  
  1665                                  .Lchar_bell:
  1666 00000B83 48BF-                   	mov rdi, fmt_char_bell
  1666 00000B85 [1A0C000000000000] 
  1667 00000B8D E91D040000              	jmp .Lemit
  1668                                  
  1669                                  .Lchar_backspace:
  1670 00000B92 48BF-                   	mov rdi, fmt_char_backspace
  1670 00000B94 [210C000000000000] 
  1671 00000B9C E90E040000              	jmp .Lemit
  1672                                  
  1673                                  .Lchar_tab:
  1674 00000BA1 48BF-                   	mov rdi, fmt_char_tab
  1674 00000BA3 [2D0C000000000000] 
  1675 00000BAB E9FF030000              	jmp .Lemit
  1676                                  
  1677                                  .Lchar_newline:
  1678 00000BB0 48BF-                   	mov rdi, fmt_char_newline
  1678 00000BB2 [330C000000000000] 
  1679 00000BBA E9F0030000              	jmp .Lemit
  1680                                  
  1681                                  .Lchar_formfeed:
  1682 00000BBF 48BF-                   	mov rdi, fmt_char_formfeed
  1682 00000BC1 [3D0C000000000000] 
  1683 00000BC9 E9E1030000              	jmp .Lemit
  1684                                  
  1685                                  .Lchar_return:
  1686 00000BCE 48BF-                   	mov rdi, fmt_char_return
  1686 00000BD0 [440C000000000000] 
  1687 00000BD8 E9D2030000              	jmp .Lemit
  1688                                  
  1689                                  .Lchar_escape:
  1690 00000BDD 48BF-                   	mov rdi, fmt_char_escape
  1690 00000BDF [4D0C000000000000] 
  1691 00000BE7 E9C3030000              	jmp .Lemit
  1692                                  
  1693                                  .Lchar_space:
  1694 00000BEC 48BF-                   	mov rdi, fmt_char_space
  1694 00000BEE [530C000000000000] 
  1695 00000BF6 E9B4030000              	jmp .Lemit
  1696                                  
  1697                                  .Lclosure:
  1698 00000BFB 4889FE                  	mov rsi, qword rdi
  1699 00000BFE 48BF-                   	mov rdi, fmt_closure
  1699 00000C00 [680C000000000000] 
  1700 00000C08 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1701 00000C0C 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1702 00000C10 E99A030000              	jmp .Lemit
  1703                                  
  1704                                  .Linterned_symbol:
  1705 00000C15 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1706 00000C19 BE01000000              	mov rsi, 1		 ; size = 1 byte
  1707 00000C1E 488B5701                	mov rdx, qword [rdi + 1] ; length
  1708 00000C22 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1709 00000C26 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1710 00000C2E E8(00000000)            	call fwrite
  1711 00000C33 E98C030000              	jmp .Lend
  1712                                  
  1713                                  .Luninterned_symbol:
  1714 00000C38 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1715 00000C3C 48BF-                           mov rdi, fmt_gensym
  1715 00000C3E [630C000000000000] 
  1716 00000C46 E964030000                      jmp .Lemit
  1717                                  	
  1718                                  .Lpair:
  1719 00000C4B 57                      	push rdi
  1720 00000C4C 48BF-                   	mov rdi, fmt_lparen
  1720 00000C4E [940C000000000000] 
  1721 00000C56 B800000000              	mov rax, 0
  1722                                          ENTER
    44 00000C5B C8000000            <1>  enter 0, 0
    45 00000C5F 4883E4F0            <1>  and rsp, ~15
  1723 00000C63 E8(00000000)            	call printf
  1724                                          LEAVE
    49 00000C68 C9                  <1>  leave
  1725 00000C69 488B3C24                	mov rdi, qword [rsp] 	; pair
  1726 00000C6D 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1727 00000C71 E8AAFDFFFF              	call print_sexpr
  1728 00000C76 5F                      	pop rdi 		; pair
  1729 00000C77 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1730                                  .Lcdr:
  1731 00000C7B 8A07                    	mov al, byte [rdi]
  1732 00000C7D 3C01                    	cmp al, T_nil
  1733 00000C7F 7447                    	je .Lcdr_nil
  1734 00000C81 3C21                    	cmp al, T_pair
  1735 00000C83 7462                    	je .Lcdr_pair
  1736 00000C85 57                      	push rdi
  1737 00000C86 48BF-                   	mov rdi, fmt_dotted_pair
  1737 00000C88 [960C000000000000] 
  1738 00000C90 B800000000              	mov rax, 0
  1739                                          ENTER
    44 00000C95 C8000000            <1>  enter 0, 0
    45 00000C99 4883E4F0            <1>  and rsp, ~15
  1740 00000C9D E8(00000000)            	call printf
  1741                                          LEAVE
    49 00000CA2 C9                  <1>  leave
  1742 00000CA3 5F                      	pop rdi
  1743 00000CA4 E877FDFFFF              	call print_sexpr
  1744 00000CA9 48BF-                   	mov rdi, fmt_rparen
  1744 00000CAB [9A0C000000000000] 
  1745 00000CB3 B800000000              	mov rax, 0
  1746                                          ENTER
    44 00000CB8 C8000000            <1>  enter 0, 0
    45 00000CBC 4883E4F0            <1>  and rsp, ~15
  1747 00000CC0 E8(00000000)            	call printf
  1748                                          LEAVE
    49 00000CC5 C9                  <1>  leave
  1749 00000CC6 C9                      	leave
  1750 00000CC7 C3                      	ret
  1751                                  
  1752                                  .Lcdr_nil:
  1753 00000CC8 48BF-                   	mov rdi, fmt_rparen
  1753 00000CCA [9A0C000000000000] 
  1754 00000CD2 B800000000              	mov rax, 0
  1755                                          ENTER
    44 00000CD7 C8000000            <1>  enter 0, 0
    45 00000CDB 4883E4F0            <1>  and rsp, ~15
  1756 00000CDF E8(00000000)            	call printf
  1757                                          LEAVE
    49 00000CE4 C9                  <1>  leave
  1758 00000CE5 C9                      	leave
  1759 00000CE6 C3                      	ret
  1760                                  
  1761                                  .Lcdr_pair:
  1762 00000CE7 57                      	push rdi
  1763 00000CE8 48BF-                   	mov rdi, fmt_space
  1763 00000CEA [9C0C000000000000] 
  1764 00000CF2 B800000000              	mov rax, 0
  1765                                          ENTER
    44 00000CF7 C8000000            <1>  enter 0, 0
    45 00000CFB 4883E4F0            <1>  and rsp, ~15
  1766 00000CFF E8(00000000)            	call printf
  1767                                          LEAVE
    49 00000D04 C9                  <1>  leave
  1768 00000D05 488B3C24                	mov rdi, qword [rsp]
  1769 00000D09 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1770 00000D0D E80EFDFFFF              	call print_sexpr
  1771 00000D12 5F                      	pop rdi
  1772 00000D13 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1773 00000D17 E95FFFFFFF              	jmp .Lcdr
  1774                                  
  1775                                  .Lvector:
  1776 00000D1C 488B4701                	mov rax, qword [rdi + 1] ; length
  1777 00000D20 4883F800                	cmp rax, 0
  1778 00000D24 0F8484000000            	je .Lvector_empty
  1779 00000D2A 57                      	push rdi
  1780 00000D2B 48BF-                   	mov rdi, fmt_vector
  1780 00000D2D [A20C000000000000] 
  1781 00000D35 B800000000              	mov rax, 0
  1782                                          ENTER
    44 00000D3A C8000000            <1>  enter 0, 0
    45 00000D3E 4883E4F0            <1>  and rsp, ~15
  1783 00000D42 E8(00000000)            	call printf
  1784                                          LEAVE
    49 00000D47 C9                  <1>  leave
  1785 00000D48 488B3C24                	mov rdi, qword [rsp]
  1786 00000D4C FF7701                  	push qword [rdi + 1]
  1787 00000D4F 6A01                    	push 1
  1788 00000D51 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1789 00000D55 E8C6FCFFFF              	call print_sexpr
  1790                                  .Lvector_loop:
  1791                                  	; [rsp] index
  1792                                  	; [rsp + 8*1] limit
  1793                                  	; [rsp + 8*2] vector
  1794 00000D5A 488B0424                	mov rax, qword [rsp]
  1795 00000D5E 483B442408              	cmp rax, qword [rsp + 8*1]
  1796 00000D63 7436                    	je .Lvector_end
  1797 00000D65 48BF-                   	mov rdi, fmt_space
  1797 00000D67 [9C0C000000000000] 
  1798 00000D6F B800000000              	mov rax, 0
  1799                                          ENTER
    44 00000D74 C8000000            <1>  enter 0, 0
    45 00000D78 4883E4F0            <1>  and rsp, ~15
  1800 00000D7C E8(00000000)            	call printf
  1801                                          LEAVE
    49 00000D81 C9                  <1>  leave
  1802 00000D82 488B0424                	mov rax, qword [rsp]
  1803 00000D86 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1804 00000D8B 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1805 00000D90 E88BFCFFFF              	call print_sexpr
  1806 00000D95 48FF0424                	inc qword [rsp]
  1807 00000D99 EBBF                    	jmp .Lvector_loop
  1808                                  
  1809                                  .Lvector_end:
  1810 00000D9B 4883C418                	add rsp, 8*3
  1811 00000D9F 48BF-                   	mov rdi, fmt_rparen
  1811 00000DA1 [9A0C000000000000] 
  1812 00000DA9 E901020000              	jmp .Lemit	
  1813                                  
  1814                                  .Lvector_empty:
  1815 00000DAE 48BF-                   	mov rdi, fmt_empty_vector
  1815 00000DB0 [9E0C000000000000] 
  1816 00000DB8 E9F2010000              	jmp .Lemit
  1817                                  
  1818                                  .Lreal:
  1819 00000DBD FF7701                  	push qword [rdi + 1]
  1820 00000DC0 F20F100424              	movsd xmm0, qword [rsp]
  1821 00000DC5 4883C408                	add rsp, 8*1
  1822 00000DC9 48BF-                   	mov rdi, fmt_real
  1822 00000DCB [A50C000000000000] 
  1823 00000DD3 B801000000              	mov rax, 1
  1824                                  	ENTER
    44 00000DD8 C8000000            <1>  enter 0, 0
    45 00000DDC 4883E4F0            <1>  and rsp, ~15
  1825 00000DE0 E8(00000000)            	call printf
  1826                                  	LEAVE
    49 00000DE5 C9                  <1>  leave
  1827 00000DE6 E9D9010000              	jmp .Lend
  1828                                  
  1829                                  .Lfraction:
  1830 00000DEB 488B7701                	mov rsi, qword [rdi + 1]
  1831 00000DEF 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1832 00000DF3 4883FE00                	cmp rsi, 0
  1833 00000DF7 7415                    	je .Lrat_zero
  1834 00000DF9 4883FA01                	cmp rdx, 1
  1835 00000DFD 741E                    	je .Lrat_int
  1836 00000DFF 48BF-                   	mov rdi, fmt_fraction
  1836 00000E01 [A80C000000000000] 
  1837 00000E09 E9A1010000              	jmp .Lemit
  1838                                  
  1839                                  .Lrat_zero:
  1840 00000E0E 48BF-                   	mov rdi, fmt_zero
  1840 00000E10 [B00C000000000000] 
  1841 00000E18 E992010000              	jmp .Lemit
  1842                                  
  1843                                  .Lrat_int:
  1844 00000E1D 48BF-                   	mov rdi, fmt_int
  1844 00000E1F [B20C000000000000] 
  1845 00000E27 E983010000              	jmp .Lemit
  1846                                  
  1847                                  .Linteger:
  1848 00000E2C 488B7701                	mov rsi, qword [rdi + 1]
  1849 00000E30 48BF-                   	mov rdi, fmt_int
  1849 00000E32 [B20C000000000000] 
  1850 00000E3A E970010000              	jmp .Lemit
  1851                                  
  1852                                  .Lstring:
  1853 00000E3F 488D4709                	lea rax, [rdi + 1 + 8]
  1854 00000E43 50                      	push rax
  1855 00000E44 FF7701                  	push qword [rdi + 1]
  1856 00000E47 48BF-                   	mov rdi, fmt_dquote
  1856 00000E49 [FB0C000000000000] 
  1857 00000E51 B800000000              	mov rax, 0
  1858                                  	ENTER
    44 00000E56 C8000000            <1>  enter 0, 0
    45 00000E5A 4883E4F0            <1>  and rsp, ~15
  1859 00000E5E E8(00000000)            	call printf
  1860                                  	LEAVE
    49 00000E63 C9                  <1>  leave
  1861                                  .Lstring_loop:
  1862                                  	; qword [rsp]: limit
  1863                                  	; qword [rsp + 8*1]: char *
  1864 00000E64 48833C2400              	cmp qword [rsp], 0
  1865 00000E69 0F84FD000000            	je .Lstring_end
  1866 00000E6F 488B442408              	mov rax, qword [rsp + 8*1]
  1867 00000E74 8A00                    	mov al, byte [rax]
  1868 00000E76 4825FF000000            	and rax, 255
  1869 00000E7C 3C07                    	cmp al, 7
  1870 00000E7E 7468                            je .Lstring_char_7
  1871 00000E80 3C08                            cmp al, 8
  1872 00000E82 7470                            je .Lstring_char_8
  1873 00000E84 3C09                            cmp al, 9
  1874 00000E86 7478                            je .Lstring_char_9
  1875 00000E88 3C0A                            cmp al, 10
  1876 00000E8A 0F847C000000                    je .Lstring_char_10
  1877 00000E90 3C0B                            cmp al, 11
  1878 00000E92 0F8480000000                    je .Lstring_char_11
  1879 00000E98 3C0C                            cmp al, 12
  1880 00000E9A 0F8484000000                    je .Lstring_char_12
  1881 00000EA0 3C0D                            cmp al, 13
  1882 00000EA2 0F8488000000                    je .Lstring_char_13
  1883 00000EA8 3C22                            cmp al, 34
  1884 00000EAA 0F848C000000                    je .Lstring_char_34
  1885 00000EB0 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1887 00000EB2 3C20                            cmp al, ' '
  1888 00000EB4 0F8CA0000000                    jl .Lstring_char_hex
  1889 00000EBA 48BF-                           mov rdi, fmt_string_char
  1889 00000EBC [FD0C000000000000] 
  1890 00000EC4 4889C6                          mov rsi, rax
  1891                                  .Lstring_char_emit:
  1892 00000EC7 B800000000                      mov rax, 0
  1893                                          ENTER
    44 00000ECC C8000000            <1>  enter 0, 0
    45 00000ED0 4883E4F0            <1>  and rsp, ~15
  1894 00000ED4 E8(00000000)                    call printf
  1895                                          LEAVE
    49 00000ED9 C9                  <1>  leave
  1896 00000EDA 48FF0C24                        dec qword [rsp]
  1897 00000EDE 48FF442408                      inc qword [rsp + 8*1]
  1898 00000EE3 E97CFFFFFF                      jmp .Lstring_loop
  1899                                  
  1900                                  .Lstring_char_7:
  1901 00000EE8 48BF-                           mov rdi, fmt_string_char_7
  1901 00000EEA [000D000000000000] 
  1902 00000EF2 EBD3                            jmp .Lstring_char_emit
  1903                                  
  1904                                  .Lstring_char_8:
  1905 00000EF4 48BF-                           mov rdi, fmt_string_char_8
  1905 00000EF6 [030D000000000000] 
  1906 00000EFE EBC7                            jmp .Lstring_char_emit
  1907                                          
  1908                                  .Lstring_char_9:
  1909 00000F00 48BF-                           mov rdi, fmt_string_char_9
  1909 00000F02 [060D000000000000] 
  1910 00000F0A EBBB                            jmp .Lstring_char_emit
  1911                                  
  1912                                  .Lstring_char_10:
  1913 00000F0C 48BF-                           mov rdi, fmt_string_char_10
  1913 00000F0E [090D000000000000] 
  1914 00000F16 EBAF                            jmp .Lstring_char_emit
  1915                                  
  1916                                  .Lstring_char_11:
  1917 00000F18 48BF-                           mov rdi, fmt_string_char_11
  1917 00000F1A [0C0D000000000000] 
  1918 00000F22 EBA3                            jmp .Lstring_char_emit
  1919                                  
  1920                                  .Lstring_char_12:
  1921 00000F24 48BF-                           mov rdi, fmt_string_char_12
  1921 00000F26 [0F0D000000000000] 
  1922 00000F2E EB97                            jmp .Lstring_char_emit
  1923                                  
  1924                                  .Lstring_char_13:
  1925 00000F30 48BF-                           mov rdi, fmt_string_char_13
  1925 00000F32 [120D000000000000] 
  1926 00000F3A EB8B                            jmp .Lstring_char_emit
  1927                                  
  1928                                  .Lstring_char_34:
  1929 00000F3C 48BF-                           mov rdi, fmt_string_char_34
  1929 00000F3E [150D000000000000] 
  1930 00000F46 E97CFFFFFF                      jmp .Lstring_char_emit
  1931                                  
  1932                                  .Lstring_char_92:
  1933 00000F4B 48BF-                           mov rdi, fmt_string_char_92
  1933 00000F4D [180D000000000000] 
  1934 00000F55 E96DFFFFFF                      jmp .Lstring_char_emit
  1935                                  
  1936                                  .Lstring_char_hex:
  1937 00000F5A 48BF-                           mov rdi, fmt_string_char_hex
  1937 00000F5C [1B0D000000000000] 
  1938 00000F64 4889C6                          mov rsi, rax
  1939 00000F67 E95BFFFFFF                      jmp .Lstring_char_emit        
  1940                                  
  1941                                  .Lstring_end:
  1942 00000F6C 4883C410                	add rsp, 8 * 2
  1943 00000F70 48BF-                   	mov rdi, fmt_dquote
  1943 00000F72 [FB0C000000000000] 
  1944 00000F7A EB33                    	jmp .Lemit
  1945                                  
  1946                                  .Lunknown_sexpr_type:
  1947 00000F7C 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1947 00000F7E [B60C000000000000] 
  1948 00000F86 4825FF000000            	and rax, 255
  1949 00000F8C 4889C2                  	mov rdx, rax
  1950 00000F8F 4889F9                  	mov rcx, rdi
  1951 00000F92 488B3C25[00000000]      	mov rdi, qword [stderr]
  1952 00000F9A B800000000              	mov rax, 0
  1953                                          ENTER
    44 00000F9F C8000000            <1>  enter 0, 0
    45 00000FA3 4883E4F0            <1>  and rsp, ~15
  1954 00000FA7 E8(00000000)            	call fprintf
  1955                                          LEAVE
    49 00000FAC C9                  <1>  leave
  1956 00000FAD C9                              leave
  1957 00000FAE C3                              ret
  1958                                  
  1959                                  .Lemit:
  1960 00000FAF B800000000              	mov rax, 0
  1961                                          ENTER
    44 00000FB4 C8000000            <1>  enter 0, 0
    45 00000FB8 4883E4F0            <1>  and rsp, ~15
  1962 00000FBC E8(00000000)            	call printf
  1963                                          LEAVE
    49 00000FC1 C9                  <1>  leave
  1964 00000FC2 EB00                    	jmp .Lend
  1965                                  
  1966                                  .Lend:
  1967                                  	LEAVE
    49 00000FC4 C9                  <1>  leave
  1968 00000FC5 C3                      	ret
  1969                                  
  1970                                  ;;; rdi: address of free variable
  1971                                  ;;; rsi: address of code-pointer
  1972                                  bind_primitive:
  1973 00000FC6 C8000000                        enter 0, 0
  1974 00000FCA 57                              push rdi
  1975 00000FCB BF11000000                      mov rdi, (1 + 8 + 8)
  1976 00000FD0 E80DF9FFFF                      call malloc
  1977 00000FD5 5F                              pop rdi
  1978 00000FD6 C60004                          mov byte [rax], T_closure
  1979 00000FD9 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1980 00000FE1 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1981 00000FE5 488907                          mov qword [rdi], rax
  1982 00000FE8 48B8-                           mov rax, sob_void
  1982 00000FEA [0000000000000000] 
  1983 00000FF2 C9                              leave
  1984 00000FF3 C3                              ret
  1985                                  
  1986                                  L_code_ptr_ash:
  1987 00000FF4 C8000000                        enter 0, 0
  1988 00000FF8 48837D1802                      cmp COUNT, 2
  1989 00000FFD 0F85EC130000                    jne L_error_arg_count_2
  1990 00001003 488B7D20                        mov rdi, PARAM(0)
  1991                                          assert_integer(rdi)
    53 00001007 803F11              <1>  cmp byte [%1], %2
    54 0000100A 0F857E140000        <1>  jne L_error_incorrect_type
  1992 00001010 488B4D28                        mov rcx, PARAM(1)
  1993                                          assert_integer(rcx)
    53 00001014 803911              <1>  cmp byte [%1], %2
    54 00001017 0F8571140000        <1>  jne L_error_incorrect_type
  1994 0000101D 488B7F01                        mov rdi, qword [rdi + 1]
  1995 00001021 488B4901                        mov rcx, qword [rcx + 1]
  1996 00001025 4883F900                        cmp rcx, 0
  1997 00001029 7C0F                            jl .L_negative
  1998                                  .L_loop_positive:
  1999 0000102B 4883F900                        cmp rcx, 0
  2000 0000102F 741B                            je .L_exit
  2001 00001031 48D3E7                          sal rdi, cl
  2002 00001034 48C1E908                        shr rcx, 8
  2003 00001038 EBF1                            jmp .L_loop_positive
  2004                                  .L_negative:
  2005 0000103A 48F7D9                          neg rcx
  2006                                  .L_loop_negative:
  2007 0000103D 4883F900                        cmp rcx, 0
  2008 00001041 7409                            je .L_exit
  2009 00001043 48D3FF                          sar rdi, cl
  2010 00001046 48C1E908                        shr rcx, 8
  2011 0000104A EBF1                            jmp .L_loop_negative
  2012                                  .L_exit:
  2013 0000104C E8E9120000                      call make_integer
  2014 00001051 C9                              leave
  2015 00001052 C22000                          ret AND_KILL_FRAME(2)
  2016                                  
  2017                                  L_code_ptr_logand:
  2018 00001055 C8000000                        enter 0, 0
  2019 00001059 48837D1802                      cmp COUNT, 2
  2020 0000105E 0F858B130000                    jne L_error_arg_count_2
  2021 00001064 4C8B4520                        mov r8, PARAM(0)
  2022                                          assert_integer(r8)
    53 00001068 41803811            <1>  cmp byte [%1], %2
    54 0000106C 0F851C140000        <1>  jne L_error_incorrect_type
  2023 00001072 4C8B4D28                        mov r9, PARAM(1)
  2024                                          assert_integer(r9)
    53 00001076 41803911            <1>  cmp byte [%1], %2
    54 0000107A 0F850E140000        <1>  jne L_error_incorrect_type
  2025 00001080 498B7801                        mov rdi, qword [r8 + 1]
  2026 00001084 49237901                        and rdi, qword [r9 + 1]
  2027 00001088 E8AD120000                      call make_integer
  2028 0000108D C9                              leave
  2029 0000108E C22000                          ret AND_KILL_FRAME(2)
  2030                                  
  2031                                  L_code_ptr_logor:
  2032 00001091 C8000000                        enter 0, 0
  2033 00001095 48837D1802                      cmp COUNT, 2
  2034 0000109A 0F854F130000                    jne L_error_arg_count_2
  2035 000010A0 4C8B4520                        mov r8, PARAM(0)
  2036                                          assert_integer(r8)
    53 000010A4 41803811            <1>  cmp byte [%1], %2
    54 000010A8 0F85E0130000        <1>  jne L_error_incorrect_type
  2037 000010AE 4C8B4D28                        mov r9, PARAM(1)
  2038                                          assert_integer(r9)
    53 000010B2 41803911            <1>  cmp byte [%1], %2
    54 000010B6 0F85D2130000        <1>  jne L_error_incorrect_type
  2039 000010BC 498B7801                        mov rdi, qword [r8 + 1]
  2040 000010C0 490B7901                        or rdi, qword [r9 + 1]
  2041 000010C4 E871120000                      call make_integer
  2042 000010C9 C9                              leave
  2043 000010CA C22000                          ret AND_KILL_FRAME(2)
  2044                                  
  2045                                  L_code_ptr_logxor:
  2046 000010CD C8000000                        enter 0, 0
  2047 000010D1 48837D1802                      cmp COUNT, 2
  2048 000010D6 0F8513130000                    jne L_error_arg_count_2
  2049 000010DC 4C8B4520                        mov r8, PARAM(0)
  2050                                          assert_integer(r8)
    53 000010E0 41803811            <1>  cmp byte [%1], %2
    54 000010E4 0F85A4130000        <1>  jne L_error_incorrect_type
  2051 000010EA 4C8B4D28                        mov r9, PARAM(1)
  2052                                          assert_integer(r9)
    53 000010EE 41803911            <1>  cmp byte [%1], %2
    54 000010F2 0F8596130000        <1>  jne L_error_incorrect_type
  2053 000010F8 498B7801                        mov rdi, qword [r8 + 1]
  2054 000010FC 49337901                        xor rdi, qword [r9 + 1]
  2055 00001100 E835120000                      call make_integer
  2056                                          LEAVE
    49 00001105 C9                  <1>  leave
  2057 00001106 C22000                          ret AND_KILL_FRAME(2)
  2058                                  
  2059                                  L_code_ptr_lognot:
  2060 00001109 C8000000                        enter 0, 0
  2061 0000110D 48837D1801                      cmp COUNT, 1
  2062 00001112 0F85A2120000                    jne L_error_arg_count_1
  2063 00001118 4C8B4520                        mov r8, PARAM(0)
  2064                                          assert_integer(r8)
    53 0000111C 41803811            <1>  cmp byte [%1], %2
    54 00001120 0F8568130000        <1>  jne L_error_incorrect_type
  2065 00001126 498B7801                        mov rdi, qword [r8 + 1]
  2066 0000112A 48F7D7                          not rdi
  2067 0000112D E808120000                      call make_integer
  2068 00001132 C9                              leave
  2069 00001133 C21800                          ret AND_KILL_FRAME(1)
  2070                                  
  2071                                  L_code_ptr_bin_apply:
  2072 00001136 48837C241002                    cmp qword [rsp + 8 * 2], 2
  2073 0000113C 0F85AD120000                    jne L_error_arg_count_2
  2074 00001142 4C8B642418                      mov r12, qword [rsp + 8 * 3]
  2075                                          assert_closure(r12)
    53 00001147 41803C2404          <1>  cmp byte [%1], %2
    54 0000114C 0F853C130000        <1>  jne L_error_incorrect_type
  2076 00001152 4C8D542420                      lea r10, [rsp + 8 * 4]
  2077 00001157 4D8B1A                          mov r11, qword [r10]
  2078 0000115A 4C8B0C24                        mov r9, qword [rsp]
  2079 0000115E B900000000                      mov rcx, 0
  2080 00001163 4C89DE                          mov rsi, r11
  2081                                  .L0:
  2082 00001166 4881FE[01000000]                cmp rsi, sob_nil
  2083 0000116D 7412                            je .L0_out
  2084                                          assert_pair(rsi)
    53 0000116F 803E21              <1>  cmp byte [%1], %2
    54 00001172 0F8516130000        <1>  jne L_error_incorrect_type
  2085 00001178 48FFC1                          inc rcx
  2086 0000117B 488B7609                        mov rsi, SOB_PAIR_CDR(rsi)
  2087 0000117F EBE5                            jmp .L0
  2088                                  .L0_out:
  2089 00001181 488D1CCDF0FFFFFF                lea rbx, [8 * (rcx - 2)]
  2090 00001189 4829DC                          sub rsp, rbx
  2091 0000118C 4889E7                          mov rdi, rsp
  2092 0000118F FC                              cld
  2093                                          ; place ret addr
  2094 00001190 4C89C8                          mov rax, r9
  2095 00001193 48AB                            stosq
  2096                                          ; place env_f
  2097 00001195 498B442401                      mov rax, SOB_CLOSURE_ENV(r12)
  2098 0000119A 48AB                            stosq
  2099                                          ; place COUNT = rcx
  2100 0000119C 4889C8                          mov rax, rcx
  2101 0000119F 48AB                            stosq
  2102                                  .L1:
  2103 000011A1 4883F900                        cmp rcx, 0
  2104 000011A5 740F                            je .L1_out
  2105 000011A7 498B4301                        mov rax, SOB_PAIR_CAR(r11)
  2106 000011AB 48AB                            stosq
  2107 000011AD 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11)
  2108 000011B1 48FFC9                          dec rcx
  2109 000011B4 EBEB                            jmp .L1
  2110                                  .L1_out:
  2111 000011B6 4883EF08                        sub rdi, 8*1
  2112 000011BA 4939FA                          cmp r10, rdi
  2113 000011BD 7505                            jne .L_error_apply_stack_corrupted
  2114 000011BF 41FF642409                      jmp SOB_CLOSURE_CODE(r12)
  2115                                  .L_error_apply_stack_corrupted:
  2116 000011C4 CC                              int3
  2117                                  
  2118                                  L_code_ptr_is_null:
  2119 000011C5 C8000000                        enter 0, 0
  2120 000011C9 48837D1801                      cmp COUNT, 1
  2121 000011CE 0F85E6110000                    jne L_error_arg_count_1
  2122 000011D4 488B4520                        mov rax, PARAM(0)
  2123 000011D8 803801                          cmp byte [rax], T_nil
  2124 000011DB 750C                            jne .L_false
  2125 000011DD 48B8-                           mov rax, sob_boolean_true
  2125 000011DF [0300000000000000] 
  2126 000011E7 EB0A                            jmp .L_end
  2127                                  .L_false:
  2128 000011E9 48B8-                           mov rax, sob_boolean_false
  2128 000011EB [0200000000000000] 
  2129                                  .L_end:
  2130 000011F3 C9                              leave
  2131 000011F4 C21800                          ret AND_KILL_FRAME(1)
  2132                                  
  2133                                  L_code_ptr_is_pair:
  2134 000011F7 C8000000                        enter 0, 0
  2135 000011FB 48837D1801                      cmp COUNT, 1
  2136 00001200 0F85B4110000                    jne L_error_arg_count_1
  2137 00001206 488B4520                        mov rax, PARAM(0)
  2138 0000120A 803821                          cmp byte [rax], T_pair
  2139 0000120D 750C                            jne .L_false
  2140 0000120F 48B8-                           mov rax, sob_boolean_true
  2140 00001211 [0300000000000000] 
  2141 00001219 EB0A                            jmp .L_end
  2142                                  .L_false:
  2143 0000121B 48B8-                           mov rax, sob_boolean_false
  2143 0000121D [0200000000000000] 
  2144                                  .L_end:
  2145 00001225 C9                              leave
  2146 00001226 C21800                          ret AND_KILL_FRAME(1)
  2147                                          
  2148                                  L_code_ptr_is_void:
  2149 00001229 C8000000                        enter 0, 0
  2150 0000122D 48837D1801                      cmp COUNT, 1
  2151 00001232 0F8582110000                    jne L_error_arg_count_1
  2152 00001238 488B4520                        mov rax, PARAM(0)
  2153 0000123C 803800                          cmp byte [rax], T_void
  2154 0000123F 750C                            jne .L_false
  2155 00001241 48B8-                           mov rax, sob_boolean_true
  2155 00001243 [0300000000000000] 
  2156 0000124B EB0A                            jmp .L_end
  2157                                  .L_false:
  2158 0000124D 48B8-                           mov rax, sob_boolean_false
  2158 0000124F [0200000000000000] 
  2159                                  .L_end:
  2160 00001257 C9                              leave
  2161 00001258 C21800                          ret AND_KILL_FRAME(1)
  2162                                  
  2163                                  L_code_ptr_is_char:
  2164 0000125B C8000000                        enter 0, 0
  2165 0000125F 48837D1801                      cmp COUNT, 1
  2166 00001264 0F8550110000                    jne L_error_arg_count_1
  2167 0000126A 488B4520                        mov rax, PARAM(0)
  2168 0000126E 803802                          cmp byte [rax], T_char
  2169 00001271 750C                            jne .L_false
  2170 00001273 48B8-                           mov rax, sob_boolean_true
  2170 00001275 [0300000000000000] 
  2171 0000127D EB0A                            jmp .L_end
  2172                                  .L_false:
  2173 0000127F 48B8-                           mov rax, sob_boolean_false
  2173 00001281 [0200000000000000] 
  2174                                  .L_end:
  2175 00001289 C9                              leave
  2176 0000128A C21800                          ret AND_KILL_FRAME(1)
  2177                                  
  2178                                  L_code_ptr_is_string:
  2179 0000128D C8000000                        enter 0, 0
  2180 00001291 48837D1801                      cmp COUNT, 1
  2181 00001296 0F851E110000                    jne L_error_arg_count_1
  2182 0000129C 488B4520                        mov rax, PARAM(0)
  2183 000012A0 803803                          cmp byte [rax], T_string
  2184 000012A3 750C                            jne .L_false
  2185 000012A5 48B8-                           mov rax, sob_boolean_true
  2185 000012A7 [0300000000000000] 
  2186 000012AF EB0A                            jmp .L_end
  2187                                  .L_false:
  2188 000012B1 48B8-                           mov rax, sob_boolean_false
  2188 000012B3 [0200000000000000] 
  2189                                  .L_end:
  2190 000012BB C9                              leave
  2191 000012BC C21800                          ret AND_KILL_FRAME(1)
  2192                                  
  2193                                  L_code_ptr_is_symbol:
  2194 000012BF C8000000                        enter 0, 0
  2195 000012C3 48837D1801                      cmp COUNT, 1
  2196 000012C8 0F85EC100000                    jne L_error_arg_count_1
  2197 000012CE 4C8B4520                        mov r8, PARAM(0)
  2198 000012D2 41802040                        and byte [r8], T_symbol
  2199 000012D6 740C                            jz .L_false
  2200 000012D8 48B8-                           mov rax, sob_boolean_true
  2200 000012DA [0300000000000000] 
  2201 000012E2 EB0A                            jmp .L_exit
  2202                                  .L_false:
  2203 000012E4 48B8-                           mov rax, sob_boolean_false
  2203 000012E6 [0200000000000000] 
  2204                                  .L_exit:
  2205 000012EE C9                              leave
  2206 000012EF C21800                          ret AND_KILL_FRAME(1)
  2207                                  
  2208                                  L_code_ptr_is_uninterned_symbol:
  2209 000012F2 C8000000                        enter 0, 0
  2210 000012F6 48837D1801                      cmp COUNT, 1
  2211 000012FB 0F85B9100000                    jne L_error_arg_count_1
  2212 00001301 4C8B4520                        mov r8, PARAM(0)
  2213 00001305 41803842                        cmp byte [r8], T_uninterned_symbol
  2214 00001309 750C                            jne .L_false
  2215 0000130B 48B8-                           mov rax, sob_boolean_true
  2215 0000130D [0300000000000000] 
  2216 00001315 EB0A                            jmp .L_exit
  2217                                  .L_false:
  2218 00001317 48B8-                           mov rax, sob_boolean_false
  2218 00001319 [0200000000000000] 
  2219                                  .L_exit:
  2220 00001321 C9                              leave
  2221 00001322 C21800                          ret AND_KILL_FRAME(1)
  2222                                  
  2223                                  L_code_ptr_is_interned_symbol:
  2224 00001325 C8000000                        enter 0, 0
  2225 00001329 48837D1801                      cmp COUNT, 1
  2226 0000132E 0F8586100000                    jne L_error_arg_count_1
  2227 00001334 488B4520                        mov rax, PARAM(0)
  2228 00001338 803841                          cmp byte [rax], T_interned_symbol
  2229 0000133B 750C                            jne .L_false
  2230 0000133D 48B8-                           mov rax, sob_boolean_true
  2230 0000133F [0300000000000000] 
  2231 00001347 EB0A                            jmp .L_end
  2232                                  .L_false:
  2233 00001349 48B8-                           mov rax, sob_boolean_false
  2233 0000134B [0200000000000000] 
  2234                                  .L_end:
  2235 00001353 C9                              leave
  2236 00001354 C21800                          ret AND_KILL_FRAME(1)
  2237                                  
  2238                                  L_code_ptr_gensym:
  2239 00001357 C8000000                        enter 0, 0
  2240 0000135B 48837D1800                      cmp COUNT, 0
  2241 00001360 0F851F100000                    jne L_error_arg_count_0
  2242 00001366 48FF0425[210D0000]              inc qword [gensym_count]
  2243 0000136E BF09000000                      mov rdi, (1 + 8)
  2244 00001373 E86AF5FFFF                      call malloc
  2245 00001378 C60042                          mov byte [rax], T_uninterned_symbol
  2246 0000137B 488B0C25[210D0000]              mov rcx, qword [gensym_count]
  2247 00001383 48894801                        mov qword [rax + 1], rcx
  2248 00001387 C9                              leave
  2249 00001388 C21000                          ret AND_KILL_FRAME(0)
  2250                                  
  2251                                  L_code_ptr_is_vector:
  2252 0000138B C8000000                        enter 0, 0
  2253 0000138F 48837D1801                      cmp COUNT, 1
  2254 00001394 0F8520100000                    jne L_error_arg_count_1
  2255 0000139A 488B4520                        mov rax, PARAM(0)
  2256 0000139E 803822                          cmp byte [rax], T_vector
  2257 000013A1 750C                            jne .L_false
  2258 000013A3 48B8-                           mov rax, sob_boolean_true
  2258 000013A5 [0300000000000000] 
  2259 000013AD EB0A                            jmp .L_end
  2260                                  .L_false:
  2261 000013AF 48B8-                           mov rax, sob_boolean_false
  2261 000013B1 [0200000000000000] 
  2262                                  .L_end:
  2263 000013B9 C9                              leave
  2264 000013BA C21800                          ret AND_KILL_FRAME(1)
  2265                                  
  2266                                  L_code_ptr_is_closure:
  2267 000013BD C8000000                        enter 0, 0
  2268 000013C1 48837D1801                      cmp COUNT, 1
  2269 000013C6 0F85EE0F0000                    jne L_error_arg_count_1
  2270 000013CC 488B4520                        mov rax, PARAM(0)
  2271 000013D0 803804                          cmp byte [rax], T_closure
  2272 000013D3 750C                            jne .L_false
  2273 000013D5 48B8-                           mov rax, sob_boolean_true
  2273 000013D7 [0300000000000000] 
  2274 000013DF EB0A                            jmp .L_end
  2275                                  .L_false:
  2276 000013E1 48B8-                           mov rax, sob_boolean_false
  2276 000013E3 [0200000000000000] 
  2277                                  .L_end:
  2278 000013EB C9                              leave
  2279 000013EC C21800                          ret AND_KILL_FRAME(1)
  2280                                  
  2281                                  L_code_ptr_is_real:
  2282 000013EF C8000000                        enter 0, 0
  2283 000013F3 48837D1801                      cmp COUNT, 1
  2284 000013F8 0F85BC0F0000                    jne L_error_arg_count_1
  2285 000013FE 488B4520                        mov rax, PARAM(0)
  2286 00001402 803813                          cmp byte [rax], T_real
  2287 00001405 750C                            jne .L_false
  2288 00001407 48B8-                           mov rax, sob_boolean_true
  2288 00001409 [0300000000000000] 
  2289 00001411 EB0A                            jmp .L_end
  2290                                  .L_false:
  2291 00001413 48B8-                           mov rax, sob_boolean_false
  2291 00001415 [0200000000000000] 
  2292                                  .L_end:
  2293 0000141D C9                              leave
  2294 0000141E C21800                          ret AND_KILL_FRAME(1)
  2295                                  
  2296                                  L_code_ptr_is_fraction:
  2297 00001421 C8000000                        enter 0, 0
  2298 00001425 48837D1801                      cmp COUNT, 1
  2299 0000142A 0F858A0F0000                    jne L_error_arg_count_1
  2300 00001430 488B4520                        mov rax, PARAM(0)
  2301 00001434 803812                          cmp byte [rax], T_fraction
  2302 00001437 750C                            jne .L_false
  2303 00001439 48B8-                           mov rax, sob_boolean_true
  2303 0000143B [0300000000000000] 
  2304 00001443 EB0A                            jmp .L_end
  2305                                  .L_false:
  2306 00001445 48B8-                           mov rax, sob_boolean_false
  2306 00001447 [0200000000000000] 
  2307                                  .L_end:
  2308 0000144F C9                              leave
  2309 00001450 C21800                          ret AND_KILL_FRAME(1)
  2310                                  
  2311                                  L_code_ptr_is_boolean:
  2312 00001453 C8000000                        enter 0, 0
  2313 00001457 48837D1801                      cmp COUNT, 1
  2314 0000145C 0F85580F0000                    jne L_error_arg_count_1
  2315 00001462 488B4520                        mov rax, PARAM(0)
  2316 00001466 8A18                            mov bl, byte [rax]
  2317 00001468 80E308                          and bl, T_boolean
  2318 0000146B 740C                            je .L_false
  2319 0000146D 48B8-                           mov rax, sob_boolean_true
  2319 0000146F [0300000000000000] 
  2320 00001477 EB0A                            jmp .L_end
  2321                                  .L_false:
  2322 00001479 48B8-                           mov rax, sob_boolean_false
  2322 0000147B [0200000000000000] 
  2323                                  .L_end:
  2324 00001483 C9                              leave
  2325 00001484 C21800                          ret AND_KILL_FRAME(1)
  2326                                          
  2327                                  L_code_ptr_is_number:
  2328 00001487 C8000000                        enter 0, 0
  2329 0000148B 48837D1801                      cmp COUNT, 1
  2330 00001490 0F85240F0000                    jne L_error_arg_count_1
  2331 00001496 488B4520                        mov rax, PARAM(0)
  2332 0000149A 8A18                            mov bl, byte [rax]
  2333 0000149C 80E310                          and bl, T_number
  2334 0000149F 740C                            jz .L_false
  2335 000014A1 48B8-                           mov rax, sob_boolean_true
  2335 000014A3 [0300000000000000] 
  2336 000014AB EB0A                            jmp .L_end
  2337                                  .L_false:
  2338 000014AD 48B8-                           mov rax, sob_boolean_false
  2338 000014AF [0200000000000000] 
  2339                                  .L_end:
  2340 000014B7 C9                              leave
  2341 000014B8 C21800                          ret AND_KILL_FRAME(1)
  2342                                          
  2343                                  L_code_ptr_is_collection:
  2344 000014BB C8000000                        enter 0, 0
  2345 000014BF 48837D1801                      cmp COUNT, 1
  2346 000014C4 0F85F00E0000                    jne L_error_arg_count_1
  2347 000014CA 488B4520                        mov rax, PARAM(0)
  2348 000014CE 8A18                            mov bl, byte [rax]
  2349 000014D0 80E320                          and bl, T_collection
  2350 000014D3 740C                            je .L_false
  2351 000014D5 48B8-                           mov rax, sob_boolean_true
  2351 000014D7 [0300000000000000] 
  2352 000014DF EB0A                            jmp .L_end
  2353                                  .L_false:
  2354 000014E1 48B8-                           mov rax, sob_boolean_false
  2354 000014E3 [0200000000000000] 
  2355                                  .L_end:
  2356 000014EB C9                              leave
  2357 000014EC C21800                          ret AND_KILL_FRAME(1)
  2358                                  
  2359                                  L_code_ptr_cons:
  2360 000014EF C8000000                        enter 0, 0
  2361 000014F3 48837D1802                      cmp COUNT, 2
  2362 000014F8 0F85F10E0000                    jne L_error_arg_count_2
  2363 000014FE BF11000000                      mov rdi, (1 + 8 + 8)
  2364 00001503 E8DAF3FFFF                      call malloc
  2365 00001508 C60021                          mov byte [rax], T_pair
  2366 0000150B 488B5D20                        mov rbx, PARAM(0)
  2367 0000150F 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2368 00001513 488B5D28                        mov rbx, PARAM(1)
  2369 00001517 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2370 0000151B C9                              leave
  2371 0000151C C22000                          ret AND_KILL_FRAME(2)
  2372                                  
  2373                                  L_code_ptr_display_sexpr:
  2374 0000151F C8000000                        enter 0, 0
  2375 00001523 48837D1801                      cmp COUNT, 1
  2376 00001528 0F858C0E0000                    jne L_error_arg_count_1
  2377 0000152E 488B7D20                        mov rdi, PARAM(0)
  2378 00001532 E8E9F4FFFF                      call print_sexpr
  2379 00001537 48B8-                           mov rax, sob_void
  2379 00001539 [0000000000000000] 
  2380 00001541 C9                              leave
  2381 00001542 C21800                          ret AND_KILL_FRAME(1)
  2382                                  
  2383                                  L_code_ptr_write_char:
  2384 00001545 C8000000                        enter 0, 0
  2385 00001549 48837D1801                      cmp COUNT, 1
  2386 0000154E 0F85660E0000                    jne L_error_arg_count_1
  2387 00001554 488B4520                        mov rax, PARAM(0)
  2388                                          assert_char(rax)
    53 00001558 803802              <1>  cmp byte [%1], %2
    54 0000155B 0F852D0F0000        <1>  jne L_error_incorrect_type
  2389 00001561 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  2390 00001564 4825FF000000                    and rax, 255
  2391 0000156A 48BF-                           mov rdi, fmt_char
  2391 0000156C [290D000000000000] 
  2392 00001574 4889C6                          mov rsi, rax
  2393 00001577 B800000000                      mov rax, 0
  2394                                          ENTER
    44 0000157C C8000000            <1>  enter 0, 0
    45 00001580 4883E4F0            <1>  and rsp, ~15
  2395 00001584 E8(00000000)                    call printf
  2396                                          LEAVE
    49 00001589 C9                  <1>  leave
  2397 0000158A 48B8-                           mov rax, sob_void
  2397 0000158C [0000000000000000] 
  2398 00001594 C9                              leave
  2399 00001595 C21800                          ret AND_KILL_FRAME(1)
  2400                                  
  2401                                  L_code_ptr_car:
  2402 00001598 C8000000                        enter 0, 0
  2403 0000159C 48837D1801                      cmp COUNT, 1
  2404 000015A1 0F85130E0000                    jne L_error_arg_count_1
  2405 000015A7 488B4520                        mov rax, PARAM(0)
  2406                                          assert_pair(rax)
    53 000015AB 803821              <1>  cmp byte [%1], %2
    54 000015AE 0F85DA0E0000        <1>  jne L_error_incorrect_type
  2407 000015B4 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  2408 000015B8 C9                              leave
  2409 000015B9 C21800                          ret AND_KILL_FRAME(1)
  2410                                          
  2411                                  L_code_ptr_cdr:
  2412 000015BC C8000000                        enter 0, 0
  2413 000015C0 48837D1801                      cmp COUNT, 1
  2414 000015C5 0F85EF0D0000                    jne L_error_arg_count_1
  2415 000015CB 488B4520                        mov rax, PARAM(0)
  2416                                          assert_pair(rax)
    53 000015CF 803821              <1>  cmp byte [%1], %2
    54 000015D2 0F85B60E0000        <1>  jne L_error_incorrect_type
  2417 000015D8 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  2418 000015DC C9                              leave
  2419 000015DD C21800                          ret AND_KILL_FRAME(1)
  2420                                          
  2421                                  L_code_ptr_string_length:
  2422 000015E0 C8000000                        enter 0, 0
  2423 000015E4 48837D1801                      cmp COUNT, 1
  2424 000015E9 0F85CB0D0000                    jne L_error_arg_count_1
  2425 000015EF 488B4520                        mov rax, PARAM(0)
  2426                                          assert_string(rax)
    53 000015F3 803803              <1>  cmp byte [%1], %2
    54 000015F6 0F85920E0000        <1>  jne L_error_incorrect_type
  2427 000015FC 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  2428 00001600 E8350D0000                      call make_integer
  2429 00001605 C9                              leave
  2430 00001606 C21800                          ret AND_KILL_FRAME(1)
  2431                                  
  2432                                  L_code_ptr_vector_length:
  2433 00001609 C8000000                        enter 0, 0
  2434 0000160D 48837D1801                      cmp COUNT, 1
  2435 00001612 0F85A20D0000                    jne L_error_arg_count_1
  2436 00001618 488B4520                        mov rax, PARAM(0)
  2437                                          assert_vector(rax)
    53 0000161C 803822              <1>  cmp byte [%1], %2
    54 0000161F 0F85690E0000        <1>  jne L_error_incorrect_type
  2438 00001625 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  2439 00001629 E80C0D0000                      call make_integer
  2440 0000162E C9                              leave
  2441 0000162F C21800                          ret AND_KILL_FRAME(1)
  2442                                  
  2443                                  L_code_ptr_real_to_integer:
  2444 00001632 C8000000                        enter 0, 0
  2445 00001636 48837D1801                      cmp COUNT, 1
  2446 0000163B 0F85790D0000                    jne L_error_arg_count_1
  2447 00001641 488B5D20                        mov rbx, PARAM(0)
  2448                                          assert_real(rbx)
    53 00001645 803B13              <1>  cmp byte [%1], %2
    54 00001648 0F85400E0000        <1>  jne L_error_incorrect_type
  2449 0000164E F20F104301                      movsd xmm0, qword [rbx + 1]
  2450 00001653 F2480F2CF8                      cvttsd2si rdi, xmm0
  2451 00001658 E8DD0C0000                      call make_integer
  2452 0000165D C9                              leave
  2453 0000165E C21800                          ret AND_KILL_FRAME(1)
  2454                                  
  2455                                  L_code_ptr_exit:
  2456 00001661 C8000000                        enter 0, 0
  2457 00001665 48837D1800                      cmp COUNT, 0
  2458 0000166A 0F85150D0000                    jne L_error_arg_count_0
  2459 00001670 B800000000                      mov rax, 0
  2460 00001675 E8(00000000)                    call exit
  2461                                  
  2462                                  L_code_ptr_integer_to_real:
  2463 0000167A C8000000                        enter 0, 0
  2464 0000167E 48837D1801                      cmp COUNT, 1
  2465 00001683 0F85310D0000                    jne L_error_arg_count_1
  2466 00001689 488B4520                        mov rax, PARAM(0)
  2467                                          assert_integer(rax)
    53 0000168D 803811              <1>  cmp byte [%1], %2
    54 00001690 0F85F80D0000        <1>  jne L_error_incorrect_type
  2468 00001696 FF7001                          push qword [rax + 1]
  2469 00001699 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  2470 0000169F E87E0C0000                      call make_real
  2471 000016A4 C9                              leave
  2472 000016A5 C21800                          ret AND_KILL_FRAME(1)
  2473                                  
  2474                                  L_code_ptr_fraction_to_real:
  2475 000016A8 C8000000                        enter 0, 0
  2476 000016AC 48837D1801                      cmp COUNT, 1
  2477 000016B1 0F85030D0000                    jne L_error_arg_count_1
  2478 000016B7 488B4520                        mov rax, PARAM(0)
  2479                                          assert_fraction(rax)
    53 000016BB 803812              <1>  cmp byte [%1], %2
    54 000016BE 0F85CA0D0000        <1>  jne L_error_incorrect_type
  2480 000016C4 FF7001                          push qword [rax + 1]
  2481 000016C7 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  2482 000016CD FF7009                          push qword [rax + 1 + 8]
  2483 000016D0 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  2484 000016D6 F20F5EC1                        divsd xmm0, xmm1
  2485 000016DA E8430C0000                      call make_real
  2486 000016DF C9                              leave
  2487 000016E0 C21800                          ret AND_KILL_FRAME(1)
  2488                                  
  2489                                  L_code_ptr_char_to_integer:
  2490 000016E3 C8000000                        enter 0, 0
  2491 000016E7 48837D1801                      cmp COUNT, 1
  2492 000016EC 0F85C80C0000                    jne L_error_arg_count_1
  2493 000016F2 488B4520                        mov rax, PARAM(0)
  2494                                          assert_char(rax)
    53 000016F6 803802              <1>  cmp byte [%1], %2
    54 000016F9 0F858F0D0000        <1>  jne L_error_incorrect_type
  2495 000016FF 8A4001                          mov al, byte [rax + 1]
  2496 00001702 4825FF000000                    and rax, 255
  2497 00001708 4889C7                          mov rdi, rax
  2498 0000170B E82A0C0000                      call make_integer
  2499 00001710 C9                              leave
  2500 00001711 C21800                          ret AND_KILL_FRAME(1)
  2501                                  
  2502                                  L_code_ptr_integer_to_fraction:
  2503 00001714 C8000000                        enter 0, 0
  2504 00001718 48837D1801                      cmp COUNT, 1
  2505 0000171D 0F85970C0000                    jne L_error_arg_count_1
  2506 00001723 4C8B4520                        mov r8, PARAM(0)
  2507                                          assert_integer(r8)
    53 00001727 41803811            <1>  cmp byte [%1], %2
    54 0000172B 0F855D0D0000        <1>  jne L_error_incorrect_type
  2508 00001731 BF11000000                      mov rdi, (1 + 8 + 8)
  2509 00001736 E8A7F1FFFF                      call malloc
  2510 0000173B 498B5801                        mov rbx, qword [r8 + 1]
  2511 0000173F C60012                          mov byte [rax], T_fraction
  2512 00001742 48895801                        mov qword [rax + 1], rbx
  2513 00001746 48C7400901000000                mov qword [rax + 1 + 8], 1
  2514 0000174E C9                              leave
  2515 0000174F C21800                          ret AND_KILL_FRAME(1)
  2516                                  
  2517                                  L_code_ptr_integer_to_char:
  2518 00001752 C8000000                        enter 0, 0
  2519 00001756 48837D1801                      cmp COUNT, 1
  2520 0000175B 0F85590C0000                    jne L_error_arg_count_1
  2521 00001761 488B4520                        mov rax, PARAM(0)
  2522                                          assert_integer(rax)
    53 00001765 803811              <1>  cmp byte [%1], %2
    54 00001768 0F85200D0000        <1>  jne L_error_incorrect_type
  2523 0000176E 488B5801                        mov rbx, qword [rax + 1]
  2524 00001772 4883FB00                        cmp rbx, 0
  2525 00001776 0F8ED80B0000                    jle L_error_integer_range
  2526 0000177C 4881FB00010000                  cmp rbx, 256
  2527 00001783 0F8DCB0B0000                    jge L_error_integer_range
  2528 00001789 BF02000000                      mov rdi, (1 + 1)
  2529 0000178E E84FF1FFFF                      call malloc
  2530 00001793 C60002                          mov byte [rax], T_char
  2531 00001796 885801                          mov byte [rax + 1], bl
  2532 00001799 C9                              leave
  2533 0000179A C21800                          ret AND_KILL_FRAME(1)
  2534                                  
  2535                                  L_code_ptr_trng:
  2536 0000179D C8000000                        enter 0, 0
  2537 000017A1 48837D1800                      cmp COUNT, 0
  2538 000017A6 0F85D90B0000                    jne L_error_arg_count_0
  2539 000017AC 480FC7F7                        rdrand rdi
  2540 000017B0 48D1EF                          shr rdi, 1
  2541 000017B3 E8820B0000                      call make_integer
  2542 000017B8 C9                              leave
  2543 000017B9 C21000                          ret AND_KILL_FRAME(0)
  2544                                  
  2545                                  L_code_ptr_is_zero:
  2546 000017BC C8000000                        enter 0, 0
  2547 000017C0 48837D1801                      cmp COUNT, 1
  2548 000017C5 0F85EF0B0000                    jne L_error_arg_count_1
  2549 000017CB 488B4520                        mov rax, PARAM(0)
  2550 000017CF 803811                          cmp byte [rax], T_integer
  2551 000017D2 740F                            je .L_integer
  2552 000017D4 803812                          cmp byte [rax], T_fraction
  2553 000017D7 7413                            je .L_fraction
  2554 000017D9 803813                          cmp byte [rax], T_real
  2555 000017DC 7417                            je .L_real
  2556 000017DE E9AB0C0000                      jmp L_error_incorrect_type
  2557                                  .L_integer:
  2558 000017E3 4883780100                      cmp qword [rax + 1], 0
  2559 000017E8 7429                            je .L_zero
  2560 000017EA EB1B                            jmp .L_not_zero
  2561                                  .L_fraction:
  2562 000017EC 4883780100                      cmp qword [rax + 1], 0
  2563 000017F1 7420                            je .L_zero
  2564 000017F3 EB12                            jmp .L_not_zero
  2565                                  .L_real:
  2566 000017F5 660FEFC0                        pxor xmm0, xmm0
  2567 000017F9 FF7001                          push qword [rax + 1]
  2568 000017FC F20F100C24                      movsd xmm1, qword [rsp]
  2569 00001801 660F2EC1                        ucomisd xmm0, xmm1
  2570 00001805 740C                            je .L_zero
  2571                                  .L_not_zero:
  2572 00001807 48B8-                           mov rax, sob_boolean_false
  2572 00001809 [0200000000000000] 
  2573 00001811 EB0A                            jmp .L_end
  2574                                  .L_zero:
  2575 00001813 48B8-                           mov rax, sob_boolean_true
  2575 00001815 [0300000000000000] 
  2576                                  .L_end:
  2577 0000181D C9                              leave
  2578 0000181E C21800                          ret AND_KILL_FRAME(1)
  2579                                  
  2580                                  L_code_ptr_is_integer:
  2581 00001821 C8000000                        enter 0, 0
  2582 00001825 48837D1801                      cmp COUNT, 1
  2583 0000182A 0F858A0B0000                    jne L_error_arg_count_1
  2584 00001830 488B4520                        mov rax, PARAM(0)
  2585 00001834 803811                          cmp byte [rax], T_integer
  2586 00001837 750C                            jne .L_false
  2587 00001839 48B8-                           mov rax, sob_boolean_true
  2587 0000183B [0300000000000000] 
  2588 00001843 EB0A                            jmp .L_exit
  2589                                  .L_false:
  2590 00001845 48B8-                           mov rax, sob_boolean_false
  2590 00001847 [0200000000000000] 
  2591                                  .L_exit:
  2592 0000184F C9                              leave
  2593 00001850 C21800                          ret AND_KILL_FRAME(1)
  2594                                  
  2595                                  L_code_ptr_raw_bin_add_rr:
  2596 00001853 C8000000                        enter 0, 0
  2597 00001857 48837D1802                      cmp COUNT, 2
  2598 0000185C 0F858D0B0000                    jne L_error_arg_count_2
  2599 00001862 488B5D20                        mov rbx, PARAM(0)
  2600                                          assert_real(rbx)
    53 00001866 803B13              <1>  cmp byte [%1], %2
    54 00001869 0F851F0C0000        <1>  jne L_error_incorrect_type
  2601 0000186F 488B4D28                        mov rcx, PARAM(1)
  2602                                          assert_real(rcx)
    53 00001873 803913              <1>  cmp byte [%1], %2
    54 00001876 0F85120C0000        <1>  jne L_error_incorrect_type
  2603 0000187C F20F104301                      movsd xmm0, qword [rbx + 1]
  2604 00001881 F20F104901                      movsd xmm1, qword [rcx + 1]
  2605 00001886 F20F58C1                        addsd xmm0, xmm1
  2606 0000188A E8930A0000                      call make_real
  2607 0000188F C9                              leave
  2608 00001890 C22000                          ret AND_KILL_FRAME(2)
  2609                                  
  2610                                  L_code_ptr_raw_bin_sub_rr:
  2611 00001893 C8000000                        enter 0, 0
  2612 00001897 48837D1802                      cmp COUNT, 2
  2613 0000189C 0F854D0B0000                    jne L_error_arg_count_2
  2614 000018A2 488B5D20                        mov rbx, PARAM(0)
  2615                                          assert_real(rbx)
    53 000018A6 803B13              <1>  cmp byte [%1], %2
    54 000018A9 0F85DF0B0000        <1>  jne L_error_incorrect_type
  2616 000018AF 488B4D28                        mov rcx, PARAM(1)
  2617                                          assert_real(rcx)
    53 000018B3 803913              <1>  cmp byte [%1], %2
    54 000018B6 0F85D20B0000        <1>  jne L_error_incorrect_type
  2618 000018BC F20F104301                      movsd xmm0, qword [rbx + 1]
  2619 000018C1 F20F104901                      movsd xmm1, qword [rcx + 1]
  2620 000018C6 F20F5CC1                        subsd xmm0, xmm1
  2621 000018CA E8530A0000                      call make_real
  2622 000018CF C9                              leave
  2623 000018D0 C22000                          ret AND_KILL_FRAME(2)
  2624                                  
  2625                                  L_code_ptr_raw_bin_mul_rr:
  2626 000018D3 C8000000                        enter 0, 0
  2627 000018D7 48837D1802                      cmp COUNT, 2
  2628 000018DC 0F850D0B0000                    jne L_error_arg_count_2
  2629 000018E2 488B5D20                        mov rbx, PARAM(0)
  2630                                          assert_real(rbx)
    53 000018E6 803B13              <1>  cmp byte [%1], %2
    54 000018E9 0F859F0B0000        <1>  jne L_error_incorrect_type
  2631 000018EF 488B4D28                        mov rcx, PARAM(1)
  2632                                          assert_real(rcx)
    53 000018F3 803913              <1>  cmp byte [%1], %2
    54 000018F6 0F85920B0000        <1>  jne L_error_incorrect_type
  2633 000018FC F20F104301                      movsd xmm0, qword [rbx + 1]
  2634 00001901 F20F104901                      movsd xmm1, qword [rcx + 1]
  2635 00001906 F20F59C1                        mulsd xmm0, xmm1
  2636 0000190A E8130A0000                      call make_real
  2637 0000190F C9                              leave
  2638 00001910 C22000                          ret AND_KILL_FRAME(2)
  2639                                  
  2640                                  L_code_ptr_raw_bin_div_rr:
  2641 00001913 C8000000                        enter 0, 0
  2642 00001917 48837D1802                      cmp COUNT, 2
  2643 0000191C 0F85CD0A0000                    jne L_error_arg_count_2
  2644 00001922 488B5D20                        mov rbx, PARAM(0)
  2645                                          assert_real(rbx)
    53 00001926 803B13              <1>  cmp byte [%1], %2
    54 00001929 0F855F0B0000        <1>  jne L_error_incorrect_type
  2646 0000192F 488B4D28                        mov rcx, PARAM(1)
  2647                                          assert_real(rcx)
    53 00001933 803913              <1>  cmp byte [%1], %2
    54 00001936 0F85520B0000        <1>  jne L_error_incorrect_type
  2648 0000193C F20F104301                      movsd xmm0, qword [rbx + 1]
  2649 00001941 F20F104901                      movsd xmm1, qword [rcx + 1]
  2650 00001946 660FEFD2                        pxor xmm2, xmm2
  2651 0000194A 660F2ECA                        ucomisd xmm1, xmm2
  2652 0000194E 0F846B0B0000                    je L_error_division_by_zero
  2653 00001954 F20F5EC1                        divsd xmm0, xmm1
  2654 00001958 E8C5090000                      call make_real
  2655 0000195D C9                              leave
  2656 0000195E C22000                          ret AND_KILL_FRAME(2)
  2657                                  
  2658                                  L_code_ptr_raw_bin_add_zz:
  2659 00001961 C8000000                	enter 0, 0
  2660 00001965 48837D1802              	cmp COUNT, 2
  2661 0000196A 0F857F0A0000            	jne L_error_arg_count_2
  2662 00001970 4C8B4520                	mov r8, PARAM(0)
  2663                                  	assert_integer(r8)
    53 00001974 41803811            <1>  cmp byte [%1], %2
    54 00001978 0F85100B0000        <1>  jne L_error_incorrect_type
  2664 0000197E 4C8B4D28                	mov r9, PARAM(1)
  2665                                  	assert_integer(r9)
    53 00001982 41803911            <1>  cmp byte [%1], %2
    54 00001986 0F85020B0000        <1>  jne L_error_incorrect_type
  2666 0000198C 498B7801                	mov rdi, qword [r8 + 1]
  2667 00001990 49037901                	add rdi, qword [r9 + 1]
  2668 00001994 E8A1090000              	call make_integer
  2669 00001999 C9                      	leave
  2670 0000199A C22000                  	ret AND_KILL_FRAME(2)
  2671                                  	
  2672                                  L_code_ptr_raw_bin_add_qq:
  2673 0000199D C8000000                        enter 0, 0
  2674 000019A1 48837D1802                      cmp COUNT, 2
  2675 000019A6 0F85430A0000                    jne L_error_arg_count_2
  2676 000019AC 4C8B4520                        mov r8, PARAM(0)
  2677                                          assert_fraction(r8)
    53 000019B0 41803812            <1>  cmp byte [%1], %2
    54 000019B4 0F85D40A0000        <1>  jne L_error_incorrect_type
  2678 000019BA 4C8B4D28                        mov r9, PARAM(1)
  2679                                          assert_fraction(r9)
    53 000019BE 41803912            <1>  cmp byte [%1], %2
    54 000019C2 0F85C60A0000        <1>  jne L_error_incorrect_type
  2680 000019C8 498B4001                        mov rax, qword [r8 + 1] ; num1
  2681 000019CC 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2682 000019D0 4899                            cqo
  2683 000019D2 48F7EB                          imul rbx
  2684 000019D5 4889C6                          mov rsi, rax
  2685 000019D8 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2686 000019DC 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2687 000019E0 4899                            cqo
  2688 000019E2 48F7EB                          imul rbx
  2689 000019E5 4801C6                          add rsi, rax
  2690 000019E8 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2691 000019EC 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2692 000019F0 4899                            cqo
  2693 000019F2 48F7EB                          imul rbx
  2694 000019F5 4889C7                          mov rdi, rax
  2695 000019F8 E8DE010000                      call normalize_fraction
  2696 000019FD C9                              leave
  2697 000019FE C22000                          ret AND_KILL_FRAME(2)
  2698                                  
  2699                                  L_code_ptr_raw_bin_sub_zz:
  2700 00001A01 C8000000                	enter 0, 0
  2701 00001A05 48837D1802              	cmp COUNT, 2
  2702 00001A0A 0F85DF090000            	jne L_error_arg_count_2
  2703 00001A10 4C8B4520                	mov r8, PARAM(0)
  2704                                  	assert_integer(r8)
    53 00001A14 41803811            <1>  cmp byte [%1], %2
    54 00001A18 0F85700A0000        <1>  jne L_error_incorrect_type
  2705 00001A1E 4C8B4D28                	mov r9, PARAM(1)
  2706                                  	assert_integer(r9)
    53 00001A22 41803911            <1>  cmp byte [%1], %2
    54 00001A26 0F85620A0000        <1>  jne L_error_incorrect_type
  2707 00001A2C 498B7801                	mov rdi, qword [r8 + 1]
  2708 00001A30 492B7901                	sub rdi, qword [r9 + 1]
  2709 00001A34 E801090000              	call make_integer
  2710 00001A39 C9                      	leave
  2711 00001A3A C22000                  	ret AND_KILL_FRAME(2)
  2712                                  
  2713                                  L_code_ptr_raw_bin_sub_qq:
  2714 00001A3D C8000000                        enter 0, 0
  2715 00001A41 48837D1802                      cmp COUNT, 2
  2716 00001A46 0F85A3090000                    jne L_error_arg_count_2
  2717 00001A4C 4C8B4520                        mov r8, PARAM(0)
  2718                                          assert_fraction(r8)
    53 00001A50 41803812            <1>  cmp byte [%1], %2
    54 00001A54 0F85340A0000        <1>  jne L_error_incorrect_type
  2719 00001A5A 4C8B4D28                        mov r9, PARAM(1)
  2720                                          assert_fraction(r9)
    53 00001A5E 41803912            <1>  cmp byte [%1], %2
    54 00001A62 0F85260A0000        <1>  jne L_error_incorrect_type
  2721 00001A68 498B4001                        mov rax, qword [r8 + 1] ; num1
  2722 00001A6C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2723 00001A70 4899                            cqo
  2724 00001A72 48F7EB                          imul rbx
  2725 00001A75 4889C6                          mov rsi, rax
  2726 00001A78 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2727 00001A7C 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2728 00001A80 4899                            cqo
  2729 00001A82 48F7EB                          imul rbx
  2730 00001A85 4829C6                          sub rsi, rax
  2731 00001A88 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2732 00001A8C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2733 00001A90 4899                            cqo
  2734 00001A92 48F7EB                          imul rbx
  2735 00001A95 4889C7                          mov rdi, rax
  2736 00001A98 E83E010000                      call normalize_fraction
  2737 00001A9D C9                              leave
  2738 00001A9E C22000                          ret AND_KILL_FRAME(2)
  2739                                  
  2740                                  L_code_ptr_raw_bin_mul_zz:
  2741 00001AA1 C8000000                	enter 0, 0
  2742 00001AA5 48837D1802              	cmp COUNT, 2
  2743 00001AAA 0F853F090000            	jne L_error_arg_count_2
  2744 00001AB0 4C8B4520                	mov r8, PARAM(0)
  2745                                  	assert_integer(r8)
    53 00001AB4 41803811            <1>  cmp byte [%1], %2
    54 00001AB8 0F85D0090000        <1>  jne L_error_incorrect_type
  2746 00001ABE 4C8B4D28                	mov r9, PARAM(1)
  2747                                  	assert_integer(r9)
    53 00001AC2 41803911            <1>  cmp byte [%1], %2
    54 00001AC6 0F85C2090000        <1>  jne L_error_incorrect_type
  2748 00001ACC 4899                    	cqo
  2749 00001ACE 498B4001                	mov rax, qword [r8 + 1]
  2750 00001AD2 49F76101                	mul qword [r9 + 1]
  2751 00001AD6 4889C7                  	mov rdi, rax
  2752 00001AD9 E85C080000              	call make_integer
  2753 00001ADE C9                      	leave
  2754 00001ADF C22000                  	ret AND_KILL_FRAME(2)
  2755                                  
  2756                                  L_code_ptr_raw_bin_mul_qq:
  2757 00001AE2 C8000000                        enter 0, 0
  2758 00001AE6 48837D1802                      cmp COUNT, 2
  2759 00001AEB 0F85FE080000                    jne L_error_arg_count_2
  2760 00001AF1 4C8B4520                        mov r8, PARAM(0)
  2761                                          assert_fraction(r8)
    53 00001AF5 41803812            <1>  cmp byte [%1], %2
    54 00001AF9 0F858F090000        <1>  jne L_error_incorrect_type
  2762 00001AFF 4C8B4D28                        mov r9, PARAM(1)
  2763                                          assert_fraction(r9)
    53 00001B03 41803912            <1>  cmp byte [%1], %2
    54 00001B07 0F8581090000        <1>  jne L_error_incorrect_type
  2764 00001B0D 498B4001                        mov rax, qword [r8 + 1] ; num1
  2765 00001B11 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2766 00001B15 4899                            cqo
  2767 00001B17 48F7EB                          imul rbx
  2768 00001B1A 4889C6                          mov rsi, rax
  2769 00001B1D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2770 00001B21 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2771 00001B25 4899                            cqo
  2772 00001B27 48F7EB                          imul rbx
  2773 00001B2A 4889C7                          mov rdi, rax
  2774 00001B2D E8A9000000                      call normalize_fraction
  2775 00001B32 C9                              leave
  2776 00001B33 C22000                          ret AND_KILL_FRAME(2)
  2777                                          
  2778                                  L_code_ptr_raw_bin_div_zz:
  2779 00001B36 C8000000                	enter 0, 0
  2780 00001B3A 48837D1802              	cmp COUNT, 2
  2781 00001B3F 0F85AA080000            	jne L_error_arg_count_2
  2782 00001B45 4C8B4520                	mov r8, PARAM(0)
  2783                                  	assert_integer(r8)
    53 00001B49 41803811            <1>  cmp byte [%1], %2
    54 00001B4D 0F853B090000        <1>  jne L_error_incorrect_type
  2784 00001B53 4C8B4D28                	mov r9, PARAM(1)
  2785                                  	assert_integer(r9)
    53 00001B57 41803911            <1>  cmp byte [%1], %2
    54 00001B5B 0F852D090000        <1>  jne L_error_incorrect_type
  2786 00001B61 498B7901                	mov rdi, qword [r9 + 1]
  2787 00001B65 4883FF00                	cmp rdi, 0
  2788 00001B69 0F8450090000            	je L_error_division_by_zero
  2789 00001B6F 498B7001                	mov rsi, qword [r8 + 1]
  2790 00001B73 E863000000              	call normalize_fraction
  2791 00001B78 C9                      	leave
  2792 00001B79 C22000                  	ret AND_KILL_FRAME(2)
  2793                                  
  2794                                  L_code_ptr_raw_bin_div_qq:
  2795 00001B7C C8000000                        enter 0, 0
  2796 00001B80 48837D1802                      cmp COUNT, 2
  2797 00001B85 0F8564080000                    jne L_error_arg_count_2
  2798 00001B8B 4C8B4520                        mov r8, PARAM(0)
  2799                                          assert_fraction(r8)
    53 00001B8F 41803812            <1>  cmp byte [%1], %2
    54 00001B93 0F85F5080000        <1>  jne L_error_incorrect_type
  2800 00001B99 4C8B4D28                        mov r9, PARAM(1)
  2801                                          assert_fraction(r9)
    53 00001B9D 41803912            <1>  cmp byte [%1], %2
    54 00001BA1 0F85E7080000        <1>  jne L_error_incorrect_type
  2802 00001BA7 4983790100                      cmp qword [r9 + 1], 0
  2803 00001BAC 0F840D090000                    je L_error_division_by_zero
  2804 00001BB2 498B4001                        mov rax, qword [r8 + 1] ; num1
  2805 00001BB6 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2806 00001BBA 4899                            cqo
  2807 00001BBC 48F7EB                          imul rbx
  2808 00001BBF 4889C6                          mov rsi, rax
  2809 00001BC2 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2810 00001BC6 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2811 00001BCA 4899                            cqo
  2812 00001BCC 48F7EB                          imul rbx
  2813 00001BCF 4889C7                          mov rdi, rax
  2814 00001BD2 E804000000                      call normalize_fraction
  2815 00001BD7 C9                              leave
  2816 00001BD8 C22000                          ret AND_KILL_FRAME(2)
  2817                                          
  2818                                  normalize_fraction:
  2819 00001BDB 56                              push rsi
  2820 00001BDC 57                              push rdi
  2821 00001BDD E859000000                      call gcd
  2822 00001BE2 4889C3                          mov rbx, rax
  2823 00001BE5 58                              pop rax
  2824 00001BE6 4899                            cqo
  2825 00001BE8 48F7FB                          idiv rbx
  2826 00001BEB 4989C0                          mov r8, rax
  2827 00001BEE 58                              pop rax
  2828 00001BEF 4899                            cqo
  2829 00001BF1 48F7FB                          idiv rbx
  2830 00001BF4 4989C1                          mov r9, rax
  2831 00001BF7 4983F900                        cmp r9, 0
  2832 00001BFB 741C                            je .L_zero
  2833 00001BFD 4983F801                        cmp r8, 1
  2834 00001C01 7421                            je .L_int
  2835 00001C03 BF11000000                      mov rdi, (1 + 8 + 8)
  2836 00001C08 E8D5ECFFFF                      call malloc
  2837 00001C0D C60012                          mov byte [rax], T_fraction
  2838 00001C10 4C894801                        mov qword [rax + 1], r9
  2839 00001C14 4C894009                        mov qword [rax + 1 + 8], r8
  2840 00001C18 C3                              ret
  2841                                  .L_zero:
  2842 00001C19 BF00000000                      mov rdi, 0
  2843 00001C1E E817070000                      call make_integer
  2844 00001C23 C3                              ret
  2845                                  .L_int:
  2846 00001C24 4C89CF                          mov rdi, r9
  2847 00001C27 E80E070000                      call make_integer
  2848 00001C2C C3                              ret
  2849                                  
  2850                                  iabs:
  2851 00001C2D 4889F8                          mov rax, rdi
  2852 00001C30 4883F800                        cmp rax, 0
  2853 00001C34 7C01                            jl .Lneg
  2854 00001C36 C3                              ret
  2855                                  .Lneg:
  2856 00001C37 48F7D8                          neg rax
  2857 00001C3A C3                              ret
  2858                                  
  2859                                  gcd:
  2860 00001C3B E8EDFFFFFF                      call iabs
  2861 00001C40 4889C3                          mov rbx, rax
  2862 00001C43 4889F7                          mov rdi, rsi
  2863 00001C46 E8E2FFFFFF                      call iabs
  2864 00001C4B 4883F800                        cmp rax, 0
  2865 00001C4F 7502                            jne .L0
  2866 00001C51 4893                            xchg rax, rbx
  2867                                  .L0:
  2868 00001C53 4883FB00                        cmp rbx, 0
  2869 00001C57 740C                            je .L1
  2870 00001C59 4899                            cqo
  2871 00001C5B 48F7F3                          div rbx
  2872 00001C5E 4889D0                          mov rax, rdx
  2873 00001C61 4893                            xchg rax, rbx
  2874 00001C63 EBEE                            jmp .L0
  2875                                  .L1:
  2876 00001C65 C3                              ret
  2877                                  
  2878                                  L_code_ptr_error:
  2879 00001C66 C8000000                        enter 0, 0
  2880 00001C6A 48837D1802                      cmp COUNT, 2
  2881 00001C6F 0F857A070000                    jne L_error_arg_count_2
  2882 00001C75 488B7520                        mov rsi, PARAM(0)
  2883                                          assert_interned_symbol(rsi)
    53 00001C79 803E41              <1>  cmp byte [%1], %2
    54 00001C7C 0F850C080000        <1>  jne L_error_incorrect_type
  2884 00001C82 488B7528                        mov rsi, PARAM(1)
  2885                                          assert_string(rsi)
    53 00001C86 803E03              <1>  cmp byte [%1], %2
    54 00001C89 0F85FF070000        <1>  jne L_error_incorrect_type
  2886 00001C8F 48BF-                           mov rdi, fmt_scheme_error_part_1
  2886 00001C91 [610E000000000000] 
  2887 00001C99 B800000000                      mov rax, 0
  2888                                          ENTER
    44 00001C9E C8000000            <1>  enter 0, 0
    45 00001CA2 4883E4F0            <1>  and rsp, ~15
  2889 00001CA6 E8(00000000)                    call printf
  2890                                          LEAVE
    49 00001CAB C9                  <1>  leave
  2891 00001CAC 488B7D20                        mov rdi, PARAM(0)
  2892 00001CB0 E86BEDFFFF                      call print_sexpr
  2893 00001CB5 48BF-                           mov rdi, fmt_scheme_error_part_2
  2893 00001CB7 [750E000000000000] 
  2894 00001CBF B800000000                      mov rax, 0
  2895                                          ENTER
    44 00001CC4 C8000000            <1>  enter 0, 0
    45 00001CC8 4883E4F0            <1>  and rsp, ~15
  2896 00001CCC E8(00000000)                    call printf
  2897                                          LEAVE
    49 00001CD1 C9                  <1>  leave
  2898 00001CD2 488B4528                        mov rax, PARAM(1)       ; sob_string
  2899 00001CD6 BE01000000                      mov rsi, 1              ; size = 1 byte
  2900 00001CDB 488B5001                        mov rdx, qword [rax + 1] ; length
  2901 00001CDF 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2902 00001CE3 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2903 00001CEB E8(00000000)                    call fwrite
  2904 00001CF0 48BF-                           mov rdi, fmt_scheme_error_part_3
  2904 00001CF2 [B70E000000000000] 
  2905 00001CFA B800000000                      mov rax, 0
  2906                                          ENTER
    44 00001CFF C8000000            <1>  enter 0, 0
    45 00001D03 4883E4F0            <1>  and rsp, ~15
  2907 00001D07 E8(00000000)                    call printf
  2908                                          LEAVE
    49 00001D0C C9                  <1>  leave
  2909 00001D0D 48C7C0F7FFFFFF                  mov rax, -9
  2910 00001D14 E8(00000000)                    call exit
  2911                                  
  2912                                  L_code_ptr_raw_less_than_rr:
  2913 00001D19 C8000000                        enter 0, 0
  2914 00001D1D 48837D1802                      cmp COUNT, 2
  2915 00001D22 0F85C7060000                    jne L_error_arg_count_2
  2916 00001D28 488B7520                        mov rsi, PARAM(0)
  2917                                          assert_real(rsi)
    53 00001D2C 803E13              <1>  cmp byte [%1], %2
    54 00001D2F 0F8559070000        <1>  jne L_error_incorrect_type
  2918 00001D35 488B7D28                        mov rdi, PARAM(1)
  2919                                          assert_real(rdi)
    53 00001D39 803F13              <1>  cmp byte [%1], %2
    54 00001D3C 0F854C070000        <1>  jne L_error_incorrect_type
  2920 00001D42 F20F104601                      movsd xmm0, qword [rsi + 1]
  2921 00001D47 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2922 00001D4C 660F2FC1                        comisd xmm0, xmm1
  2923 00001D50 730C                            jae .L_false
  2924 00001D52 48B8-                           mov rax, sob_boolean_true
  2924 00001D54 [0300000000000000] 
  2925 00001D5C EB0A                            jmp .L_exit
  2926                                  .L_false:
  2927 00001D5E 48B8-                           mov rax, sob_boolean_false
  2927 00001D60 [0200000000000000] 
  2928                                  .L_exit:
  2929 00001D68 C9                              leave
  2930 00001D69 C22000                          ret AND_KILL_FRAME(2)
  2931                                          
  2932                                  L_code_ptr_raw_less_than_zz:
  2933 00001D6C C8000000                	enter 0, 0
  2934 00001D70 48837D1802              	cmp COUNT, 2
  2935 00001D75 0F8574060000            	jne L_error_arg_count_2
  2936 00001D7B 4C8B4520                	mov r8, PARAM(0)
  2937                                  	assert_integer(r8)
    53 00001D7F 41803811            <1>  cmp byte [%1], %2
    54 00001D83 0F8505070000        <1>  jne L_error_incorrect_type
  2938 00001D89 4C8B4D28                	mov r9, PARAM(1)
  2939                                  	assert_integer(r9)
    53 00001D8D 41803911            <1>  cmp byte [%1], %2
    54 00001D91 0F85F7060000        <1>  jne L_error_incorrect_type
  2940 00001D97 498B7801                	mov rdi, qword [r8 + 1]
  2941 00001D9B 493B7901                	cmp rdi, qword [r9 + 1]
  2942 00001D9F 7D0C                    	jge .L_false
  2943 00001DA1 48B8-                   	mov rax, sob_boolean_true
  2943 00001DA3 [0300000000000000] 
  2944 00001DAB EB0A                    	jmp .L_exit
  2945                                  .L_false:
  2946 00001DAD 48B8-                   	mov rax, sob_boolean_false
  2946 00001DAF [0200000000000000] 
  2947                                  .L_exit:
  2948 00001DB7 C9                      	leave
  2949 00001DB8 C22000                  	ret AND_KILL_FRAME(2)
  2950                                  
  2951                                  L_code_ptr_raw_less_than_qq:
  2952 00001DBB C8000000                        enter 0, 0
  2953 00001DBF 48837D1802                      cmp COUNT, 2
  2954 00001DC4 0F8525060000                    jne L_error_arg_count_2
  2955 00001DCA 488B7520                        mov rsi, PARAM(0)
  2956                                          assert_fraction(rsi)
    53 00001DCE 803E12              <1>  cmp byte [%1], %2
    54 00001DD1 0F85B7060000        <1>  jne L_error_incorrect_type
  2957 00001DD7 488B7D28                        mov rdi, PARAM(1)
  2958                                          assert_fraction(rdi)
    53 00001DDB 803F12              <1>  cmp byte [%1], %2
    54 00001DDE 0F85AA060000        <1>  jne L_error_incorrect_type
  2959 00001DE4 488B4601                        mov rax, qword [rsi + 1] ; num1
  2960 00001DE8 4899                            cqo
  2961 00001DEA 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2962 00001DEE 4889C1                          mov rcx, rax
  2963 00001DF1 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2964 00001DF5 4899                            cqo
  2965 00001DF7 48F76F01                        imul qword [rdi + 1]          ; num2
  2966 00001DFB 4829C1                          sub rcx, rax
  2967 00001DFE 7D0C                            jge .L_false
  2968 00001E00 48B8-                           mov rax, sob_boolean_true
  2968 00001E02 [0300000000000000] 
  2969 00001E0A EB0A                            jmp .L_exit
  2970                                  .L_false:
  2971 00001E0C 48B8-                           mov rax, sob_boolean_false
  2971 00001E0E [0200000000000000] 
  2972                                  .L_exit:
  2973 00001E16 C9                              leave
  2974 00001E17 C22000                          ret AND_KILL_FRAME(2)
  2975                                  
  2976                                  L_code_ptr_raw_equal_rr:
  2977 00001E1A C8000000                        enter 0, 0
  2978 00001E1E 48837D1802                      cmp COUNT, 2
  2979 00001E23 0F85C6050000                    jne L_error_arg_count_2
  2980 00001E29 488B7520                        mov rsi, PARAM(0)
  2981                                          assert_real(rsi)
    53 00001E2D 803E13              <1>  cmp byte [%1], %2
    54 00001E30 0F8558060000        <1>  jne L_error_incorrect_type
  2982 00001E36 488B7D28                        mov rdi, PARAM(1)
  2983                                          assert_real(rdi)
    53 00001E3A 803F13              <1>  cmp byte [%1], %2
    54 00001E3D 0F854B060000        <1>  jne L_error_incorrect_type
  2984 00001E43 F20F104601                      movsd xmm0, qword [rsi + 1]
  2985 00001E48 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2986 00001E4D 660F2FC1                        comisd xmm0, xmm1
  2987 00001E51 750C                            jne .L_false
  2988 00001E53 48B8-                           mov rax, sob_boolean_true
  2988 00001E55 [0300000000000000] 
  2989 00001E5D EB0A                            jmp .L_exit
  2990                                  .L_false:
  2991 00001E5F 48B8-                           mov rax, sob_boolean_false
  2991 00001E61 [0200000000000000] 
  2992                                  .L_exit:
  2993 00001E69 C9                              leave
  2994 00001E6A C22000                          ret AND_KILL_FRAME(2)
  2995                                          
  2996                                  L_code_ptr_raw_equal_zz:
  2997 00001E6D C8000000                	enter 0, 0
  2998 00001E71 48837D1802              	cmp COUNT, 2
  2999 00001E76 0F8573050000            	jne L_error_arg_count_2
  3000 00001E7C 4C8B4520                	mov r8, PARAM(0)
  3001                                  	assert_integer(r8)
    53 00001E80 41803811            <1>  cmp byte [%1], %2
    54 00001E84 0F8504060000        <1>  jne L_error_incorrect_type
  3002 00001E8A 4C8B4D28                	mov r9, PARAM(1)
  3003                                  	assert_integer(r9)
    53 00001E8E 41803911            <1>  cmp byte [%1], %2
    54 00001E92 0F85F6050000        <1>  jne L_error_incorrect_type
  3004 00001E98 498B7801                	mov rdi, qword [r8 + 1]
  3005 00001E9C 493B7901                	cmp rdi, qword [r9 + 1]
  3006 00001EA0 750C                    	jne .L_false
  3007 00001EA2 48B8-                   	mov rax, sob_boolean_true
  3007 00001EA4 [0300000000000000] 
  3008 00001EAC EB0A                    	jmp .L_exit
  3009                                  .L_false:
  3010 00001EAE 48B8-                   	mov rax, sob_boolean_false
  3010 00001EB0 [0200000000000000] 
  3011                                  .L_exit:
  3012 00001EB8 C9                      	leave
  3013 00001EB9 C22000                  	ret AND_KILL_FRAME(2)
  3014                                  
  3015                                  L_code_ptr_raw_equal_qq:
  3016 00001EBC C8000000                        enter 0, 0
  3017 00001EC0 48837D1802                      cmp COUNT, 2
  3018 00001EC5 0F8524050000                    jne L_error_arg_count_2
  3019 00001ECB 488B7520                        mov rsi, PARAM(0)
  3020                                          assert_fraction(rsi)
    53 00001ECF 803E12              <1>  cmp byte [%1], %2
    54 00001ED2 0F85B6050000        <1>  jne L_error_incorrect_type
  3021 00001ED8 488B7D28                        mov rdi, PARAM(1)
  3022                                          assert_fraction(rdi)
    53 00001EDC 803F12              <1>  cmp byte [%1], %2
    54 00001EDF 0F85A9050000        <1>  jne L_error_incorrect_type
  3023 00001EE5 488B4601                        mov rax, qword [rsi + 1] ; num1
  3024 00001EE9 4899                            cqo
  3025 00001EEB 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  3026 00001EEF 4889C1                          mov rcx, rax
  3027 00001EF2 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  3028 00001EF6 4899                            cqo
  3029 00001EF8 48F76F01                        imul qword [rdi + 1]          ; num2
  3030 00001EFC 4829C1                          sub rcx, rax
  3031 00001EFF 750C                            jne .L_false
  3032 00001F01 48B8-                           mov rax, sob_boolean_true
  3032 00001F03 [0300000000000000] 
  3033 00001F0B EB0A                            jmp .L_exit
  3034                                  .L_false:
  3035 00001F0D 48B8-                           mov rax, sob_boolean_false
  3035 00001F0F [0200000000000000] 
  3036                                  .L_exit:
  3037 00001F17 C9                              leave
  3038 00001F18 C22000                          ret AND_KILL_FRAME(2)
  3039                                  
  3040                                  L_code_ptr_quotient:
  3041 00001F1B C8000000                        enter 0, 0
  3042 00001F1F 48837D1802                      cmp COUNT, 2
  3043 00001F24 0F85C5040000                    jne L_error_arg_count_2
  3044 00001F2A 488B7520                        mov rsi, PARAM(0)
  3045                                          assert_integer(rsi)
    53 00001F2E 803E11              <1>  cmp byte [%1], %2
    54 00001F31 0F8557050000        <1>  jne L_error_incorrect_type
  3046 00001F37 488B7D28                        mov rdi, PARAM(1)
  3047                                          assert_integer(rdi)
    53 00001F3B 803F11              <1>  cmp byte [%1], %2
    54 00001F3E 0F854A050000        <1>  jne L_error_incorrect_type
  3048 00001F44 488B4601                        mov rax, qword [rsi + 1]
  3049 00001F48 488B5F01                        mov rbx, qword [rdi + 1]
  3050 00001F4C 4883FB00                        cmp rbx, 0
  3051 00001F50 0F8469050000                    je L_error_division_by_zero
  3052 00001F56 4899                            cqo
  3053 00001F58 48F7FB                          idiv rbx
  3054 00001F5B 4889C7                          mov rdi, rax
  3055 00001F5E E8D7030000                      call make_integer
  3056 00001F63 C9                              leave
  3057 00001F64 C22000                          ret AND_KILL_FRAME(2)
  3058                                          
  3059                                  L_code_ptr_remainder:
  3060 00001F67 C8000000                        enter 0, 0
  3061 00001F6B 48837D1802                      cmp COUNT, 2
  3062 00001F70 0F8579040000                    jne L_error_arg_count_2
  3063 00001F76 488B7520                        mov rsi, PARAM(0)
  3064                                          assert_integer(rsi)
    53 00001F7A 803E11              <1>  cmp byte [%1], %2
    54 00001F7D 0F850B050000        <1>  jne L_error_incorrect_type
  3065 00001F83 488B7D28                        mov rdi, PARAM(1)
  3066                                          assert_integer(rdi)
    53 00001F87 803F11              <1>  cmp byte [%1], %2
    54 00001F8A 0F85FE040000        <1>  jne L_error_incorrect_type
  3067 00001F90 488B4601                        mov rax, qword [rsi + 1]
  3068 00001F94 488B5F01                        mov rbx, qword [rdi + 1]
  3069 00001F98 4883FB00                        cmp rbx, 0
  3070 00001F9C 0F841D050000                    je L_error_division_by_zero
  3071 00001FA2 4899                            cqo
  3072 00001FA4 48F7FB                          idiv rbx
  3073 00001FA7 4889D7                          mov rdi, rdx
  3074 00001FAA E88B030000                      call make_integer
  3075 00001FAF C9                              leave
  3076 00001FB0 C22000                          ret AND_KILL_FRAME(2)
  3077                                  
  3078                                  L_code_ptr_set_car:
  3079 00001FB3 C8000000                        enter 0, 0
  3080 00001FB7 48837D1802                      cmp COUNT, 2
  3081 00001FBC 0F852D040000                    jne L_error_arg_count_2
  3082 00001FC2 488B4520                        mov rax, PARAM(0)
  3083                                          assert_pair(rax)
    53 00001FC6 803821              <1>  cmp byte [%1], %2
    54 00001FC9 0F85BF040000        <1>  jne L_error_incorrect_type
  3084 00001FCF 488B5D28                        mov rbx, PARAM(1)
  3085 00001FD3 48895801                        mov SOB_PAIR_CAR(rax), rbx
  3086 00001FD7 48B8-                           mov rax, sob_void
  3086 00001FD9 [0000000000000000] 
  3087 00001FE1 C9                              leave
  3088 00001FE2 C22000                          ret AND_KILL_FRAME(2)
  3089                                  
  3090                                  L_code_ptr_set_cdr:
  3091 00001FE5 C8000000                        enter 0, 0
  3092 00001FE9 48837D1802                      cmp COUNT, 2
  3093 00001FEE 0F85FB030000                    jne L_error_arg_count_2
  3094 00001FF4 488B4520                        mov rax, PARAM(0)
  3095                                          assert_pair(rax)
    53 00001FF8 803821              <1>  cmp byte [%1], %2
    54 00001FFB 0F858D040000        <1>  jne L_error_incorrect_type
  3096 00002001 488B5D28                        mov rbx, PARAM(1)
  3097 00002005 48895809                        mov SOB_PAIR_CDR(rax), rbx
  3098 00002009 48B8-                           mov rax, sob_void
  3098 0000200B [0000000000000000] 
  3099 00002013 C9                              leave
  3100 00002014 C22000                          ret AND_KILL_FRAME(2)
  3101                                  
  3102                                  L_code_ptr_string_ref:
  3103 00002017 C8000000                        enter 0, 0
  3104 0000201B 48837D1802                      cmp COUNT, 2
  3105 00002020 0F85C9030000                    jne L_error_arg_count_2
  3106 00002026 488B7D20                        mov rdi, PARAM(0)
  3107                                          assert_string(rdi)
    53 0000202A 803F03              <1>  cmp byte [%1], %2
    54 0000202D 0F855B040000        <1>  jne L_error_incorrect_type
  3108 00002033 488B7528                        mov rsi, PARAM(1)
  3109                                          assert_integer(rsi)
    53 00002037 803E11              <1>  cmp byte [%1], %2
    54 0000203A 0F854E040000        <1>  jne L_error_incorrect_type
  3110 00002040 488B5701                        mov rdx, qword [rdi + 1]
  3111 00002044 488B4E01                        mov rcx, qword [rsi + 1]
  3112 00002048 4839D1                          cmp rcx, rdx
  3113 0000204B 0F8D03030000                    jge L_error_integer_range
  3114 00002051 4883F900                        cmp rcx, 0
  3115 00002055 0F8CF9020000                    jl L_error_integer_range
  3116 0000205B 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  3117 0000205F BF02000000                      mov rdi, 2
  3118 00002064 E879E8FFFF                      call malloc
  3119 00002069 C60002                          mov byte [rax], T_char
  3120 0000206C 885801                          mov byte [rax + 1], bl
  3121 0000206F C9                              leave
  3122 00002070 C22000                          ret AND_KILL_FRAME(2)
  3123                                  
  3124                                  L_code_ptr_vector_ref:
  3125 00002073 C8000000                        enter 0, 0
  3126 00002077 48837D1802                      cmp COUNT, 2
  3127 0000207C 0F856D030000                    jne L_error_arg_count_2
  3128 00002082 488B7D20                        mov rdi, PARAM(0)
  3129                                          assert_vector(rdi)
    53 00002086 803F22              <1>  cmp byte [%1], %2
    54 00002089 0F85FF030000        <1>  jne L_error_incorrect_type
  3130 0000208F 488B7528                        mov rsi, PARAM(1)
  3131                                          assert_integer(rsi)
    53 00002093 803E11              <1>  cmp byte [%1], %2
    54 00002096 0F85F2030000        <1>  jne L_error_incorrect_type
  3132 0000209C 488B5701                        mov rdx, qword [rdi + 1]
  3133 000020A0 488B4E01                        mov rcx, qword [rsi + 1]
  3134 000020A4 4839D1                          cmp rcx, rdx
  3135 000020A7 0F8DA7020000                    jge L_error_integer_range
  3136 000020AD 4883F900                        cmp rcx, 0
  3137 000020B1 0F8C9D020000                    jl L_error_integer_range
  3138 000020B7 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  3139 000020BC C9                              leave
  3140 000020BD C22000                          ret AND_KILL_FRAME(2)
  3141                                  
  3142                                  L_code_ptr_vector_set:
  3143 000020C0 C8000000                        enter 0, 0
  3144 000020C4 48837D1803                      cmp COUNT, 3
  3145 000020C9 0F858A030000                    jne L_error_arg_count_3
  3146 000020CF 488B7D20                        mov rdi, PARAM(0)
  3147                                          assert_vector(rdi)
    53 000020D3 803F22              <1>  cmp byte [%1], %2
    54 000020D6 0F85B2030000        <1>  jne L_error_incorrect_type
  3148 000020DC 488B7528                        mov rsi, PARAM(1)
  3149                                          assert_integer(rsi)
    53 000020E0 803E11              <1>  cmp byte [%1], %2
    54 000020E3 0F85A5030000        <1>  jne L_error_incorrect_type
  3150 000020E9 488B5701                        mov rdx, qword [rdi + 1]
  3151 000020ED 488B4E01                        mov rcx, qword [rsi + 1]
  3152 000020F1 4839D1                          cmp rcx, rdx
  3153 000020F4 0F8D5A020000                    jge L_error_integer_range
  3154 000020FA 4883F900                        cmp rcx, 0
  3155 000020FE 0F8C50020000                    jl L_error_integer_range
  3156 00002104 488B4530                        mov rax, PARAM(2)
  3157 00002108 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  3158 0000210D 48B8-                           mov rax, sob_void
  3158 0000210F [0000000000000000] 
  3159 00002117 C9                              leave
  3160 00002118 C22800                          ret AND_KILL_FRAME(3)
  3161                                  
  3162                                  L_code_ptr_string_set:
  3163 0000211B C8000000                        enter 0, 0
  3164 0000211F 48837D1803                      cmp COUNT, 3
  3165 00002124 0F852F030000                    jne L_error_arg_count_3
  3166 0000212A 488B7D20                        mov rdi, PARAM(0)
  3167                                          assert_string(rdi)
    53 0000212E 803F03              <1>  cmp byte [%1], %2
    54 00002131 0F8557030000        <1>  jne L_error_incorrect_type
  3168 00002137 488B7528                        mov rsi, PARAM(1)
  3169                                          assert_integer(rsi)
    53 0000213B 803E11              <1>  cmp byte [%1], %2
    54 0000213E 0F854A030000        <1>  jne L_error_incorrect_type
  3170 00002144 488B5701                        mov rdx, qword [rdi + 1]
  3171 00002148 488B4E01                        mov rcx, qword [rsi + 1]
  3172 0000214C 4839D1                          cmp rcx, rdx
  3173 0000214F 0F8DFF010000                    jge L_error_integer_range
  3174 00002155 4883F900                        cmp rcx, 0
  3175 00002159 0F8CF5010000                    jl L_error_integer_range
  3176 0000215F 488B4530                        mov rax, PARAM(2)
  3177                                          assert_char(rax)
    53 00002163 803802              <1>  cmp byte [%1], %2
    54 00002166 0F8522030000        <1>  jne L_error_incorrect_type
  3178 0000216C 8A4001                          mov al, byte [rax + 1]
  3179 0000216F 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  3180 00002173 48B8-                           mov rax, sob_void
  3180 00002175 [0000000000000000] 
  3181 0000217D C9                              leave
  3182 0000217E C22800                          ret AND_KILL_FRAME(3)
  3183                                  
  3184                                  L_code_ptr_make_vector:
  3185 00002181 C8000000                        enter 0, 0
  3186 00002185 48837D1802                      cmp COUNT, 2
  3187 0000218A 0F855F020000                    jne L_error_arg_count_2
  3188 00002190 488B4D20                        mov rcx, PARAM(0)
  3189                                          assert_integer(rcx)
    53 00002194 803911              <1>  cmp byte [%1], %2
    54 00002197 0F85F1020000        <1>  jne L_error_incorrect_type
  3190 0000219D 488B4901                        mov rcx, qword [rcx + 1]
  3191 000021A1 4883F900                        cmp rcx, 0
  3192 000021A5 0F8CA9010000                    jl L_error_integer_range
  3193 000021AB 488B5528                        mov rdx, PARAM(1)
  3194 000021AF 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  3195 000021B7 E826E7FFFF                      call malloc
  3196 000021BC C60022                          mov byte [rax], T_vector
  3197 000021BF 48894801                        mov qword [rax + 1], rcx
  3198 000021C3 41B800000000                    mov r8, 0
  3199                                  .L0:
  3200 000021C9 4939C8                          cmp r8, rcx
  3201 000021CC 740A                            je .L1
  3202 000021CE 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  3203 000021D3 49FFC0                          inc r8
  3204 000021D6 EBF1                            jmp .L0
  3205                                  .L1:
  3206 000021D8 C9                              leave
  3207 000021D9 C22000                          ret AND_KILL_FRAME(2)
  3208                                          
  3209                                  L_code_ptr_make_string:
  3210 000021DC C8000000                        enter 0, 0
  3211 000021E0 48837D1802                      cmp COUNT, 2
  3212 000021E5 0F8504020000                    jne L_error_arg_count_2
  3213 000021EB 488B4D20                        mov rcx, PARAM(0)
  3214                                          assert_integer(rcx)
    53 000021EF 803911              <1>  cmp byte [%1], %2
    54 000021F2 0F8596020000        <1>  jne L_error_incorrect_type
  3215 000021F8 488B4901                        mov rcx, qword [rcx + 1]
  3216 000021FC 4883F900                        cmp rcx, 0
  3217 00002200 0F8C4E010000                    jl L_error_integer_range
  3218 00002206 488B5528                        mov rdx, PARAM(1)
  3219                                          assert_char(rdx)
    53 0000220A 803A02              <1>  cmp byte [%1], %2
    54 0000220D 0F857B020000        <1>  jne L_error_incorrect_type
  3220 00002213 8A5201                          mov dl, byte [rdx + 1]
  3221 00002216 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  3222 0000221A E8C3E6FFFF                      call malloc
  3223 0000221F C60003                          mov byte [rax], T_string
  3224 00002222 48894801                        mov qword [rax + 1], rcx
  3225 00002226 41B800000000                    mov r8, 0
  3226                                  .L0:
  3227 0000222C 4939C8                          cmp r8, rcx
  3228 0000222F 740A                            je .L1
  3229 00002231 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  3230 00002236 49FFC0                          inc r8
  3231 00002239 EBF1                            jmp .L0
  3232                                  .L1:
  3233 0000223B C9                              leave
  3234 0000223C C22000                          ret AND_KILL_FRAME(2)
  3235                                  
  3236                                  L_code_ptr_numerator:
  3237 0000223F C8000000                        enter 0, 0
  3238 00002243 48837D1801                      cmp COUNT, 1
  3239 00002248 0F856C010000                    jne L_error_arg_count_1
  3240 0000224E 488B4520                        mov rax, PARAM(0)
  3241                                          assert_fraction(rax)
    53 00002252 803812              <1>  cmp byte [%1], %2
    54 00002255 0F8533020000        <1>  jne L_error_incorrect_type
  3242 0000225B 488B7801                        mov rdi, qword [rax + 1]
  3243 0000225F E8D6000000                      call make_integer
  3244 00002264 C9                              leave
  3245 00002265 C21800                          ret AND_KILL_FRAME(1)
  3246                                          
  3247                                  L_code_ptr_denominator:
  3248 00002268 C8000000                        enter 0, 0
  3249 0000226C 48837D1801                      cmp COUNT, 1
  3250 00002271 0F8543010000                    jne L_error_arg_count_1
  3251 00002277 488B4520                        mov rax, PARAM(0)
  3252                                          assert_fraction(rax)
    53 0000227B 803812              <1>  cmp byte [%1], %2
    54 0000227E 0F850A020000        <1>  jne L_error_incorrect_type
  3253 00002284 488B7809                        mov rdi, qword [rax + 1 + 8]
  3254 00002288 E8AD000000                      call make_integer
  3255 0000228D C9                              leave
  3256 0000228E C21800                          ret AND_KILL_FRAME(1)
  3257                                  
  3258                                  L_code_ptr_is_eq:
  3259 00002291 C8000000                	enter 0, 0
  3260 00002295 48837D1802              	cmp COUNT, 2
  3261 0000229A 0F854F010000            	jne L_error_arg_count_2
  3262 000022A0 488B7D20                	mov rdi, PARAM(0)
  3263 000022A4 488B7528                	mov rsi, PARAM(1)
  3264 000022A8 4839F7                  	cmp rdi, rsi
  3265 000022AB 745B                    	je .L_eq_true
  3266 000022AD 8A17                    	mov dl, byte [rdi]
  3267 000022AF 3A16                    	cmp dl, byte [rsi]
  3268 000022B1 7561                    	jne .L_eq_false
  3269 000022B3 80FA02                  	cmp dl, T_char
  3270 000022B6 7448                    	je .L_char
  3271 000022B8 80FA41                  	cmp dl, T_interned_symbol
  3272 000022BB 742F                    	je .L_interned_symbol
  3273 000022BD 80FA42                          cmp dl, T_uninterned_symbol
  3274 000022C0 7432                            je .L_uninterned_symbol
  3275 000022C2 80FA13                  	cmp dl, T_real
  3276 000022C5 741D                    	je .L_real
  3277 000022C7 80FA12                  	cmp dl, T_fraction
  3278 000022CA 7402                    	je .L_fraction
  3279 000022CC EB46                    	jmp .L_eq_false
  3280                                  .L_fraction:
  3281 000022CE 488B4601                	mov rax, qword [rsi + 1]
  3282 000022D2 483B4701                	cmp rax, qword [rdi + 1]
  3283 000022D6 753C                    	jne .L_eq_false
  3284 000022D8 488B4609                	mov rax, qword [rsi + 1 + 8]
  3285 000022DC 483B4709                	cmp rax, qword [rdi + 1 + 8]
  3286 000022E0 7532                    	jne .L_eq_false
  3287 000022E2 EB24                    	jmp .L_eq_true
  3288                                  .L_real:
  3289 000022E4 488B4601                	mov rax, qword [rsi + 1]
  3290 000022E8 483B4701                	cmp rax, qword [rdi + 1]
  3291                                  .L_interned_symbol:
  3292                                  	; never reached, because interned_symbols are static!
  3293                                  	; but I'm keeping it in case, I'll ever change
  3294                                  	; the implementation
  3295 000022EC 488B4601                	mov rax, qword [rsi + 1]
  3296 000022F0 483B4701                	cmp rax, qword [rdi + 1]
  3297                                  .L_uninterned_symbol:
  3298 000022F4 4C8B4701                        mov r8, qword [rdi + 1]
  3299 000022F8 4C3B4601                        cmp r8, qword [rsi + 1]
  3300 000022FC 7516                            jne .L_eq_false
  3301 000022FE EB08                            jmp .L_eq_true
  3302                                  .L_char:
  3303 00002300 8A5E01                  	mov bl, byte [rsi + 1]
  3304 00002303 3A5F01                  	cmp bl, byte [rdi + 1]
  3305 00002306 750C                    	jne .L_eq_false
  3306                                  .L_eq_true:
  3307 00002308 48B8-                   	mov rax, sob_boolean_true
  3307 0000230A [0300000000000000] 
  3308 00002312 EB0A                    	jmp .L_eq_exit
  3309                                  .L_eq_false:
  3310 00002314 48B8-                   	mov rax, sob_boolean_false
  3310 00002316 [0200000000000000] 
  3311                                  .L_eq_exit:
  3312 0000231E C9                      	leave
  3313 0000231F C22000                  	ret AND_KILL_FRAME(2)
  3314                                  
  3315                                  make_real:
  3316 00002322 C8000000                        enter 0, 0
  3317 00002326 BF09000000                      mov rdi, (1 + 8)
  3318 0000232B E8B2E5FFFF                      call malloc
  3319 00002330 C60013                          mov byte [rax], T_real
  3320 00002333 F20F114001                      movsd qword [rax + 1], xmm0
  3321 00002338 C9                              leave 
  3322 00002339 C3                              ret
  3323                                          
  3324                                  make_integer:
  3325 0000233A C8000000                        enter 0, 0
  3326 0000233E 4889FE                          mov rsi, rdi
  3327 00002341 BF09000000                      mov rdi, (1 + 8)
  3328 00002346 E897E5FFFF                      call malloc
  3329 0000234B C60011                          mov byte [rax], T_integer
  3330 0000234E 48897001                        mov qword [rax + 1], rsi
  3331 00002352 C9                              leave
  3332 00002353 C3                              ret
  3333                                          
  3334                                  L_error_integer_range:
  3335 00002354 488B3C25[00000000]              mov rdi, qword [stderr]
  3336 0000235C 48BE-                           mov rsi, fmt_integer_range
  3336 0000235E [2E0E000000000000] 
  3337 00002366 B800000000                      mov rax, 0
  3338                                          ENTER
    44 0000236B C8000000            <1>  enter 0, 0
    45 0000236F 4883E4F0            <1>  and rsp, ~15
  3339 00002373 E8(00000000)                    call fprintf
  3340                                          LEAVE
    49 00002378 C9                  <1>  leave
  3341 00002379 48C7C0FBFFFFFF                  mov rax, -5
  3342 00002380 E8(00000000)                    call exit
  3343                                  
  3344                                  L_error_arg_count_0:
  3345 00002385 488B3C25[00000000]              mov rdi, qword [stderr]
  3346 0000238D 48BE-                           mov rsi, fmt_arg_count_0
  3346 0000238F [2C0D000000000000] 
  3347 00002397 488B5518                        mov rdx, COUNT
  3348 0000239B B800000000                      mov rax, 0
  3349                                          ENTER
    44 000023A0 C8000000            <1>  enter 0, 0
    45 000023A4 4883E4F0            <1>  and rsp, ~15
  3350 000023A8 E8(00000000)                    call fprintf
  3351                                          LEAVE
    49 000023AD C9                  <1>  leave
  3352 000023AE 48C7C0FDFFFFFF                  mov rax, -3
  3353 000023B5 E8(00000000)                    call exit
  3354                                  
  3355                                  L_error_arg_count_1:
  3356 000023BA 488B3C25[00000000]              mov rdi, qword [stderr]
  3357 000023C2 48BE-                           mov rsi, fmt_arg_count_1
  3357 000023C4 [540D000000000000] 
  3358 000023CC 488B5518                        mov rdx, COUNT
  3359 000023D0 B800000000                      mov rax, 0
  3360                                          ENTER
    44 000023D5 C8000000            <1>  enter 0, 0
    45 000023D9 4883E4F0            <1>  and rsp, ~15
  3361 000023DD E8(00000000)                    call fprintf
  3362                                          LEAVE
    49 000023E2 C9                  <1>  leave
  3363 000023E3 48C7C0FDFFFFFF                  mov rax, -3
  3364 000023EA E8(00000000)                    call exit
  3365                                  
  3366                                  L_error_arg_count_2:
  3367 000023EF 488B3C25[00000000]              mov rdi, qword [stderr]
  3368 000023F7 48BE-                           mov rsi, fmt_arg_count_2
  3368 000023F9 [BA0D000000000000] 
  3369 00002401 488B5518                        mov rdx, COUNT
  3370 00002405 B800000000                      mov rax, 0
  3371                                          ENTER
    44 0000240A C8000000            <1>  enter 0, 0
    45 0000240E 4883E4F0            <1>  and rsp, ~15
  3372 00002412 E8(00000000)                    call fprintf
  3373                                          LEAVE
    49 00002417 C9                  <1>  leave
  3374 00002418 48C7C0FDFFFFFF                  mov rax, -3
  3375 0000241F E8(00000000)                    call exit
  3376                                  
  3377                                  L_error_arg_count_12:
  3378 00002424 488B3C25[00000000]              mov rdi, qword [stderr]
  3379 0000242C 48BE-                           mov rsi, fmt_arg_count_12
  3379 0000242E [7A0D000000000000] 
  3380 00002436 488B5518                        mov rdx, COUNT
  3381 0000243A B800000000                      mov rax, 0
  3382                                          ENTER
    44 0000243F C8000000            <1>  enter 0, 0
    45 00002443 4883E4F0            <1>  and rsp, ~15
  3383 00002447 E8(00000000)                    call fprintf
  3384                                          LEAVE
    49 0000244C C9                  <1>  leave
  3385 0000244D 48C7C0FDFFFFFF                  mov rax, -3
  3386 00002454 E8(00000000)                    call exit
  3387                                  
  3388                                  L_error_arg_count_3:
  3389 00002459 488B3C25[00000000]              mov rdi, qword [stderr]
  3390 00002461 48BE-                           mov rsi, fmt_arg_count_3
  3390 00002463 [E10D000000000000] 
  3391 0000246B 488B5518                        mov rdx, COUNT
  3392 0000246F B800000000                      mov rax, 0
  3393                                          ENTER
    44 00002474 C8000000            <1>  enter 0, 0
    45 00002478 4883E4F0            <1>  and rsp, ~15
  3394 0000247C E8(00000000)                    call fprintf
  3395                                          LEAVE
    49 00002481 C9                  <1>  leave
  3396 00002482 48C7C0FDFFFFFF                  mov rax, -3
  3397 00002489 E8(00000000)                    call exit
  3398                                          
  3399                                  L_error_incorrect_type:
  3400 0000248E 488B3C25[00000000]              mov rdi, qword [stderr]
  3401 00002496 48BE-                           mov rsi, fmt_type
  3401 00002498 [0A0E000000000000] 
  3402 000024A0 B800000000                      mov rax, 0
  3403                                          ENTER
    44 000024A5 C8000000            <1>  enter 0, 0
    45 000024A9 4883E4F0            <1>  and rsp, ~15
  3404 000024AD E8(00000000)                    call fprintf
  3405                                          LEAVE
    49 000024B2 C9                  <1>  leave
  3406 000024B3 48C7C0FCFFFFFF                  mov rax, -4
  3407 000024BA E8(00000000)                    call exit
  3408                                  
  3409                                  L_error_division_by_zero:
  3410 000024BF 488B3C25[00000000]              mov rdi, qword [stderr]
  3411 000024C7 48BE-                           mov rsi, fmt_division_by_zero
  3411 000024C9 [4B0E000000000000] 
  3412 000024D1 B800000000                      mov rax, 0
  3413                                          ENTER
    44 000024D6 C8000000            <1>  enter 0, 0
    45 000024DA 4883E4F0            <1>  and rsp, ~15
  3414 000024DE E8(00000000)                    call fprintf
  3415                                          LEAVE
    49 000024E3 C9                  <1>  leave
  3416 000024E4 48C7C0F8FFFFFF                  mov rax, -8
  3417 000024EB E8(00000000)                    call exit
  3418                                  
  3419                                  section .data
  3420                                  gensym_count:
  3421 00000D21 0000000000000000                dq 0
  3422                                  fmt_char:
  3423 00000D29 256300                          db `%c\0`
  3424                                  fmt_arg_count_0:
  3425 00000D2C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  3425 00000D35 74696E67207A65726F-
  3425 00000D3E 20617267756D656E74-
  3425 00000D47 732E20466F756E6420-
  3425 00000D50 25640A00           
  3426                                  fmt_arg_count_1:
  3427 00000D54 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  3427 00000D5D 74696E67206F6E6520-
  3427 00000D66 617267756D656E742E-
  3427 00000D6F 20466F756E64202564-
  3427 00000D78 0A00               
  3428                                  fmt_arg_count_12:
  3429 00000D7A 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  3429 00000D83 74696E67206F6E6520-
  3429 00000D8C 726571756972656420-
  3429 00000D95 616E64206F6E65206F-
  3429 00000D9E 7074696F6E616C2061-
  3429 00000DA7 7267756D656E742E20-
  3429 00000DB0 466F756E642025640A-
  3429 00000DB9 00                 
  3430                                  fmt_arg_count_2:
  3431 00000DBA 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  3431 00000DC3 74696E672074776F20-
  3431 00000DCC 617267756D656E7473-
  3431 00000DD5 2E20466F756E642025-
  3431 00000DDE 640A00             
  3432                                  fmt_arg_count_3:
  3433 00000DE1 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  3433 00000DEA 74696E672074687265-
  3433 00000DF3 6520617267756D656E-
  3433 00000DFC 74732E20466F756E64-
  3433 00000E05 2025640A00         
  3434                                  fmt_type:
  3435 00000E0A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  3435 00000E13 696F6E207061737365-
  3435 00000E1C 6420696E636F727265-
  3435 00000E25 637420747970650A00 
  3436                                  fmt_integer_range:
  3437 00000E2E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  3437 00000E37 7265637420696E7465-
  3437 00000E40 6765722072616E6765-
  3437 00000E49 0A00               
  3438                                  fmt_division_by_zero:
  3439 00000E4B 212121204469766973-             db `!!! Division by zero\n\0`
  3439 00000E54 696F6E206279207A65-
  3439 00000E5D 726F0A00           
  3440                                  fmt_scheme_error_part_1:
  3441 00000E61 0A2121212054686520-             db `\n!!! The procedure \0`
  3441 00000E6A 70726F636564757265-
  3441 00000E73 2000               
  3442                                  fmt_scheme_error_part_2:
  3443 00000E75 2061736B656420746F-             db ` asked to terminate the program\n`
  3443 00000E7E 207465726D696E6174-
  3443 00000E87 65207468652070726F-
  3443 00000E90 6772616D0A         
  3444 00000E95 202020207769746820-             db `    with the following message:\n\n\0`
  3444 00000E9E 74686520666F6C6C6F-
  3444 00000EA7 77696E67206D657373-
  3444 00000EB0 6167653A0A0A00     
  3445                                  fmt_scheme_error_part_3:
  3446 00000EB7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  3446 00000EC0 210A0A00           
